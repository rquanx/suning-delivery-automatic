import "node:util";
import g, { stdout as stdout$1, stdin } from "node:process";
import * as f from "node:readline";
import f__default from "node:readline";
import { WriteStream } from "node:tty";
import require$$0$2 from "fs";
import require$$1$3 from "os";
import require$$0$4 from "events";
import require$$8 from "net";
import require$$5 from "crypto";
import require$$1$2 from "util";
import require$$2$1 from "tty";
import require$$1$1 from "path";
import require$$6 from "url";
import require$$9 from "tls";
import require$$10$1 from "assert";
import require$$0$3 from "child_process";
import require$$12 from "stream";
import require$$13 from "zlib";
import require$$14 from "buffer";
import require$$15$1 from "dns";
import require$$2 from "https";
import require$$19 from "http";
import require$$20 from "constants";
import require$$0$5 from "async_hooks";
import require$$2$2 from "readline";
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x2) {
  return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
}
function getAugmentedNamespace(n) {
  if (n.__esModule) return n;
  var f2 = n.default;
  if (typeof f2 == "function") {
    var a = function a2() {
      if (this instanceof a2) {
        return Reflect.construct(f2, arguments, this.constructor);
      }
      return f2.apply(this, arguments);
    };
    a.prototype = f2.prototype;
  } else a = {};
  Object.defineProperty(a, "__esModule", { value: true });
  Object.keys(n).forEach(function(k2) {
    var d2 = Object.getOwnPropertyDescriptor(n, k2);
    Object.defineProperty(a, k2, d2.get ? d2 : {
      enumerable: true,
      get: function() {
        return n[k2];
      }
    });
  });
  return a;
}
var src;
var hasRequiredSrc;
function requireSrc() {
  if (hasRequiredSrc) return src;
  hasRequiredSrc = 1;
  const ESC = "\x1B";
  const CSI = `${ESC}[`;
  const beep = "\x07";
  const cursor = {
    to(x2, y2) {
      if (!y2) return `${CSI}${x2 + 1}G`;
      return `${CSI}${y2 + 1};${x2 + 1}H`;
    },
    move(x2, y2) {
      let ret = "";
      if (x2 < 0) ret += `${CSI}${-x2}D`;
      else if (x2 > 0) ret += `${CSI}${x2}C`;
      if (y2 < 0) ret += `${CSI}${-y2}A`;
      else if (y2 > 0) ret += `${CSI}${y2}B`;
      return ret;
    },
    up: (count = 1) => `${CSI}${count}A`,
    down: (count = 1) => `${CSI}${count}B`,
    forward: (count = 1) => `${CSI}${count}C`,
    backward: (count = 1) => `${CSI}${count}D`,
    nextLine: (count = 1) => `${CSI}E`.repeat(count),
    prevLine: (count = 1) => `${CSI}F`.repeat(count),
    left: `${CSI}G`,
    hide: `${CSI}?25l`,
    show: `${CSI}?25h`,
    save: `${ESC}7`,
    restore: `${ESC}8`
  };
  const scroll = {
    up: (count = 1) => `${CSI}S`.repeat(count),
    down: (count = 1) => `${CSI}T`.repeat(count)
  };
  const erase = {
    screen: `${CSI}2J`,
    up: (count = 1) => `${CSI}1J`.repeat(count),
    down: (count = 1) => `${CSI}J`.repeat(count),
    line: `${CSI}2K`,
    lineEnd: `${CSI}K`,
    lineStart: `${CSI}1K`,
    lines(count) {
      let clear = "";
      for (let i = 0; i < count; i++)
        clear += this.line + (i < count - 1 ? cursor.up() : "");
      if (count)
        clear += cursor.left;
      return clear;
    }
  };
  src = { cursor, scroll, erase, beep };
  return src;
}
var srcExports = requireSrc();
var picocolors_browser = { exports: {} };
var hasRequiredPicocolors_browser;
function requirePicocolors_browser() {
  if (hasRequiredPicocolors_browser) return picocolors_browser.exports;
  hasRequiredPicocolors_browser = 1;
  var x2 = String;
  var create = function() {
    return { isColorSupported: false, reset: x2, bold: x2, dim: x2, italic: x2, underline: x2, inverse: x2, hidden: x2, strikethrough: x2, black: x2, red: x2, green: x2, yellow: x2, blue: x2, magenta: x2, cyan: x2, white: x2, gray: x2, bgBlack: x2, bgRed: x2, bgGreen: x2, bgYellow: x2, bgBlue: x2, bgMagenta: x2, bgCyan: x2, bgWhite: x2, blackBright: x2, redBright: x2, greenBright: x2, yellowBright: x2, blueBright: x2, magentaBright: x2, cyanBright: x2, whiteBright: x2, bgBlackBright: x2, bgRedBright: x2, bgGreenBright: x2, bgYellowBright: x2, bgBlueBright: x2, bgMagentaBright: x2, bgCyanBright: x2, bgWhiteBright: x2 };
  };
  picocolors_browser.exports = create();
  picocolors_browser.exports.createColors = create;
  return picocolors_browser.exports;
}
var picocolors_browserExports = /* @__PURE__ */ requirePicocolors_browser();
const e = /* @__PURE__ */ getDefaultExportFromCjs(picocolors_browserExports);
function J({ onlyFirst: t = false } = {}) {
  const F = ["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?(?:\\u0007|\\u001B\\u005C|\\u009C))", "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))"].join("|");
  return new RegExp(F, t ? void 0 : "g");
}
const Q = J();
function T(t) {
  if (typeof t != "string") throw new TypeError(`Expected a \`string\`, got \`${typeof t}\``);
  return t.replace(Q, "");
}
function O(t) {
  return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t;
}
var P$1 = { exports: {} };
(function(t) {
  var u2 = {};
  t.exports = u2, u2.eastAsianWidth = function(e2) {
    var s2 = e2.charCodeAt(0), i = e2.length == 2 ? e2.charCodeAt(1) : 0, D = s2;
    return 55296 <= s2 && s2 <= 56319 && 56320 <= i && i <= 57343 && (s2 &= 1023, i &= 1023, D = s2 << 10 | i, D += 65536), D == 12288 || 65281 <= D && D <= 65376 || 65504 <= D && D <= 65510 ? "F" : D == 8361 || 65377 <= D && D <= 65470 || 65474 <= D && D <= 65479 || 65482 <= D && D <= 65487 || 65490 <= D && D <= 65495 || 65498 <= D && D <= 65500 || 65512 <= D && D <= 65518 ? "H" : 4352 <= D && D <= 4447 || 4515 <= D && D <= 4519 || 4602 <= D && D <= 4607 || 9001 <= D && D <= 9002 || 11904 <= D && D <= 11929 || 11931 <= D && D <= 12019 || 12032 <= D && D <= 12245 || 12272 <= D && D <= 12283 || 12289 <= D && D <= 12350 || 12353 <= D && D <= 12438 || 12441 <= D && D <= 12543 || 12549 <= D && D <= 12589 || 12593 <= D && D <= 12686 || 12688 <= D && D <= 12730 || 12736 <= D && D <= 12771 || 12784 <= D && D <= 12830 || 12832 <= D && D <= 12871 || 12880 <= D && D <= 13054 || 13056 <= D && D <= 19903 || 19968 <= D && D <= 42124 || 42128 <= D && D <= 42182 || 43360 <= D && D <= 43388 || 44032 <= D && D <= 55203 || 55216 <= D && D <= 55238 || 55243 <= D && D <= 55291 || 63744 <= D && D <= 64255 || 65040 <= D && D <= 65049 || 65072 <= D && D <= 65106 || 65108 <= D && D <= 65126 || 65128 <= D && D <= 65131 || 110592 <= D && D <= 110593 || 127488 <= D && D <= 127490 || 127504 <= D && D <= 127546 || 127552 <= D && D <= 127560 || 127568 <= D && D <= 127569 || 131072 <= D && D <= 194367 || 177984 <= D && D <= 196605 || 196608 <= D && D <= 262141 ? "W" : 32 <= D && D <= 126 || 162 <= D && D <= 163 || 165 <= D && D <= 166 || D == 172 || D == 175 || 10214 <= D && D <= 10221 || 10629 <= D && D <= 10630 ? "Na" : D == 161 || D == 164 || 167 <= D && D <= 168 || D == 170 || 173 <= D && D <= 174 || 176 <= D && D <= 180 || 182 <= D && D <= 186 || 188 <= D && D <= 191 || D == 198 || D == 208 || 215 <= D && D <= 216 || 222 <= D && D <= 225 || D == 230 || 232 <= D && D <= 234 || 236 <= D && D <= 237 || D == 240 || 242 <= D && D <= 243 || 247 <= D && D <= 250 || D == 252 || D == 254 || D == 257 || D == 273 || D == 275 || D == 283 || 294 <= D && D <= 295 || D == 299 || 305 <= D && D <= 307 || D == 312 || 319 <= D && D <= 322 || D == 324 || 328 <= D && D <= 331 || D == 333 || 338 <= D && D <= 339 || 358 <= D && D <= 359 || D == 363 || D == 462 || D == 464 || D == 466 || D == 468 || D == 470 || D == 472 || D == 474 || D == 476 || D == 593 || D == 609 || D == 708 || D == 711 || 713 <= D && D <= 715 || D == 717 || D == 720 || 728 <= D && D <= 731 || D == 733 || D == 735 || 768 <= D && D <= 879 || 913 <= D && D <= 929 || 931 <= D && D <= 937 || 945 <= D && D <= 961 || 963 <= D && D <= 969 || D == 1025 || 1040 <= D && D <= 1103 || D == 1105 || D == 8208 || 8211 <= D && D <= 8214 || 8216 <= D && D <= 8217 || 8220 <= D && D <= 8221 || 8224 <= D && D <= 8226 || 8228 <= D && D <= 8231 || D == 8240 || 8242 <= D && D <= 8243 || D == 8245 || D == 8251 || D == 8254 || D == 8308 || D == 8319 || 8321 <= D && D <= 8324 || D == 8364 || D == 8451 || D == 8453 || D == 8457 || D == 8467 || D == 8470 || 8481 <= D && D <= 8482 || D == 8486 || D == 8491 || 8531 <= D && D <= 8532 || 8539 <= D && D <= 8542 || 8544 <= D && D <= 8555 || 8560 <= D && D <= 8569 || D == 8585 || 8592 <= D && D <= 8601 || 8632 <= D && D <= 8633 || D == 8658 || D == 8660 || D == 8679 || D == 8704 || 8706 <= D && D <= 8707 || 8711 <= D && D <= 8712 || D == 8715 || D == 8719 || D == 8721 || D == 8725 || D == 8730 || 8733 <= D && D <= 8736 || D == 8739 || D == 8741 || 8743 <= D && D <= 8748 || D == 8750 || 8756 <= D && D <= 8759 || 8764 <= D && D <= 8765 || D == 8776 || D == 8780 || D == 8786 || 8800 <= D && D <= 8801 || 8804 <= D && D <= 8807 || 8810 <= D && D <= 8811 || 8814 <= D && D <= 8815 || 8834 <= D && D <= 8835 || 8838 <= D && D <= 8839 || D == 8853 || D == 8857 || D == 8869 || D == 8895 || D == 8978 || 9312 <= D && D <= 9449 || 9451 <= D && D <= 9547 || 9552 <= D && D <= 9587 || 9600 <= D && D <= 9615 || 9618 <= D && D <= 9621 || 9632 <= D && D <= 9633 || 9635 <= D && D <= 9641 || 9650 <= D && D <= 9651 || 9654 <= D && D <= 9655 || 9660 <= D && D <= 9661 || 9664 <= D && D <= 9665 || 9670 <= D && D <= 9672 || D == 9675 || 9678 <= D && D <= 9681 || 9698 <= D && D <= 9701 || D == 9711 || 9733 <= D && D <= 9734 || D == 9737 || 9742 <= D && D <= 9743 || 9748 <= D && D <= 9749 || D == 9756 || D == 9758 || D == 9792 || D == 9794 || 9824 <= D && D <= 9825 || 9827 <= D && D <= 9829 || 9831 <= D && D <= 9834 || 9836 <= D && D <= 9837 || D == 9839 || 9886 <= D && D <= 9887 || 9918 <= D && D <= 9919 || 9924 <= D && D <= 9933 || 9935 <= D && D <= 9953 || D == 9955 || 9960 <= D && D <= 9983 || D == 10045 || D == 10071 || 10102 <= D && D <= 10111 || 11093 <= D && D <= 11097 || 12872 <= D && D <= 12879 || 57344 <= D && D <= 63743 || 65024 <= D && D <= 65039 || D == 65533 || 127232 <= D && D <= 127242 || 127248 <= D && D <= 127277 || 127280 <= D && D <= 127337 || 127344 <= D && D <= 127386 || 917760 <= D && D <= 917999 || 983040 <= D && D <= 1048573 || 1048576 <= D && D <= 1114109 ? "A" : "N";
  }, u2.characterLength = function(e2) {
    var s2 = this.eastAsianWidth(e2);
    return s2 == "F" || s2 == "W" || s2 == "A" ? 2 : 1;
  };
  function F(e2) {
    return e2.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]|[^\uD800-\uDFFF]/g) || [];
  }
  u2.length = function(e2) {
    for (var s2 = F(e2), i = 0, D = 0; D < s2.length; D++) i = i + this.characterLength(s2[D]);
    return i;
  }, u2.slice = function(e2, s2, i) {
    textLen = u2.length(e2), s2 = s2 || 0, i = i || 1, s2 < 0 && (s2 = textLen + s2), i < 0 && (i = textLen + i);
    for (var D = "", C2 = 0, o2 = F(e2), E = 0; E < o2.length; E++) {
      var a = o2[E], n = u2.length(a);
      if (C2 >= s2 - (n == 2 ? 1 : 0)) if (C2 + n <= i) D += a;
      else break;
      C2 += n;
    }
    return D;
  };
})(P$1);
var X = P$1.exports;
const DD = O(X);
var uD = function() {
  return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|(?:\uD83E\uDDD1\uD83C\uDFFF\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFC-\uDFFF])|\uD83D\uDC68(?:\uD83C\uDFFB(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|[\u2695\u2696\u2708]\uFE0F|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))?|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])\uFE0F|\u200D(?:(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D[\uDC66\uDC67])|\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC)?|(?:\uD83D\uDC69(?:\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC69(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83E\uDDD1(?:\u200D(?:\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDE36\u200D\uD83C\uDF2B|\uD83C\uDFF3\uFE0F\u200D\u26A7|\uD83D\uDC3B\u200D\u2744|(?:(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\uD83C\uDFF4\u200D\u2620|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])\u200D[\u2640\u2642]|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u2600-\u2604\u260E\u2611\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26B0\u26B1\u26C8\u26CF\u26D1\u26D3\u26E9\u26F0\u26F1\u26F4\u26F7\u26F8\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u3030\u303D\u3297\u3299]|\uD83C[\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]|\uD83D[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3])\uFE0F|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDE35\u200D\uD83D\uDCAB|\uD83D\uDE2E\u200D\uD83D\uDCA8|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83E\uDDD1(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83D\uDC69(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83D\uDC08\u200D\u2B1B|\u2764\uFE0F\u200D(?:\uD83D\uDD25|\uD83E\uDE79)|\uD83D\uDC41\uFE0F|\uD83C\uDFF3\uFE0F|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|[#\*0-9]\uFE0F\u20E3|\u2764\uFE0F|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|\uD83C\uDFF4|(?:[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270C\u270D]|\uD83D[\uDD74\uDD90])(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC08\uDC15\uDC3B\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE2E\uDE35\uDE36\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5]|\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD]|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF]|[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0D\uDD0E\uDD10-\uDD17\uDD1D\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78\uDD7A-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCB\uDDD0\uDDE0-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6]|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26A7\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5-\uDED7\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDD77\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
};
const FD = O(uD);
function A(t, u2 = {}) {
  if (typeof t != "string" || t.length === 0 || (u2 = { ambiguousIsNarrow: true, ...u2 }, t = T(t), t.length === 0)) return 0;
  t = t.replace(FD(), "  ");
  const F = u2.ambiguousIsNarrow ? 1 : 2;
  let e2 = 0;
  for (const s2 of t) {
    const i = s2.codePointAt(0);
    if (i <= 31 || i >= 127 && i <= 159 || i >= 768 && i <= 879) continue;
    switch (DD.eastAsianWidth(s2)) {
      case "F":
      case "W":
        e2 += 2;
        break;
      case "A":
        e2 += F;
        break;
      default:
        e2 += 1;
    }
  }
  return e2;
}
const m = 10, L$1 = (t = 0) => (u2) => `\x1B[${u2 + t}m`, N = (t = 0) => (u2) => `\x1B[${38 + t};5;${u2}m`, I = (t = 0) => (u2, F, e2) => `\x1B[${38 + t};2;${u2};${F};${e2}m`, r = { modifier: { reset: [0, 0], bold: [1, 22], dim: [2, 22], italic: [3, 23], underline: [4, 24], overline: [53, 55], inverse: [7, 27], hidden: [8, 28], strikethrough: [9, 29] }, color: { black: [30, 39], red: [31, 39], green: [32, 39], yellow: [33, 39], blue: [34, 39], magenta: [35, 39], cyan: [36, 39], white: [37, 39], blackBright: [90, 39], gray: [90, 39], grey: [90, 39], redBright: [91, 39], greenBright: [92, 39], yellowBright: [93, 39], blueBright: [94, 39], magentaBright: [95, 39], cyanBright: [96, 39], whiteBright: [97, 39] }, bgColor: { bgBlack: [40, 49], bgRed: [41, 49], bgGreen: [42, 49], bgYellow: [43, 49], bgBlue: [44, 49], bgMagenta: [45, 49], bgCyan: [46, 49], bgWhite: [47, 49], bgBlackBright: [100, 49], bgGray: [100, 49], bgGrey: [100, 49], bgRedBright: [101, 49], bgGreenBright: [102, 49], bgYellowBright: [103, 49], bgBlueBright: [104, 49], bgMagentaBright: [105, 49], bgCyanBright: [106, 49], bgWhiteBright: [107, 49] } };
Object.keys(r.modifier);
const tD = Object.keys(r.color), eD = Object.keys(r.bgColor);
[...tD, ...eD];
function sD() {
  const t = /* @__PURE__ */ new Map();
  for (const [u2, F] of Object.entries(r)) {
    for (const [e2, s2] of Object.entries(F)) r[e2] = { open: `\x1B[${s2[0]}m`, close: `\x1B[${s2[1]}m` }, F[e2] = r[e2], t.set(s2[0], s2[1]);
    Object.defineProperty(r, u2, { value: F, enumerable: false });
  }
  return Object.defineProperty(r, "codes", { value: t, enumerable: false }), r.color.close = "\x1B[39m", r.bgColor.close = "\x1B[49m", r.color.ansi = L$1(), r.color.ansi256 = N(), r.color.ansi16m = I(), r.bgColor.ansi = L$1(m), r.bgColor.ansi256 = N(m), r.bgColor.ansi16m = I(m), Object.defineProperties(r, { rgbToAnsi256: { value: (u2, F, e2) => u2 === F && F === e2 ? u2 < 8 ? 16 : u2 > 248 ? 231 : Math.round((u2 - 8) / 247 * 24) + 232 : 16 + 36 * Math.round(u2 / 255 * 5) + 6 * Math.round(F / 255 * 5) + Math.round(e2 / 255 * 5), enumerable: false }, hexToRgb: { value: (u2) => {
    const F = /[a-f\d]{6}|[a-f\d]{3}/i.exec(u2.toString(16));
    if (!F) return [0, 0, 0];
    let [e2] = F;
    e2.length === 3 && (e2 = [...e2].map((i) => i + i).join(""));
    const s2 = Number.parseInt(e2, 16);
    return [s2 >> 16 & 255, s2 >> 8 & 255, s2 & 255];
  }, enumerable: false }, hexToAnsi256: { value: (u2) => r.rgbToAnsi256(...r.hexToRgb(u2)), enumerable: false }, ansi256ToAnsi: { value: (u2) => {
    if (u2 < 8) return 30 + u2;
    if (u2 < 16) return 90 + (u2 - 8);
    let F, e2, s2;
    if (u2 >= 232) F = ((u2 - 232) * 10 + 8) / 255, e2 = F, s2 = F;
    else {
      u2 -= 16;
      const C2 = u2 % 36;
      F = Math.floor(u2 / 36) / 5, e2 = Math.floor(C2 / 6) / 5, s2 = C2 % 6 / 5;
    }
    const i = Math.max(F, e2, s2) * 2;
    if (i === 0) return 30;
    let D = 30 + (Math.round(s2) << 2 | Math.round(e2) << 1 | Math.round(F));
    return i === 2 && (D += 60), D;
  }, enumerable: false }, rgbToAnsi: { value: (u2, F, e2) => r.ansi256ToAnsi(r.rgbToAnsi256(u2, F, e2)), enumerable: false }, hexToAnsi: { value: (u2) => r.ansi256ToAnsi(r.hexToAnsi256(u2)), enumerable: false } }), r;
}
const iD = sD(), v = /* @__PURE__ */ new Set(["\x1B", ""]), CD = 39, w$1 = "\x07", W$1 = "[", rD = "]", R = "m", y = `${rD}8;;`, V$1 = (t) => `${v.values().next().value}${W$1}${t}${R}`, z = (t) => `${v.values().next().value}${y}${t}${w$1}`, ED = (t) => t.split(" ").map((u2) => A(u2)), _ = (t, u2, F) => {
  const e2 = [...u2];
  let s2 = false, i = false, D = A(T(t[t.length - 1]));
  for (const [C2, o2] of e2.entries()) {
    const E = A(o2);
    if (D + E <= F ? t[t.length - 1] += o2 : (t.push(o2), D = 0), v.has(o2) && (s2 = true, i = e2.slice(C2 + 1).join("").startsWith(y)), s2) {
      i ? o2 === w$1 && (s2 = false, i = false) : o2 === R && (s2 = false);
      continue;
    }
    D += E, D === F && C2 < e2.length - 1 && (t.push(""), D = 0);
  }
  !D && t[t.length - 1].length > 0 && t.length > 1 && (t[t.length - 2] += t.pop());
}, nD = (t) => {
  const u2 = t.split(" ");
  let F = u2.length;
  for (; F > 0 && !(A(u2[F - 1]) > 0); ) F--;
  return F === u2.length ? t : u2.slice(0, F).join(" ") + u2.slice(F).join("");
}, oD = (t, u2, F = {}) => {
  if (F.trim !== false && t.trim() === "") return "";
  let e2 = "", s2, i;
  const D = ED(t);
  let C2 = [""];
  for (const [E, a] of t.split(" ").entries()) {
    F.trim !== false && (C2[C2.length - 1] = C2[C2.length - 1].trimStart());
    let n = A(C2[C2.length - 1]);
    if (E !== 0 && (n >= u2 && (F.wordWrap === false || F.trim === false) && (C2.push(""), n = 0), (n > 0 || F.trim === false) && (C2[C2.length - 1] += " ", n++)), F.hard && D[E] > u2) {
      const B2 = u2 - n, p = 1 + Math.floor((D[E] - B2 - 1) / u2);
      Math.floor((D[E] - 1) / u2) < p && C2.push(""), _(C2, a, u2);
      continue;
    }
    if (n + D[E] > u2 && n > 0 && D[E] > 0) {
      if (F.wordWrap === false && n < u2) {
        _(C2, a, u2);
        continue;
      }
      C2.push("");
    }
    if (n + D[E] > u2 && F.wordWrap === false) {
      _(C2, a, u2);
      continue;
    }
    C2[C2.length - 1] += a;
  }
  F.trim !== false && (C2 = C2.map((E) => nD(E)));
  const o2 = [...C2.join(`
`)];
  for (const [E, a] of o2.entries()) {
    if (e2 += a, v.has(a)) {
      const { groups: B2 } = new RegExp(`(?:\\${W$1}(?<code>\\d+)m|\\${y}(?<uri>.*)${w$1})`).exec(o2.slice(E).join("")) || { groups: {} };
      if (B2.code !== void 0) {
        const p = Number.parseFloat(B2.code);
        s2 = p === CD ? void 0 : p;
      } else B2.uri !== void 0 && (i = B2.uri.length === 0 ? void 0 : B2.uri);
    }
    const n = iD.codes.get(Number(s2));
    o2[E + 1] === `
` ? (i && (e2 += z("")), s2 && n && (e2 += V$1(n))) : a === `
` && (s2 && n && (e2 += V$1(s2)), i && (e2 += z(i)));
  }
  return e2;
};
function G(t, u2, F) {
  return String(t).normalize().replace(/\r\n/g, `
`).split(`
`).map((e2) => oD(e2, u2, F)).join(`
`);
}
const aD = ["up", "down", "left", "right", "space", "enter", "cancel"], c = { actions: new Set(aD), aliases: /* @__PURE__ */ new Map([["k", "up"], ["j", "down"], ["h", "left"], ["l", "right"], ["", "cancel"], ["escape", "cancel"]]) };
function k$1(t, u2) {
  if (typeof t == "string") return c.aliases.get(t) === u2;
  for (const F of t) if (F !== void 0 && k$1(F, u2)) return true;
  return false;
}
function lD(t, u2) {
  if (t === u2) return;
  const F = t.split(`
`), e2 = u2.split(`
`), s2 = [];
  for (let i = 0; i < Math.max(F.length, e2.length); i++) F[i] !== e2[i] && s2.push(i);
  return s2;
}
const xD = globalThis.process.platform.startsWith("win"), S = Symbol("clack:cancel");
function d$1(t, u2) {
  const F = t;
  F.isTTY && F.setRawMode(u2);
}
function cD({ input: t = stdin, output: u2 = stdout$1, overwrite: F = true, hideCursor: e2 = true } = {}) {
  const s2 = f.createInterface({ input: t, output: u2, prompt: "", tabSize: 1 });
  f.emitKeypressEvents(t, s2), t.isTTY && t.setRawMode(true);
  const i = (D, { name: C2, sequence: o2 }) => {
    const E = String(D);
    if (k$1([E, C2, o2], "cancel")) {
      e2 && u2.write(srcExports.cursor.show), process.exit(0);
      return;
    }
    if (!F) return;
    const a = C2 === "return" ? 0 : -1, n = C2 === "return" ? -1 : 0;
    f.moveCursor(u2, a, n, () => {
      f.clearLine(u2, 1, () => {
        t.once("keypress", i);
      });
    });
  };
  return e2 && u2.write(srcExports.cursor.hide), t.once("keypress", i), () => {
    t.off("keypress", i), e2 && u2.write(srcExports.cursor.show), t.isTTY && !xD && t.setRawMode(false), s2.terminal = false, s2.close();
  };
}
var AD = Object.defineProperty, pD = (t, u2, F) => u2 in t ? AD(t, u2, { enumerable: true, configurable: true, writable: true, value: F }) : t[u2] = F, h = (t, u2, F) => (pD(t, typeof u2 != "symbol" ? u2 + "" : u2, F), F);
class x {
  constructor(u2, F = true) {
    h(this, "input"), h(this, "output"), h(this, "_abortSignal"), h(this, "rl"), h(this, "opts"), h(this, "_render"), h(this, "_track", false), h(this, "_prevFrame", ""), h(this, "_subscribers", /* @__PURE__ */ new Map()), h(this, "_cursor", 0), h(this, "state", "initial"), h(this, "error", ""), h(this, "value");
    const { input: e2 = stdin, output: s2 = stdout$1, render: i, signal: D, ...C2 } = u2;
    this.opts = C2, this.onKeypress = this.onKeypress.bind(this), this.close = this.close.bind(this), this.render = this.render.bind(this), this._render = i.bind(this), this._track = F, this._abortSignal = D, this.input = e2, this.output = s2;
  }
  unsubscribe() {
    this._subscribers.clear();
  }
  setSubscriber(u2, F) {
    const e2 = this._subscribers.get(u2) ?? [];
    e2.push(F), this._subscribers.set(u2, e2);
  }
  on(u2, F) {
    this.setSubscriber(u2, { cb: F });
  }
  once(u2, F) {
    this.setSubscriber(u2, { cb: F, once: true });
  }
  emit(u2, ...F) {
    const e2 = this._subscribers.get(u2) ?? [], s2 = [];
    for (const i of e2) i.cb(...F), i.once && s2.push(() => e2.splice(e2.indexOf(i), 1));
    for (const i of s2) i();
  }
  prompt() {
    return new Promise((u2, F) => {
      if (this._abortSignal) {
        if (this._abortSignal.aborted) return this.state = "cancel", this.close(), u2(S);
        this._abortSignal.addEventListener("abort", () => {
          this.state = "cancel", this.close();
        }, { once: true });
      }
      const e2 = new WriteStream(0);
      e2._write = (s2, i, D) => {
        this._track && (this.value = this.rl?.line.replace(/\t/g, ""), this._cursor = this.rl?.cursor ?? 0, this.emit("value", this.value)), D();
      }, this.input.pipe(e2), this.rl = f__default.createInterface({ input: this.input, output: e2, tabSize: 2, prompt: "", escapeCodeTimeout: 50 }), f__default.emitKeypressEvents(this.input, this.rl), this.rl.prompt(), this.opts.initialValue !== void 0 && this._track && this.rl.write(this.opts.initialValue), this.input.on("keypress", this.onKeypress), d$1(this.input, true), this.output.on("resize", this.render), this.render(), this.once("submit", () => {
        this.output.write(srcExports.cursor.show), this.output.off("resize", this.render), d$1(this.input, false), u2(this.value);
      }), this.once("cancel", () => {
        this.output.write(srcExports.cursor.show), this.output.off("resize", this.render), d$1(this.input, false), u2(S);
      });
    });
  }
  onKeypress(u2, F) {
    if (this.state === "error" && (this.state = "active"), F?.name && (!this._track && c.aliases.has(F.name) && this.emit("cursor", c.aliases.get(F.name)), c.actions.has(F.name) && this.emit("cursor", F.name)), u2 && (u2.toLowerCase() === "y" || u2.toLowerCase() === "n") && this.emit("confirm", u2.toLowerCase() === "y"), u2 === "	" && this.opts.placeholder && (this.value || (this.rl?.write(this.opts.placeholder), this.emit("value", this.opts.placeholder))), u2 && this.emit("key", u2.toLowerCase()), F?.name === "return") {
      if (this.opts.validate) {
        const e2 = this.opts.validate(this.value);
        e2 && (this.error = e2 instanceof Error ? e2.message : e2, this.state = "error", this.rl?.write(this.value));
      }
      this.state !== "error" && (this.state = "submit");
    }
    k$1([u2, F?.name, F?.sequence], "cancel") && (this.state = "cancel"), (this.state === "submit" || this.state === "cancel") && this.emit("finalize"), this.render(), (this.state === "submit" || this.state === "cancel") && this.close();
  }
  close() {
    this.input.unpipe(), this.input.removeListener("keypress", this.onKeypress), this.output.write(`
`), d$1(this.input, false), this.rl?.close(), this.rl = void 0, this.emit(`${this.state}`, this.value), this.unsubscribe();
  }
  restoreCursor() {
    const u2 = G(this._prevFrame, process.stdout.columns, { hard: true }).split(`
`).length - 1;
    this.output.write(srcExports.cursor.move(-999, u2 * -1));
  }
  render() {
    const u2 = G(this._render(this) ?? "", process.stdout.columns, { hard: true });
    if (u2 !== this._prevFrame) {
      if (this.state === "initial") this.output.write(srcExports.cursor.hide);
      else {
        const F = lD(this._prevFrame, u2);
        if (this.restoreCursor(), F && F?.length === 1) {
          const e2 = F[0];
          this.output.write(srcExports.cursor.move(0, e2)), this.output.write(srcExports.erase.lines(1));
          const s2 = u2.split(`
`);
          this.output.write(s2[e2]), this._prevFrame = u2, this.output.write(srcExports.cursor.move(0, s2.length - e2 - 1));
          return;
        }
        if (F && F?.length > 1) {
          const e2 = F[0];
          this.output.write(srcExports.cursor.move(0, e2)), this.output.write(srcExports.erase.down());
          const s2 = u2.split(`
`).slice(e2);
          this.output.write(s2.join(`
`)), this._prevFrame = u2;
          return;
        }
        this.output.write(srcExports.erase.down());
      }
      this.output.write(u2), this.state === "initial" && (this.state = "active"), this._prevFrame = u2;
    }
  }
}
class fD extends x {
  get cursor() {
    return this.value ? 0 : 1;
  }
  get _value() {
    return this.cursor === 0;
  }
  constructor(u2) {
    super(u2, false), this.value = !!u2.initialValue, this.on("value", () => {
      this.value = this._value;
    }), this.on("confirm", (F) => {
      this.output.write(srcExports.cursor.move(0, -1)), this.value = F, this.state = "submit", this.close();
    }), this.on("cursor", () => {
      this.value = !this.value;
    });
  }
}
var SD = Object.defineProperty, $D = (t, u2, F) => u2 in t ? SD(t, u2, { enumerable: true, configurable: true, writable: true, value: F }) : t[u2] = F, q = (t, u2, F) => ($D(t, typeof u2 != "symbol" ? u2 + "" : u2, F), F);
class jD extends x {
  constructor(u2) {
    super(u2, false), q(this, "options"), q(this, "cursor", 0), this.options = u2.options, this.cursor = this.options.findIndex(({ value: F }) => F === u2.initialValue), this.cursor === -1 && (this.cursor = 0), this.changeValue(), this.on("cursor", (F) => {
      switch (F) {
        case "left":
        case "up":
          this.cursor = this.cursor === 0 ? this.options.length - 1 : this.cursor - 1;
          break;
        case "down":
        case "right":
          this.cursor = this.cursor === this.options.length - 1 ? 0 : this.cursor + 1;
          break;
      }
      this.changeValue();
    });
  }
  get _value() {
    return this.options[this.cursor];
  }
  changeValue() {
    this.value = this._value.value;
  }
}
function ce() {
  return g.platform !== "win32" ? g.env.TERM !== "linux" : !!g.env.CI || !!g.env.WT_SESSION || !!g.env.TERMINUS_SUBLIME || g.env.ConEmuTask === "{cmd::Cmder}" || g.env.TERM_PROGRAM === "Terminus-Sublime" || g.env.TERM_PROGRAM === "vscode" || g.env.TERM === "xterm-256color" || g.env.TERM === "alacritty" || g.env.TERMINAL_EMULATOR === "JetBrains-JediTerm";
}
const V = ce(), u = (t, n) => V ? t : n, le = u("◆", "*"), L = u("■", "x"), W = u("▲", "x"), C = u("◇", "o"), ue = u("┌", "T"), o = u("│", "|"), d = u("└", "—"), k = u("●", ">"), P = u("○", " "), w = (t) => {
  switch (t) {
    case "initial":
    case "active":
      return e.cyan(le);
    case "cancel":
      return e.red(L);
    case "error":
      return e.yellow(W);
    case "submit":
      return e.green(C);
  }
}, B = (t) => {
  const { cursor: n, options: s2, style: r2 } = t, i = t.maxItems ?? Number.POSITIVE_INFINITY, a = Math.max(process.stdout.rows - 4, 0), c2 = Math.min(a, Math.max(i, 5));
  let l = 0;
  n >= l + c2 - 3 ? l = Math.max(Math.min(n - c2 + 3, s2.length - c2), 0) : n < l + 2 && (l = Math.max(n - 2, 0));
  const $ = c2 < s2.length && l > 0, p = c2 < s2.length && l + c2 < s2.length;
  return s2.slice(l, l + c2).map((M, v2, x2) => {
    const j = v2 === 0 && $, E = v2 === x2.length - 1 && p;
    return j || E ? e.dim("...") : r2(M, v2 + l === n);
  });
}, ye = (t) => {
  const n = t.active ?? "Yes", s2 = t.inactive ?? "No";
  return new fD({ active: n, inactive: s2, initialValue: t.initialValue ?? true, render() {
    const r2 = `${e.gray(o)}
${w(this.state)}  ${t.message}
`, i = this.value ? n : s2;
    switch (this.state) {
      case "submit":
        return `${r2}${e.gray(o)}  ${e.dim(i)}`;
      case "cancel":
        return `${r2}${e.gray(o)}  ${e.strikethrough(e.dim(i))}
${e.gray(o)}`;
      default:
        return `${r2}${e.cyan(o)}  ${this.value ? `${e.green(k)} ${n}` : `${e.dim(P)} ${e.dim(n)}`} ${e.dim("/")} ${this.value ? `${e.dim(P)} ${e.dim(s2)}` : `${e.green(k)} ${s2}`}
${e.cyan(d)}
`;
    }
  } }).prompt();
}, ve = (t) => {
  const n = (s2, r2) => {
    const i = s2.label ?? String(s2.value);
    switch (r2) {
      case "selected":
        return `${e.dim(i)}`;
      case "active":
        return `${e.green(k)} ${i} ${s2.hint ? e.dim(`(${s2.hint})`) : ""}`;
      case "cancelled":
        return `${e.strikethrough(e.dim(i))}`;
      default:
        return `${e.dim(P)} ${e.dim(i)}`;
    }
  };
  return new jD({ options: t.options, initialValue: t.initialValue, render() {
    const s2 = `${e.gray(o)}
${w(this.state)}  ${t.message}
`;
    switch (this.state) {
      case "submit":
        return `${s2}${e.gray(o)}  ${n(this.options[this.cursor], "selected")}`;
      case "cancel":
        return `${s2}${e.gray(o)}  ${n(this.options[this.cursor], "cancelled")}
${e.gray(o)}`;
      default:
        return `${s2}${e.cyan(o)}  ${B({ cursor: this.cursor, options: this.options, maxItems: t.maxItems, style: (r2, i) => n(r2, i ? "active" : "inactive") }).join(`
${e.cyan(o)}  `)}
${e.cyan(d)}
`;
    }
  } }).prompt();
}, Ie = (t = "") => {
  process.stdout.write(`${e.gray(ue)}  ${t}
`);
}, Se = (t = "") => {
  process.stdout.write(`${e.gray(o)}
${e.gray(d)}  ${t}

`);
};
`${e.gray(o)}  `;
const Y = ({ indicator: t = "dots" } = {}) => {
  const n = V ? ["◒", "◐", "◓", "◑"] : ["•", "o", "O", "0"], s2 = V ? 80 : 120, r2 = process.env.CI === "true";
  let i, a, c2 = false, l = "", $, p = performance.now();
  const M = (m2) => {
    const h2 = m2 > 1 ? "Something went wrong" : "Canceled";
    c2 && N2(h2, m2);
  }, v2 = () => M(2), x2 = () => M(1), j = () => {
    process.on("uncaughtExceptionMonitor", v2), process.on("unhandledRejection", v2), process.on("SIGINT", x2), process.on("SIGTERM", x2), process.on("exit", M);
  }, E = () => {
    process.removeListener("uncaughtExceptionMonitor", v2), process.removeListener("unhandledRejection", v2), process.removeListener("SIGINT", x2), process.removeListener("SIGTERM", x2), process.removeListener("exit", M);
  }, O2 = () => {
    if ($ === void 0) return;
    r2 && process.stdout.write(`
`);
    const m2 = $.split(`
`);
    process.stdout.write(srcExports.cursor.move(-999, m2.length - 1)), process.stdout.write(srcExports.erase.down(m2.length));
  }, R2 = (m2) => m2.replace(/\.+$/, ""), G2 = (m2) => {
    const h2 = (performance.now() - m2) / 1e3, y2 = Math.floor(h2 / 60), I2 = Math.floor(h2 % 60);
    return y2 > 0 ? `[${y2}m ${I2}s]` : `[${I2}s]`;
  }, H = (m2 = "") => {
    c2 = true, i = cD(), l = R2(m2), p = performance.now(), process.stdout.write(`${e.gray(o)}
`);
    let h2 = 0, y2 = 0;
    j(), a = setInterval(() => {
      if (r2 && l === $) return;
      O2(), $ = l;
      const I2 = e.magenta(n[h2]);
      if (r2) process.stdout.write(`${I2}  ${l}...`);
      else if (t === "timer") process.stdout.write(`${I2}  ${l} ${G2(p)}`);
      else {
        const z2 = ".".repeat(Math.floor(y2)).slice(0, 3);
        process.stdout.write(`${I2}  ${l}${z2}`);
      }
      h2 = h2 + 1 < n.length ? h2 + 1 : 0, y2 = y2 < n.length ? y2 + 0.125 : 0;
    }, s2);
  }, N2 = (m2 = "", h2 = 0) => {
    c2 = false, clearInterval(a), O2();
    const y2 = h2 === 0 ? e.green(C) : h2 === 1 ? e.red(L) : e.red(W);
    l = R2(m2 ?? l), t === "timer" ? process.stdout.write(`${y2}  ${l} ${G2(p)}
`) : process.stdout.write(`${y2}  ${l}
`), E(), i();
  };
  return { start: H, stop: N2, message: (m2 = "") => {
    l = R2(m2 ?? l);
  } };
};
var papaparse_min$1 = { exports: {} };
/* @license
Papa Parse
v5.5.2
https://github.com/mholt/PapaParse
License: MIT
*/
var papaparse_min = papaparse_min$1.exports;
var hasRequiredPapaparse_min;
function requirePapaparse_min() {
  if (hasRequiredPapaparse_min) return papaparse_min$1.exports;
  hasRequiredPapaparse_min = 1;
  (function(module, exports) {
    ((e2, t) => {
      module.exports = t();
    })(papaparse_min, function r2() {
      var n = "undefined" != typeof self ? self : "undefined" != typeof window ? window : void 0 !== n ? n : {};
      var d2, s2 = !n.document && !!n.postMessage, a = n.IS_PAPA_WORKER || false, o2 = {}, h2 = 0, v2 = {};
      function u2(e2) {
        this._handle = null, this._finished = false, this._completed = false, this._halted = false, this._input = null, this._baseIndex = 0, this._partialLine = "", this._rowCount = 0, this._start = 0, this._nextChunk = null, this.isFirstChunk = true, this._completeResults = { data: [], errors: [], meta: {} }, function(e3) {
          var t = w2(e3);
          t.chunkSize = parseInt(t.chunkSize), e3.step || e3.chunk || (t.chunkSize = null);
          this._handle = new i(t), (this._handle.streamer = this)._config = t;
        }.call(this, e2), this.parseChunk = function(t, e3) {
          var i2 = parseInt(this._config.skipFirstNLines) || 0;
          if (this.isFirstChunk && 0 < i2) {
            let e4 = this._config.newline;
            e4 || (r3 = this._config.quoteChar || '"', e4 = this._handle.guessLineEndings(t, r3)), t = [...t.split(e4).slice(i2)].join(e4);
          }
          this.isFirstChunk && U(this._config.beforeFirstChunk) && void 0 !== (r3 = this._config.beforeFirstChunk(t)) && (t = r3), this.isFirstChunk = false, this._halted = false;
          var i2 = this._partialLine + t, r3 = (this._partialLine = "", this._handle.parse(i2, this._baseIndex, !this._finished));
          if (!this._handle.paused() && !this._handle.aborted()) {
            t = r3.meta.cursor, i2 = (this._finished || (this._partialLine = i2.substring(t - this._baseIndex), this._baseIndex = t), r3 && r3.data && (this._rowCount += r3.data.length), this._finished || this._config.preview && this._rowCount >= this._config.preview);
            if (a) n.postMessage({ results: r3, workerId: v2.WORKER_ID, finished: i2 });
            else if (U(this._config.chunk) && !e3) {
              if (this._config.chunk(r3, this._handle), this._handle.paused() || this._handle.aborted()) return void (this._halted = true);
              this._completeResults = r3 = void 0;
            }
            return this._config.step || this._config.chunk || (this._completeResults.data = this._completeResults.data.concat(r3.data), this._completeResults.errors = this._completeResults.errors.concat(r3.errors), this._completeResults.meta = r3.meta), this._completed || !i2 || !U(this._config.complete) || r3 && r3.meta.aborted || (this._config.complete(this._completeResults, this._input), this._completed = true), i2 || r3 && r3.meta.paused || this._nextChunk(), r3;
          }
          this._halted = true;
        }, this._sendError = function(e3) {
          U(this._config.error) ? this._config.error(e3) : a && this._config.error && n.postMessage({ workerId: v2.WORKER_ID, error: e3, finished: false });
        };
      }
      function f2(e2) {
        var r3;
        (e2 = e2 || {}).chunkSize || (e2.chunkSize = v2.RemoteChunkSize), u2.call(this, e2), this._nextChunk = s2 ? function() {
          this._readChunk(), this._chunkLoaded();
        } : function() {
          this._readChunk();
        }, this.stream = function(e3) {
          this._input = e3, this._nextChunk();
        }, this._readChunk = function() {
          if (this._finished) this._chunkLoaded();
          else {
            if (r3 = new XMLHttpRequest(), this._config.withCredentials && (r3.withCredentials = this._config.withCredentials), s2 || (r3.onload = y2(this._chunkLoaded, this), r3.onerror = y2(this._chunkError, this)), r3.open(this._config.downloadRequestBody ? "POST" : "GET", this._input, !s2), this._config.downloadRequestHeaders) {
              var e3, t = this._config.downloadRequestHeaders;
              for (e3 in t) r3.setRequestHeader(e3, t[e3]);
            }
            var i2;
            this._config.chunkSize && (i2 = this._start + this._config.chunkSize - 1, r3.setRequestHeader("Range", "bytes=" + this._start + "-" + i2));
            try {
              r3.send(this._config.downloadRequestBody);
            } catch (e4) {
              this._chunkError(e4.message);
            }
            s2 && 0 === r3.status && this._chunkError();
          }
        }, this._chunkLoaded = function() {
          4 === r3.readyState && (r3.status < 200 || 400 <= r3.status ? this._chunkError() : (this._start += this._config.chunkSize || r3.responseText.length, this._finished = !this._config.chunkSize || this._start >= ((e3) => null !== (e3 = e3.getResponseHeader("Content-Range")) ? parseInt(e3.substring(e3.lastIndexOf("/") + 1)) : -1)(r3), this.parseChunk(r3.responseText)));
        }, this._chunkError = function(e3) {
          e3 = r3.statusText || e3;
          this._sendError(new Error(e3));
        };
      }
      function l(e2) {
        (e2 = e2 || {}).chunkSize || (e2.chunkSize = v2.LocalChunkSize), u2.call(this, e2);
        var i2, r3, n2 = "undefined" != typeof FileReader;
        this.stream = function(e3) {
          this._input = e3, r3 = e3.slice || e3.webkitSlice || e3.mozSlice, n2 ? ((i2 = new FileReader()).onload = y2(this._chunkLoaded, this), i2.onerror = y2(this._chunkError, this)) : i2 = new FileReaderSync(), this._nextChunk();
        }, this._nextChunk = function() {
          this._finished || this._config.preview && !(this._rowCount < this._config.preview) || this._readChunk();
        }, this._readChunk = function() {
          var e3 = this._input, t = (this._config.chunkSize && (t = Math.min(this._start + this._config.chunkSize, this._input.size), e3 = r3.call(e3, this._start, t)), i2.readAsText(e3, this._config.encoding));
          n2 || this._chunkLoaded({ target: { result: t } });
        }, this._chunkLoaded = function(e3) {
          this._start += this._config.chunkSize, this._finished = !this._config.chunkSize || this._start >= this._input.size, this.parseChunk(e3.target.result);
        }, this._chunkError = function() {
          this._sendError(i2.error);
        };
      }
      function c2(e2) {
        var i2;
        u2.call(this, e2 = e2 || {}), this.stream = function(e3) {
          return i2 = e3, this._nextChunk();
        }, this._nextChunk = function() {
          var e3, t;
          if (!this._finished) return e3 = this._config.chunkSize, i2 = e3 ? (t = i2.substring(0, e3), i2.substring(e3)) : (t = i2, ""), this._finished = !i2, this.parseChunk(t);
        };
      }
      function p(e2) {
        u2.call(this, e2 = e2 || {});
        var t = [], i2 = true, r3 = false;
        this.pause = function() {
          u2.prototype.pause.apply(this, arguments), this._input.pause();
        }, this.resume = function() {
          u2.prototype.resume.apply(this, arguments), this._input.resume();
        }, this.stream = function(e3) {
          this._input = e3, this._input.on("data", this._streamData), this._input.on("end", this._streamEnd), this._input.on("error", this._streamError);
        }, this._checkIsFinished = function() {
          r3 && 1 === t.length && (this._finished = true);
        }, this._nextChunk = function() {
          this._checkIsFinished(), t.length ? this.parseChunk(t.shift()) : i2 = true;
        }, this._streamData = y2(function(e3) {
          try {
            t.push("string" == typeof e3 ? e3 : e3.toString(this._config.encoding)), i2 && (i2 = false, this._checkIsFinished(), this.parseChunk(t.shift()));
          } catch (e4) {
            this._streamError(e4);
          }
        }, this), this._streamError = y2(function(e3) {
          this._streamCleanUp(), this._sendError(e3);
        }, this), this._streamEnd = y2(function() {
          this._streamCleanUp(), r3 = true, this._streamData("");
        }, this), this._streamCleanUp = y2(function() {
          this._input.removeListener("data", this._streamData), this._input.removeListener("end", this._streamEnd), this._input.removeListener("error", this._streamError);
        }, this);
      }
      function i(m3) {
        var n2, s3, a2, t, o3 = Math.pow(2, 53), h3 = -o3, u3 = /^\s*-?(\d+\.?|\.\d+|\d+\.\d+)([eE][-+]?\d+)?\s*$/, d3 = /^((\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z)))$/, i2 = this, r3 = 0, f3 = 0, l2 = false, e2 = false, c3 = [], p2 = { data: [], errors: [], meta: {} };
        function y3(e3) {
          return "greedy" === m3.skipEmptyLines ? "" === e3.join("").trim() : 1 === e3.length && 0 === e3[0].length;
        }
        function g3() {
          if (p2 && a2 && (k2("Delimiter", "UndetectableDelimiter", "Unable to auto-detect delimiting character; defaulted to '" + v2.DefaultDelimiter + "'"), a2 = false), m3.skipEmptyLines && (p2.data = p2.data.filter(function(e4) {
            return !y3(e4);
          })), _3()) {
            let t2 = function(e4, t3) {
              U(m3.transformHeader) && (e4 = m3.transformHeader(e4, t3)), c3.push(e4);
            };
            if (p2) if (Array.isArray(p2.data[0])) {
              for (var e3 = 0; _3() && e3 < p2.data.length; e3++) p2.data[e3].forEach(t2);
              p2.data.splice(0, 1);
            } else p2.data.forEach(t2);
          }
          function i3(e4, t2) {
            for (var i4 = m3.header ? {} : [], r5 = 0; r5 < e4.length; r5++) {
              var n3 = r5, s4 = e4[r5], s4 = ((e5, t3) => ((e6) => (m3.dynamicTypingFunction && void 0 === m3.dynamicTyping[e6] && (m3.dynamicTyping[e6] = m3.dynamicTypingFunction(e6)), true === (m3.dynamicTyping[e6] || m3.dynamicTyping)))(e5) ? "true" === t3 || "TRUE" === t3 || "false" !== t3 && "FALSE" !== t3 && (((e6) => {
                if (u3.test(e6)) {
                  e6 = parseFloat(e6);
                  if (h3 < e6 && e6 < o3) return 1;
                }
              })(t3) ? parseFloat(t3) : d3.test(t3) ? new Date(t3) : "" === t3 ? null : t3) : t3)(n3 = m3.header ? r5 >= c3.length ? "__parsed_extra" : c3[r5] : n3, s4 = m3.transform ? m3.transform(s4, n3) : s4);
              "__parsed_extra" === n3 ? (i4[n3] = i4[n3] || [], i4[n3].push(s4)) : i4[n3] = s4;
            }
            return m3.header && (r5 > c3.length ? k2("FieldMismatch", "TooManyFields", "Too many fields: expected " + c3.length + " fields but parsed " + r5, f3 + t2) : r5 < c3.length && k2("FieldMismatch", "TooFewFields", "Too few fields: expected " + c3.length + " fields but parsed " + r5, f3 + t2)), i4;
          }
          var r4;
          p2 && (m3.header || m3.dynamicTyping || m3.transform) && (r4 = 1, !p2.data.length || Array.isArray(p2.data[0]) ? (p2.data = p2.data.map(i3), r4 = p2.data.length) : p2.data = i3(p2.data, 0), m3.header && p2.meta && (p2.meta.fields = c3), f3 += r4);
        }
        function _3() {
          return m3.header && 0 === c3.length;
        }
        function k2(e3, t2, i3, r4) {
          e3 = { type: e3, code: t2, message: i3 };
          void 0 !== r4 && (e3.row = r4), p2.errors.push(e3);
        }
        U(m3.step) && (t = m3.step, m3.step = function(e3) {
          p2 = e3, _3() ? g3() : (g3(), 0 !== p2.data.length && (r3 += e3.data.length, m3.preview && r3 > m3.preview ? s3.abort() : (p2.data = p2.data[0], t(p2, i2))));
        }), this.parse = function(e3, t2, i3) {
          var r4 = m3.quoteChar || '"', r4 = (m3.newline || (m3.newline = this.guessLineEndings(e3, r4)), a2 = false, m3.delimiter ? U(m3.delimiter) && (m3.delimiter = m3.delimiter(e3), p2.meta.delimiter = m3.delimiter) : ((r4 = ((e4, t3, i4, r5, n3) => {
            var s4, a3, o4, h4;
            n3 = n3 || [",", "	", "|", ";", v2.RECORD_SEP, v2.UNIT_SEP];
            for (var u4 = 0; u4 < n3.length; u4++) {
              for (var d4, f4 = n3[u4], l3 = 0, c4 = 0, p3 = 0, g4 = (o4 = void 0, new E({ comments: r5, delimiter: f4, newline: t3, preview: 10 }).parse(e4)), _4 = 0; _4 < g4.data.length; _4++) i4 && y3(g4.data[_4]) ? p3++ : (d4 = g4.data[_4].length, c4 += d4, void 0 === o4 ? o4 = d4 : 0 < d4 && (l3 += Math.abs(d4 - o4), o4 = d4));
              0 < g4.data.length && (c4 /= g4.data.length - p3), (void 0 === a3 || l3 <= a3) && (void 0 === h4 || h4 < c4) && 1.99 < c4 && (a3 = l3, s4 = f4, h4 = c4);
            }
            return { successful: !!(m3.delimiter = s4), bestDelimiter: s4 };
          })(e3, m3.newline, m3.skipEmptyLines, m3.comments, m3.delimitersToGuess)).successful ? m3.delimiter = r4.bestDelimiter : (a2 = true, m3.delimiter = v2.DefaultDelimiter), p2.meta.delimiter = m3.delimiter), w2(m3));
          return m3.preview && m3.header && r4.preview++, n2 = e3, s3 = new E(r4), p2 = s3.parse(n2, t2, i3), g3(), l2 ? { meta: { paused: true } } : p2 || { meta: { paused: false } };
        }, this.paused = function() {
          return l2;
        }, this.pause = function() {
          l2 = true, s3.abort(), n2 = U(m3.chunk) ? "" : n2.substring(s3.getCharIndex());
        }, this.resume = function() {
          i2.streamer._halted ? (l2 = false, i2.streamer.parseChunk(n2, true)) : setTimeout(i2.resume, 3);
        }, this.aborted = function() {
          return e2;
        }, this.abort = function() {
          e2 = true, s3.abort(), p2.meta.aborted = true, U(m3.complete) && m3.complete(p2), n2 = "";
        }, this.guessLineEndings = function(e3, t2) {
          e3 = e3.substring(0, 1048576);
          var t2 = new RegExp(P2(t2) + "([^]*?)" + P2(t2), "gm"), i3 = (e3 = e3.replace(t2, "")).split("\r"), t2 = e3.split("\n"), e3 = 1 < t2.length && t2[0].length < i3[0].length;
          if (1 === i3.length || e3) return "\n";
          for (var r4 = 0, n3 = 0; n3 < i3.length; n3++) "\n" === i3[n3][0] && r4++;
          return r4 >= i3.length / 2 ? "\r\n" : "\r";
        };
      }
      function P2(e2) {
        return e2.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
      }
      function E(C2) {
        var S2 = (C2 = C2 || {}).delimiter, O2 = C2.newline, x2 = C2.comments, I2 = C2.step, A2 = C2.preview, T2 = C2.fastMode, D = null, L2 = false, F = null == C2.quoteChar ? '"' : C2.quoteChar, j = F;
        if (void 0 !== C2.escapeChar && (j = C2.escapeChar), ("string" != typeof S2 || -1 < v2.BAD_DELIMITERS.indexOf(S2)) && (S2 = ","), x2 === S2) throw new Error("Comment character same as delimiter");
        true === x2 ? x2 = "#" : ("string" != typeof x2 || -1 < v2.BAD_DELIMITERS.indexOf(x2)) && (x2 = false), "\n" !== O2 && "\r" !== O2 && "\r\n" !== O2 && (O2 = "\n");
        var z2 = 0, M = false;
        this.parse = function(i2, t, r3) {
          if ("string" != typeof i2) throw new Error("Input must be a string");
          var n2 = i2.length, e2 = S2.length, s3 = O2.length, a2 = x2.length, o3 = U(I2), h3 = [], u3 = [], d3 = [], f3 = z2 = 0;
          if (!i2) return b();
          if (T2 || false !== T2 && -1 === i2.indexOf(F)) {
            for (var l2 = i2.split(O2), c3 = 0; c3 < l2.length; c3++) {
              if (d3 = l2[c3], z2 += d3.length, c3 !== l2.length - 1) z2 += O2.length;
              else if (r3) return b();
              if (!x2 || d3.substring(0, a2) !== x2) {
                if (o3) {
                  if (h3 = [], k2(d3.split(S2)), R2(), M) return b();
                } else k2(d3.split(S2));
                if (A2 && A2 <= c3) return h3 = h3.slice(0, A2), b(true);
              }
            }
            return b();
          }
          for (var p2 = i2.indexOf(S2, z2), g3 = i2.indexOf(O2, z2), _3 = new RegExp(P2(j) + P2(F), "g"), m3 = i2.indexOf(F, z2); ; ) if (i2[z2] === F) for (m3 = z2, z2++; ; ) {
            if (-1 === (m3 = i2.indexOf(F, m3 + 1))) return r3 || u3.push({ type: "Quotes", code: "MissingQuotes", message: "Quoted field unterminated", row: h3.length, index: z2 }), E2();
            if (m3 === n2 - 1) return E2(i2.substring(z2, m3).replace(_3, F));
            if (F === j && i2[m3 + 1] === j) m3++;
            else if (F === j || 0 === m3 || i2[m3 - 1] !== j) {
              -1 !== p2 && p2 < m3 + 1 && (p2 = i2.indexOf(S2, m3 + 1));
              var y3 = v3(-1 === (g3 = -1 !== g3 && g3 < m3 + 1 ? i2.indexOf(O2, m3 + 1) : g3) ? p2 : Math.min(p2, g3));
              if (i2.substr(m3 + 1 + y3, e2) === S2) {
                d3.push(i2.substring(z2, m3).replace(_3, F)), i2[z2 = m3 + 1 + y3 + e2] !== F && (m3 = i2.indexOf(F, z2)), p2 = i2.indexOf(S2, z2), g3 = i2.indexOf(O2, z2);
                break;
              }
              y3 = v3(g3);
              if (i2.substring(m3 + 1 + y3, m3 + 1 + y3 + s3) === O2) {
                if (d3.push(i2.substring(z2, m3).replace(_3, F)), w3(m3 + 1 + y3 + s3), p2 = i2.indexOf(S2, z2), m3 = i2.indexOf(F, z2), o3 && (R2(), M)) return b();
                if (A2 && h3.length >= A2) return b(true);
                break;
              }
              u3.push({ type: "Quotes", code: "InvalidQuotes", message: "Trailing quote on quoted field is malformed", row: h3.length, index: z2 }), m3++;
            }
          }
          else if (x2 && 0 === d3.length && i2.substring(z2, z2 + a2) === x2) {
            if (-1 === g3) return b();
            z2 = g3 + s3, g3 = i2.indexOf(O2, z2), p2 = i2.indexOf(S2, z2);
          } else if (-1 !== p2 && (p2 < g3 || -1 === g3)) d3.push(i2.substring(z2, p2)), z2 = p2 + e2, p2 = i2.indexOf(S2, z2);
          else {
            if (-1 === g3) break;
            if (d3.push(i2.substring(z2, g3)), w3(g3 + s3), o3 && (R2(), M)) return b();
            if (A2 && h3.length >= A2) return b(true);
          }
          return E2();
          function k2(e3) {
            h3.push(e3), f3 = z2;
          }
          function v3(e3) {
            var t2 = 0;
            return t2 = -1 !== e3 && (e3 = i2.substring(m3 + 1, e3)) && "" === e3.trim() ? e3.length : t2;
          }
          function E2(e3) {
            return r3 || (void 0 === e3 && (e3 = i2.substring(z2)), d3.push(e3), z2 = n2, k2(d3), o3 && R2()), b();
          }
          function w3(e3) {
            z2 = e3, k2(d3), d3 = [], g3 = i2.indexOf(O2, z2);
          }
          function b(e3) {
            if (C2.header && !t && h3.length && !L2) {
              var s4 = h3[0], a3 = {}, o4 = new Set(s4);
              let n3 = false;
              for (let r4 = 0; r4 < s4.length; r4++) {
                let i3 = s4[r4];
                if (a3[i3 = U(C2.transformHeader) ? C2.transformHeader(i3, r4) : i3]) {
                  let e4, t2 = a3[i3];
                  for (; e4 = i3 + "_" + t2, t2++, o4.has(e4); ) ;
                  o4.add(e4), s4[r4] = e4, a3[i3]++, n3 = true, (D = null === D ? {} : D)[e4] = i3;
                } else a3[i3] = 1, s4[r4] = i3;
                o4.add(i3);
              }
              n3 && console.warn("Duplicate headers found and renamed."), L2 = true;
            }
            return { data: h3, errors: u3, meta: { delimiter: S2, linebreak: O2, aborted: M, truncated: !!e3, cursor: f3 + (t || 0), renamedHeaders: D } };
          }
          function R2() {
            I2(b()), h3 = [], u3 = [];
          }
        }, this.abort = function() {
          M = true;
        }, this.getCharIndex = function() {
          return z2;
        };
      }
      function g2(e2) {
        var t = e2.data, i2 = o2[t.workerId], r3 = false;
        if (t.error) i2.userError(t.error, t.file);
        else if (t.results && t.results.data) {
          var n2 = { abort: function() {
            r3 = true, _2(t.workerId, { data: [], errors: [], meta: { aborted: true } });
          }, pause: m2, resume: m2 };
          if (U(i2.userStep)) {
            for (var s3 = 0; s3 < t.results.data.length && (i2.userStep({ data: t.results.data[s3], errors: t.results.errors, meta: t.results.meta }, n2), !r3); s3++) ;
            delete t.results;
          } else U(i2.userChunk) && (i2.userChunk(t.results, n2, t.file), delete t.results);
        }
        t.finished && !r3 && _2(t.workerId, t.results);
      }
      function _2(e2, t) {
        var i2 = o2[e2];
        U(i2.userComplete) && i2.userComplete(t), i2.terminate(), delete o2[e2];
      }
      function m2() {
        throw new Error("Not implemented.");
      }
      function w2(e2) {
        if ("object" != typeof e2 || null === e2) return e2;
        var t, i2 = Array.isArray(e2) ? [] : {};
        for (t in e2) i2[t] = w2(e2[t]);
        return i2;
      }
      function y2(e2, t) {
        return function() {
          e2.apply(t, arguments);
        };
      }
      function U(e2) {
        return "function" == typeof e2;
      }
      return v2.parse = function(e2, t) {
        var i2 = (t = t || {}).dynamicTyping || false;
        U(i2) && (t.dynamicTypingFunction = i2, i2 = {});
        if (t.dynamicTyping = i2, t.transform = !!U(t.transform) && t.transform, !t.worker || !v2.WORKERS_SUPPORTED) return i2 = null, v2.NODE_STREAM_INPUT, "string" == typeof e2 ? (e2 = ((e3) => 65279 !== e3.charCodeAt(0) ? e3 : e3.slice(1))(e2), i2 = new (t.download ? f2 : c2)(t)) : true === e2.readable && U(e2.read) && U(e2.on) ? i2 = new p(t) : (n.File && e2 instanceof File || e2 instanceof Object) && (i2 = new l(t)), i2.stream(e2);
        (i2 = (() => {
          var e3;
          return !!v2.WORKERS_SUPPORTED && (e3 = (() => {
            var e4 = n.URL || n.webkitURL || null, t2 = r2.toString();
            return v2.BLOB_URL || (v2.BLOB_URL = e4.createObjectURL(new Blob(["var global = (function() { if (typeof self !== 'undefined') { return self; } if (typeof window !== 'undefined') { return window; } if (typeof global !== 'undefined') { return global; } return {}; })(); global.IS_PAPA_WORKER=true; ", "(", t2, ")();"], { type: "text/javascript" })));
          })(), (e3 = new n.Worker(e3)).onmessage = g2, e3.id = h2++, o2[e3.id] = e3);
        })()).userStep = t.step, i2.userChunk = t.chunk, i2.userComplete = t.complete, i2.userError = t.error, t.step = U(t.step), t.chunk = U(t.chunk), t.complete = U(t.complete), t.error = U(t.error), delete t.worker, i2.postMessage({ input: e2, config: t, workerId: i2.id });
      }, v2.unparse = function(e2, t) {
        var n2 = false, _3 = true, m3 = ",", y3 = "\r\n", s3 = '"', a2 = s3 + s3, i2 = false, r3 = null, o3 = false, h3 = ((() => {
          if ("object" == typeof t) {
            if ("string" != typeof t.delimiter || v2.BAD_DELIMITERS.filter(function(e3) {
              return -1 !== t.delimiter.indexOf(e3);
            }).length || (m3 = t.delimiter), "boolean" != typeof t.quotes && "function" != typeof t.quotes && !Array.isArray(t.quotes) || (n2 = t.quotes), "boolean" != typeof t.skipEmptyLines && "string" != typeof t.skipEmptyLines || (i2 = t.skipEmptyLines), "string" == typeof t.newline && (y3 = t.newline), "string" == typeof t.quoteChar && (s3 = t.quoteChar), "boolean" == typeof t.header && (_3 = t.header), Array.isArray(t.columns)) {
              if (0 === t.columns.length) throw new Error("Option columns is empty");
              r3 = t.columns;
            }
            void 0 !== t.escapeChar && (a2 = t.escapeChar + s3), t.escapeFormulae instanceof RegExp ? o3 = t.escapeFormulae : "boolean" == typeof t.escapeFormulae && t.escapeFormulae && (o3 = /^[=+\-@\t\r].*$/);
          }
        })(), new RegExp(P2(s3), "g"));
        "string" == typeof e2 && (e2 = JSON.parse(e2));
        if (Array.isArray(e2)) {
          if (!e2.length || Array.isArray(e2[0])) return u3(null, e2, i2);
          if ("object" == typeof e2[0]) return u3(r3 || Object.keys(e2[0]), e2, i2);
        } else if ("object" == typeof e2) return "string" == typeof e2.data && (e2.data = JSON.parse(e2.data)), Array.isArray(e2.data) && (e2.fields || (e2.fields = e2.meta && e2.meta.fields || r3), e2.fields || (e2.fields = Array.isArray(e2.data[0]) ? e2.fields : "object" == typeof e2.data[0] ? Object.keys(e2.data[0]) : []), Array.isArray(e2.data[0]) || "object" == typeof e2.data[0] || (e2.data = [e2.data])), u3(e2.fields || [], e2.data || [], i2);
        throw new Error("Unable to serialize unrecognized input");
        function u3(e3, t2, i3) {
          var r4 = "", n3 = ("string" == typeof e3 && (e3 = JSON.parse(e3)), "string" == typeof t2 && (t2 = JSON.parse(t2)), Array.isArray(e3) && 0 < e3.length), s4 = !Array.isArray(t2[0]);
          if (n3 && _3) {
            for (var a3 = 0; a3 < e3.length; a3++) 0 < a3 && (r4 += m3), r4 += k2(e3[a3], a3);
            0 < t2.length && (r4 += y3);
          }
          for (var o4 = 0; o4 < t2.length; o4++) {
            var h4 = (n3 ? e3 : t2[o4]).length, u4 = false, d3 = n3 ? 0 === Object.keys(t2[o4]).length : 0 === t2[o4].length;
            if (i3 && !n3 && (u4 = "greedy" === i3 ? "" === t2[o4].join("").trim() : 1 === t2[o4].length && 0 === t2[o4][0].length), "greedy" === i3 && n3) {
              for (var f3 = [], l2 = 0; l2 < h4; l2++) {
                var c3 = s4 ? e3[l2] : l2;
                f3.push(t2[o4][c3]);
              }
              u4 = "" === f3.join("").trim();
            }
            if (!u4) {
              for (var p2 = 0; p2 < h4; p2++) {
                0 < p2 && !d3 && (r4 += m3);
                var g3 = n3 && s4 ? e3[p2] : p2;
                r4 += k2(t2[o4][g3], p2);
              }
              o4 < t2.length - 1 && (!i3 || 0 < h4 && !d3) && (r4 += y3);
            }
          }
          return r4;
        }
        function k2(e3, t2) {
          var i3, r4;
          return null == e3 ? "" : e3.constructor === Date ? JSON.stringify(e3).slice(1, 25) : (r4 = false, o3 && "string" == typeof e3 && o3.test(e3) && (e3 = "'" + e3, r4 = true), i3 = e3.toString().replace(h3, a2), (r4 = r4 || true === n2 || "function" == typeof n2 && n2(e3, t2) || Array.isArray(n2) && n2[t2] || ((e4, t3) => {
            for (var i4 = 0; i4 < t3.length; i4++) if (-1 < e4.indexOf(t3[i4])) return true;
            return false;
          })(i3, v2.BAD_DELIMITERS) || -1 < i3.indexOf(m3) || " " === i3.charAt(0) || " " === i3.charAt(i3.length - 1)) ? s3 + i3 + s3 : i3);
        }
      }, v2.RECORD_SEP = String.fromCharCode(30), v2.UNIT_SEP = String.fromCharCode(31), v2.BYTE_ORDER_MARK = "\uFEFF", v2.BAD_DELIMITERS = ["\r", "\n", '"', v2.BYTE_ORDER_MARK], v2.WORKERS_SUPPORTED = !s2 && !!n.Worker, v2.NODE_STREAM_INPUT = 1, v2.LocalChunkSize = 10485760, v2.RemoteChunkSize = 5242880, v2.DefaultDelimiter = ",", v2.Parser = E, v2.ParserHandle = i, v2.NetworkStreamer = f2, v2.FileStreamer = l, v2.StringStreamer = c2, v2.ReadableStreamStreamer = p, n.jQuery && ((d2 = n.jQuery).fn.parse = function(o3) {
        var i2 = o3.config || {}, h3 = [];
        return this.each(function(e3) {
          if (!("INPUT" === d2(this).prop("tagName").toUpperCase() && "file" === d2(this).attr("type").toLowerCase() && n.FileReader) || !this.files || 0 === this.files.length) return true;
          for (var t = 0; t < this.files.length; t++) h3.push({ file: this.files[t], inputElem: this, instanceConfig: d2.extend({}, i2) });
        }), e2(), this;
        function e2() {
          if (0 === h3.length) U(o3.complete) && o3.complete();
          else {
            var e3, t, i3, r3, n2 = h3[0];
            if (U(o3.before)) {
              var s3 = o3.before(n2.file, n2.inputElem);
              if ("object" == typeof s3) {
                if ("abort" === s3.action) return e3 = "AbortError", t = n2.file, i3 = n2.inputElem, r3 = s3.reason, void (U(o3.error) && o3.error({ name: e3 }, t, i3, r3));
                if ("skip" === s3.action) return void u3();
                "object" == typeof s3.config && (n2.instanceConfig = d2.extend(n2.instanceConfig, s3.config));
              } else if ("skip" === s3) return void u3();
            }
            var a2 = n2.instanceConfig.complete;
            n2.instanceConfig.complete = function(e4) {
              U(a2) && a2(e4, n2.file, n2.inputElem), u3();
            }, v2.parse(n2.file, n2.instanceConfig);
          }
        }
        function u3() {
          h3.splice(0, 1), e2();
        }
      }), a && (n.onmessage = function(e2) {
        e2 = e2.data;
        void 0 === v2.WORKER_ID && e2 && (v2.WORKER_ID = e2.workerId);
        "string" == typeof e2.input ? n.postMessage({ workerId: v2.WORKER_ID, results: v2.parse(e2.input, e2.config), finished: true }) : (n.File && e2.input instanceof File || e2.input instanceof Object) && (e2 = v2.parse(e2.input, e2.config)) && n.postMessage({ workerId: v2.WORKER_ID, results: e2, finished: true });
      }), (f2.prototype = Object.create(u2.prototype)).constructor = f2, (l.prototype = Object.create(u2.prototype)).constructor = l, (c2.prototype = Object.create(c2.prototype)).constructor = c2, (p.prototype = Object.create(u2.prototype)).constructor = p, v2;
    });
  })(papaparse_min$1);
  return papaparse_min$1.exports;
}
var papaparse_minExports = requirePapaparse_min();
const Papa = /* @__PURE__ */ getDefaultExportFromCjs(papaparse_minExports);
let _lazyMatch = () => {
  var __lib__ = (() => {
    var m2 = Object.defineProperty, V2 = Object.getOwnPropertyDescriptor, G2 = Object.getOwnPropertyNames, T2 = Object.prototype.hasOwnProperty, q2 = (r2, e2) => {
      for (var n in e2) m2(r2, n, { get: e2[n], enumerable: true });
    }, H = (r2, e2, n, a) => {
      if (e2 && typeof e2 == "object" || typeof e2 == "function") for (let t of G2(e2)) !T2.call(r2, t) && t !== n && m2(r2, t, { get: () => e2[t], enumerable: !(a = V2(e2, t)) || a.enumerable });
      return r2;
    }, J2 = (r2) => H(m2({}, "__esModule", { value: true }), r2), w2 = {};
    q2(w2, { default: () => re });
    var A2 = (r2) => Array.isArray(r2), d2 = (r2) => typeof r2 == "function", Q2 = (r2) => r2.length === 0, W2 = (r2) => typeof r2 == "number", K = (r2) => typeof r2 == "object" && r2 !== null, X2 = (r2) => r2 instanceof RegExp, b = (r2) => typeof r2 == "string", h2 = (r2) => r2 === void 0, Y2 = (r2) => {
      const e2 = /* @__PURE__ */ new Map();
      return (n) => {
        const a = e2.get(n);
        if (a) return a;
        const t = r2(n);
        return e2.set(n, t), t;
      };
    }, rr = (r2, e2, n = {}) => {
      const a = { cache: {}, input: r2, index: 0, indexMax: 0, options: n, output: [] };
      if (v2(e2)(a) && a.index === r2.length) return a.output;
      throw new Error(`Failed to parse at index ${a.indexMax}`);
    }, i = (r2, e2) => A2(r2) ? er(r2, e2) : b(r2) ? ar(r2, e2) : nr(r2, e2), er = (r2, e2) => {
      const n = {};
      for (const a of r2) {
        if (a.length !== 1) throw new Error(`Invalid character: "${a}"`);
        const t = a.charCodeAt(0);
        n[t] = true;
      }
      return (a) => {
        const t = a.index, o2 = a.input;
        for (; a.index < o2.length && o2.charCodeAt(a.index) in n; ) a.index += 1;
        const u2 = a.index;
        if (u2 > t) {
          if (!h2(e2) && !a.options.silent) {
            const s2 = a.input.slice(t, u2), c2 = d2(e2) ? e2(s2, o2, String(t)) : e2;
            h2(c2) || a.output.push(c2);
          }
          a.indexMax = Math.max(a.indexMax, a.index);
        }
        return true;
      };
    }, nr = (r2, e2) => {
      const n = r2.source, a = r2.flags.replace(/y|$/, "y"), t = new RegExp(n, a);
      return g2((o2) => {
        t.lastIndex = o2.index;
        const u2 = t.exec(o2.input);
        if (u2) {
          if (!h2(e2) && !o2.options.silent) {
            const s2 = d2(e2) ? e2(...u2, o2.input, String(o2.index)) : e2;
            h2(s2) || o2.output.push(s2);
          }
          return o2.index += u2[0].length, o2.indexMax = Math.max(o2.indexMax, o2.index), true;
        } else return false;
      });
    }, ar = (r2, e2) => (n) => {
      if (n.input.startsWith(r2, n.index)) {
        if (!h2(e2) && !n.options.silent) {
          const t = d2(e2) ? e2(r2, n.input, String(n.index)) : e2;
          h2(t) || n.output.push(t);
        }
        return n.index += r2.length, n.indexMax = Math.max(n.indexMax, n.index), true;
      } else return false;
    }, C2 = (r2, e2, n, a) => {
      const t = v2(r2);
      return g2(_2(M((o2) => {
        let u2 = 0;
        for (; u2 < n; ) {
          const s2 = o2.index;
          if (!t(o2) || (u2 += 1, o2.index === s2)) break;
        }
        return u2 >= e2;
      })));
    }, tr = (r2, e2) => C2(r2, 0, 1), f2 = (r2, e2) => C2(r2, 0, 1 / 0), x2 = (r2, e2) => {
      const n = r2.map(v2);
      return g2(_2(M((a) => {
        for (let t = 0, o2 = n.length; t < o2; t++) if (!n[t](a)) return false;
        return true;
      })));
    }, l = (r2, e2) => {
      const n = r2.map(v2);
      return g2(_2((a) => {
        for (let t = 0, o2 = n.length; t < o2; t++) if (n[t](a)) return true;
        return false;
      }));
    }, M = (r2, e2 = false) => {
      const n = v2(r2);
      return (a) => {
        const t = a.index, o2 = a.output.length, u2 = n(a);
        return (!u2 || e2) && (a.index = t, a.output.length !== o2 && (a.output.length = o2)), u2;
      };
    }, _2 = (r2, e2) => {
      const n = v2(r2);
      return n;
    }, g2 = /* @__PURE__ */ (() => {
      let r2 = 0;
      return (e2) => {
        const n = v2(e2), a = r2 += 1;
        return (t) => {
          var o2;
          if (t.options.memoization === false) return n(t);
          const u2 = t.index, s2 = (o2 = t.cache)[a] || (o2[a] = /* @__PURE__ */ new Map()), c2 = s2.get(u2);
          if (c2 === false) return false;
          if (W2(c2)) return t.index = c2, true;
          if (c2) return t.index = c2.index, c2.output?.length && t.output.push(...c2.output), true;
          {
            const Z = t.output.length;
            if (n(t)) {
              const D = t.index, U = t.output.length;
              if (U > Z) {
                const ee = t.output.slice(Z, U);
                s2.set(u2, { index: D, output: ee });
              } else s2.set(u2, D);
              return true;
            } else return s2.set(u2, false), false;
          }
        };
      };
    })(), E = (r2) => {
      let e2;
      return (n) => (e2 || (e2 = v2(r2())), e2(n));
    }, v2 = Y2((r2) => {
      if (d2(r2)) return Q2(r2) ? E(r2) : r2;
      if (b(r2) || X2(r2)) return i(r2);
      if (A2(r2)) return x2(r2);
      if (K(r2)) return l(Object.values(r2));
      throw new Error("Invalid rule");
    }), P2 = "abcdefghijklmnopqrstuvwxyz", ir = (r2) => {
      let e2 = "";
      for (; r2 > 0; ) {
        const n = (r2 - 1) % 26;
        e2 = P2[n] + e2, r2 = Math.floor((r2 - 1) / 26);
      }
      return e2;
    }, O2 = (r2) => {
      let e2 = 0;
      for (let n = 0, a = r2.length; n < a; n++) e2 = e2 * 26 + P2.indexOf(r2[n]) + 1;
      return e2;
    }, S2 = (r2, e2) => {
      if (e2 < r2) return S2(e2, r2);
      const n = [];
      for (; r2 <= e2; ) n.push(r2++);
      return n;
    }, or = (r2, e2, n) => S2(r2, e2).map((a) => String(a).padStart(n, "0")), R2 = (r2, e2) => S2(O2(r2), O2(e2)).map(ir), p = (r2) => r2, z2 = (r2) => ur((e2) => rr(e2, r2, { memoization: false }).join("")), ur = (r2) => {
      const e2 = {};
      return (n) => e2[n] ?? (e2[n] = r2(n));
    }, sr = i(/^\*\*\/\*$/, ".*"), cr = i(/^\*\*\/(\*)?([ a-zA-Z0-9._-]+)$/, (r2, e2, n) => `.*${e2 ? "" : "(?:^|/)"}${n.replaceAll(".", "\\.")}`), lr = i(/^\*\*\/(\*)?([ a-zA-Z0-9._-]*)\{([ a-zA-Z0-9._-]+(?:,[ a-zA-Z0-9._-]+)*)\}$/, (r2, e2, n, a) => `.*${e2 ? "" : "(?:^|/)"}${n.replaceAll(".", "\\.")}(?:${a.replaceAll(",", "|").replaceAll(".", "\\.")})`), y2 = i(/\\./, p), pr = i(/[$.*+?^(){}[\]\|]/, (r2) => `\\${r2}`), vr = i(/./, p), hr = i(/^(?:!!)*!(.*)$/, (r2, e2) => `(?!^${L2(e2)}$).*?`), dr = i(/^(!!)+/, ""), fr = l([hr, dr]), xr = i(/\/(\*\*\/)+/, "(?:/.+/|/)"), gr = i(/^(\*\*\/)+/, "(?:^|.*/)"), mr = i(/\/(\*\*)$/, "(?:/.*|$)"), _r = i(/\*\*/, ".*"), j = l([xr, gr, mr, _r]), Sr = i(/\*\/(?!\*\*\/)/, "[^/]*/"), yr = i(/\*/, "[^/]*"), N2 = l([Sr, yr]), k2 = i("?", "[^/]"), $r = i("[", p), wr = i("]", p), Ar = i(/[!^]/, "^/"), br = i(/[a-z]-[a-z]|[0-9]-[0-9]/i, p), Cr = i(/[$.*+?^(){}[\|]/, (r2) => `\\${r2}`), Mr = i(/[^\]]/, p), Er = l([y2, Cr, br, Mr]), B2 = x2([$r, tr(Ar), f2(Er), wr]), Pr = i("{", "(?:"), Or = i("}", ")"), Rr = i(/(\d+)\.\.(\d+)/, (r2, e2, n) => or(+e2, +n, Math.min(e2.length, n.length)).join("|")), zr = i(/([a-z]+)\.\.([a-z]+)/, (r2, e2, n) => R2(e2, n).join("|")), jr = i(/([A-Z]+)\.\.([A-Z]+)/, (r2, e2, n) => R2(e2.toLowerCase(), n.toLowerCase()).join("|").toUpperCase()), Nr = l([Rr, zr, jr]), I2 = x2([Pr, Nr, Or]), kr = i("{", "(?:"), Br = i("}", ")"), Ir = i(",", "|"), Fr = i(/[$.*+?^(){[\]\|]/, (r2) => `\\${r2}`), Lr = i(/[^}]/, p), Zr = E(() => F), Dr = l([j, N2, k2, B2, I2, Zr, y2, Fr, Ir, Lr]), F = x2([kr, f2(Dr), Br]), Ur = f2(l([sr, cr, lr, fr, j, N2, k2, B2, I2, F, y2, pr, vr])), Vr = Ur, Gr = z2(Vr), L2 = Gr, Tr = i(/\\./, p), qr = i(/./, p), Hr = i(/\*\*\*+/, "*"), Jr = i(/([^/{[(!])\*\*/, (r2, e2) => `${e2}*`), Qr = i(/(^|.)\*\*(?=[^*/)\]}])/, (r2, e2) => `${e2}*`), Wr = f2(l([Tr, Hr, Jr, Qr, qr])), Kr = Wr, Xr = z2(Kr), Yr = Xr, $ = (r2, e2) => {
      const n = Array.isArray(r2) ? r2 : [r2];
      if (!n.length) return false;
      const a = n.map($.compile), t = n.every((s2) => /(\/(?:\*\*)?|\[\/\])$/.test(s2)), o2 = e2.replace(/[\\\/]+/g, "/").replace(/\/$/, t ? "/" : "");
      return a.some((s2) => s2.test(o2));
    };
    $.compile = (r2) => new RegExp(`^${L2(Yr(r2))}$`, "s");
    var re = $;
    return J2(w2);
  })();
  return __lib__.default || __lib__;
};
let _match;
const zeptomatch = (path, pattern) => {
  if (!_match) {
    _match = _lazyMatch();
    _lazyMatch = null;
  }
  return _match(path, pattern);
};
const _DRIVE_LETTER_START_RE = /^[A-Za-z]:\//;
function normalizeWindowsPath(input2 = "") {
  if (!input2) {
    return input2;
  }
  return input2.replace(/\\/g, "/").replace(_DRIVE_LETTER_START_RE, (r2) => r2.toUpperCase());
}
const _UNC_REGEX = /^[/\\]{2}/;
const _IS_ABSOLUTE_RE = /^[/\\](?![/\\])|^[/\\]{2}(?!\.)|^[A-Za-z]:[/\\]/;
const _DRIVE_LETTER_RE = /^[A-Za-z]:$/;
const _ROOT_FOLDER_RE = /^\/([A-Za-z]:)?$/;
const _EXTNAME_RE = /.(\.[^./]+|\.)$/;
const _PATH_ROOT_RE = /^[/\\]|^[a-zA-Z]:[/\\]/;
const sep = "/";
const normalize = function(path) {
  if (path.length === 0) {
    return ".";
  }
  path = normalizeWindowsPath(path);
  const isUNCPath = path.match(_UNC_REGEX);
  const isPathAbsolute = isAbsolute(path);
  const trailingSeparator = path[path.length - 1] === "/";
  path = normalizeString(path, !isPathAbsolute);
  if (path.length === 0) {
    if (isPathAbsolute) {
      return "/";
    }
    return trailingSeparator ? "./" : ".";
  }
  if (trailingSeparator) {
    path += "/";
  }
  if (_DRIVE_LETTER_RE.test(path)) {
    path += "/";
  }
  if (isUNCPath) {
    if (!isPathAbsolute) {
      return `//./${path}`;
    }
    return `//${path}`;
  }
  return isPathAbsolute && !isAbsolute(path) ? `/${path}` : path;
};
const join = function(...segments) {
  let path = "";
  for (const seg of segments) {
    if (!seg) {
      continue;
    }
    if (path.length > 0) {
      const pathTrailing = path[path.length - 1] === "/";
      const segLeading = seg[0] === "/";
      const both = pathTrailing && segLeading;
      if (both) {
        path += seg.slice(1);
      } else {
        path += pathTrailing || segLeading ? seg : `/${seg}`;
      }
    } else {
      path += seg;
    }
  }
  return normalize(path);
};
function cwd() {
  if (typeof process !== "undefined" && typeof process.cwd === "function") {
    return process.cwd().replace(/\\/g, "/");
  }
  return "/";
}
const resolve = function(...arguments_) {
  arguments_ = arguments_.map((argument) => normalizeWindowsPath(argument));
  let resolvedPath = "";
  let resolvedAbsolute = false;
  for (let index = arguments_.length - 1; index >= -1 && !resolvedAbsolute; index--) {
    const path = index >= 0 ? arguments_[index] : cwd();
    if (!path || path.length === 0) {
      continue;
    }
    resolvedPath = `${path}/${resolvedPath}`;
    resolvedAbsolute = isAbsolute(path);
  }
  resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute);
  if (resolvedAbsolute && !isAbsolute(resolvedPath)) {
    return `/${resolvedPath}`;
  }
  return resolvedPath.length > 0 ? resolvedPath : ".";
};
function normalizeString(path, allowAboveRoot) {
  let res = "";
  let lastSegmentLength = 0;
  let lastSlash = -1;
  let dots = 0;
  let char = null;
  for (let index = 0; index <= path.length; ++index) {
    if (index < path.length) {
      char = path[index];
    } else if (char === "/") {
      break;
    } else {
      char = "/";
    }
    if (char === "/") {
      if (lastSlash === index - 1 || dots === 1) ;
      else if (dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res[res.length - 1] !== "." || res[res.length - 2] !== ".") {
          if (res.length > 2) {
            const lastSlashIndex = res.lastIndexOf("/");
            if (lastSlashIndex === -1) {
              res = "";
              lastSegmentLength = 0;
            } else {
              res = res.slice(0, lastSlashIndex);
              lastSegmentLength = res.length - 1 - res.lastIndexOf("/");
            }
            lastSlash = index;
            dots = 0;
            continue;
          } else if (res.length > 0) {
            res = "";
            lastSegmentLength = 0;
            lastSlash = index;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          res += res.length > 0 ? "/.." : "..";
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0) {
          res += `/${path.slice(lastSlash + 1, index)}`;
        } else {
          res = path.slice(lastSlash + 1, index);
        }
        lastSegmentLength = index - lastSlash - 1;
      }
      lastSlash = index;
      dots = 0;
    } else if (char === "." && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}
const isAbsolute = function(p) {
  return _IS_ABSOLUTE_RE.test(p);
};
const toNamespacedPath = function(p) {
  return normalizeWindowsPath(p);
};
const extname = function(p) {
  if (p === "..") return "";
  const match = _EXTNAME_RE.exec(normalizeWindowsPath(p));
  return match && match[1] || "";
};
const relative = function(from, to) {
  const _from = resolve(from).replace(_ROOT_FOLDER_RE, "$1").split("/");
  const _to = resolve(to).replace(_ROOT_FOLDER_RE, "$1").split("/");
  if (_to[0][1] === ":" && _from[0][1] === ":" && _from[0] !== _to[0]) {
    return _to.join("/");
  }
  const _fromCopy = [..._from];
  for (const segment of _fromCopy) {
    if (_to[0] !== segment) {
      break;
    }
    _from.shift();
    _to.shift();
  }
  return [..._from.map(() => ".."), ..._to].join("/");
};
const dirname = function(p) {
  const segments = normalizeWindowsPath(p).replace(/\/$/, "").split("/").slice(0, -1);
  if (segments.length === 1 && _DRIVE_LETTER_RE.test(segments[0])) {
    segments[0] += "/";
  }
  return segments.join("/") || (isAbsolute(p) ? "/" : ".");
};
const format = function(p) {
  const ext = p.ext ? p.ext.startsWith(".") ? p.ext : `.${p.ext}` : "";
  const segments = [p.root, p.dir, p.base ?? (p.name ?? "") + ext].filter(
    Boolean
  );
  return normalizeWindowsPath(
    p.root ? resolve(...segments) : segments.join("/")
  );
};
const basename = function(p, extension) {
  const segments = normalizeWindowsPath(p).split("/");
  let lastSegment = "";
  for (let i = segments.length - 1; i >= 0; i--) {
    const val = segments[i];
    if (val) {
      lastSegment = val;
      break;
    }
  }
  return extension && lastSegment.endsWith(extension) ? lastSegment.slice(0, -extension.length) : lastSegment;
};
const parse = function(p) {
  const root = _PATH_ROOT_RE.exec(p)?.[0]?.replace(/\\/g, "/") || "";
  const base = basename(p);
  const extension = extname(base);
  return {
    root,
    dir: dirname(p),
    base,
    ext: extension,
    name: base.slice(0, base.length - extension.length)
  };
};
const matchesGlob = (path, pattern) => {
  return zeptomatch(pattern, normalize(path));
};
const _path = {
  __proto__: null,
  basename,
  dirname,
  extname,
  format,
  isAbsolute,
  join,
  matchesGlob,
  normalize,
  normalizeString,
  parse,
  relative,
  resolve,
  sep,
  toNamespacedPath
};
const delimiter = /* @__PURE__ */ (() => globalThis.process?.platform === "win32" ? ";" : ":")();
const _platforms = { posix: void 0, win32: void 0 };
const mix = (del = delimiter) => {
  return new Proxy(_path, {
    get(_2, prop) {
      if (prop === "delimiter") return del;
      if (prop === "posix") return posix;
      if (prop === "win32") return win32$1;
      return _platforms[prop] || _path[prop];
    }
  });
};
const posix = /* @__PURE__ */ mix(":");
const win32$1 = /* @__PURE__ */ mix(";");
var dayjs_min$1 = { exports: {} };
var dayjs_min = dayjs_min$1.exports;
var hasRequiredDayjs_min;
function requireDayjs_min() {
  if (hasRequiredDayjs_min) return dayjs_min$1.exports;
  hasRequiredDayjs_min = 1;
  (function(module, exports) {
    !function(t, e2) {
      module.exports = e2();
    }(dayjs_min, function() {
      var t = 1e3, e2 = 6e4, n = 36e5, r2 = "millisecond", i = "second", s2 = "minute", u2 = "hour", a = "day", o2 = "week", c2 = "month", f2 = "quarter", h2 = "year", d2 = "date", l = "Invalid Date", $ = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y2 = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(t2) {
        var e3 = ["th", "st", "nd", "rd"], n2 = t2 % 100;
        return "[" + t2 + (e3[(n2 - 20) % 10] || e3[n2] || e3[0]) + "]";
      } }, m2 = function(t2, e3, n2) {
        var r3 = String(t2);
        return !r3 || r3.length >= e3 ? t2 : "" + Array(e3 + 1 - r3.length).join(n2) + t2;
      }, v2 = { s: m2, z: function(t2) {
        var e3 = -t2.utcOffset(), n2 = Math.abs(e3), r3 = Math.floor(n2 / 60), i2 = n2 % 60;
        return (e3 <= 0 ? "+" : "-") + m2(r3, 2, "0") + ":" + m2(i2, 2, "0");
      }, m: function t2(e3, n2) {
        if (e3.date() < n2.date()) return -t2(n2, e3);
        var r3 = 12 * (n2.year() - e3.year()) + (n2.month() - e3.month()), i2 = e3.clone().add(r3, c2), s3 = n2 - i2 < 0, u3 = e3.clone().add(r3 + (s3 ? -1 : 1), c2);
        return +(-(r3 + (n2 - i2) / (s3 ? i2 - u3 : u3 - i2)) || 0);
      }, a: function(t2) {
        return t2 < 0 ? Math.ceil(t2) || 0 : Math.floor(t2);
      }, p: function(t2) {
        return { M: c2, y: h2, w: o2, d: a, D: d2, h: u2, m: s2, s: i, ms: r2, Q: f2 }[t2] || String(t2 || "").toLowerCase().replace(/s$/, "");
      }, u: function(t2) {
        return void 0 === t2;
      } }, g2 = "en", D = {};
      D[g2] = M;
      var p = "$isDayjsObject", S2 = function(t2) {
        return t2 instanceof _2 || !(!t2 || !t2[p]);
      }, w2 = function t2(e3, n2, r3) {
        var i2;
        if (!e3) return g2;
        if ("string" == typeof e3) {
          var s3 = e3.toLowerCase();
          D[s3] && (i2 = s3), n2 && (D[s3] = n2, i2 = s3);
          var u3 = e3.split("-");
          if (!i2 && u3.length > 1) return t2(u3[0]);
        } else {
          var a2 = e3.name;
          D[a2] = e3, i2 = a2;
        }
        return !r3 && i2 && (g2 = i2), i2 || !r3 && g2;
      }, O2 = function(t2, e3) {
        if (S2(t2)) return t2.clone();
        var n2 = "object" == typeof e3 ? e3 : {};
        return n2.date = t2, n2.args = arguments, new _2(n2);
      }, b = v2;
      b.l = w2, b.i = S2, b.w = function(t2, e3) {
        return O2(t2, { locale: e3.$L, utc: e3.$u, x: e3.$x, $offset: e3.$offset });
      };
      var _2 = function() {
        function M2(t2) {
          this.$L = w2(t2.locale, null, true), this.parse(t2), this.$x = this.$x || t2.x || {}, this[p] = true;
        }
        var m3 = M2.prototype;
        return m3.parse = function(t2) {
          this.$d = function(t3) {
            var e3 = t3.date, n2 = t3.utc;
            if (null === e3) return /* @__PURE__ */ new Date(NaN);
            if (b.u(e3)) return /* @__PURE__ */ new Date();
            if (e3 instanceof Date) return new Date(e3);
            if ("string" == typeof e3 && !/Z$/i.test(e3)) {
              var r3 = e3.match($);
              if (r3) {
                var i2 = r3[2] - 1 || 0, s3 = (r3[7] || "0").substring(0, 3);
                return n2 ? new Date(Date.UTC(r3[1], i2, r3[3] || 1, r3[4] || 0, r3[5] || 0, r3[6] || 0, s3)) : new Date(r3[1], i2, r3[3] || 1, r3[4] || 0, r3[5] || 0, r3[6] || 0, s3);
              }
            }
            return new Date(e3);
          }(t2), this.init();
        }, m3.init = function() {
          var t2 = this.$d;
          this.$y = t2.getFullYear(), this.$M = t2.getMonth(), this.$D = t2.getDate(), this.$W = t2.getDay(), this.$H = t2.getHours(), this.$m = t2.getMinutes(), this.$s = t2.getSeconds(), this.$ms = t2.getMilliseconds();
        }, m3.$utils = function() {
          return b;
        }, m3.isValid = function() {
          return !(this.$d.toString() === l);
        }, m3.isSame = function(t2, e3) {
          var n2 = O2(t2);
          return this.startOf(e3) <= n2 && n2 <= this.endOf(e3);
        }, m3.isAfter = function(t2, e3) {
          return O2(t2) < this.startOf(e3);
        }, m3.isBefore = function(t2, e3) {
          return this.endOf(e3) < O2(t2);
        }, m3.$g = function(t2, e3, n2) {
          return b.u(t2) ? this[e3] : this.set(n2, t2);
        }, m3.unix = function() {
          return Math.floor(this.valueOf() / 1e3);
        }, m3.valueOf = function() {
          return this.$d.getTime();
        }, m3.startOf = function(t2, e3) {
          var n2 = this, r3 = !!b.u(e3) || e3, f3 = b.p(t2), l2 = function(t3, e4) {
            var i2 = b.w(n2.$u ? Date.UTC(n2.$y, e4, t3) : new Date(n2.$y, e4, t3), n2);
            return r3 ? i2 : i2.endOf(a);
          }, $2 = function(t3, e4) {
            return b.w(n2.toDate()[t3].apply(n2.toDate("s"), (r3 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e4)), n2);
          }, y3 = this.$W, M3 = this.$M, m4 = this.$D, v3 = "set" + (this.$u ? "UTC" : "");
          switch (f3) {
            case h2:
              return r3 ? l2(1, 0) : l2(31, 11);
            case c2:
              return r3 ? l2(1, M3) : l2(0, M3 + 1);
            case o2:
              var g3 = this.$locale().weekStart || 0, D2 = (y3 < g3 ? y3 + 7 : y3) - g3;
              return l2(r3 ? m4 - D2 : m4 + (6 - D2), M3);
            case a:
            case d2:
              return $2(v3 + "Hours", 0);
            case u2:
              return $2(v3 + "Minutes", 1);
            case s2:
              return $2(v3 + "Seconds", 2);
            case i:
              return $2(v3 + "Milliseconds", 3);
            default:
              return this.clone();
          }
        }, m3.endOf = function(t2) {
          return this.startOf(t2, false);
        }, m3.$set = function(t2, e3) {
          var n2, o3 = b.p(t2), f3 = "set" + (this.$u ? "UTC" : ""), l2 = (n2 = {}, n2[a] = f3 + "Date", n2[d2] = f3 + "Date", n2[c2] = f3 + "Month", n2[h2] = f3 + "FullYear", n2[u2] = f3 + "Hours", n2[s2] = f3 + "Minutes", n2[i] = f3 + "Seconds", n2[r2] = f3 + "Milliseconds", n2)[o3], $2 = o3 === a ? this.$D + (e3 - this.$W) : e3;
          if (o3 === c2 || o3 === h2) {
            var y3 = this.clone().set(d2, 1);
            y3.$d[l2]($2), y3.init(), this.$d = y3.set(d2, Math.min(this.$D, y3.daysInMonth())).$d;
          } else l2 && this.$d[l2]($2);
          return this.init(), this;
        }, m3.set = function(t2, e3) {
          return this.clone().$set(t2, e3);
        }, m3.get = function(t2) {
          return this[b.p(t2)]();
        }, m3.add = function(r3, f3) {
          var d3, l2 = this;
          r3 = Number(r3);
          var $2 = b.p(f3), y3 = function(t2) {
            var e3 = O2(l2);
            return b.w(e3.date(e3.date() + Math.round(t2 * r3)), l2);
          };
          if ($2 === c2) return this.set(c2, this.$M + r3);
          if ($2 === h2) return this.set(h2, this.$y + r3);
          if ($2 === a) return y3(1);
          if ($2 === o2) return y3(7);
          var M3 = (d3 = {}, d3[s2] = e2, d3[u2] = n, d3[i] = t, d3)[$2] || 1, m4 = this.$d.getTime() + r3 * M3;
          return b.w(m4, this);
        }, m3.subtract = function(t2, e3) {
          return this.add(-1 * t2, e3);
        }, m3.format = function(t2) {
          var e3 = this, n2 = this.$locale();
          if (!this.isValid()) return n2.invalidDate || l;
          var r3 = t2 || "YYYY-MM-DDTHH:mm:ssZ", i2 = b.z(this), s3 = this.$H, u3 = this.$m, a2 = this.$M, o3 = n2.weekdays, c3 = n2.months, f3 = n2.meridiem, h3 = function(t3, n3, i3, s4) {
            return t3 && (t3[n3] || t3(e3, r3)) || i3[n3].slice(0, s4);
          }, d3 = function(t3) {
            return b.s(s3 % 12 || 12, t3, "0");
          }, $2 = f3 || function(t3, e4, n3) {
            var r4 = t3 < 12 ? "AM" : "PM";
            return n3 ? r4.toLowerCase() : r4;
          };
          return r3.replace(y2, function(t3, r4) {
            return r4 || function(t4) {
              switch (t4) {
                case "YY":
                  return String(e3.$y).slice(-2);
                case "YYYY":
                  return b.s(e3.$y, 4, "0");
                case "M":
                  return a2 + 1;
                case "MM":
                  return b.s(a2 + 1, 2, "0");
                case "MMM":
                  return h3(n2.monthsShort, a2, c3, 3);
                case "MMMM":
                  return h3(c3, a2);
                case "D":
                  return e3.$D;
                case "DD":
                  return b.s(e3.$D, 2, "0");
                case "d":
                  return String(e3.$W);
                case "dd":
                  return h3(n2.weekdaysMin, e3.$W, o3, 2);
                case "ddd":
                  return h3(n2.weekdaysShort, e3.$W, o3, 3);
                case "dddd":
                  return o3[e3.$W];
                case "H":
                  return String(s3);
                case "HH":
                  return b.s(s3, 2, "0");
                case "h":
                  return d3(1);
                case "hh":
                  return d3(2);
                case "a":
                  return $2(s3, u3, true);
                case "A":
                  return $2(s3, u3, false);
                case "m":
                  return String(u3);
                case "mm":
                  return b.s(u3, 2, "0");
                case "s":
                  return String(e3.$s);
                case "ss":
                  return b.s(e3.$s, 2, "0");
                case "SSS":
                  return b.s(e3.$ms, 3, "0");
                case "Z":
                  return i2;
              }
              return null;
            }(t3) || i2.replace(":", "");
          });
        }, m3.utcOffset = function() {
          return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m3.diff = function(r3, d3, l2) {
          var $2, y3 = this, M3 = b.p(d3), m4 = O2(r3), v3 = (m4.utcOffset() - this.utcOffset()) * e2, g3 = this - m4, D2 = function() {
            return b.m(y3, m4);
          };
          switch (M3) {
            case h2:
              $2 = D2() / 12;
              break;
            case c2:
              $2 = D2();
              break;
            case f2:
              $2 = D2() / 3;
              break;
            case o2:
              $2 = (g3 - v3) / 6048e5;
              break;
            case a:
              $2 = (g3 - v3) / 864e5;
              break;
            case u2:
              $2 = g3 / n;
              break;
            case s2:
              $2 = g3 / e2;
              break;
            case i:
              $2 = g3 / t;
              break;
            default:
              $2 = g3;
          }
          return l2 ? $2 : b.a($2);
        }, m3.daysInMonth = function() {
          return this.endOf(c2).$D;
        }, m3.$locale = function() {
          return D[this.$L];
        }, m3.locale = function(t2, e3) {
          if (!t2) return this.$L;
          var n2 = this.clone(), r3 = w2(t2, e3, true);
          return r3 && (n2.$L = r3), n2;
        }, m3.clone = function() {
          return b.w(this.$d, this);
        }, m3.toDate = function() {
          return new Date(this.valueOf());
        }, m3.toJSON = function() {
          return this.isValid() ? this.toISOString() : null;
        }, m3.toISOString = function() {
          return this.$d.toISOString();
        }, m3.toString = function() {
          return this.$d.toUTCString();
        }, M2;
      }(), k2 = _2.prototype;
      return O2.prototype = k2, [["$ms", r2], ["$s", i], ["$m", s2], ["$H", u2], ["$W", a], ["$M", c2], ["$y", h2], ["$D", d2]].forEach(function(t2) {
        k2[t2[1]] = function(e3) {
          return this.$g(e3, t2[0], t2[1]);
        };
      }), O2.extend = function(t2, e3) {
        return t2.$i || (t2(e3, _2, O2), t2.$i = true), O2;
      }, O2.locale = w2, O2.isDayjs = S2, O2.unix = function(t2) {
        return O2(1e3 * t2);
      }, O2.en = D[g2], O2.Ls = D, O2.p = {}, O2;
    });
  })(dayjs_min$1);
  return dayjs_min$1.exports;
}
var dayjs_minExports = requireDayjs_min();
const dayjs = /* @__PURE__ */ getDefaultExportFromCjs(dayjs_minExports);
const generateReport = (deliveries2, orders) => {
  if (deliveries2.length < 1) {
    return;
  }
  const resultMap = orders.reduce((acc, order) => {
    acc[order.orderId] = order;
    return acc;
  }, {});
  const report = deliveries2.map((delivery, index) => {
    const result = resultMap[delivery.orderId];
    return {
      "订单号": delivery.orderId,
      "物流公司": delivery.logistics_company,
      "物流单号": delivery.l_id,
      "发货结果": result?.isSuccess ? "成功" : "失败",
      "sn码": result?.snCode,
      "匹配的物流公司": result?.logisticsCompany,
      "错误信息": delivery?.message || result?.message
    };
  });
  const BOM = "\uFEFF";
  const csv = BOM + Papa.unparse(report);
  const reportsDir = posix.join(import.meta.dirname, "reports");
  if (!require$$0$2.existsSync(reportsDir)) {
    require$$0$2.mkdirSync(reportsDir);
  }
  const formattedDate = dayjs().format("YYYY-MM-DD HH.mm.ss");
  const fileName = `${formattedDate}-report.csv`;
  require$$0$2.writeFileSync(posix.join(reportsDir, fileName), csv, { encoding: "utf-8" });
};
const sleep = (ms2) => new Promise((resolve2) => setTimeout(resolve2, ms2));
let Node$1 = class Node2 {
  value;
  next;
  constructor(value) {
    this.value = value;
  }
};
class Queue {
  #head;
  #tail;
  #size;
  constructor() {
    this.clear();
  }
  enqueue(value) {
    const node = new Node$1(value);
    if (this.#head) {
      this.#tail.next = node;
      this.#tail = node;
    } else {
      this.#head = node;
      this.#tail = node;
    }
    this.#size++;
  }
  dequeue() {
    const current = this.#head;
    if (!current) {
      return;
    }
    this.#head = this.#head.next;
    this.#size--;
    return current.value;
  }
  peek() {
    if (!this.#head) {
      return;
    }
    return this.#head.value;
  }
  clear() {
    this.#head = void 0;
    this.#tail = void 0;
    this.#size = 0;
  }
  get size() {
    return this.#size;
  }
  *[Symbol.iterator]() {
    let current = this.#head;
    while (current) {
      yield current.value;
      current = current.next;
    }
  }
  *drain() {
    let current;
    while ((current = this.dequeue()) !== void 0) {
      yield current;
    }
  }
}
function pLimit(concurrency) {
  validateConcurrency(concurrency);
  const queue = new Queue();
  let activeCount = 0;
  const resumeNext = () => {
    if (activeCount < concurrency && queue.size > 0) {
      queue.dequeue()();
      activeCount++;
    }
  };
  const next = () => {
    activeCount--;
    resumeNext();
  };
  const run = async (function_, resolve2, arguments_) => {
    const result = (async () => function_(...arguments_))();
    resolve2(result);
    try {
      await result;
    } catch {
    }
    next();
  };
  const enqueue = (function_, resolve2, arguments_) => {
    new Promise((internalResolve) => {
      queue.enqueue(internalResolve);
    }).then(
      run.bind(void 0, function_, resolve2, arguments_)
    );
    (async () => {
      await Promise.resolve();
      if (activeCount < concurrency) {
        resumeNext();
      }
    })();
  };
  const generator = (function_, ...arguments_) => new Promise((resolve2) => {
    enqueue(function_, resolve2, arguments_);
  });
  Object.defineProperties(generator, {
    activeCount: {
      get: () => activeCount
    },
    pendingCount: {
      get: () => queue.size
    },
    clearQueue: {
      value() {
        queue.clear();
      }
    },
    concurrency: {
      get: () => concurrency,
      set(newConcurrency) {
        validateConcurrency(newConcurrency);
        concurrency = newConcurrency;
        queueMicrotask(() => {
          while (activeCount < concurrency && queue.size > 0) {
            resumeNext();
          }
        });
      }
    }
  });
  return generator;
}
function validateConcurrency(concurrency) {
  if (!((Number.isInteger(concurrency) || concurrency === Number.POSITIVE_INFINITY) && concurrency > 0)) {
    throw new TypeError("Expected `concurrency` to be a number from 1 and up");
  }
}
const urlAlphabet = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";
let random = (bytes) => crypto.getRandomValues(new Uint8Array(bytes));
let customRandom = (alphabet, defaultSize, getRandom) => {
  let mask = (2 << Math.log2(alphabet.length - 1)) - 1;
  let step = -~(1.6 * mask * defaultSize / alphabet.length);
  return (size = defaultSize) => {
    let id = "";
    while (true) {
      let bytes = getRandom(step);
      let j = step | 0;
      while (j--) {
        id += alphabet[bytes[j] & mask] || "";
        if (id.length >= size) return id;
      }
    }
  };
};
let customAlphabet = (alphabet, size = 21) => customRandom(alphabet, size | 0, random);
let nanoid$1 = (size = 21) => {
  let id = "";
  let bytes = crypto.getRandomValues(new Uint8Array(size |= 0));
  while (size--) {
    id += urlAlphabet[bytes[size] & 63];
  }
  return id;
};
var inProcessFactory = {};
var androidServerImpl = {};
var playwrightServer = {};
var playwrightConnection = {};
var socksProxy = {};
var assert$1 = {};
var hasRequiredAssert$1;
function requireAssert$1() {
  if (hasRequiredAssert$1) return assert$1;
  hasRequiredAssert$1 = 1;
  Object.defineProperty(assert$1, "__esModule", {
    value: true
  });
  assert$1.assert = assert2;
  function assert2(value, message) {
    if (!value) throw new Error(message || "Assertion error");
  }
  return assert$1;
}
var crypto$1 = {};
var hasRequiredCrypto;
function requireCrypto() {
  if (hasRequiredCrypto) return crypto$1;
  hasRequiredCrypto = 1;
  Object.defineProperty(crypto$1, "__esModule", {
    value: true
  });
  crypto$1.calculateSha1 = calculateSha1;
  crypto$1.createGuid = createGuid;
  crypto$1.generateSelfSignedCertificate = generateSelfSignedCertificate;
  var _crypto = _interopRequireDefault(require$$5);
  var _assert = requireAssert$1();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  function createGuid() {
    return _crypto.default.randomBytes(16).toString("hex");
  }
  function calculateSha1(buffer2) {
    const hash = _crypto.default.createHash("sha1");
    hash.update(buffer2);
    return hash.digest("hex");
  }
  function encodeBase128(value) {
    const bytes = [];
    do {
      let byte = value & 127;
      value >>>= 7;
      if (bytes.length > 0) byte |= 128;
      bytes.push(byte);
    } while (value > 0);
    return Buffer.from(bytes.reverse());
  }
  class DER {
    static encodeSequence(data) {
      return this._encode(48, Buffer.concat(data));
    }
    static encodeInteger(data) {
      (0, _assert.assert)(data >= -128 && data <= 127);
      return this._encode(2, Buffer.from([data]));
    }
    static encodeObjectIdentifier(oid) {
      const parts = oid.split(".").map((v2) => Number(v2));
      const output2 = [encodeBase128(40 * parts[0] + parts[1])];
      for (let i = 2; i < parts.length; i++) output2.push(encodeBase128(parts[i]));
      return this._encode(6, Buffer.concat(output2));
    }
    static encodeNull() {
      return Buffer.from([5, 0]);
    }
    static encodeSet(data) {
      (0, _assert.assert)(data.length === 1, "Only one item in the set is supported. We'd need to sort the data to support more.");
      return this._encode(49, Buffer.concat(data));
    }
    static encodeExplicitContextDependent(tag, data) {
      return this._encode(160 + tag, data);
    }
    static encodePrintableString(data) {
      return this._encode(19, Buffer.from(data));
    }
    static encodeBitString(data) {
      const unusedBits = 0;
      const content = Buffer.concat([Buffer.from([unusedBits]), data]);
      return this._encode(3, content);
    }
    static encodeDate(date) {
      const year = date.getUTCFullYear();
      const isGeneralizedTime = year >= 2050;
      const parts = [isGeneralizedTime ? year.toString() : year.toString().slice(-2), (date.getUTCMonth() + 1).toString().padStart(2, "0"), date.getUTCDate().toString().padStart(2, "0"), date.getUTCHours().toString().padStart(2, "0"), date.getUTCMinutes().toString().padStart(2, "0"), date.getUTCSeconds().toString().padStart(2, "0")];
      const encodedDate = parts.join("") + "Z";
      const tag = isGeneralizedTime ? 24 : 23;
      return this._encode(tag, Buffer.from(encodedDate));
    }
    static _encode(tag, data) {
      const lengthBytes = this._encodeLength(data.length);
      return Buffer.concat([Buffer.from([tag]), lengthBytes, data]);
    }
    static _encodeLength(length) {
      if (length < 128) {
        return Buffer.from([length]);
      } else {
        const lengthBytes = [];
        while (length > 0) {
          lengthBytes.unshift(length & 255);
          length >>= 8;
        }
        return Buffer.from([128 | lengthBytes.length, ...lengthBytes]);
      }
    }
  }
  function generateSelfSignedCertificate() {
    const {
      privateKey,
      publicKey
    } = _crypto.default.generateKeyPairSync("rsa", {
      modulusLength: 2048
    });
    const publicKeyDer = publicKey.export({
      type: "pkcs1",
      format: "der"
    });
    const oneYearInMilliseconds = 365 * 24 * 60 * 60 * 1e3;
    const notBefore = new Date((/* @__PURE__ */ new Date()).getTime() - oneYearInMilliseconds);
    const notAfter = new Date((/* @__PURE__ */ new Date()).getTime() + oneYearInMilliseconds);
    const tbsCertificate = DER.encodeSequence([
      DER.encodeExplicitContextDependent(0, DER.encodeInteger(1)),
      // version
      DER.encodeInteger(1),
      // serialNumber
      DER.encodeSequence([
        DER.encodeObjectIdentifier("1.2.840.113549.1.1.11"),
        // sha256WithRSAEncryption PKCS #1
        DER.encodeNull()
      ]),
      // signature
      DER.encodeSequence([DER.encodeSet([DER.encodeSequence([
        DER.encodeObjectIdentifier("2.5.4.3"),
        // commonName X.520 DN component
        DER.encodePrintableString("localhost")
      ])]), DER.encodeSet([DER.encodeSequence([
        DER.encodeObjectIdentifier("2.5.4.10"),
        // organizationName X.520 DN component
        DER.encodePrintableString("Playwright Client Certificate Support")
      ])])]),
      // issuer
      DER.encodeSequence([
        DER.encodeDate(notBefore),
        // notBefore
        DER.encodeDate(notAfter)
        // notAfter
      ]),
      // validity
      DER.encodeSequence([DER.encodeSet([DER.encodeSequence([
        DER.encodeObjectIdentifier("2.5.4.3"),
        // commonName X.520 DN component
        DER.encodePrintableString("localhost")
      ])]), DER.encodeSet([DER.encodeSequence([
        DER.encodeObjectIdentifier("2.5.4.10"),
        // organizationName X.520 DN component
        DER.encodePrintableString("Playwright Client Certificate Support")
      ])])]),
      // subject
      DER.encodeSequence([DER.encodeSequence([
        DER.encodeObjectIdentifier("1.2.840.113549.1.1.1"),
        // rsaEncryption PKCS #1
        DER.encodeNull()
      ]), DER.encodeBitString(publicKeyDer)])
      // SubjectPublicKeyInfo
    ]);
    const signature = _crypto.default.sign("sha256", tbsCertificate, privateKey);
    const certificate = DER.encodeSequence([tbsCertificate, DER.encodeSequence([
      DER.encodeObjectIdentifier("1.2.840.113549.1.1.11"),
      // sha256WithRSAEncryption PKCS #1
      DER.encodeNull()
    ]), DER.encodeBitString(signature)]);
    const certPem = [
      "-----BEGIN CERTIFICATE-----",
      // Split the base64 string into lines of 64 characters
      certificate.toString("base64").match(/.{1,64}/g).join("\n"),
      "-----END CERTIFICATE-----"
    ].join("\n");
    return {
      cert: certPem,
      key: privateKey.export({
        type: "pkcs1",
        format: "pem"
      })
    };
  }
  return crypto$1;
}
var debugLogger = {};
var utilsBundle = {};
var utilsBundleImpl;
var hasRequiredUtilsBundleImpl;
function requireUtilsBundleImpl() {
  if (hasRequiredUtilsBundleImpl) return utilsBundleImpl;
  hasRequiredUtilsBundleImpl = 1;
  var Fb = Object.create;
  var ds = Object.defineProperty;
  var qb = Object.getOwnPropertyDescriptor;
  var Db = Object.getOwnPropertyNames;
  var jb = Object.getPrototypeOf, Ub = Object.prototype.hasOwnProperty;
  var _2 = (t, e2) => () => (e2 || t((e2 = { exports: {} }).exports, e2), e2.exports), Sf = (t, e2) => {
    for (var i in e2) ds(t, i, { get: e2[i], enumerable: true });
  }, Ef = (t, e2, i, r2) => {
    if (e2 && typeof e2 == "object" || typeof e2 == "function") for (let n of Db(e2)) !Ub.call(t, n) && n !== i && ds(t, n, { get: () => e2[n], enumerable: !(r2 = qb(e2, n)) || r2.enumerable });
    return t;
  };
  var Ue = (t, e2, i) => (i = t != null ? Fb(jb(t)) : {}, Ef(e2 || !t || !t.__esModule ? ds(i, "default", { value: t, enumerable: true }) : i, t)), $b = (t) => Ef(ds({}, "__esModule", { value: true }), t);
  var Tf = _2((gI, Cf) => {
    var Of = {};
    Cf.exports = Of;
    var kf = { reset: [0, 0], bold: [1, 22], dim: [2, 22], italic: [3, 23], underline: [4, 24], inverse: [7, 27], hidden: [8, 28], strikethrough: [9, 29], black: [30, 39], red: [31, 39], green: [32, 39], yellow: [33, 39], blue: [34, 39], magenta: [35, 39], cyan: [36, 39], white: [37, 39], gray: [90, 39], grey: [90, 39], brightRed: [91, 39], brightGreen: [92, 39], brightYellow: [93, 39], brightBlue: [94, 39], brightMagenta: [95, 39], brightCyan: [96, 39], brightWhite: [97, 39], bgBlack: [40, 49], bgRed: [41, 49], bgGreen: [42, 49], bgYellow: [43, 49], bgBlue: [44, 49], bgMagenta: [45, 49], bgCyan: [46, 49], bgWhite: [47, 49], bgGray: [100, 49], bgGrey: [100, 49], bgBrightRed: [101, 49], bgBrightGreen: [102, 49], bgBrightYellow: [103, 49], bgBrightBlue: [104, 49], bgBrightMagenta: [105, 49], bgBrightCyan: [106, 49], bgBrightWhite: [107, 49], blackBG: [40, 49], redBG: [41, 49], greenBG: [42, 49], yellowBG: [43, 49], blueBG: [44, 49], magentaBG: [45, 49], cyanBG: [46, 49], whiteBG: [47, 49] };
    Object.keys(kf).forEach(function(t) {
      var e2 = kf[t], i = Of[t] = [];
      i.open = "\x1B[" + e2[0] + "m", i.close = "\x1B[" + e2[1] + "m";
    });
  });
  var If = _2((vI, Af) => {
    Af.exports = function(t, e2) {
      e2 = e2 || process.argv;
      var i = e2.indexOf("--"), r2 = /^-{1,2}/.test(t) ? "" : "--", n = e2.indexOf(r2 + t);
      return n !== -1 && (i === -1 ? true : n < i);
    };
  });
  var Lf = _2((yI, Nf) => {
    var Vb = require$$1$3, Mt = If(), ot = process.env, dr = void 0;
    Mt("no-color") || Mt("no-colors") || Mt("color=false") ? dr = false : (Mt("color") || Mt("colors") || Mt("color=true") || Mt("color=always")) && (dr = true);
    "FORCE_COLOR" in ot && (dr = ot.FORCE_COLOR.length === 0 || parseInt(ot.FORCE_COLOR, 10) !== 0);
    function Hb(t) {
      return t === 0 ? false : { level: t, hasBasic: true, has256: t >= 2, has16m: t >= 3 };
    }
    function Gb(t) {
      if (dr === false) return 0;
      if (Mt("color=16m") || Mt("color=full") || Mt("color=truecolor")) return 3;
      if (Mt("color=256")) return 2;
      if (t && !t.isTTY && dr !== true) return 0;
      var e2 = dr ? 1 : 0;
      if (process.platform === "win32") {
        var i = Vb.release().split(".");
        return Number(process.versions.node.split(".")[0]) >= 8 && Number(i[0]) >= 10 && Number(i[2]) >= 10586 ? Number(i[2]) >= 14931 ? 3 : 2 : 1;
      }
      if ("CI" in ot) return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some(function(n) {
        return n in ot;
      }) || ot.CI_NAME === "codeship" ? 1 : e2;
      if ("TEAMCITY_VERSION" in ot) return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(ot.TEAMCITY_VERSION) ? 1 : 0;
      if ("TERM_PROGRAM" in ot) {
        var r2 = parseInt((ot.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (ot.TERM_PROGRAM) {
          case "iTerm.app":
            return r2 >= 3 ? 3 : 2;
          case "Hyper":
            return 3;
          case "Apple_Terminal":
            return 2;
        }
      }
      return /-256(color)?$/i.test(ot.TERM) ? 2 : /^screen|^xterm|^vt100|^rxvt|color|ansi|cygwin|linux/i.test(ot.TERM) || "COLORTERM" in ot ? 1 : (ot.TERM === "dumb", e2);
    }
    function wa(t) {
      var e2 = Gb(t);
      return Hb(e2);
    }
    Nf.exports = { supportsColor: wa, stdout: wa(process.stdout), stderr: wa(process.stderr) };
  });
  var Rf = _2((bI, Bf) => {
    Bf.exports = function(e2, i) {
      var r2 = "";
      e2 = e2 || "Run the trap, drop the bass", e2 = e2.split("");
      var n = { a: ["@", "Ą", "Ⱥ", "Ʌ", "Δ", "Λ", "Д"], b: ["ß", "Ɓ", "Ƀ", "ɮ", "β", "฿"], c: ["©", "Ȼ", "Ͼ"], d: ["Ð", "Ɗ", "Ԁ", "ԁ", "Ԃ", "ԃ"], e: ["Ë", "ĕ", "Ǝ", "ɘ", "Σ", "ξ", "Ҽ", "੬"], f: ["Ӻ"], g: ["ɢ"], h: ["Ħ", "ƕ", "Ң", "Һ", "Ӈ", "Ԋ"], i: ["༏"], j: ["Ĵ"], k: ["ĸ", "Ҡ", "Ӄ", "Ԟ"], l: ["Ĺ"], m: ["ʍ", "Ӎ", "ӎ", "Ԡ", "ԡ", "൩"], n: ["Ñ", "ŋ", "Ɲ", "Ͷ", "Π", "Ҋ"], o: ["Ø", "õ", "ø", "Ǿ", "ʘ", "Ѻ", "ם", "۝", "๏"], p: ["Ƿ", "Ҏ"], q: ["্"], r: ["®", "Ʀ", "Ȑ", "Ɍ", "ʀ", "Я"], s: ["§", "Ϟ", "ϟ", "Ϩ"], t: ["Ł", "Ŧ", "ͳ"], u: ["Ʊ", "Ս"], v: ["ט"], w: ["Ш", "Ѡ", "Ѽ", "൰"], x: ["Ҳ", "Ӿ", "Ӽ", "ӽ"], y: ["¥", "Ұ", "Ӌ"], z: ["Ƶ", "ɀ"] };
      return e2.forEach(function(s2) {
        s2 = s2.toLowerCase();
        var o2 = n[s2] || [" "], a = Math.floor(Math.random() * o2.length);
        typeof n[s2] != "undefined" ? r2 += n[s2][a] : r2 += s2;
      }), r2;
    };
  });
  var Mf = _2((_I, Pf) => {
    Pf.exports = function(e2, i) {
      e2 = e2 || "   he is here   ";
      var r2 = { up: ["̍", "̎", "̄", "̅", "̿", "̑", "̆", "̐", "͒", "͗", "͑", "̇", "̈", "̊", "͂", "̓", "̈", "͊", "͋", "͌", "̃", "̂", "̌", "͐", "̀", "́", "̋", "̏", "̒", "̓", "̔", "̽", "̉", "ͣ", "ͤ", "ͥ", "ͦ", "ͧ", "ͨ", "ͩ", "ͪ", "ͫ", "ͬ", "ͭ", "ͮ", "ͯ", "̾", "͛", "͆", "̚"], down: ["̖", "̗", "̘", "̙", "̜", "̝", "̞", "̟", "̠", "̤", "̥", "̦", "̩", "̪", "̫", "̬", "̭", "̮", "̯", "̰", "̱", "̲", "̳", "̹", "̺", "̻", "̼", "ͅ", "͇", "͈", "͉", "͍", "͎", "͓", "͔", "͕", "͖", "͙", "͚", "̣"], mid: ["̕", "̛", "̀", "́", "͘", "̡", "̢", "̧", "̨", "̴", "̵", "̶", "͜", "͝", "͞", "͟", "͠", "͢", "̸", "̷", "͡", " ҉"] }, n = [].concat(r2.up, r2.down, r2.mid);
      function s2(l) {
        var c2 = Math.floor(Math.random() * l);
        return c2;
      }
      function o2(l) {
        var c2 = false;
        return n.filter(function(u2) {
          c2 = u2 === l;
        }), c2;
      }
      function a(l, c2) {
        var u2 = "", f2, d2;
        c2 = c2 || {}, c2.up = typeof c2.up != "undefined" ? c2.up : true, c2.mid = typeof c2.mid != "undefined" ? c2.mid : true, c2.down = typeof c2.down != "undefined" ? c2.down : true, c2.size = typeof c2.size != "undefined" ? c2.size : "maxi", l = l.split("");
        for (d2 in l) if (!o2(d2)) {
          switch (u2 = u2 + l[d2], f2 = { up: 0, down: 0, mid: 0 }, c2.size) {
            case "mini":
              f2.up = s2(8), f2.mid = s2(2), f2.down = s2(8);
              break;
            case "maxi":
              f2.up = s2(16) + 3, f2.mid = s2(4) + 1, f2.down = s2(64) + 3;
              break;
            default:
              f2.up = s2(8) + 1, f2.mid = s2(6) / 2, f2.down = s2(8) + 1;
              break;
          }
          var g2 = ["up", "mid", "down"];
          for (var m2 in g2) for (var y2 = g2[m2], b = 0; b <= f2[y2]; b++) c2[y2] && (u2 = u2 + r2[y2][s2(r2[y2].length)]);
        }
        return u2;
      }
      return a(e2, i);
    };
  });
  var qf = _2((wI, Ff) => {
    Ff.exports = function(t) {
      return function(e2, i, r2) {
        if (e2 === " ") return e2;
        switch (i % 3) {
          case 0:
            return t.red(e2);
          case 1:
            return t.white(e2);
          case 2:
            return t.blue(e2);
        }
      };
    };
  });
  var jf = _2((xI, Df) => {
    Df.exports = function(t) {
      return function(e2, i, r2) {
        return i % 2 === 0 ? e2 : t.inverse(e2);
      };
    };
  });
  var $f = _2((SI, Uf) => {
    Uf.exports = function(t) {
      var e2 = ["red", "yellow", "green", "blue", "magenta"];
      return function(i, r2, n) {
        return i === " " ? i : t[e2[r2++ % e2.length]](i);
      };
    };
  });
  var Hf = _2((EI, Vf) => {
    Vf.exports = function(t) {
      var e2 = ["underline", "inverse", "grey", "yellow", "red", "green", "blue", "white", "cyan", "magenta", "brightYellow", "brightRed", "brightGreen", "brightBlue", "brightWhite", "brightCyan", "brightMagenta"];
      return function(i, r2, n) {
        return i === " " ? i : t[e2[Math.round(Math.random() * (e2.length - 2))]](i);
      };
    };
  });
  var Jf = _2((OI, zf) => {
    var ye2 = {};
    zf.exports = ye2;
    ye2.themes = {};
    var Yb = require$$1$2, Di = ye2.styles = Tf(), Yf = Object.defineProperties, Wb = new RegExp(/[\r\n]+/g);
    ye2.supportsColor = Lf().supportsColor;
    typeof ye2.enabled == "undefined" && (ye2.enabled = ye2.supportsColor() !== false);
    ye2.enable = function() {
      ye2.enabled = true;
    };
    ye2.disable = function() {
      ye2.enabled = false;
    };
    ye2.stripColors = ye2.strip = function(t) {
      return ("" + t).replace(/\x1B\[\d+m/g, "");
    };
    ye2.stylize = function(e2, i) {
      if (!ye2.enabled) return e2 + "";
      var r2 = Di[i];
      return !r2 && i in ye2 ? ye2[i](e2) : r2.open + e2 + r2.close;
    };
    var Kb = /[|\\{}()[\]^$+*?.]/g, zb = function(t) {
      if (typeof t != "string") throw new TypeError("Expected a string");
      return t.replace(Kb, "\\$&");
    };
    function Wf(t) {
      var e2 = function i() {
        return Zb.apply(i, arguments);
      };
      return e2._styles = t, e2.__proto__ = Jb, e2;
    }
    var Kf = function() {
      var t = {};
      return Di.grey = Di.gray, Object.keys(Di).forEach(function(e2) {
        Di[e2].closeRe = new RegExp(zb(Di[e2].close), "g"), t[e2] = { get: function() {
          return Wf(this._styles.concat(e2));
        } };
      }), t;
    }(), Jb = Yf(function() {
    }, Kf);
    function Zb() {
      var t = Array.prototype.slice.call(arguments), e2 = t.map(function(o2) {
        return o2 != null && o2.constructor === String ? o2 : Yb.inspect(o2);
      }).join(" ");
      if (!ye2.enabled || !e2) return e2;
      for (var i = e2.indexOf(`
`) != -1, r2 = this._styles, n = r2.length; n--; ) {
        var s2 = Di[r2[n]];
        e2 = s2.open + e2.replace(s2.closeRe, s2.open) + s2.close, i && (e2 = e2.replace(Wb, function(o2) {
          return s2.close + o2 + s2.open;
        }));
      }
      return e2;
    }
    ye2.setTheme = function(t) {
      if (typeof t == "string") {
        console.log("colors.setTheme now only accepts an object, not a string.  If you are trying to set a theme from a file, it is now your (the caller's) responsibility to require the file.  The old syntax looked like colors.setTheme(new URL('.', import.meta.url).pathname + '/../themes/generic-logging.js'); The new syntax looks like colors.setTheme(require(new URL('.', import.meta.url).pathname + '/../themes/generic-logging.js'));");
        return;
      }
      for (var e2 in t) (function(i) {
        ye2[i] = function(r2) {
          if (typeof t[i] == "object") {
            var n = r2;
            for (var s2 in t[i]) n = ye2[t[i][s2]](n);
            return n;
          }
          return ye2[t[i]](r2);
        };
      })(e2);
    };
    function Qb() {
      var t = {};
      return Object.keys(Kf).forEach(function(e2) {
        t[e2] = { get: function() {
          return Wf([e2]);
        } };
      }), t;
    }
    var Xb = function(e2, i) {
      var r2 = i.split("");
      return r2 = r2.map(e2), r2.join("");
    };
    ye2.trap = Rf();
    ye2.zalgo = Mf();
    ye2.maps = {};
    ye2.maps.america = qf()(ye2);
    ye2.maps.zebra = jf()(ye2);
    ye2.maps.rainbow = $f()(ye2);
    ye2.maps.random = Hf()(ye2);
    for (Gf in ye2.maps) (function(t) {
      ye2[t] = function(e2) {
        return Xb(ye2.maps[t], e2);
      };
    })(Gf);
    var Gf;
    Yf(ye2, Qb());
  });
  var Qf = _2((CI, Zf) => {
    var e_ = Jf();
    Zf.exports = e_;
  });
  var eh = _2((TI, Xf) => {
    var mr = 1e3, gr = mr * 60, vr = gr * 60, ji = vr * 24, t_ = ji * 7, i_ = ji * 365.25;
    Xf.exports = function(t, e2) {
      e2 = e2 || {};
      var i = typeof t;
      if (i === "string" && t.length > 0) return r_(t);
      if (i === "number" && isFinite(t)) return e2.long ? s_(t) : n_(t);
      throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(t));
    };
    function r_(t) {
      if (t = String(t), !(t.length > 100)) {
        var e2 = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);
        if (e2) {
          var i = parseFloat(e2[1]), r2 = (e2[2] || "ms").toLowerCase();
          switch (r2) {
            case "years":
            case "year":
            case "yrs":
            case "yr":
            case "y":
              return i * i_;
            case "weeks":
            case "week":
            case "w":
              return i * t_;
            case "days":
            case "day":
            case "d":
              return i * ji;
            case "hours":
            case "hour":
            case "hrs":
            case "hr":
            case "h":
              return i * vr;
            case "minutes":
            case "minute":
            case "mins":
            case "min":
            case "m":
              return i * gr;
            case "seconds":
            case "second":
            case "secs":
            case "sec":
            case "s":
              return i * mr;
            case "milliseconds":
            case "millisecond":
            case "msecs":
            case "msec":
            case "ms":
              return i;
            default:
              return;
          }
        }
      }
    }
    function n_(t) {
      var e2 = Math.abs(t);
      return e2 >= ji ? Math.round(t / ji) + "d" : e2 >= vr ? Math.round(t / vr) + "h" : e2 >= gr ? Math.round(t / gr) + "m" : e2 >= mr ? Math.round(t / mr) + "s" : t + "ms";
    }
    function s_(t) {
      var e2 = Math.abs(t);
      return e2 >= ji ? ms2(t, e2, ji, "day") : e2 >= vr ? ms2(t, e2, vr, "hour") : e2 >= gr ? ms2(t, e2, gr, "minute") : e2 >= mr ? ms2(t, e2, mr, "second") : t + " ms";
    }
    function ms2(t, e2, i, r2) {
      var n = e2 >= i * 1.5;
      return Math.round(t / i) + " " + r2 + (n ? "s" : "");
    }
  });
  var xa = _2((AI, th) => {
    function o_(t) {
      i.debug = i, i.default = i, i.coerce = l, i.disable = s2, i.enable = n, i.enabled = o2, i.humanize = eh(), i.destroy = c2, Object.keys(t).forEach((u2) => {
        i[u2] = t[u2];
      }), i.names = [], i.skips = [], i.formatters = {};
      function e2(u2) {
        let f2 = 0;
        for (let d2 = 0; d2 < u2.length; d2++) f2 = (f2 << 5) - f2 + u2.charCodeAt(d2), f2 |= 0;
        return i.colors[Math.abs(f2) % i.colors.length];
      }
      i.selectColor = e2;
      function i(u2) {
        let f2, d2 = null, g2, m2;
        function y2(...b) {
          if (!y2.enabled) return;
          let x2 = y2, E = Number(/* @__PURE__ */ new Date()), O2 = E - (f2 || E);
          x2.diff = O2, x2.prev = f2, x2.curr = E, f2 = E, b[0] = i.coerce(b[0]), typeof b[0] != "string" && b.unshift("%O");
          let k2 = 0;
          b[0] = b[0].replace(/%([a-zA-Z%])/g, (R2, T2) => {
            if (R2 === "%%") return "%";
            k2++;
            let A2 = i.formatters[T2];
            if (typeof A2 == "function") {
              let C2 = b[k2];
              R2 = A2.call(x2, C2), b.splice(k2, 1), k2--;
            }
            return R2;
          }), i.formatArgs.call(x2, b), (x2.log || i.log).apply(x2, b);
        }
        return y2.namespace = u2, y2.useColors = i.useColors(), y2.color = i.selectColor(u2), y2.extend = r2, y2.destroy = i.destroy, Object.defineProperty(y2, "enabled", { enumerable: true, configurable: false, get: () => d2 !== null ? d2 : (g2 !== i.namespaces && (g2 = i.namespaces, m2 = i.enabled(u2)), m2), set: (b) => {
          d2 = b;
        } }), typeof i.init == "function" && i.init(y2), y2;
      }
      function r2(u2, f2) {
        let d2 = i(this.namespace + (typeof f2 == "undefined" ? ":" : f2) + u2);
        return d2.log = this.log, d2;
      }
      function n(u2) {
        i.save(u2), i.namespaces = u2, i.names = [], i.skips = [];
        let f2, d2 = (typeof u2 == "string" ? u2 : "").split(/[\s,]+/), g2 = d2.length;
        for (f2 = 0; f2 < g2; f2++) d2[f2] && (u2 = d2[f2].replace(/\*/g, ".*?"), u2[0] === "-" ? i.skips.push(new RegExp("^" + u2.slice(1) + "$")) : i.names.push(new RegExp("^" + u2 + "$")));
      }
      function s2() {
        let u2 = [...i.names.map(a), ...i.skips.map(a).map((f2) => "-" + f2)].join(",");
        return i.enable(""), u2;
      }
      function o2(u2) {
        if (u2[u2.length - 1] === "*") return true;
        let f2, d2;
        for (f2 = 0, d2 = i.skips.length; f2 < d2; f2++) if (i.skips[f2].test(u2)) return false;
        for (f2 = 0, d2 = i.names.length; f2 < d2; f2++) if (i.names[f2].test(u2)) return true;
        return false;
      }
      function a(u2) {
        return u2.toString().substring(2, u2.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function l(u2) {
        return u2 instanceof Error ? u2.stack || u2.message : u2;
      }
      function c2() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      return i.enable(i.load()), i;
    }
    th.exports = o_;
  });
  var ih = _2((_t, gs) => {
    _t.formatArgs = l_;
    _t.save = c_;
    _t.load = u_;
    _t.useColors = a_;
    _t.storage = f_();
    _t.destroy = /* @__PURE__ */ (() => {
      let t = false;
      return () => {
        t || (t = true, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
      };
    })();
    _t.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"];
    function a_() {
      return typeof window != "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs) ? true : typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/) ? false : typeof document != "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window != "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function l_(t) {
      if (t[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + t[0] + (this.useColors ? "%c " : " ") + "+" + gs.exports.humanize(this.diff), !this.useColors) return;
      let e2 = "color: " + this.color;
      t.splice(1, 0, e2, "color: inherit");
      let i = 0, r2 = 0;
      t[0].replace(/%[a-zA-Z%]/g, (n) => {
        n !== "%%" && (i++, n === "%c" && (r2 = i));
      }), t.splice(r2, 0, e2);
    }
    _t.log = console.debug || console.log || (() => {
    });
    function c_(t) {
      try {
        t ? _t.storage.setItem("debug", t) : _t.storage.removeItem("debug");
      } catch {
      }
    }
    function u_() {
      let t;
      try {
        t = _t.storage.getItem("debug");
      } catch {
      }
      return !t && typeof process != "undefined" && "env" in process && (t = process.env.DEBUG), t;
    }
    function f_() {
      try {
        return localStorage;
      } catch {
      }
    }
    gs.exports = xa()(_t);
    var { formatters: h_ } = gs.exports;
    h_.j = function(t) {
      try {
        return JSON.stringify(t);
      } catch (e2) {
        return "[UnexpectedJSONParseError]: " + e2.message;
      }
    };
  });
  var nh = _2((II, rh) => {
    rh.exports = (t, e2 = process.argv) => {
      let i = t.startsWith("-") ? "" : t.length === 1 ? "-" : "--", r2 = e2.indexOf(i + t), n = e2.indexOf("--");
      return r2 !== -1 && (n === -1 || r2 < n);
    };
  });
  var ah = _2((NI, oh) => {
    var p_ = require$$1$3, sh = require$$2$1, Ot = nh(), { env: We } = process, vs;
    Ot("no-color") || Ot("no-colors") || Ot("color=false") || Ot("color=never") ? vs = 0 : (Ot("color") || Ot("colors") || Ot("color=true") || Ot("color=always")) && (vs = 1);
    function d_() {
      if ("FORCE_COLOR" in We) return We.FORCE_COLOR === "true" ? 1 : We.FORCE_COLOR === "false" ? 0 : We.FORCE_COLOR.length === 0 ? 1 : Math.min(Number.parseInt(We.FORCE_COLOR, 10), 3);
    }
    function m_(t) {
      return t === 0 ? false : { level: t, hasBasic: true, has256: t >= 2, has16m: t >= 3 };
    }
    function g_(t, { streamIsTTY: e2, sniffFlags: i = true } = {}) {
      let r2 = d_();
      r2 !== void 0 && (vs = r2);
      let n = i ? vs : r2;
      if (n === 0) return 0;
      if (i) {
        if (Ot("color=16m") || Ot("color=full") || Ot("color=truecolor")) return 3;
        if (Ot("color=256")) return 2;
      }
      if (t && !e2 && n === void 0) return 0;
      let s2 = n || 0;
      if (We.TERM === "dumb") return s2;
      if (process.platform === "win32") {
        let o2 = p_.release().split(".");
        return Number(o2[0]) >= 10 && Number(o2[2]) >= 10586 ? Number(o2[2]) >= 14931 ? 3 : 2 : 1;
      }
      if ("CI" in We) return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE", "DRONE"].some((o2) => o2 in We) || We.CI_NAME === "codeship" ? 1 : s2;
      if ("TEAMCITY_VERSION" in We) return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(We.TEAMCITY_VERSION) ? 1 : 0;
      if (We.COLORTERM === "truecolor") return 3;
      if ("TERM_PROGRAM" in We) {
        let o2 = Number.parseInt((We.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (We.TERM_PROGRAM) {
          case "iTerm.app":
            return o2 >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      return /-256(color)?$/i.test(We.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(We.TERM) || "COLORTERM" in We ? 1 : s2;
    }
    function Sa(t, e2 = {}) {
      let i = g_(t, { streamIsTTY: t && t.isTTY, ...e2 });
      return m_(i);
    }
    oh.exports = { supportsColor: Sa, stdout: Sa({ isTTY: sh.isatty(1) }), stderr: Sa({ isTTY: sh.isatty(2) }) };
  });
  var ch = _2((Qe, bs) => {
    var v_ = require$$2$1, ys = require$$1$2;
    Qe.init = E_;
    Qe.log = w_;
    Qe.formatArgs = b_;
    Qe.save = x_;
    Qe.load = S_;
    Qe.useColors = y_;
    Qe.destroy = ys.deprecate(() => {
    }, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    Qe.colors = [6, 2, 3, 4, 5, 1];
    try {
      let t = ah();
      t && (t.stderr || t).level >= 2 && (Qe.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221]);
    } catch {
    }
    Qe.inspectOpts = Object.keys(process.env).filter((t) => /^debug_/i.test(t)).reduce((t, e2) => {
      let i = e2.substring(6).toLowerCase().replace(/_([a-z])/g, (n, s2) => s2.toUpperCase()), r2 = process.env[e2];
      return /^(yes|on|true|enabled)$/i.test(r2) ? r2 = true : /^(no|off|false|disabled)$/i.test(r2) ? r2 = false : r2 === "null" ? r2 = null : r2 = Number(r2), t[i] = r2, t;
    }, {});
    function y_() {
      return "colors" in Qe.inspectOpts ? !!Qe.inspectOpts.colors : v_.isatty(process.stderr.fd);
    }
    function b_(t) {
      let { namespace: e2, useColors: i } = this;
      if (i) {
        let r2 = this.color, n = "\x1B[3" + (r2 < 8 ? r2 : "8;5;" + r2), s2 = `  ${n};1m${e2} \x1B[0m`;
        t[0] = s2 + t[0].split(`
`).join(`
` + s2), t.push(n + "m+" + bs.exports.humanize(this.diff) + "\x1B[0m");
      } else t[0] = __() + e2 + " " + t[0];
    }
    function __() {
      return Qe.inspectOpts.hideDate ? "" : (/* @__PURE__ */ new Date()).toISOString() + " ";
    }
    function w_(...t) {
      return process.stderr.write(ys.format(...t) + `
`);
    }
    function x_(t) {
      t ? process.env.DEBUG = t : delete process.env.DEBUG;
    }
    function S_() {
      return process.env.DEBUG;
    }
    function E_(t) {
      t.inspectOpts = {};
      let e2 = Object.keys(Qe.inspectOpts);
      for (let i = 0; i < e2.length; i++) t.inspectOpts[e2[i]] = Qe.inspectOpts[e2[i]];
    }
    bs.exports = xa()(Qe);
    var { formatters: lh } = bs.exports;
    lh.o = function(t) {
      return this.inspectOpts.colors = this.useColors, ys.inspect(t, this.inspectOpts).split(`
`).map((e2) => e2.trim()).join(" ");
    };
    lh.O = function(t) {
      return this.inspectOpts.colors = this.useColors, ys.inspect(t, this.inspectOpts);
    };
  });
  var yr = _2((LI, Ea) => {
    typeof process == "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs ? Ea.exports = ih() : Ea.exports = ch();
  });
  var Rh = _2((BI, ow) => {
    ow.exports = { name: "dotenv", version: "16.4.5", description: "Loads environment variables from .env file", main: "lib/main.js", types: "lib/main.d.ts", exports: { ".": { types: "./lib/main.d.ts", require: "./lib/main.js", default: "./lib/main.js" }, "./config": "./config.js", "./config.js": "./config.js", "./lib/env-options": "./lib/env-options.js", "./lib/env-options.js": "./lib/env-options.js", "./lib/cli-options": "./lib/cli-options.js", "./lib/cli-options.js": "./lib/cli-options.js", "./package.json": "./package.json" }, scripts: { "dts-check": "tsc --project tests/types/tsconfig.json", lint: "standard", "lint-readme": "standard-markdown", pretest: "npm run lint && npm run dts-check", test: "tap tests/*.js --100 -Rspec", "test:coverage": "tap --coverage-report=lcov", prerelease: "npm test", release: "standard-version" }, repository: { type: "git", url: "git://github.com/motdotla/dotenv.git" }, funding: "https://dotenvx.com", keywords: ["dotenv", "env", ".env", "environment", "variables", "config", "settings"], readmeFilename: "README.md", license: "BSD-2-Clause", devDependencies: { "@definitelytyped/dtslint": "^0.0.133", "@types/node": "^18.11.3", decache: "^4.6.1", sinon: "^14.0.1", standard: "^17.0.0", "standard-markdown": "^7.1.0", "standard-version": "^9.5.0", tap: "^16.3.0", tar: "^6.1.11", typescript: "^4.8.4" }, engines: { node: ">=12" }, browser: { fs: false } };
  });
  var qh = _2((RI, ii) => {
    var Ra = require$$0$2, Pa = require$$1$1, aw = require$$1$3, lw = require$$5, cw = Rh(), Ma = cw.version, uw = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;
    function fw(t) {
      let e2 = {}, i = t.toString();
      i = i.replace(/\r\n?/mg, `
`);
      let r2;
      for (; (r2 = uw.exec(i)) != null; ) {
        let n = r2[1], s2 = r2[2] || "";
        s2 = s2.trim();
        let o2 = s2[0];
        s2 = s2.replace(/^(['"`])([\s\S]*)\1$/mg, "$2"), o2 === '"' && (s2 = s2.replace(/\\n/g, `
`), s2 = s2.replace(/\\r/g, "\r")), e2[n] = s2;
      }
      return e2;
    }
    function hw(t) {
      let e2 = Fh(t), i = $e.configDotenv({ path: e2 });
      if (!i.parsed) {
        let o2 = new Error(`MISSING_DATA: Cannot parse ${e2} for an unknown reason`);
        throw o2.code = "MISSING_DATA", o2;
      }
      let r2 = Mh(t).split(","), n = r2.length, s2;
      for (let o2 = 0; o2 < n; o2++) try {
        let a = r2[o2].trim(), l = mw(i, a);
        s2 = $e.decrypt(l.ciphertext, l.key);
        break;
      } catch (a) {
        if (o2 + 1 >= n) throw a;
      }
      return $e.parse(s2);
    }
    function pw(t) {
      console.log(`[dotenv@${Ma}][INFO] ${t}`);
    }
    function dw(t) {
      console.log(`[dotenv@${Ma}][WARN] ${t}`);
    }
    function Ts(t) {
      console.log(`[dotenv@${Ma}][DEBUG] ${t}`);
    }
    function Mh(t) {
      return t && t.DOTENV_KEY && t.DOTENV_KEY.length > 0 ? t.DOTENV_KEY : process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0 ? process.env.DOTENV_KEY : "";
    }
    function mw(t, e2) {
      let i;
      try {
        i = new URL(e2);
      } catch (a) {
        if (a.code === "ERR_INVALID_URL") {
          let l = new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");
          throw l.code = "INVALID_DOTENV_KEY", l;
        }
        throw a;
      }
      let r2 = i.password;
      if (!r2) {
        let a = new Error("INVALID_DOTENV_KEY: Missing key part");
        throw a.code = "INVALID_DOTENV_KEY", a;
      }
      let n = i.searchParams.get("environment");
      if (!n) {
        let a = new Error("INVALID_DOTENV_KEY: Missing environment part");
        throw a.code = "INVALID_DOTENV_KEY", a;
      }
      let s2 = `DOTENV_VAULT_${n.toUpperCase()}`, o2 = t.parsed[s2];
      if (!o2) {
        let a = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${s2} in your .env.vault file.`);
        throw a.code = "NOT_FOUND_DOTENV_ENVIRONMENT", a;
      }
      return { ciphertext: o2, key: r2 };
    }
    function Fh(t) {
      let e2 = null;
      if (t && t.path && t.path.length > 0) if (Array.isArray(t.path)) for (let i of t.path) Ra.existsSync(i) && (e2 = i.endsWith(".vault") ? i : `${i}.vault`);
      else e2 = t.path.endsWith(".vault") ? t.path : `${t.path}.vault`;
      else e2 = Pa.resolve(process.cwd(), ".env.vault");
      return Ra.existsSync(e2) ? e2 : null;
    }
    function Ph(t) {
      return t[0] === "~" ? Pa.join(aw.homedir(), t.slice(1)) : t;
    }
    function gw(t) {
      pw("Loading env from encrypted .env.vault");
      let e2 = $e._parseVault(t), i = process.env;
      return t && t.processEnv != null && (i = t.processEnv), $e.populate(i, e2, t), { parsed: e2 };
    }
    function vw(t) {
      let e2 = Pa.resolve(process.cwd(), ".env"), i = "utf8", r2 = !!(t && t.debug);
      t && t.encoding ? i = t.encoding : r2 && Ts("No encoding is specified. UTF-8 is used by default");
      let n = [e2];
      if (t && t.path) if (!Array.isArray(t.path)) n = [Ph(t.path)];
      else {
        n = [];
        for (let l of t.path) n.push(Ph(l));
      }
      let s2, o2 = {};
      for (let l of n) try {
        let c2 = $e.parse(Ra.readFileSync(l, { encoding: i }));
        $e.populate(o2, c2, t);
      } catch (c2) {
        r2 && Ts(`Failed to load ${l} ${c2.message}`), s2 = c2;
      }
      let a = process.env;
      return t && t.processEnv != null && (a = t.processEnv), $e.populate(a, o2, t), s2 ? { parsed: o2, error: s2 } : { parsed: o2 };
    }
    function yw(t) {
      if (Mh(t).length === 0) return $e.configDotenv(t);
      let e2 = Fh(t);
      return e2 ? $e._configVault(t) : (dw(`You set DOTENV_KEY but you are missing a .env.vault file at ${e2}. Did you forget to build it?`), $e.configDotenv(t));
    }
    function bw(t, e2) {
      let i = Buffer.from(e2.slice(-64), "hex"), r2 = Buffer.from(t, "base64"), n = r2.subarray(0, 12), s2 = r2.subarray(-16);
      r2 = r2.subarray(12, -16);
      try {
        let o2 = lw.createDecipheriv("aes-256-gcm", i, n);
        return o2.setAuthTag(s2), `${o2.update(r2)}${o2.final()}`;
      } catch (o2) {
        let a = o2 instanceof RangeError, l = o2.message === "Invalid key length", c2 = o2.message === "Unsupported state or unable to authenticate data";
        if (a || l) {
          let u2 = new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");
          throw u2.code = "INVALID_DOTENV_KEY", u2;
        } else if (c2) {
          let u2 = new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");
          throw u2.code = "DECRYPTION_FAILED", u2;
        } else throw o2;
      }
    }
    function _w(t, e2, i = {}) {
      let r2 = !!(i && i.debug), n = !!(i && i.override);
      if (typeof e2 != "object") {
        let s2 = new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");
        throw s2.code = "OBJECT_REQUIRED", s2;
      }
      for (let s2 of Object.keys(e2)) Object.prototype.hasOwnProperty.call(t, s2) ? (n === true && (t[s2] = e2[s2]), r2 && Ts(n === true ? `"${s2}" is already defined and WAS overwritten` : `"${s2}" is already defined and was NOT overwritten`)) : t[s2] = e2[s2];
    }
    var $e = { configDotenv: vw, _configVault: gw, _parseVault: hw, config: yw, decrypt: bw, parse: fw, populate: _w };
    ii.exports.configDotenv = $e.configDotenv;
    ii.exports._configVault = $e._configVault;
    ii.exports._parseVault = $e._parseVault;
    ii.exports.config = $e.config;
    ii.exports.decrypt = $e.decrypt;
    ii.exports.parse = $e.parse;
    ii.exports.populate = $e.populate;
    ii.exports = $e;
  });
  var jh = _2((Dh) => {
    var ww = require$$6.parse, xw = { ftp: 21, gopher: 70, http: 80, https: 443, ws: 80, wss: 443 }, Sw = String.prototype.endsWith || function(t) {
      return t.length <= this.length && this.indexOf(t, this.length - t.length) !== -1;
    };
    function Ew(t) {
      var e2 = typeof t == "string" ? ww(t) : t || {}, i = e2.protocol, r2 = e2.host, n = e2.port;
      if (typeof r2 != "string" || !r2 || typeof i != "string" || (i = i.split(":", 1)[0], r2 = r2.replace(/:\d*$/, ""), n = parseInt(n) || xw[i] || 0, !kw(r2, n))) return "";
      var s2 = _r("npm_config_" + i + "_proxy") || _r(i + "_proxy") || _r("npm_config_proxy") || _r("all_proxy");
      return s2 && s2.indexOf("://") === -1 && (s2 = i + "://" + s2), s2;
    }
    function kw(t, e2) {
      var i = (_r("npm_config_no_proxy") || _r("no_proxy")).toLowerCase();
      return i ? i === "*" ? false : i.split(/[,\s]/).every(function(r2) {
        if (!r2) return true;
        var n = r2.match(/^(.+):(\d+)$/), s2 = n ? n[1] : r2, o2 = n ? parseInt(n[2]) : 0;
        return o2 && o2 !== e2 ? true : /^[.*]/.test(s2) ? (s2.charAt(0) === "*" && (s2 = s2.slice(1)), !Sw.call(t, s2)) : t !== s2;
      }) : true;
    }
    function _r(t) {
      return process.env[t.toLowerCase()] || process.env[t.toUpperCase()] || "";
    }
    Dh.getProxyForUrl = Ew;
  });
  var Uh = _2((Fa) => {
    Object.defineProperty(Fa, "__esModule", { value: true });
    function Ow(t) {
      return function(e2, i) {
        return new Promise((r2, n) => {
          t.call(this, e2, i, (s2, o2) => {
            s2 ? n(s2) : r2(o2);
          });
        });
      };
    }
    Fa.default = Ow;
  });
  var ja = _2((Da, Vh) => {
    var $h = Da && Da.__importDefault || function(t) {
      return t && t.__esModule ? t : { default: t };
    }, Cw = require$$0$4, Tw = $h(yr()), Aw = $h(Uh()), rn = Tw.default("agent-base");
    function Iw(t) {
      return !!t && typeof t.addRequest == "function";
    }
    function qa() {
      let { stack: t } = new Error();
      return typeof t != "string" ? false : t.split(`
`).some((e2) => e2.indexOf("(https.js:") !== -1 || e2.indexOf("node:https:") !== -1);
    }
    function As(t, e2) {
      return new As.Agent(t, e2);
    }
    (function(t) {
      class e2 extends Cw.EventEmitter {
        constructor(r2, n) {
          super();
          let s2 = n;
          typeof r2 == "function" ? this.callback = r2 : r2 && (s2 = r2), this.timeout = null, s2 && typeof s2.timeout == "number" && (this.timeout = s2.timeout), this.maxFreeSockets = 1, this.maxSockets = 1, this.maxTotalSockets = 1 / 0, this.sockets = {}, this.freeSockets = {}, this.requests = {}, this.options = {};
        }
        get defaultPort() {
          return typeof this.explicitDefaultPort == "number" ? this.explicitDefaultPort : qa() ? 443 : 80;
        }
        set defaultPort(r2) {
          this.explicitDefaultPort = r2;
        }
        get protocol() {
          return typeof this.explicitProtocol == "string" ? this.explicitProtocol : qa() ? "https:" : "http:";
        }
        set protocol(r2) {
          this.explicitProtocol = r2;
        }
        callback(r2, n, s2) {
          throw new Error('"agent-base" has no default implementation, you must subclass and override `callback()`');
        }
        addRequest(r2, n) {
          let s2 = Object.assign({}, n);
          typeof s2.secureEndpoint != "boolean" && (s2.secureEndpoint = qa()), s2.host == null && (s2.host = "localhost"), s2.port == null && (s2.port = s2.secureEndpoint ? 443 : 80), s2.protocol == null && (s2.protocol = s2.secureEndpoint ? "https:" : "http:"), s2.host && s2.path && delete s2.path, delete s2.agent, delete s2.hostname, delete s2._defaultAgent, delete s2.defaultPort, delete s2.createConnection, r2._last = true, r2.shouldKeepAlive = false;
          let o2 = false, a = null, l = s2.timeout || this.timeout, c2 = (g2) => {
            r2._hadError || (r2.emit("error", g2), r2._hadError = true);
          }, u2 = () => {
            a = null, o2 = true;
            let g2 = new Error(`A "socket" was not created for HTTP request before ${l}ms`);
            g2.code = "ETIMEOUT", c2(g2);
          }, f2 = (g2) => {
            o2 || (a !== null && (clearTimeout(a), a = null), c2(g2));
          }, d2 = (g2) => {
            if (o2) return;
            if (a != null && (clearTimeout(a), a = null), Iw(g2)) {
              rn("Callback returned another Agent instance %o", g2.constructor.name), g2.addRequest(r2, s2);
              return;
            }
            if (g2) {
              g2.once("free", () => {
                this.freeSocket(g2, s2);
              }), r2.onSocket(g2);
              return;
            }
            let m2 = new Error(`no Duplex stream was returned to agent-base for \`${r2.method} ${r2.path}\``);
            c2(m2);
          };
          if (typeof this.callback != "function") {
            c2(new Error("`callback` is not defined"));
            return;
          }
          this.promisifiedCallback || (this.callback.length >= 3 ? (rn("Converting legacy callback function to promise"), this.promisifiedCallback = Aw.default(this.callback)) : this.promisifiedCallback = this.callback), typeof l == "number" && l > 0 && (a = setTimeout(u2, l)), "port" in s2 && typeof s2.port != "number" && (s2.port = Number(s2.port));
          try {
            rn("Resolving socket for %o request: %o", s2.protocol, `${r2.method} ${r2.path}`), Promise.resolve(this.promisifiedCallback(r2, s2)).then(d2, f2);
          } catch (g2) {
            Promise.reject(g2).catch(f2);
          }
        }
        freeSocket(r2, n) {
          rn("Freeing socket %o %o", r2.constructor.name, n), r2.destroy();
        }
        destroy() {
          rn("Destroying agent %o", this.constructor.name);
        }
      }
      t.Agent = e2, t.prototype = t.Agent.prototype;
    })(As || (As = {}));
    Vh.exports = As;
  });
  var Hh = _2((sn) => {
    var Nw = sn && sn.__importDefault || function(t) {
      return t && t.__esModule ? t : { default: t };
    };
    Object.defineProperty(sn, "__esModule", { value: true });
    var Lw = Nw(yr()), nn = Lw.default("https-proxy-agent:parse-proxy-response");
    function Bw(t) {
      return new Promise((e2, i) => {
        let r2 = 0, n = [];
        function s2() {
          let f2 = t.read();
          f2 ? u2(f2) : t.once("readable", s2);
        }
        function o2() {
          t.removeListener("end", l), t.removeListener("error", c2), t.removeListener("close", a), t.removeListener("readable", s2);
        }
        function a(f2) {
          nn("onclose had error %o", f2);
        }
        function l() {
          nn("onend");
        }
        function c2(f2) {
          o2(), nn("onerror %o", f2), i(f2);
        }
        function u2(f2) {
          n.push(f2), r2 += f2.length;
          let d2 = Buffer.concat(n, r2);
          if (d2.indexOf(`\r
\r
`) === -1) {
            nn("have not received end of HTTP headers yet..."), s2();
            return;
          }
          let m2 = d2.toString("ascii", 0, d2.indexOf(`\r
`)), y2 = +m2.split(" ")[1];
          nn("got proxy server response: %o", m2), e2({ statusCode: y2, buffered: d2 });
        }
        t.on("error", c2), t.on("close", a), t.on("end", l), s2();
      });
    }
    sn.default = Bw;
  });
  var Wh = _2(($i) => {
    var Rw = $i && $i.__awaiter || function(t, e2, i, r2) {
      function n(s2) {
        return s2 instanceof i ? s2 : new i(function(o2) {
          o2(s2);
        });
      }
      return new (i || (i = Promise))(function(s2, o2) {
        function a(u2) {
          try {
            c2(r2.next(u2));
          } catch (f2) {
            o2(f2);
          }
        }
        function l(u2) {
          try {
            c2(r2.throw(u2));
          } catch (f2) {
            o2(f2);
          }
        }
        function c2(u2) {
          u2.done ? s2(u2.value) : n(u2.value).then(a, l);
        }
        c2((r2 = r2.apply(t, e2 || [])).next());
      });
    }, wr = $i && $i.__importDefault || function(t) {
      return t && t.__esModule ? t : { default: t };
    };
    Object.defineProperty($i, "__esModule", { value: true });
    var Gh = wr(require$$8), Yh = wr(require$$9), Pw = wr(require$$6), Mw = wr(require$$10$1), Fw = wr(yr()), qw = ja(), Dw = wr(Hh()), on = Fw.default("https-proxy-agent:agent"), Ua = class extends qw.Agent {
      constructor(e2) {
        let i;
        if (typeof e2 == "string" ? i = Pw.default.parse(e2) : i = e2, !i) throw new Error("an HTTP(S) proxy server `host` and `port` must be specified!");
        on("creating new HttpsProxyAgent instance: %o", i), super(i);
        let r2 = Object.assign({}, i);
        this.secureProxy = i.secureProxy || $w(r2.protocol), r2.host = r2.hostname || r2.host, typeof r2.port == "string" && (r2.port = parseInt(r2.port, 10)), !r2.port && r2.host && (r2.port = this.secureProxy ? 443 : 80), this.secureProxy && !("ALPNProtocols" in r2) && (r2.ALPNProtocols = ["http 1.1"]), r2.host && r2.path && (delete r2.path, delete r2.pathname), this.proxy = r2;
      }
      callback(e2, i) {
        return Rw(this, void 0, void 0, function* () {
          let { proxy: r2, secureProxy: n } = this, s2;
          n ? (on("Creating `tls.Socket`: %o", r2), s2 = Yh.default.connect(r2)) : (on("Creating `net.Socket`: %o", r2), s2 = Gh.default.connect(r2));
          let o2 = Object.assign({}, r2.headers), l = `CONNECT ${`${i.host}:${i.port}`} HTTP/1.1\r
`;
          r2.auth && (o2["Proxy-Authorization"] = `Basic ${Buffer.from(r2.auth).toString("base64")}`);
          let { host: c2, port: u2, secureEndpoint: f2 } = i;
          Uw(u2, f2) || (c2 += `:${u2}`), o2.Host = c2, o2.Connection = "close";
          for (let b of Object.keys(o2)) l += `${b}: ${o2[b]}\r
`;
          let d2 = Dw.default(s2);
          s2.write(`${l}\r
`);
          let { statusCode: g2, buffered: m2 } = yield d2;
          if (g2 === 200) {
            if (e2.once("socket", jw), i.secureEndpoint) {
              on("Upgrading socket connection to TLS");
              let b = i.servername || i.host;
              return Yh.default.connect(Object.assign(Object.assign({}, Vw(i, "host", "hostname", "path", "port")), { socket: s2, servername: b }));
            }
            return s2;
          }
          s2.destroy();
          let y2 = new Gh.default.Socket({ writable: false });
          return y2.readable = true, e2.once("socket", (b) => {
            on("replaying proxy buffer for failed request"), Mw.default(b.listenerCount("data") > 0), b.push(m2), b.push(null);
          }), y2;
        });
      }
    };
    $i.default = Ua;
    function jw(t) {
      t.resume();
    }
    function Uw(t, e2) {
      return !!(!e2 && t === 80 || e2 && t === 443);
    }
    function $w(t) {
      return typeof t == "string" ? /^https:?$/i.test(t) : false;
    }
    function Vw(t, ...e2) {
      let i = {}, r2;
      for (r2 in t) e2.includes(r2) || (i[r2] = t[r2]);
      return i;
    }
  });
  var zh = _2((Ha, Kh) => {
    var Hw = Ha && Ha.__importDefault || function(t) {
      return t && t.__esModule ? t : { default: t };
    }, $a = Hw(Wh());
    function Va(t) {
      return new $a.default(t);
    }
    (function(t) {
      t.HttpsProxyAgent = $a.default, t.prototype = $a.default.prototype;
    })(Va || (Va = {}));
    Kh.exports = Va;
  });
  var Qh = _2((DI, Is) => {
    function Gw(t) {
      var r2 = Math.floor, n = new Array(64), s2 = new Array(64), o2 = new Array(64), a = new Array(64), l, c2, u2, f2, d2 = new Array(65535), g2 = new Array(65535), m2 = new Array(64), y2 = new Array(64), b = [], x2 = 0, E = 7, O2 = new Array(64), k2 = new Array(64), S2 = new Array(64), R2 = new Array(256), T2 = new Array(2048), A2, C2 = [0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63], L2 = [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], P2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], U = [0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125], q2 = [1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250], H = [0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], j = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], V2 = [0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119], W2 = [0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250];
      function Q2(I2) {
        for (var Z = [16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99], te = 0; te < 64; te++) {
          var ee = r2((Z[te] * I2 + 50) / 100);
          ee < 1 ? ee = 1 : ee > 255 && (ee = 255), n[C2[te]] = ee;
        }
        for (var le2 = [17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99], ce2 = 0; ce2 < 64; ce2++) {
          var _e = r2((le2[ce2] * I2 + 50) / 100);
          _e < 1 ? _e = 1 : _e > 255 && (_e = 255), s2[C2[ce2]] = _e;
        }
        for (var we = [1, 1.387039845, 1.306562965, 1.175875602, 1, 0.785694958, 0.5411961, 0.275899379], Be = 0, Te = 0; Te < 8; Te++) for (var D = 0; D < 8; D++) o2[Be] = 1 / (n[C2[Be]] * we[Te] * we[D] * 8), a[Be] = 1 / (s2[C2[Be]] * we[Te] * we[D] * 8), Be++;
      }
      function Y2(I2, Z) {
        for (var te = 0, ee = 0, le2 = new Array(), ce2 = 1; ce2 <= 16; ce2++) {
          for (var _e = 1; _e <= I2[ce2]; _e++) le2[Z[ee]] = [], le2[Z[ee]][0] = te, le2[Z[ee]][1] = ce2, ee++, te++;
          te *= 2;
        }
        return le2;
      }
      function de() {
        l = Y2(L2, P2), c2 = Y2(H, j), u2 = Y2(U, q2), f2 = Y2(V2, W2);
      }
      function ae() {
        for (var I2 = 1, Z = 2, te = 1; te <= 15; te++) {
          for (var ee = I2; ee < Z; ee++) g2[32767 + ee] = te, d2[32767 + ee] = [], d2[32767 + ee][1] = te, d2[32767 + ee][0] = ee;
          for (var le2 = -(Z - 1); le2 <= -I2; le2++) g2[32767 + le2] = te, d2[32767 + le2] = [], d2[32767 + le2][1] = te, d2[32767 + le2][0] = Z - 1 + le2;
          I2 <<= 1, Z <<= 1;
        }
      }
      function ne() {
        for (var I2 = 0; I2 < 256; I2++) T2[I2] = 19595 * I2, T2[I2 + 256 >> 0] = 38470 * I2, T2[I2 + 512 >> 0] = 7471 * I2 + 32768, T2[I2 + 768 >> 0] = -11059 * I2, T2[I2 + 1024 >> 0] = -21709 * I2, T2[I2 + 1280 >> 0] = 32768 * I2 + 8421375, T2[I2 + 1536 >> 0] = -27439 * I2, T2[I2 + 1792 >> 0] = -5329 * I2;
      }
      function ue2(I2) {
        for (var Z = I2[0], te = I2[1] - 1; te >= 0; ) Z & 1 << te && (x2 |= 1 << E), te--, E--, E < 0 && (x2 == 255 ? (N2(255), N2(0)) : N2(x2), E = 7, x2 = 0);
      }
      function N2(I2) {
        b.push(I2);
      }
      function X2(I2) {
        N2(I2 >> 8 & 255), N2(I2 & 255);
      }
      function ke(I2, Z) {
        var te, ee, le2, ce2, _e, we, Be, Te, D = 0, J2, se = 8, Ie2 = 64;
        for (J2 = 0; J2 < se; ++J2) {
          te = I2[D], ee = I2[D + 1], le2 = I2[D + 2], ce2 = I2[D + 3], _e = I2[D + 4], we = I2[D + 5], Be = I2[D + 6], Te = I2[D + 7];
          var oe = te + Te, me = te - Te, Ee = ee + Be, ie = ee - Be, xe = le2 + we, je = le2 - we, Ae = ce2 + _e, ht = ce2 - _e, Et = oe + Ae, Qt = oe - Ae, ui = Ee + xe, fi = Ee - xe;
          I2[D] = Et + ui, I2[D + 4] = Et - ui;
          var Ni = (fi + Qt) * 0.707106781;
          I2[D + 2] = Qt + Ni, I2[D + 6] = Qt - Ni, Et = ht + je, ui = je + ie, fi = ie + me;
          var Li = (Et - fi) * 0.382683433, fr = 0.5411961 * Et + Li, Bi = 1.306562965 * fi + Li, Ri = ui * 0.707106781, Pi = me + Ri, Mi = me - Ri;
          I2[D + 5] = Mi + fr, I2[D + 3] = Mi - fr, I2[D + 1] = Pi + Bi, I2[D + 7] = Pi - Bi, D += 8;
        }
        for (D = 0, J2 = 0; J2 < se; ++J2) {
          te = I2[D], ee = I2[D + 8], le2 = I2[D + 16], ce2 = I2[D + 24], _e = I2[D + 32], we = I2[D + 40], Be = I2[D + 48], Te = I2[D + 56];
          var Xn = te + Te, Qr = te - Te, es = ee + Be, ts = ee - Be, is = le2 + we, rs = le2 - we, ns = ce2 + _e, ga = ce2 - _e, Fi = Xn + ns, Xt = Xn - ns, qi = es + is, hr = es - is;
          I2[D] = Fi + qi, I2[D + 32] = Fi - qi;
          var ss = (hr + Xt) * 0.707106781;
          I2[D + 16] = Xt + ss, I2[D + 48] = Xt - ss, Fi = ga + rs, qi = rs + ts, hr = ts + Qr;
          var os = (Fi - hr) * 0.382683433, as = 0.5411961 * Fi + os, ls = 1.306562965 * hr + os, $t = qi * 0.707106781, cs = Qr + $t, us = Qr - $t;
          I2[D + 40] = us + as, I2[D + 24] = us - as, I2[D + 8] = cs + ls, I2[D + 56] = cs - ls, D++;
        }
        var pr;
        for (J2 = 0; J2 < Ie2; ++J2) pr = I2[J2] * Z[J2], m2[J2] = pr > 0 ? pr + 0.5 | 0 : pr - 0.5 | 0;
        return m2;
      }
      function be() {
        X2(65504), X2(16), N2(74), N2(70), N2(73), N2(70), N2(0), N2(1), N2(1), N2(0), X2(1), X2(1), N2(0), N2(0);
      }
      function ge(I2) {
        if (I2) {
          X2(65505), I2[0] === 69 && I2[1] === 120 && I2[2] === 105 && I2[3] === 102 ? X2(I2.length + 2) : (X2(I2.length + 5 + 2), N2(69), N2(120), N2(105), N2(102), N2(0));
          for (var Z = 0; Z < I2.length; Z++) N2(I2[Z]);
        }
      }
      function ve2(I2, Z) {
        X2(65472), X2(17), N2(8), X2(Z), X2(I2), N2(3), N2(1), N2(17), N2(0), N2(2), N2(17), N2(1), N2(3), N2(17), N2(1);
      }
      function fe() {
        X2(65499), X2(132), N2(0);
        for (var I2 = 0; I2 < 64; I2++) N2(n[I2]);
        N2(1);
        for (var Z = 0; Z < 64; Z++) N2(s2[Z]);
      }
      function z2() {
        X2(65476), X2(418), N2(0);
        for (var I2 = 0; I2 < 16; I2++) N2(L2[I2 + 1]);
        for (var Z = 0; Z <= 11; Z++) N2(P2[Z]);
        N2(16);
        for (var te = 0; te < 16; te++) N2(U[te + 1]);
        for (var ee = 0; ee <= 161; ee++) N2(q2[ee]);
        N2(1);
        for (var le2 = 0; le2 < 16; le2++) N2(H[le2 + 1]);
        for (var ce2 = 0; ce2 <= 11; ce2++) N2(j[ce2]);
        N2(17);
        for (var _e = 0; _e < 16; _e++) N2(V2[_e + 1]);
        for (var we = 0; we <= 161; we++) N2(W2[we]);
      }
      function $(I2) {
        typeof I2 == "undefined" || I2.constructor !== Array || I2.forEach((Z) => {
          if (typeof Z == "string") {
            X2(65534);
            var te = Z.length;
            X2(te + 2);
            var ee;
            for (ee = 0; ee < te; ee++) N2(Z.charCodeAt(ee));
          }
        });
      }
      function Ce() {
        X2(65498), X2(12), N2(3), N2(1), N2(0), N2(2), N2(17), N2(3), N2(17), N2(0), N2(63), N2(0);
      }
      function re(I2, Z, te, ee, le2) {
        for (var ce2 = le2[0], _e = le2[240], we, Be = 16, Te = 63, D = 64, J2 = ke(I2, Z), se = 0; se < D; ++se) y2[C2[se]] = J2[se];
        var Ie2 = y2[0] - te;
        te = y2[0], Ie2 == 0 ? ue2(ee[0]) : (we = 32767 + Ie2, ue2(ee[g2[we]]), ue2(d2[we]));
        for (var oe = 63; oe > 0 && y2[oe] == 0; oe--) ;
        if (oe == 0) return ue2(ce2), te;
        for (var me = 1, Ee; me <= oe; ) {
          for (var ie = me; y2[me] == 0 && me <= oe; ++me) ;
          var xe = me - ie;
          if (xe >= Be) {
            Ee = xe >> 4;
            for (var je = 1; je <= Ee; ++je) ue2(_e);
            xe = xe & 15;
          }
          we = 32767 + y2[me], ue2(le2[(xe << 4) + g2[we]]), ue2(d2[we]), me++;
        }
        return oe != Te && ue2(ce2), te;
      }
      function he() {
        for (var I2 = String.fromCharCode, Z = 0; Z < 256; Z++) R2[Z] = I2(Z);
      }
      this.encode = function(I2, Z) {
        (/* @__PURE__ */ new Date()).getTime();
        Z && ft(Z), b = new Array(), x2 = 0, E = 7, X2(65496), be(), $(I2.comments), ge(I2.exifBuffer), fe(), ve2(I2.width, I2.height), z2(), Ce();
        var ee = 0, le2 = 0, ce2 = 0;
        x2 = 0, E = 7, this.encode.displayName = "_encode_";
        for (var _e = I2.data, we = I2.width, Be = I2.height, Te = we * 4, D = we * 3, J2, se = 0, Ie2, oe, me, Ee, ie, xe, je, Ae; se < Be; ) {
          for (J2 = 0; J2 < Te; ) {
            for (Ee = Te * se + J2, ie = Ee, xe = -1, je = 0, Ae = 0; Ae < 64; Ae++) je = Ae >> 3, xe = (Ae & 7) * 4, ie = Ee + je * Te + xe, se + je >= Be && (ie -= Te * (se + 1 + je - Be)), J2 + xe >= Te && (ie -= J2 + xe - Te + 4), Ie2 = _e[ie++], oe = _e[ie++], me = _e[ie++], O2[Ae] = (T2[Ie2] + T2[oe + 256 >> 0] + T2[me + 512 >> 0] >> 16) - 128, k2[Ae] = (T2[Ie2 + 768 >> 0] + T2[oe + 1024 >> 0] + T2[me + 1280 >> 0] >> 16) - 128, S2[Ae] = (T2[Ie2 + 1280 >> 0] + T2[oe + 1536 >> 0] + T2[me + 1792 >> 0] >> 16) - 128;
            ee = re(O2, o2, ee, l, u2), le2 = re(k2, a, le2, c2, f2), ce2 = re(S2, a, ce2, c2, f2), J2 += 32;
          }
          se += 8;
        }
        if (E >= 0) {
          var ht = [];
          ht[1] = E + 1, ht[0] = (1 << E + 1) - 1, ue2(ht);
        }
        if (X2(65497), typeof Is == "undefined") return new Uint8Array(b);
        return Buffer.from(b);
      };
      function ft(I2) {
        if (I2 <= 0 && (I2 = 1), I2 > 100 && (I2 = 100), A2 != I2) {
          var Z = 0;
          I2 < 50 ? Z = Math.floor(5e3 / I2) : Z = Math.floor(200 - I2 * 2), Q2(Z), A2 = I2;
        }
      }
      function vt() {
        var I2 = (/* @__PURE__ */ new Date()).getTime();
        t || (t = 50), he(), de(), ae(), ne(), ft(t);
        (/* @__PURE__ */ new Date()).getTime() - I2;
      }
      vt();
    }
    typeof Is != "undefined" ? Is.exports = Jh : typeof window != "undefined" && (window["jpeg-js"] = window["jpeg-js"] || {}, window["jpeg-js"].encode = Jh);
    function Jh(t, e2) {
      typeof e2 == "undefined" && (e2 = 50);
      var i = new Gw(e2), r2 = i.encode(t, e2);
      return { data: r2, width: t.width, height: t.height };
    }
  });
  var ep = _2((jI, Ya) => {
    var Ga = function() {
      var e2 = new Int32Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]), i = 4017, r2 = 799, n = 3406, s2 = 2276, o2 = 1567, a = 3784, l = 5793, c2 = 2896;
      function u2() {
      }
      function f2(E, O2) {
        for (var k2 = 0, S2 = [], R2, T2, A2 = 16; A2 > 0 && !E[A2 - 1]; ) A2--;
        S2.push({ children: [], index: 0 });
        var C2 = S2[0], L2;
        for (R2 = 0; R2 < A2; R2++) {
          for (T2 = 0; T2 < E[R2]; T2++) {
            for (C2 = S2.pop(), C2.children[C2.index] = O2[k2]; C2.index > 0; ) {
              if (S2.length === 0) throw new Error("Could not recreate Huffman Table");
              C2 = S2.pop();
            }
            for (C2.index++, S2.push(C2); S2.length <= R2; ) S2.push(L2 = { children: [], index: 0 }), C2.children[C2.index] = L2.children, C2 = L2;
            k2++;
          }
          R2 + 1 < A2 && (S2.push(L2 = { children: [], index: 0 }), C2.children[C2.index] = L2.children, C2 = L2);
        }
        return S2[0].children;
      }
      function d2(E, O2, k2, S2, R2, T2, A2, C2, L2, P2) {
        k2.precision;
        k2.samplesPerLine;
        k2.scanLines;
        var j = k2.mcusPerLine, V2 = k2.progressive;
        k2.maxH;
        k2.maxV;
        var Y2 = O2, de = 0, ae = 0;
        function ne() {
          if (ae > 0) return ae--, de >> ae & 1;
          if (de = E[O2++], de == 255) {
            var D = E[O2++];
            if (D) throw new Error("unexpected marker: " + (de << 8 | D).toString(16));
          }
          return ae = 7, de >>> 7;
        }
        function ue2(D) {
          for (var J2 = D, se; (se = ne()) !== null; ) {
            if (J2 = J2[se], typeof J2 == "number") return J2;
            if (typeof J2 != "object") throw new Error("invalid huffman sequence");
          }
          return null;
        }
        function N2(D) {
          for (var J2 = 0; D > 0; ) {
            var se = ne();
            if (se === null) return;
            J2 = J2 << 1 | se, D--;
          }
          return J2;
        }
        function X2(D) {
          var J2 = N2(D);
          return J2 >= 1 << D - 1 ? J2 : J2 + (-1 << D) + 1;
        }
        function ke(D, J2) {
          var se = ue2(D.huffmanTableDC), Ie2 = se === 0 ? 0 : X2(se);
          J2[0] = D.pred += Ie2;
          for (var oe = 1; oe < 64; ) {
            var me = ue2(D.huffmanTableAC), Ee = me & 15, ie = me >> 4;
            if (Ee === 0) {
              if (ie < 15) break;
              oe += 16;
              continue;
            }
            oe += ie;
            var xe = e2[oe];
            J2[xe] = X2(Ee), oe++;
          }
        }
        function be(D, J2) {
          var se = ue2(D.huffmanTableDC), Ie2 = se === 0 ? 0 : X2(se) << L2;
          J2[0] = D.pred += Ie2;
        }
        function ge(D, J2) {
          J2[0] |= ne() << L2;
        }
        var ve2 = 0;
        function fe(D, J2) {
          if (ve2 > 0) {
            ve2--;
            return;
          }
          for (var se = T2, Ie2 = A2; se <= Ie2; ) {
            var oe = ue2(D.huffmanTableAC), me = oe & 15, Ee = oe >> 4;
            if (me === 0) {
              if (Ee < 15) {
                ve2 = N2(Ee) + (1 << Ee) - 1;
                break;
              }
              se += 16;
              continue;
            }
            se += Ee;
            var ie = e2[se];
            J2[ie] = X2(me) * (1 << L2), se++;
          }
        }
        var z2 = 0, $;
        function Ce(D, J2) {
          for (var se = T2, Ie2 = A2, oe = 0; se <= Ie2; ) {
            var me = e2[se], Ee = J2[me] < 0 ? -1 : 1;
            switch (z2) {
              case 0:
                var ie = ue2(D.huffmanTableAC), xe = ie & 15, oe = ie >> 4;
                if (xe === 0) oe < 15 ? (ve2 = N2(oe) + (1 << oe), z2 = 4) : (oe = 16, z2 = 1);
                else {
                  if (xe !== 1) throw new Error("invalid ACn encoding");
                  $ = X2(xe), z2 = oe ? 2 : 3;
                }
                continue;
              case 1:
              case 2:
                J2[me] ? J2[me] += (ne() << L2) * Ee : (oe--, oe === 0 && (z2 = z2 == 2 ? 3 : 0));
                break;
              case 3:
                J2[me] ? J2[me] += (ne() << L2) * Ee : (J2[me] = $ << L2, z2 = 0);
                break;
              case 4:
                J2[me] && (J2[me] += (ne() << L2) * Ee);
                break;
            }
            se++;
          }
          z2 === 4 && (ve2--, ve2 === 0 && (z2 = 0));
        }
        function re(D, J2, se, Ie2, oe) {
          var me = se / j | 0, Ee = se % j, ie = me * D.v + Ie2, xe = Ee * D.h + oe;
          D.blocks[ie] === void 0 && P2.tolerantDecoding || J2(D, D.blocks[ie][xe]);
        }
        function he(D, J2, se) {
          var Ie2 = se / D.blocksPerLine | 0, oe = se % D.blocksPerLine;
          D.blocks[Ie2] === void 0 && P2.tolerantDecoding || J2(D, D.blocks[Ie2][oe]);
        }
        var ft = S2.length, vt, I2, Z, te, ee, le2;
        V2 ? T2 === 0 ? le2 = C2 === 0 ? be : ge : le2 = C2 === 0 ? fe : Ce : le2 = ke;
        var ce2 = 0, _e, we;
        ft == 1 ? we = S2[0].blocksPerLine * S2[0].blocksPerColumn : we = j * k2.mcusPerColumn, R2 || (R2 = we);
        for (var Be, Te; ce2 < we; ) {
          for (I2 = 0; I2 < ft; I2++) S2[I2].pred = 0;
          if (ve2 = 0, ft == 1) for (vt = S2[0], ee = 0; ee < R2; ee++) he(vt, le2, ce2), ce2++;
          else for (ee = 0; ee < R2; ee++) {
            for (I2 = 0; I2 < ft; I2++) for (vt = S2[I2], Be = vt.h, Te = vt.v, Z = 0; Z < Te; Z++) for (te = 0; te < Be; te++) re(vt, le2, ce2, Z, te);
            if (ce2++, ce2 === we) break;
          }
          if (ce2 === we) do {
            if (E[O2] === 255 && E[O2 + 1] !== 0) break;
            O2 += 1;
          } while (O2 < E.length - 2);
          if (ae = 0, _e = E[O2] << 8 | E[O2 + 1], _e < 65280) throw new Error("marker was not found");
          if (_e >= 65488 && _e <= 65495) O2 += 2;
          else break;
        }
        return O2 - Y2;
      }
      function g2(E, O2) {
        var k2 = [], S2 = O2.blocksPerLine, R2 = O2.blocksPerColumn, T2 = S2 << 3, A2 = new Int32Array(64), C2 = new Uint8Array(64);
        function L2(Y2, de, ae) {
          var ne = O2.quantizationTable, ue2, N2, X2, ke, be, ge, ve2, fe, z2, $ = ae, Ce;
          for (Ce = 0; Ce < 64; Ce++) $[Ce] = Y2[Ce] * ne[Ce];
          for (Ce = 0; Ce < 8; ++Ce) {
            var re = 8 * Ce;
            if ($[1 + re] == 0 && $[2 + re] == 0 && $[3 + re] == 0 && $[4 + re] == 0 && $[5 + re] == 0 && $[6 + re] == 0 && $[7 + re] == 0) {
              z2 = l * $[0 + re] + 512 >> 10, $[0 + re] = z2, $[1 + re] = z2, $[2 + re] = z2, $[3 + re] = z2, $[4 + re] = z2, $[5 + re] = z2, $[6 + re] = z2, $[7 + re] = z2;
              continue;
            }
            ue2 = l * $[0 + re] + 128 >> 8, N2 = l * $[4 + re] + 128 >> 8, X2 = $[2 + re], ke = $[6 + re], be = c2 * ($[1 + re] - $[7 + re]) + 128 >> 8, fe = c2 * ($[1 + re] + $[7 + re]) + 128 >> 8, ge = $[3 + re] << 4, ve2 = $[5 + re] << 4, z2 = ue2 - N2 + 1 >> 1, ue2 = ue2 + N2 + 1 >> 1, N2 = z2, z2 = X2 * a + ke * o2 + 128 >> 8, X2 = X2 * o2 - ke * a + 128 >> 8, ke = z2, z2 = be - ve2 + 1 >> 1, be = be + ve2 + 1 >> 1, ve2 = z2, z2 = fe + ge + 1 >> 1, ge = fe - ge + 1 >> 1, fe = z2, z2 = ue2 - ke + 1 >> 1, ue2 = ue2 + ke + 1 >> 1, ke = z2, z2 = N2 - X2 + 1 >> 1, N2 = N2 + X2 + 1 >> 1, X2 = z2, z2 = be * s2 + fe * n + 2048 >> 12, be = be * n - fe * s2 + 2048 >> 12, fe = z2, z2 = ge * r2 + ve2 * i + 2048 >> 12, ge = ge * i - ve2 * r2 + 2048 >> 12, ve2 = z2, $[0 + re] = ue2 + fe, $[7 + re] = ue2 - fe, $[1 + re] = N2 + ve2, $[6 + re] = N2 - ve2, $[2 + re] = X2 + ge, $[5 + re] = X2 - ge, $[3 + re] = ke + be, $[4 + re] = ke - be;
          }
          for (Ce = 0; Ce < 8; ++Ce) {
            var he = Ce;
            if ($[8 + he] == 0 && $[16 + he] == 0 && $[24 + he] == 0 && $[32 + he] == 0 && $[40 + he] == 0 && $[48 + he] == 0 && $[56 + he] == 0) {
              z2 = l * ae[Ce + 0] + 8192 >> 14, $[0 + he] = z2, $[8 + he] = z2, $[16 + he] = z2, $[24 + he] = z2, $[32 + he] = z2, $[40 + he] = z2, $[48 + he] = z2, $[56 + he] = z2;
              continue;
            }
            ue2 = l * $[0 + he] + 2048 >> 12, N2 = l * $[32 + he] + 2048 >> 12, X2 = $[16 + he], ke = $[48 + he], be = c2 * ($[8 + he] - $[56 + he]) + 2048 >> 12, fe = c2 * ($[8 + he] + $[56 + he]) + 2048 >> 12, ge = $[24 + he], ve2 = $[40 + he], z2 = ue2 - N2 + 1 >> 1, ue2 = ue2 + N2 + 1 >> 1, N2 = z2, z2 = X2 * a + ke * o2 + 2048 >> 12, X2 = X2 * o2 - ke * a + 2048 >> 12, ke = z2, z2 = be - ve2 + 1 >> 1, be = be + ve2 + 1 >> 1, ve2 = z2, z2 = fe + ge + 1 >> 1, ge = fe - ge + 1 >> 1, fe = z2, z2 = ue2 - ke + 1 >> 1, ue2 = ue2 + ke + 1 >> 1, ke = z2, z2 = N2 - X2 + 1 >> 1, N2 = N2 + X2 + 1 >> 1, X2 = z2, z2 = be * s2 + fe * n + 2048 >> 12, be = be * n - fe * s2 + 2048 >> 12, fe = z2, z2 = ge * r2 + ve2 * i + 2048 >> 12, ge = ge * i - ve2 * r2 + 2048 >> 12, ve2 = z2, $[0 + he] = ue2 + fe, $[56 + he] = ue2 - fe, $[8 + he] = N2 + ve2, $[48 + he] = N2 - ve2, $[16 + he] = X2 + ge, $[40 + he] = X2 - ge, $[24 + he] = ke + be, $[32 + he] = ke - be;
          }
          for (Ce = 0; Ce < 64; ++Ce) {
            var ft = 128 + ($[Ce] + 8 >> 4);
            de[Ce] = ft < 0 ? 0 : ft > 255 ? 255 : ft;
          }
        }
        x2(T2 * R2 * 8);
        for (var P2, U, q2 = 0; q2 < R2; q2++) {
          var H = q2 << 3;
          for (P2 = 0; P2 < 8; P2++) k2.push(new Uint8Array(T2));
          for (var j = 0; j < S2; j++) {
            L2(O2.blocks[q2][j], C2, A2);
            var V2 = 0, W2 = j << 3;
            for (U = 0; U < 8; U++) {
              var Q2 = k2[H + U];
              for (P2 = 0; P2 < 8; P2++) Q2[W2 + P2] = C2[V2++];
            }
          }
        }
        return k2;
      }
      function m2(E) {
        return E < 0 ? 0 : E > 255 ? 255 : E;
      }
      u2.prototype = { load: function(O2) {
        var k2 = new XMLHttpRequest();
        k2.open("GET", O2, true), k2.responseType = "arraybuffer", k2.onload = function() {
          var S2 = new Uint8Array(k2.response || k2.mozResponseArrayBuffer);
          this.parse(S2), this.onload && this.onload();
        }.bind(this), k2.send(null);
      }, parse: function(O2) {
        var k2 = this.opts.maxResolutionInMP * 1e3 * 1e3, S2 = 0;
        O2.length;
        function T2() {
          var ie = O2[S2] << 8 | O2[S2 + 1];
          return S2 += 2, ie;
        }
        function A2() {
          var ie = T2(), xe = O2.subarray(S2, S2 + ie - 2);
          return S2 += xe.length, xe;
        }
        function C2(ie) {
          var xe = 1, je = 1, Ae, ht;
          for (ht in ie.components) ie.components.hasOwnProperty(ht) && (Ae = ie.components[ht], xe < Ae.h && (xe = Ae.h), je < Ae.v && (je = Ae.v));
          var Et = Math.ceil(ie.samplesPerLine / 8 / xe), Qt = Math.ceil(ie.scanLines / 8 / je);
          for (ht in ie.components) if (ie.components.hasOwnProperty(ht)) {
            Ae = ie.components[ht];
            var ui = Math.ceil(Math.ceil(ie.samplesPerLine / 8) * Ae.h / xe), fi = Math.ceil(Math.ceil(ie.scanLines / 8) * Ae.v / je), Ni = Et * Ae.h, Li = Qt * Ae.v, fr = Li * Ni, Bi = [];
            x2(fr * 256);
            for (var Ri = 0; Ri < Li; Ri++) {
              for (var Pi = [], Mi = 0; Mi < Ni; Mi++) Pi.push(new Int32Array(64));
              Bi.push(Pi);
            }
            Ae.blocksPerLine = ui, Ae.blocksPerColumn = fi, Ae.blocks = Bi;
          }
          ie.maxH = xe, ie.maxV = je, ie.mcusPerLine = Et, ie.mcusPerColumn = Qt;
        }
        var L2 = null, P2 = null, q2, H, j = [], V2 = [], W2 = [], Q2 = [], Y2 = T2(), de = -1;
        if (this.comments = [], Y2 != 65496) throw new Error("SOI not found");
        for (Y2 = T2(); Y2 != 65497; ) {
          var ae, ne;
          switch (Y2) {
            case 65280:
              break;
            case 65504:
            case 65505:
            case 65506:
            case 65507:
            case 65508:
            case 65509:
            case 65510:
            case 65511:
            case 65512:
            case 65513:
            case 65514:
            case 65515:
            case 65516:
            case 65517:
            case 65518:
            case 65519:
            case 65534:
              var N2 = A2();
              if (Y2 === 65534) {
                var X2 = String.fromCharCode.apply(null, N2);
                this.comments.push(X2);
              }
              Y2 === 65504 && N2[0] === 74 && N2[1] === 70 && N2[2] === 73 && N2[3] === 70 && N2[4] === 0 && (L2 = { version: { major: N2[5], minor: N2[6] }, densityUnits: N2[7], xDensity: N2[8] << 8 | N2[9], yDensity: N2[10] << 8 | N2[11], thumbWidth: N2[12], thumbHeight: N2[13], thumbData: N2.subarray(14, 14 + 3 * N2[12] * N2[13]) }), Y2 === 65505 && N2[0] === 69 && N2[1] === 120 && N2[2] === 105 && N2[3] === 102 && N2[4] === 0 && (this.exifBuffer = N2.subarray(5, N2.length)), Y2 === 65518 && N2[0] === 65 && N2[1] === 100 && N2[2] === 111 && N2[3] === 98 && N2[4] === 101 && N2[5] === 0 && (P2 = { version: N2[6], flags0: N2[7] << 8 | N2[8], flags1: N2[9] << 8 | N2[10], transformCode: N2[11] });
              break;
            case 65499:
              for (var ke = T2(), be = ke + S2 - 2; S2 < be; ) {
                var ge = O2[S2++];
                x2(256);
                var ve2 = new Int32Array(64);
                if (ge >> 4 === 0) for (ne = 0; ne < 64; ne++) {
                  var fe = e2[ne];
                  ve2[fe] = O2[S2++];
                }
                else if (ge >> 4 === 1) for (ne = 0; ne < 64; ne++) {
                  var fe = e2[ne];
                  ve2[fe] = T2();
                }
                else throw new Error("DQT: invalid table spec");
                j[ge & 15] = ve2;
              }
              break;
            case 65472:
            case 65473:
            case 65474:
              T2(), q2 = {}, q2.extended = Y2 === 65473, q2.progressive = Y2 === 65474, q2.precision = O2[S2++], q2.scanLines = T2(), q2.samplesPerLine = T2(), q2.components = {}, q2.componentsOrder = [];
              var z2 = q2.scanLines * q2.samplesPerLine;
              if (z2 > k2) {
                var $ = Math.ceil((z2 - k2) / 1e6);
                throw new Error(`maxResolutionInMP limit exceeded by ${$}MP`);
              }
              var Ce = O2[S2++], re;
              for (ae = 0; ae < Ce; ae++) {
                re = O2[S2];
                var vt = O2[S2 + 1] >> 4, I2 = O2[S2 + 1] & 15, Z = O2[S2 + 2];
                if (vt <= 0 || I2 <= 0) throw new Error("Invalid sampling factor, expected values above 0");
                q2.componentsOrder.push(re), q2.components[re] = { h: vt, v: I2, quantizationIdx: Z }, S2 += 3;
              }
              C2(q2), V2.push(q2);
              break;
            case 65476:
              var te = T2();
              for (ae = 2; ae < te; ) {
                var ee = O2[S2++], le2 = new Uint8Array(16), ce2 = 0;
                for (ne = 0; ne < 16; ne++, S2++) ce2 += le2[ne] = O2[S2];
                x2(16 + ce2);
                var _e = new Uint8Array(ce2);
                for (ne = 0; ne < ce2; ne++, S2++) _e[ne] = O2[S2];
                ae += 17 + ce2, (ee >> 4 === 0 ? Q2 : W2)[ee & 15] = f2(le2, _e);
              }
              break;
            case 65501:
              T2(), H = T2();
              break;
            case 65500:
              T2(), T2();
              break;
            case 65498:
              T2();
              var Be = O2[S2++], Te = [], D;
              for (ae = 0; ae < Be; ae++) {
                D = q2.components[O2[S2++]];
                var J2 = O2[S2++];
                D.huffmanTableDC = Q2[J2 >> 4], D.huffmanTableAC = W2[J2 & 15], Te.push(D);
              }
              var se = O2[S2++], Ie2 = O2[S2++], oe = O2[S2++], me = d2(O2, S2, q2, Te, H, se, Ie2, oe >> 4, oe & 15, this.opts);
              S2 += me;
              break;
            case 65535:
              O2[S2] !== 255 && S2--;
              break;
            default:
              if (O2[S2 - 3] == 255 && O2[S2 - 2] >= 192 && O2[S2 - 2] <= 254) {
                S2 -= 3;
                break;
              } else if (Y2 === 224 || Y2 == 225) {
                if (de !== -1) throw new Error(`first unknown JPEG marker at offset ${de.toString(16)}, second unknown JPEG marker ${Y2.toString(16)} at offset ${(S2 - 1).toString(16)}`);
                de = S2 - 1;
                let ie = T2();
                if (O2[S2 + ie - 2] === 255) {
                  S2 += ie - 2;
                  break;
                }
              }
              throw new Error("unknown JPEG marker " + Y2.toString(16));
          }
          Y2 = T2();
        }
        if (V2.length != 1) throw new Error("only single frame JPEGs supported");
        for (var ae = 0; ae < V2.length; ae++) {
          var Ee = V2[ae].components;
          for (var ne in Ee) Ee[ne].quantizationTable = j[Ee[ne].quantizationIdx], delete Ee[ne].quantizationIdx;
        }
        this.width = q2.samplesPerLine, this.height = q2.scanLines, this.jfif = L2, this.adobe = P2, this.components = [];
        for (var ae = 0; ae < q2.componentsOrder.length; ae++) {
          var D = q2.components[q2.componentsOrder[ae]];
          this.components.push({ lines: g2(q2, D), scaleX: D.h / q2.maxH, scaleY: D.v / q2.maxV });
        }
      }, getData: function(O2, k2) {
        var S2 = this.width / O2, R2 = this.height / k2, T2, A2, C2, L2, P2, U, q2, H, j, V2, W2 = 0, Q2, Y2, de, ae, ne, ue2, N2, X2, ke, be, ge, ve2 = O2 * k2 * this.components.length;
        x2(ve2);
        var fe = new Uint8Array(ve2);
        switch (this.components.length) {
          case 1:
            for (T2 = this.components[0], V2 = 0; V2 < k2; V2++) for (P2 = T2.lines[0 | V2 * T2.scaleY * R2], j = 0; j < O2; j++) Q2 = P2[0 | j * T2.scaleX * S2], fe[W2++] = Q2;
            break;
          case 2:
            for (T2 = this.components[0], A2 = this.components[1], V2 = 0; V2 < k2; V2++) for (P2 = T2.lines[0 | V2 * T2.scaleY * R2], U = A2.lines[0 | V2 * A2.scaleY * R2], j = 0; j < O2; j++) Q2 = P2[0 | j * T2.scaleX * S2], fe[W2++] = Q2, Q2 = U[0 | j * A2.scaleX * S2], fe[W2++] = Q2;
            break;
          case 3:
            for (ge = true, this.adobe && this.adobe.transformCode ? ge = true : typeof this.opts.colorTransform != "undefined" && (ge = !!this.opts.colorTransform), T2 = this.components[0], A2 = this.components[1], C2 = this.components[2], V2 = 0; V2 < k2; V2++) for (P2 = T2.lines[0 | V2 * T2.scaleY * R2], U = A2.lines[0 | V2 * A2.scaleY * R2], q2 = C2.lines[0 | V2 * C2.scaleY * R2], j = 0; j < O2; j++) ge ? (Q2 = P2[0 | j * T2.scaleX * S2], Y2 = U[0 | j * A2.scaleX * S2], de = q2[0 | j * C2.scaleX * S2], X2 = m2(Q2 + 1.402 * (de - 128)), ke = m2(Q2 - 0.3441363 * (Y2 - 128) - 0.71413636 * (de - 128)), be = m2(Q2 + 1.772 * (Y2 - 128))) : (X2 = P2[0 | j * T2.scaleX * S2], ke = U[0 | j * A2.scaleX * S2], be = q2[0 | j * C2.scaleX * S2]), fe[W2++] = X2, fe[W2++] = ke, fe[W2++] = be;
            break;
          case 4:
            if (!this.adobe) throw new Error("Unsupported color mode (4 components)");
            for (ge = false, this.adobe && this.adobe.transformCode ? ge = true : typeof this.opts.colorTransform != "undefined" && (ge = !!this.opts.colorTransform), T2 = this.components[0], A2 = this.components[1], C2 = this.components[2], L2 = this.components[3], V2 = 0; V2 < k2; V2++) for (P2 = T2.lines[0 | V2 * T2.scaleY * R2], U = A2.lines[0 | V2 * A2.scaleY * R2], q2 = C2.lines[0 | V2 * C2.scaleY * R2], H = L2.lines[0 | V2 * L2.scaleY * R2], j = 0; j < O2; j++) ge ? (Q2 = P2[0 | j * T2.scaleX * S2], Y2 = U[0 | j * A2.scaleX * S2], de = q2[0 | j * C2.scaleX * S2], ae = H[0 | j * L2.scaleX * S2], ne = 255 - m2(Q2 + 1.402 * (de - 128)), ue2 = 255 - m2(Q2 - 0.3441363 * (Y2 - 128) - 0.71413636 * (de - 128)), N2 = 255 - m2(Q2 + 1.772 * (Y2 - 128))) : (ne = P2[0 | j * T2.scaleX * S2], ue2 = U[0 | j * A2.scaleX * S2], N2 = q2[0 | j * C2.scaleX * S2], ae = H[0 | j * L2.scaleX * S2]), fe[W2++] = 255 - ne, fe[W2++] = 255 - ue2, fe[W2++] = 255 - N2, fe[W2++] = 255 - ae;
            break;
          default:
            throw new Error("Unsupported color mode");
        }
        return fe;
      }, copyToImageData: function(O2, k2) {
        var S2 = O2.width, R2 = O2.height, T2 = O2.data, A2 = this.getData(S2, R2), C2 = 0, L2 = 0, P2, U, q2, H, j, V2, W2, Q2, Y2;
        switch (this.components.length) {
          case 1:
            for (U = 0; U < R2; U++) for (P2 = 0; P2 < S2; P2++) q2 = A2[C2++], T2[L2++] = q2, T2[L2++] = q2, T2[L2++] = q2, k2 && (T2[L2++] = 255);
            break;
          case 3:
            for (U = 0; U < R2; U++) for (P2 = 0; P2 < S2; P2++) W2 = A2[C2++], Q2 = A2[C2++], Y2 = A2[C2++], T2[L2++] = W2, T2[L2++] = Q2, T2[L2++] = Y2, k2 && (T2[L2++] = 255);
            break;
          case 4:
            for (U = 0; U < R2; U++) for (P2 = 0; P2 < S2; P2++) j = A2[C2++], V2 = A2[C2++], q2 = A2[C2++], H = A2[C2++], W2 = 255 - m2(j * (1 - H / 255) + H), Q2 = 255 - m2(V2 * (1 - H / 255) + H), Y2 = 255 - m2(q2 * (1 - H / 255) + H), T2[L2++] = W2, T2[L2++] = Q2, T2[L2++] = Y2, k2 && (T2[L2++] = 255);
            break;
          default:
            throw new Error("Unsupported color mode");
        }
      } };
      var y2 = 0, b = 0;
      function x2(E = 0) {
        var O2 = y2 + E;
        if (O2 > b) {
          var k2 = Math.ceil((O2 - b) / 1024 / 1024);
          throw new Error(`maxMemoryUsageInMB limit exceeded by at least ${k2}MB`);
        }
        y2 = O2;
      }
      return u2.resetMaxMemoryUsage = function(E) {
        y2 = 0, b = E;
      }, u2.getBytesAllocated = function() {
        return y2;
      }, u2.requestMemoryAllocation = x2, u2;
    }();
    typeof Ya != "undefined" ? Ya.exports = Xh : typeof window != "undefined" && (window["jpeg-js"] = window["jpeg-js"] || {}, window["jpeg-js"].decode = Xh);
    function Xh(t, e2 = {}) {
      var i = { colorTransform: void 0, useTArray: false, formatAsRGBA: true, tolerantDecoding: true, maxResolutionInMP: 100, maxMemoryUsageInMB: 512 }, r2 = { ...i, ...e2 }, n = new Uint8Array(t), s2 = new Ga();
      s2.opts = r2, Ga.resetMaxMemoryUsage(r2.maxMemoryUsageInMB * 1024 * 1024), s2.parse(n);
      var o2 = r2.formatAsRGBA ? 4 : 3, a = s2.width * s2.height * o2;
      try {
        Ga.requestMemoryAllocation(a);
        var l = { width: s2.width, height: s2.height, exifBuffer: s2.exifBuffer, data: r2.useTArray ? new Uint8Array(a) : Buffer.alloc(a) };
        s2.comments.length > 0 && (l.comments = s2.comments);
      } catch (c2) {
        throw c2 instanceof RangeError ? new Error("Could not allocate enough memory for the image. Required: " + a) : c2 instanceof ReferenceError && c2.message === "Buffer is not defined" ? new Error("Buffer is not globally defined in this environment. Consider setting useTArray to true") : c2;
      }
      return s2.copyToImageData(l, r2.formatAsRGBA), l;
    }
  });
  var ip = _2((UI, tp) => {
    var Yw = Qh(), Ww = ep();
    tp.exports = { encode: Yw, decode: Ww };
  });
  var np = _2(($I, rp) => {
    function Ns() {
      this._types = /* @__PURE__ */ Object.create(null), this._extensions = /* @__PURE__ */ Object.create(null);
      for (let t = 0; t < arguments.length; t++) this.define(arguments[t]);
      this.define = this.define.bind(this), this.getType = this.getType.bind(this), this.getExtension = this.getExtension.bind(this);
    }
    Ns.prototype.define = function(t, e2) {
      for (let i in t) {
        let r2 = t[i].map(function(n) {
          return n.toLowerCase();
        });
        i = i.toLowerCase();
        for (let n = 0; n < r2.length; n++) {
          let s2 = r2[n];
          if (s2[0] !== "*") {
            if (!e2 && s2 in this._types) throw new Error('Attempt to change mapping for "' + s2 + '" extension from "' + this._types[s2] + '" to "' + i + '". Pass `force=true` to allow this, otherwise remove "' + s2 + '" from the list of extensions for "' + i + '".');
            this._types[s2] = i;
          }
        }
        if (e2 || !this._extensions[i]) {
          let n = r2[0];
          this._extensions[i] = n[0] !== "*" ? n : n.substr(1);
        }
      }
    };
    Ns.prototype.getType = function(t) {
      t = String(t);
      let e2 = t.replace(/^.*[/\\]/, "").toLowerCase(), i = e2.replace(/^.*\./, "").toLowerCase(), r2 = e2.length < t.length;
      return (i.length < e2.length - 1 || !r2) && this._types[i] || null;
    };
    Ns.prototype.getExtension = function(t) {
      return t = /^\s*([^;\s]*)/.test(t) && RegExp.$1, t && this._extensions[t.toLowerCase()] || null;
    };
    rp.exports = Ns;
  });
  var op = _2((VI, sp) => {
    sp.exports = { "application/andrew-inset": ["ez"], "application/applixware": ["aw"], "application/atom+xml": ["atom"], "application/atomcat+xml": ["atomcat"], "application/atomdeleted+xml": ["atomdeleted"], "application/atomsvc+xml": ["atomsvc"], "application/atsc-dwd+xml": ["dwd"], "application/atsc-held+xml": ["held"], "application/atsc-rsat+xml": ["rsat"], "application/bdoc": ["bdoc"], "application/calendar+xml": ["xcs"], "application/ccxml+xml": ["ccxml"], "application/cdfx+xml": ["cdfx"], "application/cdmi-capability": ["cdmia"], "application/cdmi-container": ["cdmic"], "application/cdmi-domain": ["cdmid"], "application/cdmi-object": ["cdmio"], "application/cdmi-queue": ["cdmiq"], "application/cu-seeme": ["cu"], "application/dash+xml": ["mpd"], "application/davmount+xml": ["davmount"], "application/docbook+xml": ["dbk"], "application/dssc+der": ["dssc"], "application/dssc+xml": ["xdssc"], "application/ecmascript": ["es", "ecma"], "application/emma+xml": ["emma"], "application/emotionml+xml": ["emotionml"], "application/epub+zip": ["epub"], "application/exi": ["exi"], "application/express": ["exp"], "application/fdt+xml": ["fdt"], "application/font-tdpfr": ["pfr"], "application/geo+json": ["geojson"], "application/gml+xml": ["gml"], "application/gpx+xml": ["gpx"], "application/gxf": ["gxf"], "application/gzip": ["gz"], "application/hjson": ["hjson"], "application/hyperstudio": ["stk"], "application/inkml+xml": ["ink", "inkml"], "application/ipfix": ["ipfix"], "application/its+xml": ["its"], "application/java-archive": ["jar", "war", "ear"], "application/java-serialized-object": ["ser"], "application/java-vm": ["class"], "application/javascript": ["js", "mjs"], "application/json": ["json", "map"], "application/json5": ["json5"], "application/jsonml+json": ["jsonml"], "application/ld+json": ["jsonld"], "application/lgr+xml": ["lgr"], "application/lost+xml": ["lostxml"], "application/mac-binhex40": ["hqx"], "application/mac-compactpro": ["cpt"], "application/mads+xml": ["mads"], "application/manifest+json": ["webmanifest"], "application/marc": ["mrc"], "application/marcxml+xml": ["mrcx"], "application/mathematica": ["ma", "nb", "mb"], "application/mathml+xml": ["mathml"], "application/mbox": ["mbox"], "application/mediaservercontrol+xml": ["mscml"], "application/metalink+xml": ["metalink"], "application/metalink4+xml": ["meta4"], "application/mets+xml": ["mets"], "application/mmt-aei+xml": ["maei"], "application/mmt-usd+xml": ["musd"], "application/mods+xml": ["mods"], "application/mp21": ["m21", "mp21"], "application/mp4": ["mp4s", "m4p"], "application/msword": ["doc", "dot"], "application/mxf": ["mxf"], "application/n-quads": ["nq"], "application/n-triples": ["nt"], "application/node": ["cjs"], "application/octet-stream": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"], "application/oda": ["oda"], "application/oebps-package+xml": ["opf"], "application/ogg": ["ogx"], "application/omdoc+xml": ["omdoc"], "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"], "application/oxps": ["oxps"], "application/p2p-overlay+xml": ["relo"], "application/patch-ops-error+xml": ["xer"], "application/pdf": ["pdf"], "application/pgp-encrypted": ["pgp"], "application/pgp-signature": ["asc", "sig"], "application/pics-rules": ["prf"], "application/pkcs10": ["p10"], "application/pkcs7-mime": ["p7m", "p7c"], "application/pkcs7-signature": ["p7s"], "application/pkcs8": ["p8"], "application/pkix-attr-cert": ["ac"], "application/pkix-cert": ["cer"], "application/pkix-crl": ["crl"], "application/pkix-pkipath": ["pkipath"], "application/pkixcmp": ["pki"], "application/pls+xml": ["pls"], "application/postscript": ["ai", "eps", "ps"], "application/provenance+xml": ["provx"], "application/pskc+xml": ["pskcxml"], "application/raml+yaml": ["raml"], "application/rdf+xml": ["rdf", "owl"], "application/reginfo+xml": ["rif"], "application/relax-ng-compact-syntax": ["rnc"], "application/resource-lists+xml": ["rl"], "application/resource-lists-diff+xml": ["rld"], "application/rls-services+xml": ["rs"], "application/route-apd+xml": ["rapd"], "application/route-s-tsid+xml": ["sls"], "application/route-usd+xml": ["rusd"], "application/rpki-ghostbusters": ["gbr"], "application/rpki-manifest": ["mft"], "application/rpki-roa": ["roa"], "application/rsd+xml": ["rsd"], "application/rss+xml": ["rss"], "application/rtf": ["rtf"], "application/sbml+xml": ["sbml"], "application/scvp-cv-request": ["scq"], "application/scvp-cv-response": ["scs"], "application/scvp-vp-request": ["spq"], "application/scvp-vp-response": ["spp"], "application/sdp": ["sdp"], "application/senml+xml": ["senmlx"], "application/sensml+xml": ["sensmlx"], "application/set-payment-initiation": ["setpay"], "application/set-registration-initiation": ["setreg"], "application/shf+xml": ["shf"], "application/sieve": ["siv", "sieve"], "application/smil+xml": ["smi", "smil"], "application/sparql-query": ["rq"], "application/sparql-results+xml": ["srx"], "application/srgs": ["gram"], "application/srgs+xml": ["grxml"], "application/sru+xml": ["sru"], "application/ssdl+xml": ["ssdl"], "application/ssml+xml": ["ssml"], "application/swid+xml": ["swidtag"], "application/tei+xml": ["tei", "teicorpus"], "application/thraud+xml": ["tfi"], "application/timestamped-data": ["tsd"], "application/toml": ["toml"], "application/trig": ["trig"], "application/ttml+xml": ["ttml"], "application/ubjson": ["ubj"], "application/urc-ressheet+xml": ["rsheet"], "application/urc-targetdesc+xml": ["td"], "application/voicexml+xml": ["vxml"], "application/wasm": ["wasm"], "application/widget": ["wgt"], "application/winhlp": ["hlp"], "application/wsdl+xml": ["wsdl"], "application/wspolicy+xml": ["wspolicy"], "application/xaml+xml": ["xaml"], "application/xcap-att+xml": ["xav"], "application/xcap-caps+xml": ["xca"], "application/xcap-diff+xml": ["xdf"], "application/xcap-el+xml": ["xel"], "application/xcap-ns+xml": ["xns"], "application/xenc+xml": ["xenc"], "application/xhtml+xml": ["xhtml", "xht"], "application/xliff+xml": ["xlf"], "application/xml": ["xml", "xsl", "xsd", "rng"], "application/xml-dtd": ["dtd"], "application/xop+xml": ["xop"], "application/xproc+xml": ["xpl"], "application/xslt+xml": ["*xsl", "xslt"], "application/xspf+xml": ["xspf"], "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"], "application/yang": ["yang"], "application/yin+xml": ["yin"], "application/zip": ["zip"], "audio/3gpp": ["*3gpp"], "audio/adpcm": ["adp"], "audio/amr": ["amr"], "audio/basic": ["au", "snd"], "audio/midi": ["mid", "midi", "kar", "rmi"], "audio/mobile-xmf": ["mxmf"], "audio/mp3": ["*mp3"], "audio/mp4": ["m4a", "mp4a"], "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"], "audio/ogg": ["oga", "ogg", "spx", "opus"], "audio/s3m": ["s3m"], "audio/silk": ["sil"], "audio/wav": ["wav"], "audio/wave": ["*wav"], "audio/webm": ["weba"], "audio/xm": ["xm"], "font/collection": ["ttc"], "font/otf": ["otf"], "font/ttf": ["ttf"], "font/woff": ["woff"], "font/woff2": ["woff2"], "image/aces": ["exr"], "image/apng": ["apng"], "image/avif": ["avif"], "image/bmp": ["bmp"], "image/cgm": ["cgm"], "image/dicom-rle": ["drle"], "image/emf": ["emf"], "image/fits": ["fits"], "image/g3fax": ["g3"], "image/gif": ["gif"], "image/heic": ["heic"], "image/heic-sequence": ["heics"], "image/heif": ["heif"], "image/heif-sequence": ["heifs"], "image/hej2k": ["hej2"], "image/hsj2": ["hsj2"], "image/ief": ["ief"], "image/jls": ["jls"], "image/jp2": ["jp2", "jpg2"], "image/jpeg": ["jpeg", "jpg", "jpe"], "image/jph": ["jph"], "image/jphc": ["jhc"], "image/jpm": ["jpm"], "image/jpx": ["jpx", "jpf"], "image/jxr": ["jxr"], "image/jxra": ["jxra"], "image/jxrs": ["jxrs"], "image/jxs": ["jxs"], "image/jxsc": ["jxsc"], "image/jxsi": ["jxsi"], "image/jxss": ["jxss"], "image/ktx": ["ktx"], "image/ktx2": ["ktx2"], "image/png": ["png"], "image/sgi": ["sgi"], "image/svg+xml": ["svg", "svgz"], "image/t38": ["t38"], "image/tiff": ["tif", "tiff"], "image/tiff-fx": ["tfx"], "image/webp": ["webp"], "image/wmf": ["wmf"], "message/disposition-notification": ["disposition-notification"], "message/global": ["u8msg"], "message/global-delivery-status": ["u8dsn"], "message/global-disposition-notification": ["u8mdn"], "message/global-headers": ["u8hdr"], "message/rfc822": ["eml", "mime"], "model/3mf": ["3mf"], "model/gltf+json": ["gltf"], "model/gltf-binary": ["glb"], "model/iges": ["igs", "iges"], "model/mesh": ["msh", "mesh", "silo"], "model/mtl": ["mtl"], "model/obj": ["obj"], "model/step+xml": ["stpx"], "model/step+zip": ["stpz"], "model/step-xml+zip": ["stpxz"], "model/stl": ["stl"], "model/vrml": ["wrl", "vrml"], "model/x3d+binary": ["*x3db", "x3dbz"], "model/x3d+fastinfoset": ["x3db"], "model/x3d+vrml": ["*x3dv", "x3dvz"], "model/x3d+xml": ["x3d", "x3dz"], "model/x3d-vrml": ["x3dv"], "text/cache-manifest": ["appcache", "manifest"], "text/calendar": ["ics", "ifb"], "text/coffeescript": ["coffee", "litcoffee"], "text/css": ["css"], "text/csv": ["csv"], "text/html": ["html", "htm", "shtml"], "text/jade": ["jade"], "text/jsx": ["jsx"], "text/less": ["less"], "text/markdown": ["markdown", "md"], "text/mathml": ["mml"], "text/mdx": ["mdx"], "text/n3": ["n3"], "text/plain": ["txt", "text", "conf", "def", "list", "log", "in", "ini"], "text/richtext": ["rtx"], "text/rtf": ["*rtf"], "text/sgml": ["sgml", "sgm"], "text/shex": ["shex"], "text/slim": ["slim", "slm"], "text/spdx": ["spdx"], "text/stylus": ["stylus", "styl"], "text/tab-separated-values": ["tsv"], "text/troff": ["t", "tr", "roff", "man", "me", "ms"], "text/turtle": ["ttl"], "text/uri-list": ["uri", "uris", "urls"], "text/vcard": ["vcard"], "text/vtt": ["vtt"], "text/xml": ["*xml"], "text/yaml": ["yaml", "yml"], "video/3gpp": ["3gp", "3gpp"], "video/3gpp2": ["3g2"], "video/h261": ["h261"], "video/h263": ["h263"], "video/h264": ["h264"], "video/iso.segment": ["m4s"], "video/jpeg": ["jpgv"], "video/jpm": ["*jpm", "jpgm"], "video/mj2": ["mj2", "mjp2"], "video/mp2t": ["ts"], "video/mp4": ["mp4", "mp4v", "mpg4"], "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"], "video/ogg": ["ogv"], "video/quicktime": ["qt", "mov"], "video/webm": ["webm"] };
  });
  var lp = _2((HI, ap) => {
    ap.exports = { "application/prs.cww": ["cww"], "application/vnd.1000minds.decision-model+xml": ["1km"], "application/vnd.3gpp.pic-bw-large": ["plb"], "application/vnd.3gpp.pic-bw-small": ["psb"], "application/vnd.3gpp.pic-bw-var": ["pvb"], "application/vnd.3gpp2.tcap": ["tcap"], "application/vnd.3m.post-it-notes": ["pwn"], "application/vnd.accpac.simply.aso": ["aso"], "application/vnd.accpac.simply.imp": ["imp"], "application/vnd.acucobol": ["acu"], "application/vnd.acucorp": ["atc", "acutc"], "application/vnd.adobe.air-application-installer-package+zip": ["air"], "application/vnd.adobe.formscentral.fcdt": ["fcdt"], "application/vnd.adobe.fxp": ["fxp", "fxpl"], "application/vnd.adobe.xdp+xml": ["xdp"], "application/vnd.adobe.xfdf": ["xfdf"], "application/vnd.ahead.space": ["ahead"], "application/vnd.airzip.filesecure.azf": ["azf"], "application/vnd.airzip.filesecure.azs": ["azs"], "application/vnd.amazon.ebook": ["azw"], "application/vnd.americandynamics.acc": ["acc"], "application/vnd.amiga.ami": ["ami"], "application/vnd.android.package-archive": ["apk"], "application/vnd.anser-web-certificate-issue-initiation": ["cii"], "application/vnd.anser-web-funds-transfer-initiation": ["fti"], "application/vnd.antix.game-component": ["atx"], "application/vnd.apple.installer+xml": ["mpkg"], "application/vnd.apple.keynote": ["key"], "application/vnd.apple.mpegurl": ["m3u8"], "application/vnd.apple.numbers": ["numbers"], "application/vnd.apple.pages": ["pages"], "application/vnd.apple.pkpass": ["pkpass"], "application/vnd.aristanetworks.swi": ["swi"], "application/vnd.astraea-software.iota": ["iota"], "application/vnd.audiograph": ["aep"], "application/vnd.balsamiq.bmml+xml": ["bmml"], "application/vnd.blueice.multipass": ["mpm"], "application/vnd.bmi": ["bmi"], "application/vnd.businessobjects": ["rep"], "application/vnd.chemdraw+xml": ["cdxml"], "application/vnd.chipnuts.karaoke-mmd": ["mmd"], "application/vnd.cinderella": ["cdy"], "application/vnd.citationstyles.style+xml": ["csl"], "application/vnd.claymore": ["cla"], "application/vnd.cloanto.rp9": ["rp9"], "application/vnd.clonk.c4group": ["c4g", "c4d", "c4f", "c4p", "c4u"], "application/vnd.cluetrust.cartomobile-config": ["c11amc"], "application/vnd.cluetrust.cartomobile-config-pkg": ["c11amz"], "application/vnd.commonspace": ["csp"], "application/vnd.contact.cmsg": ["cdbcmsg"], "application/vnd.cosmocaller": ["cmc"], "application/vnd.crick.clicker": ["clkx"], "application/vnd.crick.clicker.keyboard": ["clkk"], "application/vnd.crick.clicker.palette": ["clkp"], "application/vnd.crick.clicker.template": ["clkt"], "application/vnd.crick.clicker.wordbank": ["clkw"], "application/vnd.criticaltools.wbs+xml": ["wbs"], "application/vnd.ctc-posml": ["pml"], "application/vnd.cups-ppd": ["ppd"], "application/vnd.curl.car": ["car"], "application/vnd.curl.pcurl": ["pcurl"], "application/vnd.dart": ["dart"], "application/vnd.data-vision.rdz": ["rdz"], "application/vnd.dbf": ["dbf"], "application/vnd.dece.data": ["uvf", "uvvf", "uvd", "uvvd"], "application/vnd.dece.ttml+xml": ["uvt", "uvvt"], "application/vnd.dece.unspecified": ["uvx", "uvvx"], "application/vnd.dece.zip": ["uvz", "uvvz"], "application/vnd.denovo.fcselayout-link": ["fe_launch"], "application/vnd.dna": ["dna"], "application/vnd.dolby.mlp": ["mlp"], "application/vnd.dpgraph": ["dpg"], "application/vnd.dreamfactory": ["dfac"], "application/vnd.ds-keypoint": ["kpxx"], "application/vnd.dvb.ait": ["ait"], "application/vnd.dvb.service": ["svc"], "application/vnd.dynageo": ["geo"], "application/vnd.ecowin.chart": ["mag"], "application/vnd.enliven": ["nml"], "application/vnd.epson.esf": ["esf"], "application/vnd.epson.msf": ["msf"], "application/vnd.epson.quickanime": ["qam"], "application/vnd.epson.salt": ["slt"], "application/vnd.epson.ssf": ["ssf"], "application/vnd.eszigno3+xml": ["es3", "et3"], "application/vnd.ezpix-album": ["ez2"], "application/vnd.ezpix-package": ["ez3"], "application/vnd.fdf": ["fdf"], "application/vnd.fdsn.mseed": ["mseed"], "application/vnd.fdsn.seed": ["seed", "dataless"], "application/vnd.flographit": ["gph"], "application/vnd.fluxtime.clip": ["ftc"], "application/vnd.framemaker": ["fm", "frame", "maker", "book"], "application/vnd.frogans.fnc": ["fnc"], "application/vnd.frogans.ltf": ["ltf"], "application/vnd.fsc.weblaunch": ["fsc"], "application/vnd.fujitsu.oasys": ["oas"], "application/vnd.fujitsu.oasys2": ["oa2"], "application/vnd.fujitsu.oasys3": ["oa3"], "application/vnd.fujitsu.oasysgp": ["fg5"], "application/vnd.fujitsu.oasysprs": ["bh2"], "application/vnd.fujixerox.ddd": ["ddd"], "application/vnd.fujixerox.docuworks": ["xdw"], "application/vnd.fujixerox.docuworks.binder": ["xbd"], "application/vnd.fuzzysheet": ["fzs"], "application/vnd.genomatix.tuxedo": ["txd"], "application/vnd.geogebra.file": ["ggb"], "application/vnd.geogebra.tool": ["ggt"], "application/vnd.geometry-explorer": ["gex", "gre"], "application/vnd.geonext": ["gxt"], "application/vnd.geoplan": ["g2w"], "application/vnd.geospace": ["g3w"], "application/vnd.gmx": ["gmx"], "application/vnd.google-apps.document": ["gdoc"], "application/vnd.google-apps.presentation": ["gslides"], "application/vnd.google-apps.spreadsheet": ["gsheet"], "application/vnd.google-earth.kml+xml": ["kml"], "application/vnd.google-earth.kmz": ["kmz"], "application/vnd.grafeq": ["gqf", "gqs"], "application/vnd.groove-account": ["gac"], "application/vnd.groove-help": ["ghf"], "application/vnd.groove-identity-message": ["gim"], "application/vnd.groove-injector": ["grv"], "application/vnd.groove-tool-message": ["gtm"], "application/vnd.groove-tool-template": ["tpl"], "application/vnd.groove-vcard": ["vcg"], "application/vnd.hal+xml": ["hal"], "application/vnd.handheld-entertainment+xml": ["zmm"], "application/vnd.hbci": ["hbci"], "application/vnd.hhe.lesson-player": ["les"], "application/vnd.hp-hpgl": ["hpgl"], "application/vnd.hp-hpid": ["hpid"], "application/vnd.hp-hps": ["hps"], "application/vnd.hp-jlyt": ["jlt"], "application/vnd.hp-pcl": ["pcl"], "application/vnd.hp-pclxl": ["pclxl"], "application/vnd.hydrostatix.sof-data": ["sfd-hdstx"], "application/vnd.ibm.minipay": ["mpy"], "application/vnd.ibm.modcap": ["afp", "listafp", "list3820"], "application/vnd.ibm.rights-management": ["irm"], "application/vnd.ibm.secure-container": ["sc"], "application/vnd.iccprofile": ["icc", "icm"], "application/vnd.igloader": ["igl"], "application/vnd.immervision-ivp": ["ivp"], "application/vnd.immervision-ivu": ["ivu"], "application/vnd.insors.igm": ["igm"], "application/vnd.intercon.formnet": ["xpw", "xpx"], "application/vnd.intergeo": ["i2g"], "application/vnd.intu.qbo": ["qbo"], "application/vnd.intu.qfx": ["qfx"], "application/vnd.ipunplugged.rcprofile": ["rcprofile"], "application/vnd.irepository.package+xml": ["irp"], "application/vnd.is-xpr": ["xpr"], "application/vnd.isac.fcs": ["fcs"], "application/vnd.jam": ["jam"], "application/vnd.jcp.javame.midlet-rms": ["rms"], "application/vnd.jisp": ["jisp"], "application/vnd.joost.joda-archive": ["joda"], "application/vnd.kahootz": ["ktz", "ktr"], "application/vnd.kde.karbon": ["karbon"], "application/vnd.kde.kchart": ["chrt"], "application/vnd.kde.kformula": ["kfo"], "application/vnd.kde.kivio": ["flw"], "application/vnd.kde.kontour": ["kon"], "application/vnd.kde.kpresenter": ["kpr", "kpt"], "application/vnd.kde.kspread": ["ksp"], "application/vnd.kde.kword": ["kwd", "kwt"], "application/vnd.kenameaapp": ["htke"], "application/vnd.kidspiration": ["kia"], "application/vnd.kinar": ["kne", "knp"], "application/vnd.koan": ["skp", "skd", "skt", "skm"], "application/vnd.kodak-descriptor": ["sse"], "application/vnd.las.las+xml": ["lasxml"], "application/vnd.llamagraphics.life-balance.desktop": ["lbd"], "application/vnd.llamagraphics.life-balance.exchange+xml": ["lbe"], "application/vnd.lotus-1-2-3": ["123"], "application/vnd.lotus-approach": ["apr"], "application/vnd.lotus-freelance": ["pre"], "application/vnd.lotus-notes": ["nsf"], "application/vnd.lotus-organizer": ["org"], "application/vnd.lotus-screencam": ["scm"], "application/vnd.lotus-wordpro": ["lwp"], "application/vnd.macports.portpkg": ["portpkg"], "application/vnd.mapbox-vector-tile": ["mvt"], "application/vnd.mcd": ["mcd"], "application/vnd.medcalcdata": ["mc1"], "application/vnd.mediastation.cdkey": ["cdkey"], "application/vnd.mfer": ["mwf"], "application/vnd.mfmp": ["mfm"], "application/vnd.micrografx.flo": ["flo"], "application/vnd.micrografx.igx": ["igx"], "application/vnd.mif": ["mif"], "application/vnd.mobius.daf": ["daf"], "application/vnd.mobius.dis": ["dis"], "application/vnd.mobius.mbk": ["mbk"], "application/vnd.mobius.mqy": ["mqy"], "application/vnd.mobius.msl": ["msl"], "application/vnd.mobius.plc": ["plc"], "application/vnd.mobius.txf": ["txf"], "application/vnd.mophun.application": ["mpn"], "application/vnd.mophun.certificate": ["mpc"], "application/vnd.mozilla.xul+xml": ["xul"], "application/vnd.ms-artgalry": ["cil"], "application/vnd.ms-cab-compressed": ["cab"], "application/vnd.ms-excel": ["xls", "xlm", "xla", "xlc", "xlt", "xlw"], "application/vnd.ms-excel.addin.macroenabled.12": ["xlam"], "application/vnd.ms-excel.sheet.binary.macroenabled.12": ["xlsb"], "application/vnd.ms-excel.sheet.macroenabled.12": ["xlsm"], "application/vnd.ms-excel.template.macroenabled.12": ["xltm"], "application/vnd.ms-fontobject": ["eot"], "application/vnd.ms-htmlhelp": ["chm"], "application/vnd.ms-ims": ["ims"], "application/vnd.ms-lrm": ["lrm"], "application/vnd.ms-officetheme": ["thmx"], "application/vnd.ms-outlook": ["msg"], "application/vnd.ms-pki.seccat": ["cat"], "application/vnd.ms-pki.stl": ["*stl"], "application/vnd.ms-powerpoint": ["ppt", "pps", "pot"], "application/vnd.ms-powerpoint.addin.macroenabled.12": ["ppam"], "application/vnd.ms-powerpoint.presentation.macroenabled.12": ["pptm"], "application/vnd.ms-powerpoint.slide.macroenabled.12": ["sldm"], "application/vnd.ms-powerpoint.slideshow.macroenabled.12": ["ppsm"], "application/vnd.ms-powerpoint.template.macroenabled.12": ["potm"], "application/vnd.ms-project": ["mpp", "mpt"], "application/vnd.ms-word.document.macroenabled.12": ["docm"], "application/vnd.ms-word.template.macroenabled.12": ["dotm"], "application/vnd.ms-works": ["wps", "wks", "wcm", "wdb"], "application/vnd.ms-wpl": ["wpl"], "application/vnd.ms-xpsdocument": ["xps"], "application/vnd.mseq": ["mseq"], "application/vnd.musician": ["mus"], "application/vnd.muvee.style": ["msty"], "application/vnd.mynfc": ["taglet"], "application/vnd.neurolanguage.nlu": ["nlu"], "application/vnd.nitf": ["ntf", "nitf"], "application/vnd.noblenet-directory": ["nnd"], "application/vnd.noblenet-sealer": ["nns"], "application/vnd.noblenet-web": ["nnw"], "application/vnd.nokia.n-gage.ac+xml": ["*ac"], "application/vnd.nokia.n-gage.data": ["ngdat"], "application/vnd.nokia.n-gage.symbian.install": ["n-gage"], "application/vnd.nokia.radio-preset": ["rpst"], "application/vnd.nokia.radio-presets": ["rpss"], "application/vnd.novadigm.edm": ["edm"], "application/vnd.novadigm.edx": ["edx"], "application/vnd.novadigm.ext": ["ext"], "application/vnd.oasis.opendocument.chart": ["odc"], "application/vnd.oasis.opendocument.chart-template": ["otc"], "application/vnd.oasis.opendocument.database": ["odb"], "application/vnd.oasis.opendocument.formula": ["odf"], "application/vnd.oasis.opendocument.formula-template": ["odft"], "application/vnd.oasis.opendocument.graphics": ["odg"], "application/vnd.oasis.opendocument.graphics-template": ["otg"], "application/vnd.oasis.opendocument.image": ["odi"], "application/vnd.oasis.opendocument.image-template": ["oti"], "application/vnd.oasis.opendocument.presentation": ["odp"], "application/vnd.oasis.opendocument.presentation-template": ["otp"], "application/vnd.oasis.opendocument.spreadsheet": ["ods"], "application/vnd.oasis.opendocument.spreadsheet-template": ["ots"], "application/vnd.oasis.opendocument.text": ["odt"], "application/vnd.oasis.opendocument.text-master": ["odm"], "application/vnd.oasis.opendocument.text-template": ["ott"], "application/vnd.oasis.opendocument.text-web": ["oth"], "application/vnd.olpc-sugar": ["xo"], "application/vnd.oma.dd2+xml": ["dd2"], "application/vnd.openblox.game+xml": ["obgx"], "application/vnd.openofficeorg.extension": ["oxt"], "application/vnd.openstreetmap.data+xml": ["osm"], "application/vnd.openxmlformats-officedocument.presentationml.presentation": ["pptx"], "application/vnd.openxmlformats-officedocument.presentationml.slide": ["sldx"], "application/vnd.openxmlformats-officedocument.presentationml.slideshow": ["ppsx"], "application/vnd.openxmlformats-officedocument.presentationml.template": ["potx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": ["xlsx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.template": ["xltx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.document": ["docx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.template": ["dotx"], "application/vnd.osgeo.mapguide.package": ["mgp"], "application/vnd.osgi.dp": ["dp"], "application/vnd.osgi.subsystem": ["esa"], "application/vnd.palm": ["pdb", "pqa", "oprc"], "application/vnd.pawaafile": ["paw"], "application/vnd.pg.format": ["str"], "application/vnd.pg.osasli": ["ei6"], "application/vnd.picsel": ["efif"], "application/vnd.pmi.widget": ["wg"], "application/vnd.pocketlearn": ["plf"], "application/vnd.powerbuilder6": ["pbd"], "application/vnd.previewsystems.box": ["box"], "application/vnd.proteus.magazine": ["mgz"], "application/vnd.publishare-delta-tree": ["qps"], "application/vnd.pvi.ptid1": ["ptid"], "application/vnd.quark.quarkxpress": ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"], "application/vnd.rar": ["rar"], "application/vnd.realvnc.bed": ["bed"], "application/vnd.recordare.musicxml": ["mxl"], "application/vnd.recordare.musicxml+xml": ["musicxml"], "application/vnd.rig.cryptonote": ["cryptonote"], "application/vnd.rim.cod": ["cod"], "application/vnd.rn-realmedia": ["rm"], "application/vnd.rn-realmedia-vbr": ["rmvb"], "application/vnd.route66.link66+xml": ["link66"], "application/vnd.sailingtracker.track": ["st"], "application/vnd.seemail": ["see"], "application/vnd.sema": ["sema"], "application/vnd.semd": ["semd"], "application/vnd.semf": ["semf"], "application/vnd.shana.informed.formdata": ["ifm"], "application/vnd.shana.informed.formtemplate": ["itp"], "application/vnd.shana.informed.interchange": ["iif"], "application/vnd.shana.informed.package": ["ipk"], "application/vnd.simtech-mindmapper": ["twd", "twds"], "application/vnd.smaf": ["mmf"], "application/vnd.smart.teacher": ["teacher"], "application/vnd.software602.filler.form+xml": ["fo"], "application/vnd.solent.sdkm+xml": ["sdkm", "sdkd"], "application/vnd.spotfire.dxp": ["dxp"], "application/vnd.spotfire.sfs": ["sfs"], "application/vnd.stardivision.calc": ["sdc"], "application/vnd.stardivision.draw": ["sda"], "application/vnd.stardivision.impress": ["sdd"], "application/vnd.stardivision.math": ["smf"], "application/vnd.stardivision.writer": ["sdw", "vor"], "application/vnd.stardivision.writer-global": ["sgl"], "application/vnd.stepmania.package": ["smzip"], "application/vnd.stepmania.stepchart": ["sm"], "application/vnd.sun.wadl+xml": ["wadl"], "application/vnd.sun.xml.calc": ["sxc"], "application/vnd.sun.xml.calc.template": ["stc"], "application/vnd.sun.xml.draw": ["sxd"], "application/vnd.sun.xml.draw.template": ["std"], "application/vnd.sun.xml.impress": ["sxi"], "application/vnd.sun.xml.impress.template": ["sti"], "application/vnd.sun.xml.math": ["sxm"], "application/vnd.sun.xml.writer": ["sxw"], "application/vnd.sun.xml.writer.global": ["sxg"], "application/vnd.sun.xml.writer.template": ["stw"], "application/vnd.sus-calendar": ["sus", "susp"], "application/vnd.svd": ["svd"], "application/vnd.symbian.install": ["sis", "sisx"], "application/vnd.syncml+xml": ["xsm"], "application/vnd.syncml.dm+wbxml": ["bdm"], "application/vnd.syncml.dm+xml": ["xdm"], "application/vnd.syncml.dmddf+xml": ["ddf"], "application/vnd.tao.intent-module-archive": ["tao"], "application/vnd.tcpdump.pcap": ["pcap", "cap", "dmp"], "application/vnd.tmobile-livetv": ["tmo"], "application/vnd.trid.tpt": ["tpt"], "application/vnd.triscape.mxs": ["mxs"], "application/vnd.trueapp": ["tra"], "application/vnd.ufdl": ["ufd", "ufdl"], "application/vnd.uiq.theme": ["utz"], "application/vnd.umajin": ["umj"], "application/vnd.unity": ["unityweb"], "application/vnd.uoml+xml": ["uoml"], "application/vnd.vcx": ["vcx"], "application/vnd.visio": ["vsd", "vst", "vss", "vsw"], "application/vnd.visionary": ["vis"], "application/vnd.vsf": ["vsf"], "application/vnd.wap.wbxml": ["wbxml"], "application/vnd.wap.wmlc": ["wmlc"], "application/vnd.wap.wmlscriptc": ["wmlsc"], "application/vnd.webturbo": ["wtb"], "application/vnd.wolfram.player": ["nbp"], "application/vnd.wordperfect": ["wpd"], "application/vnd.wqd": ["wqd"], "application/vnd.wt.stf": ["stf"], "application/vnd.xara": ["xar"], "application/vnd.xfdl": ["xfdl"], "application/vnd.yamaha.hv-dic": ["hvd"], "application/vnd.yamaha.hv-script": ["hvs"], "application/vnd.yamaha.hv-voice": ["hvp"], "application/vnd.yamaha.openscoreformat": ["osf"], "application/vnd.yamaha.openscoreformat.osfpvg+xml": ["osfpvg"], "application/vnd.yamaha.smaf-audio": ["saf"], "application/vnd.yamaha.smaf-phrase": ["spf"], "application/vnd.yellowriver-custom-menu": ["cmp"], "application/vnd.zul": ["zir", "zirz"], "application/vnd.zzazz.deck+xml": ["zaz"], "application/x-7z-compressed": ["7z"], "application/x-abiword": ["abw"], "application/x-ace-compressed": ["ace"], "application/x-apple-diskimage": ["*dmg"], "application/x-arj": ["arj"], "application/x-authorware-bin": ["aab", "x32", "u32", "vox"], "application/x-authorware-map": ["aam"], "application/x-authorware-seg": ["aas"], "application/x-bcpio": ["bcpio"], "application/x-bdoc": ["*bdoc"], "application/x-bittorrent": ["torrent"], "application/x-blorb": ["blb", "blorb"], "application/x-bzip": ["bz"], "application/x-bzip2": ["bz2", "boz"], "application/x-cbr": ["cbr", "cba", "cbt", "cbz", "cb7"], "application/x-cdlink": ["vcd"], "application/x-cfs-compressed": ["cfs"], "application/x-chat": ["chat"], "application/x-chess-pgn": ["pgn"], "application/x-chrome-extension": ["crx"], "application/x-cocoa": ["cco"], "application/x-conference": ["nsc"], "application/x-cpio": ["cpio"], "application/x-csh": ["csh"], "application/x-debian-package": ["*deb", "udeb"], "application/x-dgc-compressed": ["dgc"], "application/x-director": ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"], "application/x-doom": ["wad"], "application/x-dtbncx+xml": ["ncx"], "application/x-dtbook+xml": ["dtb"], "application/x-dtbresource+xml": ["res"], "application/x-dvi": ["dvi"], "application/x-envoy": ["evy"], "application/x-eva": ["eva"], "application/x-font-bdf": ["bdf"], "application/x-font-ghostscript": ["gsf"], "application/x-font-linux-psf": ["psf"], "application/x-font-pcf": ["pcf"], "application/x-font-snf": ["snf"], "application/x-font-type1": ["pfa", "pfb", "pfm", "afm"], "application/x-freearc": ["arc"], "application/x-futuresplash": ["spl"], "application/x-gca-compressed": ["gca"], "application/x-glulx": ["ulx"], "application/x-gnumeric": ["gnumeric"], "application/x-gramps-xml": ["gramps"], "application/x-gtar": ["gtar"], "application/x-hdf": ["hdf"], "application/x-httpd-php": ["php"], "application/x-install-instructions": ["install"], "application/x-iso9660-image": ["*iso"], "application/x-iwork-keynote-sffkey": ["*key"], "application/x-iwork-numbers-sffnumbers": ["*numbers"], "application/x-iwork-pages-sffpages": ["*pages"], "application/x-java-archive-diff": ["jardiff"], "application/x-java-jnlp-file": ["jnlp"], "application/x-keepass2": ["kdbx"], "application/x-latex": ["latex"], "application/x-lua-bytecode": ["luac"], "application/x-lzh-compressed": ["lzh", "lha"], "application/x-makeself": ["run"], "application/x-mie": ["mie"], "application/x-mobipocket-ebook": ["prc", "mobi"], "application/x-ms-application": ["application"], "application/x-ms-shortcut": ["lnk"], "application/x-ms-wmd": ["wmd"], "application/x-ms-wmz": ["wmz"], "application/x-ms-xbap": ["xbap"], "application/x-msaccess": ["mdb"], "application/x-msbinder": ["obd"], "application/x-mscardfile": ["crd"], "application/x-msclip": ["clp"], "application/x-msdos-program": ["*exe"], "application/x-msdownload": ["*exe", "*dll", "com", "bat", "*msi"], "application/x-msmediaview": ["mvb", "m13", "m14"], "application/x-msmetafile": ["*wmf", "*wmz", "*emf", "emz"], "application/x-msmoney": ["mny"], "application/x-mspublisher": ["pub"], "application/x-msschedule": ["scd"], "application/x-msterminal": ["trm"], "application/x-mswrite": ["wri"], "application/x-netcdf": ["nc", "cdf"], "application/x-ns-proxy-autoconfig": ["pac"], "application/x-nzb": ["nzb"], "application/x-perl": ["pl", "pm"], "application/x-pilot": ["*prc", "*pdb"], "application/x-pkcs12": ["p12", "pfx"], "application/x-pkcs7-certificates": ["p7b", "spc"], "application/x-pkcs7-certreqresp": ["p7r"], "application/x-rar-compressed": ["*rar"], "application/x-redhat-package-manager": ["rpm"], "application/x-research-info-systems": ["ris"], "application/x-sea": ["sea"], "application/x-sh": ["sh"], "application/x-shar": ["shar"], "application/x-shockwave-flash": ["swf"], "application/x-silverlight-app": ["xap"], "application/x-sql": ["sql"], "application/x-stuffit": ["sit"], "application/x-stuffitx": ["sitx"], "application/x-subrip": ["srt"], "application/x-sv4cpio": ["sv4cpio"], "application/x-sv4crc": ["sv4crc"], "application/x-t3vm-image": ["t3"], "application/x-tads": ["gam"], "application/x-tar": ["tar"], "application/x-tcl": ["tcl", "tk"], "application/x-tex": ["tex"], "application/x-tex-tfm": ["tfm"], "application/x-texinfo": ["texinfo", "texi"], "application/x-tgif": ["*obj"], "application/x-ustar": ["ustar"], "application/x-virtualbox-hdd": ["hdd"], "application/x-virtualbox-ova": ["ova"], "application/x-virtualbox-ovf": ["ovf"], "application/x-virtualbox-vbox": ["vbox"], "application/x-virtualbox-vbox-extpack": ["vbox-extpack"], "application/x-virtualbox-vdi": ["vdi"], "application/x-virtualbox-vhd": ["vhd"], "application/x-virtualbox-vmdk": ["vmdk"], "application/x-wais-source": ["src"], "application/x-web-app-manifest+json": ["webapp"], "application/x-x509-ca-cert": ["der", "crt", "pem"], "application/x-xfig": ["fig"], "application/x-xliff+xml": ["*xlf"], "application/x-xpinstall": ["xpi"], "application/x-xz": ["xz"], "application/x-zmachine": ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"], "audio/vnd.dece.audio": ["uva", "uvva"], "audio/vnd.digital-winds": ["eol"], "audio/vnd.dra": ["dra"], "audio/vnd.dts": ["dts"], "audio/vnd.dts.hd": ["dtshd"], "audio/vnd.lucent.voice": ["lvp"], "audio/vnd.ms-playready.media.pya": ["pya"], "audio/vnd.nuera.ecelp4800": ["ecelp4800"], "audio/vnd.nuera.ecelp7470": ["ecelp7470"], "audio/vnd.nuera.ecelp9600": ["ecelp9600"], "audio/vnd.rip": ["rip"], "audio/x-aac": ["aac"], "audio/x-aiff": ["aif", "aiff", "aifc"], "audio/x-caf": ["caf"], "audio/x-flac": ["flac"], "audio/x-m4a": ["*m4a"], "audio/x-matroska": ["mka"], "audio/x-mpegurl": ["m3u"], "audio/x-ms-wax": ["wax"], "audio/x-ms-wma": ["wma"], "audio/x-pn-realaudio": ["ram", "ra"], "audio/x-pn-realaudio-plugin": ["rmp"], "audio/x-realaudio": ["*ra"], "audio/x-wav": ["*wav"], "chemical/x-cdx": ["cdx"], "chemical/x-cif": ["cif"], "chemical/x-cmdf": ["cmdf"], "chemical/x-cml": ["cml"], "chemical/x-csml": ["csml"], "chemical/x-xyz": ["xyz"], "image/prs.btif": ["btif"], "image/prs.pti": ["pti"], "image/vnd.adobe.photoshop": ["psd"], "image/vnd.airzip.accelerator.azv": ["azv"], "image/vnd.dece.graphic": ["uvi", "uvvi", "uvg", "uvvg"], "image/vnd.djvu": ["djvu", "djv"], "image/vnd.dvb.subtitle": ["*sub"], "image/vnd.dwg": ["dwg"], "image/vnd.dxf": ["dxf"], "image/vnd.fastbidsheet": ["fbs"], "image/vnd.fpx": ["fpx"], "image/vnd.fst": ["fst"], "image/vnd.fujixerox.edmics-mmr": ["mmr"], "image/vnd.fujixerox.edmics-rlc": ["rlc"], "image/vnd.microsoft.icon": ["ico"], "image/vnd.ms-dds": ["dds"], "image/vnd.ms-modi": ["mdi"], "image/vnd.ms-photo": ["wdp"], "image/vnd.net-fpx": ["npx"], "image/vnd.pco.b16": ["b16"], "image/vnd.tencent.tap": ["tap"], "image/vnd.valve.source.texture": ["vtf"], "image/vnd.wap.wbmp": ["wbmp"], "image/vnd.xiff": ["xif"], "image/vnd.zbrush.pcx": ["pcx"], "image/x-3ds": ["3ds"], "image/x-cmu-raster": ["ras"], "image/x-cmx": ["cmx"], "image/x-freehand": ["fh", "fhc", "fh4", "fh5", "fh7"], "image/x-icon": ["*ico"], "image/x-jng": ["jng"], "image/x-mrsid-image": ["sid"], "image/x-ms-bmp": ["*bmp"], "image/x-pcx": ["*pcx"], "image/x-pict": ["pic", "pct"], "image/x-portable-anymap": ["pnm"], "image/x-portable-bitmap": ["pbm"], "image/x-portable-graymap": ["pgm"], "image/x-portable-pixmap": ["ppm"], "image/x-rgb": ["rgb"], "image/x-tga": ["tga"], "image/x-xbitmap": ["xbm"], "image/x-xpixmap": ["xpm"], "image/x-xwindowdump": ["xwd"], "message/vnd.wfa.wsc": ["wsc"], "model/vnd.collada+xml": ["dae"], "model/vnd.dwf": ["dwf"], "model/vnd.gdl": ["gdl"], "model/vnd.gtw": ["gtw"], "model/vnd.mts": ["mts"], "model/vnd.opengex": ["ogex"], "model/vnd.parasolid.transmit.binary": ["x_b"], "model/vnd.parasolid.transmit.text": ["x_t"], "model/vnd.sap.vds": ["vds"], "model/vnd.usdz+zip": ["usdz"], "model/vnd.valve.source.compiled-map": ["bsp"], "model/vnd.vtu": ["vtu"], "text/prs.lines.tag": ["dsc"], "text/vnd.curl": ["curl"], "text/vnd.curl.dcurl": ["dcurl"], "text/vnd.curl.mcurl": ["mcurl"], "text/vnd.curl.scurl": ["scurl"], "text/vnd.dvb.subtitle": ["sub"], "text/vnd.fly": ["fly"], "text/vnd.fmi.flexstor": ["flx"], "text/vnd.graphviz": ["gv"], "text/vnd.in3d.3dml": ["3dml"], "text/vnd.in3d.spot": ["spot"], "text/vnd.sun.j2me.app-descriptor": ["jad"], "text/vnd.wap.wml": ["wml"], "text/vnd.wap.wmlscript": ["wmls"], "text/x-asm": ["s", "asm"], "text/x-c": ["c", "cc", "cxx", "cpp", "h", "hh", "dic"], "text/x-component": ["htc"], "text/x-fortran": ["f", "for", "f77", "f90"], "text/x-handlebars-template": ["hbs"], "text/x-java-source": ["java"], "text/x-lua": ["lua"], "text/x-markdown": ["mkd"], "text/x-nfo": ["nfo"], "text/x-opml": ["opml"], "text/x-org": ["*org"], "text/x-pascal": ["p", "pas"], "text/x-processing": ["pde"], "text/x-sass": ["sass"], "text/x-scss": ["scss"], "text/x-setext": ["etx"], "text/x-sfv": ["sfv"], "text/x-suse-ymp": ["ymp"], "text/x-uuencode": ["uu"], "text/x-vcalendar": ["vcs"], "text/x-vcard": ["vcf"], "video/vnd.dece.hd": ["uvh", "uvvh"], "video/vnd.dece.mobile": ["uvm", "uvvm"], "video/vnd.dece.pd": ["uvp", "uvvp"], "video/vnd.dece.sd": ["uvs", "uvvs"], "video/vnd.dece.video": ["uvv", "uvvv"], "video/vnd.dvb.file": ["dvb"], "video/vnd.fvt": ["fvt"], "video/vnd.mpegurl": ["mxu", "m4u"], "video/vnd.ms-playready.media.pyv": ["pyv"], "video/vnd.uvvu.mp4": ["uvu", "uvvu"], "video/vnd.vivo": ["viv"], "video/x-f4v": ["f4v"], "video/x-fli": ["fli"], "video/x-flv": ["flv"], "video/x-m4v": ["m4v"], "video/x-matroska": ["mkv", "mk3d", "mks"], "video/x-mng": ["mng"], "video/x-ms-asf": ["asf", "asx"], "video/x-ms-vob": ["vob"], "video/x-ms-wm": ["wm"], "video/x-ms-wmv": ["wmv"], "video/x-ms-wmx": ["wmx"], "video/x-ms-wvx": ["wvx"], "video/x-msvideo": ["avi"], "video/x-sgi-movie": ["movie"], "video/x-smv": ["smv"], "x-conference/x-cooltalk": ["ice"] };
  });
  var up = _2((GI, cp) => {
    var Kw = np();
    cp.exports = new Kw(op(), lp());
  });
  var hp = _2((YI, fp) => {
    fp.exports = function(t, e2) {
      for (var i = [], r2 = 0; r2 < t.length; r2++) {
        var n = e2(t[r2], r2);
        zw(n) ? i.push.apply(i, n) : i.push(n);
      }
      return i;
    };
    var zw = Array.isArray || function(t) {
      return Object.prototype.toString.call(t) === "[object Array]";
    };
  });
  var vp = _2((WI, gp) => {
    gp.exports = dp;
    function dp(t, e2, i) {
      t instanceof RegExp && (t = pp(t, i)), e2 instanceof RegExp && (e2 = pp(e2, i));
      var r2 = mp(t, e2, i);
      return r2 && { start: r2[0], end: r2[1], pre: i.slice(0, r2[0]), body: i.slice(r2[0] + t.length, r2[1]), post: i.slice(r2[1] + e2.length) };
    }
    function pp(t, e2) {
      var i = e2.match(t);
      return i ? i[0] : null;
    }
    dp.range = mp;
    function mp(t, e2, i) {
      var r2, n, s2, o2, a, l = i.indexOf(t), c2 = i.indexOf(e2, l + 1), u2 = l;
      if (l >= 0 && c2 > 0) {
        if (t === e2) return [l, c2];
        for (r2 = [], s2 = i.length; u2 >= 0 && !a; ) u2 == l ? (r2.push(u2), l = i.indexOf(t, u2 + 1)) : r2.length == 1 ? a = [r2.pop(), c2] : (n = r2.pop(), n < s2 && (s2 = n, o2 = c2), c2 = i.indexOf(e2, u2 + 1)), u2 = l < c2 && l >= 0 ? l : c2;
        r2.length && (a = [s2, o2]);
      }
      return a;
    }
  });
  var kp = _2((KI, Ep) => {
    var Jw = hp(), yp = vp();
    Ep.exports = Xw;
    var bp = "\0SLASH" + Math.random() + "\0", _p = "\0OPEN" + Math.random() + "\0", Ka = "\0CLOSE" + Math.random() + "\0", wp = "\0COMMA" + Math.random() + "\0", xp = "\0PERIOD" + Math.random() + "\0";
    function Wa(t) {
      return parseInt(t, 10) == t ? parseInt(t, 10) : t.charCodeAt(0);
    }
    function Zw(t) {
      return t.split("\\\\").join(bp).split("\\{").join(_p).split("\\}").join(Ka).split("\\,").join(wp).split("\\.").join(xp);
    }
    function Qw(t) {
      return t.split(bp).join("\\").split(_p).join("{").split(Ka).join("}").split(wp).join(",").split(xp).join(".");
    }
    function Sp(t) {
      if (!t) return [""];
      var e2 = [], i = yp("{", "}", t);
      if (!i) return t.split(",");
      var r2 = i.pre, n = i.body, s2 = i.post, o2 = r2.split(",");
      o2[o2.length - 1] += "{" + n + "}";
      var a = Sp(s2);
      return s2.length && (o2[o2.length - 1] += a.shift(), o2.push.apply(o2, a)), e2.push.apply(e2, o2), e2;
    }
    function Xw(t) {
      return t ? (t.substr(0, 2) === "{}" && (t = "\\{\\}" + t.substr(2)), xr(Zw(t), true).map(Qw)) : [];
    }
    function e1(t) {
      return "{" + t + "}";
    }
    function t1(t) {
      return /^-?0\d/.test(t);
    }
    function i1(t, e2) {
      return t <= e2;
    }
    function r1(t, e2) {
      return t >= e2;
    }
    function xr(t, e2) {
      var i = [], r2 = yp("{", "}", t);
      if (!r2 || /\$$/.test(r2.pre)) return [t];
      var n = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(r2.body), s2 = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(r2.body), o2 = n || s2, a = r2.body.indexOf(",") >= 0;
      if (!o2 && !a) return r2.post.match(/,.*\}/) ? (t = r2.pre + "{" + r2.body + Ka + r2.post, xr(t)) : [t];
      var l;
      if (o2) l = r2.body.split(/\.\./);
      else if (l = Sp(r2.body), l.length === 1 && (l = xr(l[0], false).map(e1), l.length === 1)) {
        var u2 = r2.post.length ? xr(r2.post, false) : [""];
        return u2.map(function(P2) {
          return r2.pre + l[0] + P2;
        });
      }
      var c2 = r2.pre, u2 = r2.post.length ? xr(r2.post, false) : [""], f2;
      if (o2) {
        var d2 = Wa(l[0]), g2 = Wa(l[1]), m2 = Math.max(l[0].length, l[1].length), y2 = l.length == 3 ? Math.abs(Wa(l[2])) : 1, b = i1, x2 = g2 < d2;
        x2 && (y2 *= -1, b = r1);
        var E = l.some(t1);
        f2 = [];
        for (var O2 = d2; b(O2, g2); O2 += y2) {
          var k2;
          if (s2) k2 = String.fromCharCode(O2), k2 === "\\" && (k2 = "");
          else if (k2 = String(O2), E) {
            var S2 = m2 - k2.length;
            if (S2 > 0) {
              var R2 = new Array(S2 + 1).join("0");
              O2 < 0 ? k2 = "-" + R2 + k2.slice(1) : k2 = R2 + k2;
            }
          }
          f2.push(k2);
        }
      } else f2 = Jw(l, function(L2) {
        return xr(L2, false);
      });
      for (var T2 = 0; T2 < f2.length; T2++) for (var A2 = 0; A2 < u2.length; A2++) {
        var C2 = c2 + f2[T2] + u2[A2];
        (!e2 || o2 || C2) && i.push(C2);
      }
      return i;
    }
  });
  var Np = _2((zI, Ip) => {
    Ip.exports = wt;
    wt.Minimatch = Xe;
    var an = function() {
      try {
        return require("path");
      } catch {
      }
    }() || { sep: "/" };
    wt.sep = an.sep;
    var Za = wt.GLOBSTAR = Xe.GLOBSTAR = {}, n1 = kp(), Op = { "!": { open: "(?:(?!(?:", close: "))[^/]*?)" }, "?": { open: "(?:", close: ")?" }, "+": { open: "(?:", close: ")+" }, "*": { open: "(?:", close: ")*" }, "@": { open: "(?:", close: ")" } }, za = "[^/]", Ja = za + "*?", s1 = "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?", o1 = "(?:(?!(?:\\/|^)\\.).)*?", Cp = a1("().*{}+?[]^$\\!");
    function a1(t) {
      return t.split("").reduce(function(e2, i) {
        return e2[i] = true, e2;
      }, {});
    }
    var Tp = /\/+/;
    wt.filter = l1;
    function l1(t, e2) {
      return e2 = e2 || {}, function(i, r2, n) {
        return wt(i, t, e2);
      };
    }
    function pi(t, e2) {
      e2 = e2 || {};
      var i = {};
      return Object.keys(t).forEach(function(r2) {
        i[r2] = t[r2];
      }), Object.keys(e2).forEach(function(r2) {
        i[r2] = e2[r2];
      }), i;
    }
    wt.defaults = function(t) {
      if (!t || typeof t != "object" || !Object.keys(t).length) return wt;
      var e2 = wt, i = function(n, s2, o2) {
        return e2(n, s2, pi(t, o2));
      };
      return i.Minimatch = function(n, s2) {
        return new e2.Minimatch(n, pi(t, s2));
      }, i.Minimatch.defaults = function(n) {
        return e2.defaults(pi(t, n)).Minimatch;
      }, i.filter = function(n, s2) {
        return e2.filter(n, pi(t, s2));
      }, i.defaults = function(n) {
        return e2.defaults(pi(t, n));
      }, i.makeRe = function(n, s2) {
        return e2.makeRe(n, pi(t, s2));
      }, i.braceExpand = function(n, s2) {
        return e2.braceExpand(n, pi(t, s2));
      }, i.match = function(r2, n, s2) {
        return e2.match(r2, n, pi(t, s2));
      }, i;
    };
    Xe.defaults = function(t) {
      return wt.defaults(t).Minimatch;
    };
    function wt(t, e2, i) {
      return Bs(e2), i || (i = {}), !i.nocomment && e2.charAt(0) === "#" ? false : new Xe(e2, i).match(t);
    }
    function Xe(t, e2) {
      if (!(this instanceof Xe)) return new Xe(t, e2);
      Bs(t), e2 || (e2 = {}), t = t.trim(), !e2.allowWindowsEscape && an.sep !== "/" && (t = t.split(an.sep).join("/")), this.options = e2, this.set = [], this.pattern = t, this.regexp = null, this.negate = false, this.comment = false, this.empty = false, this.partial = !!e2.partial, this.make();
    }
    Xe.prototype.debug = function() {
    };
    Xe.prototype.make = c1;
    function c1() {
      var t = this.pattern, e2 = this.options;
      if (!e2.nocomment && t.charAt(0) === "#") {
        this.comment = true;
        return;
      }
      if (!t) {
        this.empty = true;
        return;
      }
      this.parseNegate();
      var i = this.globSet = this.braceExpand();
      e2.debug && (this.debug = function() {
        console.error.apply(console, arguments);
      }), this.debug(this.pattern, i), i = this.globParts = i.map(function(r2) {
        return r2.split(Tp);
      }), this.debug(this.pattern, i), i = i.map(function(r2, n, s2) {
        return r2.map(this.parse, this);
      }, this), this.debug(this.pattern, i), i = i.filter(function(r2) {
        return r2.indexOf(false) === -1;
      }), this.debug(this.pattern, i), this.set = i;
    }
    Xe.prototype.parseNegate = u1;
    function u1() {
      var t = this.pattern, e2 = false, i = this.options, r2 = 0;
      if (!i.nonegate) {
        for (var n = 0, s2 = t.length; n < s2 && t.charAt(n) === "!"; n++) e2 = !e2, r2++;
        r2 && (this.pattern = t.substr(r2)), this.negate = e2;
      }
    }
    wt.braceExpand = function(t, e2) {
      return Ap(t, e2);
    };
    Xe.prototype.braceExpand = Ap;
    function Ap(t, e2) {
      return e2 || (this instanceof Xe ? e2 = this.options : e2 = {}), t = typeof t == "undefined" ? this.pattern : t, Bs(t), e2.nobrace || !/\{(?:(?!\{).)*\}/.test(t) ? [t] : n1(t);
    }
    var f1 = 1024 * 64, Bs = function(t) {
      if (typeof t != "string") throw new TypeError("invalid pattern");
      if (t.length > f1) throw new TypeError("pattern is too long");
    };
    Xe.prototype.parse = h1;
    var Ls = {};
    function h1(t, e2) {
      Bs(t);
      var i = this.options;
      if (t === "**") if (i.noglobstar) t = "*";
      else return Za;
      if (t === "") return "";
      var r2 = "", n = !!i.nocase, s2 = false, o2 = [], a = [], l, c2 = false, u2 = -1, f2 = -1, d2 = t.charAt(0) === "." ? "" : i.dot ? "(?!(?:^|\\/)\\.{1,2}(?:$|\\/))" : "(?!\\.)", g2 = this;
      function m2() {
        if (l) {
          switch (l) {
            case "*":
              r2 += Ja, n = true;
              break;
            case "?":
              r2 += za, n = true;
              break;
            default:
              r2 += "\\" + l;
              break;
          }
          g2.debug("clearStateChar %j %j", l, r2), l = false;
        }
      }
      for (var y2 = 0, b = t.length, x2; y2 < b && (x2 = t.charAt(y2)); y2++) {
        if (this.debug("%s	%s %s %j", t, y2, r2, x2), s2 && Cp[x2]) {
          r2 += "\\" + x2, s2 = false;
          continue;
        }
        switch (x2) {
          case "/":
            return false;
          case "\\":
            m2(), s2 = true;
            continue;
          case "?":
          case "*":
          case "+":
          case "@":
          case "!":
            if (this.debug("%s	%s %s %j <-- stateChar", t, y2, r2, x2), c2) {
              this.debug("  in class"), x2 === "!" && y2 === f2 + 1 && (x2 = "^"), r2 += x2;
              continue;
            }
            g2.debug("call clearStateChar %j", l), m2(), l = x2, i.noext && m2();
            continue;
          case "(":
            if (c2) {
              r2 += "(";
              continue;
            }
            if (!l) {
              r2 += "\\(";
              continue;
            }
            o2.push({ type: l, start: y2 - 1, reStart: r2.length, open: Op[l].open, close: Op[l].close }), r2 += l === "!" ? "(?:(?!(?:" : "(?:", this.debug("plType %j %j", l, r2), l = false;
            continue;
          case ")":
            if (c2 || !o2.length) {
              r2 += "\\)";
              continue;
            }
            m2(), n = true;
            var E = o2.pop();
            r2 += E.close, E.type === "!" && a.push(E), E.reEnd = r2.length;
            continue;
          case "|":
            if (c2 || !o2.length || s2) {
              r2 += "\\|", s2 = false;
              continue;
            }
            m2(), r2 += "|";
            continue;
          case "[":
            if (m2(), c2) {
              r2 += "\\" + x2;
              continue;
            }
            c2 = true, f2 = y2, u2 = r2.length, r2 += x2;
            continue;
          case "]":
            if (y2 === f2 + 1 || !c2) {
              r2 += "\\" + x2, s2 = false;
              continue;
            }
            var O2 = t.substring(f2 + 1, y2);
            try {
              RegExp("[" + O2 + "]");
            } catch {
              var k2 = this.parse(O2, Ls);
              r2 = r2.substr(0, u2) + "\\[" + k2[0] + "\\]", n = n || k2[1], c2 = false;
              continue;
            }
            n = true, c2 = false, r2 += x2;
            continue;
          default:
            m2(), s2 ? s2 = false : Cp[x2] && !(x2 === "^" && c2) && (r2 += "\\"), r2 += x2;
        }
      }
      for (c2 && (O2 = t.substr(f2 + 1), k2 = this.parse(O2, Ls), r2 = r2.substr(0, u2) + "\\[" + k2[0], n = n || k2[1]), E = o2.pop(); E; E = o2.pop()) {
        var S2 = r2.slice(E.reStart + E.open.length);
        this.debug("setting tail", r2, E), S2 = S2.replace(/((?:\\{2}){0,64})(\\?)\|/g, function(de, ae, ne) {
          return ne || (ne = "\\"), ae + ae + ne + "|";
        }), this.debug(`tail=%j
   %s`, S2, S2, E, r2);
        var R2 = E.type === "*" ? Ja : E.type === "?" ? za : "\\" + E.type;
        n = true, r2 = r2.slice(0, E.reStart) + R2 + "\\(" + S2;
      }
      m2(), s2 && (r2 += "\\\\");
      var T2 = false;
      switch (r2.charAt(0)) {
        case "[":
        case ".":
        case "(":
          T2 = true;
      }
      for (var A2 = a.length - 1; A2 > -1; A2--) {
        var C2 = a[A2], L2 = r2.slice(0, C2.reStart), P2 = r2.slice(C2.reStart, C2.reEnd - 8), U = r2.slice(C2.reEnd - 8, C2.reEnd), q2 = r2.slice(C2.reEnd);
        U += q2;
        var H = L2.split("(").length - 1, j = q2;
        for (y2 = 0; y2 < H; y2++) j = j.replace(/\)[+*?]?/, "");
        q2 = j;
        var V2 = "";
        q2 === "" && e2 !== Ls && (V2 = "$");
        var W2 = L2 + P2 + q2 + V2 + U;
        r2 = W2;
      }
      if (r2 !== "" && n && (r2 = "(?=.)" + r2), T2 && (r2 = d2 + r2), e2 === Ls) return [r2, n];
      if (!n) return d1(t);
      var Q2 = i.nocase ? "i" : "";
      try {
        var Y2 = new RegExp("^" + r2 + "$", Q2);
      } catch {
        return new RegExp("$.");
      }
      return Y2._glob = t, Y2._src = r2, Y2;
    }
    wt.makeRe = function(t, e2) {
      return new Xe(t, e2 || {}).makeRe();
    };
    Xe.prototype.makeRe = p1;
    function p1() {
      if (this.regexp || this.regexp === false) return this.regexp;
      var t = this.set;
      if (!t.length) return this.regexp = false, this.regexp;
      var e2 = this.options, i = e2.noglobstar ? Ja : e2.dot ? s1 : o1, r2 = e2.nocase ? "i" : "", n = t.map(function(s2) {
        return s2.map(function(o2) {
          return o2 === Za ? i : typeof o2 == "string" ? m1(o2) : o2._src;
        }).join("\\/");
      }).join("|");
      n = "^(?:" + n + ")$", this.negate && (n = "^(?!" + n + ").*$");
      try {
        this.regexp = new RegExp(n, r2);
      } catch {
        this.regexp = false;
      }
      return this.regexp;
    }
    wt.match = function(t, e2, i) {
      i = i || {};
      var r2 = new Xe(e2, i);
      return t = t.filter(function(n) {
        return r2.match(n);
      }), r2.options.nonull && !t.length && t.push(e2), t;
    };
    Xe.prototype.match = function(e2, i) {
      if (typeof i == "undefined" && (i = this.partial), this.debug("match", e2, this.pattern), this.comment) return false;
      if (this.empty) return e2 === "";
      if (e2 === "/" && i) return true;
      var r2 = this.options;
      an.sep !== "/" && (e2 = e2.split(an.sep).join("/")), e2 = e2.split(Tp), this.debug(this.pattern, "split", e2);
      var n = this.set;
      this.debug(this.pattern, "set", n);
      var s2, o2;
      for (o2 = e2.length - 1; o2 >= 0 && (s2 = e2[o2], !s2); o2--) ;
      for (o2 = 0; o2 < n.length; o2++) {
        var a = n[o2], l = e2;
        r2.matchBase && a.length === 1 && (l = [s2]);
        var c2 = this.matchOne(l, a, i);
        if (c2) return r2.flipNegate ? true : !this.negate;
      }
      return r2.flipNegate ? false : this.negate;
    };
    Xe.prototype.matchOne = function(t, e2, i) {
      var r2 = this.options;
      this.debug("matchOne", { this: this, file: t, pattern: e2 }), this.debug("matchOne", t.length, e2.length);
      for (var n = 0, s2 = 0, o2 = t.length, a = e2.length; n < o2 && s2 < a; n++, s2++) {
        this.debug("matchOne loop");
        var l = e2[s2], c2 = t[n];
        if (this.debug(e2, l, c2), l === false) return false;
        if (l === Za) {
          this.debug("GLOBSTAR", [e2, l, c2]);
          var u2 = n, f2 = s2 + 1;
          if (f2 === a) {
            for (this.debug("** at the end"); n < o2; n++) if (t[n] === "." || t[n] === ".." || !r2.dot && t[n].charAt(0) === ".") return false;
            return true;
          }
          for (; u2 < o2; ) {
            var d2 = t[u2];
            if (this.debug(`
globstar while`, t, u2, e2, f2, d2), this.matchOne(t.slice(u2), e2.slice(f2), i)) return this.debug("globstar found match!", u2, o2, d2), true;
            if (d2 === "." || d2 === ".." || !r2.dot && d2.charAt(0) === ".") {
              this.debug("dot detected!", t, u2, e2, f2);
              break;
            }
            this.debug("globstar swallow a segment, and continue"), u2++;
          }
          return !!(i && (this.debug(`
>>> no match, partial?`, t, u2, e2, f2), u2 === o2));
        }
        var g2;
        if (typeof l == "string" ? (g2 = c2 === l, this.debug("string match", l, c2, g2)) : (g2 = c2.match(l), this.debug("pattern match", l, c2, g2)), !g2) return false;
      }
      if (n === o2 && s2 === a) return true;
      if (n === o2) return i;
      if (s2 === a) return n === o2 - 1 && t[n] === "";
      throw new Error("wtf?");
    };
    function d1(t) {
      return t.replace(/\\(.)/g, "$1");
    }
    function m1(t) {
      return t.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    }
  });
  var Xa = _2((JI, Bp) => {
    var Lp = require$$0$2, Qa;
    function g1() {
      try {
        return Lp.statSync("/.dockerenv"), true;
      } catch {
        return false;
      }
    }
    function v1() {
      try {
        return Lp.readFileSync("/proc/self/cgroup", "utf8").includes("docker");
      } catch {
        return false;
      }
    }
    Bp.exports = () => (Qa === void 0 && (Qa = g1() || v1()), Qa);
  });
  var Mp = _2((ZI, el) => {
    var y1 = require$$1$3, b1 = require$$0$2, Rp = Xa(), Pp = () => {
      if (process.platform !== "linux") return false;
      if (y1.release().toLowerCase().includes("microsoft")) return !Rp();
      try {
        return b1.readFileSync("/proc/version", "utf8").toLowerCase().includes("microsoft") ? !Rp() : false;
      } catch {
        return false;
      }
    };
    process.env.__IS_WSL_TEST__ ? el.exports = Pp : el.exports = Pp();
  });
  var qp = _2((QI, Fp) => {
    Fp.exports = (t, e2, i) => {
      let r2 = (n) => Object.defineProperty(t, e2, { value: n, enumerable: true, writable: true });
      return Object.defineProperty(t, e2, { configurable: true, enumerable: true, get() {
        let n = i();
        return r2(n), n;
      }, set(n) {
        r2(n);
      } }), t;
    };
  });
  var Gp = _2((XI, Hp) => {
    var _1 = require$$1$1, w1 = require$$0$3, { promises: tl, constants: Vp } = require$$0$2, Rs = Mp(), x1 = Xa(), il = qp(), Dp = _1.join(new URL(".", import.meta.url).pathname, "xdg-open"), { platform: Sr, arch: jp } = process, S1 = /* @__PURE__ */ (() => {
      let t = "/mnt/", e2;
      return async function() {
        if (e2) return e2;
        let i = "/etc/wsl.conf", r2 = false;
        try {
          await tl.access(i, Vp.F_OK), r2 = true;
        } catch {
        }
        if (!r2) return t;
        let n = await tl.readFile(i, { encoding: "utf8" }), s2 = /(?<!#.*)root\s*=\s*(?<mountPoint>.*)/g.exec(n);
        return s2 ? (e2 = s2.groups.mountPoint.trim(), e2 = e2.endsWith("/") ? e2 : `${e2}/`, e2) : t;
      };
    })(), Up = async (t, e2) => {
      let i;
      for (let r2 of t) try {
        return await e2(r2);
      } catch (n) {
        i = n;
      }
      throw i;
    }, Ps = async (t) => {
      if (t = { wait: false, background: false, newInstance: false, allowNonzeroExitCode: false, ...t }, Array.isArray(t.app)) return Up(t.app, (a) => Ps({ ...t, app: a }));
      let { name: e2, arguments: i = [] } = t.app || {};
      if (i = [...i], Array.isArray(e2)) return Up(e2, (a) => Ps({ ...t, app: { name: a, arguments: i } }));
      let r2, n = [], s2 = {};
      if (Sr === "darwin") r2 = "open", t.wait && n.push("--wait-apps"), t.background && n.push("--background"), t.newInstance && n.push("--new"), e2 && n.push("-a", e2);
      else if (Sr === "win32" || Rs && !x1()) {
        let a = await S1();
        r2 = Rs ? `${a}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe` : `${process.env.SYSTEMROOT}\\System32\\WindowsPowerShell\\v1.0\\powershell`, n.push("-NoProfile", "-NonInteractive", "–ExecutionPolicy", "Bypass", "-EncodedCommand"), Rs || (s2.windowsVerbatimArguments = true);
        let l = ["Start"];
        t.wait && l.push("-Wait"), e2 ? (l.push(`"\`"${e2}\`""`, "-ArgumentList"), t.target && i.unshift(t.target)) : t.target && l.push(`"${t.target}"`), i.length > 0 && (i = i.map((c2) => `"\`"${c2}\`""`), l.push(i.join(","))), t.target = Buffer.from(l.join(" "), "utf16le").toString("base64");
      } else {
        if (e2) r2 = e2;
        else {
          let a = !new URL(".", import.meta.url).pathname || new URL(".", import.meta.url).pathname === "/", l = false;
          try {
            await tl.access(Dp, Vp.X_OK), l = true;
          } catch {
          }
          r2 = process.versions.electron || Sr === "android" || a || !l ? "xdg-open" : Dp;
        }
        i.length > 0 && n.push(...i), t.wait || (s2.stdio = "ignore", s2.detached = true);
      }
      t.target && n.push(t.target), Sr === "darwin" && i.length > 0 && n.push("--args", ...i);
      let o2 = w1.spawn(r2, n, s2);
      return t.wait ? new Promise((a, l) => {
        o2.once("error", l), o2.once("close", (c2) => {
          if (t.allowNonzeroExitCode && c2 > 0) {
            l(new Error(`Exited with code ${c2}`));
            return;
          }
          a(o2);
        });
      }) : (o2.unref(), o2);
    }, rl = (t, e2) => {
      if (typeof t != "string") throw new TypeError("Expected a `target`");
      return Ps({ ...e2, target: t });
    }, E1 = (t, e2) => {
      if (typeof t != "string") throw new TypeError("Expected a `name`");
      let { arguments: i = [] } = e2 || {};
      if (i != null && !Array.isArray(i)) throw new TypeError("Expected `appArguments` as Array type");
      return Ps({ ...e2, app: { name: t, arguments: i } });
    };
    function $p(t) {
      if (typeof t == "string" || Array.isArray(t)) return t;
      let { [jp]: e2 } = t;
      if (!e2) throw new Error(`${jp} is not supported`);
      return e2;
    }
    function nl({ [Sr]: t }, { wsl: e2 }) {
      if (e2 && Rs) return $p(e2);
      if (!t) throw new Error(`${Sr} is not supported`);
      return $p(t);
    }
    var Ms = {};
    il(Ms, "chrome", () => nl({ darwin: "google chrome", win32: "chrome", linux: ["google-chrome", "google-chrome-stable", "chromium"] }, { wsl: { ia32: "/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe", x64: ["/mnt/c/Program Files/Google/Chrome/Application/chrome.exe", "/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe"] } }));
    il(Ms, "firefox", () => nl({ darwin: "firefox", win32: "C:\\Program Files\\Mozilla Firefox\\firefox.exe", linux: "firefox" }, { wsl: "/mnt/c/Program Files/Mozilla Firefox/firefox.exe" }));
    il(Ms, "edge", () => nl({ darwin: "microsoft edge", win32: "msedge", linux: ["microsoft-edge", "microsoft-edge-dev"] }, { wsl: "/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe" }));
    rl.apps = Ms;
    rl.openApp = E1;
    Hp.exports = rl;
  });
  var sl = _2((e2, Wp) => {
    var k1 = require$$1$2, Yp = require$$12, Ft = Wp.exports = function() {
      Yp.call(this), this._buffers = [], this._buffered = 0, this._reads = [], this._paused = false, this._encoding = "utf8", this.writable = true;
    };
    k1.inherits(Ft, Yp);
    Ft.prototype.read = function(t, e3) {
      this._reads.push({ length: Math.abs(t), allowLess: t < 0, func: e3 }), process.nextTick(function() {
        this._process(), this._paused && this._reads && this._reads.length > 0 && (this._paused = false, this.emit("drain"));
      }.bind(this));
    };
    Ft.prototype.write = function(t, e3) {
      if (!this.writable) return this.emit("error", new Error("Stream not writable")), false;
      let i;
      return Buffer.isBuffer(t) ? i = t : i = Buffer.from(t, e3 || this._encoding), this._buffers.push(i), this._buffered += i.length, this._process(), this._reads && this._reads.length === 0 && (this._paused = true), this.writable && !this._paused;
    };
    Ft.prototype.end = function(t, e3) {
      t && this.write(t, e3), this.writable = false, this._buffers && (this._buffers.length === 0 ? this._end() : (this._buffers.push(null), this._process()));
    };
    Ft.prototype.destroySoon = Ft.prototype.end;
    Ft.prototype._end = function() {
      this._reads.length > 0 && this.emit("error", new Error("Unexpected end of input")), this.destroy();
    };
    Ft.prototype.destroy = function() {
      this._buffers && (this.writable = false, this._reads = null, this._buffers = null, this.emit("close"));
    };
    Ft.prototype._processReadAllowingLess = function(t) {
      this._reads.shift();
      let e3 = this._buffers[0];
      e3.length > t.length ? (this._buffered -= t.length, this._buffers[0] = e3.slice(t.length), t.func.call(this, e3.slice(0, t.length))) : (this._buffered -= e3.length, this._buffers.shift(), t.func.call(this, e3));
    };
    Ft.prototype._processRead = function(t) {
      this._reads.shift();
      let e3 = 0, i = 0, r2 = Buffer.alloc(t.length);
      for (; e3 < t.length; ) {
        let n = this._buffers[i++], s2 = Math.min(n.length, t.length - e3);
        n.copy(r2, e3, 0, s2), e3 += s2, s2 !== n.length && (this._buffers[--i] = n.slice(s2));
      }
      i > 0 && this._buffers.splice(0, i), this._buffered -= t.length, t.func.call(this, r2);
    };
    Ft.prototype._process = function() {
      try {
        for (; this._buffered > 0 && this._reads && this._reads.length > 0; ) {
          let t = this._reads[0];
          if (t.allowLess) this._processReadAllowingLess(t);
          else if (this._buffered >= t.length) this._processRead(t);
          else break;
        }
        this._buffers && !this.writable && this._end();
      } catch (t) {
        this.emit("error", t);
      }
    };
  });
  var al = _2((ol) => {
    var di = [{ x: [0], y: [0] }, { x: [4], y: [0] }, { x: [0, 4], y: [4] }, { x: [2, 6], y: [0, 4] }, { x: [0, 2, 4, 6], y: [2, 6] }, { x: [1, 3, 5, 7], y: [0, 2, 4, 6] }, { x: [0, 1, 2, 3, 4, 5, 6, 7], y: [1, 3, 5, 7] }];
    ol.getImagePasses = function(t, e2) {
      let i = [], r2 = t % 8, n = e2 % 8, s2 = (t - r2) / 8, o2 = (e2 - n) / 8;
      for (let a = 0; a < di.length; a++) {
        let l = di[a], c2 = s2 * l.x.length, u2 = o2 * l.y.length;
        for (let f2 = 0; f2 < l.x.length && l.x[f2] < r2; f2++) c2++;
        for (let f2 = 0; f2 < l.y.length && l.y[f2] < n; f2++) u2++;
        c2 > 0 && u2 > 0 && i.push({ width: c2, height: u2, index: a });
      }
      return i;
    };
    ol.getInterlaceIterator = function(t) {
      return function(e2, i, r2) {
        let n = e2 % di[r2].x.length, s2 = (e2 - n) / di[r2].x.length * 8 + di[r2].x[n], o2 = i % di[r2].y.length, a = (i - o2) / di[r2].y.length * 8 + di[r2].y[o2];
        return s2 * 4 + a * t * 4;
      };
    };
  });
  var ll = _2((i2, Kp) => {
    Kp.exports = function(e2, i, r2) {
      let n = e2 + i - r2, s2 = Math.abs(n - e2), o2 = Math.abs(n - i), a = Math.abs(n - r2);
      return s2 <= o2 && s2 <= a ? e2 : o2 <= a ? i : r2;
    };
  });
  var cl = _2((r2, Jp) => {
    var O1 = al(), C1 = ll();
    function zp(t, e2, i) {
      let r3 = t * e2;
      return i !== 8 && (r3 = Math.ceil(r3 / (8 / i))), r3;
    }
    var Er = Jp.exports = function(t, e2) {
      let i = t.width, r3 = t.height, n = t.interlace, s2 = t.bpp, o2 = t.depth;
      if (this.read = e2.read, this.write = e2.write, this.complete = e2.complete, this._imageIndex = 0, this._images = [], n) {
        let a = O1.getImagePasses(i, r3);
        for (let l = 0; l < a.length; l++) this._images.push({ byteWidth: zp(a[l].width, s2, o2), height: a[l].height, lineIndex: 0 });
      } else this._images.push({ byteWidth: zp(i, s2, o2), height: r3, lineIndex: 0 });
      o2 === 8 ? this._xComparison = s2 : o2 === 16 ? this._xComparison = s2 * 2 : this._xComparison = 1;
    };
    Er.prototype.start = function() {
      this.read(this._images[this._imageIndex].byteWidth + 1, this._reverseFilterLine.bind(this));
    };
    Er.prototype._unFilterType1 = function(t, e2, i) {
      let r3 = this._xComparison, n = r3 - 1;
      for (let s2 = 0; s2 < i; s2++) {
        let o2 = t[1 + s2], a = s2 > n ? e2[s2 - r3] : 0;
        e2[s2] = o2 + a;
      }
    };
    Er.prototype._unFilterType2 = function(t, e2, i) {
      let r3 = this._lastLine;
      for (let n = 0; n < i; n++) {
        let s2 = t[1 + n], o2 = r3 ? r3[n] : 0;
        e2[n] = s2 + o2;
      }
    };
    Er.prototype._unFilterType3 = function(t, e2, i) {
      let r3 = this._xComparison, n = r3 - 1, s2 = this._lastLine;
      for (let o2 = 0; o2 < i; o2++) {
        let a = t[1 + o2], l = s2 ? s2[o2] : 0, c2 = o2 > n ? e2[o2 - r3] : 0, u2 = Math.floor((c2 + l) / 2);
        e2[o2] = a + u2;
      }
    };
    Er.prototype._unFilterType4 = function(t, e2, i) {
      let r3 = this._xComparison, n = r3 - 1, s2 = this._lastLine;
      for (let o2 = 0; o2 < i; o2++) {
        let a = t[1 + o2], l = s2 ? s2[o2] : 0, c2 = o2 > n ? e2[o2 - r3] : 0, u2 = o2 > n && s2 ? s2[o2 - r3] : 0, f2 = C1(c2, l, u2);
        e2[o2] = a + f2;
      }
    };
    Er.prototype._reverseFilterLine = function(t) {
      let e2 = t[0], i, r3 = this._images[this._imageIndex], n = r3.byteWidth;
      if (e2 === 0) i = t.slice(1, n + 1);
      else switch (i = Buffer.alloc(n), e2) {
        case 1:
          this._unFilterType1(t, i, n);
          break;
        case 2:
          this._unFilterType2(t, i, n);
          break;
        case 3:
          this._unFilterType3(t, i, n);
          break;
        case 4:
          this._unFilterType4(t, i, n);
          break;
        default:
          throw new Error("Unrecognised filter type - " + e2);
      }
      this.write(i), r3.lineIndex++, r3.lineIndex >= r3.height ? (this._lastLine = null, this._imageIndex++, r3 = this._images[this._imageIndex]) : this._lastLine = i, r3 ? this.read(r3.byteWidth + 1, this._reverseFilterLine.bind(this)) : (this._lastLine = null, this.complete());
    };
  });
  var Xp = _2((n2, Qp) => {
    var T1 = require$$1$2, Zp = sl(), A1 = cl(), I1 = Qp.exports = function(t) {
      Zp.call(this);
      let e2 = [], i = this;
      this._filter = new A1(t, { read: this.read.bind(this), write: function(r2) {
        e2.push(r2);
      }, complete: function() {
        i.emit("complete", Buffer.concat(e2));
      } }), this._filter.start();
    };
    T1.inherits(I1, Zp);
  });
  var kr = _2((s2, ed) => {
    ed.exports = { PNG_SIGNATURE: [137, 80, 78, 71, 13, 10, 26, 10], TYPE_IHDR: 1229472850, TYPE_IEND: 1229278788, TYPE_IDAT: 1229209940, TYPE_PLTE: 1347179589, TYPE_tRNS: 1951551059, TYPE_gAMA: 1732332865, COLORTYPE_GRAYSCALE: 0, COLORTYPE_PALETTE: 1, COLORTYPE_COLOR: 2, COLORTYPE_ALPHA: 4, COLORTYPE_PALETTE_COLOR: 3, COLORTYPE_COLOR_ALPHA: 6, COLORTYPE_TO_BPP_MAP: { 0: 1, 2: 3, 3: 1, 4: 2, 6: 4 }, GAMMA_DIVISION: 1e5 };
  });
  var hl = _2((o2, td) => {
    var ul = [];
    (function() {
      for (let t = 0; t < 256; t++) {
        let e2 = t;
        for (let i = 0; i < 8; i++) e2 & 1 ? e2 = 3988292384 ^ e2 >>> 1 : e2 = e2 >>> 1;
        ul[t] = e2;
      }
    })();
    var fl = td.exports = function() {
      this._crc = -1;
    };
    fl.prototype.write = function(t) {
      for (let e2 = 0; e2 < t.length; e2++) this._crc = ul[(this._crc ^ t[e2]) & 255] ^ this._crc >>> 8;
      return true;
    };
    fl.prototype.crc32 = function() {
      return this._crc ^ -1;
    };
    fl.crc32 = function(t) {
      let e2 = -1;
      for (let i = 0; i < t.length; i++) e2 = ul[(e2 ^ t[i]) & 255] ^ e2 >>> 8;
      return e2 ^ -1;
    };
  });
  var pl = _2((a2, id) => {
    var Ve = kr(), N1 = hl(), Ke = id.exports = function(t, e2) {
      this._options = t, t.checkCRC = t.checkCRC !== false, this._hasIHDR = false, this._hasIEND = false, this._emittedHeadersFinished = false, this._palette = [], this._colorType = 0, this._chunks = {}, this._chunks[Ve.TYPE_IHDR] = this._handleIHDR.bind(this), this._chunks[Ve.TYPE_IEND] = this._handleIEND.bind(this), this._chunks[Ve.TYPE_IDAT] = this._handleIDAT.bind(this), this._chunks[Ve.TYPE_PLTE] = this._handlePLTE.bind(this), this._chunks[Ve.TYPE_tRNS] = this._handleTRNS.bind(this), this._chunks[Ve.TYPE_gAMA] = this._handleGAMA.bind(this), this.read = e2.read, this.error = e2.error, this.metadata = e2.metadata, this.gamma = e2.gamma, this.transColor = e2.transColor, this.palette = e2.palette, this.parsed = e2.parsed, this.inflateData = e2.inflateData, this.finished = e2.finished, this.simpleTransparency = e2.simpleTransparency, this.headersFinished = e2.headersFinished || function() {
      };
    };
    Ke.prototype.start = function() {
      this.read(Ve.PNG_SIGNATURE.length, this._parseSignature.bind(this));
    };
    Ke.prototype._parseSignature = function(t) {
      let e2 = Ve.PNG_SIGNATURE;
      for (let i = 0; i < e2.length; i++) if (t[i] !== e2[i]) {
        this.error(new Error("Invalid file signature"));
        return;
      }
      this.read(8, this._parseChunkBegin.bind(this));
    };
    Ke.prototype._parseChunkBegin = function(t) {
      let e2 = t.readUInt32BE(0), i = t.readUInt32BE(4), r2 = "";
      for (let s2 = 4; s2 < 8; s2++) r2 += String.fromCharCode(t[s2]);
      let n = !!(t[4] & 32);
      if (!this._hasIHDR && i !== Ve.TYPE_IHDR) {
        this.error(new Error("Expected IHDR on beggining"));
        return;
      }
      if (this._crc = new N1(), this._crc.write(Buffer.from(r2)), this._chunks[i]) return this._chunks[i](e2);
      if (!n) {
        this.error(new Error("Unsupported critical chunk type " + r2));
        return;
      }
      this.read(e2 + 4, this._skipChunk.bind(this));
    };
    Ke.prototype._skipChunk = function() {
      this.read(8, this._parseChunkBegin.bind(this));
    };
    Ke.prototype._handleChunkEnd = function() {
      this.read(4, this._parseChunkEnd.bind(this));
    };
    Ke.prototype._parseChunkEnd = function(t) {
      let e2 = t.readInt32BE(0), i = this._crc.crc32();
      if (this._options.checkCRC && i !== e2) {
        this.error(new Error("Crc error - " + e2 + " - " + i));
        return;
      }
      this._hasIEND || this.read(8, this._parseChunkBegin.bind(this));
    };
    Ke.prototype._handleIHDR = function(t) {
      this.read(t, this._parseIHDR.bind(this));
    };
    Ke.prototype._parseIHDR = function(t) {
      this._crc.write(t);
      let e2 = t.readUInt32BE(0), i = t.readUInt32BE(4), r2 = t[8], n = t[9], s2 = t[10], o2 = t[11], a = t[12];
      if (r2 !== 8 && r2 !== 4 && r2 !== 2 && r2 !== 1 && r2 !== 16) {
        this.error(new Error("Unsupported bit depth " + r2));
        return;
      }
      if (!(n in Ve.COLORTYPE_TO_BPP_MAP)) {
        this.error(new Error("Unsupported color type"));
        return;
      }
      if (s2 !== 0) {
        this.error(new Error("Unsupported compression method"));
        return;
      }
      if (o2 !== 0) {
        this.error(new Error("Unsupported filter method"));
        return;
      }
      if (a !== 0 && a !== 1) {
        this.error(new Error("Unsupported interlace method"));
        return;
      }
      this._colorType = n;
      let l = Ve.COLORTYPE_TO_BPP_MAP[this._colorType];
      this._hasIHDR = true, this.metadata({ width: e2, height: i, depth: r2, interlace: !!a, palette: !!(n & Ve.COLORTYPE_PALETTE), color: !!(n & Ve.COLORTYPE_COLOR), alpha: !!(n & Ve.COLORTYPE_ALPHA), bpp: l, colorType: n }), this._handleChunkEnd();
    };
    Ke.prototype._handlePLTE = function(t) {
      this.read(t, this._parsePLTE.bind(this));
    };
    Ke.prototype._parsePLTE = function(t) {
      this._crc.write(t);
      let e2 = Math.floor(t.length / 3);
      for (let i = 0; i < e2; i++) this._palette.push([t[i * 3], t[i * 3 + 1], t[i * 3 + 2], 255]);
      this.palette(this._palette), this._handleChunkEnd();
    };
    Ke.prototype._handleTRNS = function(t) {
      this.simpleTransparency(), this.read(t, this._parseTRNS.bind(this));
    };
    Ke.prototype._parseTRNS = function(t) {
      if (this._crc.write(t), this._colorType === Ve.COLORTYPE_PALETTE_COLOR) {
        if (this._palette.length === 0) {
          this.error(new Error("Transparency chunk must be after palette"));
          return;
        }
        if (t.length > this._palette.length) {
          this.error(new Error("More transparent colors than palette size"));
          return;
        }
        for (let e2 = 0; e2 < t.length; e2++) this._palette[e2][3] = t[e2];
        this.palette(this._palette);
      }
      this._colorType === Ve.COLORTYPE_GRAYSCALE && this.transColor([t.readUInt16BE(0)]), this._colorType === Ve.COLORTYPE_COLOR && this.transColor([t.readUInt16BE(0), t.readUInt16BE(2), t.readUInt16BE(4)]), this._handleChunkEnd();
    };
    Ke.prototype._handleGAMA = function(t) {
      this.read(t, this._parseGAMA.bind(this));
    };
    Ke.prototype._parseGAMA = function(t) {
      this._crc.write(t), this.gamma(t.readUInt32BE(0) / Ve.GAMMA_DIVISION), this._handleChunkEnd();
    };
    Ke.prototype._handleIDAT = function(t) {
      this._emittedHeadersFinished || (this._emittedHeadersFinished = true, this.headersFinished()), this.read(-t, this._parseIDAT.bind(this, t));
    };
    Ke.prototype._parseIDAT = function(t, e2) {
      if (this._crc.write(e2), this._colorType === Ve.COLORTYPE_PALETTE_COLOR && this._palette.length === 0) throw new Error("Expected palette not found");
      this.inflateData(e2);
      let i = t - e2.length;
      i > 0 ? this._handleIDAT(i) : this._handleChunkEnd();
    };
    Ke.prototype._handleIEND = function(t) {
      this.read(t, this._parseIEND.bind(this));
    };
    Ke.prototype._parseIEND = function(t) {
      this._crc.write(t), this._hasIEND = true, this._handleChunkEnd(), this.finished && this.finished();
    };
  });
  var dl = _2((nd) => {
    var rd = al(), L1 = [function() {
    }, function(t, e2, i, r2) {
      if (r2 === e2.length) throw new Error("Ran out of data");
      let n = e2[r2];
      t[i] = n, t[i + 1] = n, t[i + 2] = n, t[i + 3] = 255;
    }, function(t, e2, i, r2) {
      if (r2 + 1 >= e2.length) throw new Error("Ran out of data");
      let n = e2[r2];
      t[i] = n, t[i + 1] = n, t[i + 2] = n, t[i + 3] = e2[r2 + 1];
    }, function(t, e2, i, r2) {
      if (r2 + 2 >= e2.length) throw new Error("Ran out of data");
      t[i] = e2[r2], t[i + 1] = e2[r2 + 1], t[i + 2] = e2[r2 + 2], t[i + 3] = 255;
    }, function(t, e2, i, r2) {
      if (r2 + 3 >= e2.length) throw new Error("Ran out of data");
      t[i] = e2[r2], t[i + 1] = e2[r2 + 1], t[i + 2] = e2[r2 + 2], t[i + 3] = e2[r2 + 3];
    }], B1 = [function() {
    }, function(t, e2, i, r2) {
      let n = e2[0];
      t[i] = n, t[i + 1] = n, t[i + 2] = n, t[i + 3] = r2;
    }, function(t, e2, i) {
      let r2 = e2[0];
      t[i] = r2, t[i + 1] = r2, t[i + 2] = r2, t[i + 3] = e2[1];
    }, function(t, e2, i, r2) {
      t[i] = e2[0], t[i + 1] = e2[1], t[i + 2] = e2[2], t[i + 3] = r2;
    }, function(t, e2, i) {
      t[i] = e2[0], t[i + 1] = e2[1], t[i + 2] = e2[2], t[i + 3] = e2[3];
    }];
    function R1(t, e2) {
      let i = [], r2 = 0;
      function n() {
        if (r2 === t.length) throw new Error("Ran out of data");
        let s2 = t[r2];
        r2++;
        let o2, a, l, c2, u2, f2, d2, g2;
        switch (e2) {
          default:
            throw new Error("unrecognised depth");
          case 16:
            d2 = t[r2], r2++, i.push((s2 << 8) + d2);
            break;
          case 4:
            d2 = s2 & 15, g2 = s2 >> 4, i.push(g2, d2);
            break;
          case 2:
            u2 = s2 & 3, f2 = s2 >> 2 & 3, d2 = s2 >> 4 & 3, g2 = s2 >> 6 & 3, i.push(g2, d2, f2, u2);
            break;
          case 1:
            o2 = s2 & 1, a = s2 >> 1 & 1, l = s2 >> 2 & 1, c2 = s2 >> 3 & 1, u2 = s2 >> 4 & 1, f2 = s2 >> 5 & 1, d2 = s2 >> 6 & 1, g2 = s2 >> 7 & 1, i.push(g2, d2, f2, u2, c2, l, a, o2);
            break;
        }
      }
      return { get: function(s2) {
        for (; i.length < s2; ) n();
        let o2 = i.slice(0, s2);
        return i = i.slice(s2), o2;
      }, resetAfterLine: function() {
        i.length = 0;
      }, end: function() {
        if (r2 !== t.length) throw new Error("extra data found");
      } };
    }
    function P1(t, e2, i, r2, n, s2) {
      let o2 = t.width, a = t.height, l = t.index;
      for (let c2 = 0; c2 < a; c2++) for (let u2 = 0; u2 < o2; u2++) {
        let f2 = i(u2, c2, l);
        L1[r2](e2, n, f2, s2), s2 += r2;
      }
      return s2;
    }
    function M1(t, e2, i, r2, n, s2) {
      let o2 = t.width, a = t.height, l = t.index;
      for (let c2 = 0; c2 < a; c2++) {
        for (let u2 = 0; u2 < o2; u2++) {
          let f2 = n.get(r2), d2 = i(u2, c2, l);
          B1[r2](e2, f2, d2, s2);
        }
        n.resetAfterLine();
      }
    }
    nd.dataToBitMap = function(t, e2) {
      let i = e2.width, r2 = e2.height, n = e2.depth, s2 = e2.bpp, o2 = e2.interlace, a;
      n !== 8 && (a = R1(t, n));
      let l;
      n <= 8 ? l = Buffer.alloc(i * r2 * 4) : l = new Uint16Array(i * r2 * 4);
      let c2 = Math.pow(2, n) - 1, u2 = 0, f2, d2;
      if (o2) f2 = rd.getImagePasses(i, r2), d2 = rd.getInterlaceIterator(i, r2);
      else {
        let g2 = 0;
        d2 = function() {
          let m2 = g2;
          return g2 += 4, m2;
        }, f2 = [{ width: i, height: r2 }];
      }
      for (let g2 = 0; g2 < f2.length; g2++) n === 8 ? u2 = P1(f2[g2], l, d2, s2, t, u2) : M1(f2[g2], l, d2, s2, a, c2);
      if (n === 8) {
        if (u2 !== t.length) throw new Error("extra data found");
      } else a.end();
      return l;
    };
  });
  var ml = _2((c2, sd) => {
    function F1(t, e2, i, r2, n) {
      let s2 = 0;
      for (let o2 = 0; o2 < r2; o2++) for (let a = 0; a < i; a++) {
        let l = n[t[s2]];
        if (!l) throw new Error("index " + t[s2] + " not in palette");
        for (let c3 = 0; c3 < 4; c3++) e2[s2 + c3] = l[c3];
        s2 += 4;
      }
    }
    function q1(t, e2, i, r2, n) {
      let s2 = 0;
      for (let o2 = 0; o2 < r2; o2++) for (let a = 0; a < i; a++) {
        let l = false;
        if (n.length === 1 ? n[0] === t[s2] && (l = true) : n[0] === t[s2] && n[1] === t[s2 + 1] && n[2] === t[s2 + 2] && (l = true), l) for (let c3 = 0; c3 < 4; c3++) e2[s2 + c3] = 0;
        s2 += 4;
      }
    }
    function D1(t, e2, i, r2, n) {
      let s2 = 255, o2 = Math.pow(2, n) - 1, a = 0;
      for (let l = 0; l < r2; l++) for (let c3 = 0; c3 < i; c3++) {
        for (let u2 = 0; u2 < 4; u2++) e2[a + u2] = Math.floor(t[a + u2] * s2 / o2 + 0.5);
        a += 4;
      }
    }
    sd.exports = function(t, e2, i = false) {
      let r2 = e2.depth, n = e2.width, s2 = e2.height, o2 = e2.colorType, a = e2.transColor, l = e2.palette, c3 = t;
      return o2 === 3 ? F1(t, c3, n, s2, l) : (a && q1(t, c3, n, s2, a), r2 !== 8 && !i && (r2 === 16 && (c3 = Buffer.alloc(n * s2 * 4)), D1(t, c3, n, s2, r2))), c3;
    };
  });
  var ld = _2((u2, ad) => {
    var j1 = require$$1$2, gl = require$$13, od = sl(), U1 = Xp(), $1 = pl(), V1 = dl(), H1 = ml(), Vt = ad.exports = function(t) {
      od.call(this), this._parser = new $1(t, { read: this.read.bind(this), error: this._handleError.bind(this), metadata: this._handleMetaData.bind(this), gamma: this.emit.bind(this, "gamma"), palette: this._handlePalette.bind(this), transColor: this._handleTransColor.bind(this), finished: this._finished.bind(this), inflateData: this._inflateData.bind(this), simpleTransparency: this._simpleTransparency.bind(this), headersFinished: this._headersFinished.bind(this) }), this._options = t, this.writable = true, this._parser.start();
    };
    j1.inherits(Vt, od);
    Vt.prototype._handleError = function(t) {
      this.emit("error", t), this.writable = false, this.destroy(), this._inflate && this._inflate.destroy && this._inflate.destroy(), this._filter && (this._filter.destroy(), this._filter.on("error", function() {
      })), this.errord = true;
    };
    Vt.prototype._inflateData = function(t) {
      if (!this._inflate) if (this._bitmapInfo.interlace) this._inflate = gl.createInflate(), this._inflate.on("error", this.emit.bind(this, "error")), this._filter.on("complete", this._complete.bind(this)), this._inflate.pipe(this._filter);
      else {
        let i = ((this._bitmapInfo.width * this._bitmapInfo.bpp * this._bitmapInfo.depth + 7 >> 3) + 1) * this._bitmapInfo.height, r2 = Math.max(i, gl.Z_MIN_CHUNK);
        this._inflate = gl.createInflate({ chunkSize: r2 });
        let n = i, s2 = this.emit.bind(this, "error");
        this._inflate.on("error", function(a) {
          n && s2(a);
        }), this._filter.on("complete", this._complete.bind(this));
        let o2 = this._filter.write.bind(this._filter);
        this._inflate.on("data", function(a) {
          n && (a.length > n && (a = a.slice(0, n)), n -= a.length, o2(a));
        }), this._inflate.on("end", this._filter.end.bind(this._filter));
      }
      this._inflate.write(t);
    };
    Vt.prototype._handleMetaData = function(t) {
      this._metaData = t, this._bitmapInfo = Object.create(t), this._filter = new U1(this._bitmapInfo);
    };
    Vt.prototype._handleTransColor = function(t) {
      this._bitmapInfo.transColor = t;
    };
    Vt.prototype._handlePalette = function(t) {
      this._bitmapInfo.palette = t;
    };
    Vt.prototype._simpleTransparency = function() {
      this._metaData.alpha = true;
    };
    Vt.prototype._headersFinished = function() {
      this.emit("metadata", this._metaData);
    };
    Vt.prototype._finished = function() {
      this.errord || (this._inflate ? this._inflate.end() : this.emit("error", "No Inflate block"));
    };
    Vt.prototype._complete = function(t) {
      if (this.errord) return;
      let e2;
      try {
        let i = V1.dataToBitMap(t, this._bitmapInfo);
        e2 = H1(i, this._bitmapInfo, this._options.skipRescale), i = null;
      } catch (i) {
        this._handleError(i);
        return;
      }
      this.emit("parsed", e2);
    };
  });
  var ud = _2((f2, cd) => {
    var Tt = kr();
    cd.exports = function(t, e2, i, r2) {
      let n = [Tt.COLORTYPE_COLOR_ALPHA, Tt.COLORTYPE_ALPHA].indexOf(r2.colorType) !== -1;
      if (r2.colorType === r2.inputColorType) {
        let m2 = function() {
          let y2 = new ArrayBuffer(2);
          return new DataView(y2).setInt16(0, 256, true), new Int16Array(y2)[0] !== 256;
        }();
        if (r2.bitDepth === 8 || r2.bitDepth === 16 && m2) return t;
      }
      let s2 = r2.bitDepth !== 16 ? t : new Uint16Array(t.buffer), o2 = 255, a = Tt.COLORTYPE_TO_BPP_MAP[r2.inputColorType];
      a === 4 && !r2.inputHasAlpha && (a = 3);
      let l = Tt.COLORTYPE_TO_BPP_MAP[r2.colorType];
      r2.bitDepth === 16 && (o2 = 65535, l *= 2);
      let c2 = Buffer.alloc(e2 * i * l), u2 = 0, f3 = 0, d2 = r2.bgColor || {};
      d2.red === void 0 && (d2.red = o2), d2.green === void 0 && (d2.green = o2), d2.blue === void 0 && (d2.blue = o2);
      function g2() {
        let m2, y2, b, x2 = o2;
        switch (r2.inputColorType) {
          case Tt.COLORTYPE_COLOR_ALPHA:
            x2 = s2[u2 + 3], m2 = s2[u2], y2 = s2[u2 + 1], b = s2[u2 + 2];
            break;
          case Tt.COLORTYPE_COLOR:
            m2 = s2[u2], y2 = s2[u2 + 1], b = s2[u2 + 2];
            break;
          case Tt.COLORTYPE_ALPHA:
            x2 = s2[u2 + 1], m2 = s2[u2], y2 = m2, b = m2;
            break;
          case Tt.COLORTYPE_GRAYSCALE:
            m2 = s2[u2], y2 = m2, b = m2;
            break;
          default:
            throw new Error("input color type:" + r2.inputColorType + " is not supported at present");
        }
        return r2.inputHasAlpha && (n || (x2 /= o2, m2 = Math.min(Math.max(Math.round((1 - x2) * d2.red + x2 * m2), 0), o2), y2 = Math.min(Math.max(Math.round((1 - x2) * d2.green + x2 * y2), 0), o2), b = Math.min(Math.max(Math.round((1 - x2) * d2.blue + x2 * b), 0), o2))), { red: m2, green: y2, blue: b, alpha: x2 };
      }
      for (let m2 = 0; m2 < i; m2++) for (let y2 = 0; y2 < e2; y2++) {
        let b = g2();
        switch (r2.colorType) {
          case Tt.COLORTYPE_COLOR_ALPHA:
          case Tt.COLORTYPE_COLOR:
            r2.bitDepth === 8 ? (c2[f3] = b.red, c2[f3 + 1] = b.green, c2[f3 + 2] = b.blue, n && (c2[f3 + 3] = b.alpha)) : (c2.writeUInt16BE(b.red, f3), c2.writeUInt16BE(b.green, f3 + 2), c2.writeUInt16BE(b.blue, f3 + 4), n && c2.writeUInt16BE(b.alpha, f3 + 6));
            break;
          case Tt.COLORTYPE_ALPHA:
          case Tt.COLORTYPE_GRAYSCALE: {
            let x2 = (b.red + b.green + b.blue) / 3;
            r2.bitDepth === 8 ? (c2[f3] = x2, n && (c2[f3 + 1] = b.alpha)) : (c2.writeUInt16BE(x2, f3), n && c2.writeUInt16BE(b.alpha, f3 + 2));
            break;
          }
          default:
            throw new Error("unrecognised color Type " + r2.colorType);
        }
        u2 += a, f3 += l;
      }
      return c2;
    };
  });
  var pd = _2((h2, hd) => {
    var fd = ll();
    function G1(t, e2, i, r2, n) {
      for (let s2 = 0; s2 < i; s2++) r2[n + s2] = t[e2 + s2];
    }
    function Y1(t, e2, i) {
      let r2 = 0, n = e2 + i;
      for (let s2 = e2; s2 < n; s2++) r2 += Math.abs(t[s2]);
      return r2;
    }
    function W1(t, e2, i, r2, n, s2) {
      for (let o2 = 0; o2 < i; o2++) {
        let a = o2 >= s2 ? t[e2 + o2 - s2] : 0, l = t[e2 + o2] - a;
        r2[n + o2] = l;
      }
    }
    function K1(t, e2, i, r2) {
      let n = 0;
      for (let s2 = 0; s2 < i; s2++) {
        let o2 = s2 >= r2 ? t[e2 + s2 - r2] : 0, a = t[e2 + s2] - o2;
        n += Math.abs(a);
      }
      return n;
    }
    function z1(t, e2, i, r2, n) {
      for (let s2 = 0; s2 < i; s2++) {
        let o2 = e2 > 0 ? t[e2 + s2 - i] : 0, a = t[e2 + s2] - o2;
        r2[n + s2] = a;
      }
    }
    function J1(t, e2, i) {
      let r2 = 0, n = e2 + i;
      for (let s2 = e2; s2 < n; s2++) {
        let o2 = e2 > 0 ? t[s2 - i] : 0, a = t[s2] - o2;
        r2 += Math.abs(a);
      }
      return r2;
    }
    function Z1(t, e2, i, r2, n, s2) {
      for (let o2 = 0; o2 < i; o2++) {
        let a = o2 >= s2 ? t[e2 + o2 - s2] : 0, l = e2 > 0 ? t[e2 + o2 - i] : 0, c2 = t[e2 + o2] - (a + l >> 1);
        r2[n + o2] = c2;
      }
    }
    function Q1(t, e2, i, r2) {
      let n = 0;
      for (let s2 = 0; s2 < i; s2++) {
        let o2 = s2 >= r2 ? t[e2 + s2 - r2] : 0, a = e2 > 0 ? t[e2 + s2 - i] : 0, l = t[e2 + s2] - (o2 + a >> 1);
        n += Math.abs(l);
      }
      return n;
    }
    function X1(t, e2, i, r2, n, s2) {
      for (let o2 = 0; o2 < i; o2++) {
        let a = o2 >= s2 ? t[e2 + o2 - s2] : 0, l = e2 > 0 ? t[e2 + o2 - i] : 0, c2 = e2 > 0 && o2 >= s2 ? t[e2 + o2 - (i + s2)] : 0, u2 = t[e2 + o2] - fd(a, l, c2);
        r2[n + o2] = u2;
      }
    }
    function ex(t, e2, i, r2) {
      let n = 0;
      for (let s2 = 0; s2 < i; s2++) {
        let o2 = s2 >= r2 ? t[e2 + s2 - r2] : 0, a = e2 > 0 ? t[e2 + s2 - i] : 0, l = e2 > 0 && s2 >= r2 ? t[e2 + s2 - (i + r2)] : 0, c2 = t[e2 + s2] - fd(o2, a, l);
        n += Math.abs(c2);
      }
      return n;
    }
    var tx = { 0: G1, 1: W1, 2: z1, 3: Z1, 4: X1 }, ix = { 0: Y1, 1: K1, 2: J1, 3: Q1, 4: ex };
    hd.exports = function(t, e2, i, r2, n) {
      let s2;
      if (!("filterType" in r2) || r2.filterType === -1) s2 = [0, 1, 2, 3, 4];
      else if (typeof r2.filterType == "number") s2 = [r2.filterType];
      else throw new Error("unrecognised filter types");
      r2.bitDepth === 16 && (n *= 2);
      let o2 = e2 * n, a = 0, l = 0, c2 = Buffer.alloc((o2 + 1) * i), u2 = s2[0];
      for (let f2 = 0; f2 < i; f2++) {
        if (s2.length > 1) {
          let d2 = 1 / 0;
          for (let g2 = 0; g2 < s2.length; g2++) {
            let m2 = ix[s2[g2]](t, l, o2, n);
            m2 < d2 && (u2 = s2[g2], d2 = m2);
          }
        }
        c2[a] = u2, a++, tx[u2](t, l, o2, c2, a, n), a += o2, l += o2;
      }
      return c2;
    };
  });
  var vl = _2((p2, dd) => {
    var it = kr(), rx = hl(), nx = ud(), sx = pd(), ox = require$$13, mi = dd.exports = function(t) {
      if (this._options = t, t.deflateChunkSize = t.deflateChunkSize || 32 * 1024, t.deflateLevel = t.deflateLevel != null ? t.deflateLevel : 9, t.deflateStrategy = t.deflateStrategy != null ? t.deflateStrategy : 3, t.inputHasAlpha = t.inputHasAlpha != null ? t.inputHasAlpha : true, t.deflateFactory = t.deflateFactory || ox.createDeflate, t.bitDepth = t.bitDepth || 8, t.colorType = typeof t.colorType == "number" ? t.colorType : it.COLORTYPE_COLOR_ALPHA, t.inputColorType = typeof t.inputColorType == "number" ? t.inputColorType : it.COLORTYPE_COLOR_ALPHA, [it.COLORTYPE_GRAYSCALE, it.COLORTYPE_COLOR, it.COLORTYPE_COLOR_ALPHA, it.COLORTYPE_ALPHA].indexOf(t.colorType) === -1) throw new Error("option color type:" + t.colorType + " is not supported at present");
      if ([it.COLORTYPE_GRAYSCALE, it.COLORTYPE_COLOR, it.COLORTYPE_COLOR_ALPHA, it.COLORTYPE_ALPHA].indexOf(t.inputColorType) === -1) throw new Error("option input color type:" + t.inputColorType + " is not supported at present");
      if (t.bitDepth !== 8 && t.bitDepth !== 16) throw new Error("option bit depth:" + t.bitDepth + " is not supported at present");
    };
    mi.prototype.getDeflateOptions = function() {
      return { chunkSize: this._options.deflateChunkSize, level: this._options.deflateLevel, strategy: this._options.deflateStrategy };
    };
    mi.prototype.createDeflate = function() {
      return this._options.deflateFactory(this.getDeflateOptions());
    };
    mi.prototype.filterData = function(t, e2, i) {
      let r2 = nx(t, e2, i, this._options), n = it.COLORTYPE_TO_BPP_MAP[this._options.colorType];
      return sx(r2, e2, i, this._options, n);
    };
    mi.prototype._packChunk = function(t, e2) {
      let i = e2 ? e2.length : 0, r2 = Buffer.alloc(i + 12);
      return r2.writeUInt32BE(i, 0), r2.writeUInt32BE(t, 4), e2 && e2.copy(r2, 8), r2.writeInt32BE(rx.crc32(r2.slice(4, r2.length - 4)), r2.length - 4), r2;
    };
    mi.prototype.packGAMA = function(t) {
      let e2 = Buffer.alloc(4);
      return e2.writeUInt32BE(Math.floor(t * it.GAMMA_DIVISION), 0), this._packChunk(it.TYPE_gAMA, e2);
    };
    mi.prototype.packIHDR = function(t, e2) {
      let i = Buffer.alloc(13);
      return i.writeUInt32BE(t, 0), i.writeUInt32BE(e2, 4), i[8] = this._options.bitDepth, i[9] = this._options.colorType, i[10] = 0, i[11] = 0, i[12] = 0, this._packChunk(it.TYPE_IHDR, i);
    };
    mi.prototype.packIDAT = function(t) {
      return this._packChunk(it.TYPE_IDAT, t);
    };
    mi.prototype.packIEND = function() {
      return this._packChunk(it.TYPE_IEND, null);
    };
  });
  var yd = _2((d2, vd) => {
    var ax = require$$1$2, md = require$$12, lx = kr(), cx = vl(), gd = vd.exports = function(t) {
      md.call(this);
      let e2 = t || {};
      this._packer = new cx(e2), this._deflate = this._packer.createDeflate(), this.readable = true;
    };
    ax.inherits(gd, md);
    gd.prototype.pack = function(t, e2, i, r2) {
      this.emit("data", Buffer.from(lx.PNG_SIGNATURE)), this.emit("data", this._packer.packIHDR(e2, i)), r2 && this.emit("data", this._packer.packGAMA(r2));
      let n = this._packer.filterData(t, e2, i);
      this._deflate.on("error", this.emit.bind(this, "error")), this._deflate.on("data", function(s2) {
        this.emit("data", this._packer.packIDAT(s2));
      }.bind(this)), this._deflate.on("end", function() {
        this.emit("data", this._packer.packIEND()), this.emit("end");
      }.bind(this)), this._deflate.end(n);
    };
  });
  var Ed = _2((ln, Sd) => {
    var bd = require$$10$1.ok, Or = require$$13, ux = require$$1$2, _d = require$$14.kMaxLength;
    function Vi(t) {
      if (!(this instanceof Vi)) return new Vi(t);
      t && t.chunkSize < Or.Z_MIN_CHUNK && (t.chunkSize = Or.Z_MIN_CHUNK), Or.Inflate.call(this, t), this._offset = this._offset === void 0 ? this._outOffset : this._offset, this._buffer = this._buffer || this._outBuffer, t && t.maxLength != null && (this._maxLength = t.maxLength);
    }
    function fx(t) {
      return new Vi(t);
    }
    function wd(t, e2) {
      t._handle && (t._handle.close(), t._handle = null);
    }
    Vi.prototype._processChunk = function(t, e2, i) {
      if (typeof i == "function") return Or.Inflate._processChunk.call(this, t, e2, i);
      let r2 = this, n = t && t.length, s2 = this._chunkSize - this._offset, o2 = this._maxLength, a = 0, l = [], c2 = 0, u2;
      this.on("error", function(m2) {
        u2 = m2;
      });
      function f2(m2, y2) {
        if (r2._hadError) return;
        let b = s2 - y2;
        if (bd(b >= 0, "have should not go down"), b > 0) {
          let x2 = r2._buffer.slice(r2._offset, r2._offset + b);
          if (r2._offset += b, x2.length > o2 && (x2 = x2.slice(0, o2)), l.push(x2), c2 += x2.length, o2 -= x2.length, o2 === 0) return false;
        }
        return (y2 === 0 || r2._offset >= r2._chunkSize) && (s2 = r2._chunkSize, r2._offset = 0, r2._buffer = Buffer.allocUnsafe(r2._chunkSize)), y2 === 0 ? (a += n - m2, n = m2, true) : false;
      }
      bd(this._handle, "zlib binding closed");
      let d2;
      do
        d2 = this._handle.writeSync(e2, t, a, n, this._buffer, this._offset, s2), d2 = d2 || this._writeState;
      while (!this._hadError && f2(d2[0], d2[1]));
      if (this._hadError) throw u2;
      if (c2 >= _d) throw wd(this), new RangeError("Cannot create final Buffer. It would be larger than 0x" + _d.toString(16) + " bytes");
      let g2 = Buffer.concat(l, c2);
      return wd(this), g2;
    };
    ux.inherits(Vi, Or.Inflate);
    function hx(t, e2) {
      if (typeof e2 == "string" && (e2 = Buffer.from(e2)), !(e2 instanceof Buffer)) throw new TypeError("Not a string or buffer");
      let i = t._finishFlushFlag;
      return i == null && (i = Or.Z_FINISH), t._processChunk(e2, i);
    }
    function xd(t, e2) {
      return hx(new Vi(e2), t);
    }
    Sd.exports = ln = xd;
    ln.Inflate = Vi;
    ln.createInflate = fx;
    ln.inflateSync = xd;
  });
  var yl = _2((m2, Od) => {
    var kd = Od.exports = function(t) {
      this._buffer = t, this._reads = [];
    };
    kd.prototype.read = function(t, e2) {
      this._reads.push({ length: Math.abs(t), allowLess: t < 0, func: e2 });
    };
    kd.prototype.process = function() {
      for (; this._reads.length > 0 && this._buffer.length; ) {
        let t = this._reads[0];
        if (this._buffer.length && (this._buffer.length >= t.length || t.allowLess)) {
          this._reads.shift();
          let e2 = this._buffer;
          this._buffer = e2.slice(t.length), t.func.call(this, e2.slice(0, t.length));
        } else break;
      }
      if (this._reads.length > 0) throw new Error("There are some read requests waitng on finished stream");
      if (this._buffer.length > 0) throw new Error("unrecognised content at end of stream");
    };
  });
  var Td = _2((Cd) => {
    var px = yl(), dx = cl();
    Cd.process = function(t, e2) {
      let i = [], r2 = new px(t);
      return new dx(e2, { read: r2.read.bind(r2), write: function(s2) {
        i.push(s2);
      }, complete: function() {
      } }).start(), r2.process(), Buffer.concat(i);
    };
  });
  var Ld = _2((v2, Nd) => {
    var Ad = true, Id = require$$13, mx = Ed();
    Id.deflateSync || (Ad = false);
    var gx = yl(), vx = Td(), yx = pl(), bx = dl(), _x = ml();
    Nd.exports = function(t, e2) {
      if (!Ad) throw new Error("To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0");
      let i;
      function r2(k2) {
        i = k2;
      }
      let n;
      function s2(k2) {
        n = k2;
      }
      function o2(k2) {
        n.transColor = k2;
      }
      function a(k2) {
        n.palette = k2;
      }
      function l() {
        n.alpha = true;
      }
      let c2;
      function u2(k2) {
        c2 = k2;
      }
      let f2 = [];
      function d2(k2) {
        f2.push(k2);
      }
      let g2 = new gx(t);
      if (new yx(e2, { read: g2.read.bind(g2), error: r2, metadata: s2, gamma: u2, palette: a, transColor: o2, inflateData: d2, simpleTransparency: l }).start(), g2.process(), i) throw i;
      let y2 = Buffer.concat(f2);
      f2.length = 0;
      let b;
      if (n.interlace) b = Id.inflateSync(y2);
      else {
        let S2 = ((n.width * n.bpp * n.depth + 7 >> 3) + 1) * n.height;
        b = mx(y2, { chunkSize: S2, maxLength: S2 });
      }
      if (y2 = null, !b || !b.length) throw new Error("bad png - invalid inflate data response");
      let x2 = vx.process(b, n);
      y2 = null;
      let E = bx.dataToBitMap(x2, n);
      x2 = null;
      let O2 = _x(E, n, e2.skipRescale);
      return n.data = O2, n.gamma = c2 || 0, n;
    };
  });
  var Md = _2((y2, Pd) => {
    var Bd = true, Rd = require$$13;
    Rd.deflateSync || (Bd = false);
    var wx = kr(), xx = vl();
    Pd.exports = function(t, e2) {
      if (!Bd) throw new Error("To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0");
      let i = e2 || {}, r2 = new xx(i), n = [];
      n.push(Buffer.from(wx.PNG_SIGNATURE)), n.push(r2.packIHDR(t.width, t.height)), t.gamma && n.push(r2.packGAMA(t.gamma));
      let s2 = r2.filterData(t.data, t.width, t.height), o2 = Rd.deflateSync(s2, r2.getDeflateOptions());
      if (s2 = null, !o2 || !o2.length) throw new Error("bad png - invalid compressed data response");
      return n.push(r2.packIDAT(o2)), n.push(r2.packIEND()), Buffer.concat(n);
    };
  });
  var Fd = _2((bl) => {
    var Sx = Ld(), Ex = Md();
    bl.read = function(t, e2) {
      return Sx(t, e2 || {});
    };
    bl.write = function(t, e2) {
      return Ex(t, e2);
    };
  });
  var jd = _2((Dd) => {
    var kx = require$$1$2, qd = require$$12, Ox = ld(), Cx = yd(), Tx = Fd(), at = Dd.PNG = function(t) {
      qd.call(this), t = t || {}, this.width = t.width | 0, this.height = t.height | 0, this.data = this.width > 0 && this.height > 0 ? Buffer.alloc(4 * this.width * this.height) : null, t.fill && this.data && this.data.fill(0), this.gamma = 0, this.readable = this.writable = true, this._parser = new Ox(t), this._parser.on("error", this.emit.bind(this, "error")), this._parser.on("close", this._handleClose.bind(this)), this._parser.on("metadata", this._metadata.bind(this)), this._parser.on("gamma", this._gamma.bind(this)), this._parser.on("parsed", function(e2) {
        this.data = e2, this.emit("parsed", e2);
      }.bind(this)), this._packer = new Cx(t), this._packer.on("data", this.emit.bind(this, "data")), this._packer.on("end", this.emit.bind(this, "end")), this._parser.on("close", this._handleClose.bind(this)), this._packer.on("error", this.emit.bind(this, "error"));
    };
    kx.inherits(at, qd);
    at.sync = Tx;
    at.prototype.pack = function() {
      return !this.data || !this.data.length ? (this.emit("error", "No data provided"), this) : (process.nextTick(function() {
        this._packer.pack(this.data, this.width, this.height, this.gamma);
      }.bind(this)), this);
    };
    at.prototype.parse = function(t, e2) {
      if (e2) {
        let i, r2;
        i = function(n) {
          this.removeListener("error", r2), this.data = n, e2(null, this);
        }.bind(this), r2 = function(n) {
          this.removeListener("parsed", i), e2(n, null);
        }.bind(this), this.once("parsed", i), this.once("error", r2);
      }
      return this.end(t), this;
    };
    at.prototype.write = function(t) {
      return this._parser.write(t), true;
    };
    at.prototype.end = function(t) {
      this._parser.end(t);
    };
    at.prototype._metadata = function(t) {
      this.width = t.width, this.height = t.height, this.emit("metadata", t);
    };
    at.prototype._gamma = function(t) {
      this.gamma = t;
    };
    at.prototype._handleClose = function() {
      !this._parser.writable && !this._packer.readable && this.emit("close");
    };
    at.bitblt = function(t, e2, i, r2, n, s2, o2, a) {
      if (i |= 0, r2 |= 0, n |= 0, s2 |= 0, o2 |= 0, a |= 0, i > t.width || r2 > t.height || i + n > t.width || r2 + s2 > t.height) throw new Error("bitblt reading outside image");
      if (o2 > e2.width || a > e2.height || o2 + n > e2.width || a + s2 > e2.height) throw new Error("bitblt writing outside image");
      for (let l = 0; l < s2; l++) t.data.copy(e2.data, (a + l) * e2.width + o2 << 2, (r2 + l) * t.width + i << 2, (r2 + l) * t.width + i + n << 2);
    };
    at.prototype.bitblt = function(t, e2, i, r2, n, s2, o2) {
      return at.bitblt(this, t, e2, i, r2, n, s2, o2), this;
    };
    at.adjustGamma = function(t) {
      if (t.gamma) {
        for (let e2 = 0; e2 < t.height; e2++) for (let i = 0; i < t.width; i++) {
          let r2 = t.width * e2 + i << 2;
          for (let n = 0; n < 3; n++) {
            let s2 = t.data[r2 + n] / 255;
            s2 = Math.pow(s2, 1 / 2.2 / t.gamma), t.data[r2 + n] = Math.round(s2 * 255);
          }
        }
        t.gamma = 0;
      }
    };
    at.prototype.adjustGamma = function() {
      at.adjustGamma(this);
    };
  });
  var cn = _2((wl) => {
    var Fs = class extends Error {
      constructor(e2, i, r2) {
        super(r2), Error.captureStackTrace(this, this.constructor), this.name = this.constructor.name, this.code = i, this.exitCode = e2, this.nestedError = void 0;
      }
    }, _l = class extends Fs {
      constructor(e2) {
        super(1, "commander.invalidArgument", e2), Error.captureStackTrace(this, this.constructor), this.name = this.constructor.name;
      }
    };
    wl.CommanderError = Fs;
    wl.InvalidArgumentError = _l;
  });
  var qs = _2((Sl) => {
    var { InvalidArgumentError: Ax } = cn(), xl = class {
      constructor(e2, i) {
        switch (this.description = i || "", this.variadic = false, this.parseArg = void 0, this.defaultValue = void 0, this.defaultValueDescription = void 0, this.argChoices = void 0, e2[0]) {
          case "<":
            this.required = true, this._name = e2.slice(1, -1);
            break;
          case "[":
            this.required = false, this._name = e2.slice(1, -1);
            break;
          default:
            this.required = true, this._name = e2;
            break;
        }
        this._name.length > 3 && this._name.slice(-3) === "..." && (this.variadic = true, this._name = this._name.slice(0, -3));
      }
      name() {
        return this._name;
      }
      _concatValue(e2, i) {
        return i === this.defaultValue || !Array.isArray(i) ? [e2] : i.concat(e2);
      }
      default(e2, i) {
        return this.defaultValue = e2, this.defaultValueDescription = i, this;
      }
      argParser(e2) {
        return this.parseArg = e2, this;
      }
      choices(e2) {
        return this.argChoices = e2, this.parseArg = (i, r2) => {
          if (!e2.includes(i)) throw new Ax(`Allowed choices are ${e2.join(", ")}.`);
          return this.variadic ? this._concatValue(i, r2) : i;
        }, this;
      }
      argRequired() {
        return this.required = true, this;
      }
      argOptional() {
        return this.required = false, this;
      }
    };
    function Ix(t) {
      let e2 = t.name() + (t.variadic === true ? "..." : "");
      return t.required ? "<" + e2 + ">" : "[" + e2 + "]";
    }
    Sl.Argument = xl;
    Sl.humanReadableArgName = Ix;
  });
  var kl = _2((Ud) => {
    var { humanReadableArgName: Nx } = qs(), El = class {
      constructor() {
        this.helpWidth = void 0, this.sortSubcommands = false, this.sortOptions = false;
      }
      visibleCommands(e2) {
        let i = e2.commands.filter((r2) => !r2._hidden);
        if (e2._hasImplicitHelpCommand()) {
          let [, r2, n] = e2._helpCommandnameAndArgs.match(/([^ ]+) *(.*)/), s2 = e2.createCommand(r2).helpOption(false);
          s2.description(e2._helpCommandDescription), n && s2.arguments(n), i.push(s2);
        }
        return this.sortSubcommands && i.sort((r2, n) => r2.name().localeCompare(n.name())), i;
      }
      visibleOptions(e2) {
        let i = e2.options.filter((s2) => !s2.hidden), r2 = e2._hasHelpOption && e2._helpShortFlag && !e2._findOption(e2._helpShortFlag), n = e2._hasHelpOption && !e2._findOption(e2._helpLongFlag);
        if (r2 || n) {
          let s2;
          r2 ? n ? s2 = e2.createOption(e2._helpFlags, e2._helpDescription) : s2 = e2.createOption(e2._helpShortFlag, e2._helpDescription) : s2 = e2.createOption(e2._helpLongFlag, e2._helpDescription), i.push(s2);
        }
        if (this.sortOptions) {
          let s2 = (o2) => o2.short ? o2.short.replace(/^-/, "") : o2.long.replace(/^--/, "");
          i.sort((o2, a) => s2(o2).localeCompare(s2(a)));
        }
        return i;
      }
      visibleArguments(e2) {
        return e2._argsDescription && e2._args.forEach((i) => {
          i.description = i.description || e2._argsDescription[i.name()] || "";
        }), e2._args.find((i) => i.description) ? e2._args : [];
      }
      subcommandTerm(e2) {
        let i = e2._args.map((r2) => Nx(r2)).join(" ");
        return e2._name + (e2._aliases[0] ? "|" + e2._aliases[0] : "") + (e2.options.length ? " [options]" : "") + (i ? " " + i : "");
      }
      optionTerm(e2) {
        return e2.flags;
      }
      argumentTerm(e2) {
        return e2.name();
      }
      longestSubcommandTermLength(e2, i) {
        return i.visibleCommands(e2).reduce((r2, n) => Math.max(r2, i.subcommandTerm(n).length), 0);
      }
      longestOptionTermLength(e2, i) {
        return i.visibleOptions(e2).reduce((r2, n) => Math.max(r2, i.optionTerm(n).length), 0);
      }
      longestArgumentTermLength(e2, i) {
        return i.visibleArguments(e2).reduce((r2, n) => Math.max(r2, i.argumentTerm(n).length), 0);
      }
      commandUsage(e2) {
        let i = e2._name;
        e2._aliases[0] && (i = i + "|" + e2._aliases[0]);
        let r2 = "";
        for (let n = e2.parent; n; n = n.parent) r2 = n.name() + " " + r2;
        return r2 + i + " " + e2.usage();
      }
      commandDescription(e2) {
        return e2.description();
      }
      subcommandDescription(e2) {
        return e2.description();
      }
      optionDescription(e2) {
        let i = [];
        return e2.argChoices && !e2.negate && i.push(`choices: ${e2.argChoices.map((r2) => JSON.stringify(r2)).join(", ")}`), e2.defaultValue !== void 0 && !e2.negate && i.push(`default: ${e2.defaultValueDescription || JSON.stringify(e2.defaultValue)}`), e2.envVar !== void 0 && i.push(`env: ${e2.envVar}`), i.length > 0 ? `${e2.description} (${i.join(", ")})` : e2.description;
      }
      argumentDescription(e2) {
        let i = [];
        if (e2.argChoices && i.push(`choices: ${e2.argChoices.map((r2) => JSON.stringify(r2)).join(", ")}`), e2.defaultValue !== void 0 && i.push(`default: ${e2.defaultValueDescription || JSON.stringify(e2.defaultValue)}`), i.length > 0) {
          let r2 = `(${i.join(", ")})`;
          return e2.description ? `${e2.description} ${r2}` : r2;
        }
        return e2.description;
      }
      formatHelp(e2, i) {
        let r2 = i.padWidth(e2, i), n = i.helpWidth || 80, s2 = 2, o2 = 2;
        function a(m2, y2) {
          if (y2) {
            let b = `${m2.padEnd(r2 + o2)}${y2}`;
            return i.wrap(b, n - s2, r2 + o2);
          }
          return m2;
        }
        function l(m2) {
          return m2.join(`
`).replace(/^/gm, " ".repeat(s2));
        }
        let c2 = [`Usage: ${i.commandUsage(e2)}`, ""], u2 = i.commandDescription(e2);
        u2.length > 0 && (c2 = c2.concat([u2, ""]));
        let f2 = i.visibleArguments(e2).map((m2) => a(i.argumentTerm(m2), i.argumentDescription(m2)));
        f2.length > 0 && (c2 = c2.concat(["Arguments:", l(f2), ""]));
        let d2 = i.visibleOptions(e2).map((m2) => a(i.optionTerm(m2), i.optionDescription(m2)));
        d2.length > 0 && (c2 = c2.concat(["Options:", l(d2), ""]));
        let g2 = i.visibleCommands(e2).map((m2) => a(i.subcommandTerm(m2), i.subcommandDescription(m2)));
        return g2.length > 0 && (c2 = c2.concat(["Commands:", l(g2), ""])), c2.join(`
`);
      }
      padWidth(e2, i) {
        return Math.max(i.longestOptionTermLength(e2, i), i.longestSubcommandTermLength(e2, i), i.longestArgumentTermLength(e2, i));
      }
      wrap(e2, i, r2, n = 40) {
        if (e2.match(/[\n]\s+/)) return e2;
        let s2 = i - r2;
        if (s2 < n) return e2;
        let o2 = e2.substr(0, r2), a = e2.substr(r2), l = " ".repeat(r2), c2 = new RegExp(".{1," + (s2 - 1) + "}([\\s​]|$)|[^\\s​]+?([\\s​]|$)", "g"), u2 = a.match(c2) || [];
        return o2 + u2.map((f2, d2) => (f2.slice(-1) === `
` && (f2 = f2.slice(0, f2.length - 1)), (d2 > 0 ? l : "") + f2.trimRight())).join(`
`);
      }
    };
    Ud.Help = El;
  });
  var Tl = _2((Cl) => {
    var { InvalidArgumentError: Lx } = cn(), Ol = class {
      constructor(e2, i) {
        this.flags = e2, this.description = i || "", this.required = e2.includes("<"), this.optional = e2.includes("["), this.variadic = /\w\.\.\.[>\]]$/.test(e2), this.mandatory = false;
        let r2 = $d(e2);
        this.short = r2.shortFlag, this.long = r2.longFlag, this.negate = false, this.long && (this.negate = this.long.startsWith("--no-")), this.defaultValue = void 0, this.defaultValueDescription = void 0, this.envVar = void 0, this.parseArg = void 0, this.hidden = false, this.argChoices = void 0;
      }
      default(e2, i) {
        return this.defaultValue = e2, this.defaultValueDescription = i, this;
      }
      env(e2) {
        return this.envVar = e2, this;
      }
      argParser(e2) {
        return this.parseArg = e2, this;
      }
      makeOptionMandatory(e2 = true) {
        return this.mandatory = !!e2, this;
      }
      hideHelp(e2 = true) {
        return this.hidden = !!e2, this;
      }
      _concatValue(e2, i) {
        return i === this.defaultValue || !Array.isArray(i) ? [e2] : i.concat(e2);
      }
      choices(e2) {
        return this.argChoices = e2, this.parseArg = (i, r2) => {
          if (!e2.includes(i)) throw new Lx(`Allowed choices are ${e2.join(", ")}.`);
          return this.variadic ? this._concatValue(i, r2) : i;
        }, this;
      }
      name() {
        return this.long ? this.long.replace(/^--/, "") : this.short.replace(/^-/, "");
      }
      attributeName() {
        return Bx(this.name().replace(/^no-/, ""));
      }
      is(e2) {
        return this.short === e2 || this.long === e2;
      }
    };
    function Bx(t) {
      return t.split("-").reduce((e2, i) => e2 + i[0].toUpperCase() + i.slice(1));
    }
    function $d(t) {
      let e2, i, r2 = t.split(/[ |,]+/);
      return r2.length > 1 && !/^[[<]/.test(r2[1]) && (e2 = r2.shift()), i = r2.shift(), !e2 && /^-[^-]$/.test(i) && (e2 = i, i = void 0), { shortFlag: e2, longFlag: i };
    }
    Cl.Option = Ol;
    Cl.splitOptionFlags = $d;
  });
  var Hd = _2((Vd) => {
    function Rx(t, e2) {
      if (Math.abs(t.length - e2.length) > 3) return Math.max(t.length, e2.length);
      let i = [];
      for (let r2 = 0; r2 <= t.length; r2++) i[r2] = [r2];
      for (let r2 = 0; r2 <= e2.length; r2++) i[0][r2] = r2;
      for (let r2 = 1; r2 <= e2.length; r2++) for (let n = 1; n <= t.length; n++) {
        let s2 = 1;
        t[n - 1] === e2[r2 - 1] ? s2 = 0 : s2 = 1, i[n][r2] = Math.min(i[n - 1][r2] + 1, i[n][r2 - 1] + 1, i[n - 1][r2 - 1] + s2), n > 1 && r2 > 1 && t[n - 1] === e2[r2 - 2] && t[n - 2] === e2[r2 - 1] && (i[n][r2] = Math.min(i[n][r2], i[n - 2][r2 - 2] + 1));
      }
      return i[t.length][e2.length];
    }
    function Px(t, e2) {
      if (!e2 || e2.length === 0) return "";
      e2 = Array.from(new Set(e2));
      let i = t.startsWith("--");
      i && (t = t.slice(2), e2 = e2.map((o2) => o2.slice(2)));
      let r2 = [], n = 3, s2 = 0.4;
      return e2.forEach((o2) => {
        if (o2.length <= 1) return;
        let a = Rx(t, o2), l = Math.max(t.length, o2.length);
        (l - a) / l > s2 && (a < n ? (n = a, r2 = [o2]) : a === n && r2.push(o2));
      }), r2.sort((o2, a) => o2.localeCompare(a)), i && (r2 = r2.map((o2) => `--${o2}`)), r2.length > 1 ? `
(Did you mean one of ${r2.join(", ")}?)` : r2.length === 1 ? `
(Did you mean ${r2[0]}?)` : "";
    }
    Vd.suggestSimilar = Px;
  });
  var zd = _2((Kd) => {
    var Mx = require$$0$4.EventEmitter, Al = require$$0$3, Hi = require$$1$1, Il = require$$0$2, { Argument: Fx, humanReadableArgName: qx } = qs(), { CommanderError: Nl } = cn(), { Help: Dx } = kl(), { Option: jx, splitOptionFlags: Ux } = Tl(), { suggestSimilar: Gd } = Hd(), Bl = class t extends Mx {
      constructor(e2) {
        super(), this.commands = [], this.options = [], this.parent = null, this._allowUnknownOption = false, this._allowExcessArguments = true, this._args = [], this.args = [], this.rawArgs = [], this.processedArgs = [], this._scriptPath = null, this._name = e2 || "", this._optionValues = {}, this._optionValueSources = {}, this._storeOptionsAsProperties = false, this._actionHandler = null, this._executableHandler = false, this._executableFile = null, this._defaultCommandName = null, this._exitCallback = null, this._aliases = [], this._combineFlagAndOptionalValue = true, this._description = "", this._argsDescription = void 0, this._enablePositionalOptions = false, this._passThroughOptions = false, this._lifeCycleHooks = {}, this._showHelpAfterError = false, this._showSuggestionAfterError = false, this._outputConfiguration = { writeOut: (i) => process.stdout.write(i), writeErr: (i) => process.stderr.write(i), getOutHelpWidth: () => process.stdout.isTTY ? process.stdout.columns : void 0, getErrHelpWidth: () => process.stderr.isTTY ? process.stderr.columns : void 0, outputError: (i, r2) => r2(i) }, this._hidden = false, this._hasHelpOption = true, this._helpFlags = "-h, --help", this._helpDescription = "display help for command", this._helpShortFlag = "-h", this._helpLongFlag = "--help", this._addImplicitHelpCommand = void 0, this._helpCommandName = "help", this._helpCommandnameAndArgs = "help [command]", this._helpCommandDescription = "display help for command", this._helpConfiguration = {};
      }
      copyInheritedSettings(e2) {
        return this._outputConfiguration = e2._outputConfiguration, this._hasHelpOption = e2._hasHelpOption, this._helpFlags = e2._helpFlags, this._helpDescription = e2._helpDescription, this._helpShortFlag = e2._helpShortFlag, this._helpLongFlag = e2._helpLongFlag, this._helpCommandName = e2._helpCommandName, this._helpCommandnameAndArgs = e2._helpCommandnameAndArgs, this._helpCommandDescription = e2._helpCommandDescription, this._helpConfiguration = e2._helpConfiguration, this._exitCallback = e2._exitCallback, this._storeOptionsAsProperties = e2._storeOptionsAsProperties, this._combineFlagAndOptionalValue = e2._combineFlagAndOptionalValue, this._allowExcessArguments = e2._allowExcessArguments, this._enablePositionalOptions = e2._enablePositionalOptions, this._showHelpAfterError = e2._showHelpAfterError, this._showSuggestionAfterError = e2._showSuggestionAfterError, this;
      }
      command(e2, i, r2) {
        let n = i, s2 = r2;
        typeof n == "object" && n !== null && (s2 = n, n = null), s2 = s2 || {};
        let [, o2, a] = e2.match(/([^ ]+) *(.*)/), l = this.createCommand(o2);
        return n && (l.description(n), l._executableHandler = true), s2.isDefault && (this._defaultCommandName = l._name), l._hidden = !!(s2.noHelp || s2.hidden), l._executableFile = s2.executableFile || null, a && l.arguments(a), this.commands.push(l), l.parent = this, l.copyInheritedSettings(this), n ? this : l;
      }
      createCommand(e2) {
        return new t(e2);
      }
      createHelp() {
        return Object.assign(new Dx(), this.configureHelp());
      }
      configureHelp(e2) {
        return e2 === void 0 ? this._helpConfiguration : (this._helpConfiguration = e2, this);
      }
      configureOutput(e2) {
        return e2 === void 0 ? this._outputConfiguration : (Object.assign(this._outputConfiguration, e2), this);
      }
      showHelpAfterError(e2 = true) {
        return typeof e2 != "string" && (e2 = !!e2), this._showHelpAfterError = e2, this;
      }
      showSuggestionAfterError(e2 = true) {
        return this._showSuggestionAfterError = !!e2, this;
      }
      addCommand(e2, i) {
        if (!e2._name) throw new Error("Command passed to .addCommand() must have a name");
        function r2(n) {
          n.forEach((s2) => {
            if (s2._executableHandler && !s2._executableFile) throw new Error(`Must specify executableFile for deeply nested executable: ${s2.name()}`);
            r2(s2.commands);
          });
        }
        return r2(e2.commands), i = i || {}, i.isDefault && (this._defaultCommandName = e2._name), (i.noHelp || i.hidden) && (e2._hidden = true), this.commands.push(e2), e2.parent = this, this;
      }
      createArgument(e2, i) {
        return new Fx(e2, i);
      }
      argument(e2, i, r2, n) {
        let s2 = this.createArgument(e2, i);
        return typeof r2 == "function" ? s2.default(n).argParser(r2) : s2.default(r2), this.addArgument(s2), this;
      }
      arguments(e2) {
        return e2.split(/ +/).forEach((i) => {
          this.argument(i);
        }), this;
      }
      addArgument(e2) {
        let i = this._args.slice(-1)[0];
        if (i && i.variadic) throw new Error(`only the last argument can be variadic '${i.name()}'`);
        if (e2.required && e2.defaultValue !== void 0 && e2.parseArg === void 0) throw new Error(`a default value for a required argument is never used: '${e2.name()}'`);
        return this._args.push(e2), this;
      }
      addHelpCommand(e2, i) {
        return e2 === false ? this._addImplicitHelpCommand = false : (this._addImplicitHelpCommand = true, typeof e2 == "string" && (this._helpCommandName = e2.split(" ")[0], this._helpCommandnameAndArgs = e2), this._helpCommandDescription = i || this._helpCommandDescription), this;
      }
      _hasImplicitHelpCommand() {
        return this._addImplicitHelpCommand === void 0 ? this.commands.length && !this._actionHandler && !this._findCommand("help") : this._addImplicitHelpCommand;
      }
      hook(e2, i) {
        let r2 = ["preAction", "postAction"];
        if (!r2.includes(e2)) throw new Error(`Unexpected value for event passed to hook : '${e2}'.
Expecting one of '${r2.join("', '")}'`);
        return this._lifeCycleHooks[e2] ? this._lifeCycleHooks[e2].push(i) : this._lifeCycleHooks[e2] = [i], this;
      }
      exitOverride(e2) {
        return e2 ? this._exitCallback = e2 : this._exitCallback = (i) => {
          if (i.code !== "commander.executeSubCommandAsync") throw i;
        }, this;
      }
      _exit(e2, i, r2) {
        this._exitCallback && this._exitCallback(new Nl(e2, i, r2)), process.exit(e2);
      }
      action(e2) {
        let i = (r2) => {
          let n = this._args.length, s2 = r2.slice(0, n);
          return this._storeOptionsAsProperties ? s2[n] = this : s2[n] = this.opts(), s2.push(this), e2.apply(this, s2);
        };
        return this._actionHandler = i, this;
      }
      createOption(e2, i) {
        return new jx(e2, i);
      }
      addOption(e2) {
        let i = e2.name(), r2 = e2.attributeName(), n = e2.defaultValue;
        if (e2.negate || e2.optional || e2.required || typeof n == "boolean") {
          if (e2.negate) {
            let o2 = e2.long.replace(/^--no-/, "--");
            n = this._findOption(o2) ? this.getOptionValue(r2) : true;
          }
          n !== void 0 && this.setOptionValueWithSource(r2, n, "default");
        }
        this.options.push(e2);
        let s2 = (o2, a, l) => {
          let c2 = this.getOptionValue(r2);
          if (o2 !== null && e2.parseArg) try {
            o2 = e2.parseArg(o2, c2 === void 0 ? n : c2);
          } catch (u2) {
            if (u2.code === "commander.invalidArgument") {
              let f2 = `${a} ${u2.message}`;
              this._displayError(u2.exitCode, u2.code, f2);
            }
            throw u2;
          }
          else o2 !== null && e2.variadic && (o2 = e2._concatValue(o2, c2));
          typeof c2 == "boolean" || typeof c2 == "undefined" ? o2 == null ? this.setOptionValueWithSource(r2, e2.negate ? false : n || true, l) : this.setOptionValueWithSource(r2, o2, l) : o2 !== null && this.setOptionValueWithSource(r2, e2.negate ? false : o2, l);
        };
        return this.on("option:" + i, (o2) => {
          let a = `error: option '${e2.flags}' argument '${o2}' is invalid.`;
          s2(o2, a, "cli");
        }), e2.envVar && this.on("optionEnv:" + i, (o2) => {
          let a = `error: option '${e2.flags}' value '${o2}' from env '${e2.envVar}' is invalid.`;
          s2(o2, a, "env");
        }), this;
      }
      _optionEx(e2, i, r2, n, s2) {
        let o2 = this.createOption(i, r2);
        if (o2.makeOptionMandatory(!!e2.mandatory), typeof n == "function") o2.default(s2).argParser(n);
        else if (n instanceof RegExp) {
          let a = n;
          n = (l, c2) => {
            let u2 = a.exec(l);
            return u2 ? u2[0] : c2;
          }, o2.default(s2).argParser(n);
        } else o2.default(n);
        return this.addOption(o2);
      }
      option(e2, i, r2, n) {
        return this._optionEx({}, e2, i, r2, n);
      }
      requiredOption(e2, i, r2, n) {
        return this._optionEx({ mandatory: true }, e2, i, r2, n);
      }
      combineFlagAndOptionalValue(e2 = true) {
        return this._combineFlagAndOptionalValue = !!e2, this;
      }
      allowUnknownOption(e2 = true) {
        return this._allowUnknownOption = !!e2, this;
      }
      allowExcessArguments(e2 = true) {
        return this._allowExcessArguments = !!e2, this;
      }
      enablePositionalOptions(e2 = true) {
        return this._enablePositionalOptions = !!e2, this;
      }
      passThroughOptions(e2 = true) {
        if (this._passThroughOptions = !!e2, this.parent && e2 && !this.parent._enablePositionalOptions) throw new Error("passThroughOptions can not be used without turning on enablePositionalOptions for parent command(s)");
        return this;
      }
      storeOptionsAsProperties(e2 = true) {
        if (this._storeOptionsAsProperties = !!e2, this.options.length) throw new Error("call .storeOptionsAsProperties() before adding options");
        return this;
      }
      getOptionValue(e2) {
        return this._storeOptionsAsProperties ? this[e2] : this._optionValues[e2];
      }
      setOptionValue(e2, i) {
        return this._storeOptionsAsProperties ? this[e2] = i : this._optionValues[e2] = i, this;
      }
      setOptionValueWithSource(e2, i, r2) {
        return this.setOptionValue(e2, i), this._optionValueSources[e2] = r2, this;
      }
      getOptionValueSource(e2) {
        return this._optionValueSources[e2];
      }
      _prepareUserArgs(e2, i) {
        if (e2 !== void 0 && !Array.isArray(e2)) throw new Error("first parameter to parse must be array or undefined");
        i = i || {}, e2 === void 0 && (e2 = process.argv, process.versions && process.versions.electron && (i.from = "electron")), this.rawArgs = e2.slice();
        let r2;
        switch (i.from) {
          case void 0:
          case "node":
            this._scriptPath = e2[1], r2 = e2.slice(2);
            break;
          case "electron":
            process.defaultApp ? (this._scriptPath = e2[1], r2 = e2.slice(2)) : r2 = e2.slice(1);
            break;
          case "user":
            r2 = e2.slice(0);
            break;
          default:
            throw new Error(`unexpected parse option { from: '${i.from}' }`);
        }
        return !this._scriptPath && require.main && (this._scriptPath = require.main.filename), this._name = this._name || this._scriptPath && Hi.basename(this._scriptPath, Hi.extname(this._scriptPath)), r2;
      }
      parse(e2, i) {
        let r2 = this._prepareUserArgs(e2, i);
        return this._parseCommand([], r2), this;
      }
      async parseAsync(e2, i) {
        let r2 = this._prepareUserArgs(e2, i);
        return await this._parseCommand([], r2), this;
      }
      _executeSubCommand(e2, i) {
        i = i.slice();
        let r2 = false, n = [".js", ".ts", ".tsx", ".mjs", ".cjs"];
        this._checkForMissingMandatoryOptions();
        let s2 = this._scriptPath;
        !s2 && require.main && (s2 = require.main.filename);
        let o2;
        try {
          let d2 = Il.realpathSync(s2);
          o2 = Hi.dirname(d2);
        } catch {
          o2 = ".";
        }
        let a = Hi.basename(s2, Hi.extname(s2)) + "-" + e2._name;
        e2._executableFile && (a = e2._executableFile);
        let l = Hi.join(o2, a);
        Il.existsSync(l) ? a = l : n.forEach((d2) => {
          Il.existsSync(`${l}${d2}`) && (a = `${l}${d2}`);
        }), r2 = n.includes(Hi.extname(a));
        let c2;
        process.platform !== "win32" ? r2 ? (i.unshift(a), i = Wd(process.execArgv).concat(i), c2 = Al.spawn(process.argv[0], i, { stdio: "inherit" })) : c2 = Al.spawn(a, i, { stdio: "inherit" }) : (i.unshift(a), i = Wd(process.execArgv).concat(i), c2 = Al.spawn(process.execPath, i, { stdio: "inherit" })), ["SIGUSR1", "SIGUSR2", "SIGTERM", "SIGINT", "SIGHUP"].forEach((d2) => {
          process.on(d2, () => {
            c2.killed === false && c2.exitCode === null && c2.kill(d2);
          });
        });
        let f2 = this._exitCallback;
        f2 ? c2.on("close", () => {
          f2(new Nl(process.exitCode || 0, "commander.executeSubCommandAsync", "(close)"));
        }) : c2.on("close", process.exit.bind(process)), c2.on("error", (d2) => {
          if (d2.code === "ENOENT") {
            let g2 = `'${a}' does not exist
 - if '${e2._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead
 - if the default executable name is not suitable, use the executableFile option to supply a custom name`;
            throw new Error(g2);
          } else if (d2.code === "EACCES") throw new Error(`'${a}' not executable`);
          if (!f2) process.exit(1);
          else {
            let g2 = new Nl(1, "commander.executeSubCommandAsync", "(error)");
            g2.nestedError = d2, f2(g2);
          }
        }), this.runningCommand = c2;
      }
      _dispatchSubcommand(e2, i, r2) {
        let n = this._findCommand(e2);
        if (n || this.help({ error: true }), n._executableHandler) this._executeSubCommand(n, i.concat(r2));
        else return n._parseCommand(i, r2);
      }
      _checkNumberOfArguments() {
        this._args.forEach((e2, i) => {
          e2.required && this.args[i] == null && this.missingArgument(e2.name());
        }), !(this._args.length > 0 && this._args[this._args.length - 1].variadic) && this.args.length > this._args.length && this._excessArguments(this.args);
      }
      _processArguments() {
        let e2 = (r2, n, s2) => {
          let o2 = n;
          if (n !== null && r2.parseArg) try {
            o2 = r2.parseArg(n, s2);
          } catch (a) {
            if (a.code === "commander.invalidArgument") {
              let l = `error: command-argument value '${n}' is invalid for argument '${r2.name()}'. ${a.message}`;
              this._displayError(a.exitCode, a.code, l);
            }
            throw a;
          }
          return o2;
        };
        this._checkNumberOfArguments();
        let i = [];
        this._args.forEach((r2, n) => {
          let s2 = r2.defaultValue;
          r2.variadic ? n < this.args.length ? (s2 = this.args.slice(n), r2.parseArg && (s2 = s2.reduce((o2, a) => e2(r2, a, o2), r2.defaultValue))) : s2 === void 0 && (s2 = []) : n < this.args.length && (s2 = this.args[n], r2.parseArg && (s2 = e2(r2, s2, r2.defaultValue))), i[n] = s2;
        }), this.processedArgs = i;
      }
      _chainOrCall(e2, i) {
        return e2 && e2.then && typeof e2.then == "function" ? e2.then(() => i()) : i();
      }
      _chainOrCallHooks(e2, i) {
        let r2 = e2, n = [];
        return Ll(this).reverse().filter((s2) => s2._lifeCycleHooks[i] !== void 0).forEach((s2) => {
          s2._lifeCycleHooks[i].forEach((o2) => {
            n.push({ hookedCommand: s2, callback: o2 });
          });
        }), i === "postAction" && n.reverse(), n.forEach((s2) => {
          r2 = this._chainOrCall(r2, () => s2.callback(s2.hookedCommand, this));
        }), r2;
      }
      _parseCommand(e2, i) {
        let r2 = this.parseOptions(i);
        if (this._parseOptionsEnv(), e2 = e2.concat(r2.operands), i = r2.unknown, this.args = e2.concat(i), e2 && this._findCommand(e2[0])) return this._dispatchSubcommand(e2[0], e2.slice(1), i);
        if (this._hasImplicitHelpCommand() && e2[0] === this._helpCommandName) return e2.length === 1 && this.help(), this._dispatchSubcommand(e2[1], [], [this._helpLongFlag]);
        if (this._defaultCommandName) return Yd(this, i), this._dispatchSubcommand(this._defaultCommandName, e2, i);
        this.commands.length && this.args.length === 0 && !this._actionHandler && !this._defaultCommandName && this.help({ error: true }), Yd(this, r2.unknown), this._checkForMissingMandatoryOptions();
        let n = () => {
          r2.unknown.length > 0 && this.unknownOption(r2.unknown[0]);
        }, s2 = `command:${this.name()}`;
        if (this._actionHandler) {
          n(), this._processArguments();
          let o2;
          return o2 = this._chainOrCallHooks(o2, "preAction"), o2 = this._chainOrCall(o2, () => this._actionHandler(this.processedArgs)), this.parent && this.parent.emit(s2, e2, i), o2 = this._chainOrCallHooks(o2, "postAction"), o2;
        }
        if (this.parent && this.parent.listenerCount(s2)) n(), this._processArguments(), this.parent.emit(s2, e2, i);
        else if (e2.length) {
          if (this._findCommand("*")) return this._dispatchSubcommand("*", e2, i);
          this.listenerCount("command:*") ? this.emit("command:*", e2, i) : this.commands.length ? this.unknownCommand() : (n(), this._processArguments());
        } else this.commands.length ? (n(), this.help({ error: true })) : (n(), this._processArguments());
      }
      _findCommand(e2) {
        if (e2) return this.commands.find((i) => i._name === e2 || i._aliases.includes(e2));
      }
      _findOption(e2) {
        return this.options.find((i) => i.is(e2));
      }
      _checkForMissingMandatoryOptions() {
        for (let e2 = this; e2; e2 = e2.parent) e2.options.forEach((i) => {
          i.mandatory && e2.getOptionValue(i.attributeName()) === void 0 && e2.missingMandatoryOptionValue(i);
        });
      }
      parseOptions(e2) {
        let i = [], r2 = [], n = i, s2 = e2.slice();
        function o2(l) {
          return l.length > 1 && l[0] === "-";
        }
        let a = null;
        for (; s2.length; ) {
          let l = s2.shift();
          if (l === "--") {
            n === r2 && n.push(l), n.push(...s2);
            break;
          }
          if (a && !o2(l)) {
            this.emit(`option:${a.name()}`, l);
            continue;
          }
          if (a = null, o2(l)) {
            let c2 = this._findOption(l);
            if (c2) {
              if (c2.required) {
                let u2 = s2.shift();
                u2 === void 0 && this.optionMissingArgument(c2), this.emit(`option:${c2.name()}`, u2);
              } else if (c2.optional) {
                let u2 = null;
                s2.length > 0 && !o2(s2[0]) && (u2 = s2.shift()), this.emit(`option:${c2.name()}`, u2);
              } else this.emit(`option:${c2.name()}`);
              a = c2.variadic ? c2 : null;
              continue;
            }
          }
          if (l.length > 2 && l[0] === "-" && l[1] !== "-") {
            let c2 = this._findOption(`-${l[1]}`);
            if (c2) {
              c2.required || c2.optional && this._combineFlagAndOptionalValue ? this.emit(`option:${c2.name()}`, l.slice(2)) : (this.emit(`option:${c2.name()}`), s2.unshift(`-${l.slice(2)}`));
              continue;
            }
          }
          if (/^--[^=]+=/.test(l)) {
            let c2 = l.indexOf("="), u2 = this._findOption(l.slice(0, c2));
            if (u2 && (u2.required || u2.optional)) {
              this.emit(`option:${u2.name()}`, l.slice(c2 + 1));
              continue;
            }
          }
          if (o2(l) && (n = r2), (this._enablePositionalOptions || this._passThroughOptions) && i.length === 0 && r2.length === 0) {
            if (this._findCommand(l)) {
              i.push(l), s2.length > 0 && r2.push(...s2);
              break;
            } else if (l === this._helpCommandName && this._hasImplicitHelpCommand()) {
              i.push(l), s2.length > 0 && i.push(...s2);
              break;
            } else if (this._defaultCommandName) {
              r2.push(l), s2.length > 0 && r2.push(...s2);
              break;
            }
          }
          if (this._passThroughOptions) {
            n.push(l), s2.length > 0 && n.push(...s2);
            break;
          }
          n.push(l);
        }
        return { operands: i, unknown: r2 };
      }
      opts() {
        if (this._storeOptionsAsProperties) {
          let e2 = {}, i = this.options.length;
          for (let r2 = 0; r2 < i; r2++) {
            let n = this.options[r2].attributeName();
            e2[n] = n === this._versionOptionName ? this._version : this[n];
          }
          return e2;
        }
        return this._optionValues;
      }
      _displayError(e2, i, r2) {
        this._outputConfiguration.outputError(`${r2}
`, this._outputConfiguration.writeErr), typeof this._showHelpAfterError == "string" ? this._outputConfiguration.writeErr(`${this._showHelpAfterError}
`) : this._showHelpAfterError && (this._outputConfiguration.writeErr(`
`), this.outputHelp({ error: true })), this._exit(e2, i, r2);
      }
      _parseOptionsEnv() {
        this.options.forEach((e2) => {
          if (e2.envVar && e2.envVar in process.env) {
            let i = e2.attributeName();
            (this.getOptionValue(i) === void 0 || ["default", "config", "env"].includes(this.getOptionValueSource(i))) && (e2.required || e2.optional ? this.emit(`optionEnv:${e2.name()}`, process.env[e2.envVar]) : this.emit(`optionEnv:${e2.name()}`));
          }
        });
      }
      missingArgument(e2) {
        let i = `error: missing required argument '${e2}'`;
        this._displayError(1, "commander.missingArgument", i);
      }
      optionMissingArgument(e2) {
        let i = `error: option '${e2.flags}' argument missing`;
        this._displayError(1, "commander.optionMissingArgument", i);
      }
      missingMandatoryOptionValue(e2) {
        let i = `error: required option '${e2.flags}' not specified`;
        this._displayError(1, "commander.missingMandatoryOptionValue", i);
      }
      unknownOption(e2) {
        if (this._allowUnknownOption) return;
        let i = "";
        if (e2.startsWith("--") && this._showSuggestionAfterError) {
          let n = [], s2 = this;
          do {
            let o2 = s2.createHelp().visibleOptions(s2).filter((a) => a.long).map((a) => a.long);
            n = n.concat(o2), s2 = s2.parent;
          } while (s2 && !s2._enablePositionalOptions);
          i = Gd(e2, n);
        }
        let r2 = `error: unknown option '${e2}'${i}`;
        this._displayError(1, "commander.unknownOption", r2);
      }
      _excessArguments(e2) {
        if (this._allowExcessArguments) return;
        let i = this._args.length, r2 = i === 1 ? "" : "s", s2 = `error: too many arguments${this.parent ? ` for '${this.name()}'` : ""}. Expected ${i} argument${r2} but got ${e2.length}.`;
        this._displayError(1, "commander.excessArguments", s2);
      }
      unknownCommand() {
        let e2 = this.args[0], i = "";
        if (this._showSuggestionAfterError) {
          let n = [];
          this.createHelp().visibleCommands(this).forEach((s2) => {
            n.push(s2.name()), s2.alias() && n.push(s2.alias());
          }), i = Gd(e2, n);
        }
        let r2 = `error: unknown command '${e2}'${i}`;
        this._displayError(1, "commander.unknownCommand", r2);
      }
      version(e2, i, r2) {
        if (e2 === void 0) return this._version;
        this._version = e2, i = i || "-V, --version", r2 = r2 || "output the version number";
        let n = this.createOption(i, r2);
        return this._versionOptionName = n.attributeName(), this.options.push(n), this.on("option:" + n.name(), () => {
          this._outputConfiguration.writeOut(`${e2}
`), this._exit(0, "commander.version", e2);
        }), this;
      }
      description(e2, i) {
        return e2 === void 0 && i === void 0 ? this._description : (this._description = e2, i && (this._argsDescription = i), this);
      }
      alias(e2) {
        if (e2 === void 0) return this._aliases[0];
        let i = this;
        if (this.commands.length !== 0 && this.commands[this.commands.length - 1]._executableHandler && (i = this.commands[this.commands.length - 1]), e2 === i._name) throw new Error("Command alias can't be the same as its name");
        return i._aliases.push(e2), this;
      }
      aliases(e2) {
        return e2 === void 0 ? this._aliases : (e2.forEach((i) => this.alias(i)), this);
      }
      usage(e2) {
        if (e2 === void 0) {
          if (this._usage) return this._usage;
          let i = this._args.map((r2) => qx(r2));
          return [].concat(this.options.length || this._hasHelpOption ? "[options]" : [], this.commands.length ? "[command]" : [], this._args.length ? i : []).join(" ");
        }
        return this._usage = e2, this;
      }
      name(e2) {
        return e2 === void 0 ? this._name : (this._name = e2, this);
      }
      helpInformation(e2) {
        let i = this.createHelp();
        return i.helpWidth === void 0 && (i.helpWidth = e2 && e2.error ? this._outputConfiguration.getErrHelpWidth() : this._outputConfiguration.getOutHelpWidth()), i.formatHelp(this, i);
      }
      _getHelpContext(e2) {
        e2 = e2 || {};
        let i = { error: !!e2.error }, r2;
        return i.error ? r2 = (n) => this._outputConfiguration.writeErr(n) : r2 = (n) => this._outputConfiguration.writeOut(n), i.write = e2.write || r2, i.command = this, i;
      }
      outputHelp(e2) {
        let i;
        typeof e2 == "function" && (i = e2, e2 = void 0);
        let r2 = this._getHelpContext(e2);
        Ll(this).reverse().forEach((s2) => s2.emit("beforeAllHelp", r2)), this.emit("beforeHelp", r2);
        let n = this.helpInformation(r2);
        if (i && (n = i(n), typeof n != "string" && !Buffer.isBuffer(n))) throw new Error("outputHelp callback must return a string or a Buffer");
        r2.write(n), this.emit(this._helpLongFlag), this.emit("afterHelp", r2), Ll(this).forEach((s2) => s2.emit("afterAllHelp", r2));
      }
      helpOption(e2, i) {
        if (typeof e2 == "boolean") return this._hasHelpOption = e2, this;
        this._helpFlags = e2 || this._helpFlags, this._helpDescription = i || this._helpDescription;
        let r2 = Ux(this._helpFlags);
        return this._helpShortFlag = r2.shortFlag, this._helpLongFlag = r2.longFlag, this;
      }
      help(e2) {
        this.outputHelp(e2);
        let i = process.exitCode || 0;
        i === 0 && e2 && typeof e2 != "function" && e2.error && (i = 1), this._exit(i, "commander.help", "(outputHelp)");
      }
      addHelpText(e2, i) {
        let r2 = ["beforeAll", "before", "after", "afterAll"];
        if (!r2.includes(e2)) throw new Error(`Unexpected value for position to addHelpText.
Expecting one of '${r2.join("', '")}'`);
        let n = `${e2}Help`;
        return this.on(n, (s2) => {
          let o2;
          typeof i == "function" ? o2 = i({ error: s2.error, command: s2.command }) : o2 = i, o2 && s2.write(`${o2}
`);
        }), this;
      }
    };
    function Yd(t, e2) {
      t._hasHelpOption && e2.find((r2) => r2 === t._helpLongFlag || r2 === t._helpShortFlag) && (t.outputHelp(), t._exit(0, "commander.helpDisplayed", "(outputHelp)"));
    }
    function Wd(t) {
      return t.map((e2) => {
        if (!e2.startsWith("--inspect")) return e2;
        let i, r2 = "127.0.0.1", n = "9229", s2;
        return (s2 = e2.match(/^(--inspect(-brk)?)$/)) !== null ? i = s2[1] : (s2 = e2.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null ? (i = s2[1], /^\d+$/.test(s2[3]) ? n = s2[3] : r2 = s2[3]) : (s2 = e2.match(/^(--inspect(-brk|-port)?)=([^:]+):(\d+)$/)) !== null && (i = s2[1], r2 = s2[3], n = s2[4]), i && n !== "0" ? `${i}=${r2}:${parseInt(n) + 1}` : e2;
      });
    }
    function Ll(t) {
      let e2 = [];
      for (let i = t; i; i = i.parent) e2.push(i);
      return e2;
    }
    Kd.Command = Bl;
  });
  var Xd = _2((qt, Qd) => {
    var { Argument: $x } = qs(), { Command: Jd } = zd(), { CommanderError: Vx, InvalidArgumentError: Zd } = cn(), { Help: Hx } = kl(), { Option: Gx } = Tl();
    qt = Qd.exports = new Jd();
    qt.program = qt;
    qt.Argument = $x;
    qt.Command = Jd;
    qt.CommanderError = Vx;
    qt.Help = Hx;
    qt.InvalidArgumentError = Zd;
    qt.InvalidOptionArgumentError = Zd;
    qt.Option = Gx;
  });
  var im = _2((em, tm) => {
    tm.exports = Cr;
    function Cr(t, e2) {
      if (this.stream = e2.stream || process.stderr, typeof e2 == "number") {
        var i = e2;
        e2 = {}, e2.total = i;
      } else {
        if (e2 = e2 || {}, typeof t != "string") throw new Error("format required");
        if (typeof e2.total != "number") throw new Error("total required");
      }
      this.fmt = t, this.curr = e2.curr || 0, this.total = e2.total, this.width = e2.width || this.total, this.clear = e2.clear, this.chars = { complete: e2.complete || "=", incomplete: e2.incomplete || "-", head: e2.head || e2.complete || "=" }, this.renderThrottle = e2.renderThrottle !== 0 ? e2.renderThrottle || 16 : 0, this.lastRender = -1 / 0, this.callback = e2.callback || function() {
      }, this.tokens = {}, this.lastDraw = "";
    }
    Cr.prototype.tick = function(t, e2) {
      if (t !== 0 && (t = t || 1), typeof t == "object" && (e2 = t, t = 1), e2 && (this.tokens = e2), this.curr == 0 && (this.start = /* @__PURE__ */ new Date()), this.curr += t, this.render(), this.curr >= this.total) {
        this.render(void 0, true), this.complete = true, this.terminate(), this.callback(this);
        return;
      }
    };
    Cr.prototype.render = function(t, e2) {
      if (e2 = e2 !== void 0 ? e2 : false, t && (this.tokens = t), !!this.stream.isTTY) {
        var i = Date.now(), r2 = i - this.lastRender;
        if (!(!e2 && r2 < this.renderThrottle)) {
          this.lastRender = i;
          var n = this.curr / this.total;
          n = Math.min(Math.max(n, 0), 1);
          var s2 = Math.floor(n * 100), o2, a, l, c2 = /* @__PURE__ */ new Date() - this.start, u2 = s2 == 100 ? 0 : c2 * (this.total / this.curr - 1), f2 = this.curr / (c2 / 1e3), d2 = this.fmt.replace(":current", this.curr).replace(":total", this.total).replace(":elapsed", isNaN(c2) ? "0.0" : (c2 / 1e3).toFixed(1)).replace(":eta", isNaN(u2) || !isFinite(u2) ? "0.0" : (u2 / 1e3).toFixed(1)).replace(":percent", s2.toFixed(0) + "%").replace(":rate", Math.round(f2)), g2 = Math.max(0, this.stream.columns - d2.replace(":bar", "").length);
          g2 && process.platform === "win32" && (g2 = g2 - 1);
          var m2 = Math.min(this.width, g2);
          if (l = Math.round(m2 * n), a = Array(Math.max(0, l + 1)).join(this.chars.complete), o2 = Array(Math.max(0, m2 - l + 1)).join(this.chars.incomplete), l > 0 && (a = a.slice(0, -1) + this.chars.head), d2 = d2.replace(":bar", a + o2), this.tokens) for (var y2 in this.tokens) d2 = d2.replace(":" + y2, this.tokens[y2]);
          this.lastDraw !== d2 && (this.stream.cursorTo(0), this.stream.write(d2), this.stream.clearLine(1), this.lastDraw = d2);
        }
      }
    };
    Cr.prototype.update = function(t, e2) {
      var i = Math.floor(t * this.total), r2 = i - this.curr;
      this.tick(r2, e2);
    };
    Cr.prototype.interrupt = function(t) {
      this.stream.clearLine(), this.stream.cursorTo(0), this.stream.write(t), this.stream.write(`
`), this.stream.write(this.lastDraw);
    };
    Cr.prototype.terminate = function() {
      this.clear ? this.stream.clearLine && (this.stream.clearLine(), this.stream.cursorTo(0)) : this.stream.write(`
`);
    };
  });
  var nm = _2((C2, rm) => {
    rm.exports = im();
  });
  var lm = _2((ri) => {
    Object.defineProperty(ri, "__esModule", { value: true });
    var sm = require$$14, Gi = { INVALID_ENCODING: "Invalid encoding provided. Please specify a valid encoding the internal Node.js Buffer supports.", INVALID_SMARTBUFFER_SIZE: "Invalid size provided. Size must be a valid integer greater than zero.", INVALID_SMARTBUFFER_BUFFER: "Invalid Buffer provided in SmartBufferOptions.", INVALID_SMARTBUFFER_OBJECT: "Invalid SmartBufferOptions object supplied to SmartBuffer constructor or factory methods.", INVALID_OFFSET: "An invalid offset value was provided.", INVALID_OFFSET_NON_NUMBER: "An invalid offset value was provided. A numeric value is required.", INVALID_LENGTH: "An invalid length value was provided.", INVALID_LENGTH_NON_NUMBER: "An invalid length value was provived. A numeric value is required.", INVALID_TARGET_OFFSET: "Target offset is beyond the bounds of the internal SmartBuffer data.", INVALID_TARGET_LENGTH: "Specified length value moves cursor beyong the bounds of the internal SmartBuffer data.", INVALID_READ_BEYOND_BOUNDS: "Attempted to read beyond the bounds of the managed data.", INVALID_WRITE_BEYOND_BOUNDS: "Attempted to write beyond the bounds of the managed data." };
    ri.ERRORS = Gi;
    function Yx(t) {
      if (!sm.Buffer.isEncoding(t)) throw new Error(Gi.INVALID_ENCODING);
    }
    ri.checkEncoding = Yx;
    function om(t) {
      return typeof t == "number" && isFinite(t) && Jx(t);
    }
    ri.isFiniteInteger = om;
    function am(t, e2) {
      if (typeof t == "number") {
        if (!om(t) || t < 0) throw new Error(e2 ? Gi.INVALID_OFFSET : Gi.INVALID_LENGTH);
      } else throw new Error(e2 ? Gi.INVALID_OFFSET_NON_NUMBER : Gi.INVALID_LENGTH_NON_NUMBER);
    }
    function Wx(t) {
      am(t, false);
    }
    ri.checkLengthValue = Wx;
    function Kx(t) {
      am(t, true);
    }
    ri.checkOffsetValue = Kx;
    function zx(t, e2) {
      if (t < 0 || t > e2.length) throw new Error(Gi.INVALID_TARGET_OFFSET);
    }
    ri.checkTargetOffset = zx;
    function Jx(t) {
      return typeof t == "number" && isFinite(t) && Math.floor(t) === t;
    }
    function Zx(t) {
      if (typeof BigInt == "undefined") throw new Error("Platform does not support JS BigInt type.");
      if (typeof sm.Buffer.prototype[t] == "undefined") throw new Error(`Platform does not support Buffer.prototype.${t}.`);
    }
    ri.bigIntAndBufferInt64Check = Zx;
  });
  var um = _2((Pl) => {
    Object.defineProperty(Pl, "__esModule", { value: true });
    var pe = lm(), cm = 4096, Qx = "utf8", Rl = class t {
      constructor(e2) {
        if (this.length = 0, this._encoding = Qx, this._writeOffset = 0, this._readOffset = 0, t.isSmartBufferOptions(e2)) if (e2.encoding && (pe.checkEncoding(e2.encoding), this._encoding = e2.encoding), e2.size) if (pe.isFiniteInteger(e2.size) && e2.size > 0) this._buff = Buffer.allocUnsafe(e2.size);
        else throw new Error(pe.ERRORS.INVALID_SMARTBUFFER_SIZE);
        else if (e2.buff) if (Buffer.isBuffer(e2.buff)) this._buff = e2.buff, this.length = e2.buff.length;
        else throw new Error(pe.ERRORS.INVALID_SMARTBUFFER_BUFFER);
        else this._buff = Buffer.allocUnsafe(cm);
        else {
          if (typeof e2 != "undefined") throw new Error(pe.ERRORS.INVALID_SMARTBUFFER_OBJECT);
          this._buff = Buffer.allocUnsafe(cm);
        }
      }
      static fromSize(e2, i) {
        return new this({ size: e2, encoding: i });
      }
      static fromBuffer(e2, i) {
        return new this({ buff: e2, encoding: i });
      }
      static fromOptions(e2) {
        return new this(e2);
      }
      static isSmartBufferOptions(e2) {
        let i = e2;
        return i && (i.encoding !== void 0 || i.size !== void 0 || i.buff !== void 0);
      }
      readInt8(e2) {
        return this._readNumberValue(Buffer.prototype.readInt8, 1, e2);
      }
      readInt16BE(e2) {
        return this._readNumberValue(Buffer.prototype.readInt16BE, 2, e2);
      }
      readInt16LE(e2) {
        return this._readNumberValue(Buffer.prototype.readInt16LE, 2, e2);
      }
      readInt32BE(e2) {
        return this._readNumberValue(Buffer.prototype.readInt32BE, 4, e2);
      }
      readInt32LE(e2) {
        return this._readNumberValue(Buffer.prototype.readInt32LE, 4, e2);
      }
      readBigInt64BE(e2) {
        return pe.bigIntAndBufferInt64Check("readBigInt64BE"), this._readNumberValue(Buffer.prototype.readBigInt64BE, 8, e2);
      }
      readBigInt64LE(e2) {
        return pe.bigIntAndBufferInt64Check("readBigInt64LE"), this._readNumberValue(Buffer.prototype.readBigInt64LE, 8, e2);
      }
      writeInt8(e2, i) {
        return this._writeNumberValue(Buffer.prototype.writeInt8, 1, e2, i), this;
      }
      insertInt8(e2, i) {
        return this._insertNumberValue(Buffer.prototype.writeInt8, 1, e2, i);
      }
      writeInt16BE(e2, i) {
        return this._writeNumberValue(Buffer.prototype.writeInt16BE, 2, e2, i);
      }
      insertInt16BE(e2, i) {
        return this._insertNumberValue(Buffer.prototype.writeInt16BE, 2, e2, i);
      }
      writeInt16LE(e2, i) {
        return this._writeNumberValue(Buffer.prototype.writeInt16LE, 2, e2, i);
      }
      insertInt16LE(e2, i) {
        return this._insertNumberValue(Buffer.prototype.writeInt16LE, 2, e2, i);
      }
      writeInt32BE(e2, i) {
        return this._writeNumberValue(Buffer.prototype.writeInt32BE, 4, e2, i);
      }
      insertInt32BE(e2, i) {
        return this._insertNumberValue(Buffer.prototype.writeInt32BE, 4, e2, i);
      }
      writeInt32LE(e2, i) {
        return this._writeNumberValue(Buffer.prototype.writeInt32LE, 4, e2, i);
      }
      insertInt32LE(e2, i) {
        return this._insertNumberValue(Buffer.prototype.writeInt32LE, 4, e2, i);
      }
      writeBigInt64BE(e2, i) {
        return pe.bigIntAndBufferInt64Check("writeBigInt64BE"), this._writeNumberValue(Buffer.prototype.writeBigInt64BE, 8, e2, i);
      }
      insertBigInt64BE(e2, i) {
        return pe.bigIntAndBufferInt64Check("writeBigInt64BE"), this._insertNumberValue(Buffer.prototype.writeBigInt64BE, 8, e2, i);
      }
      writeBigInt64LE(e2, i) {
        return pe.bigIntAndBufferInt64Check("writeBigInt64LE"), this._writeNumberValue(Buffer.prototype.writeBigInt64LE, 8, e2, i);
      }
      insertBigInt64LE(e2, i) {
        return pe.bigIntAndBufferInt64Check("writeBigInt64LE"), this._insertNumberValue(Buffer.prototype.writeBigInt64LE, 8, e2, i);
      }
      readUInt8(e2) {
        return this._readNumberValue(Buffer.prototype.readUInt8, 1, e2);
      }
      readUInt16BE(e2) {
        return this._readNumberValue(Buffer.prototype.readUInt16BE, 2, e2);
      }
      readUInt16LE(e2) {
        return this._readNumberValue(Buffer.prototype.readUInt16LE, 2, e2);
      }
      readUInt32BE(e2) {
        return this._readNumberValue(Buffer.prototype.readUInt32BE, 4, e2);
      }
      readUInt32LE(e2) {
        return this._readNumberValue(Buffer.prototype.readUInt32LE, 4, e2);
      }
      readBigUInt64BE(e2) {
        return pe.bigIntAndBufferInt64Check("readBigUInt64BE"), this._readNumberValue(Buffer.prototype.readBigUInt64BE, 8, e2);
      }
      readBigUInt64LE(e2) {
        return pe.bigIntAndBufferInt64Check("readBigUInt64LE"), this._readNumberValue(Buffer.prototype.readBigUInt64LE, 8, e2);
      }
      writeUInt8(e2, i) {
        return this._writeNumberValue(Buffer.prototype.writeUInt8, 1, e2, i);
      }
      insertUInt8(e2, i) {
        return this._insertNumberValue(Buffer.prototype.writeUInt8, 1, e2, i);
      }
      writeUInt16BE(e2, i) {
        return this._writeNumberValue(Buffer.prototype.writeUInt16BE, 2, e2, i);
      }
      insertUInt16BE(e2, i) {
        return this._insertNumberValue(Buffer.prototype.writeUInt16BE, 2, e2, i);
      }
      writeUInt16LE(e2, i) {
        return this._writeNumberValue(Buffer.prototype.writeUInt16LE, 2, e2, i);
      }
      insertUInt16LE(e2, i) {
        return this._insertNumberValue(Buffer.prototype.writeUInt16LE, 2, e2, i);
      }
      writeUInt32BE(e2, i) {
        return this._writeNumberValue(Buffer.prototype.writeUInt32BE, 4, e2, i);
      }
      insertUInt32BE(e2, i) {
        return this._insertNumberValue(Buffer.prototype.writeUInt32BE, 4, e2, i);
      }
      writeUInt32LE(e2, i) {
        return this._writeNumberValue(Buffer.prototype.writeUInt32LE, 4, e2, i);
      }
      insertUInt32LE(e2, i) {
        return this._insertNumberValue(Buffer.prototype.writeUInt32LE, 4, e2, i);
      }
      writeBigUInt64BE(e2, i) {
        return pe.bigIntAndBufferInt64Check("writeBigUInt64BE"), this._writeNumberValue(Buffer.prototype.writeBigUInt64BE, 8, e2, i);
      }
      insertBigUInt64BE(e2, i) {
        return pe.bigIntAndBufferInt64Check("writeBigUInt64BE"), this._insertNumberValue(Buffer.prototype.writeBigUInt64BE, 8, e2, i);
      }
      writeBigUInt64LE(e2, i) {
        return pe.bigIntAndBufferInt64Check("writeBigUInt64LE"), this._writeNumberValue(Buffer.prototype.writeBigUInt64LE, 8, e2, i);
      }
      insertBigUInt64LE(e2, i) {
        return pe.bigIntAndBufferInt64Check("writeBigUInt64LE"), this._insertNumberValue(Buffer.prototype.writeBigUInt64LE, 8, e2, i);
      }
      readFloatBE(e2) {
        return this._readNumberValue(Buffer.prototype.readFloatBE, 4, e2);
      }
      readFloatLE(e2) {
        return this._readNumberValue(Buffer.prototype.readFloatLE, 4, e2);
      }
      writeFloatBE(e2, i) {
        return this._writeNumberValue(Buffer.prototype.writeFloatBE, 4, e2, i);
      }
      insertFloatBE(e2, i) {
        return this._insertNumberValue(Buffer.prototype.writeFloatBE, 4, e2, i);
      }
      writeFloatLE(e2, i) {
        return this._writeNumberValue(Buffer.prototype.writeFloatLE, 4, e2, i);
      }
      insertFloatLE(e2, i) {
        return this._insertNumberValue(Buffer.prototype.writeFloatLE, 4, e2, i);
      }
      readDoubleBE(e2) {
        return this._readNumberValue(Buffer.prototype.readDoubleBE, 8, e2);
      }
      readDoubleLE(e2) {
        return this._readNumberValue(Buffer.prototype.readDoubleLE, 8, e2);
      }
      writeDoubleBE(e2, i) {
        return this._writeNumberValue(Buffer.prototype.writeDoubleBE, 8, e2, i);
      }
      insertDoubleBE(e2, i) {
        return this._insertNumberValue(Buffer.prototype.writeDoubleBE, 8, e2, i);
      }
      writeDoubleLE(e2, i) {
        return this._writeNumberValue(Buffer.prototype.writeDoubleLE, 8, e2, i);
      }
      insertDoubleLE(e2, i) {
        return this._insertNumberValue(Buffer.prototype.writeDoubleLE, 8, e2, i);
      }
      readString(e2, i) {
        let r2;
        typeof e2 == "number" ? (pe.checkLengthValue(e2), r2 = Math.min(e2, this.length - this._readOffset)) : (i = e2, r2 = this.length - this._readOffset), typeof i != "undefined" && pe.checkEncoding(i);
        let n = this._buff.slice(this._readOffset, this._readOffset + r2).toString(i || this._encoding);
        return this._readOffset += r2, n;
      }
      insertString(e2, i, r2) {
        return pe.checkOffsetValue(i), this._handleString(e2, true, i, r2);
      }
      writeString(e2, i, r2) {
        return this._handleString(e2, false, i, r2);
      }
      readStringNT(e2) {
        typeof e2 != "undefined" && pe.checkEncoding(e2);
        let i = this.length;
        for (let n = this._readOffset; n < this.length; n++) if (this._buff[n] === 0) {
          i = n;
          break;
        }
        let r2 = this._buff.slice(this._readOffset, i);
        return this._readOffset = i + 1, r2.toString(e2 || this._encoding);
      }
      insertStringNT(e2, i, r2) {
        return pe.checkOffsetValue(i), this.insertString(e2, i, r2), this.insertUInt8(0, i + e2.length), this;
      }
      writeStringNT(e2, i, r2) {
        return this.writeString(e2, i, r2), this.writeUInt8(0, typeof i == "number" ? i + e2.length : this.writeOffset), this;
      }
      readBuffer(e2) {
        typeof e2 != "undefined" && pe.checkLengthValue(e2);
        let i = typeof e2 == "number" ? e2 : this.length, r2 = Math.min(this.length, this._readOffset + i), n = this._buff.slice(this._readOffset, r2);
        return this._readOffset = r2, n;
      }
      insertBuffer(e2, i) {
        return pe.checkOffsetValue(i), this._handleBuffer(e2, true, i);
      }
      writeBuffer(e2, i) {
        return this._handleBuffer(e2, false, i);
      }
      readBufferNT() {
        let e2 = this.length;
        for (let r2 = this._readOffset; r2 < this.length; r2++) if (this._buff[r2] === 0) {
          e2 = r2;
          break;
        }
        let i = this._buff.slice(this._readOffset, e2);
        return this._readOffset = e2 + 1, i;
      }
      insertBufferNT(e2, i) {
        return pe.checkOffsetValue(i), this.insertBuffer(e2, i), this.insertUInt8(0, i + e2.length), this;
      }
      writeBufferNT(e2, i) {
        return typeof i != "undefined" && pe.checkOffsetValue(i), this.writeBuffer(e2, i), this.writeUInt8(0, typeof i == "number" ? i + e2.length : this._writeOffset), this;
      }
      clear() {
        return this._writeOffset = 0, this._readOffset = 0, this.length = 0, this;
      }
      remaining() {
        return this.length - this._readOffset;
      }
      get readOffset() {
        return this._readOffset;
      }
      set readOffset(e2) {
        pe.checkOffsetValue(e2), pe.checkTargetOffset(e2, this), this._readOffset = e2;
      }
      get writeOffset() {
        return this._writeOffset;
      }
      set writeOffset(e2) {
        pe.checkOffsetValue(e2), pe.checkTargetOffset(e2, this), this._writeOffset = e2;
      }
      get encoding() {
        return this._encoding;
      }
      set encoding(e2) {
        pe.checkEncoding(e2), this._encoding = e2;
      }
      get internalBuffer() {
        return this._buff;
      }
      toBuffer() {
        return this._buff.slice(0, this.length);
      }
      toString(e2) {
        let i = typeof e2 == "string" ? e2 : this._encoding;
        return pe.checkEncoding(i), this._buff.toString(i, 0, this.length);
      }
      destroy() {
        return this.clear(), this;
      }
      _handleString(e2, i, r2, n) {
        let s2 = this._writeOffset, o2 = this._encoding;
        typeof r2 == "number" ? s2 = r2 : typeof r2 == "string" && (pe.checkEncoding(r2), o2 = r2), typeof n == "string" && (pe.checkEncoding(n), o2 = n);
        let a = Buffer.byteLength(e2, o2);
        return i ? this.ensureInsertable(a, s2) : this._ensureWriteable(a, s2), this._buff.write(e2, s2, a, o2), i ? this._writeOffset += a : typeof r2 == "number" ? this._writeOffset = Math.max(this._writeOffset, s2 + a) : this._writeOffset += a, this;
      }
      _handleBuffer(e2, i, r2) {
        let n = typeof r2 == "number" ? r2 : this._writeOffset;
        return i ? this.ensureInsertable(e2.length, n) : this._ensureWriteable(e2.length, n), e2.copy(this._buff, n), i ? this._writeOffset += e2.length : typeof r2 == "number" ? this._writeOffset = Math.max(this._writeOffset, n + e2.length) : this._writeOffset += e2.length, this;
      }
      ensureReadable(e2, i) {
        let r2 = this._readOffset;
        if (typeof i != "undefined" && (pe.checkOffsetValue(i), r2 = i), r2 < 0 || r2 + e2 > this.length) throw new Error(pe.ERRORS.INVALID_READ_BEYOND_BOUNDS);
      }
      ensureInsertable(e2, i) {
        pe.checkOffsetValue(i), this._ensureCapacity(this.length + e2), i < this.length && this._buff.copy(this._buff, i + e2, i, this._buff.length), i + e2 > this.length ? this.length = i + e2 : this.length += e2;
      }
      _ensureWriteable(e2, i) {
        let r2 = typeof i == "number" ? i : this._writeOffset;
        this._ensureCapacity(r2 + e2), r2 + e2 > this.length && (this.length = r2 + e2);
      }
      _ensureCapacity(e2) {
        let i = this._buff.length;
        if (e2 > i) {
          let r2 = this._buff, n = i * 3 / 2 + 1;
          n < e2 && (n = e2), this._buff = Buffer.allocUnsafe(n), r2.copy(this._buff, 0, 0, i);
        }
      }
      _readNumberValue(e2, i, r2) {
        this.ensureReadable(i, r2);
        let n = e2.call(this._buff, typeof r2 == "number" ? r2 : this._readOffset);
        return typeof r2 == "undefined" && (this._readOffset += i), n;
      }
      _insertNumberValue(e2, i, r2, n) {
        return pe.checkOffsetValue(n), this.ensureInsertable(i, n), e2.call(this._buff, r2, n), this._writeOffset += i, this;
      }
      _writeNumberValue(e2, i, r2, n) {
        if (typeof n == "number") {
          if (n < 0) throw new Error(pe.ERRORS.INVALID_WRITE_BEYOND_BOUNDS);
          pe.checkOffsetValue(n);
        }
        let s2 = typeof n == "number" ? n : this._writeOffset;
        return this._ensureWriteable(i, s2), e2.call(this._buff, r2, s2), typeof n == "number" ? this._writeOffset = Math.max(this._writeOffset, s2 + i) : this._writeOffset += i, this;
      }
    };
    Pl.SmartBuffer = Rl;
  });
  var Ml = _2((Ne) => {
    Object.defineProperty(Ne, "__esModule", { value: true });
    Ne.SOCKS5_NO_ACCEPTABLE_AUTH = Ne.SOCKS5_CUSTOM_AUTH_END = Ne.SOCKS5_CUSTOM_AUTH_START = Ne.SOCKS_INCOMING_PACKET_SIZES = Ne.SocksClientState = Ne.Socks5Response = Ne.Socks5HostType = Ne.Socks5Auth = Ne.Socks4Response = Ne.SocksCommand = Ne.ERRORS = Ne.DEFAULT_TIMEOUT = void 0;
    var Xx = 3e4;
    Ne.DEFAULT_TIMEOUT = Xx;
    var eS = { InvalidSocksCommand: "An invalid SOCKS command was provided. Valid options are connect, bind, and associate.", InvalidSocksCommandForOperation: "An invalid SOCKS command was provided. Only a subset of commands are supported for this operation.", InvalidSocksCommandChain: "An invalid SOCKS command was provided. Chaining currently only supports the connect command.", InvalidSocksClientOptionsDestination: "An invalid destination host was provided.", InvalidSocksClientOptionsExistingSocket: "An invalid existing socket was provided. This should be an instance of stream.Duplex.", InvalidSocksClientOptionsProxy: "Invalid SOCKS proxy details were provided.", InvalidSocksClientOptionsTimeout: "An invalid timeout value was provided. Please enter a value above 0 (in ms).", InvalidSocksClientOptionsProxiesLength: "At least two socks proxies must be provided for chaining.", InvalidSocksClientOptionsCustomAuthRange: "Custom auth must be a value between 0x80 and 0xFE.", InvalidSocksClientOptionsCustomAuthOptions: "When a custom_auth_method is provided, custom_auth_request_handler, custom_auth_response_size, and custom_auth_response_handler must also be provided and valid.", NegotiationError: "Negotiation error", SocketClosed: "Socket closed", ProxyConnectionTimedOut: "Proxy connection timed out", InternalError: "SocksClient internal error (this should not happen)", InvalidSocks4HandshakeResponse: "Received invalid Socks4 handshake response", Socks4ProxyRejectedConnection: "Socks4 Proxy rejected connection", InvalidSocks4IncomingConnectionResponse: "Socks4 invalid incoming connection response", Socks4ProxyRejectedIncomingBoundConnection: "Socks4 Proxy rejected incoming bound connection", InvalidSocks5InitialHandshakeResponse: "Received invalid Socks5 initial handshake response", InvalidSocks5IntiailHandshakeSocksVersion: "Received invalid Socks5 initial handshake (invalid socks version)", InvalidSocks5InitialHandshakeNoAcceptedAuthType: "Received invalid Socks5 initial handshake (no accepted authentication type)", InvalidSocks5InitialHandshakeUnknownAuthType: "Received invalid Socks5 initial handshake (unknown authentication type)", Socks5AuthenticationFailed: "Socks5 Authentication failed", InvalidSocks5FinalHandshake: "Received invalid Socks5 final handshake response", InvalidSocks5FinalHandshakeRejected: "Socks5 proxy rejected connection", InvalidSocks5IncomingConnectionResponse: "Received invalid Socks5 incoming connection response", Socks5ProxyRejectedIncomingBoundConnection: "Socks5 Proxy rejected incoming bound connection" };
    Ne.ERRORS = eS;
    var tS = { Socks5InitialHandshakeResponse: 2, Socks5UserPassAuthenticationResponse: 2, Socks5ResponseHeader: 5, Socks5ResponseIPv4: 10, Socks5ResponseIPv6: 22, Socks5ResponseHostname: (t) => t + 7, Socks4Response: 8 };
    Ne.SOCKS_INCOMING_PACKET_SIZES = tS;
    var fm;
    (function(t) {
      t[t.connect = 1] = "connect", t[t.bind = 2] = "bind", t[t.associate = 3] = "associate";
    })(fm || (Ne.SocksCommand = fm = {}));
    var hm;
    (function(t) {
      t[t.Granted = 90] = "Granted", t[t.Failed = 91] = "Failed", t[t.Rejected = 92] = "Rejected", t[t.RejectedIdent = 93] = "RejectedIdent";
    })(hm || (Ne.Socks4Response = hm = {}));
    var pm;
    (function(t) {
      t[t.NoAuth = 0] = "NoAuth", t[t.GSSApi = 1] = "GSSApi", t[t.UserPass = 2] = "UserPass";
    })(pm || (Ne.Socks5Auth = pm = {}));
    var iS = 128;
    Ne.SOCKS5_CUSTOM_AUTH_START = iS;
    var rS = 254;
    Ne.SOCKS5_CUSTOM_AUTH_END = rS;
    var nS = 255;
    Ne.SOCKS5_NO_ACCEPTABLE_AUTH = nS;
    var dm;
    (function(t) {
      t[t.Granted = 0] = "Granted", t[t.Failure = 1] = "Failure", t[t.NotAllowed = 2] = "NotAllowed", t[t.NetworkUnreachable = 3] = "NetworkUnreachable", t[t.HostUnreachable = 4] = "HostUnreachable", t[t.ConnectionRefused = 5] = "ConnectionRefused", t[t.TTLExpired = 6] = "TTLExpired", t[t.CommandNotSupported = 7] = "CommandNotSupported", t[t.AddressNotSupported = 8] = "AddressNotSupported";
    })(dm || (Ne.Socks5Response = dm = {}));
    var mm;
    (function(t) {
      t[t.IPv4 = 1] = "IPv4", t[t.Hostname = 3] = "Hostname", t[t.IPv6 = 4] = "IPv6";
    })(mm || (Ne.Socks5HostType = mm = {}));
    var gm;
    (function(t) {
      t[t.Created = 0] = "Created", t[t.Connecting = 1] = "Connecting", t[t.Connected = 2] = "Connected", t[t.SentInitialHandshake = 3] = "SentInitialHandshake", t[t.ReceivedInitialHandshakeResponse = 4] = "ReceivedInitialHandshakeResponse", t[t.SentAuthentication = 5] = "SentAuthentication", t[t.ReceivedAuthenticationResponse = 6] = "ReceivedAuthenticationResponse", t[t.SentFinalHandshake = 7] = "SentFinalHandshake", t[t.ReceivedFinalResponse = 8] = "ReceivedFinalResponse", t[t.BoundWaitingForConnection = 9] = "BoundWaitingForConnection", t[t.Established = 10] = "Established", t[t.Disconnected = 11] = "Disconnected", t[t.Error = 99] = "Error";
    })(gm || (Ne.SocksClientState = gm = {}));
  });
  var ql = _2((Tr) => {
    Object.defineProperty(Tr, "__esModule", { value: true });
    Tr.shuffleArray = Tr.SocksClientError = void 0;
    var Fl = class extends Error {
      constructor(e2, i) {
        super(e2), this.options = i;
      }
    };
    Tr.SocksClientError = Fl;
    function sS(t) {
      for (let e2 = t.length - 1; e2 > 0; e2--) {
        let i = Math.floor(Math.random() * (e2 + 1));
        [t[e2], t[i]] = [t[i], t[e2]];
      }
    }
    Tr.shuffleArray = sS;
  });
  var Dl = _2((Ar) => {
    Object.defineProperty(Ar, "__esModule", { value: true });
    Ar.isCorrect = Ar.isInSubnet = void 0;
    function oS(t) {
      return this.subnetMask < t.subnetMask ? false : this.mask(t.subnetMask) === t.mask();
    }
    Ar.isInSubnet = oS;
    function aS(t) {
      return function() {
        return this.addressMinusSuffix !== this.correctForm() ? false : this.subnetMask === t && !this.parsedSubnet ? true : this.parsedSubnet === String(this.subnetMask);
      };
    }
    Ar.isCorrect = aS;
  });
  var jl = _2((Ht) => {
    Object.defineProperty(Ht, "__esModule", { value: true });
    Ht.RE_SUBNET_STRING = Ht.RE_ADDRESS = Ht.GROUPS = Ht.BITS = void 0;
    Ht.BITS = 32;
    Ht.GROUPS = 4;
    Ht.RE_ADDRESS = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/g;
    Ht.RE_SUBNET_STRING = /\/\d{1,2}$/;
  });
  var js = _2((Ds) => {
    Object.defineProperty(Ds, "__esModule", { value: true });
    Ds.AddressError = void 0;
    var Ul = class extends Error {
      constructor(e2, i) {
        super(e2), this.name = "AddressError", i !== null && (this.parseMessage = i);
      }
    };
    Ds.AddressError = Ul;
  });
  var $l = _2((Us, vm) => {
    (function() {
      var t, e2 = 244837814094590, i = (e2 & 16777215) == 15715070;
      function r2(h2, p, v2) {
        h2 != null && (typeof h2 == "number" ? this.fromNumber(h2, p, v2) : p == null && typeof h2 != "string" ? this.fromString(h2, 256) : this.fromString(h2, p));
      }
      function n() {
        return new r2(null);
      }
      function s2(h2, p, v2, w2, B2, M) {
        for (; --M >= 0; ) {
          var G2 = p * this[h2++] + v2[w2] + B2;
          B2 = Math.floor(G2 / 67108864), v2[w2++] = G2 & 67108863;
        }
        return B2;
      }
      function o2(h2, p, v2, w2, B2, M) {
        for (var G2 = p & 32767, K = p >> 15; --M >= 0; ) {
          var Re = this[h2] & 32767, Ye = this[h2++] >> 15, kt = K * Re + Ye * G2;
          Re = G2 * Re + ((kt & 32767) << 15) + v2[w2] + (B2 & 1073741823), B2 = (Re >>> 30) + (kt >>> 15) + K * Ye + (B2 >>> 30), v2[w2++] = Re & 1073741823;
        }
        return B2;
      }
      function a(h2, p, v2, w2, B2, M) {
        for (var G2 = p & 16383, K = p >> 14; --M >= 0; ) {
          var Re = this[h2] & 16383, Ye = this[h2++] >> 14, kt = K * Re + Ye * G2;
          Re = G2 * Re + ((kt & 16383) << 14) + v2[w2] + B2, B2 = (Re >> 28) + (kt >> 14) + K * Ye, v2[w2++] = Re & 268435455;
        }
        return B2;
      }
      var l = typeof navigator != "undefined";
      l && i && navigator.appName == "Microsoft Internet Explorer" ? (r2.prototype.am = o2, t = 30) : l && i && navigator.appName != "Netscape" ? (r2.prototype.am = s2, t = 26) : (r2.prototype.am = a, t = 28), r2.prototype.DB = t, r2.prototype.DM = (1 << t) - 1, r2.prototype.DV = 1 << t;
      var c2 = 52;
      r2.prototype.FV = Math.pow(2, c2), r2.prototype.F1 = c2 - t, r2.prototype.F2 = 2 * t - c2;
      var u2 = "0123456789abcdefghijklmnopqrstuvwxyz", f2 = new Array(), d2, g2;
      for (d2 = 48, g2 = 0; g2 <= 9; ++g2) f2[d2++] = g2;
      for (d2 = 97, g2 = 10; g2 < 36; ++g2) f2[d2++] = g2;
      for (d2 = 65, g2 = 10; g2 < 36; ++g2) f2[d2++] = g2;
      function m2(h2) {
        return u2.charAt(h2);
      }
      function y2(h2, p) {
        var v2 = f2[h2.charCodeAt(p)];
        return v2 == null ? -1 : v2;
      }
      function b(h2) {
        for (var p = this.t - 1; p >= 0; --p) h2[p] = this[p];
        h2.t = this.t, h2.s = this.s;
      }
      function x2(h2) {
        this.t = 1, this.s = h2 < 0 ? -1 : 0, h2 > 0 ? this[0] = h2 : h2 < -1 ? this[0] = h2 + this.DV : this.t = 0;
      }
      function E(h2) {
        var p = n();
        return p.fromInt(h2), p;
      }
      function O2(h2, p) {
        var v2;
        if (p == 16) v2 = 4;
        else if (p == 8) v2 = 3;
        else if (p == 256) v2 = 8;
        else if (p == 2) v2 = 1;
        else if (p == 32) v2 = 5;
        else if (p == 4) v2 = 2;
        else {
          this.fromRadix(h2, p);
          return;
        }
        this.t = 0, this.s = 0;
        for (var w2 = h2.length, B2 = false, M = 0; --w2 >= 0; ) {
          var G2 = v2 == 8 ? h2[w2] & 255 : y2(h2, w2);
          if (G2 < 0) {
            h2.charAt(w2) == "-" && (B2 = true);
            continue;
          }
          B2 = false, M == 0 ? this[this.t++] = G2 : M + v2 > this.DB ? (this[this.t - 1] |= (G2 & (1 << this.DB - M) - 1) << M, this[this.t++] = G2 >> this.DB - M) : this[this.t - 1] |= G2 << M, M += v2, M >= this.DB && (M -= this.DB);
        }
        v2 == 8 && (h2[0] & 128) != 0 && (this.s = -1, M > 0 && (this[this.t - 1] |= (1 << this.DB - M) - 1 << M)), this.clamp(), B2 && r2.ZERO.subTo(this, this);
      }
      function k2() {
        for (var h2 = this.s & this.DM; this.t > 0 && this[this.t - 1] == h2; ) --this.t;
      }
      function S2(h2) {
        if (this.s < 0) return "-" + this.negate().toString(h2);
        var p;
        if (h2 == 16) p = 4;
        else if (h2 == 8) p = 3;
        else if (h2 == 2) p = 1;
        else if (h2 == 32) p = 5;
        else if (h2 == 4) p = 2;
        else return this.toRadix(h2);
        var v2 = (1 << p) - 1, w2, B2 = false, M = "", G2 = this.t, K = this.DB - G2 * this.DB % p;
        if (G2-- > 0) for (K < this.DB && (w2 = this[G2] >> K) > 0 && (B2 = true, M = m2(w2)); G2 >= 0; ) K < p ? (w2 = (this[G2] & (1 << K) - 1) << p - K, w2 |= this[--G2] >> (K += this.DB - p)) : (w2 = this[G2] >> (K -= p) & v2, K <= 0 && (K += this.DB, --G2)), w2 > 0 && (B2 = true), B2 && (M += m2(w2));
        return B2 ? M : "0";
      }
      function R2() {
        var h2 = n();
        return r2.ZERO.subTo(this, h2), h2;
      }
      function T2() {
        return this.s < 0 ? this.negate() : this;
      }
      function A2(h2) {
        var p = this.s - h2.s;
        if (p != 0) return p;
        var v2 = this.t;
        if (p = v2 - h2.t, p != 0) return this.s < 0 ? -p : p;
        for (; --v2 >= 0; ) if ((p = this[v2] - h2[v2]) != 0) return p;
        return 0;
      }
      function C2(h2) {
        var p = 1, v2;
        return (v2 = h2 >>> 16) != 0 && (h2 = v2, p += 16), (v2 = h2 >> 8) != 0 && (h2 = v2, p += 8), (v2 = h2 >> 4) != 0 && (h2 = v2, p += 4), (v2 = h2 >> 2) != 0 && (h2 = v2, p += 2), (v2 = h2 >> 1) != 0 && (h2 = v2, p += 1), p;
      }
      function L2() {
        return this.t <= 0 ? 0 : this.DB * (this.t - 1) + C2(this[this.t - 1] ^ this.s & this.DM);
      }
      function P2(h2, p) {
        var v2;
        for (v2 = this.t - 1; v2 >= 0; --v2) p[v2 + h2] = this[v2];
        for (v2 = h2 - 1; v2 >= 0; --v2) p[v2] = 0;
        p.t = this.t + h2, p.s = this.s;
      }
      function U(h2, p) {
        for (var v2 = h2; v2 < this.t; ++v2) p[v2 - h2] = this[v2];
        p.t = Math.max(this.t - h2, 0), p.s = this.s;
      }
      function q2(h2, p) {
        var v2 = h2 % this.DB, w2 = this.DB - v2, B2 = (1 << w2) - 1, M = Math.floor(h2 / this.DB), G2 = this.s << v2 & this.DM, K;
        for (K = this.t - 1; K >= 0; --K) p[K + M + 1] = this[K] >> w2 | G2, G2 = (this[K] & B2) << v2;
        for (K = M - 1; K >= 0; --K) p[K] = 0;
        p[M] = G2, p.t = this.t + M + 1, p.s = this.s, p.clamp();
      }
      function H(h2, p) {
        p.s = this.s;
        var v2 = Math.floor(h2 / this.DB);
        if (v2 >= this.t) {
          p.t = 0;
          return;
        }
        var w2 = h2 % this.DB, B2 = this.DB - w2, M = (1 << w2) - 1;
        p[0] = this[v2] >> w2;
        for (var G2 = v2 + 1; G2 < this.t; ++G2) p[G2 - v2 - 1] |= (this[G2] & M) << B2, p[G2 - v2] = this[G2] >> w2;
        w2 > 0 && (p[this.t - v2 - 1] |= (this.s & M) << B2), p.t = this.t - v2, p.clamp();
      }
      function j(h2, p) {
        for (var v2 = 0, w2 = 0, B2 = Math.min(h2.t, this.t); v2 < B2; ) w2 += this[v2] - h2[v2], p[v2++] = w2 & this.DM, w2 >>= this.DB;
        if (h2.t < this.t) {
          for (w2 -= h2.s; v2 < this.t; ) w2 += this[v2], p[v2++] = w2 & this.DM, w2 >>= this.DB;
          w2 += this.s;
        } else {
          for (w2 += this.s; v2 < h2.t; ) w2 -= h2[v2], p[v2++] = w2 & this.DM, w2 >>= this.DB;
          w2 -= h2.s;
        }
        p.s = w2 < 0 ? -1 : 0, w2 < -1 ? p[v2++] = this.DV + w2 : w2 > 0 && (p[v2++] = w2), p.t = v2, p.clamp();
      }
      function V2(h2, p) {
        var v2 = this.abs(), w2 = h2.abs(), B2 = v2.t;
        for (p.t = B2 + w2.t; --B2 >= 0; ) p[B2] = 0;
        for (B2 = 0; B2 < w2.t; ++B2) p[B2 + v2.t] = v2.am(0, w2[B2], p, B2, 0, v2.t);
        p.s = 0, p.clamp(), this.s != h2.s && r2.ZERO.subTo(p, p);
      }
      function W2(h2) {
        for (var p = this.abs(), v2 = h2.t = 2 * p.t; --v2 >= 0; ) h2[v2] = 0;
        for (v2 = 0; v2 < p.t - 1; ++v2) {
          var w2 = p.am(v2, p[v2], h2, 2 * v2, 0, 1);
          (h2[v2 + p.t] += p.am(v2 + 1, 2 * p[v2], h2, 2 * v2 + 1, w2, p.t - v2 - 1)) >= p.DV && (h2[v2 + p.t] -= p.DV, h2[v2 + p.t + 1] = 1);
        }
        h2.t > 0 && (h2[h2.t - 1] += p.am(v2, p[v2], h2, 2 * v2, 0, 1)), h2.s = 0, h2.clamp();
      }
      function Q2(h2, p, v2) {
        var w2 = h2.abs();
        if (!(w2.t <= 0)) {
          var B2 = this.abs();
          if (B2.t < w2.t) {
            p != null && p.fromInt(0), v2 != null && this.copyTo(v2);
            return;
          }
          v2 == null && (v2 = n());
          var M = n(), G2 = this.s, K = h2.s, Re = this.DB - C2(w2[w2.t - 1]);
          Re > 0 ? (w2.lShiftTo(Re, M), B2.lShiftTo(Re, v2)) : (w2.copyTo(M), B2.copyTo(v2));
          var Ye = M.t, kt = M[Ye - 1];
          if (kt != 0) {
            var bt = kt * (1 << this.F1) + (Ye > 1 ? M[Ye - 2] >> this.F2 : 0), ei = this.FV / bt, hs = (1 << this.F1) / bt, Rt = 1 << this.F2, Pt = v2.t, ps = Pt - Ye, hi = p == null ? n() : p;
            for (M.dlShiftTo(ps, hi), v2.compareTo(hi) >= 0 && (v2[v2.t++] = 1, v2.subTo(hi, v2)), r2.ONE.dlShiftTo(Ye, hi), hi.subTo(M, M); M.t < Ye; ) M[M.t++] = 0;
            for (; --ps >= 0; ) {
              var _a = v2[--Pt] == kt ? this.DM : Math.floor(v2[Pt] * ei + (v2[Pt - 1] + Rt) * hs);
              if ((v2[Pt] += M.am(0, _a, v2, ps, 0, Ye)) < _a) for (M.dlShiftTo(ps, hi), v2.subTo(hi, v2); v2[Pt] < --_a; ) v2.subTo(hi, v2);
            }
            p != null && (v2.drShiftTo(Ye, p), G2 != K && r2.ZERO.subTo(p, p)), v2.t = Ye, v2.clamp(), Re > 0 && v2.rShiftTo(Re, v2), G2 < 0 && r2.ZERO.subTo(v2, v2);
          }
        }
      }
      function Y2(h2) {
        var p = n();
        return this.abs().divRemTo(h2, null, p), this.s < 0 && p.compareTo(r2.ZERO) > 0 && h2.subTo(p, p), p;
      }
      function de(h2) {
        this.m = h2;
      }
      function ae(h2) {
        return h2.s < 0 || h2.compareTo(this.m) >= 0 ? h2.mod(this.m) : h2;
      }
      function ne(h2) {
        return h2;
      }
      function ue2(h2) {
        h2.divRemTo(this.m, null, h2);
      }
      function N2(h2, p, v2) {
        h2.multiplyTo(p, v2), this.reduce(v2);
      }
      function X2(h2, p) {
        h2.squareTo(p), this.reduce(p);
      }
      de.prototype.convert = ae, de.prototype.revert = ne, de.prototype.reduce = ue2, de.prototype.mulTo = N2, de.prototype.sqrTo = X2;
      function ke() {
        if (this.t < 1) return 0;
        var h2 = this[0];
        if ((h2 & 1) == 0) return 0;
        var p = h2 & 3;
        return p = p * (2 - (h2 & 15) * p) & 15, p = p * (2 - (h2 & 255) * p) & 255, p = p * (2 - ((h2 & 65535) * p & 65535)) & 65535, p = p * (2 - h2 * p % this.DV) % this.DV, p > 0 ? this.DV - p : -p;
      }
      function be(h2) {
        this.m = h2, this.mp = h2.invDigit(), this.mpl = this.mp & 32767, this.mph = this.mp >> 15, this.um = (1 << h2.DB - 15) - 1, this.mt2 = 2 * h2.t;
      }
      function ge(h2) {
        var p = n();
        return h2.abs().dlShiftTo(this.m.t, p), p.divRemTo(this.m, null, p), h2.s < 0 && p.compareTo(r2.ZERO) > 0 && this.m.subTo(p, p), p;
      }
      function ve2(h2) {
        var p = n();
        return h2.copyTo(p), this.reduce(p), p;
      }
      function fe(h2) {
        for (; h2.t <= this.mt2; ) h2[h2.t++] = 0;
        for (var p = 0; p < this.m.t; ++p) {
          var v2 = h2[p] & 32767, w2 = v2 * this.mpl + ((v2 * this.mph + (h2[p] >> 15) * this.mpl & this.um) << 15) & h2.DM;
          for (v2 = p + this.m.t, h2[v2] += this.m.am(0, w2, h2, p, 0, this.m.t); h2[v2] >= h2.DV; ) h2[v2] -= h2.DV, h2[++v2]++;
        }
        h2.clamp(), h2.drShiftTo(this.m.t, h2), h2.compareTo(this.m) >= 0 && h2.subTo(this.m, h2);
      }
      function z2(h2, p) {
        h2.squareTo(p), this.reduce(p);
      }
      function $(h2, p, v2) {
        h2.multiplyTo(p, v2), this.reduce(v2);
      }
      be.prototype.convert = ge, be.prototype.revert = ve2, be.prototype.reduce = fe, be.prototype.mulTo = $, be.prototype.sqrTo = z2;
      function Ce() {
        return (this.t > 0 ? this[0] & 1 : this.s) == 0;
      }
      function re(h2, p) {
        if (h2 > 4294967295 || h2 < 1) return r2.ONE;
        var v2 = n(), w2 = n(), B2 = p.convert(this), M = C2(h2) - 1;
        for (B2.copyTo(v2); --M >= 0; ) if (p.sqrTo(v2, w2), (h2 & 1 << M) > 0) p.mulTo(w2, B2, v2);
        else {
          var G2 = v2;
          v2 = w2, w2 = G2;
        }
        return p.revert(v2);
      }
      function he(h2, p) {
        var v2;
        return h2 < 256 || p.isEven() ? v2 = new de(p) : v2 = new be(p), this.exp(h2, v2);
      }
      r2.prototype.copyTo = b, r2.prototype.fromInt = x2, r2.prototype.fromString = O2, r2.prototype.clamp = k2, r2.prototype.dlShiftTo = P2, r2.prototype.drShiftTo = U, r2.prototype.lShiftTo = q2, r2.prototype.rShiftTo = H, r2.prototype.subTo = j, r2.prototype.multiplyTo = V2, r2.prototype.squareTo = W2, r2.prototype.divRemTo = Q2, r2.prototype.invDigit = ke, r2.prototype.isEven = Ce, r2.prototype.exp = re, r2.prototype.toString = S2, r2.prototype.negate = R2, r2.prototype.abs = T2, r2.prototype.compareTo = A2, r2.prototype.bitLength = L2, r2.prototype.mod = Y2, r2.prototype.modPowInt = he, r2.ZERO = E(0), r2.ONE = E(1);
      function ft() {
        var h2 = n();
        return this.copyTo(h2), h2;
      }
      function vt() {
        if (this.s < 0) {
          if (this.t == 1) return this[0] - this.DV;
          if (this.t == 0) return -1;
        } else {
          if (this.t == 1) return this[0];
          if (this.t == 0) return 0;
        }
        return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
      }
      function I2() {
        return this.t == 0 ? this.s : this[0] << 24 >> 24;
      }
      function Z() {
        return this.t == 0 ? this.s : this[0] << 16 >> 16;
      }
      function te(h2) {
        return Math.floor(Math.LN2 * this.DB / Math.log(h2));
      }
      function ee() {
        return this.s < 0 ? -1 : this.t <= 0 || this.t == 1 && this[0] <= 0 ? 0 : 1;
      }
      function le2(h2) {
        if (h2 == null && (h2 = 10), this.signum() == 0 || h2 < 2 || h2 > 36) return "0";
        var p = this.chunkSize(h2), v2 = Math.pow(h2, p), w2 = E(v2), B2 = n(), M = n(), G2 = "";
        for (this.divRemTo(w2, B2, M); B2.signum() > 0; ) G2 = (v2 + M.intValue()).toString(h2).substr(1) + G2, B2.divRemTo(w2, B2, M);
        return M.intValue().toString(h2) + G2;
      }
      function ce2(h2, p) {
        this.fromInt(0), p == null && (p = 10);
        for (var v2 = this.chunkSize(p), w2 = Math.pow(p, v2), B2 = false, M = 0, G2 = 0, K = 0; K < h2.length; ++K) {
          var Re = y2(h2, K);
          if (Re < 0) {
            h2.charAt(K) == "-" && this.signum() == 0 && (B2 = true);
            continue;
          }
          G2 = p * G2 + Re, ++M >= v2 && (this.dMultiply(w2), this.dAddOffset(G2, 0), M = 0, G2 = 0);
        }
        M > 0 && (this.dMultiply(Math.pow(p, M)), this.dAddOffset(G2, 0)), B2 && r2.ZERO.subTo(this, this);
      }
      function _e(h2, p, v2) {
        if (typeof p == "number") if (h2 < 2) this.fromInt(1);
        else for (this.fromNumber(h2, v2), this.testBit(h2 - 1) || this.bitwiseTo(r2.ONE.shiftLeft(h2 - 1), oe, this), this.isEven() && this.dAddOffset(1, 0); !this.isProbablePrime(p); ) this.dAddOffset(2, 0), this.bitLength() > h2 && this.subTo(r2.ONE.shiftLeft(h2 - 1), this);
        else {
          var w2 = new Array(), B2 = h2 & 7;
          w2.length = (h2 >> 3) + 1, p.nextBytes(w2), B2 > 0 ? w2[0] &= (1 << B2) - 1 : w2[0] = 0, this.fromString(w2, 256);
        }
      }
      function we() {
        var h2 = this.t, p = new Array();
        p[0] = this.s;
        var v2 = this.DB - h2 * this.DB % 8, w2, B2 = 0;
        if (h2-- > 0) for (v2 < this.DB && (w2 = this[h2] >> v2) != (this.s & this.DM) >> v2 && (p[B2++] = w2 | this.s << this.DB - v2); h2 >= 0; ) v2 < 8 ? (w2 = (this[h2] & (1 << v2) - 1) << 8 - v2, w2 |= this[--h2] >> (v2 += this.DB - 8)) : (w2 = this[h2] >> (v2 -= 8) & 255, v2 <= 0 && (v2 += this.DB, --h2)), (w2 & 128) != 0 && (w2 |= -256), B2 == 0 && (this.s & 128) != (w2 & 128) && ++B2, (B2 > 0 || w2 != this.s) && (p[B2++] = w2);
        return p;
      }
      function Be(h2) {
        return this.compareTo(h2) == 0;
      }
      function Te(h2) {
        return this.compareTo(h2) < 0 ? this : h2;
      }
      function D(h2) {
        return this.compareTo(h2) > 0 ? this : h2;
      }
      function J2(h2, p, v2) {
        var w2, B2, M = Math.min(h2.t, this.t);
        for (w2 = 0; w2 < M; ++w2) v2[w2] = p(this[w2], h2[w2]);
        if (h2.t < this.t) {
          for (B2 = h2.s & this.DM, w2 = M; w2 < this.t; ++w2) v2[w2] = p(this[w2], B2);
          v2.t = this.t;
        } else {
          for (B2 = this.s & this.DM, w2 = M; w2 < h2.t; ++w2) v2[w2] = p(B2, h2[w2]);
          v2.t = h2.t;
        }
        v2.s = p(this.s, h2.s), v2.clamp();
      }
      function se(h2, p) {
        return h2 & p;
      }
      function Ie2(h2) {
        var p = n();
        return this.bitwiseTo(h2, se, p), p;
      }
      function oe(h2, p) {
        return h2 | p;
      }
      function me(h2) {
        var p = n();
        return this.bitwiseTo(h2, oe, p), p;
      }
      function Ee(h2, p) {
        return h2 ^ p;
      }
      function ie(h2) {
        var p = n();
        return this.bitwiseTo(h2, Ee, p), p;
      }
      function xe(h2, p) {
        return h2 & ~p;
      }
      function je(h2) {
        var p = n();
        return this.bitwiseTo(h2, xe, p), p;
      }
      function Ae() {
        for (var h2 = n(), p = 0; p < this.t; ++p) h2[p] = this.DM & ~this[p];
        return h2.t = this.t, h2.s = ~this.s, h2;
      }
      function ht(h2) {
        var p = n();
        return h2 < 0 ? this.rShiftTo(-h2, p) : this.lShiftTo(h2, p), p;
      }
      function Et(h2) {
        var p = n();
        return h2 < 0 ? this.lShiftTo(-h2, p) : this.rShiftTo(h2, p), p;
      }
      function Qt(h2) {
        if (h2 == 0) return -1;
        var p = 0;
        return (h2 & 65535) == 0 && (h2 >>= 16, p += 16), (h2 & 255) == 0 && (h2 >>= 8, p += 8), (h2 & 15) == 0 && (h2 >>= 4, p += 4), (h2 & 3) == 0 && (h2 >>= 2, p += 2), (h2 & 1) == 0 && ++p, p;
      }
      function ui() {
        for (var h2 = 0; h2 < this.t; ++h2) if (this[h2] != 0) return h2 * this.DB + Qt(this[h2]);
        return this.s < 0 ? this.t * this.DB : -1;
      }
      function fi(h2) {
        for (var p = 0; h2 != 0; ) h2 &= h2 - 1, ++p;
        return p;
      }
      function Ni() {
        for (var h2 = 0, p = this.s & this.DM, v2 = 0; v2 < this.t; ++v2) h2 += fi(this[v2] ^ p);
        return h2;
      }
      function Li(h2) {
        var p = Math.floor(h2 / this.DB);
        return p >= this.t ? this.s != 0 : (this[p] & 1 << h2 % this.DB) != 0;
      }
      function fr(h2, p) {
        var v2 = r2.ONE.shiftLeft(h2);
        return this.bitwiseTo(v2, p, v2), v2;
      }
      function Bi(h2) {
        return this.changeBit(h2, oe);
      }
      function Ri(h2) {
        return this.changeBit(h2, xe);
      }
      function Pi(h2) {
        return this.changeBit(h2, Ee);
      }
      function Mi(h2, p) {
        for (var v2 = 0, w2 = 0, B2 = Math.min(h2.t, this.t); v2 < B2; ) w2 += this[v2] + h2[v2], p[v2++] = w2 & this.DM, w2 >>= this.DB;
        if (h2.t < this.t) {
          for (w2 += h2.s; v2 < this.t; ) w2 += this[v2], p[v2++] = w2 & this.DM, w2 >>= this.DB;
          w2 += this.s;
        } else {
          for (w2 += this.s; v2 < h2.t; ) w2 += h2[v2], p[v2++] = w2 & this.DM, w2 >>= this.DB;
          w2 += h2.s;
        }
        p.s = w2 < 0 ? -1 : 0, w2 > 0 ? p[v2++] = w2 : w2 < -1 && (p[v2++] = this.DV + w2), p.t = v2, p.clamp();
      }
      function Xn(h2) {
        var p = n();
        return this.addTo(h2, p), p;
      }
      function Qr(h2) {
        var p = n();
        return this.subTo(h2, p), p;
      }
      function es(h2) {
        var p = n();
        return this.multiplyTo(h2, p), p;
      }
      function ts() {
        var h2 = n();
        return this.squareTo(h2), h2;
      }
      function is(h2) {
        var p = n();
        return this.divRemTo(h2, p, null), p;
      }
      function rs(h2) {
        var p = n();
        return this.divRemTo(h2, null, p), p;
      }
      function ns(h2) {
        var p = n(), v2 = n();
        return this.divRemTo(h2, p, v2), new Array(p, v2);
      }
      function ga(h2) {
        this[this.t] = this.am(0, h2 - 1, this, 0, 0, this.t), ++this.t, this.clamp();
      }
      function Fi(h2, p) {
        if (h2 != 0) {
          for (; this.t <= p; ) this[this.t++] = 0;
          for (this[p] += h2; this[p] >= this.DV; ) this[p] -= this.DV, ++p >= this.t && (this[this.t++] = 0), ++this[p];
        }
      }
      function Xt() {
      }
      function qi(h2) {
        return h2;
      }
      function hr(h2, p, v2) {
        h2.multiplyTo(p, v2);
      }
      function ss(h2, p) {
        h2.squareTo(p);
      }
      Xt.prototype.convert = qi, Xt.prototype.revert = qi, Xt.prototype.mulTo = hr, Xt.prototype.sqrTo = ss;
      function os(h2) {
        return this.exp(h2, new Xt());
      }
      function as(h2, p, v2) {
        var w2 = Math.min(this.t + h2.t, p);
        for (v2.s = 0, v2.t = w2; w2 > 0; ) v2[--w2] = 0;
        var B2;
        for (B2 = v2.t - this.t; w2 < B2; ++w2) v2[w2 + this.t] = this.am(0, h2[w2], v2, w2, 0, this.t);
        for (B2 = Math.min(h2.t, p); w2 < B2; ++w2) this.am(0, h2[w2], v2, w2, 0, p - w2);
        v2.clamp();
      }
      function ls(h2, p, v2) {
        --p;
        var w2 = v2.t = this.t + h2.t - p;
        for (v2.s = 0; --w2 >= 0; ) v2[w2] = 0;
        for (w2 = Math.max(p - this.t, 0); w2 < h2.t; ++w2) v2[this.t + w2 - p] = this.am(p - w2, h2[w2], v2, 0, 0, this.t + w2 - p);
        v2.clamp(), v2.drShiftTo(1, v2);
      }
      function $t(h2) {
        this.r2 = n(), this.q3 = n(), r2.ONE.dlShiftTo(2 * h2.t, this.r2), this.mu = this.r2.divide(h2), this.m = h2;
      }
      function cs(h2) {
        if (h2.s < 0 || h2.t > 2 * this.m.t) return h2.mod(this.m);
        if (h2.compareTo(this.m) < 0) return h2;
        var p = n();
        return h2.copyTo(p), this.reduce(p), p;
      }
      function us(h2) {
        return h2;
      }
      function pr(h2) {
        for (h2.drShiftTo(this.m.t - 1, this.r2), h2.t > this.m.t + 1 && (h2.t = this.m.t + 1, h2.clamp()), this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3), this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2); h2.compareTo(this.r2) < 0; ) h2.dAddOffset(1, this.m.t + 1);
        for (h2.subTo(this.r2, h2); h2.compareTo(this.m) >= 0; ) h2.subTo(this.m, h2);
      }
      function xb(h2, p) {
        h2.squareTo(p), this.reduce(p);
      }
      function Sb(h2, p, v2) {
        h2.multiplyTo(p, v2), this.reduce(v2);
      }
      $t.prototype.convert = cs, $t.prototype.revert = us, $t.prototype.reduce = pr, $t.prototype.mulTo = Sb, $t.prototype.sqrTo = xb;
      function Eb(h2, p) {
        var v2 = h2.bitLength(), w2, B2 = E(1), M;
        if (v2 <= 0) return B2;
        v2 < 18 ? w2 = 1 : v2 < 48 ? w2 = 3 : v2 < 144 ? w2 = 4 : v2 < 768 ? w2 = 5 : w2 = 6, v2 < 8 ? M = new de(p) : p.isEven() ? M = new $t(p) : M = new be(p);
        var G2 = new Array(), K = 3, Re = w2 - 1, Ye = (1 << w2) - 1;
        if (G2[1] = M.convert(this), w2 > 1) {
          var kt = n();
          for (M.sqrTo(G2[1], kt); K <= Ye; ) G2[K] = n(), M.mulTo(kt, G2[K - 2], G2[K]), K += 2;
        }
        var bt = h2.t - 1, ei, hs = true, Rt = n(), Pt;
        for (v2 = C2(h2[bt]) - 1; bt >= 0; ) {
          for (v2 >= Re ? ei = h2[bt] >> v2 - Re & Ye : (ei = (h2[bt] & (1 << v2 + 1) - 1) << Re - v2, bt > 0 && (ei |= h2[bt - 1] >> this.DB + v2 - Re)), K = w2; (ei & 1) == 0; ) ei >>= 1, --K;
          if ((v2 -= K) < 0 && (v2 += this.DB, --bt), hs) G2[ei].copyTo(B2), hs = false;
          else {
            for (; K > 1; ) M.sqrTo(B2, Rt), M.sqrTo(Rt, B2), K -= 2;
            K > 0 ? M.sqrTo(B2, Rt) : (Pt = B2, B2 = Rt, Rt = Pt), M.mulTo(Rt, G2[ei], B2);
          }
          for (; bt >= 0 && (h2[bt] & 1 << v2) == 0; ) M.sqrTo(B2, Rt), Pt = B2, B2 = Rt, Rt = Pt, --v2 < 0 && (v2 = this.DB - 1, --bt);
        }
        return M.revert(B2);
      }
      function kb(h2) {
        var p = this.s < 0 ? this.negate() : this.clone(), v2 = h2.s < 0 ? h2.negate() : h2.clone();
        if (p.compareTo(v2) < 0) {
          var w2 = p;
          p = v2, v2 = w2;
        }
        var B2 = p.getLowestSetBit(), M = v2.getLowestSetBit();
        if (M < 0) return p;
        for (B2 < M && (M = B2), M > 0 && (p.rShiftTo(M, p), v2.rShiftTo(M, v2)); p.signum() > 0; ) (B2 = p.getLowestSetBit()) > 0 && p.rShiftTo(B2, p), (B2 = v2.getLowestSetBit()) > 0 && v2.rShiftTo(B2, v2), p.compareTo(v2) >= 0 ? (p.subTo(v2, p), p.rShiftTo(1, p)) : (v2.subTo(p, v2), v2.rShiftTo(1, v2));
        return M > 0 && v2.lShiftTo(M, v2), v2;
      }
      function Ob(h2) {
        if (h2 <= 0) return 0;
        var p = this.DV % h2, v2 = this.s < 0 ? h2 - 1 : 0;
        if (this.t > 0) if (p == 0) v2 = this[0] % h2;
        else for (var w2 = this.t - 1; w2 >= 0; --w2) v2 = (p * v2 + this[w2]) % h2;
        return v2;
      }
      function Cb(h2) {
        var p = h2.isEven();
        if (this.isEven() && p || h2.signum() == 0) return r2.ZERO;
        for (var v2 = h2.clone(), w2 = this.clone(), B2 = E(1), M = E(0), G2 = E(0), K = E(1); v2.signum() != 0; ) {
          for (; v2.isEven(); ) v2.rShiftTo(1, v2), p ? ((!B2.isEven() || !M.isEven()) && (B2.addTo(this, B2), M.subTo(h2, M)), B2.rShiftTo(1, B2)) : M.isEven() || M.subTo(h2, M), M.rShiftTo(1, M);
          for (; w2.isEven(); ) w2.rShiftTo(1, w2), p ? ((!G2.isEven() || !K.isEven()) && (G2.addTo(this, G2), K.subTo(h2, K)), G2.rShiftTo(1, G2)) : K.isEven() || K.subTo(h2, K), K.rShiftTo(1, K);
          v2.compareTo(w2) >= 0 ? (v2.subTo(w2, v2), p && B2.subTo(G2, B2), M.subTo(K, M)) : (w2.subTo(v2, w2), p && G2.subTo(B2, G2), K.subTo(M, K));
        }
        if (w2.compareTo(r2.ONE) != 0) return r2.ZERO;
        if (K.compareTo(h2) >= 0) return K.subtract(h2);
        if (K.signum() < 0) K.addTo(h2, K);
        else return K;
        return K.signum() < 0 ? K.add(h2) : K;
      }
      var st = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997], Tb = (1 << 26) / st[st.length - 1];
      function Ab(h2) {
        var p, v2 = this.abs();
        if (v2.t == 1 && v2[0] <= st[st.length - 1]) {
          for (p = 0; p < st.length; ++p) if (v2[0] == st[p]) return true;
          return false;
        }
        if (v2.isEven()) return false;
        for (p = 1; p < st.length; ) {
          for (var w2 = st[p], B2 = p + 1; B2 < st.length && w2 < Tb; ) w2 *= st[B2++];
          for (w2 = v2.modInt(w2); p < B2; ) if (w2 % st[p++] == 0) return false;
        }
        return v2.millerRabin(h2);
      }
      function Ib(h2) {
        var p = this.subtract(r2.ONE), v2 = p.getLowestSetBit();
        if (v2 <= 0) return false;
        var w2 = p.shiftRight(v2);
        h2 = h2 + 1 >> 1, h2 > st.length && (h2 = st.length);
        for (var B2 = n(), M = 0; M < h2; ++M) {
          B2.fromInt(st[Math.floor(Math.random() * st.length)]);
          var G2 = B2.modPow(w2, this);
          if (G2.compareTo(r2.ONE) != 0 && G2.compareTo(p) != 0) {
            for (var K = 1; K++ < v2 && G2.compareTo(p) != 0; ) if (G2 = G2.modPowInt(2, this), G2.compareTo(r2.ONE) == 0) return false;
            if (G2.compareTo(p) != 0) return false;
          }
        }
        return true;
      }
      r2.prototype.chunkSize = te, r2.prototype.toRadix = le2, r2.prototype.fromRadix = ce2, r2.prototype.fromNumber = _e, r2.prototype.bitwiseTo = J2, r2.prototype.changeBit = fr, r2.prototype.addTo = Mi, r2.prototype.dMultiply = ga, r2.prototype.dAddOffset = Fi, r2.prototype.multiplyLowerTo = as, r2.prototype.multiplyUpperTo = ls, r2.prototype.modInt = Ob, r2.prototype.millerRabin = Ib, r2.prototype.clone = ft, r2.prototype.intValue = vt, r2.prototype.byteValue = I2, r2.prototype.shortValue = Z, r2.prototype.signum = ee, r2.prototype.toByteArray = we, r2.prototype.equals = Be, r2.prototype.min = Te, r2.prototype.max = D, r2.prototype.and = Ie2, r2.prototype.or = me, r2.prototype.xor = ie, r2.prototype.andNot = je, r2.prototype.not = Ae, r2.prototype.shiftLeft = ht, r2.prototype.shiftRight = Et, r2.prototype.getLowestSetBit = ui, r2.prototype.bitCount = Ni, r2.prototype.testBit = Li, r2.prototype.setBit = Bi, r2.prototype.clearBit = Ri, r2.prototype.flipBit = Pi, r2.prototype.add = Xn, r2.prototype.subtract = Qr, r2.prototype.multiply = es, r2.prototype.divide = is, r2.prototype.remainder = rs, r2.prototype.divideAndRemainder = ns, r2.prototype.modPow = Eb, r2.prototype.modInverse = Cb, r2.prototype.pow = os, r2.prototype.gcd = kb, r2.prototype.isProbablePrime = Ab, r2.prototype.square = ts, r2.prototype.Barrett = $t;
      var fs2, yt, Ge;
      function Nb(h2) {
        yt[Ge++] ^= h2 & 255, yt[Ge++] ^= h2 >> 8 & 255, yt[Ge++] ^= h2 >> 16 & 255, yt[Ge++] ^= h2 >> 24 & 255, Ge >= ba && (Ge -= ba);
      }
      function _f() {
        Nb((/* @__PURE__ */ new Date()).getTime());
      }
      if (yt == null) {
        yt = new Array(), Ge = 0;
        var Bt;
        if (typeof window != "undefined" && window.crypto) {
          if (window.crypto.getRandomValues) {
            var wf = new Uint8Array(32);
            for (window.crypto.getRandomValues(wf), Bt = 0; Bt < 32; ++Bt) yt[Ge++] = wf[Bt];
          } else if (navigator.appName == "Netscape" && navigator.appVersion < "5") {
            var xf = window.crypto.random(32);
            for (Bt = 0; Bt < xf.length; ++Bt) yt[Ge++] = xf.charCodeAt(Bt) & 255;
          }
        }
        for (; Ge < ba; ) Bt = Math.floor(65536 * Math.random()), yt[Ge++] = Bt >>> 8, yt[Ge++] = Bt & 255;
        Ge = 0, _f();
      }
      function Lb() {
        if (fs2 == null) {
          for (_f(), fs2 = Mb(), fs2.init(yt), Ge = 0; Ge < yt.length; ++Ge) yt[Ge] = 0;
          Ge = 0;
        }
        return fs2.next();
      }
      function Bb(h2) {
        var p;
        for (p = 0; p < h2.length; ++p) h2[p] = Lb();
      }
      function va() {
      }
      va.prototype.nextBytes = Bb;
      function ya() {
        this.i = 0, this.j = 0, this.S = new Array();
      }
      function Rb(h2) {
        var p, v2, w2;
        for (p = 0; p < 256; ++p) this.S[p] = p;
        for (v2 = 0, p = 0; p < 256; ++p) v2 = v2 + this.S[p] + h2[p % h2.length] & 255, w2 = this.S[p], this.S[p] = this.S[v2], this.S[v2] = w2;
        this.i = 0, this.j = 0;
      }
      function Pb() {
        var h2;
        return this.i = this.i + 1 & 255, this.j = this.j + this.S[this.i] & 255, h2 = this.S[this.i], this.S[this.i] = this.S[this.j], this.S[this.j] = h2, this.S[h2 + this.S[this.i] & 255];
      }
      ya.prototype.init = Rb, ya.prototype.next = Pb;
      function Mb() {
        return new ya();
      }
      var ba = 256;
      typeof Us != "undefined" ? Us = vm.exports = { default: r2, BigInteger: r2, SecureRandom: va } : this.jsbn = { BigInteger: r2, SecureRandom: va };
    }).call(Us);
  });
  var un = _2(($s) => {
    (function() {
      var t = { not_type: /[^T]/, not_primitive: /[^v]/, number: /[diefg]/, numeric_arg: /[bcdiefguxX]/, json: /[j]/, text: /^[^\x25]+/, modulo: /^\x25{2}/, placeholder: /^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/, key: /^([a-z_][a-z_\d]*)/i, key_access: /^\.([a-z_][a-z_\d]*)/i, index_access: /^\[(\d+)\]/, sign: /^[+-]/ };
      function e2(o2) {
        return r2(s2(o2), arguments);
      }
      function i(o2, a) {
        return e2.apply(null, [o2].concat(a || []));
      }
      function r2(o2, a) {
        var l = 1, c2 = o2.length, u2, f2 = "", d2, g2, m2, y2, b, x2, E, O2;
        for (d2 = 0; d2 < c2; d2++) if (typeof o2[d2] == "string") f2 += o2[d2];
        else if (typeof o2[d2] == "object") {
          if (m2 = o2[d2], m2.keys) for (u2 = a[l], g2 = 0; g2 < m2.keys.length; g2++) {
            if (u2 == null) throw new Error(e2('[sprintf] Cannot access property "%s" of undefined value "%s"', m2.keys[g2], m2.keys[g2 - 1]));
            u2 = u2[m2.keys[g2]];
          }
          else m2.param_no ? u2 = a[m2.param_no] : u2 = a[l++];
          if (t.not_type.test(m2.type) && t.not_primitive.test(m2.type) && u2 instanceof Function && (u2 = u2()), t.numeric_arg.test(m2.type) && typeof u2 != "number" && isNaN(u2)) throw new TypeError(e2("[sprintf] expecting number but found %T", u2));
          switch (t.number.test(m2.type) && (E = u2 >= 0), m2.type) {
            case "b":
              u2 = parseInt(u2, 10).toString(2);
              break;
            case "c":
              u2 = String.fromCharCode(parseInt(u2, 10));
              break;
            case "d":
            case "i":
              u2 = parseInt(u2, 10);
              break;
            case "j":
              u2 = JSON.stringify(u2, null, m2.width ? parseInt(m2.width) : 0);
              break;
            case "e":
              u2 = m2.precision ? parseFloat(u2).toExponential(m2.precision) : parseFloat(u2).toExponential();
              break;
            case "f":
              u2 = m2.precision ? parseFloat(u2).toFixed(m2.precision) : parseFloat(u2);
              break;
            case "g":
              u2 = m2.precision ? String(Number(u2.toPrecision(m2.precision))) : parseFloat(u2);
              break;
            case "o":
              u2 = (parseInt(u2, 10) >>> 0).toString(8);
              break;
            case "s":
              u2 = String(u2), u2 = m2.precision ? u2.substring(0, m2.precision) : u2;
              break;
            case "t":
              u2 = String(!!u2), u2 = m2.precision ? u2.substring(0, m2.precision) : u2;
              break;
            case "T":
              u2 = Object.prototype.toString.call(u2).slice(8, -1).toLowerCase(), u2 = m2.precision ? u2.substring(0, m2.precision) : u2;
              break;
            case "u":
              u2 = parseInt(u2, 10) >>> 0;
              break;
            case "v":
              u2 = u2.valueOf(), u2 = m2.precision ? u2.substring(0, m2.precision) : u2;
              break;
            case "x":
              u2 = (parseInt(u2, 10) >>> 0).toString(16);
              break;
            case "X":
              u2 = (parseInt(u2, 10) >>> 0).toString(16).toUpperCase();
              break;
          }
          t.json.test(m2.type) ? f2 += u2 : (t.number.test(m2.type) && (!E || m2.sign) ? (O2 = E ? "+" : "-", u2 = u2.toString().replace(t.sign, "")) : O2 = "", b = m2.pad_char ? m2.pad_char === "0" ? "0" : m2.pad_char.charAt(1) : " ", x2 = m2.width - (O2 + u2).length, y2 = m2.width && x2 > 0 ? b.repeat(x2) : "", f2 += m2.align ? O2 + u2 + y2 : b === "0" ? O2 + y2 + u2 : y2 + O2 + u2);
        }
        return f2;
      }
      var n = /* @__PURE__ */ Object.create(null);
      function s2(o2) {
        if (n[o2]) return n[o2];
        for (var a = o2, l, c2 = [], u2 = 0; a; ) {
          if ((l = t.text.exec(a)) !== null) c2.push(l[0]);
          else if ((l = t.modulo.exec(a)) !== null) c2.push("%");
          else if ((l = t.placeholder.exec(a)) !== null) {
            if (l[2]) {
              u2 |= 1;
              var f2 = [], d2 = l[2], g2 = [];
              if ((g2 = t.key.exec(d2)) !== null) for (f2.push(g2[1]); (d2 = d2.substring(g2[0].length)) !== ""; ) if ((g2 = t.key_access.exec(d2)) !== null) f2.push(g2[1]);
              else if ((g2 = t.index_access.exec(d2)) !== null) f2.push(g2[1]);
              else throw new SyntaxError("[sprintf] failed to parse named argument key");
              else throw new SyntaxError("[sprintf] failed to parse named argument key");
              l[2] = f2;
            } else u2 |= 2;
            if (u2 === 3) throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");
            c2.push({ placeholder: l[0], param_no: l[1], keys: l[2], sign: l[3], pad_char: l[4], align: l[5], width: l[6], precision: l[7], type: l[8] });
          } else throw new SyntaxError("[sprintf] unexpected placeholder");
          a = a.substring(l[0].length);
        }
        return n[o2] = c2;
      }
      typeof $s != "undefined" && ($s.sprintf = e2, $s.vsprintf = i), typeof window != "undefined" && (window.sprintf = e2, window.vsprintf = i, false);
    })();
  });
  var Hl = _2((Gt) => {
    var lS = Gt && Gt.__createBinding || (Object.create ? function(t, e2, i, r2) {
      r2 === void 0 && (r2 = i);
      var n = Object.getOwnPropertyDescriptor(e2, i);
      (!n || ("get" in n ? !e2.__esModule : n.writable || n.configurable)) && (n = { enumerable: true, get: function() {
        return e2[i];
      } }), Object.defineProperty(t, r2, n);
    } : function(t, e2, i, r2) {
      r2 === void 0 && (r2 = i), t[r2] = e2[i];
    }), cS = Gt && Gt.__setModuleDefault || (Object.create ? function(t, e2) {
      Object.defineProperty(t, "default", { enumerable: true, value: e2 });
    } : function(t, e2) {
      t.default = e2;
    }), _m = Gt && Gt.__importStar || function(t) {
      if (t && t.__esModule) return t;
      var e2 = {};
      if (t != null) for (var i in t) i !== "default" && Object.prototype.hasOwnProperty.call(t, i) && lS(e2, t, i);
      return cS(e2, t), e2;
    };
    Object.defineProperty(Gt, "__esModule", { value: true });
    Gt.Address4 = void 0;
    var ym = _m(Dl()), Dt = _m(jl()), bm = js(), fn = $l(), Ir = un(), Vl = class t {
      constructor(e2) {
        this.groups = Dt.GROUPS, this.parsedAddress = [], this.parsedSubnet = "", this.subnet = "/32", this.subnetMask = 32, this.v4 = true, this.isCorrect = ym.isCorrect(Dt.BITS), this.isInSubnet = ym.isInSubnet, this.address = e2;
        let i = Dt.RE_SUBNET_STRING.exec(e2);
        if (i) {
          if (this.parsedSubnet = i[0].replace("/", ""), this.subnetMask = parseInt(this.parsedSubnet, 10), this.subnet = `/${this.subnetMask}`, this.subnetMask < 0 || this.subnetMask > Dt.BITS) throw new bm.AddressError("Invalid subnet mask.");
          e2 = e2.replace(Dt.RE_SUBNET_STRING, "");
        }
        this.addressMinusSuffix = e2, this.parsedAddress = this.parse(e2);
      }
      static isValid(e2) {
        try {
          return new t(e2), true;
        } catch {
          return false;
        }
      }
      parse(e2) {
        let i = e2.split(".");
        if (!e2.match(Dt.RE_ADDRESS)) throw new bm.AddressError("Invalid IPv4 address.");
        return i;
      }
      correctForm() {
        return this.parsedAddress.map((e2) => parseInt(e2, 10)).join(".");
      }
      static fromHex(e2) {
        let i = e2.replace(/:/g, "").padStart(8, "0"), r2 = [], n;
        for (n = 0; n < 8; n += 2) {
          let s2 = i.slice(n, n + 2);
          r2.push(parseInt(s2, 16));
        }
        return new t(r2.join("."));
      }
      static fromInteger(e2) {
        return t.fromHex(e2.toString(16));
      }
      static fromArpa(e2) {
        let r2 = e2.replace(/(\.in-addr\.arpa)?\.$/, "").split(".").reverse().join(".");
        return new t(r2);
      }
      toHex() {
        return this.parsedAddress.map((e2) => (0, Ir.sprintf)("%02x", parseInt(e2, 10))).join(":");
      }
      toArray() {
        return this.parsedAddress.map((e2) => parseInt(e2, 10));
      }
      toGroup6() {
        let e2 = [], i;
        for (i = 0; i < Dt.GROUPS; i += 2) {
          let r2 = (0, Ir.sprintf)("%02x%02x", parseInt(this.parsedAddress[i], 10), parseInt(this.parsedAddress[i + 1], 10));
          e2.push((0, Ir.sprintf)("%x", parseInt(r2, 16)));
        }
        return e2.join(":");
      }
      bigInteger() {
        return new fn.BigInteger(this.parsedAddress.map((e2) => (0, Ir.sprintf)("%02x", parseInt(e2, 10))).join(""), 16);
      }
      _startAddress() {
        return new fn.BigInteger(this.mask() + "0".repeat(Dt.BITS - this.subnetMask), 2);
      }
      startAddress() {
        return t.fromBigInteger(this._startAddress());
      }
      startAddressExclusive() {
        let e2 = new fn.BigInteger("1");
        return t.fromBigInteger(this._startAddress().add(e2));
      }
      _endAddress() {
        return new fn.BigInteger(this.mask() + "1".repeat(Dt.BITS - this.subnetMask), 2);
      }
      endAddress() {
        return t.fromBigInteger(this._endAddress());
      }
      endAddressExclusive() {
        let e2 = new fn.BigInteger("1");
        return t.fromBigInteger(this._endAddress().subtract(e2));
      }
      static fromBigInteger(e2) {
        return t.fromInteger(parseInt(e2.toString(), 10));
      }
      mask(e2) {
        return e2 === void 0 && (e2 = this.subnetMask), this.getBitsBase2(0, e2);
      }
      getBitsBase2(e2, i) {
        return this.binaryZeroPad().slice(e2, i);
      }
      reverseForm(e2) {
        e2 || (e2 = {});
        let i = this.correctForm().split(".").reverse().join(".");
        return e2.omitSuffix ? i : (0, Ir.sprintf)("%s.in-addr.arpa.", i);
      }
      isMulticast() {
        return this.isInSubnet(new t("224.0.0.0/4"));
      }
      binaryZeroPad() {
        return this.bigInteger().toString(2).padStart(Dt.BITS, "0");
      }
      groupForV6() {
        let e2 = this.parsedAddress;
        return this.address.replace(Dt.RE_ADDRESS, (0, Ir.sprintf)('<span class="hover-group group-v4 group-6">%s</span>.<span class="hover-group group-v4 group-7">%s</span>', e2.slice(0, 2).join("."), e2.slice(2, 4).join(".")));
      }
    };
    Gt.Address4 = Vl;
  });
  var Gl = _2((Fe) => {
    Object.defineProperty(Fe, "__esModule", { value: true });
    Fe.RE_URL_WITH_PORT = Fe.RE_URL = Fe.RE_ZONE_STRING = Fe.RE_SUBNET_STRING = Fe.RE_BAD_ADDRESS = Fe.RE_BAD_CHARACTERS = Fe.TYPES = Fe.SCOPES = Fe.GROUPS = Fe.BITS = void 0;
    Fe.BITS = 128;
    Fe.GROUPS = 8;
    Fe.SCOPES = { 0: "Reserved", 1: "Interface local", 2: "Link local", 4: "Admin local", 5: "Site local", 8: "Organization local", 14: "Global", 15: "Reserved" };
    Fe.TYPES = { "ff01::1/128": "Multicast (All nodes on this interface)", "ff01::2/128": "Multicast (All routers on this interface)", "ff02::1/128": "Multicast (All nodes on this link)", "ff02::2/128": "Multicast (All routers on this link)", "ff05::2/128": "Multicast (All routers in this site)", "ff02::5/128": "Multicast (OSPFv3 AllSPF routers)", "ff02::6/128": "Multicast (OSPFv3 AllDR routers)", "ff02::9/128": "Multicast (RIP routers)", "ff02::a/128": "Multicast (EIGRP routers)", "ff02::d/128": "Multicast (PIM routers)", "ff02::16/128": "Multicast (MLDv2 reports)", "ff01::fb/128": "Multicast (mDNSv6)", "ff02::fb/128": "Multicast (mDNSv6)", "ff05::fb/128": "Multicast (mDNSv6)", "ff02::1:2/128": "Multicast (All DHCP servers and relay agents on this link)", "ff05::1:2/128": "Multicast (All DHCP servers and relay agents in this site)", "ff02::1:3/128": "Multicast (All DHCP servers on this link)", "ff05::1:3/128": "Multicast (All DHCP servers in this site)", "::/128": "Unspecified", "::1/128": "Loopback", "ff00::/8": "Multicast", "fe80::/10": "Link-local unicast" };
    Fe.RE_BAD_CHARACTERS = /([^0-9a-f:/%])/gi;
    Fe.RE_BAD_ADDRESS = /([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\/$)/gi;
    Fe.RE_SUBNET_STRING = /\/\d{1,3}(?=%|$)/;
    Fe.RE_ZONE_STRING = /%.*$/;
    Fe.RE_URL = new RegExp(/^\[{0,1}([0-9a-f:]+)\]{0,1}/);
    Fe.RE_URL_WITH_PORT = new RegExp(/\[([0-9a-f:]+)\]:([0-9]{1,5})/);
  });
  var Yl = _2((Yt) => {
    Object.defineProperty(Yt, "__esModule", { value: true });
    Yt.simpleGroup = Yt.spanLeadingZeroes = Yt.spanAll = Yt.spanAllZeroes = void 0;
    var wm = un();
    function xm(t) {
      return t.replace(/(0+)/g, '<span class="zero">$1</span>');
    }
    Yt.spanAllZeroes = xm;
    function uS(t, e2 = 0) {
      return t.split("").map((r2, n) => (0, wm.sprintf)('<span class="digit value-%s position-%d">%s</span>', r2, n + e2, xm(r2))).join("");
    }
    Yt.spanAll = uS;
    function Sm(t) {
      return t.replace(/^(0+)/, '<span class="zero">$1</span>');
    }
    function fS(t) {
      return t.split(":").map((i) => Sm(i)).join(":");
    }
    Yt.spanLeadingZeroes = fS;
    function hS(t, e2 = 0) {
      return t.split(":").map((r2, n) => /group-v4/.test(r2) ? r2 : (0, wm.sprintf)('<span class="hover-group group-%d">%s</span>', n + e2, Sm(r2)));
    }
    Yt.simpleGroup = hS;
  });
  var Em = _2((ze) => {
    var pS = ze && ze.__createBinding || (Object.create ? function(t, e2, i, r2) {
      r2 === void 0 && (r2 = i);
      var n = Object.getOwnPropertyDescriptor(e2, i);
      (!n || ("get" in n ? !e2.__esModule : n.writable || n.configurable)) && (n = { enumerable: true, get: function() {
        return e2[i];
      } }), Object.defineProperty(t, r2, n);
    } : function(t, e2, i, r2) {
      r2 === void 0 && (r2 = i), t[r2] = e2[i];
    }), dS = ze && ze.__setModuleDefault || (Object.create ? function(t, e2) {
      Object.defineProperty(t, "default", { enumerable: true, value: e2 });
    } : function(t, e2) {
      t.default = e2;
    }), mS = ze && ze.__importStar || function(t) {
      if (t && t.__esModule) return t;
      var e2 = {};
      if (t != null) for (var i in t) i !== "default" && Object.prototype.hasOwnProperty.call(t, i) && pS(e2, t, i);
      return dS(e2, t), e2;
    };
    Object.defineProperty(ze, "__esModule", { value: true });
    ze.possibleElisions = ze.simpleRegularExpression = ze.ADDRESS_BOUNDARY = ze.padGroup = ze.groupPossibilities = void 0;
    var gS = mS(Gl()), Nr = un();
    function Hs(t) {
      return (0, Nr.sprintf)("(%s)", t.join("|"));
    }
    ze.groupPossibilities = Hs;
    function Vs(t) {
      return t.length < 4 ? (0, Nr.sprintf)("0{0,%d}%s", 4 - t.length, t) : t;
    }
    ze.padGroup = Vs;
    ze.ADDRESS_BOUNDARY = "[^A-Fa-f0-9:]";
    function vS(t) {
      let e2 = [];
      t.forEach((r2, n) => {
        parseInt(r2, 16) === 0 && e2.push(n);
      });
      let i = e2.map((r2) => t.map((n, s2) => {
        if (s2 === r2) {
          let o2 = s2 === 0 || s2 === gS.GROUPS - 1 ? ":" : "";
          return Hs([Vs(n), o2]);
        }
        return Vs(n);
      }).join(":"));
      return i.push(t.map(Vs).join(":")), Hs(i);
    }
    ze.simpleRegularExpression = vS;
    function yS(t, e2, i) {
      let r2 = e2 ? "" : ":", n = i ? "" : ":", s2 = [];
      !e2 && !i && s2.push("::"), e2 && i && s2.push(""), (i && !e2 || !i && e2) && s2.push(":"), s2.push((0, Nr.sprintf)("%s(:0{1,4}){1,%d}", r2, t - 1)), s2.push((0, Nr.sprintf)("(0{1,4}:){1,%d}%s", t - 1, n)), s2.push((0, Nr.sprintf)("(0{1,4}:){%d}0{1,4}", t - 1));
      for (let o2 = 1; o2 < t - 1; o2++) for (let a = 1; a < t - o2; a++) s2.push((0, Nr.sprintf)("(0{1,4}:){%d}:(0{1,4}:){%d}0{1,4}", a, t - a - o2 - 1));
      return Hs(s2);
    }
    ze.possibleElisions = yS;
  });
  var Tm = _2((Wt) => {
    var bS = Wt && Wt.__createBinding || (Object.create ? function(t, e2, i, r2) {
      r2 === void 0 && (r2 = i);
      var n = Object.getOwnPropertyDescriptor(e2, i);
      (!n || ("get" in n ? !e2.__esModule : n.writable || n.configurable)) && (n = { enumerable: true, get: function() {
        return e2[i];
      } }), Object.defineProperty(t, r2, n);
    } : function(t, e2, i, r2) {
      r2 === void 0 && (r2 = i), t[r2] = e2[i];
    }), _S = Wt && Wt.__setModuleDefault || (Object.create ? function(t, e2) {
      Object.defineProperty(t, "default", { enumerable: true, value: e2 });
    } : function(t, e2) {
      t.default = e2;
    }), Ys = Wt && Wt.__importStar || function(t) {
      if (t && t.__esModule) return t;
      var e2 = {};
      if (t != null) for (var i in t) i !== "default" && Object.prototype.hasOwnProperty.call(t, i) && bS(e2, t, i);
      return _S(e2, t), e2;
    };
    Object.defineProperty(Wt, "__esModule", { value: true });
    Wt.Address6 = void 0;
    var km = Ys(Dl()), Wl = Ys(jl()), Le = Ys(Gl()), Kl = Ys(Yl()), Yi = Hl(), Wi = Em(), ni = js(), lt = $l(), ct = un();
    function Gs(t) {
      if (!t) throw new Error("Assertion failed.");
    }
    function wS(t) {
      let e2 = /(\d+)(\d{3})/;
      for (; e2.test(t); ) t = t.replace(e2, "$1,$2");
      return t;
    }
    function xS(t) {
      return t = t.replace(/^(0{1,})([1-9]+)$/, '<span class="parse-error">$1</span>$2'), t = t.replace(/^(0{1,})(0)$/, '<span class="parse-error">$1</span>$2'), t;
    }
    function SS(t, e2) {
      let i = [], r2 = [], n;
      for (n = 0; n < t.length; n++) n < e2[0] ? i.push(t[n]) : n > e2[1] && r2.push(t[n]);
      return i.concat(["compact"]).concat(r2);
    }
    function Om(t) {
      return (0, ct.sprintf)("%04x", parseInt(t, 16));
    }
    function Cm(t) {
      return t & 255;
    }
    var zl = class t {
      constructor(e2, i) {
        this.addressMinusSuffix = "", this.parsedSubnet = "", this.subnet = "/128", this.subnetMask = 128, this.v4 = false, this.zone = "", this.isInSubnet = km.isInSubnet, this.isCorrect = km.isCorrect(Le.BITS), i === void 0 ? this.groups = Le.GROUPS : this.groups = i, this.address = e2;
        let r2 = Le.RE_SUBNET_STRING.exec(e2);
        if (r2) {
          if (this.parsedSubnet = r2[0].replace("/", ""), this.subnetMask = parseInt(this.parsedSubnet, 10), this.subnet = `/${this.subnetMask}`, Number.isNaN(this.subnetMask) || this.subnetMask < 0 || this.subnetMask > Le.BITS) throw new ni.AddressError("Invalid subnet mask.");
          e2 = e2.replace(Le.RE_SUBNET_STRING, "");
        } else if (/\//.test(e2)) throw new ni.AddressError("Invalid subnet mask.");
        let n = Le.RE_ZONE_STRING.exec(e2);
        n && (this.zone = n[0], e2 = e2.replace(Le.RE_ZONE_STRING, "")), this.addressMinusSuffix = e2, this.parsedAddress = this.parse(this.addressMinusSuffix);
      }
      static isValid(e2) {
        try {
          return new t(e2), true;
        } catch {
          return false;
        }
      }
      static fromBigInteger(e2) {
        let i = e2.toString(16).padStart(32, "0"), r2 = [], n;
        for (n = 0; n < Le.GROUPS; n++) r2.push(i.slice(n * 4, (n + 1) * 4));
        return new t(r2.join(":"));
      }
      static fromURL(e2) {
        let i, r2 = null, n;
        if (e2.indexOf("[") !== -1 && e2.indexOf("]:") !== -1) {
          if (n = Le.RE_URL_WITH_PORT.exec(e2), n === null) return { error: "failed to parse address with port", address: null, port: null };
          i = n[1], r2 = n[2];
        } else if (e2.indexOf("/") !== -1) {
          if (e2 = e2.replace(/^[a-z0-9]+:\/\//, ""), n = Le.RE_URL.exec(e2), n === null) return { error: "failed to parse address from URL", address: null, port: null };
          i = n[1];
        } else i = e2;
        return r2 ? (r2 = parseInt(r2, 10), (r2 < 0 || r2 > 65536) && (r2 = null)) : r2 = null, { address: new t(i), port: r2 };
      }
      static fromAddress4(e2) {
        let i = new Yi.Address4(e2), r2 = Le.BITS - (Wl.BITS - i.subnetMask);
        return new t(`::ffff:${i.correctForm()}/${r2}`);
      }
      static fromArpa(e2) {
        let i = e2.replace(/(\.ip6\.arpa)?\.$/, ""), r2 = 7;
        if (i.length !== 63) throw new ni.AddressError("Invalid 'ip6.arpa' form.");
        let n = i.split(".").reverse();
        for (let s2 = r2; s2 > 0; s2--) {
          let o2 = s2 * 4;
          n.splice(o2, 0, ":");
        }
        return i = n.join(""), new t(i);
      }
      microsoftTranscription() {
        return (0, ct.sprintf)("%s.ipv6-literal.net", this.correctForm().replace(/:/g, "-"));
      }
      mask(e2 = this.subnetMask) {
        return this.getBitsBase2(0, e2);
      }
      possibleSubnets(e2 = 128) {
        let i = Le.BITS - this.subnetMask, r2 = Math.abs(e2 - Le.BITS), n = i - r2;
        return n < 0 ? "0" : wS(new lt.BigInteger("2", 10).pow(n).toString(10));
      }
      _startAddress() {
        return new lt.BigInteger(this.mask() + "0".repeat(Le.BITS - this.subnetMask), 2);
      }
      startAddress() {
        return t.fromBigInteger(this._startAddress());
      }
      startAddressExclusive() {
        let e2 = new lt.BigInteger("1");
        return t.fromBigInteger(this._startAddress().add(e2));
      }
      _endAddress() {
        return new lt.BigInteger(this.mask() + "1".repeat(Le.BITS - this.subnetMask), 2);
      }
      endAddress() {
        return t.fromBigInteger(this._endAddress());
      }
      endAddressExclusive() {
        let e2 = new lt.BigInteger("1");
        return t.fromBigInteger(this._endAddress().subtract(e2));
      }
      getScope() {
        let e2 = Le.SCOPES[this.getBits(12, 16).intValue()];
        return this.getType() === "Global unicast" && e2 !== "Link local" && (e2 = "Global"), e2 || "Unknown";
      }
      getType() {
        for (let e2 of Object.keys(Le.TYPES)) if (this.isInSubnet(new t(e2))) return Le.TYPES[e2];
        return "Global unicast";
      }
      getBits(e2, i) {
        return new lt.BigInteger(this.getBitsBase2(e2, i), 2);
      }
      getBitsBase2(e2, i) {
        return this.binaryZeroPad().slice(e2, i);
      }
      getBitsBase16(e2, i) {
        let r2 = i - e2;
        if (r2 % 4 !== 0) throw new Error("Length of bits to retrieve must be divisible by four");
        return this.getBits(e2, i).toString(16).padStart(r2 / 4, "0");
      }
      getBitsPastSubnet() {
        return this.getBitsBase2(this.subnetMask, Le.BITS);
      }
      reverseForm(e2) {
        e2 || (e2 = {});
        let i = Math.floor(this.subnetMask / 4), r2 = this.canonicalForm().replace(/:/g, "").split("").slice(0, i).reverse().join(".");
        return i > 0 ? e2.omitSuffix ? r2 : (0, ct.sprintf)("%s.ip6.arpa.", r2) : e2.omitSuffix ? "" : "ip6.arpa.";
      }
      correctForm() {
        let e2, i = [], r2 = 0, n = [];
        for (e2 = 0; e2 < this.parsedAddress.length; e2++) {
          let a = parseInt(this.parsedAddress[e2], 16);
          a === 0 && r2++, a !== 0 && r2 > 0 && (r2 > 1 && n.push([e2 - r2, e2 - 1]), r2 = 0);
        }
        r2 > 1 && n.push([this.parsedAddress.length - r2, this.parsedAddress.length - 1]);
        let s2 = n.map((a) => a[1] - a[0] + 1);
        if (n.length > 0) {
          let a = s2.indexOf(Math.max(...s2));
          i = SS(this.parsedAddress, n[a]);
        } else i = this.parsedAddress;
        for (e2 = 0; e2 < i.length; e2++) i[e2] !== "compact" && (i[e2] = parseInt(i[e2], 16).toString(16));
        let o2 = i.join(":");
        return o2 = o2.replace(/^compact$/, "::"), o2 = o2.replace(/^compact|compact$/, ":"), o2 = o2.replace(/compact/, ""), o2;
      }
      binaryZeroPad() {
        return this.bigInteger().toString(2).padStart(Le.BITS, "0");
      }
      parse4in6(e2) {
        let i = e2.split(":"), n = i.slice(-1)[0].match(Wl.RE_ADDRESS);
        if (n) {
          this.parsedAddress4 = n[0], this.address4 = new Yi.Address4(this.parsedAddress4);
          for (let s2 = 0; s2 < this.address4.groups; s2++) if (/^0[0-9]+/.test(this.address4.parsedAddress[s2])) throw new ni.AddressError("IPv4 addresses can't have leading zeroes.", e2.replace(Wl.RE_ADDRESS, this.address4.parsedAddress.map(xS).join(".")));
          this.v4 = true, i[i.length - 1] = this.address4.toGroup6(), e2 = i.join(":");
        }
        return e2;
      }
      parse(e2) {
        e2 = this.parse4in6(e2);
        let i = e2.match(Le.RE_BAD_CHARACTERS);
        if (i) throw new ni.AddressError((0, ct.sprintf)("Bad character%s detected in address: %s", i.length > 1 ? "s" : "", i.join("")), e2.replace(Le.RE_BAD_CHARACTERS, '<span class="parse-error">$1</span>'));
        let r2 = e2.match(Le.RE_BAD_ADDRESS);
        if (r2) throw new ni.AddressError((0, ct.sprintf)("Address failed regex: %s", r2.join("")), e2.replace(Le.RE_BAD_ADDRESS, '<span class="parse-error">$1</span>'));
        let n = [], s2 = e2.split("::");
        if (s2.length === 2) {
          let o2 = s2[0].split(":"), a = s2[1].split(":");
          o2.length === 1 && o2[0] === "" && (o2 = []), a.length === 1 && a[0] === "" && (a = []);
          let l = this.groups - (o2.length + a.length);
          if (!l) throw new ni.AddressError("Error parsing groups");
          this.elidedGroups = l, this.elisionBegin = o2.length, this.elisionEnd = o2.length + this.elidedGroups, n = n.concat(o2);
          for (let c2 = 0; c2 < l; c2++) n.push("0");
          n = n.concat(a);
        } else if (s2.length === 1) n = e2.split(":"), this.elidedGroups = 0;
        else throw new ni.AddressError("Too many :: groups found");
        if (n = n.map((o2) => (0, ct.sprintf)("%x", parseInt(o2, 16))), n.length !== this.groups) throw new ni.AddressError("Incorrect number of groups found");
        return n;
      }
      canonicalForm() {
        return this.parsedAddress.map(Om).join(":");
      }
      decimal() {
        return this.parsedAddress.map((e2) => (0, ct.sprintf)("%05d", parseInt(e2, 16))).join(":");
      }
      bigInteger() {
        return new lt.BigInteger(this.parsedAddress.map(Om).join(""), 16);
      }
      to4() {
        let e2 = this.binaryZeroPad().split("");
        return Yi.Address4.fromHex(new lt.BigInteger(e2.slice(96, 128).join(""), 2).toString(16));
      }
      to4in6() {
        let e2 = this.to4(), r2 = new t(this.parsedAddress.slice(0, 6).join(":"), 6).correctForm(), n = "";
        return /:$/.test(r2) || (n = ":"), r2 + n + e2.address;
      }
      inspectTeredo() {
        let e2 = this.getBitsBase16(0, 32), i = this.getBits(80, 96).xor(new lt.BigInteger("ffff", 16)).toString(), r2 = Yi.Address4.fromHex(this.getBitsBase16(32, 64)), n = Yi.Address4.fromHex(this.getBits(96, 128).xor(new lt.BigInteger("ffffffff", 16)).toString(16)), s2 = this.getBits(64, 80), o2 = this.getBitsBase2(64, 80), a = s2.testBit(15), l = s2.testBit(14), c2 = s2.testBit(8), u2 = s2.testBit(9), f2 = new lt.BigInteger(o2.slice(2, 6) + o2.slice(8, 16), 2).toString(10);
        return { prefix: (0, ct.sprintf)("%s:%s", e2.slice(0, 4), e2.slice(4, 8)), server4: r2.address, client4: n.address, flags: o2, coneNat: a, microsoft: { reserved: l, universalLocal: u2, groupIndividual: c2, nonce: f2 }, udpPort: i };
      }
      inspect6to4() {
        let e2 = this.getBitsBase16(0, 16), i = Yi.Address4.fromHex(this.getBitsBase16(16, 48));
        return { prefix: (0, ct.sprintf)("%s", e2.slice(0, 4)), gateway: i.address };
      }
      to6to4() {
        if (!this.is4()) return null;
        let e2 = ["2002", this.getBitsBase16(96, 112), this.getBitsBase16(112, 128), "", "/16"].join(":");
        return new t(e2);
      }
      toByteArray() {
        let e2 = this.bigInteger().toByteArray();
        return e2.length === 17 && e2[0] === 0 ? e2.slice(1) : e2;
      }
      toUnsignedByteArray() {
        return this.toByteArray().map(Cm);
      }
      static fromByteArray(e2) {
        return this.fromUnsignedByteArray(e2.map(Cm));
      }
      static fromUnsignedByteArray(e2) {
        let i = new lt.BigInteger("256", 10), r2 = new lt.BigInteger("0", 10), n = new lt.BigInteger("1", 10);
        for (let s2 = e2.length - 1; s2 >= 0; s2--) r2 = r2.add(n.multiply(new lt.BigInteger(e2[s2].toString(10), 10))), n = n.multiply(i);
        return t.fromBigInteger(r2);
      }
      isCanonical() {
        return this.addressMinusSuffix === this.canonicalForm();
      }
      isLinkLocal() {
        return this.getBitsBase2(0, 64) === "1111111010000000000000000000000000000000000000000000000000000000";
      }
      isMulticast() {
        return this.getType() === "Multicast";
      }
      is4() {
        return this.v4;
      }
      isTeredo() {
        return this.isInSubnet(new t("2001::/32"));
      }
      is6to4() {
        return this.isInSubnet(new t("2002::/16"));
      }
      isLoopback() {
        return this.getType() === "Loopback";
      }
      href(e2) {
        return e2 === void 0 ? e2 = "" : e2 = (0, ct.sprintf)(":%s", e2), (0, ct.sprintf)("http://[%s]%s/", this.correctForm(), e2);
      }
      link(e2) {
        e2 || (e2 = {}), e2.className === void 0 && (e2.className = ""), e2.prefix === void 0 && (e2.prefix = "/#address="), e2.v4 === void 0 && (e2.v4 = false);
        let i = this.correctForm;
        return e2.v4 && (i = this.to4in6), e2.className ? (0, ct.sprintf)('<a href="%1$s%2$s" class="%3$s">%2$s</a>', e2.prefix, i.call(this), e2.className) : (0, ct.sprintf)('<a href="%1$s%2$s">%2$s</a>', e2.prefix, i.call(this));
      }
      group() {
        if (this.elidedGroups === 0) return Kl.simpleGroup(this.address).join(":");
        Gs(typeof this.elidedGroups == "number"), Gs(typeof this.elisionBegin == "number");
        let e2 = [], [i, r2] = this.address.split("::");
        i.length ? e2.push(...Kl.simpleGroup(i)) : e2.push("");
        let n = ["hover-group"];
        for (let s2 = this.elisionBegin; s2 < this.elisionBegin + this.elidedGroups; s2++) n.push((0, ct.sprintf)("group-%d", s2));
        return e2.push((0, ct.sprintf)('<span class="%s"></span>', n.join(" "))), r2.length ? e2.push(...Kl.simpleGroup(r2, this.elisionEnd)) : e2.push(""), this.is4() && (Gs(this.address4 instanceof Yi.Address4), e2.pop(), e2.push(this.address4.groupForV6())), e2.join(":");
      }
      regularExpressionString(e2 = false) {
        let i = [], r2 = new t(this.correctForm());
        if (r2.elidedGroups === 0) i.push((0, Wi.simpleRegularExpression)(r2.parsedAddress));
        else if (r2.elidedGroups === Le.GROUPS) i.push((0, Wi.possibleElisions)(Le.GROUPS));
        else {
          let n = r2.address.split("::");
          n[0].length && i.push((0, Wi.simpleRegularExpression)(n[0].split(":"))), Gs(typeof r2.elidedGroups == "number"), i.push((0, Wi.possibleElisions)(r2.elidedGroups, n[0].length !== 0, n[1].length !== 0)), n[1].length && i.push((0, Wi.simpleRegularExpression)(n[1].split(":"))), i = [i.join(":")];
        }
        return e2 || (i = ["(?=^|", Wi.ADDRESS_BOUNDARY, "|[^\\w\\:])(", ...i, ")(?=[^\\w\\:]|", Wi.ADDRESS_BOUNDARY, "|$)"]), i.join("");
      }
      regularExpression(e2 = false) {
        return new RegExp(this.regularExpressionString(e2), "i");
      }
    };
    Wt.Address6 = zl;
  });
  var Jl = _2((rt) => {
    var ES = rt && rt.__createBinding || (Object.create ? function(t, e2, i, r2) {
      r2 === void 0 && (r2 = i);
      var n = Object.getOwnPropertyDescriptor(e2, i);
      (!n || ("get" in n ? !e2.__esModule : n.writable || n.configurable)) && (n = { enumerable: true, get: function() {
        return e2[i];
      } }), Object.defineProperty(t, r2, n);
    } : function(t, e2, i, r2) {
      r2 === void 0 && (r2 = i), t[r2] = e2[i];
    }), kS = rt && rt.__setModuleDefault || (Object.create ? function(t, e2) {
      Object.defineProperty(t, "default", { enumerable: true, value: e2 });
    } : function(t, e2) {
      t.default = e2;
    }), OS = rt && rt.__importStar || function(t) {
      if (t && t.__esModule) return t;
      var e2 = {};
      if (t != null) for (var i in t) i !== "default" && Object.prototype.hasOwnProperty.call(t, i) && ES(e2, t, i);
      return kS(e2, t), e2;
    };
    Object.defineProperty(rt, "__esModule", { value: true });
    rt.v6 = rt.AddressError = rt.Address6 = rt.Address4 = void 0;
    var CS = Hl();
    Object.defineProperty(rt, "Address4", { enumerable: true, get: function() {
      return CS.Address4;
    } });
    var TS = Tm();
    Object.defineProperty(rt, "Address6", { enumerable: true, get: function() {
      return TS.Address6;
    } });
    var AS = js();
    Object.defineProperty(rt, "AddressError", { enumerable: true, get: function() {
      return AS.AddressError;
    } });
    var IS = OS(Yl());
    rt.v6 = { helpers: IS };
  });
  var Rm = _2((At) => {
    Object.defineProperty(At, "__esModule", { value: true });
    At.ipToBuffer = At.int32ToIpv4 = At.ipv4ToInt32 = At.validateSocksClientChainOptions = At.validateSocksClientOptions = void 0;
    var ut = ql(), Je = Ml(), NS = require$$12, Zl = Jl(), Am = require$$8;
    function LS(t, e2 = ["connect", "bind", "associate"]) {
      if (!Je.SocksCommand[t.command]) throw new ut.SocksClientError(Je.ERRORS.InvalidSocksCommand, t);
      if (e2.indexOf(t.command) === -1) throw new ut.SocksClientError(Je.ERRORS.InvalidSocksCommandForOperation, t);
      if (!Nm(t.destination)) throw new ut.SocksClientError(Je.ERRORS.InvalidSocksClientOptionsDestination, t);
      if (!Lm(t.proxy)) throw new ut.SocksClientError(Je.ERRORS.InvalidSocksClientOptionsProxy, t);
      if (Im(t.proxy, t), t.timeout && !Bm(t.timeout)) throw new ut.SocksClientError(Je.ERRORS.InvalidSocksClientOptionsTimeout, t);
      if (t.existing_socket && !(t.existing_socket instanceof NS.Duplex)) throw new ut.SocksClientError(Je.ERRORS.InvalidSocksClientOptionsExistingSocket, t);
    }
    At.validateSocksClientOptions = LS;
    function BS(t) {
      if (t.command !== "connect") throw new ut.SocksClientError(Je.ERRORS.InvalidSocksCommandChain, t);
      if (!Nm(t.destination)) throw new ut.SocksClientError(Je.ERRORS.InvalidSocksClientOptionsDestination, t);
      if (!(t.proxies && Array.isArray(t.proxies) && t.proxies.length >= 2)) throw new ut.SocksClientError(Je.ERRORS.InvalidSocksClientOptionsProxiesLength, t);
      if (t.proxies.forEach((e2) => {
        if (!Lm(e2)) throw new ut.SocksClientError(Je.ERRORS.InvalidSocksClientOptionsProxy, t);
        Im(e2, t);
      }), t.timeout && !Bm(t.timeout)) throw new ut.SocksClientError(Je.ERRORS.InvalidSocksClientOptionsTimeout, t);
    }
    At.validateSocksClientChainOptions = BS;
    function Im(t, e2) {
      if (t.custom_auth_method !== void 0) {
        if (t.custom_auth_method < Je.SOCKS5_CUSTOM_AUTH_START || t.custom_auth_method > Je.SOCKS5_CUSTOM_AUTH_END) throw new ut.SocksClientError(Je.ERRORS.InvalidSocksClientOptionsCustomAuthRange, e2);
        if (t.custom_auth_request_handler === void 0 || typeof t.custom_auth_request_handler != "function") throw new ut.SocksClientError(Je.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, e2);
        if (t.custom_auth_response_size === void 0) throw new ut.SocksClientError(Je.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, e2);
        if (t.custom_auth_response_handler === void 0 || typeof t.custom_auth_response_handler != "function") throw new ut.SocksClientError(Je.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, e2);
      }
    }
    function Nm(t) {
      return t && typeof t.host == "string" && typeof t.port == "number" && t.port >= 0 && t.port <= 65535;
    }
    function Lm(t) {
      return t && (typeof t.host == "string" || typeof t.ipaddress == "string") && typeof t.port == "number" && t.port >= 0 && t.port <= 65535 && (t.type === 4 || t.type === 5);
    }
    function Bm(t) {
      return typeof t == "number" && t > 0;
    }
    function RS(t) {
      return new Zl.Address4(t).toArray().reduce((i, r2) => (i << 8) + r2, 0);
    }
    At.ipv4ToInt32 = RS;
    function PS(t) {
      let e2 = t >>> 24 & 255, i = t >>> 16 & 255, r2 = t >>> 8 & 255, n = t & 255;
      return [e2, i, r2, n].join(".");
    }
    At.int32ToIpv4 = PS;
    function MS(t) {
      if (Am.isIPv4(t)) {
        let e2 = new Zl.Address4(t);
        return Buffer.from(e2.toArray());
      } else if (Am.isIPv6(t)) {
        let e2 = new Zl.Address6(t);
        return Buffer.from(e2.canonicalForm().split(":").map((i) => i.padStart(4, "0")).join(""), "hex");
      } else throw new Error("Invalid IP address format");
    }
    At.ipToBuffer = MS;
  });
  var Pm = _2((Ws) => {
    Object.defineProperty(Ws, "__esModule", { value: true });
    Ws.ReceiveBuffer = void 0;
    var Ql = class {
      constructor(e2 = 4096) {
        this.buffer = Buffer.allocUnsafe(e2), this.offset = 0, this.originalSize = e2;
      }
      get length() {
        return this.offset;
      }
      append(e2) {
        if (!Buffer.isBuffer(e2)) throw new Error("Attempted to append a non-buffer instance to ReceiveBuffer.");
        if (this.offset + e2.length >= this.buffer.length) {
          let i = this.buffer;
          this.buffer = Buffer.allocUnsafe(Math.max(this.buffer.length + this.originalSize, this.buffer.length + e2.length)), i.copy(this.buffer);
        }
        return e2.copy(this.buffer, this.offset), this.offset += e2.length;
      }
      peek(e2) {
        if (e2 > this.offset) throw new Error("Attempted to read beyond the bounds of the managed internal data.");
        return this.buffer.slice(0, e2);
      }
      get(e2) {
        if (e2 > this.offset) throw new Error("Attempted to read beyond the bounds of the managed internal data.");
        let i = Buffer.allocUnsafe(e2);
        return this.buffer.slice(0, e2).copy(i), this.buffer.copyWithin(0, e2, e2 + this.offset - e2), this.offset -= e2, i;
      }
    };
    Ws.ReceiveBuffer = Ql;
  });
  var Mm = _2((gi) => {
    var Lr = gi && gi.__awaiter || function(t, e2, i, r2) {
      function n(s2) {
        return s2 instanceof i ? s2 : new i(function(o2) {
          o2(s2);
        });
      }
      return new (i || (i = Promise))(function(s2, o2) {
        function a(u2) {
          try {
            c2(r2.next(u2));
          } catch (f2) {
            o2(f2);
          }
        }
        function l(u2) {
          try {
            c2(r2.throw(u2));
          } catch (f2) {
            o2(f2);
          }
        }
        function c2(u2) {
          u2.done ? s2(u2.value) : n(u2.value).then(a, l);
        }
        c2((r2 = r2.apply(t, e2 || [])).next());
      });
    };
    Object.defineProperty(gi, "__esModule", { value: true });
    gi.SocksClientError = gi.SocksClient = void 0;
    var FS = require$$0$4, Br = require$$8, dt = um(), F = Ml(), xt = Rm(), qS = Pm(), ec = ql();
    Object.defineProperty(gi, "SocksClientError", { enumerable: true, get: function() {
      return ec.SocksClientError;
    } });
    var Xl = Jl(), tc = class t extends FS.EventEmitter {
      constructor(e2) {
        super(), this.options = Object.assign({}, e2), (0, xt.validateSocksClientOptions)(e2), this.setState(F.SocksClientState.Created);
      }
      static createConnection(e2, i) {
        return new Promise((r2, n) => {
          try {
            (0, xt.validateSocksClientOptions)(e2, ["connect"]);
          } catch (o2) {
            return typeof i == "function" ? (i(o2), r2(o2)) : n(o2);
          }
          let s2 = new t(e2);
          s2.connect(e2.existing_socket), s2.once("established", (o2) => {
            s2.removeAllListeners(), typeof i == "function" && i(null, o2), r2(o2);
          }), s2.once("error", (o2) => {
            s2.removeAllListeners(), typeof i == "function" ? (i(o2), r2(o2)) : n(o2);
          });
        });
      }
      static createConnectionChain(e2, i) {
        return new Promise((r2, n) => Lr(this, void 0, void 0, function* () {
          try {
            (0, xt.validateSocksClientChainOptions)(e2);
          } catch (s2) {
            return typeof i == "function" ? (i(s2), r2(s2)) : n(s2);
          }
          e2.randomizeChain && (0, ec.shuffleArray)(e2.proxies);
          try {
            let s2;
            for (let o2 = 0; o2 < e2.proxies.length; o2++) {
              let a = e2.proxies[o2], l = o2 === e2.proxies.length - 1 ? e2.destination : { host: e2.proxies[o2 + 1].host || e2.proxies[o2 + 1].ipaddress, port: e2.proxies[o2 + 1].port }, c2 = yield t.createConnection({ command: "connect", proxy: a, destination: l, existing_socket: s2 });
              s2 = s2 || c2.socket;
            }
            typeof i == "function" ? (i(null, { socket: s2 }), r2({ socket: s2 })) : r2({ socket: s2 });
          } catch (s2) {
            typeof i == "function" ? (i(s2), r2(s2)) : n(s2);
          }
        }));
      }
      static createUDPFrame(e2) {
        let i = new dt.SmartBuffer();
        return i.writeUInt16BE(0), i.writeUInt8(e2.frameNumber || 0), Br.isIPv4(e2.remoteHost.host) ? (i.writeUInt8(F.Socks5HostType.IPv4), i.writeUInt32BE((0, xt.ipv4ToInt32)(e2.remoteHost.host))) : Br.isIPv6(e2.remoteHost.host) ? (i.writeUInt8(F.Socks5HostType.IPv6), i.writeBuffer((0, xt.ipToBuffer)(e2.remoteHost.host))) : (i.writeUInt8(F.Socks5HostType.Hostname), i.writeUInt8(Buffer.byteLength(e2.remoteHost.host)), i.writeString(e2.remoteHost.host)), i.writeUInt16BE(e2.remoteHost.port), i.writeBuffer(e2.data), i.toBuffer();
      }
      static parseUDPFrame(e2) {
        let i = dt.SmartBuffer.fromBuffer(e2);
        i.readOffset = 2;
        let r2 = i.readUInt8(), n = i.readUInt8(), s2;
        n === F.Socks5HostType.IPv4 ? s2 = (0, xt.int32ToIpv4)(i.readUInt32BE()) : n === F.Socks5HostType.IPv6 ? s2 = Xl.Address6.fromByteArray(Array.from(i.readBuffer(16))).canonicalForm() : s2 = i.readString(i.readUInt8());
        let o2 = i.readUInt16BE();
        return { frameNumber: r2, remoteHost: { host: s2, port: o2 }, data: i.readBuffer() };
      }
      setState(e2) {
        this.state !== F.SocksClientState.Error && (this.state = e2);
      }
      connect(e2) {
        this.onDataReceived = (r2) => this.onDataReceivedHandler(r2), this.onClose = () => this.onCloseHandler(), this.onError = (r2) => this.onErrorHandler(r2), this.onConnect = () => this.onConnectHandler();
        let i = setTimeout(() => this.onEstablishedTimeout(), this.options.timeout || F.DEFAULT_TIMEOUT);
        i.unref && typeof i.unref == "function" && i.unref(), e2 ? this.socket = e2 : this.socket = new Br.Socket(), this.socket.once("close", this.onClose), this.socket.once("error", this.onError), this.socket.once("connect", this.onConnect), this.socket.on("data", this.onDataReceived), this.setState(F.SocksClientState.Connecting), this.receiveBuffer = new qS.ReceiveBuffer(), e2 ? this.socket.emit("connect") : (this.socket.connect(this.getSocketOptions()), this.options.set_tcp_nodelay !== void 0 && this.options.set_tcp_nodelay !== null && this.socket.setNoDelay(!!this.options.set_tcp_nodelay)), this.prependOnceListener("established", (r2) => {
          setImmediate(() => {
            if (this.receiveBuffer.length > 0) {
              let n = this.receiveBuffer.get(this.receiveBuffer.length);
              r2.socket.emit("data", n);
            }
            r2.socket.resume();
          });
        });
      }
      getSocketOptions() {
        return Object.assign(Object.assign({}, this.options.socket_options), { host: this.options.proxy.host || this.options.proxy.ipaddress, port: this.options.proxy.port });
      }
      onEstablishedTimeout() {
        this.state !== F.SocksClientState.Established && this.state !== F.SocksClientState.BoundWaitingForConnection && this.closeSocket(F.ERRORS.ProxyConnectionTimedOut);
      }
      onConnectHandler() {
        this.setState(F.SocksClientState.Connected), this.options.proxy.type === 4 ? this.sendSocks4InitialHandshake() : this.sendSocks5InitialHandshake(), this.setState(F.SocksClientState.SentInitialHandshake);
      }
      onDataReceivedHandler(e2) {
        this.receiveBuffer.append(e2), this.processData();
      }
      processData() {
        for (; this.state !== F.SocksClientState.Established && this.state !== F.SocksClientState.Error && this.receiveBuffer.length >= this.nextRequiredPacketBufferSize; ) if (this.state === F.SocksClientState.SentInitialHandshake) this.options.proxy.type === 4 ? this.handleSocks4FinalHandshakeResponse() : this.handleInitialSocks5HandshakeResponse();
        else if (this.state === F.SocksClientState.SentAuthentication) this.handleInitialSocks5AuthenticationHandshakeResponse();
        else if (this.state === F.SocksClientState.SentFinalHandshake) this.handleSocks5FinalHandshakeResponse();
        else if (this.state === F.SocksClientState.BoundWaitingForConnection) this.options.proxy.type === 4 ? this.handleSocks4IncomingConnectionResponse() : this.handleSocks5IncomingConnectionResponse();
        else {
          this.closeSocket(F.ERRORS.InternalError);
          break;
        }
      }
      onCloseHandler() {
        this.closeSocket(F.ERRORS.SocketClosed);
      }
      onErrorHandler(e2) {
        this.closeSocket(e2.message);
      }
      removeInternalSocketHandlers() {
        this.socket.pause(), this.socket.removeListener("data", this.onDataReceived), this.socket.removeListener("close", this.onClose), this.socket.removeListener("error", this.onError), this.socket.removeListener("connect", this.onConnect);
      }
      closeSocket(e2) {
        this.state !== F.SocksClientState.Error && (this.setState(F.SocksClientState.Error), this.socket.destroy(), this.removeInternalSocketHandlers(), this.emit("error", new ec.SocksClientError(e2, this.options)));
      }
      sendSocks4InitialHandshake() {
        let e2 = this.options.proxy.userId || "", i = new dt.SmartBuffer();
        i.writeUInt8(4), i.writeUInt8(F.SocksCommand[this.options.command]), i.writeUInt16BE(this.options.destination.port), Br.isIPv4(this.options.destination.host) ? (i.writeBuffer((0, xt.ipToBuffer)(this.options.destination.host)), i.writeStringNT(e2)) : (i.writeUInt8(0), i.writeUInt8(0), i.writeUInt8(0), i.writeUInt8(1), i.writeStringNT(e2), i.writeStringNT(this.options.destination.host)), this.nextRequiredPacketBufferSize = F.SOCKS_INCOMING_PACKET_SIZES.Socks4Response, this.socket.write(i.toBuffer());
      }
      handleSocks4FinalHandshakeResponse() {
        let e2 = this.receiveBuffer.get(8);
        if (e2[1] !== F.Socks4Response.Granted) this.closeSocket(`${F.ERRORS.Socks4ProxyRejectedConnection} - (${F.Socks4Response[e2[1]]})`);
        else if (F.SocksCommand[this.options.command] === F.SocksCommand.bind) {
          let i = dt.SmartBuffer.fromBuffer(e2);
          i.readOffset = 2;
          let r2 = { port: i.readUInt16BE(), host: (0, xt.int32ToIpv4)(i.readUInt32BE()) };
          r2.host === "0.0.0.0" && (r2.host = this.options.proxy.ipaddress), this.setState(F.SocksClientState.BoundWaitingForConnection), this.emit("bound", { remoteHost: r2, socket: this.socket });
        } else this.setState(F.SocksClientState.Established), this.removeInternalSocketHandlers(), this.emit("established", { socket: this.socket });
      }
      handleSocks4IncomingConnectionResponse() {
        let e2 = this.receiveBuffer.get(8);
        if (e2[1] !== F.Socks4Response.Granted) this.closeSocket(`${F.ERRORS.Socks4ProxyRejectedIncomingBoundConnection} - (${F.Socks4Response[e2[1]]})`);
        else {
          let i = dt.SmartBuffer.fromBuffer(e2);
          i.readOffset = 2;
          let r2 = { port: i.readUInt16BE(), host: (0, xt.int32ToIpv4)(i.readUInt32BE()) };
          this.setState(F.SocksClientState.Established), this.removeInternalSocketHandlers(), this.emit("established", { remoteHost: r2, socket: this.socket });
        }
      }
      sendSocks5InitialHandshake() {
        let e2 = new dt.SmartBuffer(), i = [F.Socks5Auth.NoAuth];
        (this.options.proxy.userId || this.options.proxy.password) && i.push(F.Socks5Auth.UserPass), this.options.proxy.custom_auth_method !== void 0 && i.push(this.options.proxy.custom_auth_method), e2.writeUInt8(5), e2.writeUInt8(i.length);
        for (let r2 of i) e2.writeUInt8(r2);
        this.nextRequiredPacketBufferSize = F.SOCKS_INCOMING_PACKET_SIZES.Socks5InitialHandshakeResponse, this.socket.write(e2.toBuffer()), this.setState(F.SocksClientState.SentInitialHandshake);
      }
      handleInitialSocks5HandshakeResponse() {
        let e2 = this.receiveBuffer.get(2);
        e2[0] !== 5 ? this.closeSocket(F.ERRORS.InvalidSocks5IntiailHandshakeSocksVersion) : e2[1] === F.SOCKS5_NO_ACCEPTABLE_AUTH ? this.closeSocket(F.ERRORS.InvalidSocks5InitialHandshakeNoAcceptedAuthType) : e2[1] === F.Socks5Auth.NoAuth ? (this.socks5ChosenAuthType = F.Socks5Auth.NoAuth, this.sendSocks5CommandRequest()) : e2[1] === F.Socks5Auth.UserPass ? (this.socks5ChosenAuthType = F.Socks5Auth.UserPass, this.sendSocks5UserPassAuthentication()) : e2[1] === this.options.proxy.custom_auth_method ? (this.socks5ChosenAuthType = this.options.proxy.custom_auth_method, this.sendSocks5CustomAuthentication()) : this.closeSocket(F.ERRORS.InvalidSocks5InitialHandshakeUnknownAuthType);
      }
      sendSocks5UserPassAuthentication() {
        let e2 = this.options.proxy.userId || "", i = this.options.proxy.password || "", r2 = new dt.SmartBuffer();
        r2.writeUInt8(1), r2.writeUInt8(Buffer.byteLength(e2)), r2.writeString(e2), r2.writeUInt8(Buffer.byteLength(i)), r2.writeString(i), this.nextRequiredPacketBufferSize = F.SOCKS_INCOMING_PACKET_SIZES.Socks5UserPassAuthenticationResponse, this.socket.write(r2.toBuffer()), this.setState(F.SocksClientState.SentAuthentication);
      }
      sendSocks5CustomAuthentication() {
        return Lr(this, void 0, void 0, function* () {
          this.nextRequiredPacketBufferSize = this.options.proxy.custom_auth_response_size, this.socket.write(yield this.options.proxy.custom_auth_request_handler()), this.setState(F.SocksClientState.SentAuthentication);
        });
      }
      handleSocks5CustomAuthHandshakeResponse(e2) {
        return Lr(this, void 0, void 0, function* () {
          return yield this.options.proxy.custom_auth_response_handler(e2);
        });
      }
      handleSocks5AuthenticationNoAuthHandshakeResponse(e2) {
        return Lr(this, void 0, void 0, function* () {
          return e2[1] === 0;
        });
      }
      handleSocks5AuthenticationUserPassHandshakeResponse(e2) {
        return Lr(this, void 0, void 0, function* () {
          return e2[1] === 0;
        });
      }
      handleInitialSocks5AuthenticationHandshakeResponse() {
        return Lr(this, void 0, void 0, function* () {
          this.setState(F.SocksClientState.ReceivedAuthenticationResponse);
          let e2 = false;
          this.socks5ChosenAuthType === F.Socks5Auth.NoAuth ? e2 = yield this.handleSocks5AuthenticationNoAuthHandshakeResponse(this.receiveBuffer.get(2)) : this.socks5ChosenAuthType === F.Socks5Auth.UserPass ? e2 = yield this.handleSocks5AuthenticationUserPassHandshakeResponse(this.receiveBuffer.get(2)) : this.socks5ChosenAuthType === this.options.proxy.custom_auth_method && (e2 = yield this.handleSocks5CustomAuthHandshakeResponse(this.receiveBuffer.get(this.options.proxy.custom_auth_response_size))), e2 ? this.sendSocks5CommandRequest() : this.closeSocket(F.ERRORS.Socks5AuthenticationFailed);
        });
      }
      sendSocks5CommandRequest() {
        let e2 = new dt.SmartBuffer();
        e2.writeUInt8(5), e2.writeUInt8(F.SocksCommand[this.options.command]), e2.writeUInt8(0), Br.isIPv4(this.options.destination.host) ? (e2.writeUInt8(F.Socks5HostType.IPv4), e2.writeBuffer((0, xt.ipToBuffer)(this.options.destination.host))) : Br.isIPv6(this.options.destination.host) ? (e2.writeUInt8(F.Socks5HostType.IPv6), e2.writeBuffer((0, xt.ipToBuffer)(this.options.destination.host))) : (e2.writeUInt8(F.Socks5HostType.Hostname), e2.writeUInt8(this.options.destination.host.length), e2.writeString(this.options.destination.host)), e2.writeUInt16BE(this.options.destination.port), this.nextRequiredPacketBufferSize = F.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHeader, this.socket.write(e2.toBuffer()), this.setState(F.SocksClientState.SentFinalHandshake);
      }
      handleSocks5FinalHandshakeResponse() {
        let e2 = this.receiveBuffer.peek(5);
        if (e2[0] !== 5 || e2[1] !== F.Socks5Response.Granted) this.closeSocket(`${F.ERRORS.InvalidSocks5FinalHandshakeRejected} - ${F.Socks5Response[e2[1]]}`);
        else {
          let i = e2[3], r2, n;
          if (i === F.Socks5HostType.IPv4) {
            let s2 = F.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv4;
            if (this.receiveBuffer.length < s2) {
              this.nextRequiredPacketBufferSize = s2;
              return;
            }
            n = dt.SmartBuffer.fromBuffer(this.receiveBuffer.get(s2).slice(4)), r2 = { host: (0, xt.int32ToIpv4)(n.readUInt32BE()), port: n.readUInt16BE() }, r2.host === "0.0.0.0" && (r2.host = this.options.proxy.ipaddress);
          } else if (i === F.Socks5HostType.Hostname) {
            let s2 = e2[4], o2 = F.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHostname(s2);
            if (this.receiveBuffer.length < o2) {
              this.nextRequiredPacketBufferSize = o2;
              return;
            }
            n = dt.SmartBuffer.fromBuffer(this.receiveBuffer.get(o2).slice(5)), r2 = { host: n.readString(s2), port: n.readUInt16BE() };
          } else if (i === F.Socks5HostType.IPv6) {
            let s2 = F.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv6;
            if (this.receiveBuffer.length < s2) {
              this.nextRequiredPacketBufferSize = s2;
              return;
            }
            n = dt.SmartBuffer.fromBuffer(this.receiveBuffer.get(s2).slice(4)), r2 = { host: Xl.Address6.fromByteArray(Array.from(n.readBuffer(16))).canonicalForm(), port: n.readUInt16BE() };
          }
          this.setState(F.SocksClientState.ReceivedFinalResponse), F.SocksCommand[this.options.command] === F.SocksCommand.connect ? (this.setState(F.SocksClientState.Established), this.removeInternalSocketHandlers(), this.emit("established", { remoteHost: r2, socket: this.socket })) : F.SocksCommand[this.options.command] === F.SocksCommand.bind ? (this.setState(F.SocksClientState.BoundWaitingForConnection), this.nextRequiredPacketBufferSize = F.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHeader, this.emit("bound", { remoteHost: r2, socket: this.socket })) : F.SocksCommand[this.options.command] === F.SocksCommand.associate && (this.setState(F.SocksClientState.Established), this.removeInternalSocketHandlers(), this.emit("established", { remoteHost: r2, socket: this.socket }));
        }
      }
      handleSocks5IncomingConnectionResponse() {
        let e2 = this.receiveBuffer.peek(5);
        if (e2[0] !== 5 || e2[1] !== F.Socks5Response.Granted) this.closeSocket(`${F.ERRORS.Socks5ProxyRejectedIncomingBoundConnection} - ${F.Socks5Response[e2[1]]}`);
        else {
          let i = e2[3], r2, n;
          if (i === F.Socks5HostType.IPv4) {
            let s2 = F.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv4;
            if (this.receiveBuffer.length < s2) {
              this.nextRequiredPacketBufferSize = s2;
              return;
            }
            n = dt.SmartBuffer.fromBuffer(this.receiveBuffer.get(s2).slice(4)), r2 = { host: (0, xt.int32ToIpv4)(n.readUInt32BE()), port: n.readUInt16BE() }, r2.host === "0.0.0.0" && (r2.host = this.options.proxy.ipaddress);
          } else if (i === F.Socks5HostType.Hostname) {
            let s2 = e2[4], o2 = F.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHostname(s2);
            if (this.receiveBuffer.length < o2) {
              this.nextRequiredPacketBufferSize = o2;
              return;
            }
            n = dt.SmartBuffer.fromBuffer(this.receiveBuffer.get(o2).slice(5)), r2 = { host: n.readString(s2), port: n.readUInt16BE() };
          } else if (i === F.Socks5HostType.IPv6) {
            let s2 = F.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv6;
            if (this.receiveBuffer.length < s2) {
              this.nextRequiredPacketBufferSize = s2;
              return;
            }
            n = dt.SmartBuffer.fromBuffer(this.receiveBuffer.get(s2).slice(4)), r2 = { host: Xl.Address6.fromByteArray(Array.from(n.readBuffer(16))).canonicalForm(), port: n.readUInt16BE() };
          }
          this.setState(F.SocksClientState.Established), this.removeInternalSocketHandlers(), this.emit("established", { remoteHost: r2, socket: this.socket });
        }
      }
      get socksClientOptions() {
        return Object.assign({}, this.options);
      }
    };
    gi.SocksClient = tc;
  });
  var Fm = _2((Ki) => {
    var DS = Ki && Ki.__createBinding || (Object.create ? function(t, e2, i, r2) {
      r2 === void 0 && (r2 = i);
      var n = Object.getOwnPropertyDescriptor(e2, i);
      (!n || ("get" in n ? !e2.__esModule : n.writable || n.configurable)) && (n = { enumerable: true, get: function() {
        return e2[i];
      } }), Object.defineProperty(t, r2, n);
    } : function(t, e2, i, r2) {
      r2 === void 0 && (r2 = i), t[r2] = e2[i];
    }), jS = Ki && Ki.__exportStar || function(t, e2) {
      for (var i in t) i !== "default" && !Object.prototype.hasOwnProperty.call(e2, i) && DS(e2, t, i);
    };
    Object.defineProperty(Ki, "__esModule", { value: true });
    jS(Mm(), Ki);
  });
  var qm = _2((zi) => {
    var US = zi && zi.__awaiter || function(t, e2, i, r2) {
      function n(s2) {
        return s2 instanceof i ? s2 : new i(function(o2) {
          o2(s2);
        });
      }
      return new (i || (i = Promise))(function(s2, o2) {
        function a(u2) {
          try {
            c2(r2.next(u2));
          } catch (f2) {
            o2(f2);
          }
        }
        function l(u2) {
          try {
            c2(r2.throw(u2));
          } catch (f2) {
            o2(f2);
          }
        }
        function c2(u2) {
          u2.done ? s2(u2.value) : n(u2.value).then(a, l);
        }
        c2((r2 = r2.apply(t, e2 || [])).next());
      });
    }, Ks = zi && zi.__importDefault || function(t) {
      return t && t.__esModule ? t : { default: t };
    };
    Object.defineProperty(zi, "__esModule", { value: true });
    var $S = Ks(require$$15$1), VS = Ks(require$$9), HS = Ks(require$$6), GS = Ks(yr()), YS = ja(), WS = Fm(), ic = GS.default("socks-proxy-agent");
    function KS(t) {
      return new Promise((e2, i) => {
        $S.default.lookup(t, (r2, n) => {
          r2 ? i(r2) : e2(n);
        });
      });
    }
    function zS(t) {
      let e2 = 0, i = false, r2 = 5, n = t.hostname || t.host;
      if (!n) throw new TypeError('No "host"');
      if (typeof t.port == "number" ? e2 = t.port : typeof t.port == "string" && (e2 = parseInt(t.port, 10)), e2 || (e2 = 1080), t.protocol) switch (t.protocol.replace(":", "")) {
        case "socks4":
          i = true;
        case "socks4a":
          r2 = 4;
          break;
        case "socks5":
          i = true;
        case "socks":
        case "socks5h":
          r2 = 5;
          break;
        default:
          throw new TypeError(`A "socks" protocol must be specified! Got: ${t.protocol}`);
      }
      if (typeof t.type != "undefined") if (t.type === 4 || t.type === 5) r2 = t.type;
      else throw new TypeError(`"type" must be 4 or 5, got: ${t.type}`);
      let s2 = { host: n, port: e2, type: r2 }, o2 = t.userId || t.username, a = t.password;
      if (t.auth) {
        let l = t.auth.split(":");
        o2 = l[0], a = l[1];
      }
      return o2 && Object.defineProperty(s2, "userId", { value: o2, enumerable: false }), a && Object.defineProperty(s2, "password", { value: a, enumerable: false }), { lookup: i, proxy: s2 };
    }
    var rc = class extends YS.Agent {
      constructor(e2) {
        let i;
        if (typeof e2 == "string" ? i = HS.default.parse(e2) : i = e2, !i) throw new TypeError("a SOCKS proxy server `host` and `port` must be specified!");
        super(i);
        let r2 = zS(i);
        this.lookup = r2.lookup, this.proxy = r2.proxy, this.tlsConnectionOptions = i.tls || {};
      }
      callback(e2, i) {
        return US(this, void 0, void 0, function* () {
          let { lookup: r2, proxy: n } = this, { host: s2, port: o2, timeout: a } = i;
          if (!s2) throw new Error("No `host` defined!");
          r2 && (s2 = yield KS(s2));
          let l = { proxy: n, destination: { host: s2, port: o2 }, command: "connect", timeout: a };
          ic("Creating socks proxy connection: %o", l);
          let { socket: c2 } = yield WS.SocksClient.createConnection(l);
          if (ic("Successfully created socks proxy connection"), i.secureEndpoint) {
            ic("Upgrading socket connection to TLS");
            let u2 = i.servername || i.host;
            return VS.default.connect(Object.assign(Object.assign(Object.assign({}, JS(i, "host", "hostname", "path", "port")), { socket: c2, servername: u2 }), this.tlsConnectionOptions));
          }
          return c2;
        });
      }
    };
    zi.default = rc;
    function JS(t, ...e2) {
      let i = {}, r2;
      for (r2 in t) e2.includes(r2) || (i[r2] = t[r2]);
      return i;
    }
  });
  var jm = _2((oc, Dm) => {
    var ZS = oc && oc.__importDefault || function(t) {
      return t && t.__esModule ? t : { default: t };
    }, nc = ZS(qm());
    function sc(t) {
      return new nc.default(t);
    }
    (function(t) {
      t.SocksProxyAgent = nc.default, t.prototype = nc.default.prototype;
    })(sc || (sc = {}));
    Dm.exports = sc;
  });
  var Se2 = _2((et) => {
    var ac = Symbol.for("yaml.alias"), Um = Symbol.for("yaml.document"), zs = Symbol.for("yaml.map"), $m = Symbol.for("yaml.pair"), lc = Symbol.for("yaml.scalar"), Js = Symbol.for("yaml.seq"), si = Symbol.for("yaml.node.type"), QS = (t) => !!t && typeof t == "object" && t[si] === ac, XS = (t) => !!t && typeof t == "object" && t[si] === Um, eE = (t) => !!t && typeof t == "object" && t[si] === zs, tE = (t) => !!t && typeof t == "object" && t[si] === $m, Vm = (t) => !!t && typeof t == "object" && t[si] === lc, iE = (t) => !!t && typeof t == "object" && t[si] === Js;
    function Hm(t) {
      if (t && typeof t == "object") switch (t[si]) {
        case zs:
        case Js:
          return true;
      }
      return false;
    }
    function rE(t) {
      if (t && typeof t == "object") switch (t[si]) {
        case ac:
        case zs:
        case lc:
        case Js:
          return true;
      }
      return false;
    }
    var nE = (t) => (Vm(t) || Hm(t)) && !!t.anchor;
    et.ALIAS = ac;
    et.DOC = Um;
    et.MAP = zs;
    et.NODE_TYPE = si;
    et.PAIR = $m;
    et.SCALAR = lc;
    et.SEQ = Js;
    et.hasAnchor = nE;
    et.isAlias = QS;
    et.isCollection = Hm;
    et.isDocument = XS;
    et.isMap = eE;
    et.isNode = rE;
    et.isPair = tE;
    et.isScalar = Vm;
    et.isSeq = iE;
  });
  var hn = _2((cc) => {
    var He = Se2(), mt = Symbol("break visit"), Gm = Symbol("skip children"), Kt = Symbol("remove node");
    function Zs(t, e2) {
      let i = Ym(e2);
      He.isDocument(t) ? Rr(null, t.contents, i, Object.freeze([t])) === Kt && (t.contents = null) : Rr(null, t, i, Object.freeze([]));
    }
    Zs.BREAK = mt;
    Zs.SKIP = Gm;
    Zs.REMOVE = Kt;
    function Rr(t, e2, i, r2) {
      let n = Wm(t, e2, i, r2);
      if (He.isNode(n) || He.isPair(n)) return Km(t, r2, n), Rr(t, n, i, r2);
      if (typeof n != "symbol") {
        if (He.isCollection(e2)) {
          r2 = Object.freeze(r2.concat(e2));
          for (let s2 = 0; s2 < e2.items.length; ++s2) {
            let o2 = Rr(s2, e2.items[s2], i, r2);
            if (typeof o2 == "number") s2 = o2 - 1;
            else {
              if (o2 === mt) return mt;
              o2 === Kt && (e2.items.splice(s2, 1), s2 -= 1);
            }
          }
        } else if (He.isPair(e2)) {
          r2 = Object.freeze(r2.concat(e2));
          let s2 = Rr("key", e2.key, i, r2);
          if (s2 === mt) return mt;
          s2 === Kt && (e2.key = null);
          let o2 = Rr("value", e2.value, i, r2);
          if (o2 === mt) return mt;
          o2 === Kt && (e2.value = null);
        }
      }
      return n;
    }
    async function Qs(t, e2) {
      let i = Ym(e2);
      He.isDocument(t) ? await Pr(null, t.contents, i, Object.freeze([t])) === Kt && (t.contents = null) : await Pr(null, t, i, Object.freeze([]));
    }
    Qs.BREAK = mt;
    Qs.SKIP = Gm;
    Qs.REMOVE = Kt;
    async function Pr(t, e2, i, r2) {
      let n = await Wm(t, e2, i, r2);
      if (He.isNode(n) || He.isPair(n)) return Km(t, r2, n), Pr(t, n, i, r2);
      if (typeof n != "symbol") {
        if (He.isCollection(e2)) {
          r2 = Object.freeze(r2.concat(e2));
          for (let s2 = 0; s2 < e2.items.length; ++s2) {
            let o2 = await Pr(s2, e2.items[s2], i, r2);
            if (typeof o2 == "number") s2 = o2 - 1;
            else {
              if (o2 === mt) return mt;
              o2 === Kt && (e2.items.splice(s2, 1), s2 -= 1);
            }
          }
        } else if (He.isPair(e2)) {
          r2 = Object.freeze(r2.concat(e2));
          let s2 = await Pr("key", e2.key, i, r2);
          if (s2 === mt) return mt;
          s2 === Kt && (e2.key = null);
          let o2 = await Pr("value", e2.value, i, r2);
          if (o2 === mt) return mt;
          o2 === Kt && (e2.value = null);
        }
      }
      return n;
    }
    function Ym(t) {
      return typeof t == "object" && (t.Collection || t.Node || t.Value) ? Object.assign({ Alias: t.Node, Map: t.Node, Scalar: t.Node, Seq: t.Node }, t.Value && { Map: t.Value, Scalar: t.Value, Seq: t.Value }, t.Collection && { Map: t.Collection, Seq: t.Collection }, t) : t;
    }
    function Wm(t, e2, i, r2) {
      var n, s2, o2, a, l;
      if (typeof i == "function") return i(t, e2, r2);
      if (He.isMap(e2)) return (n = i.Map) == null ? void 0 : n.call(i, t, e2, r2);
      if (He.isSeq(e2)) return (s2 = i.Seq) == null ? void 0 : s2.call(i, t, e2, r2);
      if (He.isPair(e2)) return (o2 = i.Pair) == null ? void 0 : o2.call(i, t, e2, r2);
      if (He.isScalar(e2)) return (a = i.Scalar) == null ? void 0 : a.call(i, t, e2, r2);
      if (He.isAlias(e2)) return (l = i.Alias) == null ? void 0 : l.call(i, t, e2, r2);
    }
    function Km(t, e2, i) {
      let r2 = e2[e2.length - 1];
      if (He.isCollection(r2)) r2.items[t] = i;
      else if (He.isPair(r2)) t === "key" ? r2.key = i : r2.value = i;
      else if (He.isDocument(r2)) r2.contents = i;
      else {
        let n = He.isAlias(r2) ? "alias" : "scalar";
        throw new Error(`Cannot replace node with ${n} parent`);
      }
    }
    cc.visit = Zs;
    cc.visitAsync = Qs;
  });
  var uc = _2((Jm) => {
    var zm = Se2(), sE = hn(), oE = { "!": "%21", ",": "%2C", "[": "%5B", "]": "%5D", "{": "%7B", "}": "%7D" }, aE = (t) => t.replace(/[!,[\]{}]/g, (e2) => oE[e2]), pn = class t {
      constructor(e2, i) {
        this.docStart = null, this.docEnd = false, this.yaml = Object.assign({}, t.defaultYaml, e2), this.tags = Object.assign({}, t.defaultTags, i);
      }
      clone() {
        let e2 = new t(this.yaml, this.tags);
        return e2.docStart = this.docStart, e2;
      }
      atDocument() {
        let e2 = new t(this.yaml, this.tags);
        switch (this.yaml.version) {
          case "1.1":
            this.atNextDocument = true;
            break;
          case "1.2":
            this.atNextDocument = false, this.yaml = { explicit: t.defaultYaml.explicit, version: "1.2" }, this.tags = Object.assign({}, t.defaultTags);
            break;
        }
        return e2;
      }
      add(e2, i) {
        this.atNextDocument && (this.yaml = { explicit: t.defaultYaml.explicit, version: "1.1" }, this.tags = Object.assign({}, t.defaultTags), this.atNextDocument = false);
        let r2 = e2.trim().split(/[ \t]+/), n = r2.shift();
        switch (n) {
          case "%TAG": {
            if (r2.length !== 2 && (i(0, "%TAG directive should contain exactly two parts"), r2.length < 2)) return false;
            let [s2, o2] = r2;
            return this.tags[s2] = o2, true;
          }
          case "%YAML": {
            if (this.yaml.explicit = true, r2.length !== 1) return i(0, "%YAML directive should contain exactly one part"), false;
            let [s2] = r2;
            if (s2 === "1.1" || s2 === "1.2") return this.yaml.version = s2, true;
            {
              let o2 = /^\d+\.\d+$/.test(s2);
              return i(6, `Unsupported YAML version ${s2}`, o2), false;
            }
          }
          default:
            return i(0, `Unknown directive ${n}`, true), false;
        }
      }
      tagName(e2, i) {
        if (e2 === "!") return "!";
        if (e2[0] !== "!") return i(`Not a valid tag: ${e2}`), null;
        if (e2[1] === "<") {
          let o2 = e2.slice(2, -1);
          return o2 === "!" || o2 === "!!" ? (i(`Verbatim tags aren't resolved, so ${e2} is invalid.`), null) : (e2[e2.length - 1] !== ">" && i("Verbatim tags must end with a >"), o2);
        }
        let [, r2, n] = e2.match(/^(.*!)([^!]*)$/s);
        n || i(`The ${e2} tag has no suffix`);
        let s2 = this.tags[r2];
        if (s2) try {
          return s2 + decodeURIComponent(n);
        } catch (o2) {
          return i(String(o2)), null;
        }
        return r2 === "!" ? e2 : (i(`Could not resolve tag: ${e2}`), null);
      }
      tagString(e2) {
        for (let [i, r2] of Object.entries(this.tags)) if (e2.startsWith(r2)) return i + aE(e2.substring(r2.length));
        return e2[0] === "!" ? e2 : `!<${e2}>`;
      }
      toString(e2) {
        let i = this.yaml.explicit ? [`%YAML ${this.yaml.version || "1.2"}`] : [], r2 = Object.entries(this.tags), n;
        if (e2 && r2.length > 0 && zm.isNode(e2.contents)) {
          let s2 = {};
          sE.visit(e2.contents, (o2, a) => {
            zm.isNode(a) && a.tag && (s2[a.tag] = true);
          }), n = Object.keys(s2);
        } else n = [];
        for (let [s2, o2] of r2) s2 === "!!" && o2 === "tag:yaml.org,2002:" || (!e2 || n.some((a) => a.startsWith(o2))) && i.push(`%TAG ${s2} ${o2}`);
        return i.join(`
`);
      }
    };
    pn.defaultYaml = { explicit: false, version: "1.2" };
    pn.defaultTags = { "!!": "tag:yaml.org,2002:" };
    Jm.Directives = pn;
  });
  var Xs = _2((dn) => {
    var Zm = Se2(), lE = hn();
    function cE(t) {
      if (/[\x00-\x19\s,[\]{}]/.test(t)) {
        let i = `Anchor must not contain whitespace or control characters: ${JSON.stringify(t)}`;
        throw new Error(i);
      }
      return true;
    }
    function Qm(t) {
      let e2 = /* @__PURE__ */ new Set();
      return lE.visit(t, { Value(i, r2) {
        r2.anchor && e2.add(r2.anchor);
      } }), e2;
    }
    function Xm(t, e2) {
      for (let i = 1; ; ++i) {
        let r2 = `${t}${i}`;
        if (!e2.has(r2)) return r2;
      }
    }
    function uE(t, e2) {
      let i = [], r2 = /* @__PURE__ */ new Map(), n = null;
      return { onAnchor: (s2) => {
        i.push(s2), n || (n = Qm(t));
        let o2 = Xm(e2, n);
        return n.add(o2), o2;
      }, setAnchors: () => {
        for (let s2 of i) {
          let o2 = r2.get(s2);
          if (typeof o2 == "object" && o2.anchor && (Zm.isScalar(o2.node) || Zm.isCollection(o2.node))) o2.node.anchor = o2.anchor;
          else {
            let a = new Error("Failed to resolve repeated object (this should not happen)");
            throw a.source = s2, a;
          }
        }
      }, sourceObjects: r2 };
    }
    dn.anchorIsValid = cE;
    dn.anchorNames = Qm;
    dn.createNodeAnchors = uE;
    dn.findNewAnchor = Xm;
  });
  var fc = _2((eg) => {
    function mn(t, e2, i, r2) {
      if (r2 && typeof r2 == "object") if (Array.isArray(r2)) for (let n = 0, s2 = r2.length; n < s2; ++n) {
        let o2 = r2[n], a = mn(t, r2, String(n), o2);
        a === void 0 ? delete r2[n] : a !== o2 && (r2[n] = a);
      }
      else if (r2 instanceof Map) for (let n of Array.from(r2.keys())) {
        let s2 = r2.get(n), o2 = mn(t, r2, n, s2);
        o2 === void 0 ? r2.delete(n) : o2 !== s2 && r2.set(n, o2);
      }
      else if (r2 instanceof Set) for (let n of Array.from(r2)) {
        let s2 = mn(t, r2, n, n);
        s2 === void 0 ? r2.delete(n) : s2 !== n && (r2.delete(n), r2.add(s2));
      }
      else for (let [n, s2] of Object.entries(r2)) {
        let o2 = mn(t, r2, n, s2);
        o2 === void 0 ? delete r2[n] : o2 !== s2 && (r2[n] = o2);
      }
      return t.call(e2, i, r2);
    }
    eg.applyReviver = mn;
  });
  var vi = _2((ig) => {
    var fE = Se2();
    function tg(t, e2, i) {
      if (Array.isArray(t)) return t.map((r2, n) => tg(r2, String(n), i));
      if (t && typeof t.toJSON == "function") {
        if (!i || !fE.hasAnchor(t)) return t.toJSON(e2, i);
        let r2 = { aliasCount: 0, count: 1, res: void 0 };
        i.anchors.set(t, r2), i.onCreate = (s2) => {
          r2.res = s2, delete i.onCreate;
        };
        let n = t.toJSON(e2, i);
        return i.onCreate && i.onCreate(n), n;
      }
      return typeof t == "bigint" && !(i != null && i.keep) ? Number(t) : t;
    }
    ig.toJS = tg;
  });
  var eo = _2((ng) => {
    var hE = fc(), rg = Se2(), pE = vi(), hc = class {
      constructor(e2) {
        Object.defineProperty(this, rg.NODE_TYPE, { value: e2 });
      }
      clone() {
        let e2 = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
        return this.range && (e2.range = this.range.slice()), e2;
      }
      toJS(e2, { mapAsMap: i, maxAliasCount: r2, onAnchor: n, reviver: s2 } = {}) {
        if (!rg.isDocument(e2)) throw new TypeError("A document argument is required");
        let o2 = { anchors: /* @__PURE__ */ new Map(), doc: e2, keep: true, mapAsMap: i === true, mapKeyWarned: false, maxAliasCount: typeof r2 == "number" ? r2 : 100 }, a = pE.toJS(this, "", o2);
        if (typeof n == "function") for (let { count: l, res: c2 } of o2.anchors.values()) n(c2, l);
        return typeof s2 == "function" ? hE.applyReviver(s2, { "": a }, "", a) : a;
      }
    };
    ng.NodeBase = hc;
  });
  var gn = _2((og) => {
    var dE = Xs(), sg = hn(), to = Se2(), mE = eo(), gE = vi(), pc = class extends mE.NodeBase {
      constructor(e2) {
        super(to.ALIAS), this.source = e2, Object.defineProperty(this, "tag", { set() {
          throw new Error("Alias nodes cannot have tags");
        } });
      }
      resolve(e2) {
        let i;
        return sg.visit(e2, { Node: (r2, n) => {
          if (n === this) return sg.visit.BREAK;
          n.anchor === this.source && (i = n);
        } }), i;
      }
      toJSON(e2, i) {
        if (!i) return { source: this.source };
        let { anchors: r2, doc: n, maxAliasCount: s2 } = i, o2 = this.resolve(n);
        if (!o2) {
          let l = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
          throw new ReferenceError(l);
        }
        let a = r2.get(o2);
        if (a || (gE.toJS(o2, null, i), a = r2.get(o2)), !a || a.res === void 0) {
          let l = "This should not happen: Alias anchor was not resolved?";
          throw new ReferenceError(l);
        }
        if (s2 >= 0 && (a.count += 1, a.aliasCount === 0 && (a.aliasCount = io(n, o2, r2)), a.count * a.aliasCount > s2)) {
          let l = "Excessive alias count indicates a resource exhaustion attack";
          throw new ReferenceError(l);
        }
        return a.res;
      }
      toString(e2, i, r2) {
        let n = `*${this.source}`;
        if (e2) {
          if (dE.anchorIsValid(this.source), e2.options.verifyAliasOrder && !e2.anchors.has(this.source)) {
            let s2 = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
            throw new Error(s2);
          }
          if (e2.implicitKey) return `${n} `;
        }
        return n;
      }
    };
    function io(t, e2, i) {
      if (to.isAlias(e2)) {
        let r2 = e2.resolve(t), n = i && r2 && i.get(r2);
        return n ? n.count * n.aliasCount : 0;
      } else if (to.isCollection(e2)) {
        let r2 = 0;
        for (let n of e2.items) {
          let s2 = io(t, n, i);
          s2 > r2 && (r2 = s2);
        }
        return r2;
      } else if (to.isPair(e2)) {
        let r2 = io(t, e2.key, i), n = io(t, e2.value, i);
        return Math.max(r2, n);
      }
      return 1;
    }
    og.Alias = pc;
  });
  var De = _2((dc) => {
    var vE = Se2(), yE = eo(), bE = vi(), _E = (t) => !t || typeof t != "function" && typeof t != "object", yi = class extends yE.NodeBase {
      constructor(e2) {
        super(vE.SCALAR), this.value = e2;
      }
      toJSON(e2, i) {
        return i != null && i.keep ? this.value : bE.toJS(this.value, e2, i);
      }
      toString() {
        return String(this.value);
      }
    };
    yi.BLOCK_FOLDED = "BLOCK_FOLDED";
    yi.BLOCK_LITERAL = "BLOCK_LITERAL";
    yi.PLAIN = "PLAIN";
    yi.QUOTE_DOUBLE = "QUOTE_DOUBLE";
    yi.QUOTE_SINGLE = "QUOTE_SINGLE";
    dc.Scalar = yi;
    dc.isScalarValue = _E;
  });
  var vn = _2((lg) => {
    var wE = gn(), Ji = Se2(), ag = De(), xE = "tag:yaml.org,2002:";
    function SE(t, e2, i) {
      var r2;
      if (e2) {
        let n = i.filter((o2) => o2.tag === e2), s2 = (r2 = n.find((o2) => !o2.format)) != null ? r2 : n[0];
        if (!s2) throw new Error(`Tag ${e2} not found`);
        return s2;
      }
      return i.find((n) => {
        var s2;
        return ((s2 = n.identify) == null ? void 0 : s2.call(n, t)) && !n.format;
      });
    }
    function EE(t, e2, i) {
      var f2, d2, g2;
      if (Ji.isDocument(t) && (t = t.contents), Ji.isNode(t)) return t;
      if (Ji.isPair(t)) {
        let m2 = (d2 = (f2 = i.schema[Ji.MAP]).createNode) == null ? void 0 : d2.call(f2, i.schema, null, i);
        return m2.items.push(t), m2;
      }
      (t instanceof String || t instanceof Number || t instanceof Boolean || typeof BigInt != "undefined" && t instanceof BigInt) && (t = t.valueOf());
      let { aliasDuplicateObjects: r2, onAnchor: n, onTagObj: s2, schema: o2, sourceObjects: a } = i, l;
      if (r2 && t && typeof t == "object") {
        if (l = a.get(t), l) return l.anchor || (l.anchor = n(t)), new wE.Alias(l.anchor);
        l = { anchor: null, node: null }, a.set(t, l);
      }
      e2 != null && e2.startsWith("!!") && (e2 = xE + e2.slice(2));
      let c2 = SE(t, e2, o2.tags);
      if (!c2) {
        if (t && typeof t.toJSON == "function" && (t = t.toJSON()), !t || typeof t != "object") {
          let m2 = new ag.Scalar(t);
          return l && (l.node = m2), m2;
        }
        c2 = t instanceof Map ? o2[Ji.MAP] : Symbol.iterator in Object(t) ? o2[Ji.SEQ] : o2[Ji.MAP];
      }
      s2 && (s2(c2), delete i.onTagObj);
      let u2 = c2 != null && c2.createNode ? c2.createNode(i.schema, t, i) : typeof ((g2 = c2 == null ? void 0 : c2.nodeClass) == null ? void 0 : g2.from) == "function" ? c2.nodeClass.from(i.schema, t, i) : new ag.Scalar(t);
      return e2 ? u2.tag = e2 : c2.default || (u2.tag = c2.tag), l && (l.node = u2), u2;
    }
    lg.createNode = EE;
  });
  var no = _2((ro) => {
    var kE = vn(), zt = Se2(), OE = eo();
    function mc(t, e2, i) {
      let r2 = i;
      for (let n = e2.length - 1; n >= 0; --n) {
        let s2 = e2[n];
        if (typeof s2 == "number" && Number.isInteger(s2) && s2 >= 0) {
          let o2 = [];
          o2[s2] = r2, r2 = o2;
        } else r2 = /* @__PURE__ */ new Map([[s2, r2]]);
      }
      return kE.createNode(r2, void 0, { aliasDuplicateObjects: false, keepUndefined: false, onAnchor: () => {
        throw new Error("This should not happen, please report a bug.");
      }, schema: t, sourceObjects: /* @__PURE__ */ new Map() });
    }
    var cg = (t) => t == null || typeof t == "object" && !!t[Symbol.iterator]().next().done, gc = class extends OE.NodeBase {
      constructor(e2, i) {
        super(e2), Object.defineProperty(this, "schema", { value: i, configurable: true, enumerable: false, writable: true });
      }
      clone(e2) {
        let i = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
        return e2 && (i.schema = e2), i.items = i.items.map((r2) => zt.isNode(r2) || zt.isPair(r2) ? r2.clone(e2) : r2), this.range && (i.range = this.range.slice()), i;
      }
      addIn(e2, i) {
        if (cg(e2)) this.add(i);
        else {
          let [r2, ...n] = e2, s2 = this.get(r2, true);
          if (zt.isCollection(s2)) s2.addIn(n, i);
          else if (s2 === void 0 && this.schema) this.set(r2, mc(this.schema, n, i));
          else throw new Error(`Expected YAML collection at ${r2}. Remaining path: ${n}`);
        }
      }
      deleteIn(e2) {
        let [i, ...r2] = e2;
        if (r2.length === 0) return this.delete(i);
        let n = this.get(i, true);
        if (zt.isCollection(n)) return n.deleteIn(r2);
        throw new Error(`Expected YAML collection at ${i}. Remaining path: ${r2}`);
      }
      getIn(e2, i) {
        let [r2, ...n] = e2, s2 = this.get(r2, true);
        return n.length === 0 ? !i && zt.isScalar(s2) ? s2.value : s2 : zt.isCollection(s2) ? s2.getIn(n, i) : void 0;
      }
      hasAllNullValues(e2) {
        return this.items.every((i) => {
          if (!zt.isPair(i)) return false;
          let r2 = i.value;
          return r2 == null || e2 && zt.isScalar(r2) && r2.value == null && !r2.commentBefore && !r2.comment && !r2.tag;
        });
      }
      hasIn(e2) {
        let [i, ...r2] = e2;
        if (r2.length === 0) return this.has(i);
        let n = this.get(i, true);
        return zt.isCollection(n) ? n.hasIn(r2) : false;
      }
      setIn(e2, i) {
        let [r2, ...n] = e2;
        if (n.length === 0) this.set(r2, i);
        else {
          let s2 = this.get(r2, true);
          if (zt.isCollection(s2)) s2.setIn(n, i);
          else if (s2 === void 0 && this.schema) this.set(r2, mc(this.schema, n, i));
          else throw new Error(`Expected YAML collection at ${r2}. Remaining path: ${n}`);
        }
      }
    };
    ro.Collection = gc;
    ro.collectionFromPath = mc;
    ro.isEmptyPath = cg;
  });
  var yn = _2((so) => {
    var CE = (t) => t.replace(/^(?!$)(?: $)?/gm, "#");
    function vc(t, e2) {
      return /^\n+$/.test(t) ? t.substring(1) : e2 ? t.replace(/^(?! *$)/gm, e2) : t;
    }
    var TE = (t, e2, i) => t.endsWith(`
`) ? vc(i, e2) : i.includes(`
`) ? `
` + vc(i, e2) : (t.endsWith(" ") ? "" : " ") + i;
    so.indentComment = vc;
    so.lineComment = TE;
    so.stringifyComment = CE;
  });
  var fg = _2((bn) => {
    var AE = "flow", yc = "block", oo = "quoted";
    function IE(t, e2, i = "flow", { indentAtStart: r2, lineWidth: n = 80, minContentWidth: s2 = 20, onFold: o2, onOverflow: a } = {}) {
      if (!n || n < 0) return t;
      n < s2 && (s2 = 0);
      let l = Math.max(1 + s2, 1 + n - e2.length);
      if (t.length <= l) return t;
      let c2 = [], u2 = {}, f2 = n - e2.length;
      typeof r2 == "number" && (r2 > n - Math.max(2, s2) ? c2.push(0) : f2 = n - r2);
      let d2, g2, m2 = false, y2 = -1, b = -1, x2 = -1;
      i === yc && (y2 = ug(t, y2, e2.length), y2 !== -1 && (f2 = y2 + l));
      for (let O2; O2 = t[y2 += 1]; ) {
        if (i === oo && O2 === "\\") {
          switch (b = y2, t[y2 + 1]) {
            case "x":
              y2 += 3;
              break;
            case "u":
              y2 += 5;
              break;
            case "U":
              y2 += 9;
              break;
            default:
              y2 += 1;
          }
          x2 = y2;
        }
        if (O2 === `
`) i === yc && (y2 = ug(t, y2, e2.length)), f2 = y2 + e2.length + l, d2 = void 0;
        else {
          if (O2 === " " && g2 && g2 !== " " && g2 !== `
` && g2 !== "	") {
            let k2 = t[y2 + 1];
            k2 && k2 !== " " && k2 !== `
` && k2 !== "	" && (d2 = y2);
          }
          if (y2 >= f2) if (d2) c2.push(d2), f2 = d2 + l, d2 = void 0;
          else if (i === oo) {
            for (; g2 === " " || g2 === "	"; ) g2 = O2, O2 = t[y2 += 1], m2 = true;
            let k2 = y2 > x2 + 1 ? y2 - 2 : b - 1;
            if (u2[k2]) return t;
            c2.push(k2), u2[k2] = true, f2 = k2 + l, d2 = void 0;
          } else m2 = true;
        }
        g2 = O2;
      }
      if (m2 && a && a(), c2.length === 0) return t;
      o2 && o2();
      let E = t.slice(0, c2[0]);
      for (let O2 = 0; O2 < c2.length; ++O2) {
        let k2 = c2[O2], S2 = c2[O2 + 1] || t.length;
        k2 === 0 ? E = `
${e2}${t.slice(0, S2)}` : (i === oo && u2[k2] && (E += `${t[k2]}\\`), E += `
${e2}${t.slice(k2 + 1, S2)}`);
      }
      return E;
    }
    function ug(t, e2, i) {
      let r2 = e2, n = e2 + 1, s2 = t[n];
      for (; s2 === " " || s2 === "	"; ) if (e2 < n + i) s2 = t[++e2];
      else {
        do
          s2 = t[++e2];
        while (s2 && s2 !== `
`);
        r2 = e2, n = e2 + 1, s2 = t[n];
      }
      return r2;
    }
    bn.FOLD_BLOCK = yc;
    bn.FOLD_FLOW = AE;
    bn.FOLD_QUOTED = oo;
    bn.foldFlowLines = IE;
  });
  var wn = _2((hg) => {
    var Jt = De(), bi = fg(), lo = (t, e2) => ({ indentAtStart: e2 ? t.indent.length : t.indentAtStart, lineWidth: t.options.lineWidth, minContentWidth: t.options.minContentWidth }), co = (t) => /^(%|---|\.\.\.)/m.test(t);
    function NE(t, e2, i) {
      if (!e2 || e2 < 0) return false;
      let r2 = e2 - i, n = t.length;
      if (n <= r2) return false;
      for (let s2 = 0, o2 = 0; s2 < n; ++s2) if (t[s2] === `
`) {
        if (s2 - o2 > r2) return true;
        if (o2 = s2 + 1, n - o2 <= r2) return false;
      }
      return true;
    }
    function _n(t, e2) {
      let i = JSON.stringify(t);
      if (e2.options.doubleQuotedAsJSON) return i;
      let { implicitKey: r2 } = e2, n = e2.options.doubleQuotedMinMultiLineLength, s2 = e2.indent || (co(t) ? "  " : ""), o2 = "", a = 0;
      for (let l = 0, c2 = i[l]; c2; c2 = i[++l]) if (c2 === " " && i[l + 1] === "\\" && i[l + 2] === "n" && (o2 += i.slice(a, l) + "\\ ", l += 1, a = l, c2 = "\\"), c2 === "\\") switch (i[l + 1]) {
        case "u":
          {
            o2 += i.slice(a, l);
            let u2 = i.substr(l + 2, 4);
            switch (u2) {
              case "0000":
                o2 += "\\0";
                break;
              case "0007":
                o2 += "\\a";
                break;
              case "000b":
                o2 += "\\v";
                break;
              case "001b":
                o2 += "\\e";
                break;
              case "0085":
                o2 += "\\N";
                break;
              case "00a0":
                o2 += "\\_";
                break;
              case "2028":
                o2 += "\\L";
                break;
              case "2029":
                o2 += "\\P";
                break;
              default:
                u2.substr(0, 2) === "00" ? o2 += "\\x" + u2.substr(2) : o2 += i.substr(l, 6);
            }
            l += 5, a = l + 1;
          }
          break;
        case "n":
          if (r2 || i[l + 2] === '"' || i.length < n) l += 1;
          else {
            for (o2 += i.slice(a, l) + `

`; i[l + 2] === "\\" && i[l + 3] === "n" && i[l + 4] !== '"'; ) o2 += `
`, l += 2;
            o2 += s2, i[l + 2] === " " && (o2 += "\\"), l += 1, a = l + 1;
          }
          break;
        default:
          l += 1;
      }
      return o2 = a ? o2 + i.slice(a) : i, r2 ? o2 : bi.foldFlowLines(o2, s2, bi.FOLD_QUOTED, lo(e2, false));
    }
    function bc(t, e2) {
      if (e2.options.singleQuote === false || e2.implicitKey && t.includes(`
`) || /[ \t]\n|\n[ \t]/.test(t)) return _n(t, e2);
      let i = e2.indent || (co(t) ? "  " : ""), r2 = "'" + t.replace(/'/g, "''").replace(/\n+/g, `$&
${i}`) + "'";
      return e2.implicitKey ? r2 : bi.foldFlowLines(r2, i, bi.FOLD_FLOW, lo(e2, false));
    }
    function Mr(t, e2) {
      let { singleQuote: i } = e2.options, r2;
      if (i === false) r2 = _n;
      else {
        let n = t.includes('"'), s2 = t.includes("'");
        n && !s2 ? r2 = bc : s2 && !n ? r2 = _n : r2 = i ? bc : _n;
      }
      return r2(t, e2);
    }
    var _c;
    try {
      _c = new RegExp(`(^|(?<!
))
+(?!
|$)`, "g");
    } catch {
      _c = /\n+(?!\n|$)/g;
    }
    function ao({ comment: t, type: e2, value: i }, r2, n, s2) {
      let { blockQuote: o2, commentString: a, lineWidth: l } = r2.options;
      if (!o2 || /\n[\t ]+$/.test(i) || /^\s*$/.test(i)) return Mr(i, r2);
      let c2 = r2.indent || (r2.forceBlockIndent || co(i) ? "  " : ""), u2 = o2 === "literal" ? true : o2 === "folded" || e2 === Jt.Scalar.BLOCK_FOLDED ? false : e2 === Jt.Scalar.BLOCK_LITERAL ? true : !NE(i, l, c2.length);
      if (!i) return u2 ? `|
` : `>
`;
      let f2, d2;
      for (d2 = i.length; d2 > 0; --d2) {
        let R2 = i[d2 - 1];
        if (R2 !== `
` && R2 !== "	" && R2 !== " ") break;
      }
      let g2 = i.substring(d2), m2 = g2.indexOf(`
`);
      m2 === -1 ? f2 = "-" : i === g2 || m2 !== g2.length - 1 ? (f2 = "+", s2 && s2()) : f2 = "", g2 && (i = i.slice(0, -g2.length), g2[g2.length - 1] === `
` && (g2 = g2.slice(0, -1)), g2 = g2.replace(_c, `$&${c2}`));
      let y2 = false, b, x2 = -1;
      for (b = 0; b < i.length; ++b) {
        let R2 = i[b];
        if (R2 === " ") y2 = true;
        else if (R2 === `
`) x2 = b;
        else break;
      }
      let E = i.substring(0, x2 < b ? x2 + 1 : b);
      E && (i = i.substring(E.length), E = E.replace(/\n+/g, `$&${c2}`));
      let k2 = (u2 ? "|" : ">") + (y2 ? c2 ? "2" : "1" : "") + f2;
      if (t && (k2 += " " + a(t.replace(/ ?[\r\n]+/g, " ")), n && n()), u2) return i = i.replace(/\n+/g, `$&${c2}`), `${k2}
${c2}${E}${i}${g2}`;
      i = i.replace(/\n+/g, `
$&`).replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g, "$1$2").replace(/\n+/g, `$&${c2}`);
      let S2 = bi.foldFlowLines(`${E}${i}${g2}`, c2, bi.FOLD_BLOCK, lo(r2, true));
      return `${k2}
${c2}${S2}`;
    }
    function LE(t, e2, i, r2) {
      let { type: n, value: s2 } = t, { actualString: o2, implicitKey: a, indent: l, indentStep: c2, inFlow: u2 } = e2;
      if (a && s2.includes(`
`) || u2 && /[[\]{},]/.test(s2)) return Mr(s2, e2);
      if (!s2 || /^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(s2)) return a || u2 || !s2.includes(`
`) ? Mr(s2, e2) : ao(t, e2, i, r2);
      if (!a && !u2 && n !== Jt.Scalar.PLAIN && s2.includes(`
`)) return ao(t, e2, i, r2);
      if (co(s2)) {
        if (l === "") return e2.forceBlockIndent = true, ao(t, e2, i, r2);
        if (a && l === c2) return Mr(s2, e2);
      }
      let f2 = s2.replace(/\n+/g, `$&
${l}`);
      if (o2) {
        let d2 = (y2) => {
          var b;
          return y2.default && y2.tag !== "tag:yaml.org,2002:str" && ((b = y2.test) == null ? void 0 : b.test(f2));
        }, { compat: g2, tags: m2 } = e2.doc.schema;
        if (m2.some(d2) || g2 != null && g2.some(d2)) return Mr(s2, e2);
      }
      return a ? f2 : bi.foldFlowLines(f2, l, bi.FOLD_FLOW, lo(e2, false));
    }
    function BE(t, e2, i, r2) {
      let { implicitKey: n, inFlow: s2 } = e2, o2 = typeof t.value == "string" ? t : Object.assign({}, t, { value: String(t.value) }), { type: a } = t;
      a !== Jt.Scalar.QUOTE_DOUBLE && /[\x00-\x08\x0b-\x1f\x7f-\x9f\u{D800}-\u{DFFF}]/u.test(o2.value) && (a = Jt.Scalar.QUOTE_DOUBLE);
      let l = (u2) => {
        switch (u2) {
          case Jt.Scalar.BLOCK_FOLDED:
          case Jt.Scalar.BLOCK_LITERAL:
            return n || s2 ? Mr(o2.value, e2) : ao(o2, e2, i, r2);
          case Jt.Scalar.QUOTE_DOUBLE:
            return _n(o2.value, e2);
          case Jt.Scalar.QUOTE_SINGLE:
            return bc(o2.value, e2);
          case Jt.Scalar.PLAIN:
            return LE(o2, e2, i, r2);
          default:
            return null;
        }
      }, c2 = l(a);
      if (c2 === null) {
        let { defaultKeyType: u2, defaultStringType: f2 } = e2.options, d2 = n && u2 || f2;
        if (c2 = l(d2), c2 === null) throw new Error(`Unsupported default string type ${d2}`);
      }
      return c2;
    }
    hg.stringifyString = BE;
  });
  var xn = _2((wc) => {
    var RE = Xs(), _i = Se2(), PE = yn(), ME = wn();
    function FE(t, e2) {
      let i = Object.assign({ blockQuote: true, commentString: PE.stringifyComment, defaultKeyType: null, defaultStringType: "PLAIN", directives: null, doubleQuotedAsJSON: false, doubleQuotedMinMultiLineLength: 40, falseStr: "false", flowCollectionPadding: true, indentSeq: true, lineWidth: 80, minContentWidth: 20, nullStr: "null", simpleKeys: false, singleQuote: null, trueStr: "true", verifyAliasOrder: true }, t.schema.toStringOptions, e2), r2;
      switch (i.collectionStyle) {
        case "block":
          r2 = false;
          break;
        case "flow":
          r2 = true;
          break;
        default:
          r2 = null;
      }
      return { anchors: /* @__PURE__ */ new Set(), doc: t, flowCollectionPadding: i.flowCollectionPadding ? " " : "", indent: "", indentStep: typeof i.indent == "number" ? " ".repeat(i.indent) : "  ", inFlow: r2, options: i };
    }
    function qE(t, e2) {
      var n, s2, o2, a;
      if (e2.tag) {
        let l = t.filter((c2) => c2.tag === e2.tag);
        if (l.length > 0) return (n = l.find((c2) => c2.format === e2.format)) != null ? n : l[0];
      }
      let i, r2;
      if (_i.isScalar(e2)) {
        r2 = e2.value;
        let l = t.filter((c2) => {
          var u2;
          return (u2 = c2.identify) == null ? void 0 : u2.call(c2, r2);
        });
        if (l.length > 1) {
          let c2 = l.filter((u2) => u2.test);
          c2.length > 0 && (l = c2);
        }
        i = (s2 = l.find((c2) => c2.format === e2.format)) != null ? s2 : l.find((c2) => !c2.format);
      } else r2 = e2, i = t.find((l) => l.nodeClass && r2 instanceof l.nodeClass);
      if (!i) {
        let l = (a = (o2 = r2 == null ? void 0 : r2.constructor) == null ? void 0 : o2.name) != null ? a : typeof r2;
        throw new Error(`Tag not resolved for ${l} value`);
      }
      return i;
    }
    function DE(t, e2, { anchors: i, doc: r2 }) {
      if (!r2.directives) return "";
      let n = [], s2 = (_i.isScalar(t) || _i.isCollection(t)) && t.anchor;
      s2 && RE.anchorIsValid(s2) && (i.add(s2), n.push(`&${s2}`));
      let o2 = t.tag ? t.tag : e2.default ? null : e2.tag;
      return o2 && n.push(r2.directives.tagString(o2)), n.join(" ");
    }
    function jE(t, e2, i, r2) {
      var l, c2;
      if (_i.isPair(t)) return t.toString(e2, i, r2);
      if (_i.isAlias(t)) {
        if (e2.doc.directives) return t.toString(e2);
        if ((l = e2.resolvedAliases) != null && l.has(t)) throw new TypeError("Cannot stringify circular structure without alias nodes");
        e2.resolvedAliases ? e2.resolvedAliases.add(t) : e2.resolvedAliases = /* @__PURE__ */ new Set([t]), t = t.resolve(e2.doc);
      }
      let n, s2 = _i.isNode(t) ? t : e2.doc.createNode(t, { onTagObj: (u2) => n = u2 });
      n || (n = qE(e2.doc.schema.tags, s2));
      let o2 = DE(s2, n, e2);
      o2.length > 0 && (e2.indentAtStart = ((c2 = e2.indentAtStart) != null ? c2 : 0) + o2.length + 1);
      let a = typeof n.stringify == "function" ? n.stringify(s2, e2, i, r2) : _i.isScalar(s2) ? ME.stringifyString(s2, e2, i, r2) : s2.toString(e2, i, r2);
      return o2 ? _i.isScalar(s2) || a[0] === "{" || a[0] === "[" ? `${o2} ${a}` : `${o2}
${e2.indent}${a}` : a;
    }
    wc.createStringifyContext = FE;
    wc.stringify = jE;
  });
  var gg = _2((mg) => {
    var oi = Se2(), pg = De(), dg = xn(), Sn = yn();
    function UE({ key: t, value: e2 }, i, r2, n) {
      var T2, A2;
      let { allNullValues: s2, doc: o2, indent: a, indentStep: l, options: { commentString: c2, indentSeq: u2, simpleKeys: f2 } } = i, d2 = oi.isNode(t) && t.comment || null;
      if (f2) {
        if (d2) throw new Error("With simple keys, key nodes cannot have comments");
        if (oi.isCollection(t) || !oi.isNode(t) && typeof t == "object") {
          let C2 = "With simple keys, collection cannot be used as a key value";
          throw new Error(C2);
        }
      }
      let g2 = !f2 && (!t || d2 && e2 == null && !i.inFlow || oi.isCollection(t) || (oi.isScalar(t) ? t.type === pg.Scalar.BLOCK_FOLDED || t.type === pg.Scalar.BLOCK_LITERAL : typeof t == "object"));
      i = Object.assign({}, i, { allNullValues: false, implicitKey: !g2 && (f2 || !s2), indent: a + l });
      let m2 = false, y2 = false, b = dg.stringify(t, i, () => m2 = true, () => y2 = true);
      if (!g2 && !i.inFlow && b.length > 1024) {
        if (f2) throw new Error("With simple keys, single line scalar must not span more than 1024 characters");
        g2 = true;
      }
      if (i.inFlow) {
        if (s2 || e2 == null) return m2 && r2 && r2(), b === "" ? "?" : g2 ? `? ${b}` : b;
      } else if (s2 && !f2 || e2 == null && g2) return b = `? ${b}`, d2 && !m2 ? b += Sn.lineComment(b, i.indent, c2(d2)) : y2 && n && n(), b;
      m2 && (d2 = null), g2 ? (d2 && (b += Sn.lineComment(b, i.indent, c2(d2))), b = `? ${b}
${a}:`) : (b = `${b}:`, d2 && (b += Sn.lineComment(b, i.indent, c2(d2))));
      let x2, E, O2;
      oi.isNode(e2) ? (x2 = !!e2.spaceBefore, E = e2.commentBefore, O2 = e2.comment) : (x2 = false, E = null, O2 = null, e2 && typeof e2 == "object" && (e2 = o2.createNode(e2))), i.implicitKey = false, !g2 && !d2 && oi.isScalar(e2) && (i.indentAtStart = b.length + 1), y2 = false, !u2 && l.length >= 2 && !i.inFlow && !g2 && oi.isSeq(e2) && !e2.flow && !e2.tag && !e2.anchor && (i.indent = i.indent.substring(2));
      let k2 = false, S2 = dg.stringify(e2, i, () => k2 = true, () => y2 = true), R2 = " ";
      if (d2 || x2 || E) {
        if (R2 = x2 ? `
` : "", E) {
          let C2 = c2(E);
          R2 += `
${Sn.indentComment(C2, i.indent)}`;
        }
        S2 === "" && !i.inFlow ? R2 === `
` && (R2 = `

`) : R2 += `
${i.indent}`;
      } else if (!g2 && oi.isCollection(e2)) {
        let C2 = S2[0], L2 = S2.indexOf(`
`), P2 = L2 !== -1, U = (A2 = (T2 = i.inFlow) != null ? T2 : e2.flow) != null ? A2 : e2.items.length === 0;
        if (P2 || !U) {
          let q2 = false;
          if (P2 && (C2 === "&" || C2 === "!")) {
            let H = S2.indexOf(" ");
            C2 === "&" && H !== -1 && H < L2 && S2[H + 1] === "!" && (H = S2.indexOf(" ", H + 1)), (H === -1 || L2 < H) && (q2 = true);
          }
          q2 || (R2 = `
${i.indent}`);
        }
      } else (S2 === "" || S2[0] === `
`) && (R2 = "");
      return b += R2 + S2, i.inFlow ? k2 && r2 && r2() : O2 && !k2 ? b += Sn.lineComment(b, i.indent, c2(O2)) : y2 && n && n(), b;
    }
    mg.stringifyPair = UE;
  });
  var Sc = _2((xc) => {
    function $E(t, ...e2) {
      t === "debug" && console.log(...e2);
    }
    function VE(t, e2) {
      (t === "debug" || t === "warn") && (typeof process != "undefined" && process.emitWarning ? process.emitWarning(e2) : console.warn(e2));
    }
    xc.debug = $E;
    xc.warn = VE;
  });
  var po = _2((ho) => {
    var En = Se2(), vg = De(), uo = "<<", fo = { identify: (t) => t === uo || typeof t == "symbol" && t.description === uo, default: "key", tag: "tag:yaml.org,2002:merge", test: /^<<$/, resolve: () => Object.assign(new vg.Scalar(Symbol(uo)), { addToJSMap: yg }), stringify: () => uo }, HE = (t, e2) => (fo.identify(e2) || En.isScalar(e2) && (!e2.type || e2.type === vg.Scalar.PLAIN) && fo.identify(e2.value)) && (t == null ? void 0 : t.doc.schema.tags.some((i) => i.tag === fo.tag && i.default));
    function yg(t, e2, i) {
      if (i = t && En.isAlias(i) ? i.resolve(t.doc) : i, En.isSeq(i)) for (let r2 of i.items) Ec(t, e2, r2);
      else if (Array.isArray(i)) for (let r2 of i) Ec(t, e2, r2);
      else Ec(t, e2, i);
    }
    function Ec(t, e2, i) {
      let r2 = t && En.isAlias(i) ? i.resolve(t.doc) : i;
      if (!En.isMap(r2)) throw new Error("Merge sources must be maps or map aliases");
      let n = r2.toJSON(null, t, Map);
      for (let [s2, o2] of n) e2 instanceof Map ? e2.has(s2) || e2.set(s2, o2) : e2 instanceof Set ? e2.add(s2) : Object.prototype.hasOwnProperty.call(e2, s2) || Object.defineProperty(e2, s2, { value: o2, writable: true, enumerable: true, configurable: true });
      return e2;
    }
    ho.addMergeToJSMap = yg;
    ho.isMergeKey = HE;
    ho.merge = fo;
  });
  var Oc = _2((wg) => {
    var GE = Sc(), bg = po(), YE = xn(), _g = Se2(), kc = vi();
    function WE(t, e2, { key: i, value: r2 }) {
      if (_g.isNode(i) && i.addToJSMap) i.addToJSMap(t, e2, r2);
      else if (bg.isMergeKey(t, i)) bg.addMergeToJSMap(t, e2, r2);
      else {
        let n = kc.toJS(i, "", t);
        if (e2 instanceof Map) e2.set(n, kc.toJS(r2, n, t));
        else if (e2 instanceof Set) e2.add(n);
        else {
          let s2 = KE(i, n, t), o2 = kc.toJS(r2, s2, t);
          s2 in e2 ? Object.defineProperty(e2, s2, { value: o2, writable: true, enumerable: true, configurable: true }) : e2[s2] = o2;
        }
      }
      return e2;
    }
    function KE(t, e2, i) {
      if (e2 === null) return "";
      if (typeof e2 != "object") return String(e2);
      if (_g.isNode(t) && (i != null && i.doc)) {
        let r2 = YE.createStringifyContext(i.doc, {});
        r2.anchors = /* @__PURE__ */ new Set();
        for (let s2 of i.anchors.keys()) r2.anchors.add(s2.anchor);
        r2.inFlow = true, r2.inStringifyKey = true;
        let n = t.toString(r2);
        if (!i.mapKeyWarned) {
          let s2 = JSON.stringify(n);
          s2.length > 40 && (s2 = s2.substring(0, 36) + '..."'), GE.warn(i.doc.options.logLevel, `Keys with collection values will be stringified due to JS Object restrictions: ${s2}. Set mapAsMap: true to use object keys.`), i.mapKeyWarned = true;
        }
        return n;
      }
      return JSON.stringify(e2);
    }
    wg.addPairToJSMap = WE;
  });
  var wi = _2((Cc) => {
    var xg = vn(), zE = gg(), JE = Oc(), mo = Se2();
    function ZE(t, e2, i) {
      let r2 = xg.createNode(t, void 0, i), n = xg.createNode(e2, void 0, i);
      return new go(r2, n);
    }
    var go = class t {
      constructor(e2, i = null) {
        Object.defineProperty(this, mo.NODE_TYPE, { value: mo.PAIR }), this.key = e2, this.value = i;
      }
      clone(e2) {
        let { key: i, value: r2 } = this;
        return mo.isNode(i) && (i = i.clone(e2)), mo.isNode(r2) && (r2 = r2.clone(e2)), new t(i, r2);
      }
      toJSON(e2, i) {
        let r2 = i != null && i.mapAsMap ? /* @__PURE__ */ new Map() : {};
        return JE.addPairToJSMap(i, r2, this);
      }
      toString(e2, i, r2) {
        return e2 != null && e2.doc ? zE.stringifyPair(this, e2, i, r2) : JSON.stringify(this);
      }
    };
    Cc.Pair = go;
    Cc.createPair = ZE;
  });
  var Tc = _2((Eg) => {
    var Zi = Se2(), Sg = xn(), vo = yn();
    function QE(t, e2, i) {
      var s2;
      return (((s2 = e2.inFlow) != null ? s2 : t.flow) ? ek : XE)(t, e2, i);
    }
    function XE({ comment: t, items: e2 }, i, { blockItemPrefix: r2, flowChars: n, itemIndent: s2, onChompKeep: o2, onComment: a }) {
      let { indent: l, options: { commentString: c2 } } = i, u2 = Object.assign({}, i, { indent: s2, type: null }), f2 = false, d2 = [];
      for (let m2 = 0; m2 < e2.length; ++m2) {
        let y2 = e2[m2], b = null;
        if (Zi.isNode(y2)) !f2 && y2.spaceBefore && d2.push(""), yo(i, d2, y2.commentBefore, f2), y2.comment && (b = y2.comment);
        else if (Zi.isPair(y2)) {
          let E = Zi.isNode(y2.key) ? y2.key : null;
          E && (!f2 && E.spaceBefore && d2.push(""), yo(i, d2, E.commentBefore, f2));
        }
        f2 = false;
        let x2 = Sg.stringify(y2, u2, () => b = null, () => f2 = true);
        b && (x2 += vo.lineComment(x2, s2, c2(b))), f2 && b && (f2 = false), d2.push(r2 + x2);
      }
      let g2;
      if (d2.length === 0) g2 = n.start + n.end;
      else {
        g2 = d2[0];
        for (let m2 = 1; m2 < d2.length; ++m2) {
          let y2 = d2[m2];
          g2 += y2 ? `
${l}${y2}` : `
`;
        }
      }
      return t ? (g2 += `
` + vo.indentComment(c2(t), l), a && a()) : f2 && o2 && o2(), g2;
    }
    function ek({ items: t }, e2, { flowChars: i, itemIndent: r2 }) {
      let { indent: n, indentStep: s2, flowCollectionPadding: o2, options: { commentString: a } } = e2;
      r2 += s2;
      let l = Object.assign({}, e2, { indent: r2, inFlow: true, type: null }), c2 = false, u2 = 0, f2 = [];
      for (let m2 = 0; m2 < t.length; ++m2) {
        let y2 = t[m2], b = null;
        if (Zi.isNode(y2)) y2.spaceBefore && f2.push(""), yo(e2, f2, y2.commentBefore, false), y2.comment && (b = y2.comment);
        else if (Zi.isPair(y2)) {
          let E = Zi.isNode(y2.key) ? y2.key : null;
          E && (E.spaceBefore && f2.push(""), yo(e2, f2, E.commentBefore, false), E.comment && (c2 = true));
          let O2 = Zi.isNode(y2.value) ? y2.value : null;
          O2 ? (O2.comment && (b = O2.comment), O2.commentBefore && (c2 = true)) : y2.value == null && (E != null && E.comment) && (b = E.comment);
        }
        b && (c2 = true);
        let x2 = Sg.stringify(y2, l, () => b = null);
        m2 < t.length - 1 && (x2 += ","), b && (x2 += vo.lineComment(x2, r2, a(b))), !c2 && (f2.length > u2 || x2.includes(`
`)) && (c2 = true), f2.push(x2), u2 = f2.length;
      }
      let { start: d2, end: g2 } = i;
      if (f2.length === 0) return d2 + g2;
      if (!c2) {
        let m2 = f2.reduce((y2, b) => y2 + b.length + 2, 2);
        c2 = e2.options.lineWidth > 0 && m2 > e2.options.lineWidth;
      }
      if (c2) {
        let m2 = d2;
        for (let y2 of f2) m2 += y2 ? `
${s2}${n}${y2}` : `
`;
        return `${m2}
${n}${g2}`;
      } else return `${d2}${o2}${f2.join(" ")}${o2}${g2}`;
    }
    function yo({ indent: t, options: { commentString: e2 } }, i, r2, n) {
      if (r2 && n && (r2 = r2.replace(/^\n+/, "")), r2) {
        let s2 = vo.indentComment(e2(r2), t);
        i.push(s2.trimStart());
      }
    }
    Eg.stringifyCollection = QE;
  });
  var Si = _2((Ic) => {
    var tk = Tc(), ik = Oc(), rk = no(), xi = Se2(), bo = wi(), nk = De();
    function kn(t, e2) {
      let i = xi.isScalar(e2) ? e2.value : e2;
      for (let r2 of t) if (xi.isPair(r2) && (r2.key === e2 || r2.key === i || xi.isScalar(r2.key) && r2.key.value === i)) return r2;
    }
    var Ac = class extends rk.Collection {
      static get tagName() {
        return "tag:yaml.org,2002:map";
      }
      constructor(e2) {
        super(xi.MAP, e2), this.items = [];
      }
      static from(e2, i, r2) {
        let { keepUndefined: n, replacer: s2 } = r2, o2 = new this(e2), a = (l, c2) => {
          if (typeof s2 == "function") c2 = s2.call(i, l, c2);
          else if (Array.isArray(s2) && !s2.includes(l)) return;
          (c2 !== void 0 || n) && o2.items.push(bo.createPair(l, c2, r2));
        };
        if (i instanceof Map) for (let [l, c2] of i) a(l, c2);
        else if (i && typeof i == "object") for (let l of Object.keys(i)) a(l, i[l]);
        return typeof e2.sortMapEntries == "function" && o2.items.sort(e2.sortMapEntries), o2;
      }
      add(e2, i) {
        var o2;
        let r2;
        xi.isPair(e2) ? r2 = e2 : !e2 || typeof e2 != "object" || !("key" in e2) ? r2 = new bo.Pair(e2, e2 == null ? void 0 : e2.value) : r2 = new bo.Pair(e2.key, e2.value);
        let n = kn(this.items, r2.key), s2 = (o2 = this.schema) == null ? void 0 : o2.sortMapEntries;
        if (n) {
          if (!i) throw new Error(`Key ${r2.key} already set`);
          xi.isScalar(n.value) && nk.isScalarValue(r2.value) ? n.value.value = r2.value : n.value = r2.value;
        } else if (s2) {
          let a = this.items.findIndex((l) => s2(r2, l) < 0);
          a === -1 ? this.items.push(r2) : this.items.splice(a, 0, r2);
        } else this.items.push(r2);
      }
      delete(e2) {
        let i = kn(this.items, e2);
        return i ? this.items.splice(this.items.indexOf(i), 1).length > 0 : false;
      }
      get(e2, i) {
        var s2;
        let r2 = kn(this.items, e2), n = r2 == null ? void 0 : r2.value;
        return (s2 = !i && xi.isScalar(n) ? n.value : n) != null ? s2 : void 0;
      }
      has(e2) {
        return !!kn(this.items, e2);
      }
      set(e2, i) {
        this.add(new bo.Pair(e2, i), true);
      }
      toJSON(e2, i, r2) {
        let n = r2 ? new r2() : i != null && i.mapAsMap ? /* @__PURE__ */ new Map() : {};
        i != null && i.onCreate && i.onCreate(n);
        for (let s2 of this.items) ik.addPairToJSMap(i, n, s2);
        return n;
      }
      toString(e2, i, r2) {
        if (!e2) return JSON.stringify(this);
        for (let n of this.items) if (!xi.isPair(n)) throw new Error(`Map items must all be pairs; found ${JSON.stringify(n)} instead`);
        return !e2.allNullValues && this.hasAllNullValues(false) && (e2 = Object.assign({}, e2, { allNullValues: true })), tk.stringifyCollection(this, e2, { blockItemPrefix: "", flowChars: { start: "{", end: "}" }, itemIndent: e2.indent || "", onChompKeep: r2, onComment: i });
      }
    };
    Ic.YAMLMap = Ac;
    Ic.findPair = kn;
  });
  var Fr = _2((Og) => {
    var sk = Se2(), kg = Si(), ok = { collection: "map", default: true, nodeClass: kg.YAMLMap, tag: "tag:yaml.org,2002:map", resolve(t, e2) {
      return sk.isMap(t) || e2("Expected a mapping for this tag"), t;
    }, createNode: (t, e2, i) => kg.YAMLMap.from(t, e2, i) };
    Og.map = ok;
  });
  var Ei = _2((Cg) => {
    var ak = vn(), lk = Tc(), ck = no(), wo = Se2(), uk = De(), fk = vi(), Nc = class extends ck.Collection {
      static get tagName() {
        return "tag:yaml.org,2002:seq";
      }
      constructor(e2) {
        super(wo.SEQ, e2), this.items = [];
      }
      add(e2) {
        this.items.push(e2);
      }
      delete(e2) {
        let i = _o(e2);
        return typeof i != "number" ? false : this.items.splice(i, 1).length > 0;
      }
      get(e2, i) {
        let r2 = _o(e2);
        if (typeof r2 != "number") return;
        let n = this.items[r2];
        return !i && wo.isScalar(n) ? n.value : n;
      }
      has(e2) {
        let i = _o(e2);
        return typeof i == "number" && i < this.items.length;
      }
      set(e2, i) {
        let r2 = _o(e2);
        if (typeof r2 != "number") throw new Error(`Expected a valid index, not ${e2}.`);
        let n = this.items[r2];
        wo.isScalar(n) && uk.isScalarValue(i) ? n.value = i : this.items[r2] = i;
      }
      toJSON(e2, i) {
        let r2 = [];
        i != null && i.onCreate && i.onCreate(r2);
        let n = 0;
        for (let s2 of this.items) r2.push(fk.toJS(s2, String(n++), i));
        return r2;
      }
      toString(e2, i, r2) {
        return e2 ? lk.stringifyCollection(this, e2, { blockItemPrefix: "- ", flowChars: { start: "[", end: "]" }, itemIndent: (e2.indent || "") + "  ", onChompKeep: r2, onComment: i }) : JSON.stringify(this);
      }
      static from(e2, i, r2) {
        let { replacer: n } = r2, s2 = new this(e2);
        if (i && Symbol.iterator in Object(i)) {
          let o2 = 0;
          for (let a of i) {
            if (typeof n == "function") {
              let l = i instanceof Set ? a : String(o2++);
              a = n.call(i, l, a);
            }
            s2.items.push(ak.createNode(a, void 0, r2));
          }
        }
        return s2;
      }
    };
    function _o(t) {
      let e2 = wo.isScalar(t) ? t.value : t;
      return e2 && typeof e2 == "string" && (e2 = Number(e2)), typeof e2 == "number" && Number.isInteger(e2) && e2 >= 0 ? e2 : null;
    }
    Cg.YAMLSeq = Nc;
  });
  var qr = _2((Ag) => {
    var hk = Se2(), Tg = Ei(), pk = { collection: "seq", default: true, nodeClass: Tg.YAMLSeq, tag: "tag:yaml.org,2002:seq", resolve(t, e2) {
      return hk.isSeq(t) || e2("Expected a sequence for this tag"), t;
    }, createNode: (t, e2, i) => Tg.YAMLSeq.from(t, e2, i) };
    Ag.seq = pk;
  });
  var On = _2((Ig) => {
    var dk = wn(), mk = { identify: (t) => typeof t == "string", default: true, tag: "tag:yaml.org,2002:str", resolve: (t) => t, stringify(t, e2, i, r2) {
      return e2 = Object.assign({ actualString: true }, e2), dk.stringifyString(t, e2, i, r2);
    } };
    Ig.string = mk;
  });
  var xo = _2((Bg) => {
    var Ng = De(), Lg = { identify: (t) => t == null, createNode: () => new Ng.Scalar(null), default: true, tag: "tag:yaml.org,2002:null", test: /^(?:~|[Nn]ull|NULL)?$/, resolve: () => new Ng.Scalar(null), stringify: ({ source: t }, e2) => typeof t == "string" && Lg.test.test(t) ? t : e2.options.nullStr };
    Bg.nullTag = Lg;
  });
  var Lc = _2((Pg) => {
    var gk = De(), Rg = { identify: (t) => typeof t == "boolean", default: true, tag: "tag:yaml.org,2002:bool", test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/, resolve: (t) => new gk.Scalar(t[0] === "t" || t[0] === "T"), stringify({ source: t, value: e2 }, i) {
      if (t && Rg.test.test(t)) {
        let r2 = t[0] === "t" || t[0] === "T";
        if (e2 === r2) return t;
      }
      return e2 ? i.options.trueStr : i.options.falseStr;
    } };
    Pg.boolTag = Rg;
  });
  var Dr = _2((Mg) => {
    function vk({ format: t, minFractionDigits: e2, tag: i, value: r2 }) {
      if (typeof r2 == "bigint") return String(r2);
      let n = typeof r2 == "number" ? r2 : Number(r2);
      if (!isFinite(n)) return isNaN(n) ? ".nan" : n < 0 ? "-.inf" : ".inf";
      let s2 = JSON.stringify(r2);
      if (!t && e2 && (!i || i === "tag:yaml.org,2002:float") && /^\d/.test(s2)) {
        let o2 = s2.indexOf(".");
        o2 < 0 && (o2 = s2.length, s2 += ".");
        let a = e2 - (s2.length - o2 - 1);
        for (; a-- > 0; ) s2 += "0";
      }
      return s2;
    }
    Mg.stringifyNumber = vk;
  });
  var Rc = _2((So) => {
    var yk = De(), Bc = Dr(), bk = { identify: (t) => typeof t == "number", default: true, tag: "tag:yaml.org,2002:float", test: /^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/, resolve: (t) => t.slice(-3).toLowerCase() === "nan" ? NaN : t[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, stringify: Bc.stringifyNumber }, _k = { identify: (t) => typeof t == "number", default: true, tag: "tag:yaml.org,2002:float", format: "EXP", test: /^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/, resolve: (t) => parseFloat(t), stringify(t) {
      let e2 = Number(t.value);
      return isFinite(e2) ? e2.toExponential() : Bc.stringifyNumber(t);
    } }, wk = { identify: (t) => typeof t == "number", default: true, tag: "tag:yaml.org,2002:float", test: /^[-+]?(?:\.[0-9]+|[0-9]+\.[0-9]*)$/, resolve(t) {
      let e2 = new yk.Scalar(parseFloat(t)), i = t.indexOf(".");
      return i !== -1 && t[t.length - 1] === "0" && (e2.minFractionDigits = t.length - i - 1), e2;
    }, stringify: Bc.stringifyNumber };
    So.float = wk;
    So.floatExp = _k;
    So.floatNaN = bk;
  });
  var Mc = _2((ko) => {
    var Fg = Dr(), Eo = (t) => typeof t == "bigint" || Number.isInteger(t), Pc = (t, e2, i, { intAsBigInt: r2 }) => r2 ? BigInt(t) : parseInt(t.substring(e2), i);
    function qg(t, e2, i) {
      let { value: r2 } = t;
      return Eo(r2) && r2 >= 0 ? i + r2.toString(e2) : Fg.stringifyNumber(t);
    }
    var xk = { identify: (t) => Eo(t) && t >= 0, default: true, tag: "tag:yaml.org,2002:int", format: "OCT", test: /^0o[0-7]+$/, resolve: (t, e2, i) => Pc(t, 2, 8, i), stringify: (t) => qg(t, 8, "0o") }, Sk = { identify: Eo, default: true, tag: "tag:yaml.org,2002:int", test: /^[-+]?[0-9]+$/, resolve: (t, e2, i) => Pc(t, 0, 10, i), stringify: Fg.stringifyNumber }, Ek = { identify: (t) => Eo(t) && t >= 0, default: true, tag: "tag:yaml.org,2002:int", format: "HEX", test: /^0x[0-9a-fA-F]+$/, resolve: (t, e2, i) => Pc(t, 2, 16, i), stringify: (t) => qg(t, 16, "0x") };
    ko.int = Sk;
    ko.intHex = Ek;
    ko.intOct = xk;
  });
  var jg = _2((Dg) => {
    var kk = Fr(), Ok = xo(), Ck = qr(), Tk = On(), Ak = Lc(), Fc = Rc(), qc = Mc(), Ik = [kk.map, Ck.seq, Tk.string, Ok.nullTag, Ak.boolTag, qc.intOct, qc.int, qc.intHex, Fc.floatNaN, Fc.floatExp, Fc.float];
    Dg.schema = Ik;
  });
  var Vg = _2(($g) => {
    var Nk = De(), Lk = Fr(), Bk = qr();
    function Ug(t) {
      return typeof t == "bigint" || Number.isInteger(t);
    }
    var Oo = ({ value: t }) => JSON.stringify(t), Rk = [{ identify: (t) => typeof t == "string", default: true, tag: "tag:yaml.org,2002:str", resolve: (t) => t, stringify: Oo }, { identify: (t) => t == null, createNode: () => new Nk.Scalar(null), default: true, tag: "tag:yaml.org,2002:null", test: /^null$/, resolve: () => null, stringify: Oo }, { identify: (t) => typeof t == "boolean", default: true, tag: "tag:yaml.org,2002:bool", test: /^true|false$/, resolve: (t) => t === "true", stringify: Oo }, { identify: Ug, default: true, tag: "tag:yaml.org,2002:int", test: /^-?(?:0|[1-9][0-9]*)$/, resolve: (t, e2, { intAsBigInt: i }) => i ? BigInt(t) : parseInt(t, 10), stringify: ({ value: t }) => Ug(t) ? t.toString() : JSON.stringify(t) }, { identify: (t) => typeof t == "number", default: true, tag: "tag:yaml.org,2002:float", test: /^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/, resolve: (t) => parseFloat(t), stringify: Oo }], Pk = { default: true, tag: "", test: /^/, resolve(t, e2) {
      return e2(`Unresolved plain scalar ${JSON.stringify(t)}`), t;
    } }, Mk = [Lk.map, Bk.seq].concat(Rk, Pk);
    $g.schema = Mk;
  });
  var jc = _2((Hg) => {
    var Dc = De(), Fk = wn(), qk = { identify: (t) => t instanceof Uint8Array, default: false, tag: "tag:yaml.org,2002:binary", resolve(t, e2) {
      if (typeof Buffer == "function") return Buffer.from(t, "base64");
      if (typeof atob == "function") {
        let i = atob(t.replace(/[\n\r]/g, "")), r2 = new Uint8Array(i.length);
        for (let n = 0; n < i.length; ++n) r2[n] = i.charCodeAt(n);
        return r2;
      } else return e2("This environment does not support reading binary tags; either Buffer or atob is required"), t;
    }, stringify({ comment: t, type: e2, value: i }, r2, n, s2) {
      let o2 = i, a;
      if (typeof Buffer == "function") a = o2 instanceof Buffer ? o2.toString("base64") : Buffer.from(o2.buffer).toString("base64");
      else if (typeof btoa == "function") {
        let l = "";
        for (let c2 = 0; c2 < o2.length; ++c2) l += String.fromCharCode(o2[c2]);
        a = btoa(l);
      } else throw new Error("This environment does not support writing binary tags; either Buffer or btoa is required");
      if (e2 || (e2 = Dc.Scalar.BLOCK_LITERAL), e2 !== Dc.Scalar.QUOTE_DOUBLE) {
        let l = Math.max(r2.options.lineWidth - r2.indent.length, r2.options.minContentWidth), c2 = Math.ceil(a.length / l), u2 = new Array(c2);
        for (let f2 = 0, d2 = 0; f2 < c2; ++f2, d2 += l) u2[f2] = a.substr(d2, l);
        a = u2.join(e2 === Dc.Scalar.BLOCK_LITERAL ? `
` : " ");
      }
      return Fk.stringifyString({ comment: t, type: e2, value: a }, r2, n, s2);
    } };
    Hg.binary = qk;
  });
  var Ao = _2((To) => {
    var Co = Se2(), Uc = wi(), Dk = De(), jk = Ei();
    function Gg(t, e2) {
      var i;
      if (Co.isSeq(t)) for (let r2 = 0; r2 < t.items.length; ++r2) {
        let n = t.items[r2];
        if (!Co.isPair(n)) {
          if (Co.isMap(n)) {
            n.items.length > 1 && e2("Each pair must have its own sequence indicator");
            let s2 = n.items[0] || new Uc.Pair(new Dk.Scalar(null));
            if (n.commentBefore && (s2.key.commentBefore = s2.key.commentBefore ? `${n.commentBefore}
${s2.key.commentBefore}` : n.commentBefore), n.comment) {
              let o2 = (i = s2.value) != null ? i : s2.key;
              o2.comment = o2.comment ? `${n.comment}
${o2.comment}` : n.comment;
            }
            n = s2;
          }
          t.items[r2] = Co.isPair(n) ? n : new Uc.Pair(n);
        }
      }
      else e2("Expected a sequence for this tag");
      return t;
    }
    function Yg(t, e2, i) {
      let { replacer: r2 } = i, n = new jk.YAMLSeq(t);
      n.tag = "tag:yaml.org,2002:pairs";
      let s2 = 0;
      if (e2 && Symbol.iterator in Object(e2)) for (let o2 of e2) {
        typeof r2 == "function" && (o2 = r2.call(e2, String(s2++), o2));
        let a, l;
        if (Array.isArray(o2)) if (o2.length === 2) a = o2[0], l = o2[1];
        else throw new TypeError(`Expected [key, value] tuple: ${o2}`);
        else if (o2 && o2 instanceof Object) {
          let c2 = Object.keys(o2);
          if (c2.length === 1) a = c2[0], l = o2[a];
          else throw new TypeError(`Expected tuple with one key, not ${c2.length} keys`);
        } else a = o2;
        n.items.push(Uc.createPair(a, l, i));
      }
      return n;
    }
    var Uk = { collection: "seq", default: false, tag: "tag:yaml.org,2002:pairs", resolve: Gg, createNode: Yg };
    To.createPairs = Yg;
    To.pairs = Uk;
    To.resolvePairs = Gg;
  });
  var Hc = _2((Vc) => {
    var Wg = Se2(), $c = vi(), Cn = Si(), $k = Ei(), Kg = Ao(), Qi = class t extends $k.YAMLSeq {
      constructor() {
        super(), this.add = Cn.YAMLMap.prototype.add.bind(this), this.delete = Cn.YAMLMap.prototype.delete.bind(this), this.get = Cn.YAMLMap.prototype.get.bind(this), this.has = Cn.YAMLMap.prototype.has.bind(this), this.set = Cn.YAMLMap.prototype.set.bind(this), this.tag = t.tag;
      }
      toJSON(e2, i) {
        if (!i) return super.toJSON(e2);
        let r2 = /* @__PURE__ */ new Map();
        i != null && i.onCreate && i.onCreate(r2);
        for (let n of this.items) {
          let s2, o2;
          if (Wg.isPair(n) ? (s2 = $c.toJS(n.key, "", i), o2 = $c.toJS(n.value, s2, i)) : s2 = $c.toJS(n, "", i), r2.has(s2)) throw new Error("Ordered maps must not include duplicate keys");
          r2.set(s2, o2);
        }
        return r2;
      }
      static from(e2, i, r2) {
        let n = Kg.createPairs(e2, i, r2), s2 = new this();
        return s2.items = n.items, s2;
      }
    };
    Qi.tag = "tag:yaml.org,2002:omap";
    var Vk = { collection: "seq", identify: (t) => t instanceof Map, nodeClass: Qi, default: false, tag: "tag:yaml.org,2002:omap", resolve(t, e2) {
      let i = Kg.resolvePairs(t, e2), r2 = [];
      for (let { key: n } of i.items) Wg.isScalar(n) && (r2.includes(n.value) ? e2(`Ordered maps must not include duplicate keys: ${n.value}`) : r2.push(n.value));
      return Object.assign(new Qi(), i);
    }, createNode: (t, e2, i) => Qi.from(t, e2, i) };
    Vc.YAMLOMap = Qi;
    Vc.omap = Vk;
  });
  var Xg = _2((Gc) => {
    var zg = De();
    function Jg({ value: t, source: e2 }, i) {
      return e2 && (t ? Zg : Qg).test.test(e2) ? e2 : t ? i.options.trueStr : i.options.falseStr;
    }
    var Zg = { identify: (t) => t === true, default: true, tag: "tag:yaml.org,2002:bool", test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/, resolve: () => new zg.Scalar(true), stringify: Jg }, Qg = { identify: (t) => t === false, default: true, tag: "tag:yaml.org,2002:bool", test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/, resolve: () => new zg.Scalar(false), stringify: Jg };
    Gc.falseTag = Qg;
    Gc.trueTag = Zg;
  });
  var e0 = _2((Io) => {
    var Hk = De(), Yc = Dr(), Gk = { identify: (t) => typeof t == "number", default: true, tag: "tag:yaml.org,2002:float", test: /^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/, resolve: (t) => t.slice(-3).toLowerCase() === "nan" ? NaN : t[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, stringify: Yc.stringifyNumber }, Yk = { identify: (t) => typeof t == "number", default: true, tag: "tag:yaml.org,2002:float", format: "EXP", test: /^[-+]?(?:[0-9][0-9_]*)?(?:\.[0-9_]*)?[eE][-+]?[0-9]+$/, resolve: (t) => parseFloat(t.replace(/_/g, "")), stringify(t) {
      let e2 = Number(t.value);
      return isFinite(e2) ? e2.toExponential() : Yc.stringifyNumber(t);
    } }, Wk = { identify: (t) => typeof t == "number", default: true, tag: "tag:yaml.org,2002:float", test: /^[-+]?(?:[0-9][0-9_]*)?\.[0-9_]*$/, resolve(t) {
      let e2 = new Hk.Scalar(parseFloat(t.replace(/_/g, ""))), i = t.indexOf(".");
      if (i !== -1) {
        let r2 = t.substring(i + 1).replace(/_/g, "");
        r2[r2.length - 1] === "0" && (e2.minFractionDigits = r2.length);
      }
      return e2;
    }, stringify: Yc.stringifyNumber };
    Io.float = Wk;
    Io.floatExp = Yk;
    Io.floatNaN = Gk;
  });
  var i0 = _2((An) => {
    var t0 = Dr(), Tn = (t) => typeof t == "bigint" || Number.isInteger(t);
    function No(t, e2, i, { intAsBigInt: r2 }) {
      let n = t[0];
      if ((n === "-" || n === "+") && (e2 += 1), t = t.substring(e2).replace(/_/g, ""), r2) {
        switch (i) {
          case 2:
            t = `0b${t}`;
            break;
          case 8:
            t = `0o${t}`;
            break;
          case 16:
            t = `0x${t}`;
            break;
        }
        let o2 = BigInt(t);
        return n === "-" ? BigInt(-1) * o2 : o2;
      }
      let s2 = parseInt(t, i);
      return n === "-" ? -1 * s2 : s2;
    }
    function Wc(t, e2, i) {
      let { value: r2 } = t;
      if (Tn(r2)) {
        let n = r2.toString(e2);
        return r2 < 0 ? "-" + i + n.substr(1) : i + n;
      }
      return t0.stringifyNumber(t);
    }
    var Kk = { identify: Tn, default: true, tag: "tag:yaml.org,2002:int", format: "BIN", test: /^[-+]?0b[0-1_]+$/, resolve: (t, e2, i) => No(t, 2, 2, i), stringify: (t) => Wc(t, 2, "0b") }, zk = { identify: Tn, default: true, tag: "tag:yaml.org,2002:int", format: "OCT", test: /^[-+]?0[0-7_]+$/, resolve: (t, e2, i) => No(t, 1, 8, i), stringify: (t) => Wc(t, 8, "0") }, Jk = { identify: Tn, default: true, tag: "tag:yaml.org,2002:int", test: /^[-+]?[0-9][0-9_]*$/, resolve: (t, e2, i) => No(t, 0, 10, i), stringify: t0.stringifyNumber }, Zk = { identify: Tn, default: true, tag: "tag:yaml.org,2002:int", format: "HEX", test: /^[-+]?0x[0-9a-fA-F_]+$/, resolve: (t, e2, i) => No(t, 2, 16, i), stringify: (t) => Wc(t, 16, "0x") };
    An.int = Jk;
    An.intBin = Kk;
    An.intHex = Zk;
    An.intOct = zk;
  });
  var zc = _2((Kc) => {
    var Ro = Se2(), Lo = wi(), Bo = Si(), Xi = class t extends Bo.YAMLMap {
      constructor(e2) {
        super(e2), this.tag = t.tag;
      }
      add(e2) {
        let i;
        Ro.isPair(e2) ? i = e2 : e2 && typeof e2 == "object" && "key" in e2 && "value" in e2 && e2.value === null ? i = new Lo.Pair(e2.key, null) : i = new Lo.Pair(e2, null), Bo.findPair(this.items, i.key) || this.items.push(i);
      }
      get(e2, i) {
        let r2 = Bo.findPair(this.items, e2);
        return !i && Ro.isPair(r2) ? Ro.isScalar(r2.key) ? r2.key.value : r2.key : r2;
      }
      set(e2, i) {
        if (typeof i != "boolean") throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof i}`);
        let r2 = Bo.findPair(this.items, e2);
        r2 && !i ? this.items.splice(this.items.indexOf(r2), 1) : !r2 && i && this.items.push(new Lo.Pair(e2));
      }
      toJSON(e2, i) {
        return super.toJSON(e2, i, Set);
      }
      toString(e2, i, r2) {
        if (!e2) return JSON.stringify(this);
        if (this.hasAllNullValues(true)) return super.toString(Object.assign({}, e2, { allNullValues: true }), i, r2);
        throw new Error("Set items must all have null values");
      }
      static from(e2, i, r2) {
        let { replacer: n } = r2, s2 = new this(e2);
        if (i && Symbol.iterator in Object(i)) for (let o2 of i) typeof n == "function" && (o2 = n.call(i, o2, o2)), s2.items.push(Lo.createPair(o2, null, r2));
        return s2;
      }
    };
    Xi.tag = "tag:yaml.org,2002:set";
    var Qk = { collection: "map", identify: (t) => t instanceof Set, nodeClass: Xi, default: false, tag: "tag:yaml.org,2002:set", createNode: (t, e2, i) => Xi.from(t, e2, i), resolve(t, e2) {
      if (Ro.isMap(t)) {
        if (t.hasAllNullValues(true)) return Object.assign(new Xi(), t);
        e2("Set items must all have null values");
      } else e2("Expected a mapping for this tag");
      return t;
    } };
    Kc.YAMLSet = Xi;
    Kc.set = Qk;
  });
  var Zc = _2((Po) => {
    var Xk = Dr();
    function Jc(t, e2) {
      let i = t[0], r2 = i === "-" || i === "+" ? t.substring(1) : t, n = (o2) => e2 ? BigInt(o2) : Number(o2), s2 = r2.replace(/_/g, "").split(":").reduce((o2, a) => o2 * n(60) + n(a), n(0));
      return i === "-" ? n(-1) * s2 : s2;
    }
    function r0(t) {
      let { value: e2 } = t, i = (o2) => o2;
      if (typeof e2 == "bigint") i = (o2) => BigInt(o2);
      else if (isNaN(e2) || !isFinite(e2)) return Xk.stringifyNumber(t);
      let r2 = "";
      e2 < 0 && (r2 = "-", e2 *= i(-1));
      let n = i(60), s2 = [e2 % n];
      return e2 < 60 ? s2.unshift(0) : (e2 = (e2 - s2[0]) / n, s2.unshift(e2 % n), e2 >= 60 && (e2 = (e2 - s2[0]) / n, s2.unshift(e2))), r2 + s2.map((o2) => String(o2).padStart(2, "0")).join(":").replace(/000000\d*$/, "");
    }
    var eO = { identify: (t) => typeof t == "bigint" || Number.isInteger(t), default: true, tag: "tag:yaml.org,2002:int", format: "TIME", test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/, resolve: (t, e2, { intAsBigInt: i }) => Jc(t, i), stringify: r0 }, tO = { identify: (t) => typeof t == "number", default: true, tag: "tag:yaml.org,2002:float", format: "TIME", test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*$/, resolve: (t) => Jc(t, false), stringify: r0 }, n0 = { identify: (t) => t instanceof Date, default: true, tag: "tag:yaml.org,2002:timestamp", test: RegExp("^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})(?:(?:t|T|[ \\t]+)([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?)?$"), resolve(t) {
      let e2 = t.match(n0.test);
      if (!e2) throw new Error("!!timestamp expects a date, starting with yyyy-mm-dd");
      let [, i, r2, n, s2, o2, a] = e2.map(Number), l = e2[7] ? Number((e2[7] + "00").substr(1, 3)) : 0, c2 = Date.UTC(i, r2 - 1, n, s2 || 0, o2 || 0, a || 0, l), u2 = e2[8];
      if (u2 && u2 !== "Z") {
        let f2 = Jc(u2, false);
        Math.abs(f2) < 30 && (f2 *= 60), c2 -= 6e4 * f2;
      }
      return new Date(c2);
    }, stringify: ({ value: t }) => t.toISOString().replace(/((T00:00)?:00)?\.000Z$/, "") };
    Po.floatTime = tO;
    Po.intTime = eO;
    Po.timestamp = n0;
  });
  var a0 = _2((o0) => {
    var iO = Fr(), rO = xo(), nO = qr(), sO = On(), oO = jc(), s0 = Xg(), Qc = e0(), Mo = i0(), aO = po(), lO = Hc(), cO = Ao(), uO = zc(), Xc = Zc(), fO = [iO.map, nO.seq, sO.string, rO.nullTag, s0.trueTag, s0.falseTag, Mo.intBin, Mo.intOct, Mo.int, Mo.intHex, Qc.floatNaN, Qc.floatExp, Qc.float, oO.binary, aO.merge, lO.omap, cO.pairs, uO.set, Xc.intTime, Xc.floatTime, Xc.timestamp];
    o0.schema = fO;
  });
  var v0 = _2((iu) => {
    var f0 = Fr(), hO = xo(), h0 = qr(), pO = On(), dO = Lc(), eu = Rc(), tu = Mc(), mO = jg(), gO = Vg(), p0 = jc(), In = po(), d0 = Hc(), m0 = Ao(), l0 = a0(), g0 = zc(), Fo = Zc(), c0 = /* @__PURE__ */ new Map([["core", mO.schema], ["failsafe", [f0.map, h0.seq, pO.string]], ["json", gO.schema], ["yaml11", l0.schema], ["yaml-1.1", l0.schema]]), u0 = { binary: p0.binary, bool: dO.boolTag, float: eu.float, floatExp: eu.floatExp, floatNaN: eu.floatNaN, floatTime: Fo.floatTime, int: tu.int, intHex: tu.intHex, intOct: tu.intOct, intTime: Fo.intTime, map: f0.map, merge: In.merge, null: hO.nullTag, omap: d0.omap, pairs: m0.pairs, seq: h0.seq, set: g0.set, timestamp: Fo.timestamp }, vO = { "tag:yaml.org,2002:binary": p0.binary, "tag:yaml.org,2002:merge": In.merge, "tag:yaml.org,2002:omap": d0.omap, "tag:yaml.org,2002:pairs": m0.pairs, "tag:yaml.org,2002:set": g0.set, "tag:yaml.org,2002:timestamp": Fo.timestamp };
    function yO(t, e2, i) {
      let r2 = c0.get(e2);
      if (r2 && !t) return i && !r2.includes(In.merge) ? r2.concat(In.merge) : r2.slice();
      let n = r2;
      if (!n) if (Array.isArray(t)) n = [];
      else {
        let s2 = Array.from(c0.keys()).filter((o2) => o2 !== "yaml11").map((o2) => JSON.stringify(o2)).join(", ");
        throw new Error(`Unknown schema "${e2}"; use one of ${s2} or define customTags array`);
      }
      if (Array.isArray(t)) for (let s2 of t) n = n.concat(s2);
      else typeof t == "function" && (n = t(n.slice()));
      return i && (n = n.concat(In.merge)), n.reduce((s2, o2) => {
        let a = typeof o2 == "string" ? u0[o2] : o2;
        if (!a) {
          let l = JSON.stringify(o2), c2 = Object.keys(u0).map((u2) => JSON.stringify(u2)).join(", ");
          throw new Error(`Unknown custom tag ${l}; use one of ${c2}`);
        }
        return s2.includes(a) || s2.push(a), s2;
      }, []);
    }
    iu.coreKnownTags = vO;
    iu.getTags = yO;
  });
  var su = _2((y0) => {
    var ru = Se2(), bO = Fr(), _O = qr(), wO = On(), qo = v0(), xO = (t, e2) => t.key < e2.key ? -1 : t.key > e2.key ? 1 : 0, nu = class t {
      constructor({ compat: e2, customTags: i, merge: r2, resolveKnownTags: n, schema: s2, sortMapEntries: o2, toStringDefaults: a }) {
        this.compat = Array.isArray(e2) ? qo.getTags(e2, "compat") : e2 ? qo.getTags(null, e2) : null, this.name = typeof s2 == "string" && s2 || "core", this.knownTags = n ? qo.coreKnownTags : {}, this.tags = qo.getTags(i, this.name, r2), this.toStringOptions = a != null ? a : null, Object.defineProperty(this, ru.MAP, { value: bO.map }), Object.defineProperty(this, ru.SCALAR, { value: wO.string }), Object.defineProperty(this, ru.SEQ, { value: _O.seq }), this.sortMapEntries = typeof o2 == "function" ? o2 : o2 === true ? xO : null;
      }
      clone() {
        let e2 = Object.create(t.prototype, Object.getOwnPropertyDescriptors(this));
        return e2.tags = this.tags.slice(), e2;
      }
    };
    y0.Schema = nu;
  });
  var _0 = _2((b0) => {
    var SO = Se2(), ou = xn(), Nn = yn();
    function EO(t, e2) {
      var l;
      let i = [], r2 = e2.directives === true;
      if (e2.directives !== false && t.directives) {
        let c2 = t.directives.toString(t);
        c2 ? (i.push(c2), r2 = true) : t.directives.docStart && (r2 = true);
      }
      r2 && i.push("---");
      let n = ou.createStringifyContext(t, e2), { commentString: s2 } = n.options;
      if (t.commentBefore) {
        i.length !== 1 && i.unshift("");
        let c2 = s2(t.commentBefore);
        i.unshift(Nn.indentComment(c2, ""));
      }
      let o2 = false, a = null;
      if (t.contents) {
        if (SO.isNode(t.contents)) {
          if (t.contents.spaceBefore && r2 && i.push(""), t.contents.commentBefore) {
            let f2 = s2(t.contents.commentBefore);
            i.push(Nn.indentComment(f2, ""));
          }
          n.forceBlockIndent = !!t.comment, a = t.contents.comment;
        }
        let c2 = a ? void 0 : () => o2 = true, u2 = ou.stringify(t.contents, n, () => a = null, c2);
        a && (u2 += Nn.lineComment(u2, "", s2(a))), (u2[0] === "|" || u2[0] === ">") && i[i.length - 1] === "---" ? i[i.length - 1] = `--- ${u2}` : i.push(u2);
      } else i.push(ou.stringify(t.contents, n));
      if ((l = t.directives) != null && l.docEnd) if (t.comment) {
        let c2 = s2(t.comment);
        c2.includes(`
`) ? (i.push("..."), i.push(Nn.indentComment(c2, ""))) : i.push(`... ${c2}`);
      } else i.push("...");
      else {
        let c2 = t.comment;
        c2 && o2 && (c2 = c2.replace(/^\n+/, "")), c2 && ((!o2 || a) && i[i.length - 1] !== "" && i.push(""), i.push(Nn.indentComment(s2(c2), "")));
      }
      return i.join(`
`) + `
`;
    }
    b0.stringifyDocument = EO;
  });
  var Ln = _2((w0) => {
    var kO = gn(), jr = no(), It = Se2(), OO = wi(), CO = vi(), TO = su(), AO = _0(), au = Xs(), IO = fc(), NO = vn(), lu = uc(), cu = class t {
      constructor(e2, i, r2) {
        this.commentBefore = null, this.comment = null, this.errors = [], this.warnings = [], Object.defineProperty(this, It.NODE_TYPE, { value: It.DOC });
        let n = null;
        typeof i == "function" || Array.isArray(i) ? n = i : r2 === void 0 && i && (r2 = i, i = void 0);
        let s2 = Object.assign({ intAsBigInt: false, keepSourceTokens: false, logLevel: "warn", prettyErrors: true, strict: true, stringKeys: false, uniqueKeys: true, version: "1.2" }, r2);
        this.options = s2;
        let { version: o2 } = s2;
        r2 != null && r2._directives ? (this.directives = r2._directives.atDocument(), this.directives.yaml.explicit && (o2 = this.directives.yaml.version)) : this.directives = new lu.Directives({ version: o2 }), this.setSchema(o2, r2), this.contents = e2 === void 0 ? null : this.createNode(e2, n, r2);
      }
      clone() {
        let e2 = Object.create(t.prototype, { [It.NODE_TYPE]: { value: It.DOC } });
        return e2.commentBefore = this.commentBefore, e2.comment = this.comment, e2.errors = this.errors.slice(), e2.warnings = this.warnings.slice(), e2.options = Object.assign({}, this.options), this.directives && (e2.directives = this.directives.clone()), e2.schema = this.schema.clone(), e2.contents = It.isNode(this.contents) ? this.contents.clone(e2.schema) : this.contents, this.range && (e2.range = this.range.slice()), e2;
      }
      add(e2) {
        Ur(this.contents) && this.contents.add(e2);
      }
      addIn(e2, i) {
        Ur(this.contents) && this.contents.addIn(e2, i);
      }
      createAlias(e2, i) {
        if (!e2.anchor) {
          let r2 = au.anchorNames(this);
          e2.anchor = !i || r2.has(i) ? au.findNewAnchor(i || "a", r2) : i;
        }
        return new kO.Alias(e2.anchor);
      }
      createNode(e2, i, r2) {
        let n;
        if (typeof i == "function") e2 = i.call({ "": e2 }, "", e2), n = i;
        else if (Array.isArray(i)) {
          let b = (E) => typeof E == "number" || E instanceof String || E instanceof Number, x2 = i.filter(b).map(String);
          x2.length > 0 && (i = i.concat(x2)), n = i;
        } else r2 === void 0 && i && (r2 = i, i = void 0);
        let { aliasDuplicateObjects: s2, anchorPrefix: o2, flow: a, keepUndefined: l, onTagObj: c2, tag: u2 } = r2 != null ? r2 : {}, { onAnchor: f2, setAnchors: d2, sourceObjects: g2 } = au.createNodeAnchors(this, o2 || "a"), m2 = { aliasDuplicateObjects: s2 != null ? s2 : true, keepUndefined: l != null ? l : false, onAnchor: f2, onTagObj: c2, replacer: n, schema: this.schema, sourceObjects: g2 }, y2 = NO.createNode(e2, u2, m2);
        return a && It.isCollection(y2) && (y2.flow = true), d2(), y2;
      }
      createPair(e2, i, r2 = {}) {
        let n = this.createNode(e2, null, r2), s2 = this.createNode(i, null, r2);
        return new OO.Pair(n, s2);
      }
      delete(e2) {
        return Ur(this.contents) ? this.contents.delete(e2) : false;
      }
      deleteIn(e2) {
        return jr.isEmptyPath(e2) ? this.contents == null ? false : (this.contents = null, true) : Ur(this.contents) ? this.contents.deleteIn(e2) : false;
      }
      get(e2, i) {
        return It.isCollection(this.contents) ? this.contents.get(e2, i) : void 0;
      }
      getIn(e2, i) {
        return jr.isEmptyPath(e2) ? !i && It.isScalar(this.contents) ? this.contents.value : this.contents : It.isCollection(this.contents) ? this.contents.getIn(e2, i) : void 0;
      }
      has(e2) {
        return It.isCollection(this.contents) ? this.contents.has(e2) : false;
      }
      hasIn(e2) {
        return jr.isEmptyPath(e2) ? this.contents !== void 0 : It.isCollection(this.contents) ? this.contents.hasIn(e2) : false;
      }
      set(e2, i) {
        this.contents == null ? this.contents = jr.collectionFromPath(this.schema, [e2], i) : Ur(this.contents) && this.contents.set(e2, i);
      }
      setIn(e2, i) {
        jr.isEmptyPath(e2) ? this.contents = i : this.contents == null ? this.contents = jr.collectionFromPath(this.schema, Array.from(e2), i) : Ur(this.contents) && this.contents.setIn(e2, i);
      }
      setSchema(e2, i = {}) {
        typeof e2 == "number" && (e2 = String(e2));
        let r2;
        switch (e2) {
          case "1.1":
            this.directives ? this.directives.yaml.version = "1.1" : this.directives = new lu.Directives({ version: "1.1" }), r2 = { resolveKnownTags: false, schema: "yaml-1.1" };
            break;
          case "1.2":
          case "next":
            this.directives ? this.directives.yaml.version = e2 : this.directives = new lu.Directives({ version: e2 }), r2 = { resolveKnownTags: true, schema: "core" };
            break;
          case null:
            this.directives && delete this.directives, r2 = null;
            break;
          default: {
            let n = JSON.stringify(e2);
            throw new Error(`Expected '1.1', '1.2' or null as first argument, but found: ${n}`);
          }
        }
        if (i.schema instanceof Object) this.schema = i.schema;
        else if (r2) this.schema = new TO.Schema(Object.assign(r2, i));
        else throw new Error("With a null YAML version, the { schema: Schema } option is required");
      }
      toJS({ json: e2, jsonArg: i, mapAsMap: r2, maxAliasCount: n, onAnchor: s2, reviver: o2 } = {}) {
        let a = { anchors: /* @__PURE__ */ new Map(), doc: this, keep: !e2, mapAsMap: r2 === true, mapKeyWarned: false, maxAliasCount: typeof n == "number" ? n : 100 }, l = CO.toJS(this.contents, i != null ? i : "", a);
        if (typeof s2 == "function") for (let { count: c2, res: u2 } of a.anchors.values()) s2(u2, c2);
        return typeof o2 == "function" ? IO.applyReviver(o2, { "": l }, "", l) : l;
      }
      toJSON(e2, i) {
        return this.toJS({ json: true, jsonArg: e2, mapAsMap: false, onAnchor: i });
      }
      toString(e2 = {}) {
        if (this.errors.length > 0) throw new Error("Document with errors cannot be stringified");
        if ("indent" in e2 && (!Number.isInteger(e2.indent) || Number(e2.indent) <= 0)) {
          let i = JSON.stringify(e2.indent);
          throw new Error(`"indent" option must be a positive integer, not ${i}`);
        }
        return AO.stringifyDocument(this, e2);
      }
    };
    function Ur(t) {
      if (It.isCollection(t)) return true;
      throw new Error("Expected a YAML collection as document contents");
    }
    w0.Document = cu;
  });
  var Pn = _2((Rn) => {
    var Bn = class extends Error {
      constructor(e2, i, r2, n) {
        super(), this.name = e2, this.code = r2, this.message = n, this.pos = i;
      }
    }, uu = class extends Bn {
      constructor(e2, i, r2) {
        super("YAMLParseError", e2, i, r2);
      }
    }, fu = class extends Bn {
      constructor(e2, i, r2) {
        super("YAMLWarning", e2, i, r2);
      }
    }, LO = (t, e2) => (i) => {
      if (i.pos[0] === -1) return;
      i.linePos = i.pos.map((a) => e2.linePos(a));
      let { line: r2, col: n } = i.linePos[0];
      i.message += ` at line ${r2}, column ${n}`;
      let s2 = n - 1, o2 = t.substring(e2.lineStarts[r2 - 1], e2.lineStarts[r2]).replace(/[\n\r]+$/, "");
      if (s2 >= 60 && o2.length > 80) {
        let a = Math.min(s2 - 39, o2.length - 79);
        o2 = "…" + o2.substring(a), s2 -= a - 1;
      }
      if (o2.length > 80 && (o2 = o2.substring(0, 79) + "…"), r2 > 1 && /^ *$/.test(o2.substring(0, s2))) {
        let a = t.substring(e2.lineStarts[r2 - 2], e2.lineStarts[r2 - 1]);
        a.length > 80 && (a = a.substring(0, 79) + `…
`), o2 = a + o2;
      }
      if (/[^ ]/.test(o2)) {
        let a = 1, l = i.linePos[1];
        l && l.line === r2 && l.col > n && (a = Math.max(1, Math.min(l.col - n, 80 - s2)));
        let c2 = " ".repeat(s2) + "^".repeat(a);
        i.message += `:

${o2}
${c2}
`;
      }
    };
    Rn.YAMLError = Bn;
    Rn.YAMLParseError = uu;
    Rn.YAMLWarning = fu;
    Rn.prettifyError = LO;
  });
  var Mn = _2((x0) => {
    function BO(t, { flow: e2, indicator: i, next: r2, offset: n, onError: s2, parentIndent: o2, startOnNewline: a }) {
      let l = false, c2 = a, u2 = a, f2 = "", d2 = "", g2 = false, m2 = false, y2 = null, b = null, x2 = null, E = null, O2 = null, k2 = null, S2 = null;
      for (let A2 of t) switch (m2 && (A2.type !== "space" && A2.type !== "newline" && A2.type !== "comma" && s2(A2.offset, "MISSING_CHAR", "Tags and anchors must be separated from the next token by white space"), m2 = false), y2 && (c2 && A2.type !== "comment" && A2.type !== "newline" && s2(y2, "TAB_AS_INDENT", "Tabs are not allowed as indentation"), y2 = null), A2.type) {
        case "space":
          !e2 && (i !== "doc-start" || (r2 == null ? void 0 : r2.type) !== "flow-collection") && A2.source.includes("	") && (y2 = A2), u2 = true;
          break;
        case "comment": {
          u2 || s2(A2, "MISSING_CHAR", "Comments must be separated from other tokens by white space characters");
          let C2 = A2.source.substring(1) || " ";
          f2 ? f2 += d2 + C2 : f2 = C2, d2 = "", c2 = false;
          break;
        }
        case "newline":
          c2 ? f2 ? f2 += A2.source : l = true : d2 += A2.source, c2 = true, g2 = true, (b || x2) && (E = A2), u2 = true;
          break;
        case "anchor":
          b && s2(A2, "MULTIPLE_ANCHORS", "A node can have at most one anchor"), A2.source.endsWith(":") && s2(A2.offset + A2.source.length - 1, "BAD_ALIAS", "Anchor ending in : is ambiguous", true), b = A2, S2 === null && (S2 = A2.offset), c2 = false, u2 = false, m2 = true;
          break;
        case "tag": {
          x2 && s2(A2, "MULTIPLE_TAGS", "A node can have at most one tag"), x2 = A2, S2 === null && (S2 = A2.offset), c2 = false, u2 = false, m2 = true;
          break;
        }
        case i:
          (b || x2) && s2(A2, "BAD_PROP_ORDER", `Anchors and tags must be after the ${A2.source} indicator`), k2 && s2(A2, "UNEXPECTED_TOKEN", `Unexpected ${A2.source} in ${e2 != null ? e2 : "collection"}`), k2 = A2, c2 = i === "seq-item-ind" || i === "explicit-key-ind", u2 = false;
          break;
        case "comma":
          if (e2) {
            O2 && s2(A2, "UNEXPECTED_TOKEN", `Unexpected , in ${e2}`), O2 = A2, c2 = false, u2 = false;
            break;
          }
        default:
          s2(A2, "UNEXPECTED_TOKEN", `Unexpected ${A2.type} token`), c2 = false, u2 = false;
      }
      let R2 = t[t.length - 1], T2 = R2 ? R2.offset + R2.source.length : n;
      return m2 && r2 && r2.type !== "space" && r2.type !== "newline" && r2.type !== "comma" && (r2.type !== "scalar" || r2.source !== "") && s2(r2.offset, "MISSING_CHAR", "Tags and anchors must be separated from the next token by white space"), y2 && (c2 && y2.indent <= o2 || (r2 == null ? void 0 : r2.type) === "block-map" || (r2 == null ? void 0 : r2.type) === "block-seq") && s2(y2, "TAB_AS_INDENT", "Tabs are not allowed as indentation"), { comma: O2, found: k2, spaceBefore: l, comment: f2, hasNewline: g2, anchor: b, tag: x2, newlineAfterProp: E, end: T2, start: S2 != null ? S2 : T2 };
    }
    x0.resolveProps = BO;
  });
  var Do = _2((S0) => {
    function hu(t) {
      if (!t) return null;
      switch (t.type) {
        case "alias":
        case "scalar":
        case "double-quoted-scalar":
        case "single-quoted-scalar":
          if (t.source.includes(`
`)) return true;
          if (t.end) {
            for (let e2 of t.end) if (e2.type === "newline") return true;
          }
          return false;
        case "flow-collection":
          for (let e2 of t.items) {
            for (let i of e2.start) if (i.type === "newline") return true;
            if (e2.sep) {
              for (let i of e2.sep) if (i.type === "newline") return true;
            }
            if (hu(e2.key) || hu(e2.value)) return true;
          }
          return false;
        default:
          return true;
      }
    }
    S0.containsNewline = hu;
  });
  var pu = _2((E0) => {
    var RO = Do();
    function PO(t, e2, i) {
      if ((e2 == null ? void 0 : e2.type) === "flow-collection") {
        let r2 = e2.end[0];
        r2.indent === t && (r2.source === "]" || r2.source === "}") && RO.containsNewline(e2) && i(r2, "BAD_INDENT", "Flow end indicator should be more indented than parent", true);
      }
    }
    E0.flowIndentCheck = PO;
  });
  var du = _2((O0) => {
    var k0 = Se2();
    function MO(t, e2, i) {
      let { uniqueKeys: r2 } = t.options;
      if (r2 === false) return false;
      let n = typeof r2 == "function" ? r2 : (s2, o2) => s2 === o2 || k0.isScalar(s2) && k0.isScalar(o2) && s2.value === o2.value;
      return e2.some((s2) => n(s2.key, i));
    }
    O0.mapIncludes = MO;
  });
  var L0 = _2((N0) => {
    var C0 = wi(), FO = Si(), T0 = Mn(), qO = Do(), A0 = pu(), DO = du(), I0 = "All mapping items must start at the same column";
    function jO({ composeNode: t, composeEmptyNode: e2 }, i, r2, n, s2) {
      var u2, f2;
      let o2 = (u2 = s2 == null ? void 0 : s2.nodeClass) != null ? u2 : FO.YAMLMap, a = new o2(i.schema);
      i.atRoot && (i.atRoot = false);
      let l = r2.offset, c2 = null;
      for (let d2 of r2.items) {
        let { start: g2, key: m2, sep: y2, value: b } = d2, x2 = T0.resolveProps(g2, { indicator: "explicit-key-ind", next: m2 != null ? m2 : y2 == null ? void 0 : y2[0], offset: l, onError: n, parentIndent: r2.indent, startOnNewline: true }), E = !x2.found;
        if (E) {
          if (m2 && (m2.type === "block-seq" ? n(l, "BLOCK_AS_IMPLICIT_KEY", "A block sequence may not be used as an implicit map key") : "indent" in m2 && m2.indent !== r2.indent && n(l, "BAD_INDENT", I0)), !x2.anchor && !x2.tag && !y2) {
            c2 = x2.end, x2.comment && (a.comment ? a.comment += `
` + x2.comment : a.comment = x2.comment);
            continue;
          }
          (x2.newlineAfterProp || qO.containsNewline(m2)) && n(m2 != null ? m2 : g2[g2.length - 1], "MULTILINE_IMPLICIT_KEY", "Implicit keys need to be on a single line");
        } else ((f2 = x2.found) == null ? void 0 : f2.indent) !== r2.indent && n(l, "BAD_INDENT", I0);
        i.atKey = true;
        let O2 = x2.end, k2 = m2 ? t(i, m2, x2, n) : e2(i, O2, g2, null, x2, n);
        i.schema.compat && A0.flowIndentCheck(r2.indent, m2, n), i.atKey = false, DO.mapIncludes(i, a.items, k2) && n(O2, "DUPLICATE_KEY", "Map keys must be unique");
        let S2 = T0.resolveProps(y2 != null ? y2 : [], { indicator: "map-value-ind", next: b, offset: k2.range[2], onError: n, parentIndent: r2.indent, startOnNewline: !m2 || m2.type === "block-scalar" });
        if (l = S2.end, S2.found) {
          E && ((b == null ? void 0 : b.type) === "block-map" && !S2.hasNewline && n(l, "BLOCK_AS_IMPLICIT_KEY", "Nested mappings are not allowed in compact mappings"), i.options.strict && x2.start < S2.found.offset - 1024 && n(k2.range, "KEY_OVER_1024_CHARS", "The : indicator must be at most 1024 chars after the start of an implicit block mapping key"));
          let R2 = b ? t(i, b, S2, n) : e2(i, l, y2, null, S2, n);
          i.schema.compat && A0.flowIndentCheck(r2.indent, b, n), l = R2.range[2];
          let T2 = new C0.Pair(k2, R2);
          i.options.keepSourceTokens && (T2.srcToken = d2), a.items.push(T2);
        } else {
          E && n(k2.range, "MISSING_CHAR", "Implicit map keys need to be followed by map values"), S2.comment && (k2.comment ? k2.comment += `
` + S2.comment : k2.comment = S2.comment);
          let R2 = new C0.Pair(k2);
          i.options.keepSourceTokens && (R2.srcToken = d2), a.items.push(R2);
        }
      }
      return c2 && c2 < l && n(c2, "IMPOSSIBLE", "Map comment with trailing content"), a.range = [r2.offset, l, c2 != null ? c2 : l], a;
    }
    N0.resolveBlockMap = jO;
  });
  var R0 = _2((B0) => {
    var UO = Ei(), $O = Mn(), VO = pu();
    function HO({ composeNode: t, composeEmptyNode: e2 }, i, r2, n, s2) {
      var u2;
      let o2 = (u2 = s2 == null ? void 0 : s2.nodeClass) != null ? u2 : UO.YAMLSeq, a = new o2(i.schema);
      i.atRoot && (i.atRoot = false), i.atKey && (i.atKey = false);
      let l = r2.offset, c2 = null;
      for (let { start: f2, value: d2 } of r2.items) {
        let g2 = $O.resolveProps(f2, { indicator: "seq-item-ind", next: d2, offset: l, onError: n, parentIndent: r2.indent, startOnNewline: true });
        if (!g2.found) if (g2.anchor || g2.tag || d2) d2 && d2.type === "block-seq" ? n(g2.end, "BAD_INDENT", "All sequence items must start at the same column") : n(l, "MISSING_CHAR", "Sequence item without - indicator");
        else {
          c2 = g2.end, g2.comment && (a.comment = g2.comment);
          continue;
        }
        let m2 = d2 ? t(i, d2, g2, n) : e2(i, g2.end, f2, null, g2, n);
        i.schema.compat && VO.flowIndentCheck(r2.indent, d2, n), l = m2.range[2], a.items.push(m2);
      }
      return a.range = [r2.offset, l, c2 != null ? c2 : l], a;
    }
    B0.resolveBlockSeq = HO;
  });
  var $r = _2((P0) => {
    function GO(t, e2, i, r2) {
      let n = "";
      if (t) {
        let s2 = false, o2 = "";
        for (let a of t) {
          let { source: l, type: c2 } = a;
          switch (c2) {
            case "space":
              s2 = true;
              break;
            case "comment": {
              i && !s2 && r2(a, "MISSING_CHAR", "Comments must be separated from other tokens by white space characters");
              let u2 = l.substring(1) || " ";
              n ? n += o2 + u2 : n = u2, o2 = "";
              break;
            }
            case "newline":
              n && (o2 += l), s2 = true;
              break;
            default:
              r2(a, "UNEXPECTED_TOKEN", `Unexpected ${c2} at node end`);
          }
          e2 += l.length;
        }
      }
      return { comment: n, offset: e2 };
    }
    P0.resolveEnd = GO;
  });
  var D0 = _2((q0) => {
    var YO = Se2(), WO = wi(), M0 = Si(), KO = Ei(), zO = $r(), F0 = Mn(), JO = Do(), ZO = du(), mu = "Block collections are not allowed within flow collections", gu = (t) => t && (t.type === "block-map" || t.type === "block-seq");
    function QO({ composeNode: t, composeEmptyNode: e2 }, i, r2, n, s2) {
      var b, x2;
      let o2 = r2.start.source === "{", a = o2 ? "flow map" : "flow sequence", l = (b = s2 == null ? void 0 : s2.nodeClass) != null ? b : o2 ? M0.YAMLMap : KO.YAMLSeq, c2 = new l(i.schema);
      c2.flow = true;
      let u2 = i.atRoot;
      u2 && (i.atRoot = false), i.atKey && (i.atKey = false);
      let f2 = r2.offset + r2.start.source.length;
      for (let E = 0; E < r2.items.length; ++E) {
        let O2 = r2.items[E], { start: k2, key: S2, sep: R2, value: T2 } = O2, A2 = F0.resolveProps(k2, { flow: a, indicator: "explicit-key-ind", next: S2 != null ? S2 : R2 == null ? void 0 : R2[0], offset: f2, onError: n, parentIndent: r2.indent, startOnNewline: false });
        if (!A2.found) {
          if (!A2.anchor && !A2.tag && !R2 && !T2) {
            E === 0 && A2.comma ? n(A2.comma, "UNEXPECTED_TOKEN", `Unexpected , in ${a}`) : E < r2.items.length - 1 && n(A2.start, "UNEXPECTED_TOKEN", `Unexpected empty item in ${a}`), A2.comment && (c2.comment ? c2.comment += `
` + A2.comment : c2.comment = A2.comment), f2 = A2.end;
            continue;
          }
          !o2 && i.options.strict && JO.containsNewline(S2) && n(S2, "MULTILINE_IMPLICIT_KEY", "Implicit keys of flow sequence pairs need to be on a single line");
        }
        if (E === 0) A2.comma && n(A2.comma, "UNEXPECTED_TOKEN", `Unexpected , in ${a}`);
        else if (A2.comma || n(A2.start, "MISSING_CHAR", `Missing , between ${a} items`), A2.comment) {
          let C2 = "";
          e: for (let L2 of k2) switch (L2.type) {
            case "comma":
            case "space":
              break;
            case "comment":
              C2 = L2.source.substring(1);
              break e;
            default:
              break e;
          }
          if (C2) {
            let L2 = c2.items[c2.items.length - 1];
            YO.isPair(L2) && (L2 = (x2 = L2.value) != null ? x2 : L2.key), L2.comment ? L2.comment += `
` + C2 : L2.comment = C2, A2.comment = A2.comment.substring(C2.length + 1);
          }
        }
        if (!o2 && !R2 && !A2.found) {
          let C2 = T2 ? t(i, T2, A2, n) : e2(i, A2.end, R2, null, A2, n);
          c2.items.push(C2), f2 = C2.range[2], gu(T2) && n(C2.range, "BLOCK_IN_FLOW", mu);
        } else {
          i.atKey = true;
          let C2 = A2.end, L2 = S2 ? t(i, S2, A2, n) : e2(i, C2, k2, null, A2, n);
          gu(S2) && n(L2.range, "BLOCK_IN_FLOW", mu), i.atKey = false;
          let P2 = F0.resolveProps(R2 != null ? R2 : [], { flow: a, indicator: "map-value-ind", next: T2, offset: L2.range[2], onError: n, parentIndent: r2.indent, startOnNewline: false });
          if (P2.found) {
            if (!o2 && !A2.found && i.options.strict) {
              if (R2) for (let H of R2) {
                if (H === P2.found) break;
                if (H.type === "newline") {
                  n(H, "MULTILINE_IMPLICIT_KEY", "Implicit keys of flow sequence pairs need to be on a single line");
                  break;
                }
              }
              A2.start < P2.found.offset - 1024 && n(P2.found, "KEY_OVER_1024_CHARS", "The : indicator must be at most 1024 chars after the start of an implicit flow sequence key");
            }
          } else T2 && ("source" in T2 && T2.source && T2.source[0] === ":" ? n(T2, "MISSING_CHAR", `Missing space after : in ${a}`) : n(P2.start, "MISSING_CHAR", `Missing , or : between ${a} items`));
          let U = T2 ? t(i, T2, P2, n) : P2.found ? e2(i, P2.end, R2, null, P2, n) : null;
          U ? gu(T2) && n(U.range, "BLOCK_IN_FLOW", mu) : P2.comment && (L2.comment ? L2.comment += `
` + P2.comment : L2.comment = P2.comment);
          let q2 = new WO.Pair(L2, U);
          if (i.options.keepSourceTokens && (q2.srcToken = O2), o2) {
            let H = c2;
            ZO.mapIncludes(i, H.items, L2) && n(C2, "DUPLICATE_KEY", "Map keys must be unique"), H.items.push(q2);
          } else {
            let H = new M0.YAMLMap(i.schema);
            H.flow = true, H.items.push(q2);
            let j = (U != null ? U : L2).range;
            H.range = [L2.range[0], j[1], j[2]], c2.items.push(H);
          }
          f2 = U ? U.range[2] : P2.end;
        }
      }
      let d2 = o2 ? "}" : "]", [g2, ...m2] = r2.end, y2 = f2;
      if (g2 && g2.source === d2) y2 = g2.offset + g2.source.length;
      else {
        let E = a[0].toUpperCase() + a.substring(1), O2 = u2 ? `${E} must end with a ${d2}` : `${E} in block collection must be sufficiently indented and end with a ${d2}`;
        n(f2, u2 ? "MISSING_CHAR" : "BAD_INDENT", O2), g2 && g2.source.length !== 1 && m2.unshift(g2);
      }
      if (m2.length > 0) {
        let E = zO.resolveEnd(m2, y2, i.options.strict, n);
        E.comment && (c2.comment ? c2.comment += `
` + E.comment : c2.comment = E.comment), c2.range = [r2.offset, y2, E.offset];
      } else c2.range = [r2.offset, y2, y2];
      return c2;
    }
    q0.resolveFlowCollection = QO;
  });
  var U0 = _2((j0) => {
    var XO = Se2(), eC = De(), tC = Si(), iC = Ei(), rC = L0(), nC = R0(), sC = D0();
    function vu(t, e2, i, r2, n, s2) {
      let o2 = i.type === "block-map" ? rC.resolveBlockMap(t, e2, i, r2, s2) : i.type === "block-seq" ? nC.resolveBlockSeq(t, e2, i, r2, s2) : sC.resolveFlowCollection(t, e2, i, r2, s2), a = o2.constructor;
      return n === "!" || n === a.tagName ? (o2.tag = a.tagName, o2) : (n && (o2.tag = n), o2);
    }
    function oC(t, e2, i, r2, n) {
      var d2, g2;
      let s2 = r2.tag, o2 = s2 ? e2.directives.tagName(s2.source, (m2) => n(s2, "TAG_RESOLVE_FAILED", m2)) : null;
      if (i.type === "block-seq") {
        let { anchor: m2, newlineAfterProp: y2 } = r2, b = m2 && s2 ? m2.offset > s2.offset ? m2 : s2 : m2 != null ? m2 : s2;
        b && (!y2 || y2.offset < b.offset) && n(b, "MISSING_CHAR", "Missing newline after block sequence props");
      }
      let a = i.type === "block-map" ? "map" : i.type === "block-seq" ? "seq" : i.start.source === "{" ? "map" : "seq";
      if (!s2 || !o2 || o2 === "!" || o2 === tC.YAMLMap.tagName && a === "map" || o2 === iC.YAMLSeq.tagName && a === "seq") return vu(t, e2, i, n, o2);
      let l = e2.schema.tags.find((m2) => m2.tag === o2 && m2.collection === a);
      if (!l) {
        let m2 = e2.schema.knownTags[o2];
        if (m2 && m2.collection === a) e2.schema.tags.push(Object.assign({}, m2, { default: false })), l = m2;
        else return m2 != null && m2.collection ? n(s2, "BAD_COLLECTION_TYPE", `${m2.tag} used for ${a} collection, but expects ${m2.collection}`, true) : n(s2, "TAG_RESOLVE_FAILED", `Unresolved tag: ${o2}`, true), vu(t, e2, i, n, o2);
      }
      let c2 = vu(t, e2, i, n, o2, l), u2 = (g2 = (d2 = l.resolve) == null ? void 0 : d2.call(l, c2, (m2) => n(s2, "TAG_RESOLVE_FAILED", m2), e2.options)) != null ? g2 : c2, f2 = XO.isNode(u2) ? u2 : new eC.Scalar(u2);
      return f2.range = c2.range, f2.tag = o2, l != null && l.format && (f2.format = l.format), f2;
    }
    j0.composeCollection = oC;
  });
  var bu = _2(($0) => {
    var yu = De();
    function aC(t, e2, i) {
      let r2 = e2.offset, n = lC(e2, t.options.strict, i);
      if (!n) return { value: "", type: null, comment: "", range: [r2, r2, r2] };
      let s2 = n.mode === ">" ? yu.Scalar.BLOCK_FOLDED : yu.Scalar.BLOCK_LITERAL, o2 = e2.source ? cC(e2.source) : [], a = o2.length;
      for (let y2 = o2.length - 1; y2 >= 0; --y2) {
        let b = o2[y2][1];
        if (b === "" || b === "\r") a = y2;
        else break;
      }
      if (a === 0) {
        let y2 = n.chomp === "+" && o2.length > 0 ? `
`.repeat(Math.max(1, o2.length - 1)) : "", b = r2 + n.length;
        return e2.source && (b += e2.source.length), { value: y2, type: s2, comment: n.comment, range: [r2, b, b] };
      }
      let l = e2.indent + n.indent, c2 = e2.offset + n.length, u2 = 0;
      for (let y2 = 0; y2 < a; ++y2) {
        let [b, x2] = o2[y2];
        if (x2 === "" || x2 === "\r") n.indent === 0 && b.length > l && (l = b.length);
        else {
          b.length < l && i(c2 + b.length, "MISSING_CHAR", "Block scalars with more-indented leading empty lines must use an explicit indentation indicator"), n.indent === 0 && (l = b.length), u2 = y2, l === 0 && !t.atRoot && i(c2, "BAD_INDENT", "Block scalar values in collections must be indented");
          break;
        }
        c2 += b.length + x2.length + 1;
      }
      for (let y2 = o2.length - 1; y2 >= a; --y2) o2[y2][0].length > l && (a = y2 + 1);
      let f2 = "", d2 = "", g2 = false;
      for (let y2 = 0; y2 < u2; ++y2) f2 += o2[y2][0].slice(l) + `
`;
      for (let y2 = u2; y2 < a; ++y2) {
        let [b, x2] = o2[y2];
        c2 += b.length + x2.length + 1;
        let E = x2[x2.length - 1] === "\r";
        if (E && (x2 = x2.slice(0, -1)), x2 && b.length < l) {
          let k2 = `Block scalar lines must not be less indented than their ${n.indent ? "explicit indentation indicator" : "first line"}`;
          i(c2 - x2.length - (E ? 2 : 1), "BAD_INDENT", k2), b = "";
        }
        s2 === yu.Scalar.BLOCK_LITERAL ? (f2 += d2 + b.slice(l) + x2, d2 = `
`) : b.length > l || x2[0] === "	" ? (d2 === " " ? d2 = `
` : !g2 && d2 === `
` && (d2 = `

`), f2 += d2 + b.slice(l) + x2, d2 = `
`, g2 = true) : x2 === "" ? d2 === `
` ? f2 += `
` : d2 = `
` : (f2 += d2 + x2, d2 = " ", g2 = false);
      }
      switch (n.chomp) {
        case "-":
          break;
        case "+":
          for (let y2 = a; y2 < o2.length; ++y2) f2 += `
` + o2[y2][0].slice(l);
          f2[f2.length - 1] !== `
` && (f2 += `
`);
          break;
        default:
          f2 += `
`;
      }
      let m2 = r2 + n.length + e2.source.length;
      return { value: f2, type: s2, comment: n.comment, range: [r2, m2, m2] };
    }
    function lC({ offset: t, props: e2 }, i, r2) {
      if (e2[0].type !== "block-scalar-header") return r2(e2[0], "IMPOSSIBLE", "Block scalar header not found"), null;
      let { source: n } = e2[0], s2 = n[0], o2 = 0, a = "", l = -1;
      for (let d2 = 1; d2 < n.length; ++d2) {
        let g2 = n[d2];
        if (!a && (g2 === "-" || g2 === "+")) a = g2;
        else {
          let m2 = Number(g2);
          !o2 && m2 ? o2 = m2 : l === -1 && (l = t + d2);
        }
      }
      l !== -1 && r2(l, "UNEXPECTED_TOKEN", `Block scalar header includes extra characters: ${n}`);
      let c2 = false, u2 = "", f2 = n.length;
      for (let d2 = 1; d2 < e2.length; ++d2) {
        let g2 = e2[d2];
        switch (g2.type) {
          case "space":
            c2 = true;
          case "newline":
            f2 += g2.source.length;
            break;
          case "comment":
            i && !c2 && r2(g2, "MISSING_CHAR", "Comments must be separated from other tokens by white space characters"), f2 += g2.source.length, u2 = g2.source.substring(1);
            break;
          case "error":
            r2(g2, "UNEXPECTED_TOKEN", g2.message), f2 += g2.source.length;
            break;
          default: {
            let m2 = `Unexpected token in block scalar header: ${g2.type}`;
            r2(g2, "UNEXPECTED_TOKEN", m2);
            let y2 = g2.source;
            y2 && typeof y2 == "string" && (f2 += y2.length);
          }
        }
      }
      return { mode: s2, indent: o2, chomp: a, comment: u2, length: f2 };
    }
    function cC(t) {
      let e2 = t.split(/\n( *)/), i = e2[0], r2 = i.match(/^( *)/), s2 = [r2 != null && r2[1] ? [r2[1], i.slice(r2[1].length)] : ["", i]];
      for (let o2 = 1; o2 < e2.length; o2 += 2) s2.push([e2[o2], e2[o2 + 1]]);
      return s2;
    }
    $0.resolveBlockScalar = aC;
  });
  var wu = _2((H0) => {
    var _u = De(), uC = $r();
    function fC(t, e2, i) {
      let { offset: r2, type: n, source: s2, end: o2 } = t, a, l, c2 = (d2, g2, m2) => i(r2 + d2, g2, m2);
      switch (n) {
        case "scalar":
          a = _u.Scalar.PLAIN, l = hC(s2, c2);
          break;
        case "single-quoted-scalar":
          a = _u.Scalar.QUOTE_SINGLE, l = pC(s2, c2);
          break;
        case "double-quoted-scalar":
          a = _u.Scalar.QUOTE_DOUBLE, l = dC(s2, c2);
          break;
        default:
          return i(t, "UNEXPECTED_TOKEN", `Expected a flow scalar value, but found: ${n}`), { value: "", type: null, comment: "", range: [r2, r2 + s2.length, r2 + s2.length] };
      }
      let u2 = r2 + s2.length, f2 = uC.resolveEnd(o2, u2, e2, i);
      return { value: l, type: a, comment: f2.comment, range: [r2, u2, f2.offset] };
    }
    function hC(t, e2) {
      let i = "";
      switch (t[0]) {
        case "	":
          i = "a tab character";
          break;
        case ",":
          i = "flow indicator character ,";
          break;
        case "%":
          i = "directive indicator character %";
          break;
        case "|":
        case ">": {
          i = `block scalar indicator ${t[0]}`;
          break;
        }
        case "@":
        case "`": {
          i = `reserved character ${t[0]}`;
          break;
        }
      }
      return i && e2(0, "BAD_SCALAR_START", `Plain value cannot start with ${i}`), V0(t);
    }
    function pC(t, e2) {
      return (t[t.length - 1] !== "'" || t.length === 1) && e2(t.length, "MISSING_CHAR", "Missing closing 'quote"), V0(t.slice(1, -1)).replace(/''/g, "'");
    }
    function V0(t) {
      var l;
      let e2, i;
      try {
        e2 = new RegExp(`(.*?)(?<![ 	])[ 	]*\r?
`, "sy"), i = new RegExp(`[ 	]*(.*?)(?:(?<![ 	])[ 	]*)?\r?
`, "sy");
      } catch {
        e2 = /(.*?)[ \t]*\r?\n/sy, i = /[ \t]*(.*?)[ \t]*\r?\n/sy;
      }
      let r2 = e2.exec(t);
      if (!r2) return t;
      let n = r2[1], s2 = " ", o2 = e2.lastIndex;
      for (i.lastIndex = o2; r2 = i.exec(t); ) r2[1] === "" ? s2 === `
` ? n += s2 : s2 = `
` : (n += s2 + r2[1], s2 = " "), o2 = i.lastIndex;
      let a = /[ \t]*(.*)/sy;
      return a.lastIndex = o2, r2 = a.exec(t), n + s2 + ((l = r2 == null ? void 0 : r2[1]) != null ? l : "");
    }
    function dC(t, e2) {
      let i = "";
      for (let r2 = 1; r2 < t.length - 1; ++r2) {
        let n = t[r2];
        if (!(n === "\r" && t[r2 + 1] === `
`)) if (n === `
`) {
          let { fold: s2, offset: o2 } = mC(t, r2);
          i += s2, r2 = o2;
        } else if (n === "\\") {
          let s2 = t[++r2], o2 = gC[s2];
          if (o2) i += o2;
          else if (s2 === `
`) for (s2 = t[r2 + 1]; s2 === " " || s2 === "	"; ) s2 = t[++r2 + 1];
          else if (s2 === "\r" && t[r2 + 1] === `
`) for (s2 = t[++r2 + 1]; s2 === " " || s2 === "	"; ) s2 = t[++r2 + 1];
          else if (s2 === "x" || s2 === "u" || s2 === "U") {
            let a = { x: 2, u: 4, U: 8 }[s2];
            i += vC(t, r2 + 1, a, e2), r2 += a;
          } else {
            let a = t.substr(r2 - 1, 2);
            e2(r2 - 1, "BAD_DQ_ESCAPE", `Invalid escape sequence ${a}`), i += a;
          }
        } else if (n === " " || n === "	") {
          let s2 = r2, o2 = t[r2 + 1];
          for (; o2 === " " || o2 === "	"; ) o2 = t[++r2 + 1];
          o2 !== `
` && !(o2 === "\r" && t[r2 + 2] === `
`) && (i += r2 > s2 ? t.slice(s2, r2 + 1) : n);
        } else i += n;
      }
      return (t[t.length - 1] !== '"' || t.length === 1) && e2(t.length, "MISSING_CHAR", 'Missing closing "quote'), i;
    }
    function mC(t, e2) {
      let i = "", r2 = t[e2 + 1];
      for (; (r2 === " " || r2 === "	" || r2 === `
` || r2 === "\r") && !(r2 === "\r" && t[e2 + 2] !== `
`); ) r2 === `
` && (i += `
`), e2 += 1, r2 = t[e2 + 1];
      return i || (i = " "), { fold: i, offset: e2 };
    }
    var gC = { 0: "\0", a: "\x07", b: "\b", e: "\x1B", f: "\f", n: `
`, r: "\r", t: "	", v: "\v", N: "", _: " ", L: "\u2028", P: "\u2029", " ": " ", '"': '"', "/": "/", "\\": "\\", "	": "	" };
    function vC(t, e2, i, r2) {
      let n = t.substr(e2, i), o2 = n.length === i && /^[0-9a-fA-F]+$/.test(n) ? parseInt(n, 16) : NaN;
      if (isNaN(o2)) {
        let a = t.substr(e2 - 2, i + 2);
        return r2(e2 - 2, "BAD_DQ_ESCAPE", `Invalid escape sequence ${a}`), a;
      }
      return String.fromCodePoint(o2);
    }
    H0.resolveFlowScalar = fC;
  });
  var W0 = _2((Y0) => {
    var er = Se2(), G0 = De(), yC = bu(), bC = wu();
    function _C(t, e2, i, r2) {
      let { value: n, type: s2, comment: o2, range: a } = e2.type === "block-scalar" ? yC.resolveBlockScalar(t, e2, r2) : bC.resolveFlowScalar(e2, t.options.strict, r2), l = i ? t.directives.tagName(i.source, (f2) => r2(i, "TAG_RESOLVE_FAILED", f2)) : null, c2;
      t.options.stringKeys && t.atKey ? c2 = t.schema[er.SCALAR] : l ? c2 = wC(t.schema, n, l, i, r2) : e2.type === "scalar" ? c2 = xC(t, n, e2, r2) : c2 = t.schema[er.SCALAR];
      let u2;
      try {
        let f2 = c2.resolve(n, (d2) => r2(i != null ? i : e2, "TAG_RESOLVE_FAILED", d2), t.options);
        u2 = er.isScalar(f2) ? f2 : new G0.Scalar(f2);
      } catch (f2) {
        let d2 = f2 instanceof Error ? f2.message : String(f2);
        r2(i != null ? i : e2, "TAG_RESOLVE_FAILED", d2), u2 = new G0.Scalar(n);
      }
      return u2.range = a, u2.source = n, s2 && (u2.type = s2), l && (u2.tag = l), c2.format && (u2.format = c2.format), o2 && (u2.comment = o2), u2;
    }
    function wC(t, e2, i, r2, n) {
      var a;
      if (i === "!") return t[er.SCALAR];
      let s2 = [];
      for (let l of t.tags) if (!l.collection && l.tag === i) if (l.default && l.test) s2.push(l);
      else return l;
      for (let l of s2) if ((a = l.test) != null && a.test(e2)) return l;
      let o2 = t.knownTags[i];
      return o2 && !o2.collection ? (t.tags.push(Object.assign({}, o2, { default: false, test: void 0 })), o2) : (n(r2, "TAG_RESOLVE_FAILED", `Unresolved tag: ${i}`, i !== "tag:yaml.org,2002:str"), t[er.SCALAR]);
    }
    function xC({ atKey: t, directives: e2, schema: i }, r2, n, s2) {
      var a;
      let o2 = i.tags.find((l) => {
        var c2;
        return (l.default === true || t && l.default === "key") && ((c2 = l.test) == null ? void 0 : c2.test(r2));
      }) || i[er.SCALAR];
      if (i.compat) {
        let l = (a = i.compat.find((c2) => {
          var u2;
          return c2.default && ((u2 = c2.test) == null ? void 0 : u2.test(r2));
        })) != null ? a : i[er.SCALAR];
        if (o2.tag !== l.tag) {
          let c2 = e2.tagString(o2.tag), u2 = e2.tagString(l.tag), f2 = `Value may be parsed as either ${c2} or ${u2}`;
          s2(n, "TAG_RESOLVE_FAILED", f2, true);
        }
      }
      return o2;
    }
    Y0.composeScalar = _C;
  });
  var z0 = _2((K0) => {
    function SC(t, e2, i) {
      if (e2) {
        i === null && (i = e2.length);
        for (let r2 = i - 1; r2 >= 0; --r2) {
          let n = e2[r2];
          switch (n.type) {
            case "space":
            case "comment":
            case "newline":
              t -= n.source.length;
              continue;
          }
          for (n = e2[++r2]; (n == null ? void 0 : n.type) === "space"; ) t += n.source.length, n = e2[++r2];
          break;
        }
      }
      return t;
    }
    K0.emptyScalarPosition = SC;
  });
  var Q0 = _2((Su) => {
    var EC = gn(), kC = Se2(), OC = U0(), J0 = W0(), CC = $r(), TC = z0(), AC = { composeNode: Z0, composeEmptyNode: xu };
    function Z0(t, e2, i, r2) {
      let n = t.atKey, { spaceBefore: s2, comment: o2, anchor: a, tag: l } = i, c2, u2 = true;
      switch (e2.type) {
        case "alias":
          c2 = IC(t, e2, r2), (a || l) && r2(e2, "ALIAS_PROPS", "An alias node must not specify any properties");
          break;
        case "scalar":
        case "single-quoted-scalar":
        case "double-quoted-scalar":
        case "block-scalar":
          c2 = J0.composeScalar(t, e2, l, r2), a && (c2.anchor = a.source.substring(1));
          break;
        case "block-map":
        case "block-seq":
        case "flow-collection":
          c2 = OC.composeCollection(AC, t, e2, i, r2), a && (c2.anchor = a.source.substring(1));
          break;
        default: {
          let f2 = e2.type === "error" ? e2.message : `Unsupported token (type: ${e2.type})`;
          r2(e2, "UNEXPECTED_TOKEN", f2), c2 = xu(t, e2.offset, void 0, null, i, r2), u2 = false;
        }
      }
      return a && c2.anchor === "" && r2(a, "BAD_ALIAS", "Anchor cannot be an empty string"), n && t.options.stringKeys && (!kC.isScalar(c2) || typeof c2.value != "string" || c2.tag && c2.tag !== "tag:yaml.org,2002:str") && r2(l != null ? l : e2, "NON_STRING_KEY", "With stringKeys, all keys must be strings"), s2 && (c2.spaceBefore = true), o2 && (e2.type === "scalar" && e2.source === "" ? c2.comment = o2 : c2.commentBefore = o2), t.options.keepSourceTokens && u2 && (c2.srcToken = e2), c2;
    }
    function xu(t, e2, i, r2, { spaceBefore: n, comment: s2, anchor: o2, tag: a, end: l }, c2) {
      let u2 = { type: "scalar", offset: TC.emptyScalarPosition(e2, i, r2), indent: -1, source: "" }, f2 = J0.composeScalar(t, u2, a, c2);
      return o2 && (f2.anchor = o2.source.substring(1), f2.anchor === "" && c2(o2, "BAD_ALIAS", "Anchor cannot be an empty string")), n && (f2.spaceBefore = true), s2 && (f2.comment = s2, f2.range[2] = l), f2;
    }
    function IC({ options: t }, { offset: e2, source: i, end: r2 }, n) {
      let s2 = new EC.Alias(i.substring(1));
      s2.source === "" && n(e2, "BAD_ALIAS", "Alias cannot be an empty string"), s2.source.endsWith(":") && n(e2 + i.length - 1, "BAD_ALIAS", "Alias ending in : is ambiguous", true);
      let o2 = e2 + i.length, a = CC.resolveEnd(r2, o2, t.strict, n);
      return s2.range = [e2, o2, a.offset], a.comment && (s2.comment = a.comment), s2;
    }
    Su.composeEmptyNode = xu;
    Su.composeNode = Z0;
  });
  var tv = _2((ev) => {
    var NC = Ln(), X0 = Q0(), LC = $r(), BC = Mn();
    function RC(t, e2, { offset: i, start: r2, value: n, end: s2 }, o2) {
      let a = Object.assign({ _directives: e2 }, t), l = new NC.Document(void 0, a), c2 = { atKey: false, atRoot: true, directives: l.directives, options: l.options, schema: l.schema }, u2 = BC.resolveProps(r2, { indicator: "doc-start", next: n != null ? n : s2 == null ? void 0 : s2[0], offset: i, onError: o2, parentIndent: 0, startOnNewline: true });
      u2.found && (l.directives.docStart = true, n && (n.type === "block-map" || n.type === "block-seq") && !u2.hasNewline && o2(u2.end, "MISSING_CHAR", "Block collection cannot start on same line with directives-end marker")), l.contents = n ? X0.composeNode(c2, n, u2, o2) : X0.composeEmptyNode(c2, u2.end, r2, null, u2, o2);
      let f2 = l.contents.range[2], d2 = LC.resolveEnd(s2, f2, false, o2);
      return d2.comment && (l.comment = d2.comment), l.range = [i, f2, d2.offset], l;
    }
    ev.composeDoc = RC;
  });
  var ku = _2((nv) => {
    var PC = uc(), MC = Ln(), Fn = Pn(), iv = Se2(), FC = tv(), qC = $r();
    function qn(t) {
      if (typeof t == "number") return [t, t + 1];
      if (Array.isArray(t)) return t.length === 2 ? t : [t[0], t[1]];
      let { offset: e2, source: i } = t;
      return [e2, e2 + (typeof i == "string" ? i.length : 1)];
    }
    function rv(t) {
      var n;
      let e2 = "", i = false, r2 = false;
      for (let s2 = 0; s2 < t.length; ++s2) {
        let o2 = t[s2];
        switch (o2[0]) {
          case "#":
            e2 += (e2 === "" ? "" : r2 ? `

` : `
`) + (o2.substring(1) || " "), i = true, r2 = false;
            break;
          case "%":
            ((n = t[s2 + 1]) == null ? void 0 : n[0]) !== "#" && (s2 += 1), i = false;
            break;
          default:
            i || (r2 = true), i = false;
        }
      }
      return { comment: e2, afterEmptyLine: r2 };
    }
    var Eu = class {
      constructor(e2 = {}) {
        this.doc = null, this.atDirectives = false, this.prelude = [], this.errors = [], this.warnings = [], this.onError = (i, r2, n, s2) => {
          let o2 = qn(i);
          s2 ? this.warnings.push(new Fn.YAMLWarning(o2, r2, n)) : this.errors.push(new Fn.YAMLParseError(o2, r2, n));
        }, this.directives = new PC.Directives({ version: e2.version || "1.2" }), this.options = e2;
      }
      decorate(e2, i) {
        let { comment: r2, afterEmptyLine: n } = rv(this.prelude);
        if (r2) {
          let s2 = e2.contents;
          if (i) e2.comment = e2.comment ? `${e2.comment}
${r2}` : r2;
          else if (n || e2.directives.docStart || !s2) e2.commentBefore = r2;
          else if (iv.isCollection(s2) && !s2.flow && s2.items.length > 0) {
            let o2 = s2.items[0];
            iv.isPair(o2) && (o2 = o2.key);
            let a = o2.commentBefore;
            o2.commentBefore = a ? `${r2}
${a}` : r2;
          } else {
            let o2 = s2.commentBefore;
            s2.commentBefore = o2 ? `${r2}
${o2}` : r2;
          }
        }
        i ? (Array.prototype.push.apply(e2.errors, this.errors), Array.prototype.push.apply(e2.warnings, this.warnings)) : (e2.errors = this.errors, e2.warnings = this.warnings), this.prelude = [], this.errors = [], this.warnings = [];
      }
      streamInfo() {
        return { comment: rv(this.prelude).comment, directives: this.directives, errors: this.errors, warnings: this.warnings };
      }
      *compose(e2, i = false, r2 = -1) {
        for (let n of e2) yield* this.next(n);
        yield* this.end(i, r2);
      }
      *next(e2) {
        switch (process.env.LOG_STREAM && console.dir(e2, { depth: null }), e2.type) {
          case "directive":
            this.directives.add(e2.source, (i, r2, n) => {
              let s2 = qn(e2);
              s2[0] += i, this.onError(s2, "BAD_DIRECTIVE", r2, n);
            }), this.prelude.push(e2.source), this.atDirectives = true;
            break;
          case "document": {
            let i = FC.composeDoc(this.options, this.directives, e2, this.onError);
            this.atDirectives && !i.directives.docStart && this.onError(e2, "MISSING_CHAR", "Missing directives-end/doc-start indicator line"), this.decorate(i, false), this.doc && (yield this.doc), this.doc = i, this.atDirectives = false;
            break;
          }
          case "byte-order-mark":
          case "space":
            break;
          case "comment":
          case "newline":
            this.prelude.push(e2.source);
            break;
          case "error": {
            let i = e2.source ? `${e2.message}: ${JSON.stringify(e2.source)}` : e2.message, r2 = new Fn.YAMLParseError(qn(e2), "UNEXPECTED_TOKEN", i);
            this.atDirectives || !this.doc ? this.errors.push(r2) : this.doc.errors.push(r2);
            break;
          }
          case "doc-end": {
            if (!this.doc) {
              let r2 = "Unexpected doc-end without preceding document";
              this.errors.push(new Fn.YAMLParseError(qn(e2), "UNEXPECTED_TOKEN", r2));
              break;
            }
            this.doc.directives.docEnd = true;
            let i = qC.resolveEnd(e2.end, e2.offset + e2.source.length, this.doc.options.strict, this.onError);
            if (this.decorate(this.doc, true), i.comment) {
              let r2 = this.doc.comment;
              this.doc.comment = r2 ? `${r2}
${i.comment}` : i.comment;
            }
            this.doc.range[2] = i.offset;
            break;
          }
          default:
            this.errors.push(new Fn.YAMLParseError(qn(e2), "UNEXPECTED_TOKEN", `Unsupported token ${e2.type}`));
        }
      }
      *end(e2 = false, i = -1) {
        if (this.doc) this.decorate(this.doc, true), yield this.doc, this.doc = null;
        else if (e2) {
          let r2 = Object.assign({ _directives: this.directives }, this.options), n = new MC.Document(void 0, r2);
          this.atDirectives && this.onError(i, "MISSING_CHAR", "Missing directives-end indicator line"), n.range = [0, i, i], this.decorate(n, false), yield n;
        }
      }
    };
    nv.Composer = Eu;
  });
  var av = _2((jo) => {
    var DC = bu(), jC = wu(), UC = Pn(), sv = wn();
    function $C(t, e2 = true, i) {
      if (t) {
        let r2 = (n, s2, o2) => {
          let a = typeof n == "number" ? n : Array.isArray(n) ? n[0] : n.offset;
          if (i) i(a, s2, o2);
          else throw new UC.YAMLParseError([a, a + 1], s2, o2);
        };
        switch (t.type) {
          case "scalar":
          case "single-quoted-scalar":
          case "double-quoted-scalar":
            return jC.resolveFlowScalar(t, e2, r2);
          case "block-scalar":
            return DC.resolveBlockScalar({ options: { strict: e2 } }, t, r2);
        }
      }
      return null;
    }
    function VC(t, e2) {
      var c2;
      let { implicitKey: i = false, indent: r2, inFlow: n = false, offset: s2 = -1, type: o2 = "PLAIN" } = e2, a = sv.stringifyString({ type: o2, value: t }, { implicitKey: i, indent: r2 > 0 ? " ".repeat(r2) : "", inFlow: n, options: { blockQuote: true, lineWidth: -1 } }), l = (c2 = e2.end) != null ? c2 : [{ type: "newline", offset: -1, indent: r2, source: `
` }];
      switch (a[0]) {
        case "|":
        case ">": {
          let u2 = a.indexOf(`
`), f2 = a.substring(0, u2), d2 = a.substring(u2 + 1) + `
`, g2 = [{ type: "block-scalar-header", offset: s2, indent: r2, source: f2 }];
          return ov(g2, l) || g2.push({ type: "newline", offset: -1, indent: r2, source: `
` }), { type: "block-scalar", offset: s2, indent: r2, props: g2, source: d2 };
        }
        case '"':
          return { type: "double-quoted-scalar", offset: s2, indent: r2, source: a, end: l };
        case "'":
          return { type: "single-quoted-scalar", offset: s2, indent: r2, source: a, end: l };
        default:
          return { type: "scalar", offset: s2, indent: r2, source: a, end: l };
      }
    }
    function HC(t, e2, i = {}) {
      let { afterKey: r2 = false, implicitKey: n = false, inFlow: s2 = false, type: o2 } = i, a = "indent" in t ? t.indent : null;
      if (r2 && typeof a == "number" && (a += 2), !o2) switch (t.type) {
        case "single-quoted-scalar":
          o2 = "QUOTE_SINGLE";
          break;
        case "double-quoted-scalar":
          o2 = "QUOTE_DOUBLE";
          break;
        case "block-scalar": {
          let c2 = t.props[0];
          if (c2.type !== "block-scalar-header") throw new Error("Invalid block scalar header");
          o2 = c2.source[0] === ">" ? "BLOCK_FOLDED" : "BLOCK_LITERAL";
          break;
        }
        default:
          o2 = "PLAIN";
      }
      let l = sv.stringifyString({ type: o2, value: e2 }, { implicitKey: n || a === null, indent: a !== null && a > 0 ? " ".repeat(a) : "", inFlow: s2, options: { blockQuote: true, lineWidth: -1 } });
      switch (l[0]) {
        case "|":
        case ">":
          GC(t, l);
          break;
        case '"':
          Ou(t, l, "double-quoted-scalar");
          break;
        case "'":
          Ou(t, l, "single-quoted-scalar");
          break;
        default:
          Ou(t, l, "scalar");
      }
    }
    function GC(t, e2) {
      let i = e2.indexOf(`
`), r2 = e2.substring(0, i), n = e2.substring(i + 1) + `
`;
      if (t.type === "block-scalar") {
        let s2 = t.props[0];
        if (s2.type !== "block-scalar-header") throw new Error("Invalid block scalar header");
        s2.source = r2, t.source = n;
      } else {
        let { offset: s2 } = t, o2 = "indent" in t ? t.indent : -1, a = [{ type: "block-scalar-header", offset: s2, indent: o2, source: r2 }];
        ov(a, "end" in t ? t.end : void 0) || a.push({ type: "newline", offset: -1, indent: o2, source: `
` });
        for (let l of Object.keys(t)) l !== "type" && l !== "offset" && delete t[l];
        Object.assign(t, { type: "block-scalar", indent: o2, props: a, source: n });
      }
    }
    function ov(t, e2) {
      if (e2) for (let i of e2) switch (i.type) {
        case "space":
        case "comment":
          t.push(i);
          break;
        case "newline":
          return t.push(i), true;
      }
      return false;
    }
    function Ou(t, e2, i) {
      switch (t.type) {
        case "scalar":
        case "double-quoted-scalar":
        case "single-quoted-scalar":
          t.type = i, t.source = e2;
          break;
        case "block-scalar": {
          let r2 = t.props.slice(1), n = e2.length;
          t.props[0].type === "block-scalar-header" && (n -= t.props[0].source.length);
          for (let s2 of r2) s2.offset += n;
          delete t.props, Object.assign(t, { type: i, source: e2, end: r2 });
          break;
        }
        case "block-map":
        case "block-seq": {
          let n = { type: "newline", offset: t.offset + e2.length, indent: t.indent, source: `
` };
          delete t.items, Object.assign(t, { type: i, source: e2, end: [n] });
          break;
        }
        default: {
          let r2 = "indent" in t ? t.indent : -1, n = "end" in t && Array.isArray(t.end) ? t.end.filter((s2) => s2.type === "space" || s2.type === "comment" || s2.type === "newline") : [];
          for (let s2 of Object.keys(t)) s2 !== "type" && s2 !== "offset" && delete t[s2];
          Object.assign(t, { type: i, indent: r2, source: e2, end: n });
        }
      }
    }
    jo.createScalarToken = VC;
    jo.resolveAsScalar = $C;
    jo.setScalarValue = HC;
  });
  var cv = _2((lv) => {
    var YC = (t) => "type" in t ? $o(t) : Uo(t);
    function $o(t) {
      switch (t.type) {
        case "block-scalar": {
          let e2 = "";
          for (let i of t.props) e2 += $o(i);
          return e2 + t.source;
        }
        case "block-map":
        case "block-seq": {
          let e2 = "";
          for (let i of t.items) e2 += Uo(i);
          return e2;
        }
        case "flow-collection": {
          let e2 = t.start.source;
          for (let i of t.items) e2 += Uo(i);
          for (let i of t.end) e2 += i.source;
          return e2;
        }
        case "document": {
          let e2 = Uo(t);
          if (t.end) for (let i of t.end) e2 += i.source;
          return e2;
        }
        default: {
          let e2 = t.source;
          if ("end" in t && t.end) for (let i of t.end) e2 += i.source;
          return e2;
        }
      }
    }
    function Uo({ start: t, key: e2, sep: i, value: r2 }) {
      let n = "";
      for (let s2 of t) n += s2.source;
      if (e2 && (n += $o(e2)), i) for (let s2 of i) n += s2.source;
      return r2 && (n += $o(r2)), n;
    }
    lv.stringify = YC;
  });
  var pv = _2((hv) => {
    var Cu = Symbol("break visit"), WC = Symbol("skip children"), uv = Symbol("remove item");
    function tr(t, e2) {
      "type" in t && t.type === "document" && (t = { start: t.start, value: t.value }), fv(Object.freeze([]), t, e2);
    }
    tr.BREAK = Cu;
    tr.SKIP = WC;
    tr.REMOVE = uv;
    tr.itemAtPath = (t, e2) => {
      let i = t;
      for (let [r2, n] of e2) {
        let s2 = i == null ? void 0 : i[r2];
        if (s2 && "items" in s2) i = s2.items[n];
        else return;
      }
      return i;
    };
    tr.parentCollection = (t, e2) => {
      let i = tr.itemAtPath(t, e2.slice(0, -1)), r2 = e2[e2.length - 1][0], n = i == null ? void 0 : i[r2];
      if (n && "items" in n) return n;
      throw new Error("Parent collection not found");
    };
    function fv(t, e2, i) {
      let r2 = i(e2, t);
      if (typeof r2 == "symbol") return r2;
      for (let n of ["key", "value"]) {
        let s2 = e2[n];
        if (s2 && "items" in s2) {
          for (let o2 = 0; o2 < s2.items.length; ++o2) {
            let a = fv(Object.freeze(t.concat([[n, o2]])), s2.items[o2], i);
            if (typeof a == "number") o2 = a - 1;
            else {
              if (a === Cu) return Cu;
              a === uv && (s2.items.splice(o2, 1), o2 -= 1);
            }
          }
          typeof r2 == "function" && n === "key" && (r2 = r2(e2, t));
        }
      }
      return typeof r2 == "function" ? r2(e2, t) : r2;
    }
    hv.visit = tr;
  });
  var Vo = _2((gt) => {
    var Tu = av(), KC = cv(), zC = pv(), Au = "\uFEFF", Iu = "", Nu = "", Lu = "", JC = (t) => !!t && "items" in t, ZC = (t) => !!t && (t.type === "scalar" || t.type === "single-quoted-scalar" || t.type === "double-quoted-scalar" || t.type === "block-scalar");
    function QC(t) {
      switch (t) {
        case Au:
          return "<BOM>";
        case Iu:
          return "<DOC>";
        case Nu:
          return "<FLOW_END>";
        case Lu:
          return "<SCALAR>";
        default:
          return JSON.stringify(t);
      }
    }
    function XC(t) {
      switch (t) {
        case Au:
          return "byte-order-mark";
        case Iu:
          return "doc-mode";
        case Nu:
          return "flow-error-end";
        case Lu:
          return "scalar";
        case "---":
          return "doc-start";
        case "...":
          return "doc-end";
        case "":
        case `
`:
        case `\r
`:
          return "newline";
        case "-":
          return "seq-item-ind";
        case "?":
          return "explicit-key-ind";
        case ":":
          return "map-value-ind";
        case "{":
          return "flow-map-start";
        case "}":
          return "flow-map-end";
        case "[":
          return "flow-seq-start";
        case "]":
          return "flow-seq-end";
        case ",":
          return "comma";
      }
      switch (t[0]) {
        case " ":
        case "	":
          return "space";
        case "#":
          return "comment";
        case "%":
          return "directive-line";
        case "*":
          return "alias";
        case "&":
          return "anchor";
        case "!":
          return "tag";
        case "'":
          return "single-quoted-scalar";
        case '"':
          return "double-quoted-scalar";
        case "|":
        case ">":
          return "block-scalar-header";
      }
      return null;
    }
    gt.createScalarToken = Tu.createScalarToken;
    gt.resolveAsScalar = Tu.resolveAsScalar;
    gt.setScalarValue = Tu.setScalarValue;
    gt.stringify = KC.stringify;
    gt.visit = zC.visit;
    gt.BOM = Au;
    gt.DOCUMENT = Iu;
    gt.FLOW_END = Nu;
    gt.SCALAR = Lu;
    gt.isCollection = JC;
    gt.isScalar = ZC;
    gt.prettyToken = QC;
    gt.tokenType = XC;
  });
  var Pu = _2((mv) => {
    var Dn = Vo();
    function jt(t) {
      switch (t) {
        case void 0:
        case " ":
        case `
`:
        case "\r":
        case "	":
          return true;
        default:
          return false;
      }
    }
    var dv = new Set("0123456789ABCDEFabcdef"), eT = new Set("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()"), Ho = new Set(",[]{}"), tT = new Set(` ,[]{}
\r	`), Bu = (t) => !t || tT.has(t), Ru = class {
      constructor() {
        this.atEnd = false, this.blockScalarIndent = -1, this.blockScalarKeep = false, this.buffer = "", this.flowKey = false, this.flowLevel = 0, this.indentNext = 0, this.indentValue = 0, this.lineEndPos = null, this.next = null, this.pos = 0;
      }
      *lex(e2, i = false) {
        var n;
        if (e2) {
          if (typeof e2 != "string") throw TypeError("source is not a string");
          this.buffer = this.buffer ? this.buffer + e2 : e2, this.lineEndPos = null;
        }
        this.atEnd = !i;
        let r2 = (n = this.next) != null ? n : "stream";
        for (; r2 && (i || this.hasChars(1)); ) r2 = yield* this.parseNext(r2);
      }
      atLineEnd() {
        let e2 = this.pos, i = this.buffer[e2];
        for (; i === " " || i === "	"; ) i = this.buffer[++e2];
        return !i || i === "#" || i === `
` ? true : i === "\r" ? this.buffer[e2 + 1] === `
` : false;
      }
      charAt(e2) {
        return this.buffer[this.pos + e2];
      }
      continueScalar(e2) {
        let i = this.buffer[e2];
        if (this.indentNext > 0) {
          let r2 = 0;
          for (; i === " "; ) i = this.buffer[++r2 + e2];
          if (i === "\r") {
            let n = this.buffer[r2 + e2 + 1];
            if (n === `
` || !n && !this.atEnd) return e2 + r2 + 1;
          }
          return i === `
` || r2 >= this.indentNext || !i && !this.atEnd ? e2 + r2 : -1;
        }
        if (i === "-" || i === ".") {
          let r2 = this.buffer.substr(e2, 3);
          if ((r2 === "---" || r2 === "...") && jt(this.buffer[e2 + 3])) return -1;
        }
        return e2;
      }
      getLine() {
        let e2 = this.lineEndPos;
        return (typeof e2 != "number" || e2 !== -1 && e2 < this.pos) && (e2 = this.buffer.indexOf(`
`, this.pos), this.lineEndPos = e2), e2 === -1 ? this.atEnd ? this.buffer.substring(this.pos) : null : (this.buffer[e2 - 1] === "\r" && (e2 -= 1), this.buffer.substring(this.pos, e2));
      }
      hasChars(e2) {
        return this.pos + e2 <= this.buffer.length;
      }
      setNext(e2) {
        return this.buffer = this.buffer.substring(this.pos), this.pos = 0, this.lineEndPos = null, this.next = e2, null;
      }
      peek(e2) {
        return this.buffer.substr(this.pos, e2);
      }
      *parseNext(e2) {
        switch (e2) {
          case "stream":
            return yield* this.parseStream();
          case "line-start":
            return yield* this.parseLineStart();
          case "block-start":
            return yield* this.parseBlockStart();
          case "doc":
            return yield* this.parseDocument();
          case "flow":
            return yield* this.parseFlowCollection();
          case "quoted-scalar":
            return yield* this.parseQuotedScalar();
          case "block-scalar":
            return yield* this.parseBlockScalar();
          case "plain-scalar":
            return yield* this.parsePlainScalar();
        }
      }
      *parseStream() {
        let e2 = this.getLine();
        if (e2 === null) return this.setNext("stream");
        if (e2[0] === Dn.BOM && (yield* this.pushCount(1), e2 = e2.substring(1)), e2[0] === "%") {
          let i = e2.length, r2 = e2.indexOf("#");
          for (; r2 !== -1; ) {
            let s2 = e2[r2 - 1];
            if (s2 === " " || s2 === "	") {
              i = r2 - 1;
              break;
            } else r2 = e2.indexOf("#", r2 + 1);
          }
          for (; ; ) {
            let s2 = e2[i - 1];
            if (s2 === " " || s2 === "	") i -= 1;
            else break;
          }
          let n = (yield* this.pushCount(i)) + (yield* this.pushSpaces(true));
          return yield* this.pushCount(e2.length - n), this.pushNewline(), "stream";
        }
        if (this.atLineEnd()) {
          let i = yield* this.pushSpaces(true);
          return yield* this.pushCount(e2.length - i), yield* this.pushNewline(), "stream";
        }
        return yield Dn.DOCUMENT, yield* this.parseLineStart();
      }
      *parseLineStart() {
        let e2 = this.charAt(0);
        if (!e2 && !this.atEnd) return this.setNext("line-start");
        if (e2 === "-" || e2 === ".") {
          if (!this.atEnd && !this.hasChars(4)) return this.setNext("line-start");
          let i = this.peek(3);
          if ((i === "---" || i === "...") && jt(this.charAt(3))) return yield* this.pushCount(3), this.indentValue = 0, this.indentNext = 0, i === "---" ? "doc" : "stream";
        }
        return this.indentValue = yield* this.pushSpaces(false), this.indentNext > this.indentValue && !jt(this.charAt(1)) && (this.indentNext = this.indentValue), yield* this.parseBlockStart();
      }
      *parseBlockStart() {
        let [e2, i] = this.peek(2);
        if (!i && !this.atEnd) return this.setNext("block-start");
        if ((e2 === "-" || e2 === "?" || e2 === ":") && jt(i)) {
          let r2 = (yield* this.pushCount(1)) + (yield* this.pushSpaces(true));
          return this.indentNext = this.indentValue + 1, this.indentValue += r2, yield* this.parseBlockStart();
        }
        return "doc";
      }
      *parseDocument() {
        yield* this.pushSpaces(true);
        let e2 = this.getLine();
        if (e2 === null) return this.setNext("doc");
        let i = yield* this.pushIndicators();
        switch (e2[i]) {
          case "#":
            yield* this.pushCount(e2.length - i);
          case void 0:
            return yield* this.pushNewline(), yield* this.parseLineStart();
          case "{":
          case "[":
            return yield* this.pushCount(1), this.flowKey = false, this.flowLevel = 1, "flow";
          case "}":
          case "]":
            return yield* this.pushCount(1), "doc";
          case "*":
            return yield* this.pushUntil(Bu), "doc";
          case '"':
          case "'":
            return yield* this.parseQuotedScalar();
          case "|":
          case ">":
            return i += yield* this.parseBlockScalarHeader(), i += yield* this.pushSpaces(true), yield* this.pushCount(e2.length - i), yield* this.pushNewline(), yield* this.parseBlockScalar();
          default:
            return yield* this.parsePlainScalar();
        }
      }
      *parseFlowCollection() {
        let e2, i, r2 = -1;
        do
          e2 = yield* this.pushNewline(), e2 > 0 ? (i = yield* this.pushSpaces(false), this.indentValue = r2 = i) : i = 0, i += yield* this.pushSpaces(true);
        while (e2 + i > 0);
        let n = this.getLine();
        if (n === null) return this.setNext("flow");
        if ((r2 !== -1 && r2 < this.indentNext && n[0] !== "#" || r2 === 0 && (n.startsWith("---") || n.startsWith("...")) && jt(n[3])) && !(r2 === this.indentNext - 1 && this.flowLevel === 1 && (n[0] === "]" || n[0] === "}"))) return this.flowLevel = 0, yield Dn.FLOW_END, yield* this.parseLineStart();
        let s2 = 0;
        for (; n[s2] === ","; ) s2 += yield* this.pushCount(1), s2 += yield* this.pushSpaces(true), this.flowKey = false;
        switch (s2 += yield* this.pushIndicators(), n[s2]) {
          case void 0:
            return "flow";
          case "#":
            return yield* this.pushCount(n.length - s2), "flow";
          case "{":
          case "[":
            return yield* this.pushCount(1), this.flowKey = false, this.flowLevel += 1, "flow";
          case "}":
          case "]":
            return yield* this.pushCount(1), this.flowKey = true, this.flowLevel -= 1, this.flowLevel ? "flow" : "doc";
          case "*":
            return yield* this.pushUntil(Bu), "flow";
          case '"':
          case "'":
            return this.flowKey = true, yield* this.parseQuotedScalar();
          case ":": {
            let o2 = this.charAt(1);
            if (this.flowKey || jt(o2) || o2 === ",") return this.flowKey = false, yield* this.pushCount(1), yield* this.pushSpaces(true), "flow";
          }
          default:
            return this.flowKey = false, yield* this.parsePlainScalar();
        }
      }
      *parseQuotedScalar() {
        let e2 = this.charAt(0), i = this.buffer.indexOf(e2, this.pos + 1);
        if (e2 === "'") for (; i !== -1 && this.buffer[i + 1] === "'"; ) i = this.buffer.indexOf("'", i + 2);
        else for (; i !== -1; ) {
          let s2 = 0;
          for (; this.buffer[i - 1 - s2] === "\\"; ) s2 += 1;
          if (s2 % 2 === 0) break;
          i = this.buffer.indexOf('"', i + 1);
        }
        let r2 = this.buffer.substring(0, i), n = r2.indexOf(`
`, this.pos);
        if (n !== -1) {
          for (; n !== -1; ) {
            let s2 = this.continueScalar(n + 1);
            if (s2 === -1) break;
            n = r2.indexOf(`
`, s2);
          }
          n !== -1 && (i = n - (r2[n - 1] === "\r" ? 2 : 1));
        }
        if (i === -1) {
          if (!this.atEnd) return this.setNext("quoted-scalar");
          i = this.buffer.length;
        }
        return yield* this.pushToIndex(i + 1, false), this.flowLevel ? "flow" : "doc";
      }
      *parseBlockScalarHeader() {
        this.blockScalarIndent = -1, this.blockScalarKeep = false;
        let e2 = this.pos;
        for (; ; ) {
          let i = this.buffer[++e2];
          if (i === "+") this.blockScalarKeep = true;
          else if (i > "0" && i <= "9") this.blockScalarIndent = Number(i) - 1;
          else if (i !== "-") break;
        }
        return yield* this.pushUntil((i) => jt(i) || i === "#");
      }
      *parseBlockScalar() {
        let e2 = this.pos - 1, i = 0, r2;
        e: for (let s2 = this.pos; r2 = this.buffer[s2]; ++s2) switch (r2) {
          case " ":
            i += 1;
            break;
          case `
`:
            e2 = s2, i = 0;
            break;
          case "\r": {
            let o2 = this.buffer[s2 + 1];
            if (!o2 && !this.atEnd) return this.setNext("block-scalar");
            if (o2 === `
`) break;
          }
          default:
            break e;
        }
        if (!r2 && !this.atEnd) return this.setNext("block-scalar");
        if (i >= this.indentNext) {
          this.blockScalarIndent === -1 ? this.indentNext = i : this.indentNext = this.blockScalarIndent + (this.indentNext === 0 ? 1 : this.indentNext);
          do {
            let s2 = this.continueScalar(e2 + 1);
            if (s2 === -1) break;
            e2 = this.buffer.indexOf(`
`, s2);
          } while (e2 !== -1);
          if (e2 === -1) {
            if (!this.atEnd) return this.setNext("block-scalar");
            e2 = this.buffer.length;
          }
        }
        let n = e2 + 1;
        for (r2 = this.buffer[n]; r2 === " "; ) r2 = this.buffer[++n];
        if (r2 === "	") {
          for (; r2 === "	" || r2 === " " || r2 === "\r" || r2 === `
`; ) r2 = this.buffer[++n];
          e2 = n - 1;
        } else if (!this.blockScalarKeep) do {
          let s2 = e2 - 1, o2 = this.buffer[s2];
          o2 === "\r" && (o2 = this.buffer[--s2]);
          let a = s2;
          for (; o2 === " "; ) o2 = this.buffer[--s2];
          if (o2 === `
` && s2 >= this.pos && s2 + 1 + i > a) e2 = s2;
          else break;
        } while (true);
        return yield Dn.SCALAR, yield* this.pushToIndex(e2 + 1, true), yield* this.parseLineStart();
      }
      *parsePlainScalar() {
        let e2 = this.flowLevel > 0, i = this.pos - 1, r2 = this.pos - 1, n;
        for (; n = this.buffer[++r2]; ) if (n === ":") {
          let s2 = this.buffer[r2 + 1];
          if (jt(s2) || e2 && Ho.has(s2)) break;
          i = r2;
        } else if (jt(n)) {
          let s2 = this.buffer[r2 + 1];
          if (n === "\r" && (s2 === `
` ? (r2 += 1, n = `
`, s2 = this.buffer[r2 + 1]) : i = r2), s2 === "#" || e2 && Ho.has(s2)) break;
          if (n === `
`) {
            let o2 = this.continueScalar(r2 + 1);
            if (o2 === -1) break;
            r2 = Math.max(r2, o2 - 2);
          }
        } else {
          if (e2 && Ho.has(n)) break;
          i = r2;
        }
        return !n && !this.atEnd ? this.setNext("plain-scalar") : (yield Dn.SCALAR, yield* this.pushToIndex(i + 1, true), e2 ? "flow" : "doc");
      }
      *pushCount(e2) {
        return e2 > 0 ? (yield this.buffer.substr(this.pos, e2), this.pos += e2, e2) : 0;
      }
      *pushToIndex(e2, i) {
        let r2 = this.buffer.slice(this.pos, e2);
        return r2 ? (yield r2, this.pos += r2.length, r2.length) : (i && (yield ""), 0);
      }
      *pushIndicators() {
        switch (this.charAt(0)) {
          case "!":
            return (yield* this.pushTag()) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
          case "&":
            return (yield* this.pushUntil(Bu)) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
          case "-":
          case "?":
          case ":": {
            let e2 = this.flowLevel > 0, i = this.charAt(1);
            if (jt(i) || e2 && Ho.has(i)) return e2 ? this.flowKey && (this.flowKey = false) : this.indentNext = this.indentValue + 1, (yield* this.pushCount(1)) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
          }
        }
        return 0;
      }
      *pushTag() {
        if (this.charAt(1) === "<") {
          let e2 = this.pos + 2, i = this.buffer[e2];
          for (; !jt(i) && i !== ">"; ) i = this.buffer[++e2];
          return yield* this.pushToIndex(i === ">" ? e2 + 1 : e2, false);
        } else {
          let e2 = this.pos + 1, i = this.buffer[e2];
          for (; i; ) if (eT.has(i)) i = this.buffer[++e2];
          else if (i === "%" && dv.has(this.buffer[e2 + 1]) && dv.has(this.buffer[e2 + 2])) i = this.buffer[e2 += 3];
          else break;
          return yield* this.pushToIndex(e2, false);
        }
      }
      *pushNewline() {
        let e2 = this.buffer[this.pos];
        return e2 === `
` ? yield* this.pushCount(1) : e2 === "\r" && this.charAt(1) === `
` ? yield* this.pushCount(2) : 0;
      }
      *pushSpaces(e2) {
        let i = this.pos - 1, r2;
        do
          r2 = this.buffer[++i];
        while (r2 === " " || e2 && r2 === "	");
        let n = i - this.pos;
        return n > 0 && (yield this.buffer.substr(this.pos, n), this.pos = i), n;
      }
      *pushUntil(e2) {
        let i = this.pos, r2 = this.buffer[i];
        for (; !e2(r2); ) r2 = this.buffer[++i];
        return yield* this.pushToIndex(i, false);
      }
    };
    mv.Lexer = Ru;
  });
  var Fu = _2((gv) => {
    var Mu = class {
      constructor() {
        this.lineStarts = [], this.addNewLine = (e2) => this.lineStarts.push(e2), this.linePos = (e2) => {
          let i = 0, r2 = this.lineStarts.length;
          for (; i < r2; ) {
            let s2 = i + r2 >> 1;
            this.lineStarts[s2] < e2 ? i = s2 + 1 : r2 = s2;
          }
          if (this.lineStarts[i] === e2) return { line: i + 1, col: 1 };
          if (i === 0) return { line: 0, col: e2 };
          let n = this.lineStarts[i - 1];
          return { line: i, col: e2 - n + 1 };
        };
      }
    };
    gv.LineCounter = Mu;
  });
  var Du = _2((wv) => {
    var vv = Vo(), iT = Pu();
    function ir(t, e2) {
      for (let i = 0; i < t.length; ++i) if (t[i].type === e2) return true;
      return false;
    }
    function yv(t) {
      for (let e2 = 0; e2 < t.length; ++e2) switch (t[e2].type) {
        case "space":
        case "comment":
        case "newline":
          break;
        default:
          return e2;
      }
      return -1;
    }
    function _v(t) {
      switch (t == null ? void 0 : t.type) {
        case "alias":
        case "scalar":
        case "single-quoted-scalar":
        case "double-quoted-scalar":
        case "flow-collection":
          return true;
        default:
          return false;
      }
    }
    function Go(t) {
      var e2;
      switch (t.type) {
        case "document":
          return t.start;
        case "block-map": {
          let i = t.items[t.items.length - 1];
          return (e2 = i.sep) != null ? e2 : i.start;
        }
        case "block-seq":
          return t.items[t.items.length - 1].start;
        default:
          return [];
      }
    }
    function Vr(t) {
      var i;
      if (t.length === 0) return [];
      let e2 = t.length;
      e: for (; --e2 >= 0; ) switch (t[e2].type) {
        case "doc-start":
        case "explicit-key-ind":
        case "map-value-ind":
        case "seq-item-ind":
        case "newline":
          break e;
      }
      for (; ((i = t[++e2]) == null ? void 0 : i.type) === "space"; ) ;
      return t.splice(e2, t.length);
    }
    function bv(t) {
      if (t.start.type === "flow-seq-start") for (let e2 of t.items) e2.sep && !e2.value && !ir(e2.start, "explicit-key-ind") && !ir(e2.sep, "map-value-ind") && (e2.key && (e2.value = e2.key), delete e2.key, _v(e2.value) ? e2.value.end ? Array.prototype.push.apply(e2.value.end, e2.sep) : e2.value.end = e2.sep : Array.prototype.push.apply(e2.start, e2.sep), delete e2.sep);
    }
    var qu = class {
      constructor(e2) {
        this.atNewLine = true, this.atScalar = false, this.indent = 0, this.offset = 0, this.onKeyLine = false, this.stack = [], this.source = "", this.type = "", this.lexer = new iT.Lexer(), this.onNewLine = e2;
      }
      *parse(e2, i = false) {
        this.onNewLine && this.offset === 0 && this.onNewLine(0);
        for (let r2 of this.lexer.lex(e2, i)) yield* this.next(r2);
        i || (yield* this.end());
      }
      *next(e2) {
        if (this.source = e2, process.env.LOG_TOKENS && console.log("|", vv.prettyToken(e2)), this.atScalar) {
          this.atScalar = false, yield* this.step(), this.offset += e2.length;
          return;
        }
        let i = vv.tokenType(e2);
        if (i) if (i === "scalar") this.atNewLine = false, this.atScalar = true, this.type = "scalar";
        else {
          switch (this.type = i, yield* this.step(), i) {
            case "newline":
              this.atNewLine = true, this.indent = 0, this.onNewLine && this.onNewLine(this.offset + e2.length);
              break;
            case "space":
              this.atNewLine && e2[0] === " " && (this.indent += e2.length);
              break;
            case "explicit-key-ind":
            case "map-value-ind":
            case "seq-item-ind":
              this.atNewLine && (this.indent += e2.length);
              break;
            case "doc-mode":
            case "flow-error-end":
              return;
            default:
              this.atNewLine = false;
          }
          this.offset += e2.length;
        }
        else {
          let r2 = `Not a YAML token: ${e2}`;
          yield* this.pop({ type: "error", offset: this.offset, message: r2, source: e2 }), this.offset += e2.length;
        }
      }
      *end() {
        for (; this.stack.length > 0; ) yield* this.pop();
      }
      get sourceToken() {
        return { type: this.type, offset: this.offset, indent: this.indent, source: this.source };
      }
      *step() {
        let e2 = this.peek(1);
        if (this.type === "doc-end" && (!e2 || e2.type !== "doc-end")) {
          for (; this.stack.length > 0; ) yield* this.pop();
          this.stack.push({ type: "doc-end", offset: this.offset, source: this.source });
          return;
        }
        if (!e2) return yield* this.stream();
        switch (e2.type) {
          case "document":
            return yield* this.document(e2);
          case "alias":
          case "scalar":
          case "single-quoted-scalar":
          case "double-quoted-scalar":
            return yield* this.scalar(e2);
          case "block-scalar":
            return yield* this.blockScalar(e2);
          case "block-map":
            return yield* this.blockMap(e2);
          case "block-seq":
            return yield* this.blockSequence(e2);
          case "flow-collection":
            return yield* this.flowCollection(e2);
          case "doc-end":
            return yield* this.documentEnd(e2);
        }
        yield* this.pop();
      }
      peek(e2) {
        return this.stack[this.stack.length - e2];
      }
      *pop(e2) {
        let i = e2 != null ? e2 : this.stack.pop();
        if (!i) yield { type: "error", offset: this.offset, source: "", message: "Tried to pop an empty stack" };
        else if (this.stack.length === 0) yield i;
        else {
          let r2 = this.peek(1);
          switch (i.type === "block-scalar" ? i.indent = "indent" in r2 ? r2.indent : 0 : i.type === "flow-collection" && r2.type === "document" && (i.indent = 0), i.type === "flow-collection" && bv(i), r2.type) {
            case "document":
              r2.value = i;
              break;
            case "block-scalar":
              r2.props.push(i);
              break;
            case "block-map": {
              let n = r2.items[r2.items.length - 1];
              if (n.value) {
                r2.items.push({ start: [], key: i, sep: [] }), this.onKeyLine = true;
                return;
              } else if (n.sep) n.value = i;
              else {
                Object.assign(n, { key: i, sep: [] }), this.onKeyLine = !n.explicitKey;
                return;
              }
              break;
            }
            case "block-seq": {
              let n = r2.items[r2.items.length - 1];
              n.value ? r2.items.push({ start: [], value: i }) : n.value = i;
              break;
            }
            case "flow-collection": {
              let n = r2.items[r2.items.length - 1];
              !n || n.value ? r2.items.push({ start: [], key: i, sep: [] }) : n.sep ? n.value = i : Object.assign(n, { key: i, sep: [] });
              return;
            }
            default:
              yield* this.pop(), yield* this.pop(i);
          }
          if ((r2.type === "document" || r2.type === "block-map" || r2.type === "block-seq") && (i.type === "block-map" || i.type === "block-seq")) {
            let n = i.items[i.items.length - 1];
            n && !n.sep && !n.value && n.start.length > 0 && yv(n.start) === -1 && (i.indent === 0 || n.start.every((s2) => s2.type !== "comment" || s2.indent < i.indent)) && (r2.type === "document" ? r2.end = n.start : r2.items.push({ start: n.start }), i.items.splice(-1, 1));
          }
        }
      }
      *stream() {
        switch (this.type) {
          case "directive-line":
            yield { type: "directive", offset: this.offset, source: this.source };
            return;
          case "byte-order-mark":
          case "space":
          case "comment":
          case "newline":
            yield this.sourceToken;
            return;
          case "doc-mode":
          case "doc-start": {
            let e2 = { type: "document", offset: this.offset, start: [] };
            this.type === "doc-start" && e2.start.push(this.sourceToken), this.stack.push(e2);
            return;
          }
        }
        yield { type: "error", offset: this.offset, message: `Unexpected ${this.type} token in YAML stream`, source: this.source };
      }
      *document(e2) {
        if (e2.value) return yield* this.lineEnd(e2);
        switch (this.type) {
          case "doc-start": {
            yv(e2.start) !== -1 ? (yield* this.pop(), yield* this.step()) : e2.start.push(this.sourceToken);
            return;
          }
          case "anchor":
          case "tag":
          case "space":
          case "comment":
          case "newline":
            e2.start.push(this.sourceToken);
            return;
        }
        let i = this.startBlockValue(e2);
        i ? this.stack.push(i) : yield { type: "error", offset: this.offset, message: `Unexpected ${this.type} token in YAML document`, source: this.source };
      }
      *scalar(e2) {
        if (this.type === "map-value-ind") {
          let i = Go(this.peek(2)), r2 = Vr(i), n;
          e2.end ? (n = e2.end, n.push(this.sourceToken), delete e2.end) : n = [this.sourceToken];
          let s2 = { type: "block-map", offset: e2.offset, indent: e2.indent, items: [{ start: r2, key: e2, sep: n }] };
          this.onKeyLine = true, this.stack[this.stack.length - 1] = s2;
        } else yield* this.lineEnd(e2);
      }
      *blockScalar(e2) {
        switch (this.type) {
          case "space":
          case "comment":
          case "newline":
            e2.props.push(this.sourceToken);
            return;
          case "scalar":
            if (e2.source = this.source, this.atNewLine = true, this.indent = 0, this.onNewLine) {
              let i = this.source.indexOf(`
`) + 1;
              for (; i !== 0; ) this.onNewLine(this.offset + i), i = this.source.indexOf(`
`, i) + 1;
            }
            yield* this.pop();
            break;
          default:
            yield* this.pop(), yield* this.step();
        }
      }
      *blockMap(e2) {
        var r2;
        let i = e2.items[e2.items.length - 1];
        switch (this.type) {
          case "newline":
            if (this.onKeyLine = false, i.value) {
              let n = "end" in i.value ? i.value.end : void 0, s2 = Array.isArray(n) ? n[n.length - 1] : void 0;
              (s2 == null ? void 0 : s2.type) === "comment" ? n == null || n.push(this.sourceToken) : e2.items.push({ start: [this.sourceToken] });
            } else i.sep ? i.sep.push(this.sourceToken) : i.start.push(this.sourceToken);
            return;
          case "space":
          case "comment":
            if (i.value) e2.items.push({ start: [this.sourceToken] });
            else if (i.sep) i.sep.push(this.sourceToken);
            else {
              if (this.atIndentedComment(i.start, e2.indent)) {
                let n = e2.items[e2.items.length - 2], s2 = (r2 = n == null ? void 0 : n.value) == null ? void 0 : r2.end;
                if (Array.isArray(s2)) {
                  Array.prototype.push.apply(s2, i.start), s2.push(this.sourceToken), e2.items.pop();
                  return;
                }
              }
              i.start.push(this.sourceToken);
            }
            return;
        }
        if (this.indent >= e2.indent) {
          let n = !this.onKeyLine && this.indent === e2.indent, s2 = n && (i.sep || i.explicitKey) && this.type !== "seq-item-ind", o2 = [];
          if (s2 && i.sep && !i.value) {
            let a = [];
            for (let l = 0; l < i.sep.length; ++l) {
              let c2 = i.sep[l];
              switch (c2.type) {
                case "newline":
                  a.push(l);
                  break;
                case "space":
                  break;
                case "comment":
                  c2.indent > e2.indent && (a.length = 0);
                  break;
                default:
                  a.length = 0;
              }
            }
            a.length >= 2 && (o2 = i.sep.splice(a[1]));
          }
          switch (this.type) {
            case "anchor":
            case "tag":
              s2 || i.value ? (o2.push(this.sourceToken), e2.items.push({ start: o2 }), this.onKeyLine = true) : i.sep ? i.sep.push(this.sourceToken) : i.start.push(this.sourceToken);
              return;
            case "explicit-key-ind":
              !i.sep && !i.explicitKey ? (i.start.push(this.sourceToken), i.explicitKey = true) : s2 || i.value ? (o2.push(this.sourceToken), e2.items.push({ start: o2, explicitKey: true })) : this.stack.push({ type: "block-map", offset: this.offset, indent: this.indent, items: [{ start: [this.sourceToken], explicitKey: true }] }), this.onKeyLine = true;
              return;
            case "map-value-ind":
              if (i.explicitKey) if (i.sep) if (i.value) e2.items.push({ start: [], key: null, sep: [this.sourceToken] });
              else if (ir(i.sep, "map-value-ind")) this.stack.push({ type: "block-map", offset: this.offset, indent: this.indent, items: [{ start: o2, key: null, sep: [this.sourceToken] }] });
              else if (_v(i.key) && !ir(i.sep, "newline")) {
                let a = Vr(i.start), l = i.key, c2 = i.sep;
                c2.push(this.sourceToken), delete i.key, delete i.sep, this.stack.push({ type: "block-map", offset: this.offset, indent: this.indent, items: [{ start: a, key: l, sep: c2 }] });
              } else o2.length > 0 ? i.sep = i.sep.concat(o2, this.sourceToken) : i.sep.push(this.sourceToken);
              else if (ir(i.start, "newline")) Object.assign(i, { key: null, sep: [this.sourceToken] });
              else {
                let a = Vr(i.start);
                this.stack.push({ type: "block-map", offset: this.offset, indent: this.indent, items: [{ start: a, key: null, sep: [this.sourceToken] }] });
              }
              else i.sep ? i.value || s2 ? e2.items.push({ start: o2, key: null, sep: [this.sourceToken] }) : ir(i.sep, "map-value-ind") ? this.stack.push({ type: "block-map", offset: this.offset, indent: this.indent, items: [{ start: [], key: null, sep: [this.sourceToken] }] }) : i.sep.push(this.sourceToken) : Object.assign(i, { key: null, sep: [this.sourceToken] });
              this.onKeyLine = true;
              return;
            case "alias":
            case "scalar":
            case "single-quoted-scalar":
            case "double-quoted-scalar": {
              let a = this.flowScalar(this.type);
              s2 || i.value ? (e2.items.push({ start: o2, key: a, sep: [] }), this.onKeyLine = true) : i.sep ? this.stack.push(a) : (Object.assign(i, { key: a, sep: [] }), this.onKeyLine = true);
              return;
            }
            default: {
              let a = this.startBlockValue(e2);
              if (a) {
                n && a.type !== "block-seq" && e2.items.push({ start: o2 }), this.stack.push(a);
                return;
              }
            }
          }
        }
        yield* this.pop(), yield* this.step();
      }
      *blockSequence(e2) {
        var r2;
        let i = e2.items[e2.items.length - 1];
        switch (this.type) {
          case "newline":
            if (i.value) {
              let n = "end" in i.value ? i.value.end : void 0, s2 = Array.isArray(n) ? n[n.length - 1] : void 0;
              (s2 == null ? void 0 : s2.type) === "comment" ? n == null || n.push(this.sourceToken) : e2.items.push({ start: [this.sourceToken] });
            } else i.start.push(this.sourceToken);
            return;
          case "space":
          case "comment":
            if (i.value) e2.items.push({ start: [this.sourceToken] });
            else {
              if (this.atIndentedComment(i.start, e2.indent)) {
                let n = e2.items[e2.items.length - 2], s2 = (r2 = n == null ? void 0 : n.value) == null ? void 0 : r2.end;
                if (Array.isArray(s2)) {
                  Array.prototype.push.apply(s2, i.start), s2.push(this.sourceToken), e2.items.pop();
                  return;
                }
              }
              i.start.push(this.sourceToken);
            }
            return;
          case "anchor":
          case "tag":
            if (i.value || this.indent <= e2.indent) break;
            i.start.push(this.sourceToken);
            return;
          case "seq-item-ind":
            if (this.indent !== e2.indent) break;
            i.value || ir(i.start, "seq-item-ind") ? e2.items.push({ start: [this.sourceToken] }) : i.start.push(this.sourceToken);
            return;
        }
        if (this.indent > e2.indent) {
          let n = this.startBlockValue(e2);
          if (n) {
            this.stack.push(n);
            return;
          }
        }
        yield* this.pop(), yield* this.step();
      }
      *flowCollection(e2) {
        let i = e2.items[e2.items.length - 1];
        if (this.type === "flow-error-end") {
          let r2;
          do
            yield* this.pop(), r2 = this.peek(1);
          while (r2 && r2.type === "flow-collection");
        } else if (e2.end.length === 0) {
          switch (this.type) {
            case "comma":
            case "explicit-key-ind":
              !i || i.sep ? e2.items.push({ start: [this.sourceToken] }) : i.start.push(this.sourceToken);
              return;
            case "map-value-ind":
              !i || i.value ? e2.items.push({ start: [], key: null, sep: [this.sourceToken] }) : i.sep ? i.sep.push(this.sourceToken) : Object.assign(i, { key: null, sep: [this.sourceToken] });
              return;
            case "space":
            case "comment":
            case "newline":
            case "anchor":
            case "tag":
              !i || i.value ? e2.items.push({ start: [this.sourceToken] }) : i.sep ? i.sep.push(this.sourceToken) : i.start.push(this.sourceToken);
              return;
            case "alias":
            case "scalar":
            case "single-quoted-scalar":
            case "double-quoted-scalar": {
              let n = this.flowScalar(this.type);
              !i || i.value ? e2.items.push({ start: [], key: n, sep: [] }) : i.sep ? this.stack.push(n) : Object.assign(i, { key: n, sep: [] });
              return;
            }
            case "flow-map-end":
            case "flow-seq-end":
              e2.end.push(this.sourceToken);
              return;
          }
          let r2 = this.startBlockValue(e2);
          r2 ? this.stack.push(r2) : (yield* this.pop(), yield* this.step());
        } else {
          let r2 = this.peek(2);
          if (r2.type === "block-map" && (this.type === "map-value-ind" && r2.indent === e2.indent || this.type === "newline" && !r2.items[r2.items.length - 1].sep)) yield* this.pop(), yield* this.step();
          else if (this.type === "map-value-ind" && r2.type !== "flow-collection") {
            let n = Go(r2), s2 = Vr(n);
            bv(e2);
            let o2 = e2.end.splice(1, e2.end.length);
            o2.push(this.sourceToken);
            let a = { type: "block-map", offset: e2.offset, indent: e2.indent, items: [{ start: s2, key: e2, sep: o2 }] };
            this.onKeyLine = true, this.stack[this.stack.length - 1] = a;
          } else yield* this.lineEnd(e2);
        }
      }
      flowScalar(e2) {
        if (this.onNewLine) {
          let i = this.source.indexOf(`
`) + 1;
          for (; i !== 0; ) this.onNewLine(this.offset + i), i = this.source.indexOf(`
`, i) + 1;
        }
        return { type: e2, offset: this.offset, indent: this.indent, source: this.source };
      }
      startBlockValue(e2) {
        switch (this.type) {
          case "alias":
          case "scalar":
          case "single-quoted-scalar":
          case "double-quoted-scalar":
            return this.flowScalar(this.type);
          case "block-scalar-header":
            return { type: "block-scalar", offset: this.offset, indent: this.indent, props: [this.sourceToken], source: "" };
          case "flow-map-start":
          case "flow-seq-start":
            return { type: "flow-collection", offset: this.offset, indent: this.indent, start: this.sourceToken, items: [], end: [] };
          case "seq-item-ind":
            return { type: "block-seq", offset: this.offset, indent: this.indent, items: [{ start: [this.sourceToken] }] };
          case "explicit-key-ind": {
            this.onKeyLine = true;
            let i = Go(e2), r2 = Vr(i);
            return r2.push(this.sourceToken), { type: "block-map", offset: this.offset, indent: this.indent, items: [{ start: r2, explicitKey: true }] };
          }
          case "map-value-ind": {
            this.onKeyLine = true;
            let i = Go(e2), r2 = Vr(i);
            return { type: "block-map", offset: this.offset, indent: this.indent, items: [{ start: r2, key: null, sep: [this.sourceToken] }] };
          }
        }
        return null;
      }
      atIndentedComment(e2, i) {
        return this.type !== "comment" || this.indent <= i ? false : e2.every((r2) => r2.type === "newline" || r2.type === "space");
      }
      *documentEnd(e2) {
        this.type !== "doc-mode" && (e2.end ? e2.end.push(this.sourceToken) : e2.end = [this.sourceToken], this.type === "newline" && (yield* this.pop()));
      }
      *lineEnd(e2) {
        switch (this.type) {
          case "comma":
          case "doc-start":
          case "doc-end":
          case "flow-seq-end":
          case "flow-map-end":
          case "map-value-ind":
            yield* this.pop(), yield* this.step();
            break;
          case "newline":
            this.onKeyLine = false;
          case "space":
          case "comment":
          default:
            e2.end ? e2.end.push(this.sourceToken) : e2.end = [this.sourceToken], this.type === "newline" && (yield* this.pop());
        }
      }
    };
    wv.Parser = qu;
  });
  var Ov = _2((Un) => {
    var xv = ku(), rT = Ln(), jn = Pn(), nT = Sc(), sT = Se2(), oT = Fu(), Sv = Du();
    function Ev(t) {
      let e2 = t.prettyErrors !== false;
      return { lineCounter: t.lineCounter || e2 && new oT.LineCounter() || null, prettyErrors: e2 };
    }
    function aT(t, e2 = {}) {
      let { lineCounter: i, prettyErrors: r2 } = Ev(e2), n = new Sv.Parser(i == null ? void 0 : i.addNewLine), s2 = new xv.Composer(e2), o2 = Array.from(s2.compose(n.parse(t)));
      if (r2 && i) for (let a of o2) a.errors.forEach(jn.prettifyError(t, i)), a.warnings.forEach(jn.prettifyError(t, i));
      return o2.length > 0 ? o2 : Object.assign([], { empty: true }, s2.streamInfo());
    }
    function kv(t, e2 = {}) {
      let { lineCounter: i, prettyErrors: r2 } = Ev(e2), n = new Sv.Parser(i == null ? void 0 : i.addNewLine), s2 = new xv.Composer(e2), o2 = null;
      for (let a of s2.compose(n.parse(t), true, t.length)) if (!o2) o2 = a;
      else if (o2.options.logLevel !== "silent") {
        o2.errors.push(new jn.YAMLParseError(a.range.slice(0, 2), "MULTIPLE_DOCS", "Source contains multiple documents; please use YAML.parseAllDocuments()"));
        break;
      }
      return r2 && i && (o2.errors.forEach(jn.prettifyError(t, i)), o2.warnings.forEach(jn.prettifyError(t, i))), o2;
    }
    function lT(t, e2, i) {
      let r2;
      typeof e2 == "function" ? r2 = e2 : i === void 0 && e2 && typeof e2 == "object" && (i = e2);
      let n = kv(t, i);
      if (!n) return null;
      if (n.warnings.forEach((s2) => nT.warn(n.options.logLevel, s2)), n.errors.length > 0) {
        if (n.options.logLevel !== "silent") throw n.errors[0];
        n.errors = [];
      }
      return n.toJS(Object.assign({ reviver: r2 }, i));
    }
    function cT(t, e2, i) {
      var n;
      let r2 = null;
      if (typeof e2 == "function" || Array.isArray(e2) ? r2 = e2 : i === void 0 && e2 && (i = e2), typeof i == "string" && (i = i.length), typeof i == "number") {
        let s2 = Math.round(i);
        i = s2 < 1 ? void 0 : s2 > 8 ? { indent: 8 } : { indent: s2 };
      }
      if (t === void 0) {
        let { keepUndefined: s2 } = (n = i != null ? i : e2) != null ? n : {};
        if (!s2) return;
      }
      return sT.isDocument(t) && !r2 ? t.toString(i) : new rT.Document(t, r2, i).toString(i);
    }
    Un.parse = lT;
    Un.parseAllDocuments = aT;
    Un.parseDocument = kv;
    Un.stringify = cT;
  });
  var Tv = _2((Oe) => {
    var uT = ku(), fT = Ln(), hT = su(), ju = Pn(), pT = gn(), ki = Se2(), dT = wi(), mT = De(), gT = Si(), vT = Ei(), yT = Vo(), bT = Pu(), _T = Fu(), wT = Du(), Yo = Ov(), Cv = hn();
    Oe.Composer = uT.Composer;
    Oe.Document = fT.Document;
    Oe.Schema = hT.Schema;
    Oe.YAMLError = ju.YAMLError;
    Oe.YAMLParseError = ju.YAMLParseError;
    Oe.YAMLWarning = ju.YAMLWarning;
    Oe.Alias = pT.Alias;
    Oe.isAlias = ki.isAlias;
    Oe.isCollection = ki.isCollection;
    Oe.isDocument = ki.isDocument;
    Oe.isMap = ki.isMap;
    Oe.isNode = ki.isNode;
    Oe.isPair = ki.isPair;
    Oe.isScalar = ki.isScalar;
    Oe.isSeq = ki.isSeq;
    Oe.Pair = dT.Pair;
    Oe.Scalar = mT.Scalar;
    Oe.YAMLMap = gT.YAMLMap;
    Oe.YAMLSeq = vT.YAMLSeq;
    Oe.CST = yT;
    Oe.Lexer = bT.Lexer;
    Oe.LineCounter = _T.LineCounter;
    Oe.Parser = wT.Parser;
    Oe.parse = Yo.parse;
    Oe.parseAllDocuments = Yo.parseAllDocuments;
    Oe.parseDocument = Yo.parseDocument;
    Oe.stringify = Yo.stringify;
    Oe.visit = Cv.visit;
    Oe.visitAsync = Cv.visitAsync;
  });
  var Lv = _2((fL, Nv) => {
    var { Duplex: xT } = require$$12;
    function Av(t) {
      t.emit("close");
    }
    function ST() {
      !this.destroyed && this._writableState.finished && this.destroy();
    }
    function Iv(t) {
      this.removeListener("error", Iv), this.destroy(), this.listenerCount("error") === 0 && this.emit("error", t);
    }
    function ET(t, e2) {
      let i = true, r2 = new xT({ ...e2, autoDestroy: false, emitClose: false, objectMode: false, writableObjectMode: false });
      return t.on("message", function(s2, o2) {
        let a = !o2 && r2._readableState.objectMode ? s2.toString() : s2;
        r2.push(a) || t.pause();
      }), t.once("error", function(s2) {
        r2.destroyed || (i = false, r2.destroy(s2));
      }), t.once("close", function() {
        r2.destroyed || r2.push(null);
      }), r2._destroy = function(n, s2) {
        if (t.readyState === t.CLOSED) {
          s2(n), process.nextTick(Av, r2);
          return;
        }
        let o2 = false;
        t.once("error", function(l) {
          o2 = true, s2(l);
        }), t.once("close", function() {
          o2 || s2(n), process.nextTick(Av, r2);
        }), i && t.terminate();
      }, r2._final = function(n) {
        if (t.readyState === t.CONNECTING) {
          t.once("open", function() {
            r2._final(n);
          });
          return;
        }
        t._socket !== null && (t._socket._writableState.finished ? (n(), r2._readableState.endEmitted && r2.destroy()) : (t._socket.once("finish", function() {
          n();
        }), t.close()));
      }, r2._read = function() {
        t.isPaused && t.resume();
      }, r2._write = function(n, s2, o2) {
        if (t.readyState === t.CONNECTING) {
          t.once("open", function() {
            r2._write(n, s2, o2);
          });
          return;
        }
        t.send(n, o2);
      }, r2.on("end", ST), r2.on("error", Iv), r2;
    }
    Nv.exports = ET;
  });
  var Oi = _2((hL, Bv) => {
    Bv.exports = { BINARY_TYPES: ["nodebuffer", "arraybuffer", "fragments"], EMPTY_BUFFER: Buffer.alloc(0), GUID: "258EAFA5-E914-47DA-95CA-C5AB0DC85B11", kForOnEventAttribute: Symbol("kIsForOnEventAttribute"), kListener: Symbol("kListener"), kStatusCode: Symbol("status-code"), kWebSocket: Symbol("websocket"), NOOP: () => {
    } };
  });
  var $n = _2((pL, Wo) => {
    var { EMPTY_BUFFER: kT } = Oi(), Uu = Buffer[Symbol.species];
    function OT(t, e2) {
      if (t.length === 0) return kT;
      if (t.length === 1) return t[0];
      let i = Buffer.allocUnsafe(e2), r2 = 0;
      for (let n = 0; n < t.length; n++) {
        let s2 = t[n];
        i.set(s2, r2), r2 += s2.length;
      }
      return r2 < e2 ? new Uu(i.buffer, i.byteOffset, r2) : i;
    }
    function Rv(t, e2, i, r2, n) {
      for (let s2 = 0; s2 < n; s2++) i[r2 + s2] = t[s2] ^ e2[s2 & 3];
    }
    function Pv(t, e2) {
      for (let i = 0; i < t.length; i++) t[i] ^= e2[i & 3];
    }
    function CT(t) {
      return t.length === t.buffer.byteLength ? t.buffer : t.buffer.slice(t.byteOffset, t.byteOffset + t.length);
    }
    function $u(t) {
      if ($u.readOnly = true, Buffer.isBuffer(t)) return t;
      let e2;
      return t instanceof ArrayBuffer ? e2 = new Uu(t) : ArrayBuffer.isView(t) ? e2 = new Uu(t.buffer, t.byteOffset, t.byteLength) : (e2 = Buffer.from(t), $u.readOnly = false), e2;
    }
    Wo.exports = { concat: OT, mask: Rv, toArrayBuffer: CT, toBuffer: $u, unmask: Pv };
    if (!process.env.WS_NO_BUFFER_UTIL) try {
      let t = require("bufferutil");
      Wo.exports.mask = function(e2, i, r2, n, s2) {
        s2 < 48 ? Rv(e2, i, r2, n, s2) : t.mask(e2, i, r2, n, s2);
      }, Wo.exports.unmask = function(e2, i) {
        e2.length < 32 ? Pv(e2, i) : t.unmask(e2, i);
      };
    } catch {
    }
  });
  var qv = _2((dL, Fv) => {
    var Mv = Symbol("kDone"), Vu = Symbol("kRun"), Hu = class {
      constructor(e2) {
        this[Mv] = () => {
          this.pending--, this[Vu]();
        }, this.concurrency = e2 || 1 / 0, this.jobs = [], this.pending = 0;
      }
      add(e2) {
        this.jobs.push(e2), this[Vu]();
      }
      [Vu]() {
        if (this.pending !== this.concurrency && this.jobs.length) {
          let e2 = this.jobs.shift();
          this.pending++, e2(this[Mv]);
        }
      }
    };
    Fv.exports = Hu;
  });
  var Gn = _2((mL, $v) => {
    var Vn = require$$13, Dv = $n(), TT = qv(), { kStatusCode: jv } = Oi(), AT = Buffer[Symbol.species], IT = Buffer.from([0, 0, 255, 255]), Jo = Symbol("permessage-deflate"), ai = Symbol("total-length"), Hn = Symbol("callback"), Ci = Symbol("buffers"), zo = Symbol("error"), Ko, Gu = class {
      constructor(e2, i, r2) {
        if (this._maxPayload = r2 | 0, this._options = e2 || {}, this._threshold = this._options.threshold !== void 0 ? this._options.threshold : 1024, this._isServer = !!i, this._deflate = null, this._inflate = null, this.params = null, !Ko) {
          let n = this._options.concurrencyLimit !== void 0 ? this._options.concurrencyLimit : 10;
          Ko = new TT(n);
        }
      }
      static get extensionName() {
        return "permessage-deflate";
      }
      offer() {
        let e2 = {};
        return this._options.serverNoContextTakeover && (e2.server_no_context_takeover = true), this._options.clientNoContextTakeover && (e2.client_no_context_takeover = true), this._options.serverMaxWindowBits && (e2.server_max_window_bits = this._options.serverMaxWindowBits), this._options.clientMaxWindowBits ? e2.client_max_window_bits = this._options.clientMaxWindowBits : this._options.clientMaxWindowBits == null && (e2.client_max_window_bits = true), e2;
      }
      accept(e2) {
        return e2 = this.normalizeParams(e2), this.params = this._isServer ? this.acceptAsServer(e2) : this.acceptAsClient(e2), this.params;
      }
      cleanup() {
        if (this._inflate && (this._inflate.close(), this._inflate = null), this._deflate) {
          let e2 = this._deflate[Hn];
          this._deflate.close(), this._deflate = null, e2 && e2(new Error("The deflate stream was closed while data was being processed"));
        }
      }
      acceptAsServer(e2) {
        let i = this._options, r2 = e2.find((n) => !(i.serverNoContextTakeover === false && n.server_no_context_takeover || n.server_max_window_bits && (i.serverMaxWindowBits === false || typeof i.serverMaxWindowBits == "number" && i.serverMaxWindowBits > n.server_max_window_bits) || typeof i.clientMaxWindowBits == "number" && !n.client_max_window_bits));
        if (!r2) throw new Error("None of the extension offers can be accepted");
        return i.serverNoContextTakeover && (r2.server_no_context_takeover = true), i.clientNoContextTakeover && (r2.client_no_context_takeover = true), typeof i.serverMaxWindowBits == "number" && (r2.server_max_window_bits = i.serverMaxWindowBits), typeof i.clientMaxWindowBits == "number" ? r2.client_max_window_bits = i.clientMaxWindowBits : (r2.client_max_window_bits === true || i.clientMaxWindowBits === false) && delete r2.client_max_window_bits, r2;
      }
      acceptAsClient(e2) {
        let i = e2[0];
        if (this._options.clientNoContextTakeover === false && i.client_no_context_takeover) throw new Error('Unexpected parameter "client_no_context_takeover"');
        if (!i.client_max_window_bits) typeof this._options.clientMaxWindowBits == "number" && (i.client_max_window_bits = this._options.clientMaxWindowBits);
        else if (this._options.clientMaxWindowBits === false || typeof this._options.clientMaxWindowBits == "number" && i.client_max_window_bits > this._options.clientMaxWindowBits) throw new Error('Unexpected or invalid parameter "client_max_window_bits"');
        return i;
      }
      normalizeParams(e2) {
        return e2.forEach((i) => {
          Object.keys(i).forEach((r2) => {
            let n = i[r2];
            if (n.length > 1) throw new Error(`Parameter "${r2}" must have only a single value`);
            if (n = n[0], r2 === "client_max_window_bits") {
              if (n !== true) {
                let s2 = +n;
                if (!Number.isInteger(s2) || s2 < 8 || s2 > 15) throw new TypeError(`Invalid value for parameter "${r2}": ${n}`);
                n = s2;
              } else if (!this._isServer) throw new TypeError(`Invalid value for parameter "${r2}": ${n}`);
            } else if (r2 === "server_max_window_bits") {
              let s2 = +n;
              if (!Number.isInteger(s2) || s2 < 8 || s2 > 15) throw new TypeError(`Invalid value for parameter "${r2}": ${n}`);
              n = s2;
            } else if (r2 === "client_no_context_takeover" || r2 === "server_no_context_takeover") {
              if (n !== true) throw new TypeError(`Invalid value for parameter "${r2}": ${n}`);
            } else throw new Error(`Unknown parameter "${r2}"`);
            i[r2] = n;
          });
        }), e2;
      }
      decompress(e2, i, r2) {
        Ko.add((n) => {
          this._decompress(e2, i, (s2, o2) => {
            n(), r2(s2, o2);
          });
        });
      }
      compress(e2, i, r2) {
        Ko.add((n) => {
          this._compress(e2, i, (s2, o2) => {
            n(), r2(s2, o2);
          });
        });
      }
      _decompress(e2, i, r2) {
        let n = this._isServer ? "client" : "server";
        if (!this._inflate) {
          let s2 = `${n}_max_window_bits`, o2 = typeof this.params[s2] != "number" ? Vn.Z_DEFAULT_WINDOWBITS : this.params[s2];
          this._inflate = Vn.createInflateRaw({ ...this._options.zlibInflateOptions, windowBits: o2 }), this._inflate[Jo] = this, this._inflate[ai] = 0, this._inflate[Ci] = [], this._inflate.on("error", LT), this._inflate.on("data", Uv);
        }
        this._inflate[Hn] = r2, this._inflate.write(e2), i && this._inflate.write(IT), this._inflate.flush(() => {
          let s2 = this._inflate[zo];
          if (s2) {
            this._inflate.close(), this._inflate = null, r2(s2);
            return;
          }
          let o2 = Dv.concat(this._inflate[Ci], this._inflate[ai]);
          this._inflate._readableState.endEmitted ? (this._inflate.close(), this._inflate = null) : (this._inflate[ai] = 0, this._inflate[Ci] = [], i && this.params[`${n}_no_context_takeover`] && this._inflate.reset()), r2(null, o2);
        });
      }
      _compress(e2, i, r2) {
        let n = this._isServer ? "server" : "client";
        if (!this._deflate) {
          let s2 = `${n}_max_window_bits`, o2 = typeof this.params[s2] != "number" ? Vn.Z_DEFAULT_WINDOWBITS : this.params[s2];
          this._deflate = Vn.createDeflateRaw({ ...this._options.zlibDeflateOptions, windowBits: o2 }), this._deflate[ai] = 0, this._deflate[Ci] = [], this._deflate.on("data", NT);
        }
        this._deflate[Hn] = r2, this._deflate.write(e2), this._deflate.flush(Vn.Z_SYNC_FLUSH, () => {
          if (!this._deflate) return;
          let s2 = Dv.concat(this._deflate[Ci], this._deflate[ai]);
          i && (s2 = new AT(s2.buffer, s2.byteOffset, s2.length - 4)), this._deflate[Hn] = null, this._deflate[ai] = 0, this._deflate[Ci] = [], i && this.params[`${n}_no_context_takeover`] && this._deflate.reset(), r2(null, s2);
        });
      }
    };
    $v.exports = Gu;
    function NT(t) {
      this[Ci].push(t), this[ai] += t.length;
    }
    function Uv(t) {
      if (this[ai] += t.length, this[Jo]._maxPayload < 1 || this[ai] <= this[Jo]._maxPayload) {
        this[Ci].push(t);
        return;
      }
      this[zo] = new RangeError("Max payload size exceeded"), this[zo].code = "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH", this[zo][jv] = 1009, this.removeListener("data", Uv), this.reset();
    }
    function LT(t) {
      this[Jo]._inflate = null, t[jv] = 1007, this[Hn](t);
    }
  });
  var Yn = _2((gL, Zo) => {
    var { isUtf8: Vv } = require$$14, BT = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0];
    function RT(t) {
      return t >= 1e3 && t <= 1014 && t !== 1004 && t !== 1005 && t !== 1006 || t >= 3e3 && t <= 4999;
    }
    function Yu(t) {
      let e2 = t.length, i = 0;
      for (; i < e2; ) if ((t[i] & 128) === 0) i++;
      else if ((t[i] & 224) === 192) {
        if (i + 1 === e2 || (t[i + 1] & 192) !== 128 || (t[i] & 254) === 192) return false;
        i += 2;
      } else if ((t[i] & 240) === 224) {
        if (i + 2 >= e2 || (t[i + 1] & 192) !== 128 || (t[i + 2] & 192) !== 128 || t[i] === 224 && (t[i + 1] & 224) === 128 || t[i] === 237 && (t[i + 1] & 224) === 160) return false;
        i += 3;
      } else if ((t[i] & 248) === 240) {
        if (i + 3 >= e2 || (t[i + 1] & 192) !== 128 || (t[i + 2] & 192) !== 128 || (t[i + 3] & 192) !== 128 || t[i] === 240 && (t[i + 1] & 240) === 128 || t[i] === 244 && t[i + 1] > 143 || t[i] > 244) return false;
        i += 4;
      } else return false;
      return true;
    }
    Zo.exports = { isValidStatusCode: RT, isValidUTF8: Yu, tokenChars: BT };
    if (Vv) Zo.exports.isValidUTF8 = function(t) {
      return t.length < 24 ? Yu(t) : Vv(t);
    };
    else if (!process.env.WS_NO_UTF_8_VALIDATE) try {
      let t = require("utf-8-validate");
      Zo.exports.isValidUTF8 = function(e2) {
        return e2.length < 32 ? Yu(e2) : t(e2);
      };
    } catch {
    }
  });
  var Zu = _2((vL, Jv) => {
    var { Writable: PT } = require$$12, Hv = Gn(), { BINARY_TYPES: MT, EMPTY_BUFFER: Gv, kStatusCode: FT, kWebSocket: qT } = Oi(), { concat: Wu, toArrayBuffer: DT, unmask: jT } = $n(), { isValidStatusCode: UT, isValidUTF8: Yv } = Yn(), Qo = Buffer[Symbol.species], Nt = 0, Wv = 1, Kv = 2, zv = 3, Ku = 4, zu = 5, Xo = 6, Ju = class extends PT {
      constructor(e2 = {}) {
        super(), this._allowSynchronousEvents = e2.allowSynchronousEvents !== void 0 ? e2.allowSynchronousEvents : true, this._binaryType = e2.binaryType || MT[0], this._extensions = e2.extensions || {}, this._isServer = !!e2.isServer, this._maxPayload = e2.maxPayload | 0, this._skipUTF8Validation = !!e2.skipUTF8Validation, this[qT] = void 0, this._bufferedBytes = 0, this._buffers = [], this._compressed = false, this._payloadLength = 0, this._mask = void 0, this._fragmented = 0, this._masked = false, this._fin = false, this._opcode = 0, this._totalPayloadLength = 0, this._messageLength = 0, this._fragments = [], this._errored = false, this._loop = false, this._state = Nt;
      }
      _write(e2, i, r2) {
        if (this._opcode === 8 && this._state == Nt) return r2();
        this._bufferedBytes += e2.length, this._buffers.push(e2), this.startLoop(r2);
      }
      consume(e2) {
        if (this._bufferedBytes -= e2, e2 === this._buffers[0].length) return this._buffers.shift();
        if (e2 < this._buffers[0].length) {
          let r2 = this._buffers[0];
          return this._buffers[0] = new Qo(r2.buffer, r2.byteOffset + e2, r2.length - e2), new Qo(r2.buffer, r2.byteOffset, e2);
        }
        let i = Buffer.allocUnsafe(e2);
        do {
          let r2 = this._buffers[0], n = i.length - e2;
          e2 >= r2.length ? i.set(this._buffers.shift(), n) : (i.set(new Uint8Array(r2.buffer, r2.byteOffset, e2), n), this._buffers[0] = new Qo(r2.buffer, r2.byteOffset + e2, r2.length - e2)), e2 -= r2.length;
        } while (e2 > 0);
        return i;
      }
      startLoop(e2) {
        this._loop = true;
        do
          switch (this._state) {
            case Nt:
              this.getInfo(e2);
              break;
            case Wv:
              this.getPayloadLength16(e2);
              break;
            case Kv:
              this.getPayloadLength64(e2);
              break;
            case zv:
              this.getMask();
              break;
            case Ku:
              this.getData(e2);
              break;
            case zu:
            case Xo:
              this._loop = false;
              return;
          }
        while (this._loop);
        this._errored || e2();
      }
      getInfo(e2) {
        if (this._bufferedBytes < 2) {
          this._loop = false;
          return;
        }
        let i = this.consume(2);
        if ((i[0] & 48) !== 0) {
          let n = this.createError(RangeError, "RSV2 and RSV3 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_2_3");
          e2(n);
          return;
        }
        let r2 = (i[0] & 64) === 64;
        if (r2 && !this._extensions[Hv.extensionName]) {
          let n = this.createError(RangeError, "RSV1 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_1");
          e2(n);
          return;
        }
        if (this._fin = (i[0] & 128) === 128, this._opcode = i[0] & 15, this._payloadLength = i[1] & 127, this._opcode === 0) {
          if (r2) {
            let n = this.createError(RangeError, "RSV1 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_1");
            e2(n);
            return;
          }
          if (!this._fragmented) {
            let n = this.createError(RangeError, "invalid opcode 0", true, 1002, "WS_ERR_INVALID_OPCODE");
            e2(n);
            return;
          }
          this._opcode = this._fragmented;
        } else if (this._opcode === 1 || this._opcode === 2) {
          if (this._fragmented) {
            let n = this.createError(RangeError, `invalid opcode ${this._opcode}`, true, 1002, "WS_ERR_INVALID_OPCODE");
            e2(n);
            return;
          }
          this._compressed = r2;
        } else if (this._opcode > 7 && this._opcode < 11) {
          if (!this._fin) {
            let n = this.createError(RangeError, "FIN must be set", true, 1002, "WS_ERR_EXPECTED_FIN");
            e2(n);
            return;
          }
          if (r2) {
            let n = this.createError(RangeError, "RSV1 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_1");
            e2(n);
            return;
          }
          if (this._payloadLength > 125 || this._opcode === 8 && this._payloadLength === 1) {
            let n = this.createError(RangeError, `invalid payload length ${this._payloadLength}`, true, 1002, "WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH");
            e2(n);
            return;
          }
        } else {
          let n = this.createError(RangeError, `invalid opcode ${this._opcode}`, true, 1002, "WS_ERR_INVALID_OPCODE");
          e2(n);
          return;
        }
        if (!this._fin && !this._fragmented && (this._fragmented = this._opcode), this._masked = (i[1] & 128) === 128, this._isServer) {
          if (!this._masked) {
            let n = this.createError(RangeError, "MASK must be set", true, 1002, "WS_ERR_EXPECTED_MASK");
            e2(n);
            return;
          }
        } else if (this._masked) {
          let n = this.createError(RangeError, "MASK must be clear", true, 1002, "WS_ERR_UNEXPECTED_MASK");
          e2(n);
          return;
        }
        this._payloadLength === 126 ? this._state = Wv : this._payloadLength === 127 ? this._state = Kv : this.haveLength(e2);
      }
      getPayloadLength16(e2) {
        if (this._bufferedBytes < 2) {
          this._loop = false;
          return;
        }
        this._payloadLength = this.consume(2).readUInt16BE(0), this.haveLength(e2);
      }
      getPayloadLength64(e2) {
        if (this._bufferedBytes < 8) {
          this._loop = false;
          return;
        }
        let i = this.consume(8), r2 = i.readUInt32BE(0);
        if (r2 > Math.pow(2, 21) - 1) {
          let n = this.createError(RangeError, "Unsupported WebSocket frame: payload length > 2^53 - 1", false, 1009, "WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH");
          e2(n);
          return;
        }
        this._payloadLength = r2 * Math.pow(2, 32) + i.readUInt32BE(4), this.haveLength(e2);
      }
      haveLength(e2) {
        if (this._payloadLength && this._opcode < 8 && (this._totalPayloadLength += this._payloadLength, this._totalPayloadLength > this._maxPayload && this._maxPayload > 0)) {
          let i = this.createError(RangeError, "Max payload size exceeded", false, 1009, "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH");
          e2(i);
          return;
        }
        this._masked ? this._state = zv : this._state = Ku;
      }
      getMask() {
        if (this._bufferedBytes < 4) {
          this._loop = false;
          return;
        }
        this._mask = this.consume(4), this._state = Ku;
      }
      getData(e2) {
        let i = Gv;
        if (this._payloadLength) {
          if (this._bufferedBytes < this._payloadLength) {
            this._loop = false;
            return;
          }
          i = this.consume(this._payloadLength), this._masked && (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0 && jT(i, this._mask);
        }
        if (this._opcode > 7) {
          this.controlMessage(i, e2);
          return;
        }
        if (this._compressed) {
          this._state = zu, this.decompress(i, e2);
          return;
        }
        i.length && (this._messageLength = this._totalPayloadLength, this._fragments.push(i)), this.dataMessage(e2);
      }
      decompress(e2, i) {
        this._extensions[Hv.extensionName].decompress(e2, this._fin, (n, s2) => {
          if (n) return i(n);
          if (s2.length) {
            if (this._messageLength += s2.length, this._messageLength > this._maxPayload && this._maxPayload > 0) {
              let o2 = this.createError(RangeError, "Max payload size exceeded", false, 1009, "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH");
              i(o2);
              return;
            }
            this._fragments.push(s2);
          }
          this.dataMessage(i), this._state === Nt && this.startLoop(i);
        });
      }
      dataMessage(e2) {
        if (!this._fin) {
          this._state = Nt;
          return;
        }
        let i = this._messageLength, r2 = this._fragments;
        if (this._totalPayloadLength = 0, this._messageLength = 0, this._fragmented = 0, this._fragments = [], this._opcode === 2) {
          let n;
          this._binaryType === "nodebuffer" ? n = Wu(r2, i) : this._binaryType === "arraybuffer" ? n = DT(Wu(r2, i)) : n = r2, this._allowSynchronousEvents ? (this.emit("message", n, true), this._state = Nt) : (this._state = Xo, setImmediate(() => {
            this.emit("message", n, true), this._state = Nt, this.startLoop(e2);
          }));
        } else {
          let n = Wu(r2, i);
          if (!this._skipUTF8Validation && !Yv(n)) {
            let s2 = this.createError(Error, "invalid UTF-8 sequence", true, 1007, "WS_ERR_INVALID_UTF8");
            e2(s2);
            return;
          }
          this._state === zu || this._allowSynchronousEvents ? (this.emit("message", n, false), this._state = Nt) : (this._state = Xo, setImmediate(() => {
            this.emit("message", n, false), this._state = Nt, this.startLoop(e2);
          }));
        }
      }
      controlMessage(e2, i) {
        if (this._opcode === 8) {
          if (e2.length === 0) this._loop = false, this.emit("conclude", 1005, Gv), this.end();
          else {
            let r2 = e2.readUInt16BE(0);
            if (!UT(r2)) {
              let s2 = this.createError(RangeError, `invalid status code ${r2}`, true, 1002, "WS_ERR_INVALID_CLOSE_CODE");
              i(s2);
              return;
            }
            let n = new Qo(e2.buffer, e2.byteOffset + 2, e2.length - 2);
            if (!this._skipUTF8Validation && !Yv(n)) {
              let s2 = this.createError(Error, "invalid UTF-8 sequence", true, 1007, "WS_ERR_INVALID_UTF8");
              i(s2);
              return;
            }
            this._loop = false, this.emit("conclude", r2, n), this.end();
          }
          this._state = Nt;
          return;
        }
        this._allowSynchronousEvents ? (this.emit(this._opcode === 9 ? "ping" : "pong", e2), this._state = Nt) : (this._state = Xo, setImmediate(() => {
          this.emit(this._opcode === 9 ? "ping" : "pong", e2), this._state = Nt, this.startLoop(i);
        }));
      }
      createError(e2, i, r2, n, s2) {
        this._loop = false, this._errored = true;
        let o2 = new e2(r2 ? `Invalid WebSocket frame: ${i}` : i);
        return Error.captureStackTrace(o2, this.createError), o2.code = s2, o2[FT] = n, o2;
      }
    };
    Jv.exports = Ju;
  });
  var Xu = _2((bL, Xv) => {
    var { Duplex: yL } = require$$12, { randomFillSync: $T } = require$$5, Zv = Gn(), { EMPTY_BUFFER: VT } = Oi(), { isValidStatusCode: HT } = Yn(), { mask: Qv, toBuffer: Hr } = $n(), Ut = Symbol("kByteLength"), GT = Buffer.alloc(4), ea = 8 * 1024, rr, Gr = ea, Qu = class t {
      constructor(e2, i, r2) {
        this._extensions = i || {}, r2 && (this._generateMask = r2, this._maskBuffer = Buffer.alloc(4)), this._socket = e2, this._firstFragment = true, this._compress = false, this._bufferedBytes = 0, this._deflating = false, this._queue = [];
      }
      static frame(e2, i) {
        let r2, n = false, s2 = 2, o2 = false;
        i.mask && (r2 = i.maskBuffer || GT, i.generateMask ? i.generateMask(r2) : (Gr === ea && (rr === void 0 && (rr = Buffer.alloc(ea)), $T(rr, 0, ea), Gr = 0), r2[0] = rr[Gr++], r2[1] = rr[Gr++], r2[2] = rr[Gr++], r2[3] = rr[Gr++]), o2 = (r2[0] | r2[1] | r2[2] | r2[3]) === 0, s2 = 6);
        let a;
        typeof e2 == "string" ? (!i.mask || o2) && i[Ut] !== void 0 ? a = i[Ut] : (e2 = Buffer.from(e2), a = e2.length) : (a = e2.length, n = i.mask && i.readOnly && !o2);
        let l = a;
        a >= 65536 ? (s2 += 8, l = 127) : a > 125 && (s2 += 2, l = 126);
        let c2 = Buffer.allocUnsafe(n ? a + s2 : s2);
        return c2[0] = i.fin ? i.opcode | 128 : i.opcode, i.rsv1 && (c2[0] |= 64), c2[1] = l, l === 126 ? c2.writeUInt16BE(a, 2) : l === 127 && (c2[2] = c2[3] = 0, c2.writeUIntBE(a, 4, 6)), i.mask ? (c2[1] |= 128, c2[s2 - 4] = r2[0], c2[s2 - 3] = r2[1], c2[s2 - 2] = r2[2], c2[s2 - 1] = r2[3], o2 ? [c2, e2] : n ? (Qv(e2, r2, c2, s2, a), [c2]) : (Qv(e2, r2, e2, 0, a), [c2, e2])) : [c2, e2];
      }
      close(e2, i, r2, n) {
        let s2;
        if (e2 === void 0) s2 = VT;
        else {
          if (typeof e2 != "number" || !HT(e2)) throw new TypeError("First argument must be a valid error code number");
          if (i === void 0 || !i.length) s2 = Buffer.allocUnsafe(2), s2.writeUInt16BE(e2, 0);
          else {
            let a = Buffer.byteLength(i);
            if (a > 123) throw new RangeError("The message must not be greater than 123 bytes");
            s2 = Buffer.allocUnsafe(2 + a), s2.writeUInt16BE(e2, 0), typeof i == "string" ? s2.write(i, 2) : s2.set(i, 2);
          }
        }
        let o2 = { [Ut]: s2.length, fin: true, generateMask: this._generateMask, mask: r2, maskBuffer: this._maskBuffer, opcode: 8, readOnly: false, rsv1: false };
        this._deflating ? this.enqueue([this.dispatch, s2, false, o2, n]) : this.sendFrame(t.frame(s2, o2), n);
      }
      ping(e2, i, r2) {
        let n, s2;
        if (typeof e2 == "string" ? (n = Buffer.byteLength(e2), s2 = false) : (e2 = Hr(e2), n = e2.length, s2 = Hr.readOnly), n > 125) throw new RangeError("The data size must not be greater than 125 bytes");
        let o2 = { [Ut]: n, fin: true, generateMask: this._generateMask, mask: i, maskBuffer: this._maskBuffer, opcode: 9, readOnly: s2, rsv1: false };
        this._deflating ? this.enqueue([this.dispatch, e2, false, o2, r2]) : this.sendFrame(t.frame(e2, o2), r2);
      }
      pong(e2, i, r2) {
        let n, s2;
        if (typeof e2 == "string" ? (n = Buffer.byteLength(e2), s2 = false) : (e2 = Hr(e2), n = e2.length, s2 = Hr.readOnly), n > 125) throw new RangeError("The data size must not be greater than 125 bytes");
        let o2 = { [Ut]: n, fin: true, generateMask: this._generateMask, mask: i, maskBuffer: this._maskBuffer, opcode: 10, readOnly: s2, rsv1: false };
        this._deflating ? this.enqueue([this.dispatch, e2, false, o2, r2]) : this.sendFrame(t.frame(e2, o2), r2);
      }
      send(e2, i, r2) {
        let n = this._extensions[Zv.extensionName], s2 = i.binary ? 2 : 1, o2 = i.compress, a, l;
        if (typeof e2 == "string" ? (a = Buffer.byteLength(e2), l = false) : (e2 = Hr(e2), a = e2.length, l = Hr.readOnly), this._firstFragment ? (this._firstFragment = false, o2 && n && n.params[n._isServer ? "server_no_context_takeover" : "client_no_context_takeover"] && (o2 = a >= n._threshold), this._compress = o2) : (o2 = false, s2 = 0), i.fin && (this._firstFragment = true), n) {
          let c2 = { [Ut]: a, fin: i.fin, generateMask: this._generateMask, mask: i.mask, maskBuffer: this._maskBuffer, opcode: s2, readOnly: l, rsv1: o2 };
          this._deflating ? this.enqueue([this.dispatch, e2, this._compress, c2, r2]) : this.dispatch(e2, this._compress, c2, r2);
        } else this.sendFrame(t.frame(e2, { [Ut]: a, fin: i.fin, generateMask: this._generateMask, mask: i.mask, maskBuffer: this._maskBuffer, opcode: s2, readOnly: l, rsv1: false }), r2);
      }
      dispatch(e2, i, r2, n) {
        if (!i) {
          this.sendFrame(t.frame(e2, r2), n);
          return;
        }
        let s2 = this._extensions[Zv.extensionName];
        this._bufferedBytes += r2[Ut], this._deflating = true, s2.compress(e2, r2.fin, (o2, a) => {
          if (this._socket.destroyed) {
            let l = new Error("The socket was closed while data was being compressed");
            typeof n == "function" && n(l);
            for (let c2 = 0; c2 < this._queue.length; c2++) {
              let u2 = this._queue[c2], f2 = u2[u2.length - 1];
              typeof f2 == "function" && f2(l);
            }
            return;
          }
          this._bufferedBytes -= r2[Ut], this._deflating = false, r2.readOnly = false, this.sendFrame(t.frame(a, r2), n), this.dequeue();
        });
      }
      dequeue() {
        for (; !this._deflating && this._queue.length; ) {
          let e2 = this._queue.shift();
          this._bufferedBytes -= e2[3][Ut], Reflect.apply(e2[0], this, e2.slice(1));
        }
      }
      enqueue(e2) {
        this._bufferedBytes += e2[3][Ut], this._queue.push(e2);
      }
      sendFrame(e2, i) {
        e2.length === 2 ? (this._socket.cork(), this._socket.write(e2[0]), this._socket.write(e2[1], i), this._socket.uncork()) : this._socket.write(e2[0], i);
      }
    };
    Xv.exports = Qu;
  });
  var ly = _2((_L, ay) => {
    var { kForOnEventAttribute: Wn, kListener: ef } = Oi(), ey = Symbol("kCode"), ty = Symbol("kData"), iy = Symbol("kError"), ry = Symbol("kMessage"), ny = Symbol("kReason"), Yr = Symbol("kTarget"), sy = Symbol("kType"), oy = Symbol("kWasClean"), li = class {
      constructor(e2) {
        this[Yr] = null, this[sy] = e2;
      }
      get target() {
        return this[Yr];
      }
      get type() {
        return this[sy];
      }
    };
    Object.defineProperty(li.prototype, "target", { enumerable: true });
    Object.defineProperty(li.prototype, "type", { enumerable: true });
    var nr = class extends li {
      constructor(e2, i = {}) {
        super(e2), this[ey] = i.code === void 0 ? 0 : i.code, this[ny] = i.reason === void 0 ? "" : i.reason, this[oy] = i.wasClean === void 0 ? false : i.wasClean;
      }
      get code() {
        return this[ey];
      }
      get reason() {
        return this[ny];
      }
      get wasClean() {
        return this[oy];
      }
    };
    Object.defineProperty(nr.prototype, "code", { enumerable: true });
    Object.defineProperty(nr.prototype, "reason", { enumerable: true });
    Object.defineProperty(nr.prototype, "wasClean", { enumerable: true });
    var Wr = class extends li {
      constructor(e2, i = {}) {
        super(e2), this[iy] = i.error === void 0 ? null : i.error, this[ry] = i.message === void 0 ? "" : i.message;
      }
      get error() {
        return this[iy];
      }
      get message() {
        return this[ry];
      }
    };
    Object.defineProperty(Wr.prototype, "error", { enumerable: true });
    Object.defineProperty(Wr.prototype, "message", { enumerable: true });
    var Kn = class extends li {
      constructor(e2, i = {}) {
        super(e2), this[ty] = i.data === void 0 ? null : i.data;
      }
      get data() {
        return this[ty];
      }
    };
    Object.defineProperty(Kn.prototype, "data", { enumerable: true });
    var YT = { addEventListener(t, e2, i = {}) {
      for (let n of this.listeners(t)) if (!i[Wn] && n[ef] === e2 && !n[Wn]) return;
      let r2;
      if (t === "message") r2 = function(s2, o2) {
        let a = new Kn("message", { data: o2 ? s2 : s2.toString() });
        a[Yr] = this, ta(e2, this, a);
      };
      else if (t === "close") r2 = function(s2, o2) {
        let a = new nr("close", { code: s2, reason: o2.toString(), wasClean: this._closeFrameReceived && this._closeFrameSent });
        a[Yr] = this, ta(e2, this, a);
      };
      else if (t === "error") r2 = function(s2) {
        let o2 = new Wr("error", { error: s2, message: s2.message });
        o2[Yr] = this, ta(e2, this, o2);
      };
      else if (t === "open") r2 = function() {
        let s2 = new li("open");
        s2[Yr] = this, ta(e2, this, s2);
      };
      else return;
      r2[Wn] = !!i[Wn], r2[ef] = e2, i.once ? this.once(t, r2) : this.on(t, r2);
    }, removeEventListener(t, e2) {
      for (let i of this.listeners(t)) if (i[ef] === e2 && !i[Wn]) {
        this.removeListener(t, i);
        break;
      }
    } };
    ay.exports = { CloseEvent: nr, ErrorEvent: Wr, Event: li, EventTarget: YT, MessageEvent: Kn };
    function ta(t, e2, i) {
      typeof t == "object" && t.handleEvent ? t.handleEvent.call(t, i) : t.call(e2, i);
    }
  });
  var tf = _2((wL, cy) => {
    var { tokenChars: zn } = Yn();
    function Zt(t, e2, i) {
      t[e2] === void 0 ? t[e2] = [i] : t[e2].push(i);
    }
    function WT(t) {
      let e2 = /* @__PURE__ */ Object.create(null), i = /* @__PURE__ */ Object.create(null), r2 = false, n = false, s2 = false, o2, a, l = -1, c2 = -1, u2 = -1, f2 = 0;
      for (; f2 < t.length; f2++) if (c2 = t.charCodeAt(f2), o2 === void 0) if (u2 === -1 && zn[c2] === 1) l === -1 && (l = f2);
      else if (f2 !== 0 && (c2 === 32 || c2 === 9)) u2 === -1 && l !== -1 && (u2 = f2);
      else if (c2 === 59 || c2 === 44) {
        if (l === -1) throw new SyntaxError(`Unexpected character at index ${f2}`);
        u2 === -1 && (u2 = f2);
        let g2 = t.slice(l, u2);
        c2 === 44 ? (Zt(e2, g2, i), i = /* @__PURE__ */ Object.create(null)) : o2 = g2, l = u2 = -1;
      } else throw new SyntaxError(`Unexpected character at index ${f2}`);
      else if (a === void 0) if (u2 === -1 && zn[c2] === 1) l === -1 && (l = f2);
      else if (c2 === 32 || c2 === 9) u2 === -1 && l !== -1 && (u2 = f2);
      else if (c2 === 59 || c2 === 44) {
        if (l === -1) throw new SyntaxError(`Unexpected character at index ${f2}`);
        u2 === -1 && (u2 = f2), Zt(i, t.slice(l, u2), true), c2 === 44 && (Zt(e2, o2, i), i = /* @__PURE__ */ Object.create(null), o2 = void 0), l = u2 = -1;
      } else if (c2 === 61 && l !== -1 && u2 === -1) a = t.slice(l, f2), l = u2 = -1;
      else throw new SyntaxError(`Unexpected character at index ${f2}`);
      else if (n) {
        if (zn[c2] !== 1) throw new SyntaxError(`Unexpected character at index ${f2}`);
        l === -1 ? l = f2 : r2 || (r2 = true), n = false;
      } else if (s2) if (zn[c2] === 1) l === -1 && (l = f2);
      else if (c2 === 34 && l !== -1) s2 = false, u2 = f2;
      else if (c2 === 92) n = true;
      else throw new SyntaxError(`Unexpected character at index ${f2}`);
      else if (c2 === 34 && t.charCodeAt(f2 - 1) === 61) s2 = true;
      else if (u2 === -1 && zn[c2] === 1) l === -1 && (l = f2);
      else if (l !== -1 && (c2 === 32 || c2 === 9)) u2 === -1 && (u2 = f2);
      else if (c2 === 59 || c2 === 44) {
        if (l === -1) throw new SyntaxError(`Unexpected character at index ${f2}`);
        u2 === -1 && (u2 = f2);
        let g2 = t.slice(l, u2);
        r2 && (g2 = g2.replace(/\\/g, ""), r2 = false), Zt(i, a, g2), c2 === 44 && (Zt(e2, o2, i), i = /* @__PURE__ */ Object.create(null), o2 = void 0), a = void 0, l = u2 = -1;
      } else throw new SyntaxError(`Unexpected character at index ${f2}`);
      if (l === -1 || s2 || c2 === 32 || c2 === 9) throw new SyntaxError("Unexpected end of input");
      u2 === -1 && (u2 = f2);
      let d2 = t.slice(l, u2);
      return o2 === void 0 ? Zt(e2, d2, i) : (a === void 0 ? Zt(i, d2, true) : r2 ? Zt(i, a, d2.replace(/\\/g, "")) : Zt(i, a, d2), Zt(e2, o2, i)), e2;
    }
    function KT(t) {
      return Object.keys(t).map((e2) => {
        let i = t[e2];
        return Array.isArray(i) || (i = [i]), i.map((r2) => [e2].concat(Object.keys(r2).map((n) => {
          let s2 = r2[n];
          return Array.isArray(s2) || (s2 = [s2]), s2.map((o2) => o2 === true ? n : `${n}=${o2}`).join("; ");
        })).join("; ")).join(", ");
      }).join(", ");
    }
    cy.exports = { format: KT, parse: WT };
  });
  var af = _2((EL, _y) => {
    var zT = require$$0$4, JT = require$$2, ZT = require$$19, hy = require$$8, QT = require$$9, { randomBytes: XT, createHash: eA } = require$$5, { Duplex: xL, Readable: SL } = require$$12, { URL: rf } = require$$6, Ti = Gn(), tA = Zu(), iA = Xu(), { BINARY_TYPES: uy, EMPTY_BUFFER: ia, GUID: rA, kForOnEventAttribute: nf, kListener: nA, kStatusCode: sA, kWebSocket: nt, NOOP: py } = Oi(), { EventTarget: { addEventListener: oA, removeEventListener: aA } } = ly(), { format: lA, parse: cA } = tf(), { toBuffer: uA } = $n(), fA = 30 * 1e3, dy = Symbol("kAborted"), sf = [8, 13], ci = ["CONNECTING", "OPEN", "CLOSING", "CLOSED"], hA = /^[!#$%&'*+\-.0-9A-Z^_`|a-z~]+$/, qe = class t extends zT {
      constructor(e2, i, r2) {
        super(), this._binaryType = uy[0], this._closeCode = 1006, this._closeFrameReceived = false, this._closeFrameSent = false, this._closeMessage = ia, this._closeTimer = null, this._extensions = {}, this._paused = false, this._protocol = "", this._readyState = t.CONNECTING, this._receiver = null, this._sender = null, this._socket = null, e2 !== null ? (this._bufferedAmount = 0, this._isServer = false, this._redirects = 0, i === void 0 ? i = [] : Array.isArray(i) || (typeof i == "object" && i !== null ? (r2 = i, i = []) : i = [i]), my(this, e2, i, r2)) : (this._autoPong = r2.autoPong, this._isServer = true);
      }
      get binaryType() {
        return this._binaryType;
      }
      set binaryType(e2) {
        uy.includes(e2) && (this._binaryType = e2, this._receiver && (this._receiver._binaryType = e2));
      }
      get bufferedAmount() {
        return this._socket ? this._socket._writableState.length + this._sender._bufferedBytes : this._bufferedAmount;
      }
      get extensions() {
        return Object.keys(this._extensions).join();
      }
      get isPaused() {
        return this._paused;
      }
      get onclose() {
        return null;
      }
      get onerror() {
        return null;
      }
      get onopen() {
        return null;
      }
      get onmessage() {
        return null;
      }
      get protocol() {
        return this._protocol;
      }
      get readyState() {
        return this._readyState;
      }
      get url() {
        return this._url;
      }
      setSocket(e2, i, r2) {
        let n = new tA({ allowSynchronousEvents: r2.allowSynchronousEvents, binaryType: this.binaryType, extensions: this._extensions, isServer: this._isServer, maxPayload: r2.maxPayload, skipUTF8Validation: r2.skipUTF8Validation });
        this._sender = new iA(e2, this._extensions, r2.generateMask), this._receiver = n, this._socket = e2, n[nt] = this, e2[nt] = this, n.on("conclude", mA), n.on("drain", gA), n.on("error", vA), n.on("message", yA), n.on("ping", bA), n.on("pong", _A), e2.setTimeout && e2.setTimeout(0), e2.setNoDelay && e2.setNoDelay(), i.length > 0 && e2.unshift(i), e2.on("close", vy), e2.on("data", na), e2.on("end", yy), e2.on("error", by), this._readyState = t.OPEN, this.emit("open");
      }
      emitClose() {
        if (!this._socket) {
          this._readyState = t.CLOSED, this.emit("close", this._closeCode, this._closeMessage);
          return;
        }
        this._extensions[Ti.extensionName] && this._extensions[Ti.extensionName].cleanup(), this._receiver.removeAllListeners(), this._readyState = t.CLOSED, this.emit("close", this._closeCode, this._closeMessage);
      }
      close(e2, i) {
        if (this.readyState !== t.CLOSED) {
          if (this.readyState === t.CONNECTING) {
            St(this, this._req, "WebSocket was closed before the connection was established");
            return;
          }
          if (this.readyState === t.CLOSING) {
            this._closeFrameSent && (this._closeFrameReceived || this._receiver._writableState.errorEmitted) && this._socket.end();
            return;
          }
          this._readyState = t.CLOSING, this._sender.close(e2, i, !this._isServer, (r2) => {
            r2 || (this._closeFrameSent = true, (this._closeFrameReceived || this._receiver._writableState.errorEmitted) && this._socket.end());
          }), this._closeTimer = setTimeout(this._socket.destroy.bind(this._socket), fA);
        }
      }
      pause() {
        this.readyState === t.CONNECTING || this.readyState === t.CLOSED || (this._paused = true, this._socket.pause());
      }
      ping(e2, i, r2) {
        if (this.readyState === t.CONNECTING) throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        if (typeof e2 == "function" ? (r2 = e2, e2 = i = void 0) : typeof i == "function" && (r2 = i, i = void 0), typeof e2 == "number" && (e2 = e2.toString()), this.readyState !== t.OPEN) {
          of(this, e2, r2);
          return;
        }
        i === void 0 && (i = !this._isServer), this._sender.ping(e2 || ia, i, r2);
      }
      pong(e2, i, r2) {
        if (this.readyState === t.CONNECTING) throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        if (typeof e2 == "function" ? (r2 = e2, e2 = i = void 0) : typeof i == "function" && (r2 = i, i = void 0), typeof e2 == "number" && (e2 = e2.toString()), this.readyState !== t.OPEN) {
          of(this, e2, r2);
          return;
        }
        i === void 0 && (i = !this._isServer), this._sender.pong(e2 || ia, i, r2);
      }
      resume() {
        this.readyState === t.CONNECTING || this.readyState === t.CLOSED || (this._paused = false, this._receiver._writableState.needDrain || this._socket.resume());
      }
      send(e2, i, r2) {
        if (this.readyState === t.CONNECTING) throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        if (typeof i == "function" && (r2 = i, i = {}), typeof e2 == "number" && (e2 = e2.toString()), this.readyState !== t.OPEN) {
          of(this, e2, r2);
          return;
        }
        let n = { binary: typeof e2 != "string", mask: !this._isServer, compress: true, fin: true, ...i };
        this._extensions[Ti.extensionName] || (n.compress = false), this._sender.send(e2 || ia, n, r2);
      }
      terminate() {
        if (this.readyState !== t.CLOSED) {
          if (this.readyState === t.CONNECTING) {
            St(this, this._req, "WebSocket was closed before the connection was established");
            return;
          }
          this._socket && (this._readyState = t.CLOSING, this._socket.destroy());
        }
      }
    };
    Object.defineProperty(qe, "CONNECTING", { enumerable: true, value: ci.indexOf("CONNECTING") });
    Object.defineProperty(qe.prototype, "CONNECTING", { enumerable: true, value: ci.indexOf("CONNECTING") });
    Object.defineProperty(qe, "OPEN", { enumerable: true, value: ci.indexOf("OPEN") });
    Object.defineProperty(qe.prototype, "OPEN", { enumerable: true, value: ci.indexOf("OPEN") });
    Object.defineProperty(qe, "CLOSING", { enumerable: true, value: ci.indexOf("CLOSING") });
    Object.defineProperty(qe.prototype, "CLOSING", { enumerable: true, value: ci.indexOf("CLOSING") });
    Object.defineProperty(qe, "CLOSED", { enumerable: true, value: ci.indexOf("CLOSED") });
    Object.defineProperty(qe.prototype, "CLOSED", { enumerable: true, value: ci.indexOf("CLOSED") });
    ["binaryType", "bufferedAmount", "extensions", "isPaused", "protocol", "readyState", "url"].forEach((t) => {
      Object.defineProperty(qe.prototype, t, { enumerable: true });
    });
    ["open", "error", "close", "message"].forEach((t) => {
      Object.defineProperty(qe.prototype, `on${t}`, { enumerable: true, get() {
        for (let e2 of this.listeners(t)) if (e2[nf]) return e2[nA];
        return null;
      }, set(e2) {
        for (let i of this.listeners(t)) if (i[nf]) {
          this.removeListener(t, i);
          break;
        }
        typeof e2 == "function" && this.addEventListener(t, e2, { [nf]: true });
      } });
    });
    qe.prototype.addEventListener = oA;
    qe.prototype.removeEventListener = aA;
    _y.exports = qe;
    function my(t, e2, i, r2) {
      let n = { allowSynchronousEvents: true, autoPong: true, protocolVersion: sf[1], maxPayload: 104857600, skipUTF8Validation: false, perMessageDeflate: true, followRedirects: false, maxRedirects: 10, ...r2, socketPath: void 0, hostname: void 0, protocol: void 0, timeout: void 0, method: "GET", host: void 0, path: void 0, port: void 0 };
      if (t._autoPong = n.autoPong, !sf.includes(n.protocolVersion)) throw new RangeError(`Unsupported protocol version: ${n.protocolVersion} (supported versions: ${sf.join(", ")})`);
      let s2;
      if (e2 instanceof rf) s2 = e2;
      else try {
        s2 = new rf(e2);
      } catch {
        throw new SyntaxError(`Invalid URL: ${e2}`);
      }
      s2.protocol === "http:" ? s2.protocol = "ws:" : s2.protocol === "https:" && (s2.protocol = "wss:"), t._url = s2.href;
      let o2 = s2.protocol === "wss:", a = s2.protocol === "ws+unix:", l;
      if (s2.protocol !== "ws:" && !o2 && !a ? l = `The URL's protocol must be one of "ws:", "wss:", "http:", "https", or "ws+unix:"` : a && !s2.pathname ? l = "The URL's pathname is empty" : s2.hash && (l = "The URL contains a fragment identifier"), l) {
        let y2 = new SyntaxError(l);
        if (t._redirects === 0) throw y2;
        ra(t, y2);
        return;
      }
      let c2 = o2 ? 443 : 80, u2 = XT(16).toString("base64"), f2 = o2 ? JT.request : ZT.request, d2 = /* @__PURE__ */ new Set(), g2;
      if (n.createConnection = n.createConnection || (o2 ? dA : pA), n.defaultPort = n.defaultPort || c2, n.port = s2.port || c2, n.host = s2.hostname.startsWith("[") ? s2.hostname.slice(1, -1) : s2.hostname, n.headers = { ...n.headers, "Sec-WebSocket-Version": n.protocolVersion, "Sec-WebSocket-Key": u2, Connection: "Upgrade", Upgrade: "websocket" }, n.path = s2.pathname + s2.search, n.timeout = n.handshakeTimeout, n.perMessageDeflate && (g2 = new Ti(n.perMessageDeflate !== true ? n.perMessageDeflate : {}, false, n.maxPayload), n.headers["Sec-WebSocket-Extensions"] = lA({ [Ti.extensionName]: g2.offer() })), i.length) {
        for (let y2 of i) {
          if (typeof y2 != "string" || !hA.test(y2) || d2.has(y2)) throw new SyntaxError("An invalid or duplicated subprotocol was specified");
          d2.add(y2);
        }
        n.headers["Sec-WebSocket-Protocol"] = i.join(",");
      }
      if (n.origin && (n.protocolVersion < 13 ? n.headers["Sec-WebSocket-Origin"] = n.origin : n.headers.Origin = n.origin), (s2.username || s2.password) && (n.auth = `${s2.username}:${s2.password}`), a) {
        let y2 = n.path.split(":");
        n.socketPath = y2[0], n.path = y2[1];
      }
      let m2;
      if (n.followRedirects) {
        if (t._redirects === 0) {
          t._originalIpc = a, t._originalSecure = o2, t._originalHostOrSocketPath = a ? n.socketPath : s2.host;
          let y2 = r2 && r2.headers;
          if (r2 = { ...r2, headers: {} }, y2) for (let [b, x2] of Object.entries(y2)) r2.headers[b.toLowerCase()] = x2;
        } else if (t.listenerCount("redirect") === 0) {
          let y2 = a ? t._originalIpc ? n.socketPath === t._originalHostOrSocketPath : false : t._originalIpc ? false : s2.host === t._originalHostOrSocketPath;
          (!y2 || t._originalSecure && !o2) && (delete n.headers.authorization, delete n.headers.cookie, y2 || delete n.headers.host, n.auth = void 0);
        }
        n.auth && !r2.headers.authorization && (r2.headers.authorization = "Basic " + Buffer.from(n.auth).toString("base64")), m2 = t._req = f2(n), t._redirects && t.emit("redirect", t.url, m2);
      } else m2 = t._req = f2(n);
      n.timeout && m2.on("timeout", () => {
        St(t, m2, "Opening handshake has timed out");
      }), m2.on("error", (y2) => {
        m2 === null || m2[dy] || (m2 = t._req = null, ra(t, y2));
      }), m2.on("response", (y2) => {
        let b = y2.headers.location, x2 = y2.statusCode;
        if (b && n.followRedirects && x2 >= 300 && x2 < 400) {
          if (++t._redirects > n.maxRedirects) {
            St(t, m2, "Maximum redirects exceeded");
            return;
          }
          m2.abort();
          let E;
          try {
            E = new rf(b, e2);
          } catch {
            let k2 = new SyntaxError(`Invalid URL: ${b}`);
            ra(t, k2);
            return;
          }
          my(t, E, i, r2);
        } else t.emit("unexpected-response", m2, y2) || St(t, m2, `Unexpected server response: ${y2.statusCode}`);
      }), m2.on("upgrade", (y2, b, x2) => {
        if (t.emit("upgrade", y2), t.readyState !== qe.CONNECTING) return;
        m2 = t._req = null;
        let E = y2.headers.upgrade;
        if (E === void 0 || E.toLowerCase() !== "websocket") {
          St(t, b, "Invalid Upgrade header");
          return;
        }
        let O2 = eA("sha1").update(u2 + rA).digest("base64");
        if (y2.headers["sec-websocket-accept"] !== O2) {
          St(t, b, "Invalid Sec-WebSocket-Accept header");
          return;
        }
        let k2 = y2.headers["sec-websocket-protocol"], S2;
        if (k2 !== void 0 ? d2.size ? d2.has(k2) || (S2 = "Server sent an invalid subprotocol") : S2 = "Server sent a subprotocol but none was requested" : d2.size && (S2 = "Server sent no subprotocol"), S2) {
          St(t, b, S2);
          return;
        }
        k2 && (t._protocol = k2);
        let R2 = y2.headers["sec-websocket-extensions"];
        if (R2 !== void 0) {
          if (!g2) {
            St(t, b, "Server sent a Sec-WebSocket-Extensions header but no extension was requested");
            return;
          }
          let T2;
          try {
            T2 = cA(R2);
          } catch {
            St(t, b, "Invalid Sec-WebSocket-Extensions header");
            return;
          }
          let A2 = Object.keys(T2);
          if (A2.length !== 1 || A2[0] !== Ti.extensionName) {
            St(t, b, "Server indicated an extension that was not requested");
            return;
          }
          try {
            g2.accept(T2[Ti.extensionName]);
          } catch {
            St(t, b, "Invalid Sec-WebSocket-Extensions header");
            return;
          }
          t._extensions[Ti.extensionName] = g2;
        }
        t.setSocket(b, x2, { allowSynchronousEvents: n.allowSynchronousEvents, generateMask: n.generateMask, maxPayload: n.maxPayload, skipUTF8Validation: n.skipUTF8Validation });
      }), n.finishRequest ? n.finishRequest(m2, t) : m2.end();
    }
    function ra(t, e2) {
      t._readyState = qe.CLOSING, t.emit("error", e2), t.emitClose();
    }
    function pA(t) {
      return t.path = t.socketPath, hy.connect(t);
    }
    function dA(t) {
      return t.path = void 0, !t.servername && t.servername !== "" && (t.servername = hy.isIP(t.host) ? "" : t.host), QT.connect(t);
    }
    function St(t, e2, i) {
      t._readyState = qe.CLOSING;
      let r2 = new Error(i);
      Error.captureStackTrace(r2, St), e2.setHeader ? (e2[dy] = true, e2.abort(), e2.socket && !e2.socket.destroyed && e2.socket.destroy(), process.nextTick(ra, t, r2)) : (e2.destroy(r2), e2.once("error", t.emit.bind(t, "error")), e2.once("close", t.emitClose.bind(t)));
    }
    function of(t, e2, i) {
      if (e2) {
        let r2 = uA(e2).length;
        t._socket ? t._sender._bufferedBytes += r2 : t._bufferedAmount += r2;
      }
      if (i) {
        let r2 = new Error(`WebSocket is not open: readyState ${t.readyState} (${ci[t.readyState]})`);
        process.nextTick(i, r2);
      }
    }
    function mA(t, e2) {
      let i = this[nt];
      i._closeFrameReceived = true, i._closeMessage = e2, i._closeCode = t, i._socket[nt] !== void 0 && (i._socket.removeListener("data", na), process.nextTick(gy, i._socket), t === 1005 ? i.close() : i.close(t, e2));
    }
    function gA() {
      let t = this[nt];
      t.isPaused || t._socket.resume();
    }
    function vA(t) {
      let e2 = this[nt];
      e2._socket[nt] !== void 0 && (e2._socket.removeListener("data", na), process.nextTick(gy, e2._socket), e2.close(t[sA])), e2.emit("error", t);
    }
    function fy() {
      this[nt].emitClose();
    }
    function yA(t, e2) {
      this[nt].emit("message", t, e2);
    }
    function bA(t) {
      let e2 = this[nt];
      e2._autoPong && e2.pong(t, !this._isServer, py), e2.emit("ping", t);
    }
    function _A(t) {
      this[nt].emit("pong", t);
    }
    function gy(t) {
      t.resume();
    }
    function vy() {
      let t = this[nt];
      this.removeListener("close", vy), this.removeListener("data", na), this.removeListener("end", yy), t._readyState = qe.CLOSING;
      let e2;
      !this._readableState.endEmitted && !t._closeFrameReceived && !t._receiver._writableState.errorEmitted && (e2 = t._socket.read()) !== null && t._receiver.write(e2), t._receiver.end(), this[nt] = void 0, clearTimeout(t._closeTimer), t._receiver._writableState.finished || t._receiver._writableState.errorEmitted ? t.emitClose() : (t._receiver.on("error", fy), t._receiver.on("finish", fy));
    }
    function na(t) {
      this[nt]._receiver.write(t) || this.pause();
    }
    function yy() {
      let t = this[nt];
      t._readyState = qe.CLOSING, t._receiver.end(), this.end();
    }
    function by() {
      let t = this[nt];
      this.removeListener("error", by), this.on("error", py), t && (t._readyState = qe.CLOSING, this.destroy());
    }
  });
  var xy = _2((kL, wy) => {
    var { tokenChars: wA } = Yn();
    function xA(t) {
      let e2 = /* @__PURE__ */ new Set(), i = -1, r2 = -1, n = 0;
      for (n; n < t.length; n++) {
        let o2 = t.charCodeAt(n);
        if (r2 === -1 && wA[o2] === 1) i === -1 && (i = n);
        else if (n !== 0 && (o2 === 32 || o2 === 9)) r2 === -1 && i !== -1 && (r2 = n);
        else if (o2 === 44) {
          if (i === -1) throw new SyntaxError(`Unexpected character at index ${n}`);
          r2 === -1 && (r2 = n);
          let a = t.slice(i, r2);
          if (e2.has(a)) throw new SyntaxError(`The "${a}" subprotocol is duplicated`);
          e2.add(a), i = r2 = -1;
        } else throw new SyntaxError(`Unexpected character at index ${n}`);
      }
      if (i === -1 || r2 !== -1) throw new SyntaxError("Unexpected end of input");
      let s2 = t.slice(i, n);
      if (e2.has(s2)) throw new SyntaxError(`The "${s2}" subprotocol is duplicated`);
      return e2.add(s2), e2;
    }
    wy.exports = { parse: xA };
  });
  var Ay = _2((CL, Ty) => {
    var SA = require$$0$4, sa = require$$19, { Duplex: OL } = require$$12, { createHash: EA } = require$$5, Sy = tf(), sr = Gn(), kA = xy(), OA = af(), { GUID: CA, kWebSocket: TA } = Oi(), AA = /^[+/0-9A-Za-z]{22}==$/, Ey = 0, ky = 1, Cy = 2, lf = class extends SA {
      constructor(e2, i) {
        if (super(), e2 = { allowSynchronousEvents: true, autoPong: true, maxPayload: 100 * 1024 * 1024, skipUTF8Validation: false, perMessageDeflate: false, handleProtocols: null, clientTracking: true, verifyClient: null, noServer: false, backlog: null, server: null, host: null, path: null, port: null, WebSocket: OA, ...e2 }, e2.port == null && !e2.server && !e2.noServer || e2.port != null && (e2.server || e2.noServer) || e2.server && e2.noServer) throw new TypeError('One and only one of the "port", "server", or "noServer" options must be specified');
        if (e2.port != null ? (this._server = sa.createServer((r2, n) => {
          let s2 = sa.STATUS_CODES[426];
          n.writeHead(426, { "Content-Length": s2.length, "Content-Type": "text/plain" }), n.end(s2);
        }), this._server.listen(e2.port, e2.host, e2.backlog, i)) : e2.server && (this._server = e2.server), this._server) {
          let r2 = this.emit.bind(this, "connection");
          this._removeListeners = IA(this._server, { listening: this.emit.bind(this, "listening"), error: this.emit.bind(this, "error"), upgrade: (n, s2, o2) => {
            this.handleUpgrade(n, s2, o2, r2);
          } });
        }
        e2.perMessageDeflate === true && (e2.perMessageDeflate = {}), e2.clientTracking && (this.clients = /* @__PURE__ */ new Set(), this._shouldEmitClose = false), this.options = e2, this._state = Ey;
      }
      address() {
        if (this.options.noServer) throw new Error('The server is operating in "noServer" mode');
        return this._server ? this._server.address() : null;
      }
      close(e2) {
        if (this._state === Cy) {
          e2 && this.once("close", () => {
            e2(new Error("The server is not running"));
          }), process.nextTick(Jn, this);
          return;
        }
        if (e2 && this.once("close", e2), this._state !== ky) if (this._state = ky, this.options.noServer || this.options.server) this._server && (this._removeListeners(), this._removeListeners = this._server = null), this.clients ? this.clients.size ? this._shouldEmitClose = true : process.nextTick(Jn, this) : process.nextTick(Jn, this);
        else {
          let i = this._server;
          this._removeListeners(), this._removeListeners = this._server = null, i.close(() => {
            Jn(this);
          });
        }
      }
      shouldHandle(e2) {
        if (this.options.path) {
          let i = e2.url.indexOf("?");
          if ((i !== -1 ? e2.url.slice(0, i) : e2.url) !== this.options.path) return false;
        }
        return true;
      }
      handleUpgrade(e2, i, r2, n) {
        i.on("error", Oy);
        let s2 = e2.headers["sec-websocket-key"], o2 = e2.headers.upgrade, a = +e2.headers["sec-websocket-version"];
        if (e2.method !== "GET") {
          or(this, e2, i, 405, "Invalid HTTP method");
          return;
        }
        if (o2 === void 0 || o2.toLowerCase() !== "websocket") {
          or(this, e2, i, 400, "Invalid Upgrade header");
          return;
        }
        if (s2 === void 0 || !AA.test(s2)) {
          or(this, e2, i, 400, "Missing or invalid Sec-WebSocket-Key header");
          return;
        }
        if (a !== 8 && a !== 13) {
          or(this, e2, i, 400, "Missing or invalid Sec-WebSocket-Version header");
          return;
        }
        if (!this.shouldHandle(e2)) {
          Zn(i, 400);
          return;
        }
        let l = e2.headers["sec-websocket-protocol"], c2 = /* @__PURE__ */ new Set();
        if (l !== void 0) try {
          c2 = kA.parse(l);
        } catch {
          or(this, e2, i, 400, "Invalid Sec-WebSocket-Protocol header");
          return;
        }
        let u2 = e2.headers["sec-websocket-extensions"], f2 = {};
        if (this.options.perMessageDeflate && u2 !== void 0) {
          let d2 = new sr(this.options.perMessageDeflate, true, this.options.maxPayload);
          try {
            let g2 = Sy.parse(u2);
            g2[sr.extensionName] && (d2.accept(g2[sr.extensionName]), f2[sr.extensionName] = d2);
          } catch {
            or(this, e2, i, 400, "Invalid or unacceptable Sec-WebSocket-Extensions header");
            return;
          }
        }
        if (this.options.verifyClient) {
          let d2 = { origin: e2.headers[`${a === 8 ? "sec-websocket-origin" : "origin"}`], secure: !!(e2.socket.authorized || e2.socket.encrypted), req: e2 };
          if (this.options.verifyClient.length === 2) {
            this.options.verifyClient(d2, (g2, m2, y2, b) => {
              if (!g2) return Zn(i, m2 || 401, y2, b);
              this.completeUpgrade(f2, s2, c2, e2, i, r2, n);
            });
            return;
          }
          if (!this.options.verifyClient(d2)) return Zn(i, 401);
        }
        this.completeUpgrade(f2, s2, c2, e2, i, r2, n);
      }
      completeUpgrade(e2, i, r2, n, s2, o2, a) {
        if (!s2.readable || !s2.writable) return s2.destroy();
        if (s2[TA]) throw new Error("server.handleUpgrade() was called more than once with the same socket, possibly due to a misconfiguration");
        if (this._state > Ey) return Zn(s2, 503);
        let c2 = ["HTTP/1.1 101 Switching Protocols", "Upgrade: websocket", "Connection: Upgrade", `Sec-WebSocket-Accept: ${EA("sha1").update(i + CA).digest("base64")}`], u2 = new this.options.WebSocket(null, void 0, this.options);
        if (r2.size) {
          let f2 = this.options.handleProtocols ? this.options.handleProtocols(r2, n) : r2.values().next().value;
          f2 && (c2.push(`Sec-WebSocket-Protocol: ${f2}`), u2._protocol = f2);
        }
        if (e2[sr.extensionName]) {
          let f2 = e2[sr.extensionName].params, d2 = Sy.format({ [sr.extensionName]: [f2] });
          c2.push(`Sec-WebSocket-Extensions: ${d2}`), u2._extensions = e2;
        }
        this.emit("headers", c2, n), s2.write(c2.concat(`\r
`).join(`\r
`)), s2.removeListener("error", Oy), u2.setSocket(s2, o2, { allowSynchronousEvents: this.options.allowSynchronousEvents, maxPayload: this.options.maxPayload, skipUTF8Validation: this.options.skipUTF8Validation }), this.clients && (this.clients.add(u2), u2.on("close", () => {
          this.clients.delete(u2), this._shouldEmitClose && !this.clients.size && process.nextTick(Jn, this);
        })), a(u2, n);
      }
    };
    Ty.exports = lf;
    function IA(t, e2) {
      for (let i of Object.keys(e2)) t.on(i, e2[i]);
      return function() {
        for (let r2 of Object.keys(e2)) t.removeListener(r2, e2[r2]);
      };
    }
    function Jn(t) {
      t._state = Cy, t.emit("close");
    }
    function Oy() {
      this.destroy();
    }
    function Zn(t, e2, i, r2) {
      i = i || sa.STATUS_CODES[e2], r2 = { Connection: "close", "Content-Type": "text/html", "Content-Length": Buffer.byteLength(i), ...r2 }, t.once("finish", t.destroy), t.end(`HTTP/1.1 ${e2} ${sa.STATUS_CODES[e2]}\r
` + Object.keys(r2).map((n) => `${n}: ${r2[n]}`).join(`\r
`) + `\r
\r
` + i);
    }
    function or(t, e2, i, r2, n) {
      if (t.listenerCount("wsClientError")) {
        let s2 = new Error(n);
        Error.captureStackTrace(s2, or), t.emit("wsClientError", s2, i, e2);
      } else Zn(i, r2, n);
    }
  });
  var By = _2((AL, Ly) => {
    var Ai = require$$20, LA = process.cwd, oa = null, BA = process.env.GRACEFUL_FS_PLATFORM || process.platform;
    process.cwd = function() {
      return oa || (oa = LA.call(process)), oa;
    };
    try {
      process.cwd();
    } catch {
    }
    typeof process.chdir == "function" && (hf = process.chdir, process.chdir = function(t) {
      oa = null, hf.call(process, t);
    }, Object.setPrototypeOf && Object.setPrototypeOf(process.chdir, hf));
    var hf;
    Ly.exports = RA;
    function RA(t) {
      Ai.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./) && e2(t), t.lutimes || i(t), t.chown = s2(t.chown), t.fchown = s2(t.fchown), t.lchown = s2(t.lchown), t.chmod = r2(t.chmod), t.fchmod = r2(t.fchmod), t.lchmod = r2(t.lchmod), t.chownSync = o2(t.chownSync), t.fchownSync = o2(t.fchownSync), t.lchownSync = o2(t.lchownSync), t.chmodSync = n(t.chmodSync), t.fchmodSync = n(t.fchmodSync), t.lchmodSync = n(t.lchmodSync), t.stat = a(t.stat), t.fstat = a(t.fstat), t.lstat = a(t.lstat), t.statSync = l(t.statSync), t.fstatSync = l(t.fstatSync), t.lstatSync = l(t.lstatSync), t.chmod && !t.lchmod && (t.lchmod = function(u2, f2, d2) {
        d2 && process.nextTick(d2);
      }, t.lchmodSync = function() {
      }), t.chown && !t.lchown && (t.lchown = function(u2, f2, d2, g2) {
        g2 && process.nextTick(g2);
      }, t.lchownSync = function() {
      }), BA === "win32" && (t.rename = typeof t.rename != "function" ? t.rename : function(u2) {
        function f2(d2, g2, m2) {
          var y2 = Date.now(), b = 0;
          u2(d2, g2, function x2(E) {
            if (E && (E.code === "EACCES" || E.code === "EPERM") && Date.now() - y2 < 6e4) {
              setTimeout(function() {
                t.stat(g2, function(O2, k2) {
                  O2 && O2.code === "ENOENT" ? u2(d2, g2, x2) : m2(E);
                });
              }, b), b < 100 && (b += 10);
              return;
            }
            m2 && m2(E);
          });
        }
        return Object.setPrototypeOf && Object.setPrototypeOf(f2, u2), f2;
      }(t.rename)), t.read = typeof t.read != "function" ? t.read : function(u2) {
        function f2(d2, g2, m2, y2, b, x2) {
          var E;
          if (x2 && typeof x2 == "function") {
            var O2 = 0;
            E = function(k2, S2, R2) {
              if (k2 && k2.code === "EAGAIN" && O2 < 10) return O2++, u2.call(t, d2, g2, m2, y2, b, E);
              x2.apply(this, arguments);
            };
          }
          return u2.call(t, d2, g2, m2, y2, b, E);
        }
        return Object.setPrototypeOf && Object.setPrototypeOf(f2, u2), f2;
      }(t.read), t.readSync = typeof t.readSync != "function" ? t.readSync : /* @__PURE__ */ function(u2) {
        return function(f2, d2, g2, m2, y2) {
          for (var b = 0; ; ) try {
            return u2.call(t, f2, d2, g2, m2, y2);
          } catch (x2) {
            if (x2.code === "EAGAIN" && b < 10) {
              b++;
              continue;
            }
            throw x2;
          }
        };
      }(t.readSync);
      function e2(u2) {
        u2.lchmod = function(f2, d2, g2) {
          u2.open(f2, Ai.O_WRONLY | Ai.O_SYMLINK, d2, function(m2, y2) {
            if (m2) {
              g2 && g2(m2);
              return;
            }
            u2.fchmod(y2, d2, function(b) {
              u2.close(y2, function(x2) {
                g2 && g2(b || x2);
              });
            });
          });
        }, u2.lchmodSync = function(f2, d2) {
          var g2 = u2.openSync(f2, Ai.O_WRONLY | Ai.O_SYMLINK, d2), m2 = true, y2;
          try {
            y2 = u2.fchmodSync(g2, d2), m2 = false;
          } finally {
            if (m2) try {
              u2.closeSync(g2);
            } catch {
            }
            else u2.closeSync(g2);
          }
          return y2;
        };
      }
      function i(u2) {
        Ai.hasOwnProperty("O_SYMLINK") && u2.futimes ? (u2.lutimes = function(f2, d2, g2, m2) {
          u2.open(f2, Ai.O_SYMLINK, function(y2, b) {
            if (y2) {
              m2 && m2(y2);
              return;
            }
            u2.futimes(b, d2, g2, function(x2) {
              u2.close(b, function(E) {
                m2 && m2(x2 || E);
              });
            });
          });
        }, u2.lutimesSync = function(f2, d2, g2) {
          var m2 = u2.openSync(f2, Ai.O_SYMLINK), y2, b = true;
          try {
            y2 = u2.futimesSync(m2, d2, g2), b = false;
          } finally {
            if (b) try {
              u2.closeSync(m2);
            } catch {
            }
            else u2.closeSync(m2);
          }
          return y2;
        }) : u2.futimes && (u2.lutimes = function(f2, d2, g2, m2) {
          m2 && process.nextTick(m2);
        }, u2.lutimesSync = function() {
        });
      }
      function r2(u2) {
        return u2 && function(f2, d2, g2) {
          return u2.call(t, f2, d2, function(m2) {
            c2(m2) && (m2 = null), g2 && g2.apply(this, arguments);
          });
        };
      }
      function n(u2) {
        return u2 && function(f2, d2) {
          try {
            return u2.call(t, f2, d2);
          } catch (g2) {
            if (!c2(g2)) throw g2;
          }
        };
      }
      function s2(u2) {
        return u2 && function(f2, d2, g2, m2) {
          return u2.call(t, f2, d2, g2, function(y2) {
            c2(y2) && (y2 = null), m2 && m2.apply(this, arguments);
          });
        };
      }
      function o2(u2) {
        return u2 && function(f2, d2, g2) {
          try {
            return u2.call(t, f2, d2, g2);
          } catch (m2) {
            if (!c2(m2)) throw m2;
          }
        };
      }
      function a(u2) {
        return u2 && function(f2, d2, g2) {
          typeof d2 == "function" && (g2 = d2, d2 = null);
          function m2(y2, b) {
            b && (b.uid < 0 && (b.uid += 4294967296), b.gid < 0 && (b.gid += 4294967296)), g2 && g2.apply(this, arguments);
          }
          return d2 ? u2.call(t, f2, d2, m2) : u2.call(t, f2, m2);
        };
      }
      function l(u2) {
        return u2 && function(f2, d2) {
          var g2 = d2 ? u2.call(t, f2, d2) : u2.call(t, f2);
          return g2 && (g2.uid < 0 && (g2.uid += 4294967296), g2.gid < 0 && (g2.gid += 4294967296)), g2;
        };
      }
      function c2(u2) {
        if (!u2 || u2.code === "ENOSYS") return true;
        var f2 = !process.getuid || process.getuid() !== 0;
        return !!(f2 && (u2.code === "EINVAL" || u2.code === "EPERM"));
      }
    }
  });
  var My = _2((IL, Py) => {
    var Ry = require$$12.Stream;
    Py.exports = PA;
    function PA(t) {
      return { ReadStream: e2, WriteStream: i };
      function e2(r2, n) {
        if (!(this instanceof e2)) return new e2(r2, n);
        Ry.call(this);
        var s2 = this;
        this.path = r2, this.fd = null, this.readable = true, this.paused = false, this.flags = "r", this.mode = 438, this.bufferSize = 64 * 1024, n = n || {};
        for (var o2 = Object.keys(n), a = 0, l = o2.length; a < l; a++) {
          var c2 = o2[a];
          this[c2] = n[c2];
        }
        if (this.encoding && this.setEncoding(this.encoding), this.start !== void 0) {
          if (typeof this.start != "number") throw TypeError("start must be a Number");
          if (this.end === void 0) this.end = 1 / 0;
          else if (typeof this.end != "number") throw TypeError("end must be a Number");
          if (this.start > this.end) throw new Error("start must be <= end");
          this.pos = this.start;
        }
        if (this.fd !== null) {
          process.nextTick(function() {
            s2._read();
          });
          return;
        }
        t.open(this.path, this.flags, this.mode, function(u2, f2) {
          if (u2) {
            s2.emit("error", u2), s2.readable = false;
            return;
          }
          s2.fd = f2, s2.emit("open", f2), s2._read();
        });
      }
      function i(r2, n) {
        if (!(this instanceof i)) return new i(r2, n);
        Ry.call(this), this.path = r2, this.fd = null, this.writable = true, this.flags = "w", this.encoding = "binary", this.mode = 438, this.bytesWritten = 0, n = n || {};
        for (var s2 = Object.keys(n), o2 = 0, a = s2.length; o2 < a; o2++) {
          var l = s2[o2];
          this[l] = n[l];
        }
        if (this.start !== void 0) {
          if (typeof this.start != "number") throw TypeError("start must be a Number");
          if (this.start < 0) throw new Error("start must be >= zero");
          this.pos = this.start;
        }
        this.busy = false, this._queue = [], this.fd === null && (this._open = t.open, this._queue.push([this._open, this.path, this.flags, this.mode, void 0]), this.flush());
      }
    }
  });
  var qy = _2((NL, Fy) => {
    Fy.exports = FA;
    var MA = Object.getPrototypeOf || function(t) {
      return t.__proto__;
    };
    function FA(t) {
      if (t === null || typeof t != "object") return t;
      if (t instanceof Object) var e2 = { __proto__: MA(t) };
      else var e2 = /* @__PURE__ */ Object.create(null);
      return Object.getOwnPropertyNames(t).forEach(function(i) {
        Object.defineProperty(e2, i, Object.getOwnPropertyDescriptor(t, i));
      }), e2;
    }
  });
  var $y = _2((LL, mf) => {
    var Me = require$$0$2, qA = By(), DA = My(), jA = qy(), aa = require$$1$2, tt, ca;
    typeof Symbol == "function" && typeof Symbol.for == "function" ? (tt = Symbol.for("graceful-fs.queue"), ca = Symbol.for("graceful-fs.previous")) : (tt = "___graceful-fs.queue", ca = "___graceful-fs.previous");
    function UA() {
    }
    function Uy(t, e2) {
      Object.defineProperty(t, tt, { get: function() {
        return e2;
      } });
    }
    var ar = UA;
    aa.debuglog ? ar = aa.debuglog("gfs4") : /\bgfs4\b/i.test(process.env.NODE_DEBUG || "") && (ar = function() {
      var t = aa.format.apply(aa, arguments);
      t = "GFS4: " + t.split(/\n/).join(`
GFS4: `), console.error(t);
    });
    Me[tt] || (Dy = commonjsGlobal[tt] || [], Uy(Me, Dy), Me.close = function(t) {
      function e2(i, r2) {
        return t.call(Me, i, function(n) {
          n || jy(), typeof r2 == "function" && r2.apply(this, arguments);
        });
      }
      return Object.defineProperty(e2, ca, { value: t }), e2;
    }(Me.close), Me.closeSync = function(t) {
      function e2(i) {
        t.apply(Me, arguments), jy();
      }
      return Object.defineProperty(e2, ca, { value: t }), e2;
    }(Me.closeSync), /\bgfs4\b/i.test(process.env.NODE_DEBUG || "") && process.on("exit", function() {
      ar(Me[tt]), require$$10$1.equal(Me[tt].length, 0);
    }));
    var Dy;
    commonjsGlobal[tt] || Uy(commonjsGlobal, Me[tt]);
    mf.exports = pf(jA(Me));
    process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !Me.__patched && (mf.exports = pf(Me), Me.__patched = true);
    function pf(t) {
      qA(t), t.gracefulify = pf, t.createReadStream = S2, t.createWriteStream = R2;
      var e2 = t.readFile;
      t.readFile = i;
      function i(C2, L2, P2) {
        return typeof L2 == "function" && (P2 = L2, L2 = null), U(C2, L2, P2);
        function U(q2, H, j, V2) {
          return e2(q2, H, function(W2) {
            W2 && (W2.code === "EMFILE" || W2.code === "ENFILE") ? Kr([U, [q2, H, j], W2, V2 || Date.now(), Date.now()]) : typeof j == "function" && j.apply(this, arguments);
          });
        }
      }
      var r2 = t.writeFile;
      t.writeFile = n;
      function n(C2, L2, P2, U) {
        return typeof P2 == "function" && (U = P2, P2 = null), q2(C2, L2, P2, U);
        function q2(H, j, V2, W2, Q2) {
          return r2(H, j, V2, function(Y2) {
            Y2 && (Y2.code === "EMFILE" || Y2.code === "ENFILE") ? Kr([q2, [H, j, V2, W2], Y2, Q2 || Date.now(), Date.now()]) : typeof W2 == "function" && W2.apply(this, arguments);
          });
        }
      }
      var s2 = t.appendFile;
      s2 && (t.appendFile = o2);
      function o2(C2, L2, P2, U) {
        return typeof P2 == "function" && (U = P2, P2 = null), q2(C2, L2, P2, U);
        function q2(H, j, V2, W2, Q2) {
          return s2(H, j, V2, function(Y2) {
            Y2 && (Y2.code === "EMFILE" || Y2.code === "ENFILE") ? Kr([q2, [H, j, V2, W2], Y2, Q2 || Date.now(), Date.now()]) : typeof W2 == "function" && W2.apply(this, arguments);
          });
        }
      }
      var a = t.copyFile;
      a && (t.copyFile = l);
      function l(C2, L2, P2, U) {
        return typeof P2 == "function" && (U = P2, P2 = 0), q2(C2, L2, P2, U);
        function q2(H, j, V2, W2, Q2) {
          return a(H, j, V2, function(Y2) {
            Y2 && (Y2.code === "EMFILE" || Y2.code === "ENFILE") ? Kr([q2, [H, j, V2, W2], Y2, Q2 || Date.now(), Date.now()]) : typeof W2 == "function" && W2.apply(this, arguments);
          });
        }
      }
      var c2 = t.readdir;
      t.readdir = f2;
      var u2 = /^v[0-5]\./;
      function f2(C2, L2, P2) {
        typeof L2 == "function" && (P2 = L2, L2 = null);
        var U = u2.test(process.version) ? function(j, V2, W2, Q2) {
          return c2(j, q2(j, V2, W2, Q2));
        } : function(j, V2, W2, Q2) {
          return c2(j, V2, q2(j, V2, W2, Q2));
        };
        return U(C2, L2, P2);
        function q2(H, j, V2, W2) {
          return function(Q2, Y2) {
            Q2 && (Q2.code === "EMFILE" || Q2.code === "ENFILE") ? Kr([U, [H, j, V2], Q2, W2 || Date.now(), Date.now()]) : (Y2 && Y2.sort && Y2.sort(), typeof V2 == "function" && V2.call(this, Q2, Y2));
          };
        }
      }
      if (process.version.substr(0, 4) === "v0.8") {
        var d2 = DA(t);
        x2 = d2.ReadStream, O2 = d2.WriteStream;
      }
      var g2 = t.ReadStream;
      g2 && (x2.prototype = Object.create(g2.prototype), x2.prototype.open = E);
      var m2 = t.WriteStream;
      m2 && (O2.prototype = Object.create(m2.prototype), O2.prototype.open = k2), Object.defineProperty(t, "ReadStream", { get: function() {
        return x2;
      }, set: function(C2) {
        x2 = C2;
      }, enumerable: true, configurable: true }), Object.defineProperty(t, "WriteStream", { get: function() {
        return O2;
      }, set: function(C2) {
        O2 = C2;
      }, enumerable: true, configurable: true });
      var y2 = x2;
      Object.defineProperty(t, "FileReadStream", { get: function() {
        return y2;
      }, set: function(C2) {
        y2 = C2;
      }, enumerable: true, configurable: true });
      var b = O2;
      Object.defineProperty(t, "FileWriteStream", { get: function() {
        return b;
      }, set: function(C2) {
        b = C2;
      }, enumerable: true, configurable: true });
      function x2(C2, L2) {
        return this instanceof x2 ? (g2.apply(this, arguments), this) : x2.apply(Object.create(x2.prototype), arguments);
      }
      function E() {
        var C2 = this;
        A2(C2.path, C2.flags, C2.mode, function(L2, P2) {
          L2 ? (C2.autoClose && C2.destroy(), C2.emit("error", L2)) : (C2.fd = P2, C2.emit("open", P2), C2.read());
        });
      }
      function O2(C2, L2) {
        return this instanceof O2 ? (m2.apply(this, arguments), this) : O2.apply(Object.create(O2.prototype), arguments);
      }
      function k2() {
        var C2 = this;
        A2(C2.path, C2.flags, C2.mode, function(L2, P2) {
          L2 ? (C2.destroy(), C2.emit("error", L2)) : (C2.fd = P2, C2.emit("open", P2));
        });
      }
      function S2(C2, L2) {
        return new t.ReadStream(C2, L2);
      }
      function R2(C2, L2) {
        return new t.WriteStream(C2, L2);
      }
      var T2 = t.open;
      t.open = A2;
      function A2(C2, L2, P2, U) {
        return typeof P2 == "function" && (U = P2, P2 = null), q2(C2, L2, P2, U);
        function q2(H, j, V2, W2, Q2) {
          return T2(H, j, V2, function(Y2, de) {
            Y2 && (Y2.code === "EMFILE" || Y2.code === "ENFILE") ? Kr([q2, [H, j, V2, W2], Y2, Q2 || Date.now(), Date.now()]) : typeof W2 == "function" && W2.apply(this, arguments);
          });
        }
      }
      return t;
    }
    function Kr(t) {
      ar("ENQUEUE", t[0].name, t[1]), Me[tt].push(t), df();
    }
    var la;
    function jy() {
      for (var t = Date.now(), e2 = 0; e2 < Me[tt].length; ++e2) Me[tt][e2].length > 2 && (Me[tt][e2][3] = t, Me[tt][e2][4] = t);
      df();
    }
    function df() {
      if (clearTimeout(la), la = void 0, Me[tt].length !== 0) {
        var t = Me[tt].shift(), e2 = t[0], i = t[1], r2 = t[2], n = t[3], s2 = t[4];
        if (n === void 0) ar("RETRY", e2.name, i), e2.apply(null, i);
        else if (Date.now() - n >= 6e4) {
          ar("TIMEOUT", e2.name, i);
          var o2 = i.pop();
          typeof o2 == "function" && o2.call(null, r2);
        } else {
          var a = Date.now() - s2, l = Math.max(s2 - n, 1), c2 = Math.min(l * 1.2, 100);
          a >= c2 ? (ar("RETRY", e2.name, i), e2.apply(null, i.concat([n]))) : Me[tt].push(t);
        }
        la === void 0 && (la = setTimeout(df, 0));
      }
    }
  });
  var Hy = _2((BL, Vy) => {
    function Lt(t, e2) {
      typeof e2 == "boolean" && (e2 = { forever: e2 }), this._originalTimeouts = JSON.parse(JSON.stringify(t)), this._timeouts = t, this._options = e2 || {}, this._maxRetryTime = e2 && e2.maxRetryTime || 1 / 0, this._fn = null, this._errors = [], this._attempts = 1, this._operationTimeout = null, this._operationTimeoutCb = null, this._timeout = null, this._operationStart = null, this._options.forever && (this._cachedTimeouts = this._timeouts.slice(0));
    }
    Vy.exports = Lt;
    Lt.prototype.reset = function() {
      this._attempts = 1, this._timeouts = this._originalTimeouts;
    };
    Lt.prototype.stop = function() {
      this._timeout && clearTimeout(this._timeout), this._timeouts = [], this._cachedTimeouts = null;
    };
    Lt.prototype.retry = function(t) {
      if (this._timeout && clearTimeout(this._timeout), !t) return false;
      var e2 = (/* @__PURE__ */ new Date()).getTime();
      if (t && e2 - this._operationStart >= this._maxRetryTime) return this._errors.unshift(new Error("RetryOperation timeout occurred")), false;
      this._errors.push(t);
      var i = this._timeouts.shift();
      if (i === void 0) if (this._cachedTimeouts) this._errors.splice(this._errors.length - 1, this._errors.length), this._timeouts = this._cachedTimeouts.slice(0), i = this._timeouts.shift();
      else return false;
      var r2 = this, n = setTimeout(function() {
        r2._attempts++, r2._operationTimeoutCb && (r2._timeout = setTimeout(function() {
          r2._operationTimeoutCb(r2._attempts);
        }, r2._operationTimeout), r2._options.unref && r2._timeout.unref()), r2._fn(r2._attempts);
      }, i);
      return this._options.unref && n.unref(), true;
    };
    Lt.prototype.attempt = function(t, e2) {
      this._fn = t, e2 && (e2.timeout && (this._operationTimeout = e2.timeout), e2.cb && (this._operationTimeoutCb = e2.cb));
      var i = this;
      this._operationTimeoutCb && (this._timeout = setTimeout(function() {
        i._operationTimeoutCb();
      }, i._operationTimeout)), this._operationStart = (/* @__PURE__ */ new Date()).getTime(), this._fn(this._attempts);
    };
    Lt.prototype.try = function(t) {
      console.log("Using RetryOperation.try() is deprecated"), this.attempt(t);
    };
    Lt.prototype.start = function(t) {
      console.log("Using RetryOperation.start() is deprecated"), this.attempt(t);
    };
    Lt.prototype.start = Lt.prototype.try;
    Lt.prototype.errors = function() {
      return this._errors;
    };
    Lt.prototype.attempts = function() {
      return this._attempts;
    };
    Lt.prototype.mainError = function() {
      if (this._errors.length === 0) return null;
      for (var t = {}, e2 = null, i = 0, r2 = 0; r2 < this._errors.length; r2++) {
        var n = this._errors[r2], s2 = n.message, o2 = (t[s2] || 0) + 1;
        t[s2] = o2, o2 >= i && (e2 = n, i = o2);
      }
      return e2;
    };
  });
  var Gy = _2((lr) => {
    var $A = Hy();
    lr.operation = function(t) {
      var e2 = lr.timeouts(t);
      return new $A(e2, { forever: t && t.forever, unref: t && t.unref, maxRetryTime: t && t.maxRetryTime });
    };
    lr.timeouts = function(t) {
      if (t instanceof Array) return [].concat(t);
      var e2 = { retries: 10, factor: 2, minTimeout: 1 * 1e3, maxTimeout: 1 / 0, randomize: false };
      for (var i in t) e2[i] = t[i];
      if (e2.minTimeout > e2.maxTimeout) throw new Error("minTimeout is greater than maxTimeout");
      for (var r2 = [], n = 0; n < e2.retries; n++) r2.push(this.createTimeout(n, e2));
      return t && t.forever && !r2.length && r2.push(this.createTimeout(n, e2)), r2.sort(function(s2, o2) {
        return s2 - o2;
      }), r2;
    };
    lr.createTimeout = function(t, e2) {
      var i = e2.randomize ? Math.random() + 1 : 1, r2 = Math.round(i * e2.minTimeout * Math.pow(e2.factor, t));
      return r2 = Math.min(r2, e2.maxTimeout), r2;
    };
    lr.wrap = function(t, e2, i) {
      if (e2 instanceof Array && (i = e2, e2 = null), !i) {
        i = [];
        for (var r2 in t) typeof t[r2] == "function" && i.push(r2);
      }
      for (var n = 0; n < i.length; n++) {
        var s2 = i[n], o2 = t[s2];
        t[s2] = function(l) {
          var c2 = lr.operation(e2), u2 = Array.prototype.slice.call(arguments, 1), f2 = u2.pop();
          u2.push(function(d2) {
            c2.retry(d2) || (d2 && (arguments[0] = c2.mainError()), f2.apply(this, arguments));
          }), c2.attempt(function() {
            l.apply(t, u2);
          });
        }.bind(t, o2), t[s2].options = e2;
      }
    };
  });
  var Wy = _2((PL, Yy) => {
    Yy.exports = Gy();
  });
  var Ky = _2((ML, ua) => {
    ua.exports = ["SIGABRT", "SIGALRM", "SIGHUP", "SIGINT", "SIGTERM"];
    process.platform !== "win32" && ua.exports.push("SIGVTALRM", "SIGXCPU", "SIGXFSZ", "SIGUSR2", "SIGTRAP", "SIGSYS", "SIGQUIT", "SIGIOT");
    process.platform === "linux" && ua.exports.push("SIGIO", "SIGPOLL", "SIGPWR", "SIGSTKFLT", "SIGUNUSED");
  });
  var Xy = _2((FL, Zr) => {
    var Pe = commonjsGlobal.process, cr = function(t) {
      return t && typeof t == "object" && typeof t.removeListener == "function" && typeof t.emit == "function" && typeof t.reallyExit == "function" && typeof t.listeners == "function" && typeof t.kill == "function" && typeof t.pid == "number" && typeof t.on == "function";
    };
    cr(Pe) ? (zy = require$$10$1, zr = Ky(), Jy = /^win/i.test(Pe.platform), Qn = require$$0$4, typeof Qn != "function" && (Qn = Qn.EventEmitter), Pe.__signal_exit_emitter__ ? Ze = Pe.__signal_exit_emitter__ : (Ze = Pe.__signal_exit_emitter__ = new Qn(), Ze.count = 0, Ze.emitted = {}), Ze.infinite || (Ze.setMaxListeners(1 / 0), Ze.infinite = true), Zr.exports = function(t, e2) {
      if (!cr(commonjsGlobal.process)) return function() {
      };
      zy.equal(typeof t, "function", "a callback must be provided for exit handler"), Jr === false && gf();
      var i = "exit";
      e2 && e2.alwaysLast && (i = "afterexit");
      var r2 = function() {
        Ze.removeListener(i, t), Ze.listeners("exit").length === 0 && Ze.listeners("afterexit").length === 0 && fa();
      };
      return Ze.on(i, t), r2;
    }, fa = function() {
      !Jr || !cr(commonjsGlobal.process) || (Jr = false, zr.forEach(function(e2) {
        try {
          Pe.removeListener(e2, ha[e2]);
        } catch {
        }
      }), Pe.emit = pa, Pe.reallyExit = vf, Ze.count -= 1);
    }, Zr.exports.unload = fa, ur = function(e2, i, r2) {
      Ze.emitted[e2] || (Ze.emitted[e2] = true, Ze.emit(e2, i, r2));
    }, ha = {}, zr.forEach(function(t) {
      ha[t] = function() {
        if (cr(commonjsGlobal.process)) {
          var i = Pe.listeners(t);
          i.length === Ze.count && (fa(), ur("exit", null, t), ur("afterexit", null, t), Jy && t === "SIGHUP" && (t = "SIGINT"), Pe.kill(Pe.pid, t));
        }
      };
    }), Zr.exports.signals = function() {
      return zr;
    }, Jr = false, gf = function() {
      Jr || !cr(commonjsGlobal.process) || (Jr = true, Ze.count += 1, zr = zr.filter(function(e2) {
        try {
          return Pe.on(e2, ha[e2]), true;
        } catch {
          return false;
        }
      }), Pe.emit = Qy, Pe.reallyExit = Zy);
    }, Zr.exports.load = gf, vf = Pe.reallyExit, Zy = function(e2) {
      cr(commonjsGlobal.process) && (Pe.exitCode = e2 || 0, ur("exit", Pe.exitCode, null), ur("afterexit", Pe.exitCode, null), vf.call(Pe, Pe.exitCode));
    }, pa = Pe.emit, Qy = function(e2, i) {
      if (e2 === "exit" && cr(commonjsGlobal.process)) {
        i !== void 0 && (Pe.exitCode = i);
        var r2 = pa.apply(this, arguments);
        return ur("exit", Pe.exitCode, null), ur("afterexit", Pe.exitCode, null), r2;
      } else return pa.apply(this, arguments);
    }) : Zr.exports = function() {
      return function() {
      };
    };
    var zy, zr, Jy, Qn, Ze, fa, ur, ha, Jr, gf, vf, Zy, pa, Qy;
  });
  var ab = _2((qL, ob) => {
    var VA = require$$1$1, rb = $y(), HA = Wy(), GA = Xy(), Ii = {}, eb = Symbol();
    function YA(t, e2, i) {
      let r2 = e2[eb];
      if (r2) return e2.stat(t, (s2, o2) => {
        if (s2) return i(s2);
        i(null, o2.mtime, r2);
      });
      let n = new Date(Math.ceil(Date.now() / 1e3) * 1e3 + 5);
      e2.utimes(t, n, n, (s2) => {
        if (s2) return i(s2);
        e2.stat(t, (o2, a) => {
          if (o2) return i(o2);
          let l = a.mtime.getTime() % 1e3 === 0 ? "s" : "ms";
          Object.defineProperty(e2, eb, { value: l }), i(null, a.mtime, l);
        });
      });
    }
    function WA(t) {
      let e2 = Date.now();
      return t === "s" && (e2 = Math.ceil(e2 / 1e3) * 1e3), new Date(e2);
    }
    function ma(t, e2) {
      return e2.lockfilePath || `${t}.lock`;
    }
    function nb(t, e2, i) {
      if (!e2.realpath) return i(null, VA.resolve(t));
      e2.fs.realpath(t, i);
    }
    function bf(t, e2, i) {
      let r2 = ma(t, e2);
      e2.fs.mkdir(r2, (n) => {
        if (!n) return YA(r2, e2.fs, (s2, o2, a) => {
          if (s2) return e2.fs.rmdir(r2, () => {
          }), i(s2);
          i(null, o2, a);
        });
        if (n.code !== "EEXIST") return i(n);
        if (e2.stale <= 0) return i(Object.assign(new Error("Lock file is already being held"), { code: "ELOCKED", file: t }));
        e2.fs.stat(r2, (s2, o2) => {
          if (s2) return s2.code === "ENOENT" ? bf(t, { ...e2, stale: 0 }, i) : i(s2);
          if (!KA(o2, e2)) return i(Object.assign(new Error("Lock file is already being held"), { code: "ELOCKED", file: t }));
          sb(t, e2, (a) => {
            if (a) return i(a);
            bf(t, { ...e2, stale: 0 }, i);
          });
        });
      });
    }
    function KA(t, e2) {
      return t.mtime.getTime() < Date.now() - e2.stale;
    }
    function sb(t, e2, i) {
      e2.fs.rmdir(ma(t, e2), (r2) => {
        if (r2 && r2.code !== "ENOENT") return i(r2);
        i();
      });
    }
    function da(t, e2) {
      let i = Ii[t];
      i.updateTimeout || (i.updateDelay = i.updateDelay || e2.update, i.updateTimeout = setTimeout(() => {
        i.updateTimeout = null, e2.fs.stat(i.lockfilePath, (r2, n) => {
          let s2 = i.lastUpdate + e2.stale < Date.now();
          if (r2) return r2.code === "ENOENT" || s2 ? yf(t, i, Object.assign(r2, { code: "ECOMPROMISED" })) : (i.updateDelay = 1e3, da(t, e2));
          if (!(i.mtime.getTime() === n.mtime.getTime())) return yf(t, i, Object.assign(new Error("Unable to update lock within the stale threshold"), { code: "ECOMPROMISED" }));
          let a = WA(i.mtimePrecision);
          e2.fs.utimes(i.lockfilePath, a, a, (l) => {
            let c2 = i.lastUpdate + e2.stale < Date.now();
            if (!i.released) {
              if (l) return l.code === "ENOENT" || c2 ? yf(t, i, Object.assign(l, { code: "ECOMPROMISED" })) : (i.updateDelay = 1e3, da(t, e2));
              i.mtime = a, i.lastUpdate = Date.now(), i.updateDelay = null, da(t, e2);
            }
          });
        });
      }, i.updateDelay), i.updateTimeout.unref && i.updateTimeout.unref());
    }
    function yf(t, e2, i) {
      e2.released = true, e2.updateTimeout && clearTimeout(e2.updateTimeout), Ii[t] === e2 && delete Ii[t], e2.options.onCompromised(i);
    }
    function zA(t, e2, i) {
      e2 = { stale: 1e4, update: null, realpath: true, retries: 0, fs: rb, onCompromised: (r2) => {
        throw r2;
      }, ...e2 }, e2.retries = e2.retries || 0, e2.retries = typeof e2.retries == "number" ? { retries: e2.retries } : e2.retries, e2.stale = Math.max(e2.stale || 0, 2e3), e2.update = e2.update == null ? e2.stale / 2 : e2.update || 0, e2.update = Math.max(Math.min(e2.update, e2.stale / 2), 1e3), nb(t, e2, (r2, n) => {
        if (r2) return i(r2);
        let s2 = HA.operation(e2.retries);
        s2.attempt(() => {
          bf(n, e2, (o2, a, l) => {
            if (s2.retry(o2)) return;
            if (o2) return i(s2.mainError());
            let c2 = Ii[n] = { lockfilePath: ma(n, e2), mtime: a, mtimePrecision: l, options: e2, lastUpdate: Date.now() };
            da(n, e2), i(null, (u2) => {
              if (c2.released) return u2 && u2(Object.assign(new Error("Lock is already released"), { code: "ERELEASED" }));
              JA(n, { ...e2, realpath: false }, u2);
            });
          });
        });
      });
    }
    function JA(t, e2, i) {
      e2 = { fs: rb, realpath: true, ...e2 }, nb(t, e2, (r2, n) => {
        if (r2) return i(r2);
        let s2 = Ii[n];
        if (!s2) return i(Object.assign(new Error("Lock is not acquired/owned by you"), { code: "ENOTACQUIRED" }));
        s2.updateTimeout && clearTimeout(s2.updateTimeout), s2.released = true, delete Ii[n], sb(n, e2, i);
      });
    }
    function tb(t) {
      return (...e2) => new Promise((i, r2) => {
        e2.push((n, s2) => {
          n ? r2(n) : i(s2);
        }), t(...e2);
      });
    }
    var ib = false;
    function ZA() {
      ib || (ib = true, GA(() => {
        for (let t in Ii) {
          let e2 = Ii[t].options;
          try {
            e2.fs.rmdirSync(ma(t, e2));
          } catch {
          }
        }
      }));
    }
    ob.exports.lock = async (t, e2) => {
      ZA();
      let i = await tb(zA)(t, e2);
      return tb(i);
    };
  });
  var dI = {};
  Sf(dI, { HttpsProxyAgent: () => yb.HttpsProxyAgent, PNG: () => bb.PNG, SocksProxyAgent: () => wb.SocksProxyAgent, colors: () => QA, debug: () => XA, diff: () => eI, dotenv: () => tI, getProxyForUrl: () => vb.getProxyForUrl, jpegjs: () => iI, lockfile: () => nI, mime: () => sI, minimatch: () => oI, open: () => aI, program: () => _b.program, progress: () => lI, ws: () => uI, wsReceiver: () => hI, wsSender: () => pI, wsServer: () => fI, yaml: () => cI });
  utilsBundleImpl = $b(dI);
  var lb = Ue(Qf()), cb = Ue(yr());
  var Ba = {};
  Sf(Ba, { Diff: () => Ct, applyPatch: () => Nh, applyPatches: () => K_, canonicalize: () => Ss, convertChangesToDMP: () => rw, convertChangesToXML: () => nw, createPatch: () => z_, createTwoFilesPatch: () => Lh, diffArrays: () => H_, diffChars: () => O_, diffCss: () => P_, diffJson: () => V_, diffLines: () => Ca, diffSentences: () => R_, diffTrimmedLines: () => B_, diffWords: () => N_, diffWordsWithSpace: () => Oh, formatPatch: () => Os, merge: () => X_, parsePatch: () => Cs, reversePatch: () => Bh, structuredPatch: () => ks });
  function Ct() {
  }
  Ct.prototype = { diff: function(e2, i) {
    var r2, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, s2 = n.callback;
    typeof n == "function" && (s2 = n, n = {});
    var o2 = this;
    function a(k2) {
      return k2 = o2.postProcess(k2, n), s2 ? (setTimeout(function() {
        s2(k2);
      }, 0), true) : k2;
    }
    e2 = this.castInput(e2, n), i = this.castInput(i, n), e2 = this.removeEmpty(this.tokenize(e2, n)), i = this.removeEmpty(this.tokenize(i, n));
    var l = i.length, c2 = e2.length, u2 = 1, f2 = l + c2;
    n.maxEditLength != null && (f2 = Math.min(f2, n.maxEditLength));
    var d2 = (r2 = n.timeout) !== null && r2 !== void 0 ? r2 : 1 / 0, g2 = Date.now() + d2, m2 = [{ oldPos: -1, lastComponent: void 0 }], y2 = this.extractCommon(m2[0], i, e2, 0, n);
    if (m2[0].oldPos + 1 >= c2 && y2 + 1 >= l) return a(uh(o2, m2[0].lastComponent, i, e2, o2.useLongestToken));
    var b = -1 / 0, x2 = 1 / 0;
    function E() {
      for (var k2 = Math.max(b, -u2); k2 <= Math.min(x2, u2); k2 += 2) {
        var S2 = void 0, R2 = m2[k2 - 1], T2 = m2[k2 + 1];
        R2 && (m2[k2 - 1] = void 0);
        var A2 = false;
        if (T2) {
          var C2 = T2.oldPos - k2;
          A2 = T2 && 0 <= C2 && C2 < l;
        }
        var L2 = R2 && R2.oldPos + 1 < c2;
        if (!A2 && !L2) {
          m2[k2] = void 0;
          continue;
        }
        if (!L2 || A2 && R2.oldPos < T2.oldPos ? S2 = o2.addToPath(T2, true, false, 0, n) : S2 = o2.addToPath(R2, false, true, 1, n), y2 = o2.extractCommon(S2, i, e2, k2, n), S2.oldPos + 1 >= c2 && y2 + 1 >= l) return a(uh(o2, S2.lastComponent, i, e2, o2.useLongestToken));
        m2[k2] = S2, S2.oldPos + 1 >= c2 && (x2 = Math.min(x2, k2 - 1)), y2 + 1 >= l && (b = Math.max(b, k2 + 1));
      }
      u2++;
    }
    if (s2) (function k2() {
      setTimeout(function() {
        if (u2 > f2 || Date.now() > g2) return s2();
        E() || k2();
      }, 0);
    })();
    else for (; u2 <= f2 && Date.now() <= g2; ) {
      var O2 = E();
      if (O2) return O2;
    }
  }, addToPath: function(e2, i, r2, n, s2) {
    var o2 = e2.lastComponent;
    return o2 && !s2.oneChangePerToken && o2.added === i && o2.removed === r2 ? { oldPos: e2.oldPos + n, lastComponent: { count: o2.count + 1, added: i, removed: r2, previousComponent: o2.previousComponent } } : { oldPos: e2.oldPos + n, lastComponent: { count: 1, added: i, removed: r2, previousComponent: o2 } };
  }, extractCommon: function(e2, i, r2, n, s2) {
    for (var o2 = i.length, a = r2.length, l = e2.oldPos, c2 = l - n, u2 = 0; c2 + 1 < o2 && l + 1 < a && this.equals(r2[l + 1], i[c2 + 1], s2); ) c2++, l++, u2++, s2.oneChangePerToken && (e2.lastComponent = { count: 1, previousComponent: e2.lastComponent, added: false, removed: false });
    return u2 && !s2.oneChangePerToken && (e2.lastComponent = { count: u2, previousComponent: e2.lastComponent, added: false, removed: false }), e2.oldPos = l, c2;
  }, equals: function(e2, i, r2) {
    return r2.comparator ? r2.comparator(e2, i) : e2 === i || r2.ignoreCase && e2.toLowerCase() === i.toLowerCase();
  }, removeEmpty: function(e2) {
    for (var i = [], r2 = 0; r2 < e2.length; r2++) e2[r2] && i.push(e2[r2]);
    return i;
  }, castInput: function(e2) {
    return e2;
  }, tokenize: function(e2) {
    return Array.from(e2);
  }, join: function(e2) {
    return e2.join("");
  }, postProcess: function(e2) {
    return e2;
  } };
  function uh(t, e2, i, r2, n) {
    for (var s2 = [], o2; e2; ) s2.push(e2), o2 = e2.previousComponent, delete e2.previousComponent, e2 = o2;
    s2.reverse();
    for (var a = 0, l = s2.length, c2 = 0, u2 = 0; a < l; a++) {
      var f2 = s2[a];
      if (f2.removed) f2.value = t.join(r2.slice(u2, u2 + f2.count)), u2 += f2.count;
      else {
        if (!f2.added && n) {
          var d2 = i.slice(c2, c2 + f2.count);
          d2 = d2.map(function(g2, m2) {
            var y2 = r2[u2 + m2];
            return y2.length > g2.length ? y2 : g2;
          }), f2.value = t.join(d2);
        } else f2.value = t.join(i.slice(c2, c2 + f2.count));
        c2 += f2.count, f2.added || (u2 += f2.count);
      }
    }
    return s2;
  }
  var k_ = new Ct();
  function O_(t, e2, i) {
    return k_.diff(t, e2, i);
  }
  function fh(t, e2) {
    var i;
    for (i = 0; i < t.length && i < e2.length; i++) if (t[i] != e2[i]) return t.slice(0, i);
    return t.slice(0, i);
  }
  function hh(t, e2) {
    var i;
    if (!t || !e2 || t[t.length - 1] != e2[e2.length - 1]) return "";
    for (i = 0; i < t.length && i < e2.length; i++) if (t[t.length - (i + 1)] != e2[e2.length - (i + 1)]) return t.slice(-i);
    return t.slice(-i);
  }
  function ka(t, e2, i) {
    if (t.slice(0, e2.length) != e2) throw Error("string ".concat(JSON.stringify(t), " doesn't start with prefix ").concat(JSON.stringify(e2), "; this is a bug"));
    return i + t.slice(e2.length);
  }
  function Oa(t, e2, i) {
    if (!e2) return t + i;
    if (t.slice(-e2.length) != e2) throw Error("string ".concat(JSON.stringify(t), " doesn't end with suffix ").concat(JSON.stringify(e2), "; this is a bug"));
    return t.slice(0, -e2.length) + i;
  }
  function Xr(t, e2) {
    return ka(t, e2, "");
  }
  function _s(t, e2) {
    return Oa(t, e2, "");
  }
  function ph(t, e2) {
    return e2.slice(0, C_(t, e2));
  }
  function C_(t, e2) {
    var i = 0;
    t.length > e2.length && (i = t.length - e2.length);
    var r2 = e2.length;
    t.length < e2.length && (r2 = t.length);
    var n = Array(r2), s2 = 0;
    n[0] = 0;
    for (var o2 = 1; o2 < r2; o2++) {
      for (e2[o2] == e2[s2] ? n[o2] = n[s2] : n[o2] = s2; s2 > 0 && e2[o2] != e2[s2]; ) s2 = n[s2];
      e2[o2] == e2[s2] && s2++;
    }
    s2 = 0;
    for (var a = i; a < t.length; a++) {
      for (; s2 > 0 && t[a] != e2[s2]; ) s2 = n[s2];
      t[a] == e2[s2] && s2++;
    }
    return s2;
  }
  function T_(t) {
    return t.includes(`\r
`) && !t.startsWith(`
`) && !t.match(/[^\r]\n/);
  }
  function A_(t) {
    return !t.includes(`\r
`) && t.includes(`
`);
  }
  var xs = "a-zA-Z0-9_\\u{C0}-\\u{FF}\\u{D8}-\\u{F6}\\u{F8}-\\u{2C6}\\u{2C8}-\\u{2D7}\\u{2DE}-\\u{2FF}\\u{1E00}-\\u{1EFF}", I_ = new RegExp("[".concat(xs, "]+|\\s+|[^").concat(xs, "]"), "ug"), en = new Ct();
  en.equals = function(t, e2, i) {
    return i.ignoreCase && (t = t.toLowerCase(), e2 = e2.toLowerCase()), t.trim() === e2.trim();
  };
  en.tokenize = function(t) {
    var e2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, i;
    if (e2.intlSegmenter) {
      if (e2.intlSegmenter.resolvedOptions().granularity != "word") throw new Error('The segmenter passed must have a granularity of "word"');
      i = Array.from(e2.intlSegmenter.segment(t), function(s2) {
        return s2.segment;
      });
    } else i = t.match(I_) || [];
    var r2 = [], n = null;
    return i.forEach(function(s2) {
      /\s/.test(s2) ? n == null ? r2.push(s2) : r2.push(r2.pop() + s2) : /\s/.test(n) ? r2[r2.length - 1] == n ? r2.push(r2.pop() + s2) : r2.push(n + s2) : r2.push(s2), n = s2;
    }), r2;
  };
  en.join = function(t) {
    return t.map(function(e2, i) {
      return i == 0 ? e2 : e2.replace(/^\s+/, "");
    }).join("");
  };
  en.postProcess = function(t, e2) {
    if (!t || e2.oneChangePerToken) return t;
    var i = null, r2 = null, n = null;
    return t.forEach(function(s2) {
      s2.added ? r2 = s2 : s2.removed ? n = s2 : ((r2 || n) && dh(i, n, r2, s2), i = s2, r2 = null, n = null);
    }), (r2 || n) && dh(i, n, r2, null), t;
  };
  function N_(t, e2, i) {
    return (i == null ? void 0 : i.ignoreWhitespace) != null && !i.ignoreWhitespace ? Oh(t, e2, i) : en.diff(t, e2, i);
  }
  function dh(t, e2, i, r2) {
    if (e2 && i) {
      var n = e2.value.match(/^\s*/)[0], s2 = e2.value.match(/\s*$/)[0], o2 = i.value.match(/^\s*/)[0], a = i.value.match(/\s*$/)[0];
      if (t) {
        var l = fh(n, o2);
        t.value = Oa(t.value, o2, l), e2.value = Xr(e2.value, l), i.value = Xr(i.value, l);
      }
      if (r2) {
        var c2 = hh(s2, a);
        r2.value = ka(r2.value, a, c2), e2.value = _s(e2.value, c2), i.value = _s(i.value, c2);
      }
    } else if (i) t && (i.value = i.value.replace(/^\s*/, "")), r2 && (r2.value = r2.value.replace(/^\s*/, ""));
    else if (t && r2) {
      var u2 = r2.value.match(/^\s*/)[0], f2 = e2.value.match(/^\s*/)[0], d2 = e2.value.match(/\s*$/)[0], g2 = fh(u2, f2);
      e2.value = Xr(e2.value, g2);
      var m2 = hh(Xr(u2, g2), d2);
      e2.value = _s(e2.value, m2), r2.value = ka(r2.value, u2, m2), t.value = Oa(t.value, u2, u2.slice(0, u2.length - m2.length));
    } else if (r2) {
      var y2 = r2.value.match(/^\s*/)[0], b = e2.value.match(/\s*$/)[0], x2 = ph(b, y2);
      e2.value = _s(e2.value, x2);
    } else if (t) {
      var E = t.value.match(/\s*$/)[0], O2 = e2.value.match(/^\s*/)[0], k2 = ph(E, O2);
      e2.value = Xr(e2.value, k2);
    }
  }
  var kh = new Ct();
  kh.tokenize = function(t) {
    var e2 = new RegExp("(\\r?\\n)|[".concat(xs, "]+|[^\\S\\n\\r]+|[^").concat(xs, "]"), "ug");
    return t.match(e2) || [];
  };
  function Oh(t, e2, i) {
    return kh.diff(t, e2, i);
  }
  function L_(t, e2) {
    if (typeof t == "function") e2.callback = t;
    else if (t) for (var i in t) t.hasOwnProperty(i) && (e2[i] = t[i]);
    return e2;
  }
  var tn = new Ct();
  tn.tokenize = function(t, e2) {
    e2.stripTrailingCr && (t = t.replace(/\r\n/g, `
`));
    var i = [], r2 = t.split(/(\n|\r\n)/);
    r2[r2.length - 1] || r2.pop();
    for (var n = 0; n < r2.length; n++) {
      var s2 = r2[n];
      n % 2 && !e2.newlineIsToken ? i[i.length - 1] += s2 : i.push(s2);
    }
    return i;
  };
  tn.equals = function(t, e2, i) {
    return i.ignoreWhitespace ? ((!i.newlineIsToken || !t.includes(`
`)) && (t = t.trim()), (!i.newlineIsToken || !e2.includes(`
`)) && (e2 = e2.trim())) : i.ignoreNewlineAtEof && !i.newlineIsToken && (t.endsWith(`
`) && (t = t.slice(0, -1)), e2.endsWith(`
`) && (e2 = e2.slice(0, -1))), Ct.prototype.equals.call(this, t, e2, i);
  };
  function Ca(t, e2, i) {
    return tn.diff(t, e2, i);
  }
  function B_(t, e2, i) {
    var r2 = L_(i, { ignoreWhitespace: true });
    return tn.diff(t, e2, r2);
  }
  var Ch = new Ct();
  Ch.tokenize = function(t) {
    return t.split(/(\S.+?[.!?])(?=\s+|$)/);
  };
  function R_(t, e2, i) {
    return Ch.diff(t, e2, i);
  }
  var Th = new Ct();
  Th.tokenize = function(t) {
    return t.split(/([{}:;,]|\s+)/);
  };
  function P_(t, e2, i) {
    return Th.diff(t, e2, i);
  }
  function mh(t, e2) {
    var i = Object.keys(t);
    if (Object.getOwnPropertySymbols) {
      var r2 = Object.getOwnPropertySymbols(t);
      e2 && (r2 = r2.filter(function(n) {
        return Object.getOwnPropertyDescriptor(t, n).enumerable;
      })), i.push.apply(i, r2);
    }
    return i;
  }
  function pt(t) {
    for (var e2 = 1; e2 < arguments.length; e2++) {
      var i = arguments[e2] != null ? arguments[e2] : {};
      e2 % 2 ? mh(Object(i), true).forEach(function(r2) {
        q_(t, r2, i[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(i)) : mh(Object(i)).forEach(function(r2) {
        Object.defineProperty(t, r2, Object.getOwnPropertyDescriptor(i, r2));
      });
    }
    return t;
  }
  function M_(t, e2) {
    if (typeof t != "object" || !t) return t;
    var i = t[Symbol.toPrimitive];
    if (i !== void 0) {
      var r2 = i.call(t, e2);
      if (typeof r2 != "object") return r2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e2 === "string" ? String : Number)(t);
  }
  function F_(t) {
    var e2 = M_(t, "string");
    return typeof e2 == "symbol" ? e2 : e2 + "";
  }
  function Ta(t) {
    "@babel/helpers - typeof";
    return Ta = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e2) {
      return typeof e2;
    } : function(e2) {
      return e2 && typeof Symbol == "function" && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
    }, Ta(t);
  }
  function q_(t, e2, i) {
    return e2 = F_(e2), e2 in t ? Object.defineProperty(t, e2, { value: i, enumerable: true, configurable: true, writable: true }) : t[e2] = i, t;
  }
  function ti(t) {
    return D_(t) || j_(t) || U_(t) || $_();
  }
  function D_(t) {
    if (Array.isArray(t)) return Aa(t);
  }
  function j_(t) {
    if (typeof Symbol != "undefined" && t[Symbol.iterator] != null || t["@@iterator"] != null) return Array.from(t);
  }
  function U_(t, e2) {
    if (t) {
      if (typeof t == "string") return Aa(t, e2);
      var i = Object.prototype.toString.call(t).slice(8, -1);
      if (i === "Object" && t.constructor && (i = t.constructor.name), i === "Map" || i === "Set") return Array.from(t);
      if (i === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)) return Aa(t, e2);
    }
  }
  function Aa(t, e2) {
    (e2 == null || e2 > t.length) && (e2 = t.length);
    for (var i = 0, r2 = new Array(e2); i < e2; i++) r2[i] = t[i];
    return r2;
  }
  function $_() {
    throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  var br = new Ct();
  br.useLongestToken = true;
  br.tokenize = tn.tokenize;
  br.castInput = function(t, e2) {
    var i = e2.undefinedReplacement, r2 = e2.stringifyReplacer, n = r2 === void 0 ? function(s2, o2) {
      return typeof o2 == "undefined" ? i : o2;
    } : r2;
    return typeof t == "string" ? t : JSON.stringify(Ss(t, null, null, n), n, "  ");
  };
  br.equals = function(t, e2, i) {
    return Ct.prototype.equals.call(br, t.replace(/,([\r\n])/g, "$1"), e2.replace(/,([\r\n])/g, "$1"), i);
  };
  function V_(t, e2, i) {
    return br.diff(t, e2, i);
  }
  function Ss(t, e2, i, r2, n) {
    e2 = e2 || [], i = i || [], r2 && (t = r2(n, t));
    var s2;
    for (s2 = 0; s2 < e2.length; s2 += 1) if (e2[s2] === t) return i[s2];
    var o2;
    if (Object.prototype.toString.call(t) === "[object Array]") {
      for (e2.push(t), o2 = new Array(t.length), i.push(o2), s2 = 0; s2 < t.length; s2 += 1) o2[s2] = Ss(t[s2], e2, i, r2, n);
      return e2.pop(), i.pop(), o2;
    }
    if (t && t.toJSON && (t = t.toJSON()), Ta(t) === "object" && t !== null) {
      e2.push(t), o2 = {}, i.push(o2);
      var a = [], l;
      for (l in t) Object.prototype.hasOwnProperty.call(t, l) && a.push(l);
      for (a.sort(), s2 = 0; s2 < a.length; s2 += 1) l = a[s2], o2[l] = Ss(t[l], e2, i, r2, l);
      e2.pop(), i.pop();
    } else o2 = t;
    return o2;
  }
  var Es = new Ct();
  Es.tokenize = function(t) {
    return t.slice();
  };
  Es.join = Es.removeEmpty = function(t) {
    return t;
  };
  function H_(t, e2, i) {
    return Es.diff(t, e2, i);
  }
  function Ah(t) {
    return Array.isArray(t) ? t.map(Ah) : pt(pt({}, t), {}, { hunks: t.hunks.map(function(e2) {
      return pt(pt({}, e2), {}, { lines: e2.lines.map(function(i, r2) {
        var n;
        return i.startsWith("\\") || i.endsWith("\r") || (n = e2.lines[r2 + 1]) !== null && n !== void 0 && n.startsWith("\\") ? i : i + "\r";
      }) });
    }) });
  }
  function Ih(t) {
    return Array.isArray(t) ? t.map(Ih) : pt(pt({}, t), {}, { hunks: t.hunks.map(function(e2) {
      return pt(pt({}, e2), {}, { lines: e2.lines.map(function(i) {
        return i.endsWith("\r") ? i.substring(0, i.length - 1) : i;
      }) });
    }) });
  }
  function G_(t) {
    return Array.isArray(t) || (t = [t]), !t.some(function(e2) {
      return e2.hunks.some(function(i) {
        return i.lines.some(function(r2) {
          return !r2.startsWith("\\") && r2.endsWith("\r");
        });
      });
    });
  }
  function Y_(t) {
    return Array.isArray(t) || (t = [t]), t.some(function(e2) {
      return e2.hunks.some(function(i) {
        return i.lines.some(function(r2) {
          return r2.endsWith("\r");
        });
      });
    }) && t.every(function(e2) {
      return e2.hunks.every(function(i) {
        return i.lines.every(function(r2, n) {
          var s2;
          return r2.startsWith("\\") || r2.endsWith("\r") || ((s2 = i.lines[n + 1]) === null || s2 === void 0 ? void 0 : s2.startsWith("\\"));
        });
      });
    });
  }
  function Cs(t) {
    var e2 = t.split(/\n/), i = [], r2 = 0;
    function n() {
      var a = {};
      for (i.push(a); r2 < e2.length; ) {
        var l = e2[r2];
        if (/^(\-\-\-|\+\+\+|@@)\s/.test(l)) break;
        var c2 = /^(?:Index:|diff(?: -r \w+)+)\s+(.+?)\s*$/.exec(l);
        c2 && (a.index = c2[1]), r2++;
      }
      for (s2(a), s2(a), a.hunks = []; r2 < e2.length; ) {
        var u2 = e2[r2];
        if (/^(Index:\s|diff\s|\-\-\-\s|\+\+\+\s|===================================================================)/.test(u2)) break;
        if (/^@@/.test(u2)) a.hunks.push(o2());
        else {
          if (u2) throw new Error("Unknown line " + (r2 + 1) + " " + JSON.stringify(u2));
          r2++;
        }
      }
    }
    function s2(a) {
      var l = /^(---|\+\+\+)\s+(.*)\r?$/.exec(e2[r2]);
      if (l) {
        var c2 = l[1] === "---" ? "old" : "new", u2 = l[2].split("	", 2), f2 = u2[0].replace(/\\\\/g, "\\");
        /^".*"$/.test(f2) && (f2 = f2.substr(1, f2.length - 2)), a[c2 + "FileName"] = f2, a[c2 + "Header"] = (u2[1] || "").trim(), r2++;
      }
    }
    function o2() {
      var a = r2, l = e2[r2++], c2 = l.split(/@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/), u2 = { oldStart: +c2[1], oldLines: typeof c2[2] == "undefined" ? 1 : +c2[2], newStart: +c2[3], newLines: typeof c2[4] == "undefined" ? 1 : +c2[4], lines: [] };
      u2.oldLines === 0 && (u2.oldStart += 1), u2.newLines === 0 && (u2.newStart += 1);
      for (var f2 = 0, d2 = 0; r2 < e2.length && (d2 < u2.oldLines || f2 < u2.newLines || (g2 = e2[r2]) !== null && g2 !== void 0 && g2.startsWith("\\")); r2++) {
        var g2, m2 = e2[r2].length == 0 && r2 != e2.length - 1 ? " " : e2[r2][0];
        if (m2 === "+" || m2 === "-" || m2 === " " || m2 === "\\") u2.lines.push(e2[r2]), m2 === "+" ? f2++ : m2 === "-" ? d2++ : m2 === " " && (f2++, d2++);
        else throw new Error("Hunk at line ".concat(a + 1, " contained invalid line ").concat(e2[r2]));
      }
      if (!f2 && u2.newLines === 1 && (u2.newLines = 0), !d2 && u2.oldLines === 1 && (u2.oldLines = 0), f2 !== u2.newLines) throw new Error("Added line count did not match for hunk at line " + (a + 1));
      if (d2 !== u2.oldLines) throw new Error("Removed line count did not match for hunk at line " + (a + 1));
      return u2;
    }
    for (; r2 < e2.length; ) n();
    return i;
  }
  function W_(t, e2, i) {
    var r2 = true, n = false, s2 = false, o2 = 1;
    return function a() {
      if (r2 && !s2) {
        if (n ? o2++ : r2 = false, t + o2 <= i) return t + o2;
        s2 = true;
      }
      if (!n) return s2 || (r2 = true), e2 <= t - o2 ? t - o2++ : (n = true, a());
    };
  }
  function Nh(t, e2) {
    var i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    if (typeof e2 == "string" && (e2 = Cs(e2)), Array.isArray(e2)) {
      if (e2.length > 1) throw new Error("applyPatch only works with a single input.");
      e2 = e2[0];
    }
    (i.autoConvertLineEndings || i.autoConvertLineEndings == null) && (T_(t) && G_(e2) ? e2 = Ah(e2) : A_(t) && Y_(e2) && (e2 = Ih(e2)));
    var r2 = t.split(`
`), n = e2.hunks, s2 = i.compareLine || function(P2, U, q2, H) {
      return U === H;
    }, o2 = i.fuzzFactor || 0, a = 0;
    if (o2 < 0 || !Number.isInteger(o2)) throw new Error("fuzzFactor must be a non-negative integer");
    if (!n.length) return t;
    for (var l = "", c2 = false, u2 = false, f2 = 0; f2 < n[n.length - 1].lines.length; f2++) {
      var d2 = n[n.length - 1].lines[f2];
      d2[0] == "\\" && (l[0] == "+" ? c2 = true : l[0] == "-" && (u2 = true)), l = d2;
    }
    if (c2) {
      if (u2) {
        if (!o2 && r2[r2.length - 1] == "") return false;
      } else if (r2[r2.length - 1] == "") r2.pop();
      else if (!o2) return false;
    } else if (u2) {
      if (r2[r2.length - 1] != "") r2.push("");
      else if (!o2) return false;
    }
    function g2(P2, U, q2) {
      for (var H = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0, j = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true, V2 = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : [], W2 = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : 0, Q2 = 0, Y2 = false; H < P2.length; H++) {
        var de = P2[H], ae = de.length > 0 ? de[0] : " ", ne = de.length > 0 ? de.substr(1) : de;
        if (ae === "-") if (s2(U + 1, r2[U], ae, ne)) U++, Q2 = 0;
        else return !q2 || r2[U] == null ? null : (V2[W2] = r2[U], g2(P2, U + 1, q2 - 1, H, false, V2, W2 + 1));
        if (ae === "+") {
          if (!j) return null;
          V2[W2] = ne, W2++, Q2 = 0, Y2 = true;
        }
        if (ae === " ") if (Q2++, V2[W2] = r2[U], s2(U + 1, r2[U], ae, ne)) W2++, j = true, Y2 = false, U++;
        else return Y2 || !q2 ? null : r2[U] && (g2(P2, U + 1, q2 - 1, H + 1, false, V2, W2 + 1) || g2(P2, U + 1, q2 - 1, H, false, V2, W2 + 1)) || g2(P2, U, q2 - 1, H + 1, false, V2, W2);
      }
      return W2 -= Q2, U -= Q2, V2.length = W2, { patchedLines: V2, oldLineLastI: U - 1 };
    }
    for (var m2 = [], y2 = 0, b = 0; b < n.length; b++) {
      for (var x2 = n[b], E = void 0, O2 = r2.length - x2.oldLines + o2, k2 = void 0, S2 = 0; S2 <= o2; S2++) {
        k2 = x2.oldStart + y2 - 1;
        for (var R2 = W_(k2, a, O2); k2 !== void 0 && (E = g2(x2.lines, k2, S2), !E); k2 = R2()) ;
        if (E) break;
      }
      if (!E) return false;
      for (var T2 = a; T2 < k2; T2++) m2.push(r2[T2]);
      for (var A2 = 0; A2 < E.patchedLines.length; A2++) {
        var C2 = E.patchedLines[A2];
        m2.push(C2);
      }
      a = E.oldLineLastI + 1, y2 = k2 + 1 - x2.oldStart;
    }
    for (var L2 = a; L2 < r2.length; L2++) m2.push(r2[L2]);
    return m2.join(`
`);
  }
  function K_(t, e2) {
    typeof t == "string" && (t = Cs(t));
    var i = 0;
    function r2() {
      var n = t[i++];
      if (!n) return e2.complete();
      e2.loadFile(n, function(s2, o2) {
        if (s2) return e2.complete(s2);
        var a = Nh(o2, n, e2);
        e2.patched(n, a, function(l) {
          if (l) return e2.complete(l);
          r2();
        });
      });
    }
    r2();
  }
  function ks(t, e2, i, r2, n, s2, o2) {
    if (o2 || (o2 = {}), typeof o2 == "function" && (o2 = { callback: o2 }), typeof o2.context == "undefined" && (o2.context = 4), o2.newlineIsToken) throw new Error("newlineIsToken may not be used with patch-generation functions, only with diffing functions");
    if (o2.callback) {
      var a = o2, l = a.callback;
      Ca(i, r2, pt(pt({}, o2), {}, { callback: function(f2) {
        var d2 = c2(f2);
        l(d2);
      } }));
    } else return c2(Ca(i, r2, o2));
    function c2(u2) {
      if (!u2) return;
      u2.push({ value: "", lines: [] });
      function f2(A2) {
        return A2.map(function(C2) {
          return " " + C2;
        });
      }
      for (var d2 = [], g2 = 0, m2 = 0, y2 = [], b = 1, x2 = 1, E = function() {
        var C2 = u2[O2], L2 = C2.lines || J_(C2.value);
        if (C2.lines = L2, C2.added || C2.removed) {
          var P2;
          if (!g2) {
            var U = u2[O2 - 1];
            g2 = b, m2 = x2, U && (y2 = o2.context > 0 ? f2(U.lines.slice(-o2.context)) : [], g2 -= y2.length, m2 -= y2.length);
          }
          (P2 = y2).push.apply(P2, ti(L2.map(function(W2) {
            return (C2.added ? "+" : "-") + W2;
          }))), C2.added ? x2 += L2.length : b += L2.length;
        } else {
          if (g2) if (L2.length <= o2.context * 2 && O2 < u2.length - 2) {
            var q2;
            (q2 = y2).push.apply(q2, ti(f2(L2)));
          } else {
            var H, j = Math.min(L2.length, o2.context);
            (H = y2).push.apply(H, ti(f2(L2.slice(0, j))));
            var V2 = { oldStart: g2, oldLines: b - g2 + j, newStart: m2, newLines: x2 - m2 + j, lines: y2 };
            d2.push(V2), g2 = 0, m2 = 0, y2 = [];
          }
          b += L2.length, x2 += L2.length;
        }
      }, O2 = 0; O2 < u2.length; O2++) E();
      for (var k2 = 0, S2 = d2; k2 < S2.length; k2++) for (var R2 = S2[k2], T2 = 0; T2 < R2.lines.length; T2++) R2.lines[T2].endsWith(`
`) ? R2.lines[T2] = R2.lines[T2].slice(0, -1) : (R2.lines.splice(T2 + 1, 0, "\\ No newline at end of file"), T2++);
      return { oldFileName: t, newFileName: e2, oldHeader: n, newHeader: s2, hunks: d2 };
    }
  }
  function Os(t) {
    if (Array.isArray(t)) return t.map(Os).join(`
`);
    var e2 = [];
    t.oldFileName == t.newFileName && e2.push("Index: " + t.oldFileName), e2.push("==================================================================="), e2.push("--- " + t.oldFileName + (typeof t.oldHeader == "undefined" ? "" : "	" + t.oldHeader)), e2.push("+++ " + t.newFileName + (typeof t.newHeader == "undefined" ? "" : "	" + t.newHeader));
    for (var i = 0; i < t.hunks.length; i++) {
      var r2 = t.hunks[i];
      r2.oldLines === 0 && (r2.oldStart -= 1), r2.newLines === 0 && (r2.newStart -= 1), e2.push("@@ -" + r2.oldStart + "," + r2.oldLines + " +" + r2.newStart + "," + r2.newLines + " @@"), e2.push.apply(e2, r2.lines);
    }
    return e2.join(`
`) + `
`;
  }
  function Lh(t, e2, i, r2, n, s2, o2) {
    var a;
    if (typeof o2 == "function" && (o2 = { callback: o2 }), (a = o2) !== null && a !== void 0 && a.callback) {
      var c2 = o2, u2 = c2.callback;
      ks(t, e2, i, r2, n, s2, pt(pt({}, o2), {}, { callback: function(d2) {
        d2 ? u2(Os(d2)) : u2();
      } }));
    } else {
      var l = ks(t, e2, i, r2, n, s2, o2);
      return l ? Os(l) : void 0;
    }
  }
  function z_(t, e2, i, r2, n, s2) {
    return Lh(t, t, e2, i, r2, n, s2);
  }
  function J_(t) {
    var e2 = t.endsWith(`
`), i = t.split(`
`).map(function(r2) {
      return r2 + `
`;
    });
    return e2 ? i.pop() : i.push(i.pop().slice(0, -1)), i;
  }
  function Z_(t, e2) {
    return t.length !== e2.length ? false : Ia(t, e2);
  }
  function Ia(t, e2) {
    if (e2.length > t.length) return false;
    for (var i = 0; i < e2.length; i++) if (e2[i] !== t[i]) return false;
    return true;
  }
  function Q_(t) {
    var e2 = Na(t.lines), i = e2.oldLines, r2 = e2.newLines;
    i !== void 0 ? t.oldLines = i : delete t.oldLines, r2 !== void 0 ? t.newLines = r2 : delete t.newLines;
  }
  function X_(t, e2, i) {
    t = gh(t, i), e2 = gh(e2, i);
    var r2 = {};
    (t.index || e2.index) && (r2.index = t.index || e2.index), (t.newFileName || e2.newFileName) && (vh(t) ? vh(e2) ? (r2.oldFileName = ws(r2, t.oldFileName, e2.oldFileName), r2.newFileName = ws(r2, t.newFileName, e2.newFileName), r2.oldHeader = ws(r2, t.oldHeader, e2.oldHeader), r2.newHeader = ws(r2, t.newHeader, e2.newHeader)) : (r2.oldFileName = t.oldFileName, r2.newFileName = t.newFileName, r2.oldHeader = t.oldHeader, r2.newHeader = t.newHeader) : (r2.oldFileName = e2.oldFileName || t.oldFileName, r2.newFileName = e2.newFileName || t.newFileName, r2.oldHeader = e2.oldHeader || t.oldHeader, r2.newHeader = e2.newHeader || t.newHeader)), r2.hunks = [];
    for (var n = 0, s2 = 0, o2 = 0, a = 0; n < t.hunks.length || s2 < e2.hunks.length; ) {
      var l = t.hunks[n] || { oldStart: 1 / 0 }, c2 = e2.hunks[s2] || { oldStart: 1 / 0 };
      if (yh(l, c2)) r2.hunks.push(bh(l, o2)), n++, a += l.newLines - l.oldLines;
      else if (yh(c2, l)) r2.hunks.push(bh(c2, a)), s2++, o2 += c2.newLines - c2.oldLines;
      else {
        var u2 = { oldStart: Math.min(l.oldStart, c2.oldStart), oldLines: 0, newStart: Math.min(l.newStart + o2, c2.oldStart + a), newLines: 0, lines: [] };
        ew(u2, l.oldStart, l.lines, c2.oldStart, c2.lines), s2++, n++, r2.hunks.push(u2);
      }
    }
    return r2;
  }
  function gh(t, e2) {
    if (typeof t == "string") {
      if (/^@@/m.test(t) || /^Index:/m.test(t)) return Cs(t)[0];
      if (!e2) throw new Error("Must provide a base reference or pass in a patch");
      return ks(void 0, void 0, e2, t);
    }
    return t;
  }
  function vh(t) {
    return t.newFileName && t.newFileName !== t.oldFileName;
  }
  function ws(t, e2, i) {
    return e2 === i ? e2 : (t.conflict = true, { mine: e2, theirs: i });
  }
  function yh(t, e2) {
    return t.oldStart < e2.oldStart && t.oldStart + t.oldLines < e2.oldStart;
  }
  function bh(t, e2) {
    return { oldStart: t.oldStart, oldLines: t.oldLines, newStart: t.newStart + e2, newLines: t.newLines, lines: t.lines };
  }
  function ew(t, e2, i, r2, n) {
    var s2 = { offset: e2, lines: i, index: 0 }, o2 = { offset: r2, lines: n, index: 0 };
    for (wh(t, s2, o2), wh(t, o2, s2); s2.index < s2.lines.length && o2.index < o2.lines.length; ) {
      var a = s2.lines[s2.index], l = o2.lines[o2.index];
      if ((a[0] === "-" || a[0] === "+") && (l[0] === "-" || l[0] === "+")) tw(t, s2, o2);
      else if (a[0] === "+" && l[0] === " ") {
        var c2;
        (c2 = t.lines).push.apply(c2, ti(Ui(s2)));
      } else if (l[0] === "+" && a[0] === " ") {
        var u2;
        (u2 = t.lines).push.apply(u2, ti(Ui(o2)));
      } else a[0] === "-" && l[0] === " " ? _h(t, s2, o2) : l[0] === "-" && a[0] === " " ? _h(t, o2, s2, true) : a === l ? (t.lines.push(a), s2.index++, o2.index++) : La(t, Ui(s2), Ui(o2));
    }
    xh(t, s2), xh(t, o2), Q_(t);
  }
  function tw(t, e2, i) {
    var r2 = Ui(e2), n = Ui(i);
    if (Sh(r2) && Sh(n)) {
      if (Ia(r2, n) && Eh(i, r2, r2.length - n.length)) {
        var s2;
        (s2 = t.lines).push.apply(s2, ti(r2));
        return;
      } else if (Ia(n, r2) && Eh(e2, n, n.length - r2.length)) {
        var o2;
        (o2 = t.lines).push.apply(o2, ti(n));
        return;
      }
    } else if (Z_(r2, n)) {
      var a;
      (a = t.lines).push.apply(a, ti(r2));
      return;
    }
    La(t, r2, n);
  }
  function _h(t, e2, i, r2) {
    var n = Ui(e2), s2 = iw(i, n);
    if (s2.merged) {
      var o2;
      (o2 = t.lines).push.apply(o2, ti(s2.merged));
    } else La(t, r2 ? s2 : n, r2 ? n : s2);
  }
  function La(t, e2, i) {
    t.conflict = true, t.lines.push({ conflict: true, mine: e2, theirs: i });
  }
  function wh(t, e2, i) {
    for (; e2.offset < i.offset && e2.index < e2.lines.length; ) {
      var r2 = e2.lines[e2.index++];
      t.lines.push(r2), e2.offset++;
    }
  }
  function xh(t, e2) {
    for (; e2.index < e2.lines.length; ) {
      var i = e2.lines[e2.index++];
      t.lines.push(i);
    }
  }
  function Ui(t) {
    for (var e2 = [], i = t.lines[t.index][0]; t.index < t.lines.length; ) {
      var r2 = t.lines[t.index];
      if (i === "-" && r2[0] === "+" && (i = "+"), i === r2[0]) e2.push(r2), t.index++;
      else break;
    }
    return e2;
  }
  function iw(t, e2) {
    for (var i = [], r2 = [], n = 0, s2 = false, o2 = false; n < e2.length && t.index < t.lines.length; ) {
      var a = t.lines[t.index], l = e2[n];
      if (l[0] === "+") break;
      if (s2 = s2 || a[0] !== " ", r2.push(l), n++, a[0] === "+") for (o2 = true; a[0] === "+"; ) i.push(a), a = t.lines[++t.index];
      l.substr(1) === a.substr(1) ? (i.push(a), t.index++) : o2 = true;
    }
    if ((e2[n] || "")[0] === "+" && s2 && (o2 = true), o2) return i;
    for (; n < e2.length; ) r2.push(e2[n++]);
    return { merged: r2, changes: i };
  }
  function Sh(t) {
    return t.reduce(function(e2, i) {
      return e2 && i[0] === "-";
    }, true);
  }
  function Eh(t, e2, i) {
    for (var r2 = 0; r2 < i; r2++) {
      var n = e2[e2.length - i + r2].substr(1);
      if (t.lines[t.index + r2] !== " " + n) return false;
    }
    return t.index += i, true;
  }
  function Na(t) {
    var e2 = 0, i = 0;
    return t.forEach(function(r2) {
      if (typeof r2 != "string") {
        var n = Na(r2.mine), s2 = Na(r2.theirs);
        e2 !== void 0 && (n.oldLines === s2.oldLines ? e2 += n.oldLines : e2 = void 0), i !== void 0 && (n.newLines === s2.newLines ? i += n.newLines : i = void 0);
      } else i !== void 0 && (r2[0] === "+" || r2[0] === " ") && i++, e2 !== void 0 && (r2[0] === "-" || r2[0] === " ") && e2++;
    }), { oldLines: e2, newLines: i };
  }
  function Bh(t) {
    return Array.isArray(t) ? t.map(Bh).reverse() : pt(pt({}, t), {}, { oldFileName: t.newFileName, oldHeader: t.newHeader, newFileName: t.oldFileName, newHeader: t.oldHeader, hunks: t.hunks.map(function(e2) {
      return { oldLines: e2.newLines, oldStart: e2.newStart, newLines: e2.oldLines, newStart: e2.oldStart, lines: e2.lines.map(function(i) {
        return i.startsWith("-") ? "+".concat(i.slice(1)) : i.startsWith("+") ? "-".concat(i.slice(1)) : i;
      }) };
    }) });
  }
  function rw(t) {
    for (var e2 = [], i, r2, n = 0; n < t.length; n++) i = t[n], i.added ? r2 = 1 : i.removed ? r2 = -1 : r2 = 0, e2.push([r2, i.value]);
    return e2;
  }
  function nw(t) {
    for (var e2 = [], i = 0; i < t.length; i++) {
      var r2 = t[i];
      r2.added ? e2.push("<ins>") : r2.removed && e2.push("<del>"), e2.push(sw(r2.value)), r2.added ? e2.push("</ins>") : r2.removed && e2.push("</del>");
    }
    return e2.join("");
  }
  function sw(t) {
    var e2 = t;
    return e2 = e2.replace(/&/g, "&amp;"), e2 = e2.replace(/</g, "&lt;"), e2 = e2.replace(/>/g, "&gt;"), e2 = e2.replace(/"/g, "&quot;"), e2;
  }
  var ub = Ue(qh()), vb = Ue(jh()), yb = Ue(zh()), fb = Ue(ip()), hb = Ue(up()), pb = Ue(Np()), db = Ue(Gp()), bb = Ue(jd()), _b = Ue(Xd()), mb = Ue(nm()), wb = Ue(jm()), gb = Ue(Tv());
  Ue(Lv(), 1);
  var cf = Ue(Zu(), 1), uf = Ue(Xu(), 1), Iy = Ue(af(), 1), ff = Ue(Ay(), 1);
  var Ny = Iy.default;
  var QA = lb.default, XA = cb.default, eI = Ba, tI = ub.default, iI = fb.default, rI = ab(), nI = rI, sI = hb.default, oI = pb.default, aI = db.default, lI = mb.default, cI = gb.default, uI = Ny, fI = ff.default, hI = cf.default, pI = uf.default;
  /*! Bundled license information:
  
  	progress/lib/node-progress.js:
  	  (*!
  	   * node-progress
  	   * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>
  	   * MIT Licensed
  	   *)
  	*/
  return utilsBundleImpl;
}
var hasRequiredUtilsBundle;
function requireUtilsBundle() {
  if (hasRequiredUtilsBundle) return utilsBundle;
  hasRequiredUtilsBundle = 1;
  Object.defineProperty(utilsBundle, "__esModule", {
    value: true
  });
  utilsBundle.minimatch = utilsBundle.mime = utilsBundle.lockfile = utilsBundle.jpegjs = utilsBundle.getProxyForUrl = utilsBundle.dotenv = utilsBundle.diff = utilsBundle.debug = utilsBundle.colors = utilsBundle.SocksProxyAgent = utilsBundle.PNG = utilsBundle.HttpsProxyAgent = void 0;
  utilsBundle.ms = ms2;
  utilsBundle.yaml = utilsBundle.wsServer = utilsBundle.wsSender = utilsBundle.wsReceiver = utilsBundle.ws = utilsBundle.progress = utilsBundle.program = utilsBundle.open = void 0;
  utilsBundle.colors = requireUtilsBundleImpl().colors;
  utilsBundle.debug = requireUtilsBundleImpl().debug;
  utilsBundle.diff = requireUtilsBundleImpl().diff;
  utilsBundle.dotenv = requireUtilsBundleImpl().dotenv;
  utilsBundle.getProxyForUrl = requireUtilsBundleImpl().getProxyForUrl;
  utilsBundle.HttpsProxyAgent = requireUtilsBundleImpl().HttpsProxyAgent;
  utilsBundle.jpegjs = requireUtilsBundleImpl().jpegjs;
  utilsBundle.lockfile = requireUtilsBundleImpl().lockfile;
  utilsBundle.mime = requireUtilsBundleImpl().mime;
  utilsBundle.minimatch = requireUtilsBundleImpl().minimatch;
  utilsBundle.open = requireUtilsBundleImpl().open;
  utilsBundle.PNG = requireUtilsBundleImpl().PNG;
  utilsBundle.program = requireUtilsBundleImpl().program;
  utilsBundle.progress = requireUtilsBundleImpl().progress;
  utilsBundle.SocksProxyAgent = requireUtilsBundleImpl().SocksProxyAgent;
  utilsBundle.yaml = requireUtilsBundleImpl().yaml;
  utilsBundle.ws = requireUtilsBundleImpl().ws;
  utilsBundle.wsServer = requireUtilsBundleImpl().wsServer;
  utilsBundle.wsReceiver = requireUtilsBundleImpl().wsReceiver;
  utilsBundle.wsSender = requireUtilsBundleImpl().wsSender;
  function ms2(ms3) {
    if (!isFinite(ms3)) return "-";
    if (ms3 === 0) return "0ms";
    if (ms3 < 1e3) return ms3.toFixed(0) + "ms";
    const seconds = ms3 / 1e3;
    if (seconds < 60) return seconds.toFixed(1) + "s";
    const minutes = seconds / 60;
    if (minutes < 60) return minutes.toFixed(1) + "m";
    const hours = minutes / 60;
    if (hours < 24) return hours.toFixed(1) + "h";
    const days = hours / 24;
    return days.toFixed(1) + "d";
  }
  return utilsBundle;
}
var hasRequiredDebugLogger;
function requireDebugLogger() {
  if (hasRequiredDebugLogger) return debugLogger;
  hasRequiredDebugLogger = 1;
  Object.defineProperty(debugLogger, "__esModule", {
    value: true
  });
  debugLogger.debugLogger = debugLogger.RecentLogsCollector = void 0;
  var _fs = _interopRequireDefault(require$$0$2);
  var _utilsBundle = requireUtilsBundle();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  const debugLoggerColorMap = {
    "api": 45,
    // cyan
    "protocol": 34,
    // green
    "install": 34,
    // green
    "download": 34,
    // green
    "browser": 0,
    // reset
    "socks": 92,
    // purple
    "client-certificates": 92,
    // purple
    "error": 160,
    // red,
    "channel": 33,
    // blue
    "server": 45,
    // cyan
    "server:channel": 34,
    // green
    "server:metadata": 33,
    // blue,
    "recorder": 45
    // cyan
  };
  class DebugLogger {
    constructor() {
      this._debuggers = /* @__PURE__ */ new Map();
      if (process.env.DEBUG_FILE) {
        const ansiRegex = new RegExp(["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|"), "g");
        const stream2 = _fs.default.createWriteStream(process.env.DEBUG_FILE);
        _utilsBundle.debug.log = (data) => {
          stream2.write(data.replace(ansiRegex, ""));
          stream2.write("\n");
        };
      }
    }
    log(name, message) {
      let cachedDebugger = this._debuggers.get(name);
      if (!cachedDebugger) {
        cachedDebugger = (0, _utilsBundle.debug)(`pw:${name}`);
        this._debuggers.set(name, cachedDebugger);
        cachedDebugger.color = debugLoggerColorMap[name] || 0;
      }
      cachedDebugger(message);
    }
    isEnabled(name) {
      return _utilsBundle.debug.enabled(`pw:${name}`);
    }
  }
  debugLogger.debugLogger = new DebugLogger();
  const kLogCount = 150;
  class RecentLogsCollector {
    constructor() {
      this._logs = [];
    }
    log(message) {
      this._logs.push(message);
      if (this._logs.length === kLogCount * 2) this._logs.splice(0, kLogCount);
    }
    recentLogs() {
      if (this._logs.length > kLogCount) return this._logs.slice(-150);
      return this._logs;
    }
  }
  debugLogger.RecentLogsCollector = RecentLogsCollector;
  return debugLogger;
}
var happyEyeballs = {};
var manualPromise = {};
var stackTrace = {};
var hasRequiredStackTrace;
function requireStackTrace() {
  if (hasRequiredStackTrace) return stackTrace;
  hasRequiredStackTrace = 1;
  Object.defineProperty(stackTrace, "__esModule", {
    value: true
  });
  stackTrace.captureRawStack = captureRawStack;
  stackTrace.parseErrorStack = parseErrorStack;
  stackTrace.parseStackFrame = parseStackFrame;
  stackTrace.rewriteErrorMessage = rewriteErrorMessage;
  stackTrace.splitErrorMessage = splitErrorMessage;
  stackTrace.stringifyStackFrames = stringifyStackFrames;
  function captureRawStack() {
    const stackTraceLimit = Error.stackTraceLimit;
    Error.stackTraceLimit = 50;
    const error = new Error();
    const stack = error.stack || "";
    Error.stackTraceLimit = stackTraceLimit;
    return stack.split("\n");
  }
  function parseStackFrame(text, pathSeparator, showInternalStackFrames) {
    const match = text && text.match(re);
    if (!match) return null;
    let fname = match[2];
    let file2 = match[7];
    if (!file2) return null;
    if (!showInternalStackFrames && (file2.startsWith("internal") || file2.startsWith("node:"))) return null;
    const line = match[8];
    const column = match[9];
    const closeParen = match[11] === ")";
    const frame2 = {
      file: "",
      line: 0,
      column: 0
    };
    if (line) frame2.line = Number(line);
    if (column) frame2.column = Number(column);
    if (closeParen && file2) {
      let closes = 0;
      for (let i = file2.length - 1; i > 0; i--) {
        if (file2.charAt(i) === ")") {
          closes++;
        } else if (file2.charAt(i) === "(" && file2.charAt(i - 1) === " ") {
          closes--;
          if (closes === -1 && file2.charAt(i - 1) === " ") {
            const before = file2.slice(0, i - 1);
            const after = file2.slice(i + 1);
            file2 = after;
            fname += ` (${before}`;
            break;
          }
        }
      }
    }
    if (fname) {
      const methodMatch = fname.match(methodRe);
      if (methodMatch) fname = methodMatch[1];
    }
    if (file2) {
      if (file2.startsWith("file://")) file2 = fileURLToPath(file2, pathSeparator);
      frame2.file = file2;
    }
    if (fname) frame2.function = fname;
    return frame2;
  }
  function rewriteErrorMessage(e2, newMessage) {
    var _e$stack;
    const lines = (((_e$stack = e2.stack) === null || _e$stack === void 0 ? void 0 : _e$stack.split("\n")) || []).filter((l) => l.startsWith("    at "));
    e2.message = newMessage;
    const errorTitle = `${e2.name}: ${e2.message}`;
    if (lines.length) e2.stack = `${errorTitle}
${lines.join("\n")}`;
    return e2;
  }
  function stringifyStackFrames(frames2) {
    const stackLines = [];
    for (const frame2 of frames2) {
      if (frame2.function) stackLines.push(`    at ${frame2.function} (${frame2.file}:${frame2.line}:${frame2.column})`);
      else stackLines.push(`    at ${frame2.file}:${frame2.line}:${frame2.column}`);
    }
    return stackLines;
  }
  function splitErrorMessage(message) {
    const separationIdx = message.indexOf(":");
    return {
      name: separationIdx !== -1 ? message.slice(0, separationIdx) : "",
      message: separationIdx !== -1 && separationIdx + 2 <= message.length ? message.substring(separationIdx + 2) : message
    };
  }
  function parseErrorStack(stack, pathSeparator, showInternalStackFrames = false) {
    const lines = stack.split("\n");
    let firstStackLine = lines.findIndex((line) => line.startsWith("    at "));
    if (firstStackLine === -1) firstStackLine = lines.length;
    const message = lines.slice(0, firstStackLine).join("\n");
    const stackLines = lines.slice(firstStackLine);
    let location2;
    for (const line of stackLines) {
      const frame2 = parseStackFrame(line, pathSeparator, showInternalStackFrames);
      if (!frame2 || !frame2.file) continue;
      if (belongsToNodeModules(frame2.file, pathSeparator)) continue;
      location2 = {
        file: frame2.file,
        column: frame2.column || 0,
        line: frame2.line || 0
      };
      break;
    }
    return {
      message,
      stackLines,
      location: location2
    };
  }
  function belongsToNodeModules(file2, pathSeparator) {
    return file2.includes(`${pathSeparator}node_modules${pathSeparator}`);
  }
  const re = new RegExp("^(?:\\s*at )?(?:(new) )?(?:(.*?) \\()?(?:eval at ([^ ]+) \\((.+?):(\\d+):(\\d+)\\), )?(?:(.+?):(\\d+):(\\d+)|(native))(\\)?)$");
  const methodRe = /^(.*?) \[as (.*?)\]$/;
  function fileURLToPath(fileUrl, pathSeparator) {
    if (!fileUrl.startsWith("file://")) return fileUrl;
    let path = decodeURIComponent(fileUrl.slice(7));
    if (path.startsWith("/") && /^[a-zA-Z]:/.test(path.slice(1))) path = path.slice(1);
    return path.replace(/\//g, pathSeparator);
  }
  return stackTrace;
}
var hasRequiredManualPromise;
function requireManualPromise() {
  if (hasRequiredManualPromise) return manualPromise;
  hasRequiredManualPromise = 1;
  Object.defineProperty(manualPromise, "__esModule", {
    value: true
  });
  manualPromise.ManualPromise = manualPromise.LongStandingScope = void 0;
  var _stackTrace = requireStackTrace();
  class ManualPromise extends Promise {
    constructor() {
      let resolve2;
      let reject;
      super((f2, r2) => {
        resolve2 = f2;
        reject = r2;
      });
      this._resolve = void 0;
      this._reject = void 0;
      this._isDone = void 0;
      this._isDone = false;
      this._resolve = resolve2;
      this._reject = reject;
    }
    isDone() {
      return this._isDone;
    }
    resolve(t) {
      this._isDone = true;
      this._resolve(t);
    }
    reject(e2) {
      this._isDone = true;
      this._reject(e2);
    }
    static get [Symbol.species]() {
      return Promise;
    }
    get [Symbol.toStringTag]() {
      return "ManualPromise";
    }
  }
  manualPromise.ManualPromise = ManualPromise;
  class LongStandingScope {
    constructor() {
      this._terminateError = void 0;
      this._closeError = void 0;
      this._terminatePromises = /* @__PURE__ */ new Map();
      this._isClosed = false;
    }
    reject(error) {
      this._isClosed = true;
      this._terminateError = error;
      for (const p of this._terminatePromises.keys()) p.resolve(error);
    }
    close(error) {
      this._isClosed = true;
      this._closeError = error;
      for (const [p, frames2] of this._terminatePromises) p.resolve(cloneError(error, frames2));
    }
    isClosed() {
      return this._isClosed;
    }
    static async raceMultiple(scopes, promise) {
      return Promise.race(scopes.map((s2) => s2.race(promise)));
    }
    async race(promise) {
      return this._race(Array.isArray(promise) ? promise : [promise], false);
    }
    async safeRace(promise, defaultValue) {
      return this._race([promise], true, defaultValue);
    }
    async _race(promises, safe, defaultValue) {
      const terminatePromise = new ManualPromise();
      const frames2 = (0, _stackTrace.captureRawStack)();
      if (this._terminateError) terminatePromise.resolve(this._terminateError);
      if (this._closeError) terminatePromise.resolve(cloneError(this._closeError, frames2));
      this._terminatePromises.set(terminatePromise, frames2);
      try {
        return await Promise.race([terminatePromise.then((e2) => safe ? defaultValue : Promise.reject(e2)), ...promises]);
      } finally {
        this._terminatePromises.delete(terminatePromise);
      }
    }
  }
  manualPromise.LongStandingScope = LongStandingScope;
  function cloneError(error, frames2) {
    const clone = new Error();
    clone.name = error.name;
    clone.message = error.message;
    clone.stack = [error.name + ":" + error.message, ...frames2].join("\n");
    return clone;
  }
  return manualPromise;
}
var time$1 = {};
var hasRequiredTime$1;
function requireTime$1() {
  if (hasRequiredTime$1) return time$1;
  hasRequiredTime$1 = 1;
  Object.defineProperty(time$1, "__esModule", {
    value: true
  });
  time$1.monotonicTime = monotonicTime;
  function monotonicTime() {
    return (performance.now() * 1e3 | 0) / 1e3;
  }
  return time$1;
}
var hasRequiredHappyEyeballs;
function requireHappyEyeballs() {
  if (hasRequiredHappyEyeballs) return happyEyeballs;
  hasRequiredHappyEyeballs = 1;
  Object.defineProperty(happyEyeballs, "__esModule", {
    value: true
  });
  happyEyeballs.createConnectionAsync = createConnectionAsync;
  happyEyeballs.createSocket = createSocket;
  happyEyeballs.createTLSSocket = createTLSSocket;
  happyEyeballs.httpsHappyEyeballsAgent = happyEyeballs.httpHappyEyeballsAgent = void 0;
  happyEyeballs.timingForSocket = timingForSocket;
  var _dns = _interopRequireDefault(require$$15$1);
  var _http = _interopRequireDefault(require$$19);
  var _https = _interopRequireDefault(require$$2);
  var _net = _interopRequireDefault(require$$8);
  var _tls = _interopRequireDefault(require$$9);
  var _assert = requireAssert$1();
  var _manualPromise = requireManualPromise();
  var _time = requireTime$1();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  const connectionAttemptDelayMs = 300;
  const kDNSLookupAt = Symbol("kDNSLookupAt");
  const kTCPConnectionAt = Symbol("kTCPConnectionAt");
  class HttpHappyEyeballsAgent extends _http.default.Agent {
    createConnection(options, oncreate) {
      if (_net.default.isIP(clientRequestArgsToHostName(options))) return _net.default.createConnection(options);
      createConnectionAsync(
        options,
        oncreate,
        /* useTLS */
        false
      ).catch((err) => oncreate === null || oncreate === void 0 ? void 0 : oncreate(err));
    }
  }
  class HttpsHappyEyeballsAgent extends _https.default.Agent {
    createConnection(options, oncreate) {
      if (_net.default.isIP(clientRequestArgsToHostName(options))) return _tls.default.connect(options);
      createConnectionAsync(
        options,
        oncreate,
        /* useTLS */
        true
      ).catch((err) => oncreate === null || oncreate === void 0 ? void 0 : oncreate(err));
    }
  }
  happyEyeballs.httpsHappyEyeballsAgent = new HttpsHappyEyeballsAgent({
    keepAlive: true
  });
  happyEyeballs.httpHappyEyeballsAgent = new HttpHappyEyeballsAgent({
    keepAlive: true
  });
  async function createSocket(host, port) {
    return new Promise((resolve2, reject) => {
      if (_net.default.isIP(host)) {
        const socket = _net.default.createConnection({
          host,
          port
        });
        socket.on("connect", () => resolve2(socket));
        socket.on("error", (error) => reject(error));
      } else {
        createConnectionAsync(
          {
            host,
            port
          },
          (err, socket) => {
            if (err) reject(err);
            if (socket) resolve2(socket);
          },
          /* useTLS */
          false
        ).catch((err) => reject(err));
      }
    });
  }
  async function createTLSSocket(options) {
    return new Promise((resolve2, reject) => {
      (0, _assert.assert)(options.host, "host is required");
      if (_net.default.isIP(options.host)) {
        const socket = _tls.default.connect(options);
        socket.on("secureConnect", () => resolve2(socket));
        socket.on("error", (error) => reject(error));
      } else {
        createConnectionAsync(options, (err, socket) => {
          if (err) reject(err);
          if (socket) {
            socket.on("secureConnect", () => resolve2(socket));
            socket.on("error", (error) => reject(error));
          }
        }, true).catch((err) => reject(err));
      }
    });
  }
  async function createConnectionAsync(options, oncreate, useTLS) {
    const lookup = options.__testHookLookup || lookupAddresses;
    const hostname = clientRequestArgsToHostName(options);
    const addresses = await lookup(hostname);
    const dnsLookupAt = (0, _time.monotonicTime)();
    const sockets = /* @__PURE__ */ new Set();
    let firstError;
    let errorCount = 0;
    const handleError = (socket, err) => {
      if (!sockets.delete(socket)) return;
      ++errorCount;
      firstError !== null && firstError !== void 0 ? firstError : firstError = err;
      if (errorCount === addresses.length) oncreate === null || oncreate === void 0 || oncreate(firstError);
    };
    const connected = new _manualPromise.ManualPromise();
    for (const {
      address
    } of addresses) {
      const socket = useTLS ? _tls.default.connect({
        ...options,
        port: options.port,
        host: address,
        servername: hostname
      }) : _net.default.createConnection({
        ...options,
        port: options.port,
        host: address
      });
      socket[kDNSLookupAt] = dnsLookupAt;
      socket.on("connect", () => {
        socket[kTCPConnectionAt] = (0, _time.monotonicTime)();
        connected.resolve();
        oncreate === null || oncreate === void 0 || oncreate(null, socket);
        sockets.delete(socket);
        for (const s2 of sockets) s2.destroy();
        sockets.clear();
      });
      socket.on("timeout", () => {
        socket.destroy();
        handleError(socket, new Error("Connection timeout"));
      });
      socket.on("error", (e2) => handleError(socket, e2));
      sockets.add(socket);
      await Promise.race([connected, new Promise((f2) => setTimeout(f2, connectionAttemptDelayMs))]);
      if (connected.isDone()) break;
    }
  }
  async function lookupAddresses(hostname) {
    const addresses = await _dns.default.promises.lookup(hostname, {
      all: true,
      family: 0,
      verbatim: true
    });
    let firstFamily = addresses.filter(({
      family
    }) => family === 6);
    let secondFamily = addresses.filter(({
      family
    }) => family === 4);
    if (firstFamily.length && firstFamily[0] !== addresses[0]) {
      const tmp = firstFamily;
      firstFamily = secondFamily;
      secondFamily = tmp;
    }
    const result = [];
    for (let i = 0; i < Math.max(firstFamily.length, secondFamily.length); i++) {
      if (firstFamily[i]) result.push(firstFamily[i]);
      if (secondFamily[i]) result.push(secondFamily[i]);
    }
    return result;
  }
  function clientRequestArgsToHostName(options) {
    if (options.hostname) return options.hostname;
    if (options.host) return options.host;
    throw new Error("Either options.hostname or options.host must be provided");
  }
  function timingForSocket(socket) {
    return {
      dnsLookupAt: socket[kDNSLookupAt],
      tcpConnectionAt: socket[kTCPConnectionAt]
    };
  }
  return happyEyeballs;
}
var hasRequiredSocksProxy;
function requireSocksProxy() {
  if (hasRequiredSocksProxy) return socksProxy;
  hasRequiredSocksProxy = 1;
  Object.defineProperty(socksProxy, "__esModule", {
    value: true
  });
  socksProxy.SocksProxyHandler = socksProxy.SocksProxy = void 0;
  socksProxy.parsePattern = parsePattern;
  var _events = _interopRequireDefault(require$$0$4);
  var _net = _interopRequireDefault(require$$8);
  var _assert = requireAssert$1();
  var _crypto = requireCrypto();
  var _debugLogger = requireDebugLogger();
  var _happyEyeballs = requireHappyEyeballs();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  var SocksAuth = /* @__PURE__ */ function(SocksAuth2) {
    SocksAuth2[SocksAuth2["NO_AUTHENTICATION_REQUIRED"] = 0] = "NO_AUTHENTICATION_REQUIRED";
    SocksAuth2[SocksAuth2["GSSAPI"] = 1] = "GSSAPI";
    SocksAuth2[SocksAuth2["USERNAME_PASSWORD"] = 2] = "USERNAME_PASSWORD";
    SocksAuth2[SocksAuth2["NO_ACCEPTABLE_METHODS"] = 255] = "NO_ACCEPTABLE_METHODS";
    return SocksAuth2;
  }(SocksAuth || {});
  var SocksAddressType = /* @__PURE__ */ function(SocksAddressType2) {
    SocksAddressType2[SocksAddressType2["IPv4"] = 1] = "IPv4";
    SocksAddressType2[SocksAddressType2["FqName"] = 3] = "FqName";
    SocksAddressType2[SocksAddressType2["IPv6"] = 4] = "IPv6";
    return SocksAddressType2;
  }(SocksAddressType || {});
  var SocksCommand = /* @__PURE__ */ function(SocksCommand2) {
    SocksCommand2[SocksCommand2["CONNECT"] = 1] = "CONNECT";
    SocksCommand2[SocksCommand2["BIND"] = 2] = "BIND";
    SocksCommand2[SocksCommand2["UDP_ASSOCIATE"] = 3] = "UDP_ASSOCIATE";
    return SocksCommand2;
  }(SocksCommand || {});
  var SocksReply = /* @__PURE__ */ function(SocksReply2) {
    SocksReply2[SocksReply2["Succeeded"] = 0] = "Succeeded";
    SocksReply2[SocksReply2["GeneralServerFailure"] = 1] = "GeneralServerFailure";
    SocksReply2[SocksReply2["NotAllowedByRuleSet"] = 2] = "NotAllowedByRuleSet";
    SocksReply2[SocksReply2["NetworkUnreachable"] = 3] = "NetworkUnreachable";
    SocksReply2[SocksReply2["HostUnreachable"] = 4] = "HostUnreachable";
    SocksReply2[SocksReply2["ConnectionRefused"] = 5] = "ConnectionRefused";
    SocksReply2[SocksReply2["TtlExpired"] = 6] = "TtlExpired";
    SocksReply2[SocksReply2["CommandNotSupported"] = 7] = "CommandNotSupported";
    SocksReply2[SocksReply2["AddressTypeNotSupported"] = 8] = "AddressTypeNotSupported";
    return SocksReply2;
  }(SocksReply || {});
  class SocksConnection {
    constructor(uid, socket, client) {
      this._buffer = Buffer.from([]);
      this._offset = 0;
      this._fence = 0;
      this._fenceCallback = void 0;
      this._socket = void 0;
      this._boundOnData = void 0;
      this._uid = void 0;
      this._client = void 0;
      this._uid = uid;
      this._socket = socket;
      this._client = client;
      this._boundOnData = this._onData.bind(this);
      socket.on("data", this._boundOnData);
      socket.on("close", () => this._onClose());
      socket.on("end", () => this._onClose());
      socket.on("error", () => this._onClose());
      this._run().catch(() => this._socket.end());
    }
    async _run() {
      (0, _assert.assert)(await this._authenticate());
      const {
        command,
        host,
        port
      } = await this._parseRequest();
      if (command !== SocksCommand.CONNECT) {
        this._writeBytes(Buffer.from([
          5,
          SocksReply.CommandNotSupported,
          0,
          // RSV
          1,
          // IPv4
          0,
          0,
          0,
          0,
          // Address
          0,
          0
          // Port
        ]));
        return;
      }
      this._socket.off("data", this._boundOnData);
      this._client.onSocketRequested({
        uid: this._uid,
        host,
        port
      });
    }
    async _authenticate() {
      const version2 = await this._readByte();
      (0, _assert.assert)(version2 === 5, "The VER field must be set to x05 for this version of the protocol, was " + version2);
      const nMethods = await this._readByte();
      (0, _assert.assert)(nMethods, "No authentication methods specified");
      const methods = await this._readBytes(nMethods);
      for (const method of methods) {
        if (method === 0) {
          this._writeBytes(Buffer.from([version2, method]));
          return true;
        }
      }
      this._writeBytes(Buffer.from([version2, SocksAuth.NO_ACCEPTABLE_METHODS]));
      return false;
    }
    async _parseRequest() {
      const version2 = await this._readByte();
      (0, _assert.assert)(version2 === 5, "The VER field must be set to x05 for this version of the protocol, was " + version2);
      const command = await this._readByte();
      await this._readByte();
      const addressType = await this._readByte();
      let host = "";
      switch (addressType) {
        case SocksAddressType.IPv4:
          host = (await this._readBytes(4)).join(".");
          break;
        case SocksAddressType.FqName:
          const length = await this._readByte();
          host = (await this._readBytes(length)).toString();
          break;
        case SocksAddressType.IPv6:
          const bytes = await this._readBytes(16);
          const tokens = [];
          for (let i = 0; i < 8; ++i) tokens.push(bytes.readUInt16BE(i * 2).toString(16));
          host = tokens.join(":");
          break;
      }
      const port = (await this._readBytes(2)).readUInt16BE(0);
      this._buffer = Buffer.from([]);
      this._offset = 0;
      this._fence = 0;
      return {
        command,
        host,
        port
      };
    }
    async _readByte() {
      const buffer2 = await this._readBytes(1);
      return buffer2[0];
    }
    async _readBytes(length) {
      this._fence = this._offset + length;
      if (!this._buffer || this._buffer.length < this._fence) await new Promise((f2) => this._fenceCallback = f2);
      this._offset += length;
      return this._buffer.slice(this._offset - length, this._offset);
    }
    _writeBytes(buffer2) {
      if (this._socket.writable) this._socket.write(buffer2);
    }
    _onClose() {
      this._client.onSocketClosed({
        uid: this._uid
      });
    }
    _onData(buffer2) {
      this._buffer = Buffer.concat([this._buffer, buffer2]);
      if (this._fenceCallback && this._buffer.length >= this._fence) {
        const callback = this._fenceCallback;
        this._fenceCallback = void 0;
        callback();
      }
    }
    socketConnected(host, port) {
      this._writeBytes(Buffer.from([
        5,
        SocksReply.Succeeded,
        0,
        // RSV
        ...ipToSocksAddress(host),
        // ATYP, Address
        port >> 8,
        port & 255
        // Port
      ]));
      this._socket.on("data", (data) => this._client.onSocketData({
        uid: this._uid,
        data
      }));
    }
    socketFailed(errorCode) {
      const buffer2 = Buffer.from([
        5,
        0,
        0,
        // RSV
        ...ipToSocksAddress("0.0.0.0"),
        // ATYP, Address
        0,
        0
        // Port
      ]);
      switch (errorCode) {
        case "ENOENT":
        case "ENOTFOUND":
        case "ETIMEDOUT":
        case "EHOSTUNREACH":
          buffer2[1] = SocksReply.HostUnreachable;
          break;
        case "ENETUNREACH":
          buffer2[1] = SocksReply.NetworkUnreachable;
          break;
        case "ECONNREFUSED":
          buffer2[1] = SocksReply.ConnectionRefused;
          break;
        case "ERULESET":
          buffer2[1] = SocksReply.NotAllowedByRuleSet;
          break;
      }
      this._writeBytes(buffer2);
      this._socket.end();
    }
    sendData(data) {
      this._socket.write(data);
    }
    end() {
      this._socket.end();
    }
    error(error) {
      this._socket.destroy(new Error(error));
    }
  }
  function hexToNumber(hex) {
    return [...hex].reduce((value, digit) => {
      const code = digit.charCodeAt(0);
      if (code >= 48 && code <= 57)
        return value + code;
      if (code >= 97 && code <= 102)
        return value + (code - 97) + 10;
      if (code >= 65 && code <= 70)
        return value + (code - 65) + 10;
      throw new Error("Invalid IPv6 token " + hex);
    }, 0);
  }
  function ipToSocksAddress(address) {
    if (_net.default.isIPv4(address)) {
      return [
        1,
        // IPv4
        ...address.split(".", 4).map((t) => +t & 255)
        // Address
      ];
    }
    if (_net.default.isIPv6(address)) {
      const result = [4];
      const tokens = address.split(":", 8);
      while (tokens.length < 8) tokens.unshift("");
      for (const token of tokens) {
        const value = hexToNumber(token);
        result.push(value >> 8 & 255, value & 255);
      }
      return result;
    }
    throw new Error("Only IPv4 and IPv6 addresses are supported");
  }
  function starMatchToRegex(pattern) {
    const source = pattern.split("*").map((s2) => {
      return s2.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    }).join(".*");
    return new RegExp("^" + source + "$");
  }
  function parsePattern(pattern) {
    if (!pattern) return () => false;
    const matchers = pattern.split(",").map((token) => {
      const match = token.match(/^(.*?)(?::(\d+))?$/);
      if (!match) throw new Error(`Unsupported token "${token}" in pattern "${pattern}"`);
      const tokenPort = match[2] ? +match[2] : void 0;
      const portMatches = (port) => tokenPort === void 0 || tokenPort === port;
      let tokenHost = match[1];
      if (tokenHost === "<loopback>") {
        return (host, port) => {
          if (!portMatches(port)) return false;
          return host === "localhost" || host.endsWith(".localhost") || host === "127.0.0.1" || host === "[::1]";
        };
      }
      if (tokenHost === "*") return (host, port) => portMatches(port);
      if (_net.default.isIPv4(tokenHost) || _net.default.isIPv6(tokenHost)) return (host, port) => host === tokenHost && portMatches(port);
      if (tokenHost[0] === ".") tokenHost = "*" + tokenHost;
      const tokenRegex = starMatchToRegex(tokenHost);
      return (host, port) => {
        if (!portMatches(port)) return false;
        if (_net.default.isIPv4(host) || _net.default.isIPv6(host)) return false;
        return !!host.match(tokenRegex);
      };
    });
    return (host, port) => matchers.some((matcher) => matcher(host, port));
  }
  class SocksProxy extends _events.default {
    constructor() {
      super();
      this._server = void 0;
      this._connections = /* @__PURE__ */ new Map();
      this._sockets = /* @__PURE__ */ new Set();
      this._closed = false;
      this._port = void 0;
      this._patternMatcher = () => false;
      this._directSockets = /* @__PURE__ */ new Map();
      this._server = new _net.default.Server((socket) => {
        const uid = (0, _crypto.createGuid)();
        const connection2 = new SocksConnection(uid, socket, this);
        this._connections.set(uid, connection2);
      });
      this._server.on("connection", (socket) => {
        if (this._closed) {
          socket.destroy();
          return;
        }
        this._sockets.add(socket);
        socket.once("close", () => this._sockets.delete(socket));
      });
    }
    setPattern(pattern) {
      try {
        this._patternMatcher = parsePattern(pattern);
      } catch (e2) {
        this._patternMatcher = () => false;
      }
    }
    async _handleDirect(request) {
      try {
        var _this$_connections$ge4;
        const socket = await (0, _happyEyeballs.createSocket)(request.host, request.port);
        socket.on("data", (data) => {
          var _this$_connections$ge;
          return (_this$_connections$ge = this._connections.get(request.uid)) === null || _this$_connections$ge === void 0 ? void 0 : _this$_connections$ge.sendData(data);
        });
        socket.on("error", (error) => {
          var _this$_connections$ge2;
          (_this$_connections$ge2 = this._connections.get(request.uid)) === null || _this$_connections$ge2 === void 0 || _this$_connections$ge2.error(error.message);
          this._directSockets.delete(request.uid);
        });
        socket.on("end", () => {
          var _this$_connections$ge3;
          (_this$_connections$ge3 = this._connections.get(request.uid)) === null || _this$_connections$ge3 === void 0 || _this$_connections$ge3.end();
          this._directSockets.delete(request.uid);
        });
        const localAddress = socket.localAddress;
        const localPort = socket.localPort;
        this._directSockets.set(request.uid, socket);
        (_this$_connections$ge4 = this._connections.get(request.uid)) === null || _this$_connections$ge4 === void 0 || _this$_connections$ge4.socketConnected(localAddress, localPort);
      } catch (error) {
        var _this$_connections$ge5;
        (_this$_connections$ge5 = this._connections.get(request.uid)) === null || _this$_connections$ge5 === void 0 || _this$_connections$ge5.socketFailed(error.code);
      }
    }
    port() {
      return this._port;
    }
    async listen(port, hostname) {
      return new Promise((f2) => {
        this._server.listen(port, hostname, () => {
          const port2 = this._server.address().port;
          this._port = port2;
          f2(port2);
        });
      });
    }
    async close() {
      if (this._closed) return;
      this._closed = true;
      for (const socket of this._sockets) socket.destroy();
      this._sockets.clear();
      await new Promise((f2) => this._server.close(f2));
    }
    onSocketRequested(payload) {
      if (!this._patternMatcher(payload.host, payload.port)) {
        this._handleDirect(payload);
        return;
      }
      this.emit(SocksProxy.Events.SocksRequested, payload);
    }
    onSocketData(payload) {
      const direct = this._directSockets.get(payload.uid);
      if (direct) {
        direct.write(payload.data);
        return;
      }
      this.emit(SocksProxy.Events.SocksData, payload);
    }
    onSocketClosed(payload) {
      const direct = this._directSockets.get(payload.uid);
      if (direct) {
        direct.destroy();
        this._directSockets.delete(payload.uid);
        return;
      }
      this.emit(SocksProxy.Events.SocksClosed, payload);
    }
    socketConnected({
      uid,
      host,
      port
    }) {
      var _this$_connections$ge6;
      (_this$_connections$ge6 = this._connections.get(uid)) === null || _this$_connections$ge6 === void 0 || _this$_connections$ge6.socketConnected(host, port);
    }
    socketFailed({
      uid,
      errorCode
    }) {
      var _this$_connections$ge7;
      (_this$_connections$ge7 = this._connections.get(uid)) === null || _this$_connections$ge7 === void 0 || _this$_connections$ge7.socketFailed(errorCode);
    }
    sendSocketData({
      uid,
      data
    }) {
      var _this$_connections$ge8;
      (_this$_connections$ge8 = this._connections.get(uid)) === null || _this$_connections$ge8 === void 0 || _this$_connections$ge8.sendData(data);
    }
    sendSocketEnd({
      uid
    }) {
      var _this$_connections$ge9;
      (_this$_connections$ge9 = this._connections.get(uid)) === null || _this$_connections$ge9 === void 0 || _this$_connections$ge9.end();
    }
    sendSocketError({
      uid,
      error
    }) {
      var _this$_connections$ge10;
      (_this$_connections$ge10 = this._connections.get(uid)) === null || _this$_connections$ge10 === void 0 || _this$_connections$ge10.error(error);
    }
  }
  socksProxy.SocksProxy = SocksProxy;
  SocksProxy.Events = {
    SocksRequested: "socksRequested",
    SocksData: "socksData",
    SocksClosed: "socksClosed"
  };
  class SocksProxyHandler extends _events.default {
    constructor(pattern, redirectPortForTest) {
      super();
      this._sockets = /* @__PURE__ */ new Map();
      this._patternMatcher = () => false;
      this._redirectPortForTest = void 0;
      this._patternMatcher = parsePattern(pattern);
      this._redirectPortForTest = redirectPortForTest;
    }
    cleanup() {
      for (const uid of this._sockets.keys()) this.socketClosed({
        uid
      });
    }
    async socketRequested({
      uid,
      host,
      port
    }) {
      _debugLogger.debugLogger.log("socks", `[${uid}] => request ${host}:${port}`);
      if (!this._patternMatcher(host, port)) {
        const payload = {
          uid,
          errorCode: "ERULESET"
        };
        _debugLogger.debugLogger.log("socks", `[${uid}] <= pattern error ${payload.errorCode}`);
        this.emit(SocksProxyHandler.Events.SocksFailed, payload);
        return;
      }
      if (host === "local.playwright") host = "localhost";
      try {
        if (this._redirectPortForTest) port = this._redirectPortForTest;
        const socket = await (0, _happyEyeballs.createSocket)(host, port);
        socket.on("data", (data) => {
          const payload2 = {
            uid,
            data
          };
          this.emit(SocksProxyHandler.Events.SocksData, payload2);
        });
        socket.on("error", (error) => {
          const payload2 = {
            uid,
            error: error.message
          };
          _debugLogger.debugLogger.log("socks", `[${uid}] <= network socket error ${payload2.error}`);
          this.emit(SocksProxyHandler.Events.SocksError, payload2);
          this._sockets.delete(uid);
        });
        socket.on("end", () => {
          const payload2 = {
            uid
          };
          _debugLogger.debugLogger.log("socks", `[${uid}] <= network socket closed`);
          this.emit(SocksProxyHandler.Events.SocksEnd, payload2);
          this._sockets.delete(uid);
        });
        const localAddress = socket.localAddress;
        const localPort = socket.localPort;
        this._sockets.set(uid, socket);
        const payload = {
          uid,
          host: localAddress,
          port: localPort
        };
        _debugLogger.debugLogger.log("socks", `[${uid}] <= connected to network ${payload.host}:${payload.port}`);
        this.emit(SocksProxyHandler.Events.SocksConnected, payload);
      } catch (error) {
        const payload = {
          uid,
          errorCode: error.code
        };
        _debugLogger.debugLogger.log("socks", `[${uid}] <= connect error ${payload.errorCode}`);
        this.emit(SocksProxyHandler.Events.SocksFailed, payload);
      }
    }
    sendSocketData({
      uid,
      data
    }) {
      var _this$_sockets$get;
      (_this$_sockets$get = this._sockets.get(uid)) === null || _this$_sockets$get === void 0 || _this$_sockets$get.write(data);
    }
    socketClosed({
      uid
    }) {
      var _this$_sockets$get2;
      _debugLogger.debugLogger.log("socks", `[${uid}] <= browser socket closed`);
      (_this$_sockets$get2 = this._sockets.get(uid)) === null || _this$_sockets$get2 === void 0 || _this$_sockets$get2.destroy();
      this._sockets.delete(uid);
    }
  }
  socksProxy.SocksProxyHandler = SocksProxyHandler;
  SocksProxyHandler.Events = {
    SocksConnected: "socksConnected",
    SocksData: "socksData",
    SocksError: "socksError",
    SocksFailed: "socksFailed",
    SocksEnd: "socksEnd"
  };
  return socksProxy;
}
var server = {};
function commonjsRequire(path) {
  throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var registry = {};
var browserFetcher = {};
var userAgent = {};
var linuxUtils = {};
var hasRequiredLinuxUtils;
function requireLinuxUtils() {
  if (hasRequiredLinuxUtils) return linuxUtils;
  hasRequiredLinuxUtils = 1;
  Object.defineProperty(linuxUtils, "__esModule", {
    value: true
  });
  linuxUtils.getLinuxDistributionInfoSync = getLinuxDistributionInfoSync;
  var _fs = _interopRequireDefault(require$$0$2);
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  let didFailToReadOSRelease = false;
  let osRelease;
  function getLinuxDistributionInfoSync() {
    if (process.platform !== "linux") return void 0;
    if (!osRelease && !didFailToReadOSRelease) {
      try {
        var _fields$get, _fields$get2;
        const osReleaseText = _fs.default.readFileSync("/etc/os-release", "utf8");
        const fields = parseOSReleaseText(osReleaseText);
        osRelease = {
          id: (_fields$get = fields.get("id")) !== null && _fields$get !== void 0 ? _fields$get : "",
          version: (_fields$get2 = fields.get("version_id")) !== null && _fields$get2 !== void 0 ? _fields$get2 : ""
        };
      } catch (e2) {
        didFailToReadOSRelease = true;
      }
    }
    return osRelease;
  }
  function parseOSReleaseText(osReleaseText) {
    const fields = /* @__PURE__ */ new Map();
    for (const line of osReleaseText.split("\n")) {
      const tokens = line.split("=");
      const name = tokens.shift();
      let value = tokens.join("=").trim();
      if (value.startsWith('"') && value.endsWith('"')) value = value.substring(1, value.length - 1);
      if (!name) continue;
      fields.set(name.toLowerCase(), value);
    }
    return fields;
  }
  return linuxUtils;
}
const version = "1.51.0";
const require$$10 = {
  version
};
var hasRequiredUserAgent;
function requireUserAgent() {
  if (hasRequiredUserAgent) return userAgent;
  hasRequiredUserAgent = 1;
  Object.defineProperty(userAgent, "__esModule", {
    value: true
  });
  userAgent.getEmbedderName = getEmbedderName;
  userAgent.getPlaywrightVersion = getPlaywrightVersion;
  userAgent.getUserAgent = getUserAgent;
  var _child_process = require$$0$3;
  var _os = _interopRequireDefault(require$$1$3);
  var _linuxUtils = requireLinuxUtils();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  let cachedUserAgent;
  function getUserAgent() {
    if (cachedUserAgent) return cachedUserAgent;
    try {
      cachedUserAgent = determineUserAgent();
    } catch (e2) {
      cachedUserAgent = "Playwright/unknown";
    }
    return cachedUserAgent;
  }
  function determineUserAgent() {
    let osIdentifier = "unknown";
    let osVersion = "unknown";
    if (process.platform === "win32") {
      const version2 = _os.default.release().split(".");
      osIdentifier = "windows";
      osVersion = `${version2[0]}.${version2[1]}`;
    } else if (process.platform === "darwin") {
      const version2 = (0, _child_process.execSync)("sw_vers -productVersion", {
        stdio: ["ignore", "pipe", "ignore"]
      }).toString().trim().split(".");
      osIdentifier = "macOS";
      osVersion = `${version2[0]}.${version2[1]}`;
    } else if (process.platform === "linux") {
      const distroInfo = (0, _linuxUtils.getLinuxDistributionInfoSync)();
      if (distroInfo) {
        osIdentifier = distroInfo.id || "linux";
        osVersion = distroInfo.version || "unknown";
      } else {
        osIdentifier = "linux";
      }
    }
    const additionalTokens = [];
    if (process.env.CI) additionalTokens.push("CI/1");
    const serializedTokens = additionalTokens.length ? " " + additionalTokens.join(" ") : "";
    const {
      embedderName,
      embedderVersion
    } = getEmbedderName();
    return `Playwright/${getPlaywrightVersion()} (${_os.default.arch()}; ${osIdentifier} ${osVersion}) ${embedderName}/${embedderVersion}${serializedTokens}`;
  }
  function getEmbedderName() {
    let embedderName = "unknown";
    let embedderVersion = "unknown";
    if (!process.env.PW_LANG_NAME) {
      embedderName = "node";
      embedderVersion = process.version.substring(1).split(".").slice(0, 2).join(".");
    } else if (["node", "python", "java", "csharp"].includes(process.env.PW_LANG_NAME)) {
      var _process$env$PW_LANG_;
      embedderName = process.env.PW_LANG_NAME;
      embedderVersion = (_process$env$PW_LANG_ = process.env.PW_LANG_NAME_VERSION) !== null && _process$env$PW_LANG_ !== void 0 ? _process$env$PW_LANG_ : "unknown";
    }
    return {
      embedderName,
      embedderVersion
    };
  }
  function getPlaywrightVersion(majorMinorOnly = false) {
    const version2 = process.env.PW_VERSION_OVERRIDE || require$$10.version;
    return majorMinorOnly ? version2.split(".").slice(0, 2).join(".") : version2;
  }
  return userAgent;
}
var fileUtils$1 = {};
var zipBundle = {};
var zipBundleImpl;
var hasRequiredZipBundleImpl;
function requireZipBundleImpl() {
  if (hasRequiredZipBundleImpl) return zipBundleImpl;
  hasRequiredZipBundleImpl = 1;
  var pt = Object.create;
  var se = Object.defineProperty;
  var mt = Object.getOwnPropertyDescriptor;
  var xt = Object.getOwnPropertyNames;
  var vt = Object.getPrototypeOf, Et = Object.prototype.hasOwnProperty;
  var E = (e2, r2) => () => (r2 || e2((r2 = { exports: {} }).exports, r2), r2.exports), wt = (e2, r2) => {
    for (var t in r2) se(e2, t, { get: r2[t], enumerable: true });
  }, or = (e2, r2, t, n) => {
    if (r2 && typeof r2 == "object" || typeof r2 == "function") for (let i of xt(r2)) !Et.call(e2, i) && i !== t && se(e2, i, { get: () => r2[i], enumerable: !(n = mt(r2, i)) || n.enumerable });
    return e2;
  };
  var Te = (e2, r2, t) => (t = e2 != null ? pt(vt(e2)) : {}, or(!e2 || !e2.__esModule ? se(t, "default", { value: e2, enumerable: true }) : t, e2)), gt = (e2) => or(se({}, "__esModule", { value: true }), e2);
  var Be = E((Dn, sr) => {
    var U = require$$14.Buffer, Ue = [0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918e3, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117];
    typeof Int32Array != "undefined" && (Ue = new Int32Array(Ue));
    function fr(e2) {
      if (U.isBuffer(e2)) return e2;
      var r2 = typeof U.alloc == "function" && typeof U.from == "function";
      if (typeof e2 == "number") return r2 ? U.alloc(e2) : new U(e2);
      if (typeof e2 == "string") return r2 ? U.from(e2) : new U(e2);
      throw new Error("input must be buffer, number, or string, received " + typeof e2);
    }
    function yt(e2) {
      var r2 = fr(4);
      return r2.writeInt32BE(e2, 0), r2;
    }
    function Ne(e2, r2) {
      e2 = fr(e2), U.isBuffer(r2) && (r2 = r2.readUInt32BE(0));
      for (var t = ~~r2 ^ -1, n = 0; n < e2.length; n++) t = Ue[(t ^ e2[n]) & 255] ^ t >>> 8;
      return t ^ -1;
    }
    function Me() {
      return yt(Ne.apply(null, arguments));
    }
    Me.signed = function() {
      return Ne.apply(null, arguments);
    };
    Me.unsigned = function() {
      return Ne.apply(null, arguments) >>> 0;
    };
    sr.exports = Me;
  });
  var br = E((Ge) => {
    var ar = require$$0$2, de = require$$12.Transform, ur = require$$12.PassThrough, cr = require$$13, We = require$$1$2, Ct = require$$0$4.EventEmitter, lr = Be();
    Ge.ZipFile = W2;
    Ge.dateToDosDateTime = Cr;
    We.inherits(W2, Ct);
    function W2() {
      this.outputStream = new ur(), this.entries = [], this.outputStreamCursor = 0, this.ended = false, this.allDone = false, this.forceZip64Eocd = false;
    }
    W2.prototype.addFile = function(e2, r2, t) {
      var n = this;
      r2 = he(r2, false), t == null && (t = {});
      var i = new m2(r2, false, t);
      n.entries.push(i), ar.stat(e2, function(o2, f2) {
        if (o2) return n.emit("error", o2);
        if (!f2.isFile()) return n.emit("error", new Error("not a file: " + e2));
        i.uncompressedSize = f2.size, t.mtime == null && i.setLastModDate(f2.mtime), t.mode == null && i.setFileAttributesMode(f2.mode), i.setFileDataPumpFunction(function() {
          var s2 = ar.createReadStream(e2);
          i.state = m2.FILE_DATA_IN_PROGRESS, s2.on("error", function(u2) {
            n.emit("error", u2);
          }), dr(n, i, s2);
        }), M(n);
      });
    };
    W2.prototype.addReadStream = function(e2, r2, t) {
      var n = this;
      r2 = he(r2, false), t == null && (t = {});
      var i = new m2(r2, false, t);
      n.entries.push(i), i.setFileDataPumpFunction(function() {
        i.state = m2.FILE_DATA_IN_PROGRESS, dr(n, i, e2);
      }), M(n);
    };
    W2.prototype.addBuffer = function(e2, r2, t) {
      var n = this;
      if (r2 = he(r2, false), e2.length > 1073741823) throw new Error("buffer too large: " + e2.length + " > 1073741823");
      if (t == null && (t = {}), t.size != null) throw new Error("options.size not allowed");
      var i = new m2(r2, false, t);
      i.uncompressedSize = e2.length, i.crc32 = lr.unsigned(e2), i.crcAndFileSizeKnown = true, n.entries.push(i), i.compress ? cr.deflateRaw(e2, function(f2, s2) {
        o2(s2);
      }) : o2(e2);
      function o2(f2) {
        i.compressedSize = f2.length, i.setFileDataPumpFunction(function() {
          Z(n, f2), Z(n, i.getDataDescriptor()), i.state = m2.FILE_DATA_DONE, setImmediate(function() {
            M(n);
          });
        }), M(n);
      }
    };
    W2.prototype.addEmptyDirectory = function(e2, r2) {
      var t = this;
      if (e2 = he(e2, true), r2 == null && (r2 = {}), r2.size != null) throw new Error("options.size not allowed");
      if (r2.compress != null) throw new Error("options.compress not allowed");
      var n = new m2(e2, true, r2);
      t.entries.push(n), n.setFileDataPumpFunction(function() {
        Z(t, n.getDataDescriptor()), n.state = m2.FILE_DATA_DONE, M(t);
      }), M(t);
    };
    var bt = N2([80, 75, 5, 6]);
    W2.prototype.end = function(e2, r2) {
      if (typeof e2 == "function" && (r2 = e2, e2 = null), e2 == null && (e2 = {}), !this.ended) {
        if (this.ended = true, this.finalSizeCallback = r2, this.forceZip64Eocd = !!e2.forceZip64Format, e2.comment) {
          if (typeof e2.comment == "string" ? this.comment = It(e2.comment) : this.comment = e2.comment, this.comment.length > 65535) throw new Error("comment is too large");
          if (re(this.comment, bt)) throw new Error("comment contains end of central directory record signature");
        } else this.comment = pe;
        M(this);
      }
    };
    function Z(e2, r2) {
      e2.outputStream.write(r2), e2.outputStreamCursor += r2.length;
    }
    function dr(e2, r2, t) {
      var n = new He(), i = new le2(), o2 = r2.compress ? new cr.DeflateRaw() : new ur(), f2 = new le2();
      t.pipe(n).pipe(i).pipe(o2).pipe(f2).pipe(e2.outputStream, { end: false }), f2.on("end", function() {
        if (r2.crc32 = n.crc32, r2.uncompressedSize == null) r2.uncompressedSize = i.byteCount;
        else if (r2.uncompressedSize !== i.byteCount) return e2.emit("error", new Error("file data stream has unexpected number of bytes"));
        r2.compressedSize = f2.byteCount, e2.outputStreamCursor += r2.compressedSize, Z(e2, r2.getDataDescriptor()), r2.state = m2.FILE_DATA_DONE, M(e2);
      });
    }
    function M(e2) {
      if (e2.allDone) return;
      if (e2.ended && e2.finalSizeCallback != null) {
        var r2 = Ft(e2);
        r2 != null && (e2.finalSizeCallback(r2), e2.finalSizeCallback = null);
      }
      var t = n();
      function n() {
        for (var o2 = 0; o2 < e2.entries.length; o2++) {
          var f2 = e2.entries[o2];
          if (f2.state < m2.FILE_DATA_DONE) return f2;
        }
        return null;
      }
      if (t != null) {
        if (t.state < m2.READY_TO_PUMP_FILE_DATA || t.state === m2.FILE_DATA_IN_PROGRESS) return;
        t.relativeOffsetOfLocalHeader = e2.outputStreamCursor;
        var i = t.getLocalFileHeader();
        Z(e2, i), t.doFileDataPump();
      } else e2.ended && (e2.offsetOfStartOfCentralDirectory = e2.outputStreamCursor, e2.entries.forEach(function(o2) {
        var f2 = o2.getCentralDirectoryRecord();
        Z(e2, f2);
      }), Z(e2, St(e2)), e2.outputStream.end(), e2.allDone = true);
    }
    function Ft(e2) {
      for (var r2 = 0, t = 0, n = 0; n < e2.entries.length; n++) {
        var i = e2.entries[n];
        if (i.compress) return -1;
        if (i.state >= m2.READY_TO_PUMP_FILE_DATA) {
          if (i.uncompressedSize == null) return -1;
        } else if (i.uncompressedSize == null) return null;
        i.relativeOffsetOfLocalHeader = r2;
        var o2 = i.useZip64Format();
        r2 += hr + i.utf8FileName.length, r2 += i.uncompressedSize, i.crcAndFileSizeKnown || (o2 ? r2 += gr : r2 += wr), t += yr + i.utf8FileName.length + i.fileComment.length, o2 && (t += Pe);
      }
      var f2 = 0;
      return (e2.forceZip64Eocd || e2.entries.length >= 65535 || t >= 65535 || r2 >= 4294967295) && (f2 += ue2 + qe), f2 += ce2 + e2.comment.length, r2 + t + f2;
    }
    var ue2 = 56, qe = 20, ce2 = 22;
    function St(e2, r2) {
      var t = false, n = e2.entries.length;
      (e2.forceZip64Eocd || e2.entries.length >= 65535) && (n = 65535, t = true);
      var i = e2.outputStreamCursor - e2.offsetOfStartOfCentralDirectory, o2 = i;
      (e2.forceZip64Eocd || i >= 4294967295) && (o2 = 4294967295, t = true);
      var f2 = e2.offsetOfStartOfCentralDirectory;
      if ((e2.forceZip64Eocd || e2.offsetOfStartOfCentralDirectory >= 4294967295) && (f2 = 4294967295, t = true), r2) ;
      var s2 = F(ce2 + e2.comment.length);
      if (s2.writeUInt32LE(101010256, 0), s2.writeUInt16LE(0, 4), s2.writeUInt16LE(0, 6), s2.writeUInt16LE(n, 8), s2.writeUInt16LE(n, 10), s2.writeUInt32LE(o2, 12), s2.writeUInt32LE(f2, 16), s2.writeUInt16LE(e2.comment.length, 20), e2.comment.copy(s2, 22), !t) return s2;
      var u2 = F(ue2);
      u2.writeUInt32LE(101075792, 0), L2(u2, ue2 - 12, 4), u2.writeUInt16LE(xr, 12), u2.writeUInt16LE(mr, 14), u2.writeUInt32LE(0, 16), u2.writeUInt32LE(0, 20), L2(u2, e2.entries.length, 24), L2(u2, e2.entries.length, 32), L2(u2, i, 40), L2(u2, e2.offsetOfStartOfCentralDirectory, 48);
      var l = F(qe);
      return l.writeUInt32LE(117853008, 0), l.writeUInt32LE(0, 4), L2(l, e2.outputStreamCursor, 8), l.writeUInt32LE(1, 16), Buffer.concat([u2, l, s2]);
    }
    function he(e2, r2) {
      if (e2 === "") throw new Error("empty metadataPath");
      if (e2 = e2.replace(/\\/g, "/"), /^[a-zA-Z]:/.test(e2) || /^\//.test(e2)) throw new Error("absolute path: " + e2);
      if (e2.split("/").indexOf("..") !== -1) throw new Error("invalid relative path: " + e2);
      var t = /\/$/.test(e2);
      if (r2) t || (e2 += "/");
      else if (t) throw new Error("file path cannot end with '/': " + e2);
      return e2;
    }
    var pe = F(0);
    function m2(e2, r2, t) {
      if (this.utf8FileName = N2(e2), this.utf8FileName.length > 65535) throw new Error("utf8 file name too long. " + utf8FileName.length + " > 65535");
      if (this.isDirectory = r2, this.state = m2.WAITING_FOR_METADATA, this.setLastModDate(t.mtime != null ? t.mtime : /* @__PURE__ */ new Date()), t.mode != null ? this.setFileAttributesMode(t.mode) : this.setFileAttributesMode(r2 ? 16893 : 33204), r2 ? (this.crcAndFileSizeKnown = true, this.crc32 = 0, this.uncompressedSize = 0, this.compressedSize = 0) : (this.crcAndFileSizeKnown = false, this.crc32 = null, this.uncompressedSize = null, this.compressedSize = null, t.size != null && (this.uncompressedSize = t.size)), r2 ? this.compress = false : (this.compress = true, t.compress != null && (this.compress = !!t.compress)), this.forceZip64Format = !!t.forceZip64Format, t.fileComment) {
        if (typeof t.fileComment == "string" ? this.fileComment = N2(t.fileComment, "utf-8") : this.fileComment = t.fileComment, this.fileComment.length > 65535) throw new Error("fileComment is too large");
      } else this.fileComment = pe;
    }
    m2.WAITING_FOR_METADATA = 0;
    m2.READY_TO_PUMP_FILE_DATA = 1;
    m2.FILE_DATA_IN_PROGRESS = 2;
    m2.FILE_DATA_DONE = 3;
    m2.prototype.setLastModDate = function(e2) {
      var r2 = Cr(e2);
      this.lastModFileTime = r2.time, this.lastModFileDate = r2.date;
    };
    m2.prototype.setFileAttributesMode = function(e2) {
      if ((e2 & 65535) !== e2) throw new Error("invalid mode. expected: 0 <= " + e2 + " <= 65535");
      this.externalFileAttributes = e2 << 16 >>> 0;
    };
    m2.prototype.setFileDataPumpFunction = function(e2) {
      this.doFileDataPump = e2, this.state = m2.READY_TO_PUMP_FILE_DATA;
    };
    m2.prototype.useZip64Format = function() {
      return this.forceZip64Format || this.uncompressedSize != null && this.uncompressedSize > 4294967294 || this.compressedSize != null && this.compressedSize > 4294967294 || this.relativeOffsetOfLocalHeader != null && this.relativeOffsetOfLocalHeader > 4294967294;
    };
    var hr = 30, pr = 20, mr = 45, xr = 831, vr = 2048, Er = 8;
    m2.prototype.getLocalFileHeader = function() {
      var e2 = 0, r2 = 0, t = 0;
      this.crcAndFileSizeKnown && (e2 = this.crc32, r2 = this.compressedSize, t = this.uncompressedSize);
      var n = F(hr), i = vr;
      return this.crcAndFileSizeKnown || (i |= Er), n.writeUInt32LE(67324752, 0), n.writeUInt16LE(pr, 4), n.writeUInt16LE(i, 6), n.writeUInt16LE(this.getCompressionMethod(), 8), n.writeUInt16LE(this.lastModFileTime, 10), n.writeUInt16LE(this.lastModFileDate, 12), n.writeUInt32LE(e2, 14), n.writeUInt32LE(r2, 18), n.writeUInt32LE(t, 22), n.writeUInt16LE(this.utf8FileName.length, 26), n.writeUInt16LE(0, 28), Buffer.concat([n, this.utf8FileName]);
    };
    var wr = 16, gr = 24;
    m2.prototype.getDataDescriptor = function() {
      if (this.crcAndFileSizeKnown) return pe;
      if (this.useZip64Format()) {
        var e2 = F(gr);
        return e2.writeUInt32LE(134695760, 0), e2.writeUInt32LE(this.crc32, 4), L2(e2, this.compressedSize, 8), L2(e2, this.uncompressedSize, 16), e2;
      } else {
        var e2 = F(wr);
        return e2.writeUInt32LE(134695760, 0), e2.writeUInt32LE(this.crc32, 4), e2.writeUInt32LE(this.compressedSize, 8), e2.writeUInt32LE(this.uncompressedSize, 12), e2;
      }
    };
    var yr = 46, Pe = 28;
    m2.prototype.getCentralDirectoryRecord = function() {
      var e2 = F(yr), r2 = vr;
      this.crcAndFileSizeKnown || (r2 |= Er);
      var t = this.compressedSize, n = this.uncompressedSize, i = this.relativeOffsetOfLocalHeader, o2, f2;
      return this.useZip64Format() ? (t = 4294967295, n = 4294967295, i = 4294967295, o2 = mr, f2 = F(Pe), f2.writeUInt16LE(1, 0), f2.writeUInt16LE(Pe - 4, 2), L2(f2, this.uncompressedSize, 4), L2(f2, this.compressedSize, 12), L2(f2, this.relativeOffsetOfLocalHeader, 20)) : (o2 = pr, f2 = pe), e2.writeUInt32LE(33639248, 0), e2.writeUInt16LE(xr, 4), e2.writeUInt16LE(o2, 6), e2.writeUInt16LE(r2, 8), e2.writeUInt16LE(this.getCompressionMethod(), 10), e2.writeUInt16LE(this.lastModFileTime, 12), e2.writeUInt16LE(this.lastModFileDate, 14), e2.writeUInt32LE(this.crc32, 16), e2.writeUInt32LE(t, 20), e2.writeUInt32LE(n, 24), e2.writeUInt16LE(this.utf8FileName.length, 28), e2.writeUInt16LE(f2.length, 30), e2.writeUInt16LE(this.fileComment.length, 32), e2.writeUInt16LE(0, 34), e2.writeUInt16LE(0, 36), e2.writeUInt32LE(this.externalFileAttributes, 38), e2.writeUInt32LE(i, 42), Buffer.concat([e2, this.utf8FileName, f2, this.fileComment]);
    };
    m2.prototype.getCompressionMethod = function() {
      var e2 = 0, r2 = 8;
      return this.compress ? r2 : e2;
    };
    function Cr(e2) {
      var r2 = 0;
      r2 |= e2.getDate() & 31, r2 |= (e2.getMonth() + 1 & 15) << 5, r2 |= (e2.getFullYear() - 1980 & 127) << 9;
      var t = 0;
      return t |= Math.floor(e2.getSeconds() / 2), t |= (e2.getMinutes() & 63) << 5, t |= (e2.getHours() & 31) << 11, { date: r2, time: t };
    }
    function L2(e2, r2, t) {
      var n = Math.floor(r2 / 4294967296), i = r2 % 4294967296;
      e2.writeUInt32LE(i, t), e2.writeUInt32LE(n, t + 4);
    }
    We.inherits(le2, de);
    function le2(e2) {
      de.call(this, e2), this.byteCount = 0;
    }
    le2.prototype._transform = function(e2, r2, t) {
      this.byteCount += e2.length, t(null, e2);
    };
    We.inherits(He, de);
    function He(e2) {
      de.call(this, e2), this.crc32 = 0;
    }
    He.prototype._transform = function(e2, r2, t) {
      this.crc32 = lr.unsigned(e2, this.crc32), t(null, e2);
    };
    var Ze = "\0☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ";
    if (Ze.length !== 256) throw new Error("assertion failure");
    var ae = null;
    function It(e2) {
      if (/^[\x20-\x7e]*$/.test(e2)) return N2(e2, "utf-8");
      if (ae == null) {
        ae = {};
        for (var r2 = 0; r2 < Ze.length; r2++) ae[Ze[r2]] = r2;
      }
      for (var t = F(e2.length), r2 = 0; r2 < e2.length; r2++) {
        var n = ae[e2[r2]];
        if (n == null) throw new Error("character not encodable in CP437: " + JSON.stringify(e2[r2]));
        t[r2] = n;
      }
      return t;
    }
    function F(e2) {
      F = r2;
      try {
        return F(e2);
      } catch {
        return F = t, F(e2);
      }
      function r2(n) {
        return Buffer.allocUnsafe(n);
      }
      function t(n) {
        return new Buffer(n);
      }
    }
    function N2(e2, r2) {
      N2 = t;
      try {
        return N2(e2, r2);
      } catch {
        return N2 = n, N2(e2, r2);
      }
      function t(i, o2) {
        return Buffer.from(i, o2);
      }
      function n(i, o2) {
        return new Buffer(i, o2);
      }
    }
    function re(e2, r2) {
      re = t;
      try {
        return re(e2, r2);
      } catch {
        return re = n, re(e2, r2);
      }
      function t(i, o2) {
        return i.includes(o2);
      }
      function n(i, o2) {
        for (var f2 = 0; f2 <= i.length - o2.length; f2++) for (var s2 = 0; ; s2++) {
          if (s2 === o2.length) return true;
          if (i[f2 + s2] !== o2[s2]) break;
        }
        return false;
      }
    }
  });
  var Lr = E((Un, Ir) => {
    Ir.exports = me;
    function me() {
      this.pending = 0, this.max = 1 / 0, this.listeners = [], this.waiting = [], this.error = null;
    }
    me.prototype.go = function(e2) {
      this.pending < this.max ? Sr(this, e2) : this.waiting.push(e2);
    };
    me.prototype.wait = function(e2) {
      this.pending === 0 ? e2(this.error) : this.listeners.push(e2);
    };
    me.prototype.hold = function() {
      return Fr(this);
    };
    function Fr(e2) {
      e2.pending += 1;
      var r2 = false;
      return t;
      function t(i) {
        if (r2) throw new Error("callback called twice");
        if (r2 = true, e2.error = e2.error || i, e2.pending -= 1, e2.waiting.length > 0 && e2.pending < e2.max) Sr(e2, e2.waiting.shift());
        else if (e2.pending === 0) {
          var o2 = e2.listeners;
          e2.listeners = [], o2.forEach(n);
        }
      }
      function n(i) {
        i(e2.error);
      }
    }
    function Sr(e2, r2) {
      r2(Fr(e2));
    }
  });
  var zr = E((ne) => {
    var te = require$$0$2, xe = require$$1$2, Ye = require$$12, Or = Ye.Readable, $e = Ye.Writable, Lt = Ye.PassThrough, Ot = Lr(), ve2 = require$$0$4.EventEmitter;
    ne.createFromBuffer = zt;
    ne.createFromFd = _t;
    ne.BufferSlicer = D;
    ne.FdSlicer = R2;
    xe.inherits(R2, ve2);
    function R2(e2, r2) {
      r2 = r2 || {}, ve2.call(this), this.fd = e2, this.pend = new Ot(), this.pend.max = 1, this.refCount = 0, this.autoClose = !!r2.autoClose;
    }
    R2.prototype.read = function(e2, r2, t, n, i) {
      var o2 = this;
      o2.pend.go(function(f2) {
        te.read(o2.fd, e2, r2, t, n, function(s2, u2, l) {
          f2(), i(s2, u2, l);
        });
      });
    };
    R2.prototype.write = function(e2, r2, t, n, i) {
      var o2 = this;
      o2.pend.go(function(f2) {
        te.write(o2.fd, e2, r2, t, n, function(s2, u2, l) {
          f2(), i(s2, u2, l);
        });
      });
    };
    R2.prototype.createReadStream = function(e2) {
      return new Ee(this, e2);
    };
    R2.prototype.createWriteStream = function(e2) {
      return new we(this, e2);
    };
    R2.prototype.ref = function() {
      this.refCount += 1;
    };
    R2.prototype.unref = function() {
      var e2 = this;
      if (e2.refCount -= 1, e2.refCount > 0) return;
      if (e2.refCount < 0) throw new Error("invalid unref");
      e2.autoClose && te.close(e2.fd, r2);
      function r2(t) {
        t ? e2.emit("error", t) : e2.emit("close");
      }
    };
    xe.inherits(Ee, Or);
    function Ee(e2, r2) {
      r2 = r2 || {}, Or.call(this, r2), this.context = e2, this.context.ref(), this.start = r2.start || 0, this.endOffset = r2.end, this.pos = this.start, this.destroyed = false;
    }
    Ee.prototype._read = function(e2) {
      var r2 = this;
      if (!r2.destroyed) {
        var t = Math.min(r2._readableState.highWaterMark, e2);
        if (r2.endOffset != null && (t = Math.min(t, r2.endOffset - r2.pos)), t <= 0) {
          r2.destroyed = true, r2.push(null), r2.context.unref();
          return;
        }
        r2.context.pend.go(function(n) {
          if (r2.destroyed) return n();
          var i = Buffer.alloc(t);
          te.read(r2.context.fd, i, 0, t, r2.pos, function(o2, f2) {
            o2 ? r2.destroy(o2) : f2 === 0 ? (r2.destroyed = true, r2.push(null), r2.context.unref()) : (r2.pos += f2, r2.push(i.slice(0, f2))), n();
          });
        });
      }
    };
    Ee.prototype.destroy = function(e2) {
      this.destroyed || (e2 = e2 || new Error("stream destroyed"), this.destroyed = true, this.emit("error", e2), this.context.unref());
    };
    xe.inherits(we, $e);
    function we(e2, r2) {
      r2 = r2 || {}, $e.call(this, r2), this.context = e2, this.context.ref(), this.start = r2.start || 0, this.endOffset = r2.end == null ? 1 / 0 : +r2.end, this.bytesWritten = 0, this.pos = this.start, this.destroyed = false, this.on("finish", this.destroy.bind(this));
    }
    we.prototype._write = function(e2, r2, t) {
      var n = this;
      if (!n.destroyed) {
        if (n.pos + e2.length > n.endOffset) {
          var i = new Error("maximum file length exceeded");
          i.code = "ETOOBIG", n.destroy(), t(i);
          return;
        }
        n.context.pend.go(function(o2) {
          if (n.destroyed) return o2();
          te.write(n.context.fd, e2, 0, e2.length, n.pos, function(f2, s2) {
            f2 ? (n.destroy(), o2(), t(f2)) : (n.bytesWritten += s2, n.pos += s2, n.emit("progress"), o2(), t());
          });
        });
      }
    };
    we.prototype.destroy = function() {
      this.destroyed || (this.destroyed = true, this.context.unref());
    };
    xe.inherits(D, ve2);
    function D(e2, r2) {
      ve2.call(this), r2 = r2 || {}, this.refCount = 0, this.buffer = e2, this.maxChunkSize = r2.maxChunkSize || Number.MAX_SAFE_INTEGER;
    }
    D.prototype.read = function(e2, r2, t, n, i) {
      var o2 = n + t, f2 = o2 - this.buffer.length, s2 = f2 > 0 ? f2 : t;
      this.buffer.copy(e2, r2, n, o2), setImmediate(function() {
        i(null, s2);
      });
    };
    D.prototype.write = function(e2, r2, t, n, i) {
      e2.copy(this.buffer, n, r2, r2 + t), setImmediate(function() {
        i(null, t, e2);
      });
    };
    D.prototype.createReadStream = function(e2) {
      e2 = e2 || {};
      var r2 = new Lt(e2);
      r2.destroyed = false, r2.start = e2.start || 0, r2.endOffset = e2.end, r2.pos = r2.endOffset || this.buffer.length;
      for (var t = this.buffer.slice(r2.start, r2.pos), n = 0; ; ) {
        var i = n + this.maxChunkSize;
        if (i >= t.length) {
          n < t.length && r2.write(t.slice(n, t.length));
          break;
        }
        r2.write(t.slice(n, i)), n = i;
      }
      return r2.end(), r2.destroy = function() {
        r2.destroyed = true;
      }, r2;
    };
    D.prototype.createWriteStream = function(e2) {
      var r2 = this;
      e2 = e2 || {};
      var t = new $e(e2);
      return t.start = e2.start || 0, t.endOffset = e2.end == null ? this.buffer.length : +e2.end, t.bytesWritten = 0, t.pos = t.start, t.destroyed = false, t._write = function(n, i, o2) {
        if (!t.destroyed) {
          var f2 = t.pos + n.length;
          if (f2 > t.endOffset) {
            var s2 = new Error("maximum file length exceeded");
            s2.code = "ETOOBIG", t.destroyed = true, o2(s2);
            return;
          }
          n.copy(r2.buffer, t.pos, 0, n.length), t.bytesWritten += n.length, t.pos = f2, t.emit("progress"), o2();
        }
      }, t.destroy = function() {
        t.destroyed = true;
      }, t;
    };
    D.prototype.ref = function() {
      this.refCount += 1;
    };
    D.prototype.unref = function() {
      if (this.refCount -= 1, this.refCount < 0) throw new Error("invalid unref");
    };
    function zt(e2, r2) {
      return new D(e2, r2);
    }
    function _t(e2, r2) {
      return new R2(e2, r2);
    }
  });
  var Xe = E((A2) => {
    var je = require$$0$2, At = require$$13, _r = zr(), Rt = Be(), Ce = require$$1$2, be = require$$0$4.EventEmitter, Ar = require$$12.Transform, Ke = require$$12.PassThrough, Dt = require$$12.Writable;
    A2.open = Tt;
    A2.fromFd = Rr;
    A2.fromBuffer = Ut;
    A2.fromRandomAccessReader = Ve;
    A2.dosDateTimeToDate = Tr;
    A2.validateFileName = Ur;
    A2.ZipFile = B2;
    A2.Entry = ie;
    A2.RandomAccessReader = q2;
    function Tt(e2, r2, t) {
      typeof r2 == "function" && (t = r2, r2 = null), r2 == null && (r2 = {}), r2.autoClose == null && (r2.autoClose = true), r2.lazyEntries == null && (r2.lazyEntries = false), r2.decodeStrings == null && (r2.decodeStrings = true), r2.validateEntrySizes == null && (r2.validateEntrySizes = true), r2.strictFileNames == null && (r2.strictFileNames = false), t == null && (t = ye2), je.open(e2, "r", function(n, i) {
        if (n) return t(n);
        Rr(i, r2, function(o2, f2) {
          o2 && je.close(i, ye2), t(o2, f2);
        });
      });
    }
    function Rr(e2, r2, t) {
      typeof r2 == "function" && (t = r2, r2 = null), r2 == null && (r2 = {}), r2.autoClose == null && (r2.autoClose = false), r2.lazyEntries == null && (r2.lazyEntries = false), r2.decodeStrings == null && (r2.decodeStrings = true), r2.validateEntrySizes == null && (r2.validateEntrySizes = true), r2.strictFileNames == null && (r2.strictFileNames = false), t == null && (t = ye2), je.fstat(e2, function(n, i) {
        if (n) return t(n);
        var o2 = _r.createFromFd(e2, { autoClose: true });
        Ve(o2, i.size, r2, t);
      });
    }
    function Ut(e2, r2, t) {
      typeof r2 == "function" && (t = r2, r2 = null), r2 == null && (r2 = {}), r2.autoClose = false, r2.lazyEntries == null && (r2.lazyEntries = false), r2.decodeStrings == null && (r2.decodeStrings = true), r2.validateEntrySizes == null && (r2.validateEntrySizes = true), r2.strictFileNames == null && (r2.strictFileNames = false);
      var n = _r.createFromBuffer(e2, { maxChunkSize: 65536 });
      Ve(n, e2.length, r2, t);
    }
    function Ve(e2, r2, t, n) {
      typeof t == "function" && (n = t, t = null), t == null && (t = {}), t.autoClose == null && (t.autoClose = true), t.lazyEntries == null && (t.lazyEntries = false), t.decodeStrings == null && (t.decodeStrings = true);
      var i = !!t.decodeStrings;
      if (t.validateEntrySizes == null && (t.validateEntrySizes = true), t.strictFileNames == null && (t.strictFileNames = false), n == null && (n = ye2), typeof r2 != "number") throw new Error("expected totalSize parameter to be a number");
      if (r2 > Number.MAX_SAFE_INTEGER) throw new Error("zip file too large. only file sizes up to 2^52 are supported due to JavaScript's Number type being an IEEE 754 double.");
      e2.ref();
      var o2 = 22, f2 = 65535, s2 = Math.min(o2 + f2, r2), u2 = _2(s2), l = r2 - u2.length;
      $(e2, u2, 0, s2, l, function(a) {
        if (a) return n(a);
        for (var c2 = s2 - o2; c2 >= 0; c2 -= 1) if (u2.readUInt32LE(c2) === 101010256) {
          var d2 = u2.slice(c2), x2 = d2.readUInt16LE(4);
          if (x2 !== 0) return n(new Error("multi-disk zip files are not supported: found disk number: " + x2));
          var y2 = d2.readUInt16LE(10), p = d2.readUInt32LE(16), h2 = d2.readUInt16LE(20), v2 = d2.length - o2;
          if (h2 !== v2) return n(new Error("invalid comment length. expected: " + v2 + ". found: " + h2));
          var w2 = i ? ge(d2, 22, d2.length, false) : d2.slice(22);
          if (!(y2 === 65535 || p === 4294967295)) return n(null, new B2(e2, p, r2, y2, w2, t.autoClose, t.lazyEntries, i, t.validateEntrySizes, t.strictFileNames));
          var b = _2(20), T2 = l + c2 - b.length;
          $(e2, b, 0, b.length, T2, function(Y2) {
            if (Y2) return n(Y2);
            if (b.readUInt32LE(0) !== 117853008) return n(new Error("invalid zip64 end of central directory locator signature"));
            var k2 = j(b, 8), P2 = _2(56);
            $(e2, P2, 0, P2.length, k2, function(ee) {
              return ee ? n(ee) : P2.readUInt32LE(0) !== 101075792 ? n(new Error("invalid zip64 end of central directory record signature")) : (y2 = j(P2, 32), p = j(P2, 48), n(null, new B2(e2, p, r2, y2, w2, t.autoClose, t.lazyEntries, i, t.validateEntrySizes, t.strictFileNames)));
            });
          });
          return;
        }
        n(new Error("end of central directory record signature not found"));
      });
    }
    Ce.inherits(B2, be);
    function B2(e2, r2, t, n, i, o2, f2, s2, u2, l) {
      var a = this;
      be.call(a), a.reader = e2, a.reader.on("error", function(c2) {
        Dr(a, c2);
      }), a.reader.once("close", function() {
        a.emit("close");
      }), a.readEntryCursor = r2, a.fileSize = t, a.entryCount = n, a.comment = i, a.entriesRead = 0, a.autoClose = !!o2, a.lazyEntries = !!f2, a.decodeStrings = !!s2, a.validateEntrySizes = !!u2, a.strictFileNames = !!l, a.isOpen = true, a.emittedError = false, a.lazyEntries || a._readEntry();
    }
    B2.prototype.close = function() {
      this.isOpen && (this.isOpen = false, this.reader.unref());
    };
    function O2(e2, r2) {
      e2.autoClose && e2.close(), Dr(e2, r2);
    }
    function Dr(e2, r2) {
      e2.emittedError || (e2.emittedError = true, e2.emit("error", r2));
    }
    B2.prototype.readEntry = function() {
      if (!this.lazyEntries) throw new Error("readEntry() called without lazyEntries:true");
      this._readEntry();
    };
    B2.prototype._readEntry = function() {
      var e2 = this;
      if (e2.entryCount === e2.entriesRead) {
        setImmediate(function() {
          e2.autoClose && e2.close(), !e2.emittedError && e2.emit("end");
        });
        return;
      }
      if (!e2.emittedError) {
        var r2 = _2(46);
        $(e2.reader, r2, 0, r2.length, e2.readEntryCursor, function(t) {
          if (t) return O2(e2, t);
          if (!e2.emittedError) {
            var n = new ie(), i = r2.readUInt32LE(0);
            if (i !== 33639248) return O2(e2, new Error("invalid central directory file header signature: 0x" + i.toString(16)));
            if (n.versionMadeBy = r2.readUInt16LE(4), n.versionNeededToExtract = r2.readUInt16LE(6), n.generalPurposeBitFlag = r2.readUInt16LE(8), n.compressionMethod = r2.readUInt16LE(10), n.lastModFileTime = r2.readUInt16LE(12), n.lastModFileDate = r2.readUInt16LE(14), n.crc32 = r2.readUInt32LE(16), n.compressedSize = r2.readUInt32LE(20), n.uncompressedSize = r2.readUInt32LE(24), n.fileNameLength = r2.readUInt16LE(28), n.extraFieldLength = r2.readUInt16LE(30), n.fileCommentLength = r2.readUInt16LE(32), n.internalFileAttributes = r2.readUInt16LE(36), n.externalFileAttributes = r2.readUInt32LE(38), n.relativeOffsetOfLocalHeader = r2.readUInt32LE(42), n.generalPurposeBitFlag & 64) return O2(e2, new Error("strong encryption is not supported"));
            e2.readEntryCursor += 46, r2 = _2(n.fileNameLength + n.extraFieldLength + n.fileCommentLength), $(e2.reader, r2, 0, r2.length, e2.readEntryCursor, function(o2) {
              if (o2) return O2(e2, o2);
              if (!e2.emittedError) {
                var f2 = (n.generalPurposeBitFlag & 2048) !== 0;
                n.fileName = e2.decodeStrings ? ge(r2, 0, n.fileNameLength, f2) : r2.slice(0, n.fileNameLength);
                var s2 = n.fileNameLength + n.extraFieldLength, u2 = r2.slice(n.fileNameLength, s2);
                n.extraFields = [];
                for (var l = 0; l < u2.length - 3; ) {
                  var a = u2.readUInt16LE(l + 0), c2 = u2.readUInt16LE(l + 2), d2 = l + 4, x2 = d2 + c2;
                  if (x2 > u2.length) return O2(e2, new Error("extra field length exceeds extra field buffer size"));
                  var y2 = _2(c2);
                  u2.copy(y2, 0, d2, x2), n.extraFields.push({ id: a, data: y2 }), l = x2;
                }
                if (n.fileComment = e2.decodeStrings ? ge(r2, s2, s2 + n.fileCommentLength, f2) : r2.slice(s2, s2 + n.fileCommentLength), n.comment = n.fileComment, e2.readEntryCursor += r2.length, e2.entriesRead += 1, n.uncompressedSize === 4294967295 || n.compressedSize === 4294967295 || n.relativeOffsetOfLocalHeader === 4294967295) {
                  for (var p = null, l = 0; l < n.extraFields.length; l++) {
                    var h2 = n.extraFields[l];
                    if (h2.id === 1) {
                      p = h2.data;
                      break;
                    }
                  }
                  if (p == null) return O2(e2, new Error("expected zip64 extended information extra field"));
                  var v2 = 0;
                  if (n.uncompressedSize === 4294967295) {
                    if (v2 + 8 > p.length) return O2(e2, new Error("zip64 extended information extra field does not include uncompressed size"));
                    n.uncompressedSize = j(p, v2), v2 += 8;
                  }
                  if (n.compressedSize === 4294967295) {
                    if (v2 + 8 > p.length) return O2(e2, new Error("zip64 extended information extra field does not include compressed size"));
                    n.compressedSize = j(p, v2), v2 += 8;
                  }
                  if (n.relativeOffsetOfLocalHeader === 4294967295) {
                    if (v2 + 8 > p.length) return O2(e2, new Error("zip64 extended information extra field does not include relative header offset"));
                    n.relativeOffsetOfLocalHeader = j(p, v2), v2 += 8;
                  }
                }
                if (e2.decodeStrings) for (var l = 0; l < n.extraFields.length; l++) {
                  var h2 = n.extraFields[l];
                  if (h2.id === 28789) {
                    if (h2.data.length < 6 || h2.data.readUInt8(0) !== 1) continue;
                    var w2 = h2.data.readUInt32LE(1);
                    if (Rt.unsigned(r2.slice(0, n.fileNameLength)) !== w2) continue;
                    n.fileName = ge(h2.data, 5, h2.data.length, true);
                    break;
                  }
                }
                if (e2.validateEntrySizes && n.compressionMethod === 0) {
                  var b = n.uncompressedSize;
                  if (n.isEncrypted() && (b += 12), n.compressedSize !== b) {
                    var T2 = "compressed/uncompressed size mismatch for stored file: " + n.compressedSize + " != " + n.uncompressedSize;
                    return O2(e2, new Error(T2));
                  }
                }
                if (e2.decodeStrings) {
                  e2.strictFileNames || (n.fileName = n.fileName.replace(/\\/g, "/"));
                  var Y2 = Ur(n.fileName, e2.validateFileNameOptions);
                  if (Y2 != null) return O2(e2, new Error(Y2));
                }
                e2.emit("entry", n), e2.lazyEntries || e2._readEntry();
              }
            });
          }
        });
      }
    };
    B2.prototype.openReadStream = function(e2, r2, t) {
      var n = this, i = 0, o2 = e2.compressedSize;
      if (t == null) t = r2, r2 = {};
      else {
        if (r2.decrypt != null) {
          if (!e2.isEncrypted()) throw new Error("options.decrypt can only be specified for encrypted entries");
          if (r2.decrypt !== false) throw new Error("invalid options.decrypt value: " + r2.decrypt);
          if (e2.isCompressed() && r2.decompress !== false) throw new Error("entry is encrypted and compressed, and options.decompress !== false");
        }
        if (r2.decompress != null) {
          if (!e2.isCompressed()) throw new Error("options.decompress can only be specified for compressed entries");
          if (!(r2.decompress === false || r2.decompress === true)) throw new Error("invalid options.decompress value: " + r2.decompress);
        }
        if (r2.start != null || r2.end != null) {
          if (e2.isCompressed() && r2.decompress !== false) throw new Error("start/end range not allowed for compressed entry without options.decompress === false");
          if (e2.isEncrypted() && r2.decrypt !== false) throw new Error("start/end range not allowed for encrypted entry without options.decrypt === false");
        }
        if (r2.start != null) {
          if (i = r2.start, i < 0) throw new Error("options.start < 0");
          if (i > e2.compressedSize) throw new Error("options.start > entry.compressedSize");
        }
        if (r2.end != null) {
          if (o2 = r2.end, o2 < 0) throw new Error("options.end < 0");
          if (o2 > e2.compressedSize) throw new Error("options.end > entry.compressedSize");
          if (o2 < i) throw new Error("options.end < options.start");
        }
      }
      if (!n.isOpen) return t(new Error("closed"));
      if (e2.isEncrypted() && r2.decrypt !== false) return t(new Error("entry is encrypted, and options.decrypt !== false"));
      n.reader.ref();
      var f2 = _2(30);
      $(n.reader, f2, 0, f2.length, e2.relativeOffsetOfLocalHeader, function(s2) {
        try {
          if (s2) return t(s2);
          var u2 = f2.readUInt32LE(0);
          if (u2 !== 67324752) return t(new Error("invalid local file header signature: 0x" + u2.toString(16)));
          var l = f2.readUInt16LE(26), a = f2.readUInt16LE(28), c2 = e2.relativeOffsetOfLocalHeader + f2.length + l + a, d2;
          if (e2.compressionMethod === 0) d2 = false;
          else if (e2.compressionMethod === 8) d2 = r2.decompress != null ? r2.decompress : true;
          else return t(new Error("unsupported compression method: " + e2.compressionMethod));
          var x2 = c2, y2 = x2 + e2.compressedSize;
          if (e2.compressedSize !== 0 && y2 > n.fileSize) return t(new Error("file data overflows file bounds: " + x2 + " + " + e2.compressedSize + " > " + n.fileSize));
          var p = n.reader.createReadStream({ start: x2 + i, end: x2 + o2 }), h2 = p;
          if (d2) {
            var v2 = false, w2 = At.createInflateRaw();
            p.on("error", function(b) {
              setImmediate(function() {
                v2 || w2.emit("error", b);
              });
            }), p.pipe(w2), n.validateEntrySizes ? (h2 = new oe(e2.uncompressedSize), w2.on("error", function(b) {
              setImmediate(function() {
                v2 || h2.emit("error", b);
              });
            }), w2.pipe(h2)) : h2 = w2, h2.destroy = function() {
              v2 = true, w2 !== h2 && w2.unpipe(h2), p.unpipe(w2), p.destroy();
            };
          }
          t(null, h2);
        } finally {
          n.reader.unref();
        }
      });
    };
    function ie() {
    }
    ie.prototype.getLastModDate = function() {
      return Tr(this.lastModFileDate, this.lastModFileTime);
    };
    ie.prototype.isEncrypted = function() {
      return (this.generalPurposeBitFlag & 1) !== 0;
    };
    ie.prototype.isCompressed = function() {
      return this.compressionMethod === 8;
    };
    function Tr(e2, r2) {
      var t = e2 & 31, n = (e2 >> 5 & 15) - 1, i = (e2 >> 9 & 127) + 1980, o2 = 0, f2 = (r2 & 31) * 2, s2 = r2 >> 5 & 63, u2 = r2 >> 11 & 31;
      return new Date(i, n, t, u2, s2, f2, o2);
    }
    function Ur(e2) {
      return e2.indexOf("\\") !== -1 ? "invalid characters in fileName: " + e2 : /^[a-zA-Z]:/.test(e2) || /^\//.test(e2) ? "absolute path: " + e2 : e2.split("/").indexOf("..") !== -1 ? "invalid relative path: " + e2 : null;
    }
    function $(e2, r2, t, n, i, o2) {
      if (n === 0) return setImmediate(function() {
        o2(null, _2(0));
      });
      e2.read(r2, t, n, i, function(f2, s2) {
        if (f2) return o2(f2);
        if (s2 < n) return o2(new Error("unexpected EOF"));
        o2();
      });
    }
    Ce.inherits(oe, Ar);
    function oe(e2) {
      Ar.call(this), this.actualByteCount = 0, this.expectedByteCount = e2;
    }
    oe.prototype._transform = function(e2, r2, t) {
      if (this.actualByteCount += e2.length, this.actualByteCount > this.expectedByteCount) {
        var n = "too many bytes in the stream. expected " + this.expectedByteCount + ". got at least " + this.actualByteCount;
        return t(new Error(n));
      }
      t(null, e2);
    };
    oe.prototype._flush = function(e2) {
      if (this.actualByteCount < this.expectedByteCount) {
        var r2 = "not enough bytes in the stream. expected " + this.expectedByteCount + ". got only " + this.actualByteCount;
        return e2(new Error(r2));
      }
      e2();
    };
    Ce.inherits(q2, be);
    function q2() {
      be.call(this), this.refCount = 0;
    }
    q2.prototype.ref = function() {
      this.refCount += 1;
    };
    q2.prototype.unref = function() {
      var e2 = this;
      if (e2.refCount -= 1, e2.refCount > 0) return;
      if (e2.refCount < 0) throw new Error("invalid unref");
      e2.close(r2);
      function r2(t) {
        if (t) return e2.emit("error", t);
        e2.emit("close");
      }
    };
    q2.prototype.createReadStream = function(e2) {
      var r2 = e2.start, t = e2.end;
      if (r2 === t) {
        var n = new Ke();
        return setImmediate(function() {
          n.end();
        }), n;
      }
      var i = this._readStreamForRange(r2, t), o2 = false, f2 = new Fe(this);
      i.on("error", function(u2) {
        setImmediate(function() {
          o2 || f2.emit("error", u2);
        });
      }), f2.destroy = function() {
        i.unpipe(f2), f2.unref(), i.destroy();
      };
      var s2 = new oe(t - r2);
      return f2.on("error", function(u2) {
        setImmediate(function() {
          o2 || s2.emit("error", u2);
        });
      }), s2.destroy = function() {
        o2 = true, f2.unpipe(s2), f2.destroy();
      }, i.pipe(f2).pipe(s2);
    };
    q2.prototype._readStreamForRange = function(e2, r2) {
      throw new Error("not implemented");
    };
    q2.prototype.read = function(e2, r2, t, n, i) {
      var o2 = this.createReadStream({ start: n, end: n + t }), f2 = new Dt(), s2 = 0;
      f2._write = function(u2, l, a) {
        u2.copy(e2, r2 + s2, 0, u2.length), s2 += u2.length, a();
      }, f2.on("finish", i), o2.on("error", function(u2) {
        i(u2);
      }), o2.pipe(f2);
    };
    q2.prototype.close = function(e2) {
      setImmediate(e2);
    };
    Ce.inherits(Fe, Ke);
    function Fe(e2) {
      Ke.call(this), this.context = e2, this.context.ref(), this.unreffedYet = false;
    }
    Fe.prototype._flush = function(e2) {
      this.unref(), e2();
    };
    Fe.prototype.unref = function(e2) {
      this.unreffedYet || (this.unreffedYet = true, this.context.unref());
    };
    var Nt = "\0☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ";
    function ge(e2, r2, t, n) {
      if (n) return e2.toString("utf8", r2, t);
      for (var i = "", o2 = r2; o2 < t; o2++) i += Nt[e2[o2]];
      return i;
    }
    function j(e2, r2) {
      var t = e2.readUInt32LE(r2), n = e2.readUInt32LE(r2 + 4);
      return n * 4294967296 + t;
    }
    var _2;
    typeof Buffer.allocUnsafe == "function" ? _2 = function(e2) {
      return Buffer.allocUnsafe(e2);
    } : _2 = function(e2) {
      return new Buffer(e2);
    };
    function ye2(e2) {
      if (e2) throw e2;
    }
  });
  var Mr = E((Bn, Nr) => {
    var K = 1e3, V2 = K * 60, X2 = V2 * 60, H = X2 * 24, Mt = H * 7, Bt = H * 365.25;
    Nr.exports = function(e2, r2) {
      r2 = r2 || {};
      var t = typeof e2;
      if (t === "string" && e2.length > 0) return qt(e2);
      if (t === "number" && isFinite(e2)) return r2.long ? Zt(e2) : Pt(e2);
      throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(e2));
    };
    function qt(e2) {
      if (e2 = String(e2), !(e2.length > 100)) {
        var r2 = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e2);
        if (r2) {
          var t = parseFloat(r2[1]), n = (r2[2] || "ms").toLowerCase();
          switch (n) {
            case "years":
            case "year":
            case "yrs":
            case "yr":
            case "y":
              return t * Bt;
            case "weeks":
            case "week":
            case "w":
              return t * Mt;
            case "days":
            case "day":
            case "d":
              return t * H;
            case "hours":
            case "hour":
            case "hrs":
            case "hr":
            case "h":
              return t * X2;
            case "minutes":
            case "minute":
            case "mins":
            case "min":
            case "m":
              return t * V2;
            case "seconds":
            case "second":
            case "secs":
            case "sec":
            case "s":
              return t * K;
            case "milliseconds":
            case "millisecond":
            case "msecs":
            case "msec":
            case "ms":
              return t;
            default:
              return;
          }
        }
      }
    }
    function Pt(e2) {
      var r2 = Math.abs(e2);
      return r2 >= H ? Math.round(e2 / H) + "d" : r2 >= X2 ? Math.round(e2 / X2) + "h" : r2 >= V2 ? Math.round(e2 / V2) + "m" : r2 >= K ? Math.round(e2 / K) + "s" : e2 + "ms";
    }
    function Zt(e2) {
      var r2 = Math.abs(e2);
      return r2 >= H ? Se2(e2, r2, H, "day") : r2 >= X2 ? Se2(e2, r2, X2, "hour") : r2 >= V2 ? Se2(e2, r2, V2, "minute") : r2 >= K ? Se2(e2, r2, K, "second") : e2 + " ms";
    }
    function Se2(e2, r2, t, n) {
      var i = r2 >= t * 1.5;
      return Math.round(e2 / t) + " " + n + (i ? "s" : "");
    }
  });
  var Je = E((qn, Br) => {
    function Wt(e2) {
      t.debug = t, t.default = t, t.coerce = u2, t.disable = o2, t.enable = i, t.enabled = f2, t.humanize = Mr(), t.destroy = l, Object.keys(e2).forEach((a) => {
        t[a] = e2[a];
      }), t.names = [], t.skips = [], t.formatters = {};
      function r2(a) {
        let c2 = 0;
        for (let d2 = 0; d2 < a.length; d2++) c2 = (c2 << 5) - c2 + a.charCodeAt(d2), c2 |= 0;
        return t.colors[Math.abs(c2) % t.colors.length];
      }
      t.selectColor = r2;
      function t(a) {
        let c2, d2 = null, x2, y2;
        function p(...h2) {
          if (!p.enabled) return;
          let v2 = p, w2 = Number(/* @__PURE__ */ new Date()), b = w2 - (c2 || w2);
          v2.diff = b, v2.prev = c2, v2.curr = w2, c2 = w2, h2[0] = t.coerce(h2[0]), typeof h2[0] != "string" && h2.unshift("%O");
          let T2 = 0;
          h2[0] = h2[0].replace(/%([a-zA-Z%])/g, (k2, P2) => {
            if (k2 === "%%") return "%";
            T2++;
            let ee = t.formatters[P2];
            if (typeof ee == "function") {
              let ht = h2[T2];
              k2 = ee.call(v2, ht), h2.splice(T2, 1), T2--;
            }
            return k2;
          }), t.formatArgs.call(v2, h2), (v2.log || t.log).apply(v2, h2);
        }
        return p.namespace = a, p.useColors = t.useColors(), p.color = t.selectColor(a), p.extend = n, p.destroy = t.destroy, Object.defineProperty(p, "enabled", { enumerable: true, configurable: false, get: () => d2 !== null ? d2 : (x2 !== t.namespaces && (x2 = t.namespaces, y2 = t.enabled(a)), y2), set: (h2) => {
          d2 = h2;
        } }), typeof t.init == "function" && t.init(p), p;
      }
      function n(a, c2) {
        let d2 = t(this.namespace + (typeof c2 == "undefined" ? ":" : c2) + a);
        return d2.log = this.log, d2;
      }
      function i(a) {
        t.save(a), t.namespaces = a, t.names = [], t.skips = [];
        let c2, d2 = (typeof a == "string" ? a : "").split(/[\s,]+/), x2 = d2.length;
        for (c2 = 0; c2 < x2; c2++) d2[c2] && (a = d2[c2].replace(/\*/g, ".*?"), a[0] === "-" ? t.skips.push(new RegExp("^" + a.slice(1) + "$")) : t.names.push(new RegExp("^" + a + "$")));
      }
      function o2() {
        let a = [...t.names.map(s2), ...t.skips.map(s2).map((c2) => "-" + c2)].join(",");
        return t.enable(""), a;
      }
      function f2(a) {
        if (a[a.length - 1] === "*") return true;
        let c2, d2;
        for (c2 = 0, d2 = t.skips.length; c2 < d2; c2++) if (t.skips[c2].test(a)) return false;
        for (c2 = 0, d2 = t.names.length; c2 < d2; c2++) if (t.names[c2].test(a)) return true;
        return false;
      }
      function s2(a) {
        return a.toString().substring(2, a.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function u2(a) {
        return a instanceof Error ? a.stack || a.message : a;
      }
      function l() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      return t.enable(t.load()), t;
    }
    Br.exports = Wt;
  });
  var qr = E((S2, Ie2) => {
    S2.formatArgs = Gt;
    S2.save = Yt;
    S2.load = $t;
    S2.useColors = Ht;
    S2.storage = jt();
    S2.destroy = /* @__PURE__ */ (() => {
      let e2 = false;
      return () => {
        e2 || (e2 = true, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
      };
    })();
    S2.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"];
    function Ht() {
      return typeof window != "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs) ? true : typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/) ? false : typeof document != "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window != "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function Gt(e2) {
      if (e2[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + e2[0] + (this.useColors ? "%c " : " ") + "+" + Ie2.exports.humanize(this.diff), !this.useColors) return;
      let r2 = "color: " + this.color;
      e2.splice(1, 0, r2, "color: inherit");
      let t = 0, n = 0;
      e2[0].replace(/%[a-zA-Z%]/g, (i) => {
        i !== "%%" && (t++, i === "%c" && (n = t));
      }), e2.splice(n, 0, r2);
    }
    S2.log = console.debug || console.log || (() => {
    });
    function Yt(e2) {
      try {
        e2 ? S2.storage.setItem("debug", e2) : S2.storage.removeItem("debug");
      } catch {
      }
    }
    function $t() {
      let e2;
      try {
        e2 = S2.storage.getItem("debug");
      } catch {
      }
      return !e2 && typeof process != "undefined" && "env" in process && (e2 = process.env.DEBUG), e2;
    }
    function jt() {
      try {
        return localStorage;
      } catch {
      }
    }
    Ie2.exports = Je()(S2);
    var { formatters: Kt } = Ie2.exports;
    Kt.j = function(e2) {
      try {
        return JSON.stringify(e2);
      } catch (r2) {
        return "[UnexpectedJSONParseError]: " + r2.message;
      }
    };
  });
  var Zr = E((Pn, Pr) => {
    Pr.exports = (e2, r2 = process.argv) => {
      let t = e2.startsWith("-") ? "" : e2.length === 1 ? "-" : "--", n = r2.indexOf(t + e2), i = r2.indexOf("--");
      return n !== -1 && (i === -1 || n < i);
    };
  });
  var Gr = E((Zn, Hr) => {
    var Vt = require$$1$3, Wr = require$$2$1, I2 = Zr(), { env: g2 } = process, Le;
    I2("no-color") || I2("no-colors") || I2("color=false") || I2("color=never") ? Le = 0 : (I2("color") || I2("colors") || I2("color=true") || I2("color=always")) && (Le = 1);
    function Xt() {
      if ("FORCE_COLOR" in g2) return g2.FORCE_COLOR === "true" ? 1 : g2.FORCE_COLOR === "false" ? 0 : g2.FORCE_COLOR.length === 0 ? 1 : Math.min(Number.parseInt(g2.FORCE_COLOR, 10), 3);
    }
    function Jt(e2) {
      return e2 === 0 ? false : { level: e2, hasBasic: true, has256: e2 >= 2, has16m: e2 >= 3 };
    }
    function Qt(e2, { streamIsTTY: r2, sniffFlags: t = true } = {}) {
      let n = Xt();
      n !== void 0 && (Le = n);
      let i = t ? Le : n;
      if (i === 0) return 0;
      if (t) {
        if (I2("color=16m") || I2("color=full") || I2("color=truecolor")) return 3;
        if (I2("color=256")) return 2;
      }
      if (e2 && !r2 && i === void 0) return 0;
      let o2 = i || 0;
      if (g2.TERM === "dumb") return o2;
      if (process.platform === "win32") {
        let f2 = Vt.release().split(".");
        return Number(f2[0]) >= 10 && Number(f2[2]) >= 10586 ? Number(f2[2]) >= 14931 ? 3 : 2 : 1;
      }
      if ("CI" in g2) return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE", "DRONE"].some((f2) => f2 in g2) || g2.CI_NAME === "codeship" ? 1 : o2;
      if ("TEAMCITY_VERSION" in g2) return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(g2.TEAMCITY_VERSION) ? 1 : 0;
      if (g2.COLORTERM === "truecolor") return 3;
      if ("TERM_PROGRAM" in g2) {
        let f2 = Number.parseInt((g2.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (g2.TERM_PROGRAM) {
          case "iTerm.app":
            return f2 >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      return /-256(color)?$/i.test(g2.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(g2.TERM) || "COLORTERM" in g2 ? 1 : o2;
    }
    function Qe(e2, r2 = {}) {
      let t = Qt(e2, { streamIsTTY: e2 && e2.isTTY, ...r2 });
      return Jt(t);
    }
    Hr.exports = { supportsColor: Qe, stdout: Qe({ isTTY: Wr.isatty(1) }), stderr: Qe({ isTTY: Wr.isatty(2) }) };
  });
  var $r = E((C2, ze) => {
    var kt = require$$2$1, Oe = require$$1$2;
    C2.init = sn;
    C2.log = nn;
    C2.formatArgs = rn;
    C2.save = on;
    C2.load = fn;
    C2.useColors = en;
    C2.destroy = Oe.deprecate(() => {
    }, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    C2.colors = [6, 2, 3, 4, 5, 1];
    try {
      let e2 = Gr();
      e2 && (e2.stderr || e2).level >= 2 && (C2.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221]);
    } catch {
    }
    C2.inspectOpts = Object.keys(process.env).filter((e2) => /^debug_/i.test(e2)).reduce((e2, r2) => {
      let t = r2.substring(6).toLowerCase().replace(/_([a-z])/g, (i, o2) => o2.toUpperCase()), n = process.env[r2];
      return /^(yes|on|true|enabled)$/i.test(n) ? n = true : /^(no|off|false|disabled)$/i.test(n) ? n = false : n === "null" ? n = null : n = Number(n), e2[t] = n, e2;
    }, {});
    function en() {
      return "colors" in C2.inspectOpts ? !!C2.inspectOpts.colors : kt.isatty(process.stderr.fd);
    }
    function rn(e2) {
      let { namespace: r2, useColors: t } = this;
      if (t) {
        let n = this.color, i = "\x1B[3" + (n < 8 ? n : "8;5;" + n), o2 = `  ${i};1m${r2} \x1B[0m`;
        e2[0] = o2 + e2[0].split(`
`).join(`
` + o2), e2.push(i + "m+" + ze.exports.humanize(this.diff) + "\x1B[0m");
      } else e2[0] = tn() + r2 + " " + e2[0];
    }
    function tn() {
      return C2.inspectOpts.hideDate ? "" : (/* @__PURE__ */ new Date()).toISOString() + " ";
    }
    function nn(...e2) {
      return process.stderr.write(Oe.format(...e2) + `
`);
    }
    function on(e2) {
      e2 ? process.env.DEBUG = e2 : delete process.env.DEBUG;
    }
    function fn() {
      return process.env.DEBUG;
    }
    function sn(e2) {
      e2.inspectOpts = {};
      let r2 = Object.keys(C2.inspectOpts);
      for (let t = 0; t < r2.length; t++) e2.inspectOpts[r2[t]] = C2.inspectOpts[r2[t]];
    }
    ze.exports = Je()(C2);
    var { formatters: Yr } = ze.exports;
    Yr.o = function(e2) {
      return this.inspectOpts.colors = this.useColors, Oe.inspect(e2, this.inspectOpts).split(`
`).map((r2) => r2.trim()).join(" ");
    };
    Yr.O = function(e2) {
      return this.inspectOpts.colors = this.useColors, Oe.inspect(e2, this.inspectOpts);
    };
  });
  var jr = E((Wn, ke) => {
    typeof process == "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs ? ke.exports = qr() : ke.exports = $r();
  });
  var Xr = E((Hn, Vr) => {
    Vr.exports = Kr;
    function Kr(e2, r2) {
      if (e2 && r2) return Kr(e2)(r2);
      if (typeof e2 != "function") throw new TypeError("need wrapper function");
      return Object.keys(e2).forEach(function(n) {
        t[n] = e2[n];
      }), t;
      function t() {
        for (var n = new Array(arguments.length), i = 0; i < n.length; i++) n[i] = arguments[i];
        var o2 = e2.apply(this, n), f2 = n[n.length - 1];
        return typeof o2 == "function" && o2 !== f2 && Object.keys(f2).forEach(function(s2) {
          o2[s2] = f2[s2];
        }), o2;
      }
    }
  });
  var rr = E((Gn, er) => {
    var Jr = Xr();
    er.exports = Jr(_e);
    er.exports.strict = Jr(Qr);
    _e.proto = _e(function() {
      Object.defineProperty(Function.prototype, "once", { value: function() {
        return _e(this);
      }, configurable: true }), Object.defineProperty(Function.prototype, "onceStrict", { value: function() {
        return Qr(this);
      }, configurable: true });
    });
    function _e(e2) {
      var r2 = function() {
        return r2.called ? r2.value : (r2.called = true, r2.value = e2.apply(this, arguments));
      };
      return r2.called = false, r2;
    }
    function Qr(e2) {
      var r2 = function() {
        if (r2.called) throw new Error(r2.onceError);
        return r2.called = true, r2.value = e2.apply(this, arguments);
      }, t = e2.name || "Function wrapped with `once`";
      return r2.onceError = t + " shouldn't be called more than once", r2.called = false, r2;
    }
  });
  var rt = E((Yn, et) => {
    var an = rr(), un = function() {
    }, cn = function(e2) {
      return e2.setHeader && typeof e2.abort == "function";
    }, ln = function(e2) {
      return e2.stdio && Array.isArray(e2.stdio) && e2.stdio.length === 3;
    }, kr = function(e2, r2, t) {
      if (typeof r2 == "function") return kr(e2, null, r2);
      r2 || (r2 = {}), t = an(t || un);
      var n = e2._writableState, i = e2._readableState, o2 = r2.readable || r2.readable !== false && e2.readable, f2 = r2.writable || r2.writable !== false && e2.writable, s2 = false, u2 = function() {
        e2.writable || l();
      }, l = function() {
        f2 = false, o2 || t.call(e2);
      }, a = function() {
        o2 = false, f2 || t.call(e2);
      }, c2 = function(h2) {
        t.call(e2, h2 ? new Error("exited with error code: " + h2) : null);
      }, d2 = function(h2) {
        t.call(e2, h2);
      }, x2 = function() {
        process.nextTick(y2);
      }, y2 = function() {
        if (!s2) {
          if (o2 && !(i && i.ended && !i.destroyed)) return t.call(e2, new Error("premature close"));
          if (f2 && !(n && n.ended && !n.destroyed)) return t.call(e2, new Error("premature close"));
        }
      }, p = function() {
        e2.req.on("finish", l);
      };
      return cn(e2) ? (e2.on("complete", l), e2.on("abort", x2), e2.req ? p() : e2.on("request", p)) : f2 && !n && (e2.on("end", u2), e2.on("close", u2)), ln(e2) && e2.on("exit", c2), e2.on("end", a), e2.on("finish", l), r2.error !== false && e2.on("error", d2), e2.on("close", x2), function() {
        s2 = true, e2.removeListener("complete", l), e2.removeListener("abort", x2), e2.removeListener("request", p), e2.req && e2.req.removeListener("finish", l), e2.removeListener("end", u2), e2.removeListener("close", u2), e2.removeListener("finish", l), e2.removeListener("exit", c2), e2.removeListener("end", a), e2.removeListener("error", d2), e2.removeListener("close", x2);
      };
    };
    et.exports = kr;
  });
  var it = E(($n, nt) => {
    var dn = rr(), hn = rt(), tr = require$$0$2, fe = function() {
    }, pn = /^v?\.0/.test(process.version), Ae = function(e2) {
      return typeof e2 == "function";
    }, mn = function(e2) {
      return !pn || !tr ? false : (e2 instanceof (tr.ReadStream || fe) || e2 instanceof (tr.WriteStream || fe)) && Ae(e2.close);
    }, xn = function(e2) {
      return e2.setHeader && Ae(e2.abort);
    }, vn = function(e2, r2, t, n) {
      n = dn(n);
      var i = false;
      e2.on("close", function() {
        i = true;
      }), hn(e2, { readable: r2, writable: t }, function(f2) {
        if (f2) return n(f2);
        i = true, n();
      });
      var o2 = false;
      return function(f2) {
        if (!i && !o2) {
          if (o2 = true, mn(e2)) return e2.close(fe);
          if (xn(e2)) return e2.abort();
          if (Ae(e2.destroy)) return e2.destroy();
          n(f2 || new Error("stream was destroyed"));
        }
      };
    }, tt = function(e2) {
      e2();
    }, En = function(e2, r2) {
      return e2.pipe(r2);
    }, wn = function() {
      var e2 = Array.prototype.slice.call(arguments), r2 = Ae(e2[e2.length - 1] || fe) && e2.pop() || fe;
      if (Array.isArray(e2[0]) && (e2 = e2[0]), e2.length < 2) throw new Error("pump requires two streams per minimum");
      var t, n = e2.map(function(i, o2) {
        var f2 = o2 < e2.length - 1, s2 = o2 > 0;
        return vn(i, f2, s2, function(u2) {
          t || (t = u2), u2 && n.forEach(tt), !f2 && (n.forEach(tt), r2(t));
        });
      });
      return e2.reduce(En);
    };
    nt.exports = wn;
  });
  var ft = E((jn, ot) => {
    var { PassThrough: gn } = require$$12;
    ot.exports = (e2) => {
      e2 = { ...e2 };
      let { array: r2 } = e2, { encoding: t } = e2, n = t === "buffer", i = false;
      r2 ? i = !(t || n) : t = t || "utf8", n && (t = null);
      let o2 = new gn({ objectMode: i });
      t && o2.setEncoding(t);
      let f2 = 0, s2 = [];
      return o2.on("data", (u2) => {
        s2.push(u2), i ? f2 = s2.length : f2 += u2.length;
      }), o2.getBufferedValue = () => r2 ? s2 : n ? Buffer.concat(s2, f2) : s2.join(""), o2.getBufferedLength = () => f2, o2;
    };
  });
  var st = E((Kn, J2) => {
    var { constants: yn } = require$$14, Cn = it(), bn = ft(), Re = class extends Error {
      constructor() {
        super("maxBuffer exceeded"), this.name = "MaxBufferError";
      }
    };
    async function De(e2, r2) {
      if (!e2) return Promise.reject(new Error("Expected a stream"));
      r2 = { maxBuffer: 1 / 0, ...r2 };
      let { maxBuffer: t } = r2, n;
      return await new Promise((i, o2) => {
        let f2 = (s2) => {
          s2 && n.getBufferedLength() <= yn.MAX_LENGTH && (s2.bufferedData = n.getBufferedValue()), o2(s2);
        };
        n = Cn(e2, bn(r2), (s2) => {
          if (s2) {
            f2(s2);
            return;
          }
          i();
        }), n.on("data", () => {
          n.getBufferedLength() > t && f2(new Re());
        });
      }), n.getBufferedValue();
    }
    J2.exports = De;
    J2.exports.default = De;
    J2.exports.buffer = (e2, r2) => De(e2, { ...r2, encoding: "buffer" });
    J2.exports.array = (e2, r2) => De(e2, { ...r2, array: true });
    J2.exports.MaxBufferError = Re;
  });
  var ut = E((Vn, at) => {
    var z2 = jr()("extract-zip"), { createWriteStream: Fn, promises: Q2 } = require$$0$2, Sn = st(), G2 = require$$1$1, { promisify: ir } = require$$1$2, In = require$$12, Ln = Xe(), On = ir(Ln.open), zn = ir(In.pipeline), nr = class {
      constructor(r2, t) {
        this.zipPath = r2, this.opts = t;
      }
      async extract() {
        return z2("opening", this.zipPath, "with opts", this.opts), this.zipfile = await On(this.zipPath, { lazyEntries: true }), this.canceled = false, new Promise((r2, t) => {
          this.zipfile.on("error", (n) => {
            this.canceled = true, t(n);
          }), this.zipfile.readEntry(), this.zipfile.on("close", () => {
            this.canceled || (z2("zip extraction complete"), r2());
          }), this.zipfile.on("entry", async (n) => {
            if (this.canceled) {
              z2("skipping entry", n.fileName, { cancelled: this.canceled });
              return;
            }
            if (z2("zipfile entry", n.fileName), n.fileName.startsWith("__MACOSX/")) {
              this.zipfile.readEntry();
              return;
            }
            let i = G2.dirname(G2.join(this.opts.dir, n.fileName));
            try {
              await Q2.mkdir(i, { recursive: true });
              let o2 = await Q2.realpath(i);
              if (G2.relative(this.opts.dir, o2).split(G2.sep).includes("..")) throw new Error(`Out of bound path "${o2}" found while processing file ${n.fileName}`);
              await this.extractEntry(n), z2("finished processing", n.fileName), this.zipfile.readEntry();
            } catch (o2) {
              this.canceled = true, this.zipfile.close(), t(o2);
            }
          });
        });
      }
      async extractEntry(r2) {
        if (this.canceled) {
          z2("skipping entry extraction", r2.fileName, { cancelled: this.canceled });
          return;
        }
        this.opts.onEntry && this.opts.onEntry(r2, this.zipfile);
        let t = G2.join(this.opts.dir, r2.fileName), n = r2.externalFileAttributes >> 16 & 65535, i = 61440, o2 = 16384, s2 = (n & i) === 40960, u2 = (n & i) === o2;
        !u2 && r2.fileName.endsWith("/") && (u2 = true);
        let l = r2.versionMadeBy >> 8;
        u2 || (u2 = l === 0 && r2.externalFileAttributes === 16), z2("extracting entry", { filename: r2.fileName, isDir: u2, isSymlink: s2 });
        let a = this.getExtractedMode(n, u2) & 511, c2 = u2 ? t : G2.dirname(t), d2 = { recursive: true };
        if (u2 && (d2.mode = a), z2("mkdir", { dir: c2, ...d2 }), await Q2.mkdir(c2, d2), u2) return;
        z2("opening read stream", t);
        let x2 = await ir(this.zipfile.openReadStream.bind(this.zipfile))(r2);
        if (s2) {
          let y2 = await Sn(x2);
          z2("creating symlink", y2, t), await Q2.symlink(y2, t);
        } else await zn(x2, Fn(t, { mode: a }));
      }
      getExtractedMode(r2, t) {
        let n = r2;
        return n === 0 && (t ? (this.opts.defaultDirMode && (n = parseInt(this.opts.defaultDirMode, 10)), n || (n = 493)) : (this.opts.defaultFileMode && (n = parseInt(this.opts.defaultFileMode, 10)), n || (n = 420))), n;
      }
    };
    at.exports = async function(e2, r2) {
      if (z2("creating target directory", r2.dir), !G2.isAbsolute(r2.dir)) throw new Error("Target directory is expected to be absolute");
      return await Q2.mkdir(r2.dir, { recursive: true }), r2.dir = await Q2.realpath(r2.dir), new nr(e2, r2).extract();
    };
  });
  var An = {};
  wt(An, { extract: () => _n, yauzl: () => dt, yazl: () => lt });
  zipBundleImpl = gt(An);
  var lt = Te(br()), dt = Te(Xe()), ct = Te(ut()), _n = ct.default;
  return zipBundleImpl;
}
var hasRequiredZipBundle;
function requireZipBundle() {
  if (hasRequiredZipBundle) return zipBundle;
  hasRequiredZipBundle = 1;
  Object.defineProperty(zipBundle, "__esModule", {
    value: true
  });
  zipBundle.yazl = zipBundle.yauzl = zipBundle.extract = void 0;
  zipBundle.yazl = requireZipBundleImpl().yazl;
  zipBundle.yauzl = requireZipBundleImpl().yauzl;
  zipBundle.extract = requireZipBundleImpl().extract;
  return zipBundle;
}
var hasRequiredFileUtils$1;
function requireFileUtils$1() {
  if (hasRequiredFileUtils$1) return fileUtils$1;
  hasRequiredFileUtils$1 = 1;
  Object.defineProperty(fileUtils$1, "__esModule", {
    value: true
  });
  fileUtils$1.SerializedFS = void 0;
  fileUtils$1.canAccessFile = canAccessFile;
  fileUtils$1.copyFileAndMakeWritable = copyFileAndMakeWritable;
  fileUtils$1.existsAsync = void 0;
  fileUtils$1.mkdirIfNeeded = mkdirIfNeeded;
  fileUtils$1.removeFolders = removeFolders;
  fileUtils$1.sanitizeForFilePath = sanitizeForFilePath;
  fileUtils$1.toPosixPath = toPosixPath;
  var _fs = _interopRequireDefault(require$$0$2);
  var _path2 = _interopRequireDefault(require$$1$1);
  var _manualPromise = requireManualPromise();
  var _zipBundle = requireZipBundle();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  const existsAsync = (path) => new Promise((resolve2) => _fs.default.stat(path, (err) => resolve2(!err)));
  fileUtils$1.existsAsync = existsAsync;
  async function mkdirIfNeeded(filePath) {
    await _fs.default.promises.mkdir(_path2.default.dirname(filePath), {
      recursive: true
    }).catch(() => {
    });
  }
  async function removeFolders(dirs) {
    return await Promise.all(dirs.map((dir) => _fs.default.promises.rm(dir, {
      recursive: true,
      force: true,
      maxRetries: 10
    }).catch((e2) => e2)));
  }
  function canAccessFile(file2) {
    if (!file2) return false;
    try {
      _fs.default.accessSync(file2);
      return true;
    } catch (e2) {
      return false;
    }
  }
  async function copyFileAndMakeWritable(from, to) {
    await _fs.default.promises.copyFile(from, to);
    await _fs.default.promises.chmod(to, 436);
  }
  function sanitizeForFilePath(s2) {
    return s2.replace(/[\x00-\x2C\x2E-\x2F\x3A-\x40\x5B-\x60\x7B-\x7F]+/g, "-");
  }
  function toPosixPath(aPath) {
    return aPath.split(_path2.default.sep).join(_path2.default.posix.sep);
  }
  class SerializedFS {
    constructor() {
      this._buffers = /* @__PURE__ */ new Map();
      this._error = void 0;
      this._operations = [];
      this._operationsDone = void 0;
      this._operationsDone = new _manualPromise.ManualPromise();
      this._operationsDone.resolve();
    }
    mkdir(dir) {
      this._appendOperation({
        op: "mkdir",
        dir
      });
    }
    writeFile(file2, content, skipIfExists) {
      this._buffers.delete(file2);
      this._appendOperation({
        op: "writeFile",
        file: file2,
        content,
        skipIfExists
      });
    }
    appendFile(file2, text, flush) {
      if (!this._buffers.has(file2)) this._buffers.set(file2, []);
      this._buffers.get(file2).push(text);
      if (flush) this._flushFile(file2);
    }
    _flushFile(file2) {
      const buffer2 = this._buffers.get(file2);
      if (buffer2 === void 0) return;
      const content = buffer2.join("");
      this._buffers.delete(file2);
      this._appendOperation({
        op: "appendFile",
        file: file2,
        content
      });
    }
    copyFile(from, to) {
      this._flushFile(from);
      this._buffers.delete(to);
      this._appendOperation({
        op: "copyFile",
        from,
        to
      });
    }
    async syncAndGetError() {
      for (const file2 of this._buffers.keys()) this._flushFile(file2);
      await this._operationsDone;
      return this._error;
    }
    zip(entries, zipFileName) {
      for (const file2 of this._buffers.keys()) this._flushFile(file2);
      this._appendOperation({
        op: "zip",
        entries,
        zipFileName
      });
    }
    // This method serializes all writes to the trace.
    _appendOperation(op) {
      const last = this._operations[this._operations.length - 1];
      if ((last === null || last === void 0 ? void 0 : last.op) === "appendFile" && op.op === "appendFile" && last.file === op.file) {
        last.content += op.content;
        return;
      }
      this._operations.push(op);
      if (this._operationsDone.isDone()) this._performOperations();
    }
    async _performOperations() {
      this._operationsDone = new _manualPromise.ManualPromise();
      while (this._operations.length) {
        const op = this._operations.shift();
        if (this._error) continue;
        try {
          await this._performOperation(op);
        } catch (e2) {
          this._error = e2;
        }
      }
      this._operationsDone.resolve();
    }
    async _performOperation(op) {
      switch (op.op) {
        case "mkdir": {
          await _fs.default.promises.mkdir(op.dir, {
            recursive: true
          });
          return;
        }
        case "writeFile": {
          if (op.skipIfExists) await _fs.default.promises.writeFile(op.file, op.content, {
            flag: "wx"
          }).catch(() => {
          });
          else await _fs.default.promises.writeFile(op.file, op.content);
          return;
        }
        case "copyFile": {
          await _fs.default.promises.copyFile(op.from, op.to);
          return;
        }
        case "appendFile": {
          await _fs.default.promises.appendFile(op.file, op.content);
          return;
        }
        case "zip": {
          const zipFile2 = new _zipBundle.yazl.ZipFile();
          const result = new _manualPromise.ManualPromise();
          zipFile2.on("error", (error) => result.reject(error));
          for (const entry of op.entries) zipFile2.addFile(entry.value, entry.name);
          zipFile2.end();
          zipFile2.outputStream.pipe(_fs.default.createWriteStream(op.zipFileName)).on("close", () => result.resolve()).on("error", (error) => result.reject(error));
          await result;
          return;
        }
      }
    }
  }
  fileUtils$1.SerializedFS = SerializedFS;
  return fileUtils$1;
}
var hasRequiredBrowserFetcher;
function requireBrowserFetcher() {
  if (hasRequiredBrowserFetcher) return browserFetcher;
  hasRequiredBrowserFetcher = 1;
  Object.defineProperty(browserFetcher, "__esModule", {
    value: true
  });
  browserFetcher.downloadBrowserWithProgressBar = downloadBrowserWithProgressBar;
  browserFetcher.logPolitely = logPolitely;
  var childProcess = _interopRequireWildcard(require$$0$3);
  var _fs = _interopRequireDefault(require$$0$2);
  var _os = _interopRequireDefault(require$$1$3);
  var _path2 = _interopRequireDefault(require$$1$1);
  var _debugLogger = requireDebugLogger();
  var _manualPromise = requireManualPromise();
  var _userAgent = requireUserAgent();
  var _utilsBundle = requireUtilsBundle();
  var _fileUtils = requireFileUtils$1();
  var _2 = requireRegistry();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  async function downloadBrowserWithProgressBar(title, browserDirectory, executablePath, downloadURLs, downloadFileName, downloadConnectionTimeout) {
    if (await (0, _fileUtils.existsAsync)((0, _2.browserDirectoryToMarkerFilePath)(browserDirectory))) {
      _debugLogger.debugLogger.log("install", `${title} is already downloaded.`);
      return false;
    }
    const zipPath = _path2.default.join(_os.default.tmpdir(), downloadFileName);
    try {
      const retryCount = 5;
      for (let attempt = 1; attempt <= retryCount; ++attempt) {
        _debugLogger.debugLogger.log("install", `downloading ${title} - attempt #${attempt}`);
        const url = downloadURLs[(attempt - 1) % downloadURLs.length];
        logPolitely(`Downloading ${title}` + _utilsBundle.colors.dim(` from ${url}`));
        const {
          error
        } = await downloadBrowserWithProgressBarOutOfProcess(title, browserDirectory, url, zipPath, executablePath, downloadConnectionTimeout);
        if (!error) {
          _debugLogger.debugLogger.log("install", `SUCCESS installing ${title}`);
          break;
        }
        if (await (0, _fileUtils.existsAsync)(zipPath)) await _fs.default.promises.unlink(zipPath);
        if (await (0, _fileUtils.existsAsync)(browserDirectory)) await _fs.default.promises.rmdir(browserDirectory, {
          recursive: true
        });
        const errorMessage = (error === null || error === void 0 ? void 0 : error.message) || "";
        _debugLogger.debugLogger.log("install", `attempt #${attempt} - ERROR: ${errorMessage}`);
        if (attempt >= retryCount) throw error;
      }
    } catch (e2) {
      _debugLogger.debugLogger.log("install", `FAILED installation ${title} with error: ${e2}`);
      process.exitCode = 1;
      throw e2;
    } finally {
      if (await (0, _fileUtils.existsAsync)(zipPath)) await _fs.default.promises.unlink(zipPath);
    }
    logPolitely(`${title} downloaded to ${browserDirectory}`);
    return true;
  }
  function downloadBrowserWithProgressBarOutOfProcess(title, browserDirectory, url, zipPath, executablePath, connectionTimeout) {
    const cp = childProcess.fork(_path2.default.join(new URL(".", import.meta.url).pathname, "oopDownloadBrowserMain.js"));
    const promise = new _manualPromise.ManualPromise();
    const progress2 = getDownloadProgress();
    cp.on("message", (message) => {
      if ((message === null || message === void 0 ? void 0 : message.method) === "log") _debugLogger.debugLogger.log("install", message.params.message);
      if ((message === null || message === void 0 ? void 0 : message.method) === "progress") progress2(message.params.done, message.params.total);
    });
    cp.on("exit", (code) => {
      if (code !== 0) {
        promise.resolve({
          error: new Error(`Download failure, code=${code}`)
        });
        return;
      }
      if (!_fs.default.existsSync((0, _2.browserDirectoryToMarkerFilePath)(browserDirectory))) promise.resolve({
        error: new Error(`Download failure, ${(0, _2.browserDirectoryToMarkerFilePath)(browserDirectory)} does not exist`)
      });
      else promise.resolve({
        error: null
      });
    });
    cp.on("error", (error) => {
      promise.resolve({
        error
      });
    });
    _debugLogger.debugLogger.log("install", `running download:`);
    _debugLogger.debugLogger.log("install", `-- from url: ${url}`);
    _debugLogger.debugLogger.log("install", `-- to location: ${zipPath}`);
    const downloadParams = {
      title,
      browserDirectory,
      url,
      zipPath,
      executablePath,
      connectionTimeout,
      userAgent: (0, _userAgent.getUserAgent)()
    };
    cp.send({
      method: "download",
      params: downloadParams
    });
    return promise;
  }
  function logPolitely(toBeLogged) {
    const logLevel = process.env.npm_config_loglevel;
    const logLevelDisplay = ["silent", "error", "warn"].indexOf(logLevel || "") > -1;
    if (!logLevelDisplay) console.log(toBeLogged);
  }
  function getDownloadProgress() {
    if (process.stdout.isTTY) return getAnimatedDownloadProgress();
    return getBasicDownloadProgress();
  }
  function getAnimatedDownloadProgress() {
    let progressBar;
    let lastDownloadedBytes = 0;
    return (downloadedBytes, totalBytes) => {
      if (!progressBar) {
        progressBar = new _utilsBundle.progress(`${toMegabytes(totalBytes)} [:bar] :percent :etas`, {
          complete: "=",
          incomplete: " ",
          width: 20,
          total: totalBytes
        });
      }
      const delta = downloadedBytes - lastDownloadedBytes;
      lastDownloadedBytes = downloadedBytes;
      progressBar.tick(delta);
    };
  }
  function getBasicDownloadProgress() {
    const totalRows = 10;
    const stepWidth = 8;
    let lastRow = -1;
    return (downloadedBytes, totalBytes) => {
      const percentage = downloadedBytes / totalBytes;
      const row = Math.floor(totalRows * percentage);
      if (row > lastRow) {
        lastRow = row;
        const percentageString = String(percentage * 100 | 0).padStart(3);
        console.log(`|${"■".repeat(row * stepWidth)}${" ".repeat((totalRows - row) * stepWidth)}| ${percentageString}% of ${toMegabytes(totalBytes)}`);
      }
    };
  }
  function toMegabytes(bytes) {
    const mb = bytes / 1024 / 1024;
    return `${Math.round(mb * 10) / 10} MiB`;
  }
  return browserFetcher;
}
var dependencies = {};
var nativeDeps = {};
var hasRequiredNativeDeps;
function requireNativeDeps() {
  if (hasRequiredNativeDeps) return nativeDeps;
  hasRequiredNativeDeps = 1;
  Object.defineProperty(nativeDeps, "__esModule", {
    value: true
  });
  nativeDeps.deps = void 0;
  const deps = nativeDeps.deps = {
    "ubuntu20.04-x64": {
      tools: ["xvfb", "fonts-noto-color-emoji", "ttf-unifont", "libfontconfig", "libfreetype6", "xfonts-cyrillic", "xfonts-scalable", "fonts-liberation", "fonts-ipafont-gothic", "fonts-wqy-zenhei", "fonts-tlwg-loma-otf", "ttf-ubuntu-font-family"],
      chromium: ["fonts-liberation", "libasound2", "libatk-bridge2.0-0", "libatk1.0-0", "libatspi2.0-0", "libcairo2", "libcups2", "libdbus-1-3", "libdrm2", "libegl1", "libgbm1", "libglib2.0-0", "libgtk-3-0", "libnspr4", "libnss3", "libpango-1.0-0", "libx11-6", "libx11-xcb1", "libxcb1", "libxcomposite1", "libxdamage1", "libxext6", "libxfixes3", "libxrandr2", "libxshmfence1"],
      firefox: ["ffmpeg", "libatk1.0-0", "libcairo-gobject2", "libcairo2", "libdbus-1-3", "libdbus-glib-1-2", "libfontconfig1", "libfreetype6", "libgdk-pixbuf2.0-0", "libglib2.0-0", "libgtk-3-0", "libpango-1.0-0", "libpangocairo-1.0-0", "libpangoft2-1.0-0", "libx11-6", "libx11-xcb1", "libxcb-shm0", "libxcb1", "libxcomposite1", "libxcursor1", "libxdamage1", "libxext6", "libxfixes3", "libxi6", "libxrender1", "libxt6", "libxtst6"],
      webkit: ["libenchant-2-2", "libflite1", "libx264-155", "libatk-bridge2.0-0", "libatk1.0-0", "libcairo2", "libegl1", "libenchant1c2a", "libepoxy0", "libevdev2", "libfontconfig1", "libfreetype6", "libgdk-pixbuf2.0-0", "libgl1", "libgles2", "libglib2.0-0", "libgtk-3-0", "libgudev-1.0-0", "libharfbuzz-icu0", "libharfbuzz0b", "libhyphen0", "libicu66", "libjpeg-turbo8", "libnghttp2-14", "libnotify4", "libopengl0", "libopenjp2-7", "libopus0", "libpango-1.0-0", "libpng16-16", "libsecret-1-0", "libvpx6", "libwayland-client0", "libwayland-egl1", "libwayland-server0", "libwebp6", "libwebpdemux2", "libwoff1", "libx11-6", "libxcomposite1", "libxdamage1", "libxkbcommon0", "libxml2", "libxslt1.1", "libatomic1", "libevent-2.1-7"],
      lib2package: {
        "libflite.so.1": "libflite1",
        "libflite_usenglish.so.1": "libflite1",
        "libflite_cmu_grapheme_lang.so.1": "libflite1",
        "libflite_cmu_grapheme_lex.so.1": "libflite1",
        "libflite_cmu_indic_lang.so.1": "libflite1",
        "libflite_cmu_indic_lex.so.1": "libflite1",
        "libflite_cmulex.so.1": "libflite1",
        "libflite_cmu_time_awb.so.1": "libflite1",
        "libflite_cmu_us_awb.so.1": "libflite1",
        "libflite_cmu_us_kal16.so.1": "libflite1",
        "libflite_cmu_us_kal.so.1": "libflite1",
        "libflite_cmu_us_rms.so.1": "libflite1",
        "libflite_cmu_us_slt.so.1": "libflite1",
        "libx264.so": "libx264-155",
        "libasound.so.2": "libasound2",
        "libatk-1.0.so.0": "libatk1.0-0",
        "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0",
        "libatspi.so.0": "libatspi2.0-0",
        "libcairo-gobject.so.2": "libcairo-gobject2",
        "libcairo.so.2": "libcairo2",
        "libcups.so.2": "libcups2",
        "libdbus-1.so.3": "libdbus-1-3",
        "libdbus-glib-1.so.2": "libdbus-glib-1-2",
        "libdrm.so.2": "libdrm2",
        "libEGL.so.1": "libegl1",
        "libenchant.so.1": "libenchant1c2a",
        "libevdev.so.2": "libevdev2",
        "libepoxy.so.0": "libepoxy0",
        "libfontconfig.so.1": "libfontconfig1",
        "libfreetype.so.6": "libfreetype6",
        "libgbm.so.1": "libgbm1",
        "libgdk_pixbuf-2.0.so.0": "libgdk-pixbuf2.0-0",
        "libgdk-3.so.0": "libgtk-3-0",
        "libgdk-x11-2.0.so.0": "libgtk2.0-0",
        "libgio-2.0.so.0": "libglib2.0-0",
        "libGL.so.1": "libgl1",
        "libGLESv2.so.2": "libgles2",
        "libglib-2.0.so.0": "libglib2.0-0",
        "libgmodule-2.0.so.0": "libglib2.0-0",
        "libgobject-2.0.so.0": "libglib2.0-0",
        "libgthread-2.0.so.0": "libglib2.0-0",
        "libgtk-3.so.0": "libgtk-3-0",
        "libgtk-x11-2.0.so.0": "libgtk2.0-0",
        "libgudev-1.0.so.0": "libgudev-1.0-0",
        "libharfbuzz-icu.so.0": "libharfbuzz-icu0",
        "libharfbuzz.so.0": "libharfbuzz0b",
        "libhyphen.so.0": "libhyphen0",
        "libicui18n.so.66": "libicu66",
        "libicuuc.so.66": "libicu66",
        "libjpeg.so.8": "libjpeg-turbo8",
        "libnotify.so.4": "libnotify4",
        "libnspr4.so": "libnspr4",
        "libnss3.so": "libnss3",
        "libnssutil3.so": "libnss3",
        "libOpenGL.so.0": "libopengl0",
        "libopenjp2.so.7": "libopenjp2-7",
        "libopus.so.0": "libopus0",
        "libpango-1.0.so.0": "libpango-1.0-0",
        "libpangocairo-1.0.so.0": "libpangocairo-1.0-0",
        "libpangoft2-1.0.so.0": "libpangoft2-1.0-0",
        "libpng16.so.16": "libpng16-16",
        "libsecret-1.so.0": "libsecret-1-0",
        "libsmime3.so": "libnss3",
        "libvpx.so.6": "libvpx6",
        "libwayland-client.so.0": "libwayland-client0",
        "libwayland-egl.so.1": "libwayland-egl1",
        "libwayland-server.so.0": "libwayland-server0",
        "libwebp.so.6": "libwebp6",
        "libwebpdemux.so.2": "libwebpdemux2",
        "libwoff2dec.so.1.0.2": "libwoff1",
        "libX11-xcb.so.1": "libx11-xcb1",
        "libX11.so.6": "libx11-6",
        "libxcb-dri3.so.0": "libxcb-dri3-0",
        "libxcb-shm.so.0": "libxcb-shm0",
        "libxcb.so.1": "libxcb1",
        "libXcomposite.so.1": "libxcomposite1",
        "libXcursor.so.1": "libxcursor1",
        "libXdamage.so.1": "libxdamage1",
        "libXext.so.6": "libxext6",
        "libXfixes.so.3": "libxfixes3",
        "libXi.so.6": "libxi6",
        "libxkbcommon.so.0": "libxkbcommon0",
        "libxml2.so.2": "libxml2",
        "libXrandr.so.2": "libxrandr2",
        "libXrender.so.1": "libxrender1",
        "libxslt.so.1": "libxslt1.1",
        "libXt.so.6": "libxt6",
        "libXtst.so.6": "libxtst6",
        "libxshmfence.so.1": "libxshmfence1",
        "libatomic.so.1": "libatomic1",
        "libenchant-2.so.2": "libenchant-2-2",
        "libevent-2.1.so.7": "libevent-2.1-7"
      }
    },
    "ubuntu22.04-x64": {
      tools: ["xvfb", "fonts-noto-color-emoji", "fonts-unifont", "libfontconfig1", "libfreetype6", "xfonts-cyrillic", "xfonts-scalable", "fonts-liberation", "fonts-ipafont-gothic", "fonts-wqy-zenhei", "fonts-tlwg-loma-otf", "fonts-freefont-ttf"],
      chromium: ["libasound2", "libatk-bridge2.0-0", "libatk1.0-0", "libatspi2.0-0", "libcairo2", "libcups2", "libdbus-1-3", "libdrm2", "libgbm1", "libglib2.0-0", "libnspr4", "libnss3", "libpango-1.0-0", "libwayland-client0", "libx11-6", "libxcb1", "libxcomposite1", "libxdamage1", "libxext6", "libxfixes3", "libxkbcommon0", "libxrandr2"],
      firefox: ["ffmpeg", "libasound2", "libatk1.0-0", "libcairo-gobject2", "libcairo2", "libdbus-1-3", "libdbus-glib-1-2", "libfontconfig1", "libfreetype6", "libgdk-pixbuf-2.0-0", "libglib2.0-0", "libgtk-3-0", "libpango-1.0-0", "libpangocairo-1.0-0", "libx11-6", "libx11-xcb1", "libxcb-shm0", "libxcb1", "libxcomposite1", "libxcursor1", "libxdamage1", "libxext6", "libxfixes3", "libxi6", "libxrandr2", "libxrender1", "libxtst6"],
      webkit: ["libsoup-3.0-0", "libenchant-2-2", "gstreamer1.0-libav", "gstreamer1.0-plugins-bad", "gstreamer1.0-plugins-base", "gstreamer1.0-plugins-good", "libicu70", "libatk-bridge2.0-0", "libatk1.0-0", "libcairo2", "libdbus-1-3", "libdrm2", "libegl1", "libepoxy0", "libevdev2", "libffi7", "libfontconfig1", "libfreetype6", "libgbm1", "libgdk-pixbuf-2.0-0", "libgles2", "libglib2.0-0", "libglx0", "libgstreamer-gl1.0-0", "libgstreamer-plugins-base1.0-0", "libgstreamer1.0-0", "libgtk-4-1", "libgudev-1.0-0", "libharfbuzz-icu0", "libharfbuzz0b", "libhyphen0", "libjpeg-turbo8", "liblcms2-2", "libmanette-0.2-0", "libnotify4", "libopengl0", "libopenjp2-7", "libopus0", "libpango-1.0-0", "libpng16-16", "libproxy1v5", "libsecret-1-0", "libwayland-client0", "libwayland-egl1", "libwayland-server0", "libwebpdemux2", "libwoff1", "libx11-6", "libxcomposite1", "libxdamage1", "libxkbcommon0", "libxml2", "libxslt1.1", "libx264-163", "libatomic1", "libevent-2.1-7", "libavif13"],
      lib2package: {
        "libavif.so.13": "libavif13",
        "libsoup-3.0.so.0": "libsoup-3.0-0",
        "libasound.so.2": "libasound2",
        "libatk-1.0.so.0": "libatk1.0-0",
        "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0",
        "libatspi.so.0": "libatspi2.0-0",
        "libcairo-gobject.so.2": "libcairo-gobject2",
        "libcairo.so.2": "libcairo2",
        "libcups.so.2": "libcups2",
        "libdbus-1.so.3": "libdbus-1-3",
        "libdbus-glib-1.so.2": "libdbus-glib-1-2",
        "libdrm.so.2": "libdrm2",
        "libEGL.so.1": "libegl1",
        "libepoxy.so.0": "libepoxy0",
        "libevdev.so.2": "libevdev2",
        "libffi.so.7": "libffi7",
        "libfontconfig.so.1": "libfontconfig1",
        "libfreetype.so.6": "libfreetype6",
        "libgbm.so.1": "libgbm1",
        "libgdk_pixbuf-2.0.so.0": "libgdk-pixbuf-2.0-0",
        "libgdk-3.so.0": "libgtk-3-0",
        "libgio-2.0.so.0": "libglib2.0-0",
        "libGLESv2.so.2": "libgles2",
        "libglib-2.0.so.0": "libglib2.0-0",
        "libGLX.so.0": "libglx0",
        "libgmodule-2.0.so.0": "libglib2.0-0",
        "libgobject-2.0.so.0": "libglib2.0-0",
        "libgstallocators-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstapp-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstaudio-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstbase-1.0.so.0": "libgstreamer1.0-0",
        "libgstfft-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstgl-1.0.so.0": "libgstreamer-gl1.0-0",
        "libgstpbutils-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstreamer-1.0.so.0": "libgstreamer1.0-0",
        "libgsttag-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstvideo-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgtk-3.so.0": "libgtk-3-0",
        "libgtk-4.so.1": "libgtk-4-1",
        "libgudev-1.0.so.0": "libgudev-1.0-0",
        "libharfbuzz-icu.so.0": "libharfbuzz-icu0",
        "libharfbuzz.so.0": "libharfbuzz0b",
        "libhyphen.so.0": "libhyphen0",
        "libjpeg.so.8": "libjpeg-turbo8",
        "liblcms2.so.2": "liblcms2-2",
        "libmanette-0.2.so.0": "libmanette-0.2-0",
        "libnotify.so.4": "libnotify4",
        "libnspr4.so": "libnspr4",
        "libnss3.so": "libnss3",
        "libnssutil3.so": "libnss3",
        "libOpenGL.so.0": "libopengl0",
        "libopenjp2.so.7": "libopenjp2-7",
        "libopus.so.0": "libopus0",
        "libpango-1.0.so.0": "libpango-1.0-0",
        "libpangocairo-1.0.so.0": "libpangocairo-1.0-0",
        "libpng16.so.16": "libpng16-16",
        "libproxy.so.1": "libproxy1v5",
        "libsecret-1.so.0": "libsecret-1-0",
        "libsmime3.so": "libnss3",
        "libwayland-client.so.0": "libwayland-client0",
        "libwayland-egl.so.1": "libwayland-egl1",
        "libwayland-server.so.0": "libwayland-server0",
        "libwebpdemux.so.2": "libwebpdemux2",
        "libwoff2dec.so.1.0.2": "libwoff1",
        "libX11-xcb.so.1": "libx11-xcb1",
        "libX11.so.6": "libx11-6",
        "libxcb-shm.so.0": "libxcb-shm0",
        "libxcb.so.1": "libxcb1",
        "libXcomposite.so.1": "libxcomposite1",
        "libXcursor.so.1": "libxcursor1",
        "libXdamage.so.1": "libxdamage1",
        "libXext.so.6": "libxext6",
        "libXfixes.so.3": "libxfixes3",
        "libXi.so.6": "libxi6",
        "libxkbcommon.so.0": "libxkbcommon0",
        "libxml2.so.2": "libxml2",
        "libXrandr.so.2": "libxrandr2",
        "libXrender.so.1": "libxrender1",
        "libxslt.so.1": "libxslt1.1",
        "libXtst.so.6": "libxtst6",
        "libicui18n.so.60": "libicu70",
        "libicuuc.so.66": "libicu70",
        "libicui18n.so.66": "libicu70",
        "libwebp.so.6": "libwebp6",
        "libenchant-2.so.2": "libenchant-2-2",
        "libx264.so": "libx264-163",
        "libvpx.so.7": "libvpx7",
        "libatomic.so.1": "libatomic1",
        "libevent-2.1.so.7": "libevent-2.1-7"
      }
    },
    "ubuntu24.04-x64": {
      tools: ["xvfb", "fonts-noto-color-emoji", "fonts-unifont", "libfontconfig1", "libfreetype6", "xfonts-cyrillic", "xfonts-scalable", "fonts-liberation", "fonts-ipafont-gothic", "fonts-wqy-zenhei", "fonts-tlwg-loma-otf", "fonts-freefont-ttf"],
      chromium: ["libasound2t64", "libatk-bridge2.0-0t64", "libatk1.0-0t64", "libatspi2.0-0t64", "libcairo2", "libcups2t64", "libdbus-1-3", "libdrm2", "libgbm1", "libglib2.0-0t64", "libnspr4", "libnss3", "libpango-1.0-0", "libx11-6", "libxcb1", "libxcomposite1", "libxdamage1", "libxext6", "libxfixes3", "libxkbcommon0", "libxrandr2"],
      firefox: ["libasound2t64", "libatk1.0-0t64", "libcairo-gobject2", "libcairo2", "libdbus-1-3", "libfontconfig1", "libfreetype6", "libgdk-pixbuf-2.0-0", "libglib2.0-0t64", "libgtk-3-0t64", "libpango-1.0-0", "libpangocairo-1.0-0", "libx11-6", "libx11-xcb1", "libxcb-shm0", "libxcb1", "libxcomposite1", "libxcursor1", "libxdamage1", "libxext6", "libxfixes3", "libxi6", "libxrandr2", "libxrender1"],
      webkit: ["gstreamer1.0-libav", "gstreamer1.0-plugins-bad", "gstreamer1.0-plugins-base", "gstreamer1.0-plugins-good", "libicu74", "libatomic1", "libatk-bridge2.0-0t64", "libatk1.0-0t64", "libcairo-gobject2", "libcairo2", "libdbus-1-3", "libdrm2", "libenchant-2-2", "libepoxy0", "libevent-2.1-7t64", "libflite1", "libfontconfig1", "libfreetype6", "libgbm1", "libgdk-pixbuf-2.0-0", "libgles2", "libglib2.0-0t64", "libgstreamer-gl1.0-0", "libgstreamer-plugins-bad1.0-0", "libgstreamer-plugins-base1.0-0", "libgstreamer1.0-0", "libgtk-4-1", "libharfbuzz-icu0", "libharfbuzz0b", "libhyphen0", "libicu74", "libjpeg-turbo8", "liblcms2-2", "libmanette-0.2-0", "libopus0", "libpango-1.0-0", "libpangocairo-1.0-0", "libpng16-16t64", "libsecret-1-0", "libvpx9", "libwayland-client0", "libwayland-egl1", "libwayland-server0", "libwebp7", "libwebpdemux2", "libwoff1", "libx11-6", "libxkbcommon0", "libxml2", "libxslt1.1", "libx264-164", "libavif16"],
      lib2package: {
        "libavif.so.16": "libavif16",
        "libasound.so.2": "libasound2t64",
        "libatk-1.0.so.0": "libatk1.0-0t64",
        "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0t64",
        "libatomic.so.1": "libatomic1",
        "libatspi.so.0": "libatspi2.0-0t64",
        "libcairo-gobject.so.2": "libcairo-gobject2",
        "libcairo.so.2": "libcairo2",
        "libcups.so.2": "libcups2t64",
        "libdbus-1.so.3": "libdbus-1-3",
        "libdrm.so.2": "libdrm2",
        "libenchant-2.so.2": "libenchant-2-2",
        "libepoxy.so.0": "libepoxy0",
        "libevent-2.1.so.7": "libevent-2.1-7t64",
        "libflite_cmu_grapheme_lang.so.1": "libflite1",
        "libflite_cmu_grapheme_lex.so.1": "libflite1",
        "libflite_cmu_indic_lang.so.1": "libflite1",
        "libflite_cmu_indic_lex.so.1": "libflite1",
        "libflite_cmu_time_awb.so.1": "libflite1",
        "libflite_cmu_us_awb.so.1": "libflite1",
        "libflite_cmu_us_kal.so.1": "libflite1",
        "libflite_cmu_us_kal16.so.1": "libflite1",
        "libflite_cmu_us_rms.so.1": "libflite1",
        "libflite_cmu_us_slt.so.1": "libflite1",
        "libflite_cmulex.so.1": "libflite1",
        "libflite_usenglish.so.1": "libflite1",
        "libflite.so.1": "libflite1",
        "libfontconfig.so.1": "libfontconfig1",
        "libfreetype.so.6": "libfreetype6",
        "libgbm.so.1": "libgbm1",
        "libgdk_pixbuf-2.0.so.0": "libgdk-pixbuf-2.0-0",
        "libgdk-3.so.0": "libgtk-3-0t64",
        "libgio-2.0.so.0": "libglib2.0-0t64",
        "libGLESv2.so.2": "libgles2",
        "libglib-2.0.so.0": "libglib2.0-0t64",
        "libgmodule-2.0.so.0": "libglib2.0-0t64",
        "libgobject-2.0.so.0": "libglib2.0-0t64",
        "libgstallocators-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstapp-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstaudio-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstbase-1.0.so.0": "libgstreamer1.0-0",
        "libgstcodecparsers-1.0.so.0": "libgstreamer-plugins-bad1.0-0",
        "libgstfft-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstgl-1.0.so.0": "libgstreamer-gl1.0-0",
        "libgstpbutils-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstreamer-1.0.so.0": "libgstreamer1.0-0",
        "libgsttag-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstvideo-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgtk-3.so.0": "libgtk-3-0t64",
        "libgtk-4.so.1": "libgtk-4-1",
        "libharfbuzz-icu.so.0": "libharfbuzz-icu0",
        "libharfbuzz.so.0": "libharfbuzz0b",
        "libhyphen.so.0": "libhyphen0",
        "libicudata.so.74": "libicu74",
        "libicui18n.so.74": "libicu74",
        "libicuuc.so.74": "libicu74",
        "libjpeg.so.8": "libjpeg-turbo8",
        "liblcms2.so.2": "liblcms2-2",
        "libmanette-0.2.so.0": "libmanette-0.2-0",
        "libnspr4.so": "libnspr4",
        "libnss3.so": "libnss3",
        "libnssutil3.so": "libnss3",
        "libopus.so.0": "libopus0",
        "libpango-1.0.so.0": "libpango-1.0-0",
        "libpangocairo-1.0.so.0": "libpangocairo-1.0-0",
        "libpng16.so.16": "libpng16-16t64",
        "libsecret-1.so.0": "libsecret-1-0",
        "libsmime3.so": "libnss3",
        "libsoup-3.0.so.0": "libsoup-3.0-0",
        "libvpx.so.9": "libvpx9",
        "libwayland-client.so.0": "libwayland-client0",
        "libwayland-egl.so.1": "libwayland-egl1",
        "libwayland-server.so.0": "libwayland-server0",
        "libwebp.so.7": "libwebp7",
        "libwebpdemux.so.2": "libwebpdemux2",
        "libwoff2dec.so.1.0.2": "libwoff1",
        "libX11-xcb.so.1": "libx11-xcb1",
        "libX11.so.6": "libx11-6",
        "libxcb-shm.so.0": "libxcb-shm0",
        "libxcb.so.1": "libxcb1",
        "libXcomposite.so.1": "libxcomposite1",
        "libXcursor.so.1": "libxcursor1",
        "libXdamage.so.1": "libxdamage1",
        "libXext.so.6": "libxext6",
        "libXfixes.so.3": "libxfixes3",
        "libXi.so.6": "libxi6",
        "libxkbcommon.so.0": "libxkbcommon0",
        "libxml2.so.2": "libxml2",
        "libXrandr.so.2": "libxrandr2",
        "libXrender.so.1": "libxrender1",
        "libxslt.so.1": "libxslt1.1",
        "libx264.so": "libx264-164"
      }
    },
    "debian11-x64": {
      tools: ["xvfb", "fonts-noto-color-emoji", "fonts-unifont", "libfontconfig1", "libfreetype6", "xfonts-cyrillic", "xfonts-scalable", "fonts-liberation", "fonts-ipafont-gothic", "fonts-wqy-zenhei", "fonts-tlwg-loma-otf", "fonts-freefont-ttf"],
      chromium: ["libasound2", "libatk-bridge2.0-0", "libatk1.0-0", "libatspi2.0-0", "libcairo2", "libcups2", "libdbus-1-3", "libdrm2", "libgbm1", "libglib2.0-0", "libnspr4", "libnss3", "libpango-1.0-0", "libwayland-client0", "libx11-6", "libxcb1", "libxcomposite1", "libxdamage1", "libxext6", "libxfixes3", "libxkbcommon0", "libxrandr2"],
      firefox: ["libasound2", "libatk1.0-0", "libcairo-gobject2", "libcairo2", "libdbus-1-3", "libdbus-glib-1-2", "libfontconfig1", "libfreetype6", "libgdk-pixbuf-2.0-0", "libglib2.0-0", "libgtk-3-0", "libharfbuzz0b", "libpango-1.0-0", "libpangocairo-1.0-0", "libx11-6", "libx11-xcb1", "libxcb-shm0", "libxcb1", "libxcomposite1", "libxcursor1", "libxdamage1", "libxext6", "libxfixes3", "libxi6", "libxrandr2", "libxrender1", "libxtst6"],
      webkit: ["gstreamer1.0-libav", "gstreamer1.0-plugins-bad", "gstreamer1.0-plugins-base", "gstreamer1.0-plugins-good", "libatk-bridge2.0-0", "libatk1.0-0", "libcairo2", "libdbus-1-3", "libdrm2", "libegl1", "libenchant-2-2", "libepoxy0", "libevdev2", "libfontconfig1", "libfreetype6", "libgbm1", "libgdk-pixbuf-2.0-0", "libgles2", "libglib2.0-0", "libglx0", "libgstreamer-gl1.0-0", "libgstreamer-plugins-base1.0-0", "libgstreamer1.0-0", "libgtk-3-0", "libgudev-1.0-0", "libharfbuzz-icu0", "libharfbuzz0b", "libhyphen0", "libicu67", "libjpeg62-turbo", "liblcms2-2", "libmanette-0.2-0", "libnghttp2-14", "libnotify4", "libopengl0", "libopenjp2-7", "libopus0", "libpango-1.0-0", "libpng16-16", "libproxy1v5", "libsecret-1-0", "libwayland-client0", "libwayland-egl1", "libwayland-server0", "libwebp6", "libwebpdemux2", "libwoff1", "libx11-6", "libxcomposite1", "libxdamage1", "libxkbcommon0", "libxml2", "libxslt1.1", "libatomic1", "libevent-2.1-7"],
      lib2package: {
        "libasound.so.2": "libasound2",
        "libatk-1.0.so.0": "libatk1.0-0",
        "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0",
        "libatspi.so.0": "libatspi2.0-0",
        "libcairo-gobject.so.2": "libcairo-gobject2",
        "libcairo.so.2": "libcairo2",
        "libcups.so.2": "libcups2",
        "libdbus-1.so.3": "libdbus-1-3",
        "libdbus-glib-1.so.2": "libdbus-glib-1-2",
        "libdrm.so.2": "libdrm2",
        "libEGL.so.1": "libegl1",
        "libenchant-2.so.2": "libenchant-2-2",
        "libepoxy.so.0": "libepoxy0",
        "libevdev.so.2": "libevdev2",
        "libfontconfig.so.1": "libfontconfig1",
        "libfreetype.so.6": "libfreetype6",
        "libgbm.so.1": "libgbm1",
        "libgdk_pixbuf-2.0.so.0": "libgdk-pixbuf-2.0-0",
        "libgdk-3.so.0": "libgtk-3-0",
        "libgio-2.0.so.0": "libglib2.0-0",
        "libGLESv2.so.2": "libgles2",
        "libglib-2.0.so.0": "libglib2.0-0",
        "libGLX.so.0": "libglx0",
        "libgmodule-2.0.so.0": "libglib2.0-0",
        "libgobject-2.0.so.0": "libglib2.0-0",
        "libgstallocators-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstapp-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstaudio-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstbase-1.0.so.0": "libgstreamer1.0-0",
        "libgstfft-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstgl-1.0.so.0": "libgstreamer-gl1.0-0",
        "libgstpbutils-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstreamer-1.0.so.0": "libgstreamer1.0-0",
        "libgsttag-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstvideo-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgtk-3.so.0": "libgtk-3-0",
        "libgudev-1.0.so.0": "libgudev-1.0-0",
        "libharfbuzz-icu.so.0": "libharfbuzz-icu0",
        "libharfbuzz.so.0": "libharfbuzz0b",
        "libhyphen.so.0": "libhyphen0",
        "libicui18n.so.67": "libicu67",
        "libicuuc.so.67": "libicu67",
        "libjpeg.so.62": "libjpeg62-turbo",
        "liblcms2.so.2": "liblcms2-2",
        "libmanette-0.2.so.0": "libmanette-0.2-0",
        "libnotify.so.4": "libnotify4",
        "libnspr4.so": "libnspr4",
        "libnss3.so": "libnss3",
        "libnssutil3.so": "libnss3",
        "libOpenGL.so.0": "libopengl0",
        "libopenjp2.so.7": "libopenjp2-7",
        "libopus.so.0": "libopus0",
        "libpango-1.0.so.0": "libpango-1.0-0",
        "libpangocairo-1.0.so.0": "libpangocairo-1.0-0",
        "libpng16.so.16": "libpng16-16",
        "libproxy.so.1": "libproxy1v5",
        "libsecret-1.so.0": "libsecret-1-0",
        "libsmime3.so": "libnss3",
        "libwayland-client.so.0": "libwayland-client0",
        "libwayland-egl.so.1": "libwayland-egl1",
        "libwayland-server.so.0": "libwayland-server0",
        "libwebp.so.6": "libwebp6",
        "libwebpdemux.so.2": "libwebpdemux2",
        "libwoff2dec.so.1.0.2": "libwoff1",
        "libX11-xcb.so.1": "libx11-xcb1",
        "libX11.so.6": "libx11-6",
        "libxcb-shm.so.0": "libxcb-shm0",
        "libxcb.so.1": "libxcb1",
        "libXcomposite.so.1": "libxcomposite1",
        "libXcursor.so.1": "libxcursor1",
        "libXdamage.so.1": "libxdamage1",
        "libXext.so.6": "libxext6",
        "libXfixes.so.3": "libxfixes3",
        "libXi.so.6": "libxi6",
        "libxkbcommon.so.0": "libxkbcommon0",
        "libxml2.so.2": "libxml2",
        "libXrandr.so.2": "libxrandr2",
        "libXrender.so.1": "libxrender1",
        "libxslt.so.1": "libxslt1.1",
        "libXtst.so.6": "libxtst6",
        "libatomic.so.1": "libatomic1",
        "libevent-2.1.so.7": "libevent-2.1-7"
      }
    },
    "debian12-x64": {
      tools: ["xvfb", "fonts-noto-color-emoji", "fonts-unifont", "libfontconfig1", "libfreetype6", "xfonts-scalable", "fonts-liberation", "fonts-ipafont-gothic", "fonts-wqy-zenhei", "fonts-tlwg-loma-otf", "fonts-freefont-ttf"],
      chromium: ["libasound2", "libatk-bridge2.0-0", "libatk1.0-0", "libatspi2.0-0", "libcairo2", "libcups2", "libdbus-1-3", "libdrm2", "libgbm1", "libglib2.0-0", "libnspr4", "libnss3", "libpango-1.0-0", "libx11-6", "libxcb1", "libxcomposite1", "libxdamage1", "libxext6", "libxfixes3", "libxkbcommon0", "libxrandr2"],
      firefox: ["libasound2", "libatk1.0-0", "libcairo-gobject2", "libcairo2", "libdbus-1-3", "libdbus-glib-1-2", "libfontconfig1", "libfreetype6", "libgdk-pixbuf-2.0-0", "libglib2.0-0", "libgtk-3-0", "libharfbuzz0b", "libpango-1.0-0", "libpangocairo-1.0-0", "libx11-6", "libx11-xcb1", "libxcb-shm0", "libxcb1", "libxcomposite1", "libxcursor1", "libxdamage1", "libxext6", "libxfixes3", "libxi6", "libxrandr2", "libxrender1", "libxtst6"],
      webkit: ["libsoup-3.0-0", "gstreamer1.0-libav", "gstreamer1.0-plugins-bad", "gstreamer1.0-plugins-base", "gstreamer1.0-plugins-good", "libatk-bridge2.0-0", "libatk1.0-0", "libcairo2", "libdbus-1-3", "libdrm2", "libegl1", "libenchant-2-2", "libepoxy0", "libevdev2", "libfontconfig1", "libfreetype6", "libgbm1", "libgdk-pixbuf-2.0-0", "libgles2", "libglib2.0-0", "libglx0", "libgstreamer-gl1.0-0", "libgstreamer-plugins-base1.0-0", "libgstreamer1.0-0", "libgtk-4-1", "libgudev-1.0-0", "libharfbuzz-icu0", "libharfbuzz0b", "libhyphen0", "libicu72", "libjpeg62-turbo", "liblcms2-2", "libmanette-0.2-0", "libnotify4", "libopengl0", "libopenjp2-7", "libopus0", "libpango-1.0-0", "libpng16-16", "libproxy1v5", "libsecret-1-0", "libwayland-client0", "libwayland-egl1", "libwayland-server0", "libwebp7", "libwebpdemux2", "libwoff1", "libx11-6", "libxcomposite1", "libxdamage1", "libxkbcommon0", "libxml2", "libxslt1.1", "libatomic1", "libevent-2.1-7", "libavif15"],
      lib2package: {
        "libavif.so.15": "libavif15",
        "libsoup-3.0.so.0": "libsoup-3.0-0",
        "libasound.so.2": "libasound2",
        "libatk-1.0.so.0": "libatk1.0-0",
        "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0",
        "libatspi.so.0": "libatspi2.0-0",
        "libcairo.so.2": "libcairo2",
        "libcups.so.2": "libcups2",
        "libdbus-1.so.3": "libdbus-1-3",
        "libdrm.so.2": "libdrm2",
        "libgbm.so.1": "libgbm1",
        "libgio-2.0.so.0": "libglib2.0-0",
        "libglib-2.0.so.0": "libglib2.0-0",
        "libgobject-2.0.so.0": "libglib2.0-0",
        "libnspr4.so": "libnspr4",
        "libnss3.so": "libnss3",
        "libnssutil3.so": "libnss3",
        "libpango-1.0.so.0": "libpango-1.0-0",
        "libsmime3.so": "libnss3",
        "libX11.so.6": "libx11-6",
        "libxcb.so.1": "libxcb1",
        "libXcomposite.so.1": "libxcomposite1",
        "libXdamage.so.1": "libxdamage1",
        "libXext.so.6": "libxext6",
        "libXfixes.so.3": "libxfixes3",
        "libxkbcommon.so.0": "libxkbcommon0",
        "libXrandr.so.2": "libxrandr2",
        "libgtk-4.so.1": "libgtk-4-1"
      }
    }
  };
  deps["ubuntu20.04-arm64"] = {
    tools: [...deps["ubuntu20.04-x64"].tools],
    chromium: [...deps["ubuntu20.04-x64"].chromium],
    firefox: [...deps["ubuntu20.04-x64"].firefox],
    webkit: [...deps["ubuntu20.04-x64"].webkit],
    lib2package: {
      ...deps["ubuntu20.04-x64"].lib2package
    }
  };
  deps["ubuntu22.04-arm64"] = {
    tools: [...deps["ubuntu22.04-x64"].tools],
    chromium: [...deps["ubuntu22.04-x64"].chromium],
    firefox: [...deps["ubuntu22.04-x64"].firefox],
    webkit: [...deps["ubuntu22.04-x64"].webkit],
    lib2package: {
      ...deps["ubuntu22.04-x64"].lib2package
    }
  };
  deps["ubuntu24.04-arm64"] = {
    tools: [...deps["ubuntu24.04-x64"].tools],
    chromium: [...deps["ubuntu24.04-x64"].chromium],
    firefox: [...deps["ubuntu24.04-x64"].firefox],
    webkit: [...deps["ubuntu24.04-x64"].webkit],
    lib2package: {
      ...deps["ubuntu24.04-x64"].lib2package
    }
  };
  deps["debian11-arm64"] = {
    tools: [...deps["debian11-x64"].tools],
    chromium: [...deps["debian11-x64"].chromium],
    firefox: [...deps["debian11-x64"].firefox],
    webkit: [...deps["debian11-x64"].webkit],
    lib2package: {
      ...deps["debian11-x64"].lib2package
    }
  };
  deps["debian12-arm64"] = {
    tools: [...deps["debian12-x64"].tools],
    chromium: [...deps["debian12-x64"].chromium],
    firefox: [...deps["debian12-x64"].firefox],
    webkit: [...deps["debian12-x64"].webkit],
    lib2package: {
      ...deps["debian12-x64"].lib2package
    }
  };
  return nativeDeps;
}
var ascii = {};
var hasRequiredAscii;
function requireAscii() {
  if (hasRequiredAscii) return ascii;
  hasRequiredAscii = 1;
  Object.defineProperty(ascii, "__esModule", {
    value: true
  });
  ascii.jsonStringifyForceASCII = jsonStringifyForceASCII;
  ascii.wrapInASCIIBox = wrapInASCIIBox;
  function wrapInASCIIBox(text, padding = 0) {
    const lines = text.split("\n");
    const maxLength = Math.max(...lines.map((line) => line.length));
    return ["╔" + "═".repeat(maxLength + padding * 2) + "╗", ...lines.map((line) => "║" + " ".repeat(padding) + line + " ".repeat(maxLength - line.length + padding) + "║"), "╚" + "═".repeat(maxLength + padding * 2) + "╝"].join("\n");
  }
  function jsonStringifyForceASCII(object) {
    return JSON.stringify(object).replace(/[\u007f-\uffff]/g, (c2) => "\\u" + ("0000" + c2.charCodeAt(0).toString(16)).slice(-4));
  }
  return ascii;
}
var hostPlatform = {};
var hasRequiredHostPlatform;
function requireHostPlatform() {
  if (hasRequiredHostPlatform) return hostPlatform;
  hasRequiredHostPlatform = 1;
  Object.defineProperty(hostPlatform, "__esModule", {
    value: true
  });
  hostPlatform.isOfficiallySupportedPlatform = hostPlatform.hostPlatform = void 0;
  var _os = _interopRequireDefault(require$$1$3);
  var _linuxUtils = requireLinuxUtils();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  function calculatePlatform() {
    if (process.env.PLAYWRIGHT_HOST_PLATFORM_OVERRIDE) {
      return {
        hostPlatform: process.env.PLAYWRIGHT_HOST_PLATFORM_OVERRIDE,
        isOfficiallySupportedPlatform: false
      };
    }
    const platform2 = _os.default.platform();
    if (platform2 === "darwin") {
      const ver = _os.default.release().split(".").map((a) => parseInt(a, 10));
      let macVersion = "";
      if (ver[0] < 18) {
        macVersion = "mac10.13";
      } else if (ver[0] === 18) {
        macVersion = "mac10.14";
      } else if (ver[0] === 19) {
        macVersion = "mac10.15";
      } else {
        const LAST_STABLE_MACOS_MAJOR_VERSION = 15;
        macVersion = "mac" + Math.min(ver[0] - 9, LAST_STABLE_MACOS_MAJOR_VERSION);
        if (_os.default.cpus().some((cpu) => cpu.model.includes("Apple"))) macVersion += "-arm64";
      }
      return {
        hostPlatform: macVersion,
        isOfficiallySupportedPlatform: true
      };
    }
    if (platform2 === "linux") {
      if (!["x64", "arm64"].includes(_os.default.arch())) return {
        hostPlatform: "<unknown>",
        isOfficiallySupportedPlatform: false
      };
      const archSuffix = "-" + _os.default.arch();
      const distroInfo = (0, _linuxUtils.getLinuxDistributionInfoSync)();
      if ((distroInfo === null || distroInfo === void 0 ? void 0 : distroInfo.id) === "ubuntu" || (distroInfo === null || distroInfo === void 0 ? void 0 : distroInfo.id) === "pop" || (distroInfo === null || distroInfo === void 0 ? void 0 : distroInfo.id) === "neon" || (distroInfo === null || distroInfo === void 0 ? void 0 : distroInfo.id) === "tuxedo") {
        const isUbuntu = (distroInfo === null || distroInfo === void 0 ? void 0 : distroInfo.id) === "ubuntu";
        const version2 = distroInfo === null || distroInfo === void 0 ? void 0 : distroInfo.version;
        const major = parseInt(distroInfo.version, 10);
        if (major < 20) return {
          hostPlatform: "ubuntu18.04" + archSuffix,
          isOfficiallySupportedPlatform: false
        };
        if (major < 22) return {
          hostPlatform: "ubuntu20.04" + archSuffix,
          isOfficiallySupportedPlatform: isUbuntu && version2 === "20.04"
        };
        if (major < 24) return {
          hostPlatform: "ubuntu22.04" + archSuffix,
          isOfficiallySupportedPlatform: isUbuntu && version2 === "22.04"
        };
        if (major < 26) return {
          hostPlatform: "ubuntu24.04" + archSuffix,
          isOfficiallySupportedPlatform: isUbuntu && version2 === "24.04"
        };
        return {
          hostPlatform: "ubuntu" + distroInfo.version + archSuffix,
          isOfficiallySupportedPlatform: false
        };
      }
      if ((distroInfo === null || distroInfo === void 0 ? void 0 : distroInfo.id) === "linuxmint") {
        const mintMajor = parseInt(distroInfo.version, 10);
        if (mintMajor <= 20) return {
          hostPlatform: "ubuntu20.04" + archSuffix,
          isOfficiallySupportedPlatform: false
        };
        if (mintMajor === 21) return {
          hostPlatform: "ubuntu22.04" + archSuffix,
          isOfficiallySupportedPlatform: false
        };
        return {
          hostPlatform: "ubuntu24.04" + archSuffix,
          isOfficiallySupportedPlatform: false
        };
      }
      if ((distroInfo === null || distroInfo === void 0 ? void 0 : distroInfo.id) === "debian" || (distroInfo === null || distroInfo === void 0 ? void 0 : distroInfo.id) === "raspbian") {
        const isOfficiallySupportedPlatform2 = (distroInfo === null || distroInfo === void 0 ? void 0 : distroInfo.id) === "debian";
        if ((distroInfo === null || distroInfo === void 0 ? void 0 : distroInfo.version) === "11") return {
          hostPlatform: "debian11" + archSuffix,
          isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2
        };
        if ((distroInfo === null || distroInfo === void 0 ? void 0 : distroInfo.version) === "12") return {
          hostPlatform: "debian12" + archSuffix,
          isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2
        };
        if ((distroInfo === null || distroInfo === void 0 ? void 0 : distroInfo.version) === "") return {
          hostPlatform: "debian12" + archSuffix,
          isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2
        };
      }
      return {
        hostPlatform: "ubuntu20.04" + archSuffix,
        isOfficiallySupportedPlatform: false
      };
    }
    if (platform2 === "win32") return {
      hostPlatform: "win64",
      isOfficiallySupportedPlatform: true
    };
    return {
      hostPlatform: "<unknown>",
      isOfficiallySupportedPlatform: false
    };
  }
  const {
    hostPlatform: hostPlatform$1,
    isOfficiallySupportedPlatform
  } = calculatePlatform();
  hostPlatform.isOfficiallySupportedPlatform = isOfficiallySupportedPlatform;
  hostPlatform.hostPlatform = hostPlatform$1;
  return hostPlatform;
}
var spawnAsync = {};
var hasRequiredSpawnAsync;
function requireSpawnAsync() {
  if (hasRequiredSpawnAsync) return spawnAsync;
  hasRequiredSpawnAsync = 1;
  Object.defineProperty(spawnAsync, "__esModule", {
    value: true
  });
  spawnAsync.spawnAsync = spawnAsync$1;
  var _child_process = require$$0$3;
  function spawnAsync$1(cmd, args, options = {}) {
    const process2 = (0, _child_process.spawn)(cmd, args, Object.assign({
      windowsHide: true
    }, options));
    return new Promise((resolve2) => {
      let stdout2 = "";
      let stderr2 = "";
      if (process2.stdout) process2.stdout.on("data", (data) => stdout2 += data.toString());
      if (process2.stderr) process2.stderr.on("data", (data) => stderr2 += data.toString());
      process2.on("close", (code) => resolve2({
        stdout: stdout2,
        stderr: stderr2,
        code
      }));
      process2.on("error", (error) => resolve2({
        stdout: stdout2,
        stderr: stderr2,
        code: 0,
        error
      }));
    });
  }
  return spawnAsync;
}
var hasRequiredDependencies;
function requireDependencies() {
  if (hasRequiredDependencies) return dependencies;
  hasRequiredDependencies = 1;
  Object.defineProperty(dependencies, "__esModule", {
    value: true
  });
  dependencies.dockerVersion = dockerVersion;
  dependencies.installDependenciesLinux = installDependenciesLinux;
  dependencies.installDependenciesWindows = installDependenciesWindows;
  dependencies.readDockerVersionSync = readDockerVersionSync;
  dependencies.transformCommandsForRoot = transformCommandsForRoot;
  dependencies.validateDependenciesLinux = validateDependenciesLinux;
  dependencies.validateDependenciesWindows = validateDependenciesWindows;
  dependencies.writeDockerVersion = writeDockerVersion;
  var childProcess = _interopRequireWildcard(require$$0$3);
  var _fs = _interopRequireDefault(require$$0$2);
  var _os = _interopRequireDefault(require$$1$3);
  var _path2 = _interopRequireDefault(require$$1$1);
  var _nativeDeps = requireNativeDeps();
  var _ascii = requireAscii();
  var _hostPlatform = requireHostPlatform();
  var _spawnAsync = requireSpawnAsync();
  var _userAgent = requireUserAgent();
  var _2 = requireRegistry();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  const BIN_DIRECTORY = _path2.default.join(new URL(".", import.meta.url).pathname, "..", "..", "..", "bin");
  const languageBindingVersion = process.env.PW_CLI_DISPLAY_VERSION || require$$10.version;
  const dockerVersionFilePath = "/ms-playwright/.docker-info";
  async function writeDockerVersion(dockerImageNameTemplate) {
    await _fs.default.promises.mkdir(_path2.default.dirname(dockerVersionFilePath), {
      recursive: true
    });
    await _fs.default.promises.writeFile(dockerVersionFilePath, JSON.stringify(dockerVersion(dockerImageNameTemplate), null, 2), "utf8");
    await _fs.default.promises.chmod(dockerVersionFilePath, 511);
  }
  function dockerVersion(dockerImageNameTemplate) {
    return {
      driverVersion: languageBindingVersion,
      dockerImageName: dockerImageNameTemplate.replace("%version%", languageBindingVersion)
    };
  }
  function readDockerVersionSync() {
    try {
      const data = JSON.parse(_fs.default.readFileSync(dockerVersionFilePath, "utf8"));
      return {
        ...data,
        dockerImageNameTemplate: data.dockerImageName.replace(data.driverVersion, "%version%")
      };
    } catch (e2) {
      return null;
    }
  }
  const checkExecutable = (filePath) => {
    if (process.platform === "win32") return filePath.endsWith(".exe");
    return _fs.default.promises.access(filePath, _fs.default.constants.X_OK).then(() => true).catch(() => false);
  };
  function isSupportedWindowsVersion() {
    if (_os.default.platform() !== "win32" || _os.default.arch() !== "x64") return false;
    const [major, minor] = _os.default.release().split(".").map((token) => parseInt(token, 10));
    return major > 6 || major === 6 && minor > 1;
  }
  async function installDependenciesWindows(targets, dryRun) {
    if (targets.has("chromium")) {
      const command = "powershell.exe";
      const args = ["-ExecutionPolicy", "Bypass", "-File", _path2.default.join(BIN_DIRECTORY, "install_media_pack.ps1")];
      if (dryRun) {
        console.log(`${command} ${quoteProcessArgs(args).join(" ")}`);
        return;
      }
      const {
        code
      } = await (0, _spawnAsync.spawnAsync)(command, args, {
        cwd: BIN_DIRECTORY,
        stdio: "inherit"
      });
      if (code !== 0) throw new Error("Failed to install windows dependencies!");
    }
  }
  async function installDependenciesLinux(targets, dryRun) {
    const libraries = [];
    const platform2 = _hostPlatform.hostPlatform;
    if (!_hostPlatform.isOfficiallySupportedPlatform) console.warn(`BEWARE: your OS is not officially supported by Playwright; installing dependencies for ${platform2} as a fallback.`);
    for (const target of targets) {
      const info = _nativeDeps.deps[platform2];
      if (!info) {
        console.warn(`Cannot install dependencies for ${platform2} with Playwright ${(0, _userAgent.getPlaywrightVersion)()}!`);
        return;
      }
      libraries.push(...info[target]);
    }
    const uniqueLibraries = Array.from(new Set(libraries));
    if (!dryRun) console.log(`Installing dependencies...`);
    const commands = [];
    commands.push("apt-get update");
    commands.push(["apt-get", "install", "-y", "--no-install-recommends", ...uniqueLibraries].join(" "));
    const {
      command,
      args,
      elevatedPermissions
    } = await transformCommandsForRoot(commands);
    if (dryRun) {
      console.log(`${command} ${quoteProcessArgs(args).join(" ")}`);
      return;
    }
    if (elevatedPermissions) console.log("Switching to root user to install dependencies...");
    const child = childProcess.spawn(command, args, {
      stdio: "inherit"
    });
    await new Promise((resolve2, reject) => {
      child.on("exit", (code) => code === 0 ? resolve2() : reject(new Error(`Installation process exited with code: ${code}`)));
      child.on("error", reject);
    });
  }
  async function validateDependenciesWindows(sdkLanguage, windowsExeAndDllDirectories) {
    const directoryPaths = windowsExeAndDllDirectories;
    const lddPaths = [];
    for (const directoryPath of directoryPaths) lddPaths.push(...await executablesOrSharedLibraries(directoryPath));
    const allMissingDeps = await Promise.all(lddPaths.map((lddPath) => missingFileDependenciesWindows(sdkLanguage, lddPath)));
    const missingDeps = /* @__PURE__ */ new Set();
    for (const deps of allMissingDeps) {
      for (const dep of deps) missingDeps.add(dep);
    }
    if (!missingDeps.size) return;
    let isCrtMissing = false;
    let isMediaFoundationMissing = false;
    for (const dep of missingDeps) {
      if (dep.startsWith("api-ms-win-crt") || dep === "vcruntime140.dll" || dep === "vcruntime140_1.dll" || dep === "msvcp140.dll") isCrtMissing = true;
      else if (dep === "mf.dll" || dep === "mfplat.dll" || dep === "msmpeg2vdec.dll" || dep === "evr.dll" || dep === "avrt.dll") isMediaFoundationMissing = true;
    }
    const details = [];
    if (isCrtMissing) {
      details.push(`Some of the Universal C Runtime files cannot be found on the system. You can fix`, `that by installing Microsoft Visual C++ Redistributable for Visual Studio from:`, `https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads`, ``);
    }
    if (isMediaFoundationMissing) {
      details.push(`Some of the Media Foundation files cannot be found on the system. If you are`, `on Windows Server try fixing this by running the following command in PowerShell`, `as Administrator:`, ``, `    Install-WindowsFeature Server-Media-Foundation`, ``, `For Windows N editions visit:`, `https://support.microsoft.com/en-us/help/3145500/media-feature-pack-list-for-windows-n-editions`, ``);
    }
    details.push(`Full list of missing libraries:`, `    ${[...missingDeps].join("\n    ")}`, ``);
    const message = `Host system is missing dependencies!

${details.join("\n")}`;
    if (isSupportedWindowsVersion()) {
      throw new Error(message);
    } else {
      console.warn(`WARNING: running on unsupported windows version!`);
      console.warn(message);
    }
  }
  async function validateDependenciesLinux(sdkLanguage, linuxLddDirectories, dlOpenLibraries) {
    var _deps$hostPlatform, _process$getuid, _process;
    const directoryPaths = linuxLddDirectories;
    const lddPaths = [];
    for (const directoryPath of directoryPaths) lddPaths.push(...await executablesOrSharedLibraries(directoryPath));
    const missingDepsPerFile = await Promise.all(lddPaths.map((lddPath) => missingFileDependencies(lddPath, directoryPaths)));
    const missingDeps = /* @__PURE__ */ new Set();
    for (const deps of missingDepsPerFile) {
      for (const dep of deps) missingDeps.add(dep);
    }
    for (const dep of await missingDLOPENLibraries(dlOpenLibraries)) missingDeps.add(dep);
    if (!missingDeps.size) return;
    const allMissingDeps = new Set(missingDeps);
    const missingPackages = /* @__PURE__ */ new Set();
    const libraryToPackageNameMapping = _nativeDeps.deps[_hostPlatform.hostPlatform] ? {
      ...((_deps$hostPlatform = _nativeDeps.deps[_hostPlatform.hostPlatform]) === null || _deps$hostPlatform === void 0 ? void 0 : _deps$hostPlatform.lib2package) || {},
      ...MANUAL_LIBRARY_TO_PACKAGE_NAME_UBUNTU
    } : {};
    for (const missingDep of missingDeps) {
      const packageName = libraryToPackageNameMapping[missingDep];
      if (packageName) {
        missingPackages.add(packageName);
        missingDeps.delete(missingDep);
      }
    }
    const maybeSudo = (_process$getuid = (_process = process).getuid) !== null && _process$getuid !== void 0 && _process$getuid.call(_process) && _os.default.platform() !== "win32" ? "sudo " : "";
    const dockerInfo = readDockerVersionSync();
    const errorLines = [`Host system is missing dependencies to run browsers.`];
    if (dockerInfo && !dockerInfo.driverVersion.startsWith((0, _userAgent.getPlaywrightVersion)(
      true
      /* majorMinorOnly */
    ) + ".")) {
      const pwVersion = (0, _userAgent.getPlaywrightVersion)();
      const requiredDockerImage = dockerInfo.dockerImageName.replace(dockerInfo.driverVersion, pwVersion);
      errorLines.push(...[`This is most likely due to Docker image version not matching Playwright version:`, `- Playwright  : ${pwVersion}`, `- Docker image: ${dockerInfo.driverVersion}`, ``, `Either:`, `- (recommended) use Docker image "${requiredDockerImage}"`, `- (alternative 1) run the following command inside Docker to install missing dependencies:`, ``, `    ${maybeSudo}${(0, _2.buildPlaywrightCLICommand)(sdkLanguage, "install-deps")}`, ``, `- (alternative 2) use apt inside Docker:`, ``, `    ${maybeSudo}apt-get install ${[...missingPackages].join("\\\n        ")}`, ``, `<3 Playwright Team`]);
    } else if (missingPackages.size && !missingDeps.size) {
      errorLines.push(...[`Please install them with the following command:`, ``, `    ${maybeSudo}${(0, _2.buildPlaywrightCLICommand)(sdkLanguage, "install-deps")}`, ``, `Alternatively, use apt:`, `    ${maybeSudo}apt-get install ${[...missingPackages].join("\\\n        ")}`, ``, `<3 Playwright Team`]);
    } else {
      errorLines.push(...[`Missing libraries:`, ...[...allMissingDeps].map((dep) => "    " + dep)]);
    }
    throw new Error("\n" + (0, _ascii.wrapInASCIIBox)(errorLines.join("\n"), 1));
  }
  function isSharedLib(basename2) {
    switch (_os.default.platform()) {
      case "linux":
        return basename2.endsWith(".so") || basename2.includes(".so.");
      case "win32":
        return basename2.endsWith(".dll");
      default:
        return false;
    }
  }
  async function executablesOrSharedLibraries(directoryPath) {
    if (!_fs.default.existsSync(directoryPath)) return [];
    const allPaths = (await _fs.default.promises.readdir(directoryPath)).map((file2) => _path2.default.resolve(directoryPath, file2));
    const allStats = await Promise.all(allPaths.map((aPath) => _fs.default.promises.stat(aPath)));
    const filePaths = allPaths.filter((aPath, index) => allStats[index].isFile());
    const executablersOrLibraries = (await Promise.all(filePaths.map(async (filePath) => {
      const basename2 = _path2.default.basename(filePath).toLowerCase();
      if (isSharedLib(basename2)) return filePath;
      if (await checkExecutable(filePath)) return filePath;
      return false;
    }))).filter(Boolean);
    return executablersOrLibraries;
  }
  async function missingFileDependenciesWindows(sdkLanguage, filePath) {
    const executable = _2.registry.findExecutable("winldd").executablePathOrDie(sdkLanguage);
    const dirname2 = _path2.default.dirname(filePath);
    const {
      stdout: stdout2,
      code
    } = await (0, _spawnAsync.spawnAsync)(executable, [filePath], {
      cwd: dirname2,
      env: {
        ...process.env,
        LD_LIBRARY_PATH: process.env.LD_LIBRARY_PATH ? `${process.env.LD_LIBRARY_PATH}:${dirname2}` : dirname2
      }
    });
    if (code !== 0) return [];
    const missingDeps = stdout2.split("\n").map((line) => line.trim()).filter((line) => line.endsWith("not found") && line.includes("=>")).map((line) => line.split("=>")[0].trim().toLowerCase());
    return missingDeps;
  }
  async function missingFileDependencies(filePath, extraLDPaths) {
    const dirname2 = _path2.default.dirname(filePath);
    let LD_LIBRARY_PATH = extraLDPaths.join(":");
    if (process.env.LD_LIBRARY_PATH) LD_LIBRARY_PATH = `${process.env.LD_LIBRARY_PATH}:${LD_LIBRARY_PATH}`;
    const {
      stdout: stdout2,
      code
    } = await (0, _spawnAsync.spawnAsync)("ldd", [filePath], {
      cwd: dirname2,
      env: {
        ...process.env,
        LD_LIBRARY_PATH
      }
    });
    if (code !== 0) return [];
    const missingDeps = stdout2.split("\n").map((line) => line.trim()).filter((line) => line.endsWith("not found") && line.includes("=>")).map((line) => line.split("=>")[0].trim());
    return missingDeps;
  }
  async function missingDLOPENLibraries(libraries) {
    if (!libraries.length) return [];
    const {
      stdout: stdout2,
      code,
      error
    } = await (0, _spawnAsync.spawnAsync)("/sbin/ldconfig", ["-p"], {});
    if (code !== 0 || error) return [];
    const isLibraryAvailable = (library) => stdout2.toLowerCase().includes(library.toLowerCase());
    return libraries.filter((library) => !isLibraryAvailable(library));
  }
  const MANUAL_LIBRARY_TO_PACKAGE_NAME_UBUNTU = {
    // libgstlibav.so (the only actual library provided by gstreamer1.0-libav) is not
    // in the ldconfig cache, so we detect the actual library required for playing h.264
    // and if it's missing recommend installing missing gstreamer lib.
    // gstreamer1.0-libav -> libavcodec57 -> libx264-152
    "libx264.so": "gstreamer1.0-libav"
  };
  function quoteProcessArgs(args) {
    return args.map((arg) => {
      if (arg.includes(" ")) return `"${arg}"`;
      return arg;
    });
  }
  async function transformCommandsForRoot(commands) {
    var _process$getuid2, _process2;
    const isRoot = ((_process$getuid2 = (_process2 = process).getuid) === null || _process$getuid2 === void 0 ? void 0 : _process$getuid2.call(_process2)) === 0;
    if (isRoot) return {
      command: "sh",
      args: ["-c", `${commands.join("&& ")}`],
      elevatedPermissions: false
    };
    const sudoExists = await (0, _spawnAsync.spawnAsync)("which", ["sudo"]);
    if (sudoExists.code === 0) return {
      command: "sudo",
      args: ["--", "sh", "-c", `${commands.join("&& ")}`],
      elevatedPermissions: true
    };
    return {
      command: "su",
      args: ["root", "-c", `${commands.join("&& ")}`],
      elevatedPermissions: true
    };
  }
  return dependencies;
}
var utils = {};
var colors = {};
var hasRequiredColors;
function requireColors() {
  if (hasRequiredColors) return colors;
  hasRequiredColors = 1;
  Object.defineProperty(colors, "__esModule", {
    value: true
  });
  colors.webColors = colors.noColors = void 0;
  colors.webColors = {
    enabled: true,
    reset: (text) => applyStyle(0, 0, text),
    bold: (text) => applyStyle(1, 22, text),
    dim: (text) => applyStyle(2, 22, text),
    italic: (text) => applyStyle(3, 23, text),
    underline: (text) => applyStyle(4, 24, text),
    inverse: (text) => applyStyle(7, 27, text),
    hidden: (text) => applyStyle(8, 28, text),
    strikethrough: (text) => applyStyle(9, 29, text),
    black: (text) => applyStyle(30, 39, text),
    red: (text) => applyStyle(31, 39, text),
    green: (text) => applyStyle(32, 39, text),
    yellow: (text) => applyStyle(33, 39, text),
    blue: (text) => applyStyle(34, 39, text),
    magenta: (text) => applyStyle(35, 39, text),
    cyan: (text) => applyStyle(36, 39, text),
    white: (text) => applyStyle(37, 39, text),
    gray: (text) => applyStyle(90, 39, text),
    grey: (text) => applyStyle(90, 39, text)
  };
  colors.noColors = {
    enabled: false,
    reset: (t) => t,
    bold: (t) => t,
    dim: (t) => t,
    italic: (t) => t,
    underline: (t) => t,
    inverse: (t) => t,
    hidden: (t) => t,
    strikethrough: (t) => t,
    black: (t) => t,
    red: (t) => t,
    green: (t) => t,
    yellow: (t) => t,
    blue: (t) => t,
    magenta: (t) => t,
    cyan: (t) => t,
    white: (t) => t,
    gray: (t) => t,
    grey: (t) => t
  };
  const applyStyle = (open, close, text) => `\x1B[${open}m${text}\x1B[${close}m`;
  return colors;
}
var headers = {};
var hasRequiredHeaders;
function requireHeaders() {
  if (hasRequiredHeaders) return headers;
  hasRequiredHeaders = 1;
  Object.defineProperty(headers, "__esModule", {
    value: true
  });
  headers.headersArrayToObject = headersArrayToObject;
  headers.headersObjectToArray = headersObjectToArray;
  function headersObjectToArray(headers2, separator, setCookieSeparator) {
    if (!setCookieSeparator) setCookieSeparator = separator;
    const result = [];
    for (const name in headers2) {
      const values = headers2[name];
      if (values === void 0) continue;
      if (separator) {
        const sep2 = name.toLowerCase() === "set-cookie" ? setCookieSeparator : separator;
        for (const value of values.split(sep2)) result.push({
          name,
          value: value.trim()
        });
      } else {
        result.push({
          name,
          value: values
        });
      }
    }
    return result;
  }
  function headersArrayToObject(headers2, lowerCase) {
    const result = {};
    for (const {
      name,
      value
    } of headers2) result[lowerCase ? name.toLowerCase() : name] = value;
    return result;
  }
  return headers;
}
var locatorGenerators = {};
var selectorParser = {};
var cssParser = {};
var cssTokenizer = {};
var hasRequiredCssTokenizer;
function requireCssTokenizer() {
  if (hasRequiredCssTokenizer) return cssTokenizer;
  hasRequiredCssTokenizer = 1;
  Object.defineProperty(cssTokenizer, "__esModule", {
    value: true
  });
  cssTokenizer.WhitespaceToken = cssTokenizer.URLToken = cssTokenizer.SuffixMatchToken = cssTokenizer.SubstringMatchToken = cssTokenizer.StringValuedToken = cssTokenizer.StringToken = cssTokenizer.SemicolonToken = cssTokenizer.PrefixMatchToken = cssTokenizer.PercentageToken = cssTokenizer.OpenSquareToken = cssTokenizer.OpenParenToken = cssTokenizer.OpenCurlyToken = cssTokenizer.NumberToken = cssTokenizer.InvalidCharacterError = cssTokenizer.IncludeMatchToken = cssTokenizer.IdentToken = cssTokenizer.HashToken = cssTokenizer.GroupingToken = cssTokenizer.FunctionToken = cssTokenizer.EOFToken = cssTokenizer.DimensionToken = cssTokenizer.DelimToken = cssTokenizer.DashMatchToken = cssTokenizer.CommaToken = cssTokenizer.ColumnToken = cssTokenizer.ColonToken = cssTokenizer.CloseSquareToken = cssTokenizer.CloseParenToken = cssTokenizer.CloseCurlyToken = cssTokenizer.CSSParserToken = cssTokenizer.CDOToken = cssTokenizer.CDCToken = cssTokenizer.BadURLToken = cssTokenizer.BadStringToken = cssTokenizer.AtKeywordToken = void 0;
  cssTokenizer.tokenize = tokenize;
  const between = function(num, first, last) {
    return num >= first && num <= last;
  };
  function digit(code) {
    return between(code, 48, 57);
  }
  function hexdigit(code) {
    return digit(code) || between(code, 65, 70) || between(code, 97, 102);
  }
  function uppercaseletter(code) {
    return between(code, 65, 90);
  }
  function lowercaseletter(code) {
    return between(code, 97, 122);
  }
  function letter(code) {
    return uppercaseletter(code) || lowercaseletter(code);
  }
  function nonascii(code) {
    return code >= 128;
  }
  function namestartchar(code) {
    return letter(code) || nonascii(code) || code === 95;
  }
  function namechar(code) {
    return namestartchar(code) || digit(code) || code === 45;
  }
  function nonprintable(code) {
    return between(code, 0, 8) || code === 11 || between(code, 14, 31) || code === 127;
  }
  function newline(code) {
    return code === 10;
  }
  function whitespace(code) {
    return newline(code) || code === 9 || code === 32;
  }
  const maximumallowedcodepoint = 1114111;
  class InvalidCharacterError extends Error {
    constructor(message) {
      super(message);
      this.name = "InvalidCharacterError";
    }
  }
  cssTokenizer.InvalidCharacterError = InvalidCharacterError;
  function preprocess(str) {
    const codepoints = [];
    for (let i = 0; i < str.length; i++) {
      let code = str.charCodeAt(i);
      if (code === 13 && str.charCodeAt(i + 1) === 10) {
        code = 10;
        i++;
      }
      if (code === 13 || code === 12) code = 10;
      if (code === 0) code = 65533;
      if (between(code, 55296, 56319) && between(str.charCodeAt(i + 1), 56320, 57343)) {
        const lead = code - 55296;
        const trail = str.charCodeAt(i + 1) - 56320;
        code = Math.pow(2, 16) + lead * Math.pow(2, 10) + trail;
        i++;
      }
      codepoints.push(code);
    }
    return codepoints;
  }
  function stringFromCode(code) {
    if (code <= 65535) return String.fromCharCode(code);
    code -= Math.pow(2, 16);
    const lead = Math.floor(code / Math.pow(2, 10)) + 55296;
    const trail = code % Math.pow(2, 10) + 56320;
    return String.fromCharCode(lead) + String.fromCharCode(trail);
  }
  function tokenize(str1) {
    const str = preprocess(str1);
    let i = -1;
    const tokens = [];
    let code;
    const codepoint = function(i2) {
      if (i2 >= str.length) return -1;
      return str[i2];
    };
    const next = function(num) {
      if (num === void 0) num = 1;
      if (num > 3) throw "Spec Error: no more than three codepoints of lookahead.";
      return codepoint(i + num);
    };
    const consume = function(num) {
      if (num === void 0) num = 1;
      i += num;
      code = codepoint(i);
      return true;
    };
    const reconsume = function() {
      i -= 1;
      return true;
    };
    const eof = function(codepoint2) {
      if (codepoint2 === void 0) codepoint2 = code;
      return codepoint2 === -1;
    };
    const consumeAToken = function() {
      consumeComments();
      consume();
      if (whitespace(code)) {
        while (whitespace(next())) consume();
        return new WhitespaceToken();
      } else if (code === 34) {
        return consumeAStringToken();
      } else if (code === 35) {
        if (namechar(next()) || areAValidEscape(next(1), next(2))) {
          const token = new HashToken("");
          if (wouldStartAnIdentifier(next(1), next(2), next(3))) token.type = "id";
          token.value = consumeAName();
          return token;
        } else {
          return new DelimToken(code);
        }
      } else if (code === 36) {
        if (next() === 61) {
          consume();
          return new SuffixMatchToken();
        } else {
          return new DelimToken(code);
        }
      } else if (code === 39) {
        return consumeAStringToken();
      } else if (code === 40) {
        return new OpenParenToken();
      } else if (code === 41) {
        return new CloseParenToken();
      } else if (code === 42) {
        if (next() === 61) {
          consume();
          return new SubstringMatchToken();
        } else {
          return new DelimToken(code);
        }
      } else if (code === 43) {
        if (startsWithANumber()) {
          reconsume();
          return consumeANumericToken();
        } else {
          return new DelimToken(code);
        }
      } else if (code === 44) {
        return new CommaToken();
      } else if (code === 45) {
        if (startsWithANumber()) {
          reconsume();
          return consumeANumericToken();
        } else if (next(1) === 45 && next(2) === 62) {
          consume(2);
          return new CDCToken();
        } else if (startsWithAnIdentifier()) {
          reconsume();
          return consumeAnIdentlikeToken();
        } else {
          return new DelimToken(code);
        }
      } else if (code === 46) {
        if (startsWithANumber()) {
          reconsume();
          return consumeANumericToken();
        } else {
          return new DelimToken(code);
        }
      } else if (code === 58) {
        return new ColonToken();
      } else if (code === 59) {
        return new SemicolonToken();
      } else if (code === 60) {
        if (next(1) === 33 && next(2) === 45 && next(3) === 45) {
          consume(3);
          return new CDOToken();
        } else {
          return new DelimToken(code);
        }
      } else if (code === 64) {
        if (wouldStartAnIdentifier(next(1), next(2), next(3))) return new AtKeywordToken(consumeAName());
        else return new DelimToken(code);
      } else if (code === 91) {
        return new OpenSquareToken();
      } else if (code === 92) {
        if (startsWithAValidEscape()) {
          reconsume();
          return consumeAnIdentlikeToken();
        } else {
          return new DelimToken(code);
        }
      } else if (code === 93) {
        return new CloseSquareToken();
      } else if (code === 94) {
        if (next() === 61) {
          consume();
          return new PrefixMatchToken();
        } else {
          return new DelimToken(code);
        }
      } else if (code === 123) {
        return new OpenCurlyToken();
      } else if (code === 124) {
        if (next() === 61) {
          consume();
          return new DashMatchToken();
        } else if (next() === 124) {
          consume();
          return new ColumnToken();
        } else {
          return new DelimToken(code);
        }
      } else if (code === 125) {
        return new CloseCurlyToken();
      } else if (code === 126) {
        if (next() === 61) {
          consume();
          return new IncludeMatchToken();
        } else {
          return new DelimToken(code);
        }
      } else if (digit(code)) {
        reconsume();
        return consumeANumericToken();
      } else if (namestartchar(code)) {
        reconsume();
        return consumeAnIdentlikeToken();
      } else if (eof()) {
        return new EOFToken();
      } else {
        return new DelimToken(code);
      }
    };
    const consumeComments = function() {
      while (next(1) === 47 && next(2) === 42) {
        consume(2);
        while (true) {
          consume();
          if (code === 42 && next() === 47) {
            consume();
            break;
          } else if (eof()) {
            return;
          }
        }
      }
    };
    const consumeANumericToken = function() {
      const num = consumeANumber();
      if (wouldStartAnIdentifier(next(1), next(2), next(3))) {
        const token = new DimensionToken();
        token.value = num.value;
        token.repr = num.repr;
        token.type = num.type;
        token.unit = consumeAName();
        return token;
      } else if (next() === 37) {
        consume();
        const token = new PercentageToken();
        token.value = num.value;
        token.repr = num.repr;
        return token;
      } else {
        const token = new NumberToken();
        token.value = num.value;
        token.repr = num.repr;
        token.type = num.type;
        return token;
      }
    };
    const consumeAnIdentlikeToken = function() {
      const str2 = consumeAName();
      if (str2.toLowerCase() === "url" && next() === 40) {
        consume();
        while (whitespace(next(1)) && whitespace(next(2))) consume();
        if (next() === 34 || next() === 39) return new FunctionToken(str2);
        else if (whitespace(next()) && (next(2) === 34 || next(2) === 39)) return new FunctionToken(str2);
        else return consumeAURLToken();
      } else if (next() === 40) {
        consume();
        return new FunctionToken(str2);
      } else {
        return new IdentToken(str2);
      }
    };
    const consumeAStringToken = function(endingCodePoint) {
      if (endingCodePoint === void 0) endingCodePoint = code;
      let string = "";
      while (consume()) {
        if (code === endingCodePoint || eof()) {
          return new StringToken(string);
        } else if (newline(code)) {
          reconsume();
          return new BadStringToken();
        } else if (code === 92) {
          if (eof(next())) ;
          else if (newline(next())) consume();
          else string += stringFromCode(consumeEscape());
        } else {
          string += stringFromCode(code);
        }
      }
      throw new Error("Internal error");
    };
    const consumeAURLToken = function() {
      const token = new URLToken("");
      while (whitespace(next())) consume();
      if (eof(next())) return token;
      while (consume()) {
        if (code === 41 || eof()) {
          return token;
        } else if (whitespace(code)) {
          while (whitespace(next())) consume();
          if (next() === 41 || eof(next())) {
            consume();
            return token;
          } else {
            consumeTheRemnantsOfABadURL();
            return new BadURLToken();
          }
        } else if (code === 34 || code === 39 || code === 40 || nonprintable(code)) {
          consumeTheRemnantsOfABadURL();
          return new BadURLToken();
        } else if (code === 92) {
          if (startsWithAValidEscape()) {
            token.value += stringFromCode(consumeEscape());
          } else {
            consumeTheRemnantsOfABadURL();
            return new BadURLToken();
          }
        } else {
          token.value += stringFromCode(code);
        }
      }
      throw new Error("Internal error");
    };
    const consumeEscape = function() {
      consume();
      if (hexdigit(code)) {
        const digits = [code];
        for (let total = 0; total < 5; total++) {
          if (hexdigit(next())) {
            consume();
            digits.push(code);
          } else {
            break;
          }
        }
        if (whitespace(next())) consume();
        let value = parseInt(digits.map(function(x2) {
          return String.fromCharCode(x2);
        }).join(""), 16);
        if (value > maximumallowedcodepoint) value = 65533;
        return value;
      } else if (eof()) {
        return 65533;
      } else {
        return code;
      }
    };
    const areAValidEscape = function(c1, c2) {
      if (c1 !== 92) return false;
      if (newline(c2)) return false;
      return true;
    };
    const startsWithAValidEscape = function() {
      return areAValidEscape(code, next());
    };
    const wouldStartAnIdentifier = function(c1, c2, c3) {
      if (c1 === 45) return namestartchar(c2) || c2 === 45 || areAValidEscape(c2, c3);
      else if (namestartchar(c1)) return true;
      else if (c1 === 92) return areAValidEscape(c1, c2);
      else return false;
    };
    const startsWithAnIdentifier = function() {
      return wouldStartAnIdentifier(code, next(1), next(2));
    };
    const wouldStartANumber = function(c1, c2, c3) {
      if (c1 === 43 || c1 === 45) {
        if (digit(c2)) return true;
        if (c2 === 46 && digit(c3)) return true;
        return false;
      } else if (c1 === 46) {
        if (digit(c2)) return true;
        return false;
      } else if (digit(c1)) {
        return true;
      } else {
        return false;
      }
    };
    const startsWithANumber = function() {
      return wouldStartANumber(code, next(1), next(2));
    };
    const consumeAName = function() {
      let result = "";
      while (consume()) {
        if (namechar(code)) {
          result += stringFromCode(code);
        } else if (startsWithAValidEscape()) {
          result += stringFromCode(consumeEscape());
        } else {
          reconsume();
          return result;
        }
      }
      throw new Error("Internal parse error");
    };
    const consumeANumber = function() {
      let repr = "";
      let type = "integer";
      if (next() === 43 || next() === 45) {
        consume();
        repr += stringFromCode(code);
      }
      while (digit(next())) {
        consume();
        repr += stringFromCode(code);
      }
      if (next(1) === 46 && digit(next(2))) {
        consume();
        repr += stringFromCode(code);
        consume();
        repr += stringFromCode(code);
        type = "number";
        while (digit(next())) {
          consume();
          repr += stringFromCode(code);
        }
      }
      const c1 = next(1), c2 = next(2), c3 = next(3);
      if ((c1 === 69 || c1 === 101) && digit(c2)) {
        consume();
        repr += stringFromCode(code);
        consume();
        repr += stringFromCode(code);
        type = "number";
        while (digit(next())) {
          consume();
          repr += stringFromCode(code);
        }
      } else if ((c1 === 69 || c1 === 101) && (c2 === 43 || c2 === 45) && digit(c3)) {
        consume();
        repr += stringFromCode(code);
        consume();
        repr += stringFromCode(code);
        consume();
        repr += stringFromCode(code);
        type = "number";
        while (digit(next())) {
          consume();
          repr += stringFromCode(code);
        }
      }
      const value = convertAStringToANumber(repr);
      return {
        type,
        value,
        repr
      };
    };
    const convertAStringToANumber = function(string) {
      return +string;
    };
    const consumeTheRemnantsOfABadURL = function() {
      while (consume()) {
        if (code === 41 || eof()) {
          return;
        } else if (startsWithAValidEscape()) {
          consumeEscape();
        } else ;
      }
    };
    let iterationCount = 0;
    while (!eof(next())) {
      tokens.push(consumeAToken());
      iterationCount++;
      if (iterationCount > str.length * 2) throw new Error("I'm infinite-looping!");
    }
    return tokens;
  }
  class CSSParserToken {
    constructor() {
      this.tokenType = "";
      this.value = void 0;
    }
    toJSON() {
      return {
        token: this.tokenType
      };
    }
    toString() {
      return this.tokenType;
    }
    toSource() {
      return "" + this;
    }
  }
  cssTokenizer.CSSParserToken = CSSParserToken;
  class BadStringToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "BADSTRING";
    }
  }
  cssTokenizer.BadStringToken = BadStringToken;
  class BadURLToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "BADURL";
    }
  }
  cssTokenizer.BadURLToken = BadURLToken;
  class WhitespaceToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "WHITESPACE";
    }
    toString() {
      return "WS";
    }
    toSource() {
      return " ";
    }
  }
  cssTokenizer.WhitespaceToken = WhitespaceToken;
  class CDOToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "CDO";
    }
    toSource() {
      return "<!--";
    }
  }
  cssTokenizer.CDOToken = CDOToken;
  class CDCToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "CDC";
    }
    toSource() {
      return "-->";
    }
  }
  cssTokenizer.CDCToken = CDCToken;
  class ColonToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = ":";
    }
  }
  cssTokenizer.ColonToken = ColonToken;
  class SemicolonToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = ";";
    }
  }
  cssTokenizer.SemicolonToken = SemicolonToken;
  class CommaToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = ",";
    }
  }
  cssTokenizer.CommaToken = CommaToken;
  class GroupingToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.value = "";
      this.mirror = "";
    }
  }
  cssTokenizer.GroupingToken = GroupingToken;
  class OpenCurlyToken extends GroupingToken {
    constructor() {
      super();
      this.tokenType = "{";
      this.value = "{";
      this.mirror = "}";
    }
  }
  cssTokenizer.OpenCurlyToken = OpenCurlyToken;
  class CloseCurlyToken extends GroupingToken {
    constructor() {
      super();
      this.tokenType = "}";
      this.value = "}";
      this.mirror = "{";
    }
  }
  cssTokenizer.CloseCurlyToken = CloseCurlyToken;
  class OpenSquareToken extends GroupingToken {
    constructor() {
      super();
      this.tokenType = "[";
      this.value = "[";
      this.mirror = "]";
    }
  }
  cssTokenizer.OpenSquareToken = OpenSquareToken;
  class CloseSquareToken extends GroupingToken {
    constructor() {
      super();
      this.tokenType = "]";
      this.value = "]";
      this.mirror = "[";
    }
  }
  cssTokenizer.CloseSquareToken = CloseSquareToken;
  class OpenParenToken extends GroupingToken {
    constructor() {
      super();
      this.tokenType = "(";
      this.value = "(";
      this.mirror = ")";
    }
  }
  cssTokenizer.OpenParenToken = OpenParenToken;
  class CloseParenToken extends GroupingToken {
    constructor() {
      super();
      this.tokenType = ")";
      this.value = ")";
      this.mirror = "(";
    }
  }
  cssTokenizer.CloseParenToken = CloseParenToken;
  class IncludeMatchToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "~=";
    }
  }
  cssTokenizer.IncludeMatchToken = IncludeMatchToken;
  class DashMatchToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "|=";
    }
  }
  cssTokenizer.DashMatchToken = DashMatchToken;
  class PrefixMatchToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "^=";
    }
  }
  cssTokenizer.PrefixMatchToken = PrefixMatchToken;
  class SuffixMatchToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "$=";
    }
  }
  cssTokenizer.SuffixMatchToken = SuffixMatchToken;
  class SubstringMatchToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "*=";
    }
  }
  cssTokenizer.SubstringMatchToken = SubstringMatchToken;
  class ColumnToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "||";
    }
  }
  cssTokenizer.ColumnToken = ColumnToken;
  class EOFToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "EOF";
    }
    toSource() {
      return "";
    }
  }
  cssTokenizer.EOFToken = EOFToken;
  class DelimToken extends CSSParserToken {
    constructor(code) {
      super();
      this.tokenType = "DELIM";
      this.value = "";
      this.value = stringFromCode(code);
    }
    toString() {
      return "DELIM(" + this.value + ")";
    }
    toJSON() {
      const json2 = this.constructor.prototype.constructor.prototype.toJSON.call(this);
      json2.value = this.value;
      return json2;
    }
    toSource() {
      if (this.value === "\\") return "\\\n";
      else return this.value;
    }
  }
  cssTokenizer.DelimToken = DelimToken;
  class StringValuedToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.value = "";
    }
    ASCIIMatch(str) {
      return this.value.toLowerCase() === str.toLowerCase();
    }
    toJSON() {
      const json2 = this.constructor.prototype.constructor.prototype.toJSON.call(this);
      json2.value = this.value;
      return json2;
    }
  }
  cssTokenizer.StringValuedToken = StringValuedToken;
  class IdentToken extends StringValuedToken {
    constructor(val) {
      super();
      this.tokenType = "IDENT";
      this.value = val;
    }
    toString() {
      return "IDENT(" + this.value + ")";
    }
    toSource() {
      return escapeIdent(this.value);
    }
  }
  cssTokenizer.IdentToken = IdentToken;
  class FunctionToken extends StringValuedToken {
    constructor(val) {
      super();
      this.tokenType = "FUNCTION";
      this.mirror = void 0;
      this.value = val;
      this.mirror = ")";
    }
    toString() {
      return "FUNCTION(" + this.value + ")";
    }
    toSource() {
      return escapeIdent(this.value) + "(";
    }
  }
  cssTokenizer.FunctionToken = FunctionToken;
  class AtKeywordToken extends StringValuedToken {
    constructor(val) {
      super();
      this.tokenType = "AT-KEYWORD";
      this.value = val;
    }
    toString() {
      return "AT(" + this.value + ")";
    }
    toSource() {
      return "@" + escapeIdent(this.value);
    }
  }
  cssTokenizer.AtKeywordToken = AtKeywordToken;
  class HashToken extends StringValuedToken {
    constructor(val) {
      super();
      this.tokenType = "HASH";
      this.type = void 0;
      this.value = val;
      this.type = "unrestricted";
    }
    toString() {
      return "HASH(" + this.value + ")";
    }
    toJSON() {
      const json2 = this.constructor.prototype.constructor.prototype.toJSON.call(this);
      json2.value = this.value;
      json2.type = this.type;
      return json2;
    }
    toSource() {
      if (this.type === "id") return "#" + escapeIdent(this.value);
      else return "#" + escapeHash(this.value);
    }
  }
  cssTokenizer.HashToken = HashToken;
  class StringToken extends StringValuedToken {
    constructor(val) {
      super();
      this.tokenType = "STRING";
      this.value = val;
    }
    toString() {
      return '"' + escapeString(this.value) + '"';
    }
  }
  cssTokenizer.StringToken = StringToken;
  class URLToken extends StringValuedToken {
    constructor(val) {
      super();
      this.tokenType = "URL";
      this.value = val;
    }
    toString() {
      return "URL(" + this.value + ")";
    }
    toSource() {
      return 'url("' + escapeString(this.value) + '")';
    }
  }
  cssTokenizer.URLToken = URLToken;
  class NumberToken extends CSSParserToken {
    constructor() {
      super();
      this.tokenType = "NUMBER";
      this.type = void 0;
      this.repr = void 0;
      this.type = "integer";
      this.repr = "";
    }
    toString() {
      if (this.type === "integer") return "INT(" + this.value + ")";
      return "NUMBER(" + this.value + ")";
    }
    toJSON() {
      const json2 = super.toJSON();
      json2.value = this.value;
      json2.type = this.type;
      json2.repr = this.repr;
      return json2;
    }
    toSource() {
      return this.repr;
    }
  }
  cssTokenizer.NumberToken = NumberToken;
  class PercentageToken extends CSSParserToken {
    constructor() {
      super();
      this.tokenType = "PERCENTAGE";
      this.repr = void 0;
      this.repr = "";
    }
    toString() {
      return "PERCENTAGE(" + this.value + ")";
    }
    toJSON() {
      const json2 = this.constructor.prototype.constructor.prototype.toJSON.call(this);
      json2.value = this.value;
      json2.repr = this.repr;
      return json2;
    }
    toSource() {
      return this.repr + "%";
    }
  }
  cssTokenizer.PercentageToken = PercentageToken;
  class DimensionToken extends CSSParserToken {
    constructor() {
      super();
      this.tokenType = "DIMENSION";
      this.type = void 0;
      this.repr = void 0;
      this.unit = void 0;
      this.type = "integer";
      this.repr = "";
      this.unit = "";
    }
    toString() {
      return "DIM(" + this.value + "," + this.unit + ")";
    }
    toJSON() {
      const json2 = this.constructor.prototype.constructor.prototype.toJSON.call(this);
      json2.value = this.value;
      json2.type = this.type;
      json2.repr = this.repr;
      json2.unit = this.unit;
      return json2;
    }
    toSource() {
      const source = this.repr;
      let unit = escapeIdent(this.unit);
      if (unit[0].toLowerCase() === "e" && (unit[1] === "-" || between(unit.charCodeAt(1), 48, 57))) {
        unit = "\\65 " + unit.slice(1, unit.length);
      }
      return source + unit;
    }
  }
  cssTokenizer.DimensionToken = DimensionToken;
  function escapeIdent(string) {
    string = "" + string;
    let result = "";
    const firstcode = string.charCodeAt(0);
    for (let i = 0; i < string.length; i++) {
      const code = string.charCodeAt(i);
      if (code === 0) throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
      if (between(code, 1, 31) || code === 127 || i === 0 && between(code, 48, 57) || i === 1 && between(code, 48, 57) && firstcode === 45) result += "\\" + code.toString(16) + " ";
      else if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122)) result += string[i];
      else result += "\\" + string[i];
    }
    return result;
  }
  function escapeHash(string) {
    string = "" + string;
    let result = "";
    for (let i = 0; i < string.length; i++) {
      const code = string.charCodeAt(i);
      if (code === 0) throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
      if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122)) result += string[i];
      else result += "\\" + code.toString(16) + " ";
    }
    return result;
  }
  function escapeString(string) {
    string = "" + string;
    let result = "";
    for (let i = 0; i < string.length; i++) {
      const code = string.charCodeAt(i);
      if (code === 0) throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
      if (between(code, 1, 31) || code === 127) result += "\\" + code.toString(16) + " ";
      else if (code === 34 || code === 92) result += "\\" + string[i];
      else result += string[i];
    }
    return result;
  }
  return cssTokenizer;
}
var hasRequiredCssParser;
function requireCssParser() {
  if (hasRequiredCssParser) return cssParser;
  hasRequiredCssParser = 1;
  Object.defineProperty(cssParser, "__esModule", {
    value: true
  });
  cssParser.InvalidSelectorError = void 0;
  cssParser.isInvalidSelectorError = isInvalidSelectorError;
  cssParser.parseCSS = parseCSS;
  cssParser.serializeSelector = serializeSelector;
  var css = _interopRequireWildcard(requireCssTokenizer());
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  class InvalidSelectorError extends Error {
  }
  cssParser.InvalidSelectorError = InvalidSelectorError;
  function isInvalidSelectorError(error) {
    return error instanceof InvalidSelectorError;
  }
  function parseCSS(selector, customNames) {
    let tokens;
    try {
      tokens = css.tokenize(selector);
      if (!(tokens[tokens.length - 1] instanceof css.EOFToken)) tokens.push(new css.EOFToken());
    } catch (e2) {
      const newMessage = e2.message + ` while parsing css selector "${selector}". Did you mean to CSS.escape it?`;
      const index = (e2.stack || "").indexOf(e2.message);
      if (index !== -1) e2.stack = e2.stack.substring(0, index) + newMessage + e2.stack.substring(index + e2.message.length);
      e2.message = newMessage;
      throw e2;
    }
    const unsupportedToken = tokens.find((token) => {
      return token instanceof css.AtKeywordToken || token instanceof css.BadStringToken || token instanceof css.BadURLToken || token instanceof css.ColumnToken || token instanceof css.CDOToken || token instanceof css.CDCToken || token instanceof css.SemicolonToken || // TODO: Consider using these for something, e.g. to escape complex strings.
      // For example :xpath{ (//div/bar[@attr="foo"])[2]/baz }
      // Or this way :xpath( {complex-xpath-goes-here("hello")} )
      token instanceof css.OpenCurlyToken || token instanceof css.CloseCurlyToken || // TODO: Consider treating these as strings?
      token instanceof css.URLToken || token instanceof css.PercentageToken;
    });
    if (unsupportedToken) throw new InvalidSelectorError(`Unsupported token "${unsupportedToken.toSource()}" while parsing css selector "${selector}". Did you mean to CSS.escape it?`);
    let pos = 0;
    const names = /* @__PURE__ */ new Set();
    function unexpected() {
      return new InvalidSelectorError(`Unexpected token "${tokens[pos].toSource()}" while parsing css selector "${selector}". Did you mean to CSS.escape it?`);
    }
    function skipWhitespace() {
      while (tokens[pos] instanceof css.WhitespaceToken) pos++;
    }
    function isIdent(p = pos) {
      return tokens[p] instanceof css.IdentToken;
    }
    function isString(p = pos) {
      return tokens[p] instanceof css.StringToken;
    }
    function isNumber(p = pos) {
      return tokens[p] instanceof css.NumberToken;
    }
    function isComma(p = pos) {
      return tokens[p] instanceof css.CommaToken;
    }
    function isOpenParen(p = pos) {
      return tokens[p] instanceof css.OpenParenToken;
    }
    function isCloseParen(p = pos) {
      return tokens[p] instanceof css.CloseParenToken;
    }
    function isFunction(p = pos) {
      return tokens[p] instanceof css.FunctionToken;
    }
    function isStar(p = pos) {
      return tokens[p] instanceof css.DelimToken && tokens[p].value === "*";
    }
    function isEOF(p = pos) {
      return tokens[p] instanceof css.EOFToken;
    }
    function isClauseCombinator(p = pos) {
      return tokens[p] instanceof css.DelimToken && [">", "+", "~"].includes(tokens[p].value);
    }
    function isSelectorClauseEnd(p = pos) {
      return isComma(p) || isCloseParen(p) || isEOF(p) || isClauseCombinator(p) || tokens[p] instanceof css.WhitespaceToken;
    }
    function consumeFunctionArguments() {
      const result2 = [consumeArgument()];
      while (true) {
        skipWhitespace();
        if (!isComma()) break;
        pos++;
        result2.push(consumeArgument());
      }
      return result2;
    }
    function consumeArgument() {
      skipWhitespace();
      if (isNumber()) return tokens[pos++].value;
      if (isString()) return tokens[pos++].value;
      return consumeComplexSelector();
    }
    function consumeComplexSelector() {
      const result2 = {
        simples: []
      };
      skipWhitespace();
      if (isClauseCombinator()) {
        result2.simples.push({
          selector: {
            functions: [{
              name: "scope",
              args: []
            }]
          },
          combinator: ""
        });
      } else {
        result2.simples.push({
          selector: consumeSimpleSelector(),
          combinator: ""
        });
      }
      while (true) {
        skipWhitespace();
        if (isClauseCombinator()) {
          result2.simples[result2.simples.length - 1].combinator = tokens[pos++].value;
          skipWhitespace();
        } else if (isSelectorClauseEnd()) {
          break;
        }
        result2.simples.push({
          combinator: "",
          selector: consumeSimpleSelector()
        });
      }
      return result2;
    }
    function consumeSimpleSelector() {
      let rawCSSString = "";
      const functions = [];
      while (!isSelectorClauseEnd()) {
        if (isIdent() || isStar()) {
          rawCSSString += tokens[pos++].toSource();
        } else if (tokens[pos] instanceof css.HashToken) {
          rawCSSString += tokens[pos++].toSource();
        } else if (tokens[pos] instanceof css.DelimToken && tokens[pos].value === ".") {
          pos++;
          if (isIdent()) rawCSSString += "." + tokens[pos++].toSource();
          else throw unexpected();
        } else if (tokens[pos] instanceof css.ColonToken) {
          pos++;
          if (isIdent()) {
            if (!customNames.has(tokens[pos].value.toLowerCase())) {
              rawCSSString += ":" + tokens[pos++].toSource();
            } else {
              const name = tokens[pos++].value.toLowerCase();
              functions.push({
                name,
                args: []
              });
              names.add(name);
            }
          } else if (isFunction()) {
            const name = tokens[pos++].value.toLowerCase();
            if (!customNames.has(name)) {
              rawCSSString += `:${name}(${consumeBuiltinFunctionArguments()})`;
            } else {
              functions.push({
                name,
                args: consumeFunctionArguments()
              });
              names.add(name);
            }
            skipWhitespace();
            if (!isCloseParen()) throw unexpected();
            pos++;
          } else {
            throw unexpected();
          }
        } else if (tokens[pos] instanceof css.OpenSquareToken) {
          rawCSSString += "[";
          pos++;
          while (!(tokens[pos] instanceof css.CloseSquareToken) && !isEOF()) rawCSSString += tokens[pos++].toSource();
          if (!(tokens[pos] instanceof css.CloseSquareToken)) throw unexpected();
          rawCSSString += "]";
          pos++;
        } else {
          throw unexpected();
        }
      }
      if (!rawCSSString && !functions.length) throw unexpected();
      return {
        css: rawCSSString || void 0,
        functions
      };
    }
    function consumeBuiltinFunctionArguments() {
      let s2 = "";
      let balance = 1;
      while (!isEOF()) {
        if (isOpenParen() || isFunction()) balance++;
        if (isCloseParen()) balance--;
        if (!balance) break;
        s2 += tokens[pos++].toSource();
      }
      return s2;
    }
    const result = consumeFunctionArguments();
    if (!isEOF()) throw unexpected();
    if (result.some((arg) => typeof arg !== "object" || !("simples" in arg))) throw new InvalidSelectorError(`Error while parsing css selector "${selector}". Did you mean to CSS.escape it?`);
    return {
      selector: result,
      names: Array.from(names)
    };
  }
  function serializeSelector(args) {
    return args.map((arg) => {
      if (typeof arg === "string") return `"${arg}"`;
      if (typeof arg === "number") return String(arg);
      return arg.simples.map(({
        selector,
        combinator
      }) => {
        let s2 = selector.css || "";
        s2 = s2 + selector.functions.map((func) => `:${func.name}(${serializeSelector(func.args)})`).join("");
        if (combinator) s2 += " " + combinator;
        return s2;
      }).join(" ");
    }).join(", ");
  }
  return cssParser;
}
var hasRequiredSelectorParser;
function requireSelectorParser() {
  if (hasRequiredSelectorParser) return selectorParser;
  hasRequiredSelectorParser = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "InvalidSelectorError", {
      enumerable: true,
      get: function() {
        return _cssParser.InvalidSelectorError;
      }
    });
    exports.customCSSNames = void 0;
    Object.defineProperty(exports, "isInvalidSelectorError", {
      enumerable: true,
      get: function() {
        return _cssParser.isInvalidSelectorError;
      }
    });
    exports.parseAttributeSelector = parseAttributeSelector;
    exports.parseSelector = parseSelector;
    exports.splitSelectorByFrame = splitSelectorByFrame;
    exports.stringifySelector = stringifySelector;
    exports.visitAllSelectorParts = visitAllSelectorParts;
    var _cssParser = requireCssParser();
    const kNestedSelectorNames = /* @__PURE__ */ new Set(["internal:has", "internal:has-not", "internal:and", "internal:or", "internal:chain", "left-of", "right-of", "above", "below", "near"]);
    const kNestedSelectorNamesWithDistance = /* @__PURE__ */ new Set(["left-of", "right-of", "above", "below", "near"]);
    const customCSSNames = exports.customCSSNames = /* @__PURE__ */ new Set(["not", "is", "where", "has", "scope", "light", "visible", "text", "text-matches", "text-is", "has-text", "above", "below", "right-of", "left-of", "near", "nth-match"]);
    function parseSelector(selector) {
      const parsedStrings = parseSelectorString(selector);
      const parts = [];
      for (const part of parsedStrings.parts) {
        if (part.name === "css" || part.name === "css:light") {
          if (part.name === "css:light") part.body = ":light(" + part.body + ")";
          const parsedCSS = (0, _cssParser.parseCSS)(part.body, customCSSNames);
          parts.push({
            name: "css",
            body: parsedCSS.selector,
            source: part.body
          });
          continue;
        }
        if (kNestedSelectorNames.has(part.name)) {
          let innerSelector;
          let distance;
          try {
            const unescaped = JSON.parse("[" + part.body + "]");
            if (!Array.isArray(unescaped) || unescaped.length < 1 || unescaped.length > 2 || typeof unescaped[0] !== "string") throw new _cssParser.InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);
            innerSelector = unescaped[0];
            if (unescaped.length === 2) {
              if (typeof unescaped[1] !== "number" || !kNestedSelectorNamesWithDistance.has(part.name)) throw new _cssParser.InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);
              distance = unescaped[1];
            }
          } catch (e2) {
            throw new _cssParser.InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);
          }
          const nested = {
            name: part.name,
            source: part.body,
            body: {
              parsed: parseSelector(innerSelector),
              distance
            }
          };
          const lastFrame = [...nested.body.parsed.parts].reverse().find((part2) => part2.name === "internal:control" && part2.body === "enter-frame");
          const lastFrameIndex = lastFrame ? nested.body.parsed.parts.indexOf(lastFrame) : -1;
          if (lastFrameIndex !== -1 && selectorPartsEqual(nested.body.parsed.parts.slice(0, lastFrameIndex + 1), parts.slice(0, lastFrameIndex + 1))) nested.body.parsed.parts.splice(0, lastFrameIndex + 1);
          parts.push(nested);
          continue;
        }
        parts.push({
          ...part,
          source: part.body
        });
      }
      if (kNestedSelectorNames.has(parts[0].name)) throw new _cssParser.InvalidSelectorError(`"${parts[0].name}" selector cannot be first`);
      return {
        capture: parsedStrings.capture,
        parts
      };
    }
    function splitSelectorByFrame(selectorText) {
      const selector = parseSelector(selectorText);
      const result = [];
      let chunk = {
        parts: []
      };
      let chunkStartIndex = 0;
      for (let i = 0; i < selector.parts.length; ++i) {
        const part = selector.parts[i];
        if (part.name === "internal:control" && part.body === "enter-frame") {
          if (!chunk.parts.length) throw new _cssParser.InvalidSelectorError("Selector cannot start with entering frame, select the iframe first");
          result.push(chunk);
          chunk = {
            parts: []
          };
          chunkStartIndex = i + 1;
          continue;
        }
        if (selector.capture === i) chunk.capture = i - chunkStartIndex;
        chunk.parts.push(part);
      }
      if (!chunk.parts.length) throw new _cssParser.InvalidSelectorError(`Selector cannot end with entering frame, while parsing selector ${selectorText}`);
      result.push(chunk);
      if (typeof selector.capture === "number" && typeof result[result.length - 1].capture !== "number") throw new _cssParser.InvalidSelectorError(`Can not capture the selector before diving into the frame. Only use * after the last frame has been selected`);
      return result;
    }
    function selectorPartsEqual(list1, list2) {
      return stringifySelector({
        parts: list1
      }) === stringifySelector({
        parts: list2
      });
    }
    function stringifySelector(selector, forceEngineName) {
      if (typeof selector === "string") return selector;
      return selector.parts.map((p, i) => {
        let includeEngine = true;
        if (!forceEngineName && i !== selector.capture) {
          if (p.name === "css") includeEngine = false;
          else if (p.name === "xpath" && p.source.startsWith("//") || p.source.startsWith("..")) includeEngine = false;
        }
        const prefix = includeEngine ? p.name + "=" : "";
        return `${i === selector.capture ? "*" : ""}${prefix}${p.source}`;
      }).join(" >> ");
    }
    function visitAllSelectorParts(selector, visitor) {
      const visit = (selector2, nested) => {
        for (const part of selector2.parts) {
          visitor(part, nested);
          if (kNestedSelectorNames.has(part.name)) visit(part.body.parsed, true);
        }
      };
      visit(selector, false);
    }
    function parseSelectorString(selector) {
      let index = 0;
      let quote;
      let start = 0;
      const result = {
        parts: []
      };
      const append = () => {
        const part = selector.substring(start, index).trim();
        const eqIndex = part.indexOf("=");
        let name;
        let body;
        if (eqIndex !== -1 && part.substring(0, eqIndex).trim().match(/^[a-zA-Z_0-9-+:*]+$/)) {
          name = part.substring(0, eqIndex).trim();
          body = part.substring(eqIndex + 1);
        } else if (part.length > 1 && part[0] === '"' && part[part.length - 1] === '"') {
          name = "text";
          body = part;
        } else if (part.length > 1 && part[0] === "'" && part[part.length - 1] === "'") {
          name = "text";
          body = part;
        } else if (/^\(*\/\//.test(part) || part.startsWith("..")) {
          name = "xpath";
          body = part;
        } else {
          name = "css";
          body = part;
        }
        let capture = false;
        if (name[0] === "*") {
          capture = true;
          name = name.substring(1);
        }
        result.parts.push({
          name,
          body
        });
        if (capture) {
          if (result.capture !== void 0) throw new _cssParser.InvalidSelectorError(`Only one of the selectors can capture using * modifier`);
          result.capture = result.parts.length - 1;
        }
      };
      if (!selector.includes(">>")) {
        index = selector.length;
        append();
        return result;
      }
      const shouldIgnoreTextSelectorQuote = () => {
        const prefix = selector.substring(start, index);
        const match = prefix.match(/^\s*text\s*=(.*)$/);
        return !!match && !!match[1];
      };
      while (index < selector.length) {
        const c2 = selector[index];
        if (c2 === "\\" && index + 1 < selector.length) {
          index += 2;
        } else if (c2 === quote) {
          quote = void 0;
          index++;
        } else if (!quote && (c2 === '"' || c2 === "'" || c2 === "`") && !shouldIgnoreTextSelectorQuote()) {
          quote = c2;
          index++;
        } else if (!quote && c2 === ">" && selector[index + 1] === ">") {
          append();
          index += 2;
          start = index;
        } else {
          index++;
        }
      }
      append();
      return result;
    }
    function parseAttributeSelector(selector, allowUnquotedStrings) {
      let wp = 0;
      let EOL = selector.length === 0;
      const next = () => selector[wp] || "";
      const eat1 = () => {
        const result2 = next();
        ++wp;
        EOL = wp >= selector.length;
        return result2;
      };
      const syntaxError = (stage) => {
        if (EOL) throw new _cssParser.InvalidSelectorError(`Unexpected end of selector while parsing selector \`${selector}\``);
        throw new _cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\` - unexpected symbol "${next()}" at position ${wp}` + (stage ? " during " + stage : ""));
      };
      function skipSpaces() {
        while (!EOL && /\s/.test(next())) eat1();
      }
      function isCSSNameChar(char) {
        return char >= "" || char >= "0" && char <= "9" || char >= "A" && char <= "Z" || char >= "a" && char <= "z" || char >= "0" && char <= "9" || char === "_" || char === "-";
      }
      function readIdentifier() {
        let result2 = "";
        skipSpaces();
        while (!EOL && isCSSNameChar(next())) result2 += eat1();
        return result2;
      }
      function readQuotedString(quote) {
        let result2 = eat1();
        if (result2 !== quote) syntaxError("parsing quoted string");
        while (!EOL && next() !== quote) {
          if (next() === "\\") eat1();
          result2 += eat1();
        }
        if (next() !== quote) syntaxError("parsing quoted string");
        result2 += eat1();
        return result2;
      }
      function readRegularExpression() {
        if (eat1() !== "/") syntaxError("parsing regular expression");
        let source = "";
        let inClass = false;
        while (!EOL) {
          if (next() === "\\") {
            source += eat1();
            if (EOL) syntaxError("parsing regular expression");
          } else if (inClass && next() === "]") {
            inClass = false;
          } else if (!inClass && next() === "[") {
            inClass = true;
          } else if (!inClass && next() === "/") {
            break;
          }
          source += eat1();
        }
        if (eat1() !== "/") syntaxError("parsing regular expression");
        let flags = "";
        while (!EOL && next().match(/[dgimsuy]/)) flags += eat1();
        try {
          return new RegExp(source, flags);
        } catch (e2) {
          throw new _cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\`: ${e2.message}`);
        }
      }
      function readAttributeToken() {
        let token = "";
        skipSpaces();
        if (next() === `'` || next() === `"`) token = readQuotedString(next()).slice(1, -1);
        else token = readIdentifier();
        if (!token) syntaxError("parsing property path");
        return token;
      }
      function readOperator() {
        skipSpaces();
        let op = "";
        if (!EOL) op += eat1();
        if (!EOL && op !== "=") op += eat1();
        if (!["=", "*=", "^=", "$=", "|=", "~="].includes(op)) syntaxError("parsing operator");
        return op;
      }
      function readAttribute() {
        eat1();
        const jsonPath = [];
        jsonPath.push(readAttributeToken());
        skipSpaces();
        while (next() === ".") {
          eat1();
          jsonPath.push(readAttributeToken());
          skipSpaces();
        }
        if (next() === "]") {
          eat1();
          return {
            name: jsonPath.join("."),
            jsonPath,
            op: "<truthy>",
            value: null,
            caseSensitive: false
          };
        }
        const operator = readOperator();
        let value = void 0;
        let caseSensitive = true;
        skipSpaces();
        if (next() === "/") {
          if (operator !== "=") throw new _cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\` - cannot use ${operator} in attribute with regular expression`);
          value = readRegularExpression();
        } else if (next() === `'` || next() === `"`) {
          value = readQuotedString(next()).slice(1, -1);
          skipSpaces();
          if (next() === "i" || next() === "I") {
            caseSensitive = false;
            eat1();
          } else if (next() === "s" || next() === "S") {
            caseSensitive = true;
            eat1();
          }
        } else {
          value = "";
          while (!EOL && (isCSSNameChar(next()) || next() === "+" || next() === ".")) value += eat1();
          if (value === "true") {
            value = true;
          } else if (value === "false") {
            value = false;
          } else {
            if (!allowUnquotedStrings) {
              value = +value;
              if (Number.isNaN(value)) syntaxError("parsing attribute value");
            }
          }
        }
        skipSpaces();
        if (next() !== "]") syntaxError("parsing attribute value");
        eat1();
        if (operator !== "=" && typeof value !== "string") throw new _cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\` - cannot use ${operator} in attribute with non-string matching value - ${value}`);
        return {
          name: jsonPath.join("."),
          jsonPath,
          op: operator,
          value,
          caseSensitive
        };
      }
      const result = {
        name: "",
        attributes: []
      };
      result.name = readIdentifier();
      skipSpaces();
      while (next() === "[") {
        result.attributes.push(readAttribute());
        skipSpaces();
      }
      if (!EOL) syntaxError(void 0);
      if (!result.name && !result.attributes.length) throw new _cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\` - selector cannot be empty`);
      return result;
    }
  })(selectorParser);
  return selectorParser;
}
var stringUtils = {};
var hasRequiredStringUtils;
function requireStringUtils() {
  if (hasRequiredStringUtils) return stringUtils;
  hasRequiredStringUtils = 1;
  Object.defineProperty(stringUtils, "__esModule", {
    value: true
  });
  stringUtils.cacheNormalizedWhitespaces = cacheNormalizedWhitespaces;
  stringUtils.cssEscape = cssEscape;
  stringUtils.escapeForAttributeSelector = escapeForAttributeSelector;
  stringUtils.escapeForTextSelector = escapeForTextSelector;
  stringUtils.escapeHTML = escapeHTML;
  stringUtils.escapeHTMLAttribute = escapeHTMLAttribute;
  stringUtils.escapeRegExp = escapeRegExp;
  stringUtils.escapeTemplateString = escapeTemplateString;
  stringUtils.escapeWithQuotes = escapeWithQuotes;
  stringUtils.isString = isString;
  stringUtils.longestCommonSubstring = longestCommonSubstring;
  stringUtils.normalizeEscapedRegexQuotes = normalizeEscapedRegexQuotes;
  stringUtils.normalizeWhiteSpace = normalizeWhiteSpace;
  stringUtils.quoteCSSAttributeValue = quoteCSSAttributeValue;
  stringUtils.toSnakeCase = toSnakeCase;
  stringUtils.toTitleCase = toTitleCase;
  stringUtils.trimString = trimString;
  stringUtils.trimStringWithEllipsis = trimStringWithEllipsis;
  function escapeWithQuotes(text, char = "'") {
    const stringified = JSON.stringify(text);
    const escapedText = stringified.substring(1, stringified.length - 1).replace(/\\"/g, '"');
    if (char === "'") return char + escapedText.replace(/[']/g, "\\'") + char;
    if (char === '"') return char + escapedText.replace(/["]/g, '\\"') + char;
    if (char === "`") return char + escapedText.replace(/[`]/g, "`") + char;
    throw new Error("Invalid escape char");
  }
  function escapeTemplateString(text) {
    return text.replace(/\\/g, "\\\\").replace(/`/g, "\\`").replace(/\$\{/g, "\\${");
  }
  function isString(obj) {
    return typeof obj === "string" || obj instanceof String;
  }
  function toTitleCase(name) {
    return name.charAt(0).toUpperCase() + name.substring(1);
  }
  function toSnakeCase(name) {
    return name.replace(/([a-z0-9])([A-Z])/g, "$1_$2").replace(/([A-Z])([A-Z][a-z])/g, "$1_$2").toLowerCase();
  }
  function cssEscape(s2) {
    let result = "";
    for (let i = 0; i < s2.length; i++) result += cssEscapeOne(s2, i);
    return result;
  }
  function quoteCSSAttributeValue(text) {
    return `"${cssEscape(text).replace(/\\ /g, " ")}"`;
  }
  function cssEscapeOne(s2, i) {
    const c2 = s2.charCodeAt(i);
    if (c2 === 0) return "�";
    if (c2 >= 1 && c2 <= 31 || c2 >= 48 && c2 <= 57 && (i === 0 || i === 1 && s2.charCodeAt(0) === 45)) return "\\" + c2.toString(16) + " ";
    if (i === 0 && c2 === 45 && s2.length === 1) return "\\" + s2.charAt(i);
    if (c2 >= 128 || c2 === 45 || c2 === 95 || c2 >= 48 && c2 <= 57 || c2 >= 65 && c2 <= 90 || c2 >= 97 && c2 <= 122) return s2.charAt(i);
    return "\\" + s2.charAt(i);
  }
  let normalizedWhitespaceCache;
  function cacheNormalizedWhitespaces() {
    normalizedWhitespaceCache = /* @__PURE__ */ new Map();
  }
  function normalizeWhiteSpace(text) {
    var _normalizedWhitespace;
    let result = (_normalizedWhitespace = normalizedWhitespaceCache) === null || _normalizedWhitespace === void 0 ? void 0 : _normalizedWhitespace.get(text);
    if (result === void 0) {
      var _normalizedWhitespace2;
      result = text.replace(/[\u200b\u00ad]/g, "").trim().replace(/\s+/g, " ");
      (_normalizedWhitespace2 = normalizedWhitespaceCache) === null || _normalizedWhitespace2 === void 0 || _normalizedWhitespace2.set(text, result);
    }
    return result;
  }
  function normalizeEscapedRegexQuotes(source) {
    return source.replace(/(^|[^\\])(\\\\)*\\(['"`])/g, "$1$2$3");
  }
  function escapeRegexForSelector(re) {
    if (re.unicode || re.unicodeSets) return String(re);
    return String(re).replace(/(^|[^\\])(\\\\)*(["'`])/g, "$1$2\\$3").replace(/>>/g, "\\>\\>");
  }
  function escapeForTextSelector(text, exact) {
    if (typeof text !== "string") return escapeRegexForSelector(text);
    return `${JSON.stringify(text)}${exact ? "s" : "i"}`;
  }
  function escapeForAttributeSelector(value, exact) {
    if (typeof value !== "string") return escapeRegexForSelector(value);
    return `"${value.replace(/\\/g, "\\\\").replace(/["]/g, '\\"')}"${exact ? "s" : "i"}`;
  }
  function trimString(input2, cap, suffix = "") {
    if (input2.length <= cap) return input2;
    const chars = [...input2];
    if (chars.length > cap) return chars.slice(0, cap - suffix.length).join("") + suffix;
    return chars.join("");
  }
  function trimStringWithEllipsis(input2, cap) {
    return trimString(input2, cap, "…");
  }
  function escapeRegExp(s2) {
    return s2.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  }
  const escaped = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#39;"
  };
  function escapeHTMLAttribute(s2) {
    return s2.replace(/[&<>"']/ug, (char) => escaped[char]);
  }
  function escapeHTML(s2) {
    return s2.replace(/[&<]/ug, (char) => escaped[char]);
  }
  function longestCommonSubstring(s1, s2) {
    const n = s1.length;
    const m2 = s2.length;
    let maxLen = 0;
    let endingIndex = 0;
    const dp = Array(n + 1).fill(null).map(() => Array(m2 + 1).fill(0));
    for (let i = 1; i <= n; i++) {
      for (let j = 1; j <= m2; j++) {
        if (s1[i - 1] === s2[j - 1]) {
          dp[i][j] = dp[i - 1][j - 1] + 1;
          if (dp[i][j] > maxLen) {
            maxLen = dp[i][j];
            endingIndex = i;
          }
        }
      }
    }
    return s1.slice(endingIndex - maxLen, endingIndex);
  }
  return stringUtils;
}
var hasRequiredLocatorGenerators;
function requireLocatorGenerators() {
  if (hasRequiredLocatorGenerators) return locatorGenerators;
  hasRequiredLocatorGenerators = 1;
  Object.defineProperty(locatorGenerators, "__esModule", {
    value: true
  });
  locatorGenerators.PythonLocatorFactory = locatorGenerators.JsonlLocatorFactory = locatorGenerators.JavaScriptLocatorFactory = locatorGenerators.JavaLocatorFactory = locatorGenerators.CSharpLocatorFactory = void 0;
  locatorGenerators.asLocator = asLocator;
  locatorGenerators.asLocators = asLocators;
  var _selectorParser = requireSelectorParser();
  var _stringUtils = requireStringUtils();
  function asLocator(lang, selector, isFrameLocator = false) {
    return asLocators(lang, selector, isFrameLocator, 1)[0];
  }
  function asLocators(lang, selector, isFrameLocator = false, maxOutputSize = 20, preferredQuote) {
    try {
      return innerAsLocators(new generators[lang](preferredQuote), (0, _selectorParser.parseSelector)(selector), isFrameLocator, maxOutputSize);
    } catch (e2) {
      return [selector];
    }
  }
  function innerAsLocators(factory, parsed, isFrameLocator = false, maxOutputSize = 20) {
    const parts = [...parsed.parts];
    const tokens = [];
    let nextBase = isFrameLocator ? "frame-locator" : "page";
    for (let index = 0; index < parts.length; index++) {
      const part = parts[index];
      const base = nextBase;
      nextBase = "locator";
      if (part.name === "nth") {
        if (part.body === "0") tokens.push([factory.generateLocator(base, "first", ""), factory.generateLocator(base, "nth", "0")]);
        else if (part.body === "-1") tokens.push([factory.generateLocator(base, "last", ""), factory.generateLocator(base, "nth", "-1")]);
        else tokens.push([factory.generateLocator(base, "nth", part.body)]);
        continue;
      }
      if (part.name === "visible") {
        tokens.push([factory.generateLocator(base, "visible", part.body), factory.generateLocator(base, "default", `visible=${part.body}`)]);
        continue;
      }
      if (part.name === "internal:text") {
        const {
          exact,
          text
        } = detectExact(part.body);
        tokens.push([factory.generateLocator(base, "text", text, {
          exact
        })]);
        continue;
      }
      if (part.name === "internal:has-text") {
        const {
          exact,
          text
        } = detectExact(part.body);
        if (!exact) {
          tokens.push([factory.generateLocator(base, "has-text", text, {
            exact
          })]);
          continue;
        }
      }
      if (part.name === "internal:has-not-text") {
        const {
          exact,
          text
        } = detectExact(part.body);
        if (!exact) {
          tokens.push([factory.generateLocator(base, "has-not-text", text, {
            exact
          })]);
          continue;
        }
      }
      if (part.name === "internal:has") {
        const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
        tokens.push(inners.map((inner) => factory.generateLocator(base, "has", inner)));
        continue;
      }
      if (part.name === "internal:has-not") {
        const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
        tokens.push(inners.map((inner) => factory.generateLocator(base, "hasNot", inner)));
        continue;
      }
      if (part.name === "internal:and") {
        const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
        tokens.push(inners.map((inner) => factory.generateLocator(base, "and", inner)));
        continue;
      }
      if (part.name === "internal:or") {
        const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
        tokens.push(inners.map((inner) => factory.generateLocator(base, "or", inner)));
        continue;
      }
      if (part.name === "internal:chain") {
        const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
        tokens.push(inners.map((inner) => factory.generateLocator(base, "chain", inner)));
        continue;
      }
      if (part.name === "internal:label") {
        const {
          exact,
          text
        } = detectExact(part.body);
        tokens.push([factory.generateLocator(base, "label", text, {
          exact
        })]);
        continue;
      }
      if (part.name === "internal:role") {
        const attrSelector = (0, _selectorParser.parseAttributeSelector)(part.body, true);
        const options = {
          attrs: []
        };
        for (const attr of attrSelector.attributes) {
          if (attr.name === "name") {
            options.exact = attr.caseSensitive;
            options.name = attr.value;
          } else {
            if (attr.name === "level" && typeof attr.value === "string") attr.value = +attr.value;
            options.attrs.push({
              name: attr.name === "include-hidden" ? "includeHidden" : attr.name,
              value: attr.value
            });
          }
        }
        tokens.push([factory.generateLocator(base, "role", attrSelector.name, options)]);
        continue;
      }
      if (part.name === "internal:testid") {
        const attrSelector = (0, _selectorParser.parseAttributeSelector)(part.body, true);
        const {
          value
        } = attrSelector.attributes[0];
        tokens.push([factory.generateLocator(base, "test-id", value)]);
        continue;
      }
      if (part.name === "internal:attr") {
        const attrSelector = (0, _selectorParser.parseAttributeSelector)(part.body, true);
        const {
          name,
          value,
          caseSensitive
        } = attrSelector.attributes[0];
        const text = value;
        const exact = !!caseSensitive;
        if (name === "placeholder") {
          tokens.push([factory.generateLocator(base, "placeholder", text, {
            exact
          })]);
          continue;
        }
        if (name === "alt") {
          tokens.push([factory.generateLocator(base, "alt", text, {
            exact
          })]);
          continue;
        }
        if (name === "title") {
          tokens.push([factory.generateLocator(base, "title", text, {
            exact
          })]);
          continue;
        }
      }
      if (part.name === "internal:control" && part.body === "enter-frame") {
        const lastTokens = tokens[tokens.length - 1];
        const lastPart = parts[index - 1];
        const transformed = lastTokens.map((token) => factory.chainLocators([token, factory.generateLocator(base, "frame", "")]));
        if (["xpath", "css"].includes(lastPart.name)) {
          transformed.push(factory.generateLocator(base, "frame-locator", (0, _selectorParser.stringifySelector)({
            parts: [lastPart]
          })), factory.generateLocator(base, "frame-locator", (0, _selectorParser.stringifySelector)({
            parts: [lastPart]
          }, true)));
        }
        lastTokens.splice(0, lastTokens.length, ...transformed);
        nextBase = "frame-locator";
        continue;
      }
      const nextPart = parts[index + 1];
      const selectorPart = (0, _selectorParser.stringifySelector)({
        parts: [part]
      });
      const locatorPart = factory.generateLocator(base, "default", selectorPart);
      if (nextPart && ["internal:has-text", "internal:has-not-text"].includes(nextPart.name)) {
        const {
          exact,
          text
        } = detectExact(nextPart.body);
        if (!exact) {
          const nextLocatorPart = factory.generateLocator("locator", nextPart.name === "internal:has-text" ? "has-text" : "has-not-text", text, {
            exact
          });
          const options = {};
          if (nextPart.name === "internal:has-text") options.hasText = text;
          else options.hasNotText = text;
          const combinedPart = factory.generateLocator(base, "default", selectorPart, options);
          tokens.push([factory.chainLocators([locatorPart, nextLocatorPart]), combinedPart]);
          index++;
          continue;
        }
      }
      let locatorPartWithEngine;
      if (["xpath", "css"].includes(part.name)) {
        const selectorPart2 = (0, _selectorParser.stringifySelector)(
          {
            parts: [part]
          },
          /* forceEngineName */
          true
        );
        locatorPartWithEngine = factory.generateLocator(base, "default", selectorPart2);
      }
      tokens.push([locatorPart, locatorPartWithEngine].filter(Boolean));
    }
    return combineTokens(factory, tokens, maxOutputSize);
  }
  function combineTokens(factory, tokens, maxOutputSize) {
    const currentTokens = tokens.map(() => "");
    const result = [];
    const visit = (index) => {
      if (index === tokens.length) {
        result.push(factory.chainLocators(currentTokens));
        return result.length < maxOutputSize;
      }
      for (const taken of tokens[index]) {
        currentTokens[index] = taken;
        if (!visit(index + 1)) return false;
      }
      return true;
    };
    visit(0);
    return result;
  }
  function detectExact(text) {
    let exact = false;
    const match = text.match(/^\/(.*)\/([igm]*)$/);
    if (match) return {
      text: new RegExp(match[1], match[2])
    };
    if (text.endsWith('"')) {
      text = JSON.parse(text);
      exact = true;
    } else if (text.endsWith('"s')) {
      text = JSON.parse(text.substring(0, text.length - 1));
      exact = true;
    } else if (text.endsWith('"i')) {
      text = JSON.parse(text.substring(0, text.length - 1));
      exact = false;
    }
    return {
      exact,
      text
    };
  }
  class JavaScriptLocatorFactory {
    constructor(preferredQuote) {
      this.preferredQuote = preferredQuote;
    }
    generateLocator(base, kind, body, options = {}) {
      switch (kind) {
        case "default":
          if (options.hasText !== void 0) return `locator(${this.quote(body)}, { hasText: ${this.toHasText(options.hasText)} })`;
          if (options.hasNotText !== void 0) return `locator(${this.quote(body)}, { hasNotText: ${this.toHasText(options.hasNotText)} })`;
          return `locator(${this.quote(body)})`;
        case "frame-locator":
          return `frameLocator(${this.quote(body)})`;
        case "frame":
          return `contentFrame()`;
        case "nth":
          return `nth(${body})`;
        case "first":
          return `first()`;
        case "last":
          return `last()`;
        case "visible":
          return `filter({ visible: ${body === "true" ? "true" : "false"} })`;
        case "role":
          const attrs = [];
          if (isRegExp(options.name)) {
            attrs.push(`name: ${this.regexToSourceString(options.name)}`);
          } else if (typeof options.name === "string") {
            attrs.push(`name: ${this.quote(options.name)}`);
            if (options.exact) attrs.push(`exact: true`);
          }
          for (const {
            name,
            value
          } of options.attrs) attrs.push(`${name}: ${typeof value === "string" ? this.quote(value) : value}`);
          const attrString = attrs.length ? `, { ${attrs.join(", ")} }` : "";
          return `getByRole(${this.quote(body)}${attrString})`;
        case "has-text":
          return `filter({ hasText: ${this.toHasText(body)} })`;
        case "has-not-text":
          return `filter({ hasNotText: ${this.toHasText(body)} })`;
        case "has":
          return `filter({ has: ${body} })`;
        case "hasNot":
          return `filter({ hasNot: ${body} })`;
        case "and":
          return `and(${body})`;
        case "or":
          return `or(${body})`;
        case "chain":
          return `locator(${body})`;
        case "test-id":
          return `getByTestId(${this.toTestIdValue(body)})`;
        case "text":
          return this.toCallWithExact("getByText", body, !!options.exact);
        case "alt":
          return this.toCallWithExact("getByAltText", body, !!options.exact);
        case "placeholder":
          return this.toCallWithExact("getByPlaceholder", body, !!options.exact);
        case "label":
          return this.toCallWithExact("getByLabel", body, !!options.exact);
        case "title":
          return this.toCallWithExact("getByTitle", body, !!options.exact);
        default:
          throw new Error("Unknown selector kind " + kind);
      }
    }
    chainLocators(locators) {
      return locators.join(".");
    }
    regexToSourceString(re) {
      return (0, _stringUtils.normalizeEscapedRegexQuotes)(String(re));
    }
    toCallWithExact(method, body, exact) {
      if (isRegExp(body)) return `${method}(${this.regexToSourceString(body)})`;
      return exact ? `${method}(${this.quote(body)}, { exact: true })` : `${method}(${this.quote(body)})`;
    }
    toHasText(body) {
      if (isRegExp(body)) return this.regexToSourceString(body);
      return this.quote(body);
    }
    toTestIdValue(value) {
      if (isRegExp(value)) return this.regexToSourceString(value);
      return this.quote(value);
    }
    quote(text) {
      var _this$preferredQuote;
      return (0, _stringUtils.escapeWithQuotes)(text, (_this$preferredQuote = this.preferredQuote) !== null && _this$preferredQuote !== void 0 ? _this$preferredQuote : "'");
    }
  }
  locatorGenerators.JavaScriptLocatorFactory = JavaScriptLocatorFactory;
  class PythonLocatorFactory {
    generateLocator(base, kind, body, options = {}) {
      switch (kind) {
        case "default":
          if (options.hasText !== void 0) return `locator(${this.quote(body)}, has_text=${this.toHasText(options.hasText)})`;
          if (options.hasNotText !== void 0) return `locator(${this.quote(body)}, has_not_text=${this.toHasText(options.hasNotText)})`;
          return `locator(${this.quote(body)})`;
        case "frame-locator":
          return `frame_locator(${this.quote(body)})`;
        case "frame":
          return `content_frame`;
        case "nth":
          return `nth(${body})`;
        case "first":
          return `first`;
        case "last":
          return `last`;
        case "visible":
          return `filter(visible=${body === "true" ? "True" : "False"})`;
        case "role":
          const attrs = [];
          if (isRegExp(options.name)) {
            attrs.push(`name=${this.regexToString(options.name)}`);
          } else if (typeof options.name === "string") {
            attrs.push(`name=${this.quote(options.name)}`);
            if (options.exact) attrs.push(`exact=True`);
          }
          for (const {
            name,
            value
          } of options.attrs) {
            let valueString = typeof value === "string" ? this.quote(value) : value;
            if (typeof value === "boolean") valueString = value ? "True" : "False";
            attrs.push(`${(0, _stringUtils.toSnakeCase)(name)}=${valueString}`);
          }
          const attrString = attrs.length ? `, ${attrs.join(", ")}` : "";
          return `get_by_role(${this.quote(body)}${attrString})`;
        case "has-text":
          return `filter(has_text=${this.toHasText(body)})`;
        case "has-not-text":
          return `filter(has_not_text=${this.toHasText(body)})`;
        case "has":
          return `filter(has=${body})`;
        case "hasNot":
          return `filter(has_not=${body})`;
        case "and":
          return `and_(${body})`;
        case "or":
          return `or_(${body})`;
        case "chain":
          return `locator(${body})`;
        case "test-id":
          return `get_by_test_id(${this.toTestIdValue(body)})`;
        case "text":
          return this.toCallWithExact("get_by_text", body, !!options.exact);
        case "alt":
          return this.toCallWithExact("get_by_alt_text", body, !!options.exact);
        case "placeholder":
          return this.toCallWithExact("get_by_placeholder", body, !!options.exact);
        case "label":
          return this.toCallWithExact("get_by_label", body, !!options.exact);
        case "title":
          return this.toCallWithExact("get_by_title", body, !!options.exact);
        default:
          throw new Error("Unknown selector kind " + kind);
      }
    }
    chainLocators(locators) {
      return locators.join(".");
    }
    regexToString(body) {
      const suffix = body.flags.includes("i") ? ", re.IGNORECASE" : "";
      return `re.compile(r"${(0, _stringUtils.normalizeEscapedRegexQuotes)(body.source).replace(/\\\//, "/").replace(/"/g, '\\"')}"${suffix})`;
    }
    toCallWithExact(method, body, exact) {
      if (isRegExp(body)) return `${method}(${this.regexToString(body)})`;
      if (exact) return `${method}(${this.quote(body)}, exact=True)`;
      return `${method}(${this.quote(body)})`;
    }
    toHasText(body) {
      if (isRegExp(body)) return this.regexToString(body);
      return `${this.quote(body)}`;
    }
    toTestIdValue(value) {
      if (isRegExp(value)) return this.regexToString(value);
      return this.quote(value);
    }
    quote(text) {
      return (0, _stringUtils.escapeWithQuotes)(text, '"');
    }
  }
  locatorGenerators.PythonLocatorFactory = PythonLocatorFactory;
  class JavaLocatorFactory {
    generateLocator(base, kind, body, options = {}) {
      let clazz;
      switch (base) {
        case "page":
          clazz = "Page";
          break;
        case "frame-locator":
          clazz = "FrameLocator";
          break;
        case "locator":
          clazz = "Locator";
          break;
      }
      switch (kind) {
        case "default":
          if (options.hasText !== void 0) return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasText(${this.toHasText(options.hasText)}))`;
          if (options.hasNotText !== void 0) return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasNotText(${this.toHasText(options.hasNotText)}))`;
          return `locator(${this.quote(body)})`;
        case "frame-locator":
          return `frameLocator(${this.quote(body)})`;
        case "frame":
          return `contentFrame()`;
        case "nth":
          return `nth(${body})`;
        case "first":
          return `first()`;
        case "last":
          return `last()`;
        case "visible":
          return `filter(new ${clazz}.FilterOptions().setVisible(${body === "true" ? "true" : "false"}))`;
        case "role":
          const attrs = [];
          if (isRegExp(options.name)) {
            attrs.push(`.setName(${this.regexToString(options.name)})`);
          } else if (typeof options.name === "string") {
            attrs.push(`.setName(${this.quote(options.name)})`);
            if (options.exact) attrs.push(`.setExact(true)`);
          }
          for (const {
            name,
            value
          } of options.attrs) attrs.push(`.set${(0, _stringUtils.toTitleCase)(name)}(${typeof value === "string" ? this.quote(value) : value})`);
          const attrString = attrs.length ? `, new ${clazz}.GetByRoleOptions()${attrs.join("")}` : "";
          return `getByRole(AriaRole.${(0, _stringUtils.toSnakeCase)(body).toUpperCase()}${attrString})`;
        case "has-text":
          return `filter(new ${clazz}.FilterOptions().setHasText(${this.toHasText(body)}))`;
        case "has-not-text":
          return `filter(new ${clazz}.FilterOptions().setHasNotText(${this.toHasText(body)}))`;
        case "has":
          return `filter(new ${clazz}.FilterOptions().setHas(${body}))`;
        case "hasNot":
          return `filter(new ${clazz}.FilterOptions().setHasNot(${body}))`;
        case "and":
          return `and(${body})`;
        case "or":
          return `or(${body})`;
        case "chain":
          return `locator(${body})`;
        case "test-id":
          return `getByTestId(${this.toTestIdValue(body)})`;
        case "text":
          return this.toCallWithExact(clazz, "getByText", body, !!options.exact);
        case "alt":
          return this.toCallWithExact(clazz, "getByAltText", body, !!options.exact);
        case "placeholder":
          return this.toCallWithExact(clazz, "getByPlaceholder", body, !!options.exact);
        case "label":
          return this.toCallWithExact(clazz, "getByLabel", body, !!options.exact);
        case "title":
          return this.toCallWithExact(clazz, "getByTitle", body, !!options.exact);
        default:
          throw new Error("Unknown selector kind " + kind);
      }
    }
    chainLocators(locators) {
      return locators.join(".");
    }
    regexToString(body) {
      const suffix = body.flags.includes("i") ? ", Pattern.CASE_INSENSITIVE" : "";
      return `Pattern.compile(${this.quote((0, _stringUtils.normalizeEscapedRegexQuotes)(body.source))}${suffix})`;
    }
    toCallWithExact(clazz, method, body, exact) {
      if (isRegExp(body)) return `${method}(${this.regexToString(body)})`;
      if (exact) return `${method}(${this.quote(body)}, new ${clazz}.${(0, _stringUtils.toTitleCase)(method)}Options().setExact(true))`;
      return `${method}(${this.quote(body)})`;
    }
    toHasText(body) {
      if (isRegExp(body)) return this.regexToString(body);
      return this.quote(body);
    }
    toTestIdValue(value) {
      if (isRegExp(value)) return this.regexToString(value);
      return this.quote(value);
    }
    quote(text) {
      return (0, _stringUtils.escapeWithQuotes)(text, '"');
    }
  }
  locatorGenerators.JavaLocatorFactory = JavaLocatorFactory;
  class CSharpLocatorFactory {
    generateLocator(base, kind, body, options = {}) {
      switch (kind) {
        case "default":
          if (options.hasText !== void 0) return `Locator(${this.quote(body)}, new() { ${this.toHasText(options.hasText)} })`;
          if (options.hasNotText !== void 0) return `Locator(${this.quote(body)}, new() { ${this.toHasNotText(options.hasNotText)} })`;
          return `Locator(${this.quote(body)})`;
        case "frame-locator":
          return `FrameLocator(${this.quote(body)})`;
        case "frame":
          return `ContentFrame`;
        case "nth":
          return `Nth(${body})`;
        case "first":
          return `First`;
        case "last":
          return `Last`;
        case "visible":
          return `Filter(new() { Visible = ${body === "true" ? "true" : "false"} })`;
        case "role":
          const attrs = [];
          if (isRegExp(options.name)) {
            attrs.push(`NameRegex = ${this.regexToString(options.name)}`);
          } else if (typeof options.name === "string") {
            attrs.push(`Name = ${this.quote(options.name)}`);
            if (options.exact) attrs.push(`Exact = true`);
          }
          for (const {
            name,
            value
          } of options.attrs) attrs.push(`${(0, _stringUtils.toTitleCase)(name)} = ${typeof value === "string" ? this.quote(value) : value}`);
          const attrString = attrs.length ? `, new() { ${attrs.join(", ")} }` : "";
          return `GetByRole(AriaRole.${(0, _stringUtils.toTitleCase)(body)}${attrString})`;
        case "has-text":
          return `Filter(new() { ${this.toHasText(body)} })`;
        case "has-not-text":
          return `Filter(new() { ${this.toHasNotText(body)} })`;
        case "has":
          return `Filter(new() { Has = ${body} })`;
        case "hasNot":
          return `Filter(new() { HasNot = ${body} })`;
        case "and":
          return `And(${body})`;
        case "or":
          return `Or(${body})`;
        case "chain":
          return `Locator(${body})`;
        case "test-id":
          return `GetByTestId(${this.toTestIdValue(body)})`;
        case "text":
          return this.toCallWithExact("GetByText", body, !!options.exact);
        case "alt":
          return this.toCallWithExact("GetByAltText", body, !!options.exact);
        case "placeholder":
          return this.toCallWithExact("GetByPlaceholder", body, !!options.exact);
        case "label":
          return this.toCallWithExact("GetByLabel", body, !!options.exact);
        case "title":
          return this.toCallWithExact("GetByTitle", body, !!options.exact);
        default:
          throw new Error("Unknown selector kind " + kind);
      }
    }
    chainLocators(locators) {
      return locators.join(".");
    }
    regexToString(body) {
      const suffix = body.flags.includes("i") ? ", RegexOptions.IgnoreCase" : "";
      return `new Regex(${this.quote((0, _stringUtils.normalizeEscapedRegexQuotes)(body.source))}${suffix})`;
    }
    toCallWithExact(method, body, exact) {
      if (isRegExp(body)) return `${method}(${this.regexToString(body)})`;
      if (exact) return `${method}(${this.quote(body)}, new() { Exact = true })`;
      return `${method}(${this.quote(body)})`;
    }
    toHasText(body) {
      if (isRegExp(body)) return `HasTextRegex = ${this.regexToString(body)}`;
      return `HasText = ${this.quote(body)}`;
    }
    toTestIdValue(value) {
      if (isRegExp(value)) return this.regexToString(value);
      return this.quote(value);
    }
    toHasNotText(body) {
      if (isRegExp(body)) return `HasNotTextRegex = ${this.regexToString(body)}`;
      return `HasNotText = ${this.quote(body)}`;
    }
    quote(text) {
      return (0, _stringUtils.escapeWithQuotes)(text, '"');
    }
  }
  locatorGenerators.CSharpLocatorFactory = CSharpLocatorFactory;
  class JsonlLocatorFactory {
    generateLocator(base, kind, body, options = {}) {
      return JSON.stringify({
        kind,
        body,
        options
      });
    }
    chainLocators(locators) {
      const objects = locators.map((l) => JSON.parse(l));
      for (let i = 0; i < objects.length - 1; ++i) objects[i].next = objects[i + 1];
      return JSON.stringify(objects[0]);
    }
  }
  locatorGenerators.JsonlLocatorFactory = JsonlLocatorFactory;
  const generators = {
    javascript: JavaScriptLocatorFactory,
    python: PythonLocatorFactory,
    java: JavaLocatorFactory,
    csharp: CSharpLocatorFactory,
    jsonl: JsonlLocatorFactory
  };
  function isRegExp(obj) {
    return obj instanceof RegExp;
  }
  return locatorGenerators;
}
var mimeType = {};
var hasRequiredMimeType;
function requireMimeType() {
  if (hasRequiredMimeType) return mimeType;
  hasRequiredMimeType = 1;
  Object.defineProperty(mimeType, "__esModule", {
    value: true
  });
  mimeType.getMimeTypeForPath = getMimeTypeForPath;
  mimeType.isJsonMimeType = isJsonMimeType;
  mimeType.isTextualMimeType = isTextualMimeType;
  function isJsonMimeType(mimeType2) {
    return !!mimeType2.match(/^(application\/json|application\/.*?\+json|text\/(x-)?json)(;\s*charset=.*)?$/);
  }
  function isTextualMimeType(mimeType2) {
    return !!mimeType2.match(/^(text\/.*?|application\/(json|(x-)?javascript|xml.*?|ecmascript|graphql|x-www-form-urlencoded)|image\/svg(\+xml)?|application\/.*?(\+json|\+xml))(;\s*charset=.*)?$/);
  }
  function getMimeTypeForPath(path) {
    const dotIndex = path.lastIndexOf(".");
    if (dotIndex === -1) return null;
    const extension = path.substring(dotIndex + 1);
    return types2.get(extension) || null;
  }
  const types2 = /* @__PURE__ */ new Map([["ez", "application/andrew-inset"], ["aw", "application/applixware"], ["atom", "application/atom+xml"], ["atomcat", "application/atomcat+xml"], ["atomdeleted", "application/atomdeleted+xml"], ["atomsvc", "application/atomsvc+xml"], ["dwd", "application/atsc-dwd+xml"], ["held", "application/atsc-held+xml"], ["rsat", "application/atsc-rsat+xml"], ["bdoc", "application/bdoc"], ["xcs", "application/calendar+xml"], ["ccxml", "application/ccxml+xml"], ["cdfx", "application/cdfx+xml"], ["cdmia", "application/cdmi-capability"], ["cdmic", "application/cdmi-container"], ["cdmid", "application/cdmi-domain"], ["cdmio", "application/cdmi-object"], ["cdmiq", "application/cdmi-queue"], ["cu", "application/cu-seeme"], ["mpd", "application/dash+xml"], ["davmount", "application/davmount+xml"], ["dbk", "application/docbook+xml"], ["dssc", "application/dssc+der"], ["xdssc", "application/dssc+xml"], ["ecma", "application/ecmascript"], ["es", "application/ecmascript"], ["emma", "application/emma+xml"], ["emotionml", "application/emotionml+xml"], ["epub", "application/epub+zip"], ["exi", "application/exi"], ["exp", "application/express"], ["fdt", "application/fdt+xml"], ["pfr", "application/font-tdpfr"], ["geojson", "application/geo+json"], ["gml", "application/gml+xml"], ["gpx", "application/gpx+xml"], ["gxf", "application/gxf"], ["gz", "application/gzip"], ["hjson", "application/hjson"], ["stk", "application/hyperstudio"], ["ink", "application/inkml+xml"], ["inkml", "application/inkml+xml"], ["ipfix", "application/ipfix"], ["its", "application/its+xml"], ["ear", "application/java-archive"], ["jar", "application/java-archive"], ["war", "application/java-archive"], ["ser", "application/java-serialized-object"], ["class", "application/java-vm"], ["js", "application/javascript"], ["mjs", "application/javascript"], ["json", "application/json"], ["map", "application/json"], ["json5", "application/json5"], ["jsonml", "application/jsonml+json"], ["jsonld", "application/ld+json"], ["lgr", "application/lgr+xml"], ["lostxml", "application/lost+xml"], ["hqx", "application/mac-binhex40"], ["cpt", "application/mac-compactpro"], ["mads", "application/mads+xml"], ["webmanifest", "application/manifest+json"], ["mrc", "application/marc"], ["mrcx", "application/marcxml+xml"], ["ma", "application/mathematica"], ["mb", "application/mathematica"], ["nb", "application/mathematica"], ["mathml", "application/mathml+xml"], ["mbox", "application/mbox"], ["mscml", "application/mediaservercontrol+xml"], ["metalink", "application/metalink+xml"], ["meta4", "application/metalink4+xml"], ["mets", "application/mets+xml"], ["maei", "application/mmt-aei+xml"], ["musd", "application/mmt-usd+xml"], ["mods", "application/mods+xml"], ["m21", "application/mp21"], ["mp21", "application/mp21"], ["m4p", "application/mp4"], ["mp4s", "application/mp4"], ["doc", "application/msword"], ["dot", "application/msword"], ["mxf", "application/mxf"], ["nq", "application/n-quads"], ["nt", "application/n-triples"], ["cjs", "application/node"], ["bin", "application/octet-stream"], ["bpk", "application/octet-stream"], ["buffer", "application/octet-stream"], ["deb", "application/octet-stream"], ["deploy", "application/octet-stream"], ["dist", "application/octet-stream"], ["distz", "application/octet-stream"], ["dll", "application/octet-stream"], ["dmg", "application/octet-stream"], ["dms", "application/octet-stream"], ["dump", "application/octet-stream"], ["elc", "application/octet-stream"], ["exe", "application/octet-stream"], ["img", "application/octet-stream"], ["iso", "application/octet-stream"], ["lrf", "application/octet-stream"], ["mar", "application/octet-stream"], ["msi", "application/octet-stream"], ["msm", "application/octet-stream"], ["msp", "application/octet-stream"], ["pkg", "application/octet-stream"], ["so", "application/octet-stream"], ["oda", "application/oda"], ["opf", "application/oebps-package+xml"], ["ogx", "application/ogg"], ["omdoc", "application/omdoc+xml"], ["onepkg", "application/onenote"], ["onetmp", "application/onenote"], ["onetoc", "application/onenote"], ["onetoc2", "application/onenote"], ["oxps", "application/oxps"], ["relo", "application/p2p-overlay+xml"], ["xer", "application/patch-ops-error+xml"], ["pdf", "application/pdf"], ["pgp", "application/pgp-encrypted"], ["asc", "application/pgp-signature"], ["sig", "application/pgp-signature"], ["prf", "application/pics-rules"], ["p10", "application/pkcs10"], ["p7c", "application/pkcs7-mime"], ["p7m", "application/pkcs7-mime"], ["p7s", "application/pkcs7-signature"], ["p8", "application/pkcs8"], ["ac", "application/pkix-attr-cert"], ["cer", "application/pkix-cert"], ["crl", "application/pkix-crl"], ["pkipath", "application/pkix-pkipath"], ["pki", "application/pkixcmp"], ["pls", "application/pls+xml"], ["ai", "application/postscript"], ["eps", "application/postscript"], ["ps", "application/postscript"], ["provx", "application/provenance+xml"], ["pskcxml", "application/pskc+xml"], ["raml", "application/raml+yaml"], ["owl", "application/rdf+xml"], ["rdf", "application/rdf+xml"], ["rif", "application/reginfo+xml"], ["rnc", "application/relax-ng-compact-syntax"], ["rl", "application/resource-lists+xml"], ["rld", "application/resource-lists-diff+xml"], ["rs", "application/rls-services+xml"], ["rapd", "application/route-apd+xml"], ["sls", "application/route-s-tsid+xml"], ["rusd", "application/route-usd+xml"], ["gbr", "application/rpki-ghostbusters"], ["mft", "application/rpki-manifest"], ["roa", "application/rpki-roa"], ["rsd", "application/rsd+xml"], ["rss", "application/rss+xml"], ["rtf", "application/rtf"], ["sbml", "application/sbml+xml"], ["scq", "application/scvp-cv-request"], ["scs", "application/scvp-cv-response"], ["spq", "application/scvp-vp-request"], ["spp", "application/scvp-vp-response"], ["sdp", "application/sdp"], ["senmlx", "application/senml+xml"], ["sensmlx", "application/sensml+xml"], ["setpay", "application/set-payment-initiation"], ["setreg", "application/set-registration-initiation"], ["shf", "application/shf+xml"], ["sieve", "application/sieve"], ["siv", "application/sieve"], ["smi", "application/smil+xml"], ["smil", "application/smil+xml"], ["rq", "application/sparql-query"], ["srx", "application/sparql-results+xml"], ["gram", "application/srgs"], ["grxml", "application/srgs+xml"], ["sru", "application/sru+xml"], ["ssdl", "application/ssdl+xml"], ["ssml", "application/ssml+xml"], ["swidtag", "application/swid+xml"], ["tei", "application/tei+xml"], ["teicorpus", "application/tei+xml"], ["tfi", "application/thraud+xml"], ["tsd", "application/timestamped-data"], ["toml", "application/toml"], ["trig", "application/trig"], ["ttml", "application/ttml+xml"], ["ubj", "application/ubjson"], ["rsheet", "application/urc-ressheet+xml"], ["td", "application/urc-targetdesc+xml"], ["vxml", "application/voicexml+xml"], ["wasm", "application/wasm"], ["wgt", "application/widget"], ["hlp", "application/winhlp"], ["wsdl", "application/wsdl+xml"], ["wspolicy", "application/wspolicy+xml"], ["xaml", "application/xaml+xml"], ["xav", "application/xcap-att+xml"], ["xca", "application/xcap-caps+xml"], ["xdf", "application/xcap-diff+xml"], ["xel", "application/xcap-el+xml"], ["xns", "application/xcap-ns+xml"], ["xenc", "application/xenc+xml"], ["xht", "application/xhtml+xml"], ["xhtml", "application/xhtml+xml"], ["xlf", "application/xliff+xml"], ["rng", "application/xml"], ["xml", "application/xml"], ["xsd", "application/xml"], ["xsl", "application/xml"], ["dtd", "application/xml-dtd"], ["xop", "application/xop+xml"], ["xpl", "application/xproc+xml"], ["*xsl", "application/xslt+xml"], ["xslt", "application/xslt+xml"], ["xspf", "application/xspf+xml"], ["mxml", "application/xv+xml"], ["xhvml", "application/xv+xml"], ["xvm", "application/xv+xml"], ["xvml", "application/xv+xml"], ["yang", "application/yang"], ["yin", "application/yin+xml"], ["zip", "application/zip"], ["*3gpp", "audio/3gpp"], ["adp", "audio/adpcm"], ["amr", "audio/amr"], ["au", "audio/basic"], ["snd", "audio/basic"], ["kar", "audio/midi"], ["mid", "audio/midi"], ["midi", "audio/midi"], ["rmi", "audio/midi"], ["mxmf", "audio/mobile-xmf"], ["*mp3", "audio/mp3"], ["m4a", "audio/mp4"], ["mp4a", "audio/mp4"], ["m2a", "audio/mpeg"], ["m3a", "audio/mpeg"], ["mp2", "audio/mpeg"], ["mp2a", "audio/mpeg"], ["mp3", "audio/mpeg"], ["mpga", "audio/mpeg"], ["oga", "audio/ogg"], ["ogg", "audio/ogg"], ["opus", "audio/ogg"], ["spx", "audio/ogg"], ["s3m", "audio/s3m"], ["sil", "audio/silk"], ["wav", "audio/wav"], ["*wav", "audio/wave"], ["weba", "audio/webm"], ["xm", "audio/xm"], ["ttc", "font/collection"], ["otf", "font/otf"], ["ttf", "font/ttf"], ["woff", "font/woff"], ["woff2", "font/woff2"], ["exr", "image/aces"], ["apng", "image/apng"], ["avif", "image/avif"], ["bmp", "image/bmp"], ["cgm", "image/cgm"], ["drle", "image/dicom-rle"], ["emf", "image/emf"], ["fits", "image/fits"], ["g3", "image/g3fax"], ["gif", "image/gif"], ["heic", "image/heic"], ["heics", "image/heic-sequence"], ["heif", "image/heif"], ["heifs", "image/heif-sequence"], ["hej2", "image/hej2k"], ["hsj2", "image/hsj2"], ["ief", "image/ief"], ["jls", "image/jls"], ["jp2", "image/jp2"], ["jpg2", "image/jp2"], ["jpe", "image/jpeg"], ["jpeg", "image/jpeg"], ["jpg", "image/jpeg"], ["jph", "image/jph"], ["jhc", "image/jphc"], ["jpm", "image/jpm"], ["jpf", "image/jpx"], ["jpx", "image/jpx"], ["jxr", "image/jxr"], ["jxra", "image/jxra"], ["jxrs", "image/jxrs"], ["jxs", "image/jxs"], ["jxsc", "image/jxsc"], ["jxsi", "image/jxsi"], ["jxss", "image/jxss"], ["ktx", "image/ktx"], ["ktx2", "image/ktx2"], ["png", "image/png"], ["sgi", "image/sgi"], ["svg", "image/svg+xml"], ["svgz", "image/svg+xml"], ["t38", "image/t38"], ["tif", "image/tiff"], ["tiff", "image/tiff"], ["tfx", "image/tiff-fx"], ["webp", "image/webp"], ["wmf", "image/wmf"], ["disposition-notification", "message/disposition-notification"], ["u8msg", "message/global"], ["u8dsn", "message/global-delivery-status"], ["u8mdn", "message/global-disposition-notification"], ["u8hdr", "message/global-headers"], ["eml", "message/rfc822"], ["mime", "message/rfc822"], ["3mf", "model/3mf"], ["gltf", "model/gltf+json"], ["glb", "model/gltf-binary"], ["iges", "model/iges"], ["igs", "model/iges"], ["mesh", "model/mesh"], ["msh", "model/mesh"], ["silo", "model/mesh"], ["mtl", "model/mtl"], ["obj", "model/obj"], ["stpx", "model/step+xml"], ["stpz", "model/step+zip"], ["stpxz", "model/step-xml+zip"], ["stl", "model/stl"], ["vrml", "model/vrml"], ["wrl", "model/vrml"], ["*x3db", "model/x3d+binary"], ["x3dbz", "model/x3d+binary"], ["x3db", "model/x3d+fastinfoset"], ["*x3dv", "model/x3d+vrml"], ["x3dvz", "model/x3d+vrml"], ["x3d", "model/x3d+xml"], ["x3dz", "model/x3d+xml"], ["x3dv", "model/x3d-vrml"], ["appcache", "text/cache-manifest"], ["manifest", "text/cache-manifest"], ["ics", "text/calendar"], ["ifb", "text/calendar"], ["coffee", "text/coffeescript"], ["litcoffee", "text/coffeescript"], ["css", "text/css"], ["csv", "text/csv"], ["htm", "text/html"], ["html", "text/html"], ["shtml", "text/html"], ["jade", "text/jade"], ["jsx", "text/jsx"], ["less", "text/less"], ["markdown", "text/markdown"], ["md", "text/markdown"], ["mml", "text/mathml"], ["mdx", "text/mdx"], ["n3", "text/n3"], ["conf", "text/plain"], ["def", "text/plain"], ["in", "text/plain"], ["ini", "text/plain"], ["list", "text/plain"], ["log", "text/plain"], ["text", "text/plain"], ["txt", "text/plain"], ["rtx", "text/richtext"], ["*rtf", "text/rtf"], ["sgm", "text/sgml"], ["sgml", "text/sgml"], ["shex", "text/shex"], ["slim", "text/slim"], ["slm", "text/slim"], ["spdx", "text/spdx"], ["styl", "text/stylus"], ["stylus", "text/stylus"], ["tsv", "text/tab-separated-values"], ["man", "text/troff"], ["me", "text/troff"], ["ms", "text/troff"], ["roff", "text/troff"], ["t", "text/troff"], ["tr", "text/troff"], ["ttl", "text/turtle"], ["uri", "text/uri-list"], ["uris", "text/uri-list"], ["urls", "text/uri-list"], ["vcard", "text/vcard"], ["vtt", "text/vtt"], ["*xml", "text/xml"], ["yaml", "text/yaml"], ["yml", "text/yaml"], ["3gp", "video/3gpp"], ["3gpp", "video/3gpp"], ["3g2", "video/3gpp2"], ["h261", "video/h261"], ["h263", "video/h263"], ["h264", "video/h264"], ["m4s", "video/iso.segment"], ["jpgv", "video/jpeg"], ["jpm", "video/jpm"], ["jpgm", "video/jpm"], ["mj2", "video/mj2"], ["mjp2", "video/mj2"], ["ts", "video/mp2t"], ["mp4", "video/mp4"], ["mp4v", "video/mp4"], ["mpg4", "video/mp4"], ["m1v", "video/mpeg"], ["m2v", "video/mpeg"], ["mpe", "video/mpeg"], ["mpeg", "video/mpeg"], ["mpg", "video/mpeg"], ["ogv", "video/ogg"], ["mov", "video/quicktime"], ["qt", "video/quicktime"], ["webm", "video/webm"]]);
  return mimeType;
}
var multimap = {};
var hasRequiredMultimap;
function requireMultimap() {
  if (hasRequiredMultimap) return multimap;
  hasRequiredMultimap = 1;
  Object.defineProperty(multimap, "__esModule", {
    value: true
  });
  multimap.MultiMap = void 0;
  class MultiMap {
    constructor() {
      this._map = void 0;
      this._map = /* @__PURE__ */ new Map();
    }
    set(key, value) {
      let values = this._map.get(key);
      if (!values) {
        values = [];
        this._map.set(key, values);
      }
      values.push(value);
    }
    get(key) {
      return this._map.get(key) || [];
    }
    has(key) {
      return this._map.has(key);
    }
    delete(key, value) {
      const values = this._map.get(key);
      if (!values) return;
      if (values.includes(value)) this._map.set(key, values.filter((v2) => value !== v2));
    }
    deleteAll(key) {
      this._map.delete(key);
    }
    hasValue(key, value) {
      const values = this._map.get(key);
      if (!values) return false;
      return values.includes(value);
    }
    get size() {
      return this._map.size;
    }
    [Symbol.iterator]() {
      return this._map[Symbol.iterator]();
    }
    keys() {
      return this._map.keys();
    }
    values() {
      const result = [];
      for (const key of this.keys()) result.push(...this.get(key));
      return result;
    }
    clear() {
      this._map.clear();
    }
  }
  multimap.MultiMap = MultiMap;
  return multimap;
}
var rtti = {};
var hasRequiredRtti;
function requireRtti() {
  if (hasRequiredRtti) return rtti;
  hasRequiredRtti = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isError = isError;
    exports.isObject = isObject;
    exports.isRegExp = isRegExp;
    Object.defineProperty(exports, "isString", {
      enumerable: true,
      get: function() {
        return _stringUtils.isString;
      }
    });
    var _stringUtils = requireStringUtils();
    function isRegExp(obj) {
      return obj instanceof RegExp || Object.prototype.toString.call(obj) === "[object RegExp]";
    }
    function isObject(obj) {
      return typeof obj === "object" && obj !== null;
    }
    function isError(obj) {
      var _Object$getPrototypeO;
      return obj instanceof Error || obj && ((_Object$getPrototypeO = Object.getPrototypeOf(obj)) === null || _Object$getPrototypeO === void 0 ? void 0 : _Object$getPrototypeO.name) === "Error";
    }
  })(rtti);
  return rtti;
}
var semaphore = {};
var hasRequiredSemaphore;
function requireSemaphore() {
  if (hasRequiredSemaphore) return semaphore;
  hasRequiredSemaphore = 1;
  Object.defineProperty(semaphore, "__esModule", {
    value: true
  });
  semaphore.Semaphore = void 0;
  var _manualPromise = requireManualPromise();
  class Semaphore {
    constructor(max) {
      this._max = void 0;
      this._acquired = 0;
      this._queue = [];
      this._max = max;
    }
    setMax(max) {
      this._max = max;
    }
    acquire() {
      const lock = new _manualPromise.ManualPromise();
      this._queue.push(lock);
      this._flush();
      return lock;
    }
    release() {
      --this._acquired;
      this._flush();
    }
    _flush() {
      while (this._acquired < this._max && this._queue.length) {
        ++this._acquired;
        this._queue.shift().resolve();
      }
    }
  }
  semaphore.Semaphore = Semaphore;
  return semaphore;
}
var timeoutRunner = {};
var hasRequiredTimeoutRunner;
function requireTimeoutRunner() {
  if (hasRequiredTimeoutRunner) return timeoutRunner;
  hasRequiredTimeoutRunner = 1;
  Object.defineProperty(timeoutRunner, "__esModule", {
    value: true
  });
  timeoutRunner.pollAgainstDeadline = pollAgainstDeadline;
  timeoutRunner.raceAgainstDeadline = raceAgainstDeadline;
  var _time = requireTime$1();
  async function raceAgainstDeadline(cb, deadline) {
    let timer;
    return Promise.race([cb().then((result) => {
      return {
        result,
        timedOut: false
      };
    }), new Promise((resolve2) => {
      const kMaxDeadline = 2147483647;
      const timeout = (deadline || kMaxDeadline) - (0, _time.monotonicTime)();
      timer = setTimeout(() => resolve2({
        timedOut: true
      }), timeout);
    })]).finally(() => {
      clearTimeout(timer);
    });
  }
  async function pollAgainstDeadline(callback, deadline, pollIntervals = [100, 250, 500, 1e3]) {
    var _pollIntervals$pop;
    const lastPollInterval = (_pollIntervals$pop = pollIntervals.pop()) !== null && _pollIntervals$pop !== void 0 ? _pollIntervals$pop : 1e3;
    let lastResult;
    const wrappedCallback = () => Promise.resolve().then(callback);
    while (true) {
      var _shift;
      const time2 = (0, _time.monotonicTime)();
      if (deadline && time2 >= deadline) break;
      const received = await raceAgainstDeadline(wrappedCallback, deadline);
      if (received.timedOut) break;
      lastResult = received.result.result;
      if (!received.result.continuePolling) return {
        result: lastResult,
        timedOut: false
      };
      const interval = (_shift = pollIntervals.shift()) !== null && _shift !== void 0 ? _shift : lastPollInterval;
      if (deadline && deadline <= (0, _time.monotonicTime)() + interval) break;
      await new Promise((x2) => setTimeout(x2, interval));
    }
    return {
      timedOut: true,
      result: lastResult
    };
  }
  return timeoutRunner;
}
var urlMatch = {};
var hasRequiredUrlMatch;
function requireUrlMatch() {
  if (hasRequiredUrlMatch) return urlMatch;
  hasRequiredUrlMatch = 1;
  Object.defineProperty(urlMatch, "__esModule", {
    value: true
  });
  urlMatch.constructURLBasedOnBaseURL = constructURLBasedOnBaseURL;
  urlMatch.globToRegex = globToRegex;
  urlMatch.urlMatches = urlMatches;
  urlMatch.urlMatchesEqual = urlMatchesEqual;
  var _stringUtils = requireStringUtils();
  const escapedChars = /* @__PURE__ */ new Set(["$", "^", "+", ".", "*", "(", ")", "|", "\\", "?", "{", "}", "[", "]"]);
  function globToRegex(glob) {
    const tokens = ["^"];
    let inGroup = false;
    for (let i = 0; i < glob.length; ++i) {
      const c2 = glob[i];
      if (c2 === "\\" && i + 1 < glob.length) {
        const char = glob[++i];
        tokens.push(escapedChars.has(char) ? "\\" + char : char);
        continue;
      }
      if (c2 === "*") {
        const beforeDeep = glob[i - 1];
        let starCount = 1;
        while (glob[i + 1] === "*") {
          starCount++;
          i++;
        }
        const afterDeep = glob[i + 1];
        const isDeep = starCount > 1 && (beforeDeep === "/" || beforeDeep === void 0) && (afterDeep === "/" || afterDeep === void 0);
        if (isDeep) {
          tokens.push("((?:[^/]*(?:/|$))*)");
          i++;
        } else {
          tokens.push("([^/]*)");
        }
        continue;
      }
      switch (c2) {
        case "?":
          tokens.push(".");
          break;
        case "[":
          tokens.push("[");
          break;
        case "]":
          tokens.push("]");
          break;
        case "{":
          inGroup = true;
          tokens.push("(");
          break;
        case "}":
          inGroup = false;
          tokens.push(")");
          break;
        case ",":
          if (inGroup) {
            tokens.push("|");
            break;
          }
          tokens.push("\\" + c2);
          break;
        default:
          tokens.push(escapedChars.has(c2) ? "\\" + c2 : c2);
      }
    }
    tokens.push("$");
    return new RegExp(tokens.join(""));
  }
  function isRegExp(obj) {
    return obj instanceof RegExp || Object.prototype.toString.call(obj) === "[object RegExp]";
  }
  function urlMatchesEqual(match1, match2) {
    if (isRegExp(match1) && isRegExp(match2)) return match1.source === match2.source && match1.flags === match2.flags;
    return match1 === match2;
  }
  function urlMatches(baseURL, urlString, match) {
    if (match === void 0 || match === "") return true;
    if ((0, _stringUtils.isString)(match) && !match.startsWith("*")) {
      if (baseURL && /^https?:\/\//.test(baseURL) && /^wss?:\/\//.test(urlString)) baseURL = baseURL.replace(/^http/, "ws");
      match = constructURLBasedOnBaseURL(baseURL, match);
    }
    if ((0, _stringUtils.isString)(match)) match = globToRegex(match);
    if (isRegExp(match)) return match.test(urlString);
    const url = parseURL(urlString);
    if (!url) return false;
    if (typeof match !== "function") throw new Error("url parameter should be string, RegExp or function");
    return match(url);
  }
  function parseURL(url) {
    try {
      return new URL(url);
    } catch (e2) {
      return null;
    }
  }
  function constructURLBasedOnBaseURL(baseURL, givenURL) {
    try {
      return new URL(givenURL, baseURL).toString();
    } catch (e2) {
      return givenURL;
    }
  }
  return urlMatch;
}
var comparators = {};
var compare = {};
var colorUtils = {};
var hasRequiredColorUtils;
function requireColorUtils() {
  if (hasRequiredColorUtils) return colorUtils;
  hasRequiredColorUtils = 1;
  Object.defineProperty(colorUtils, "__esModule", {
    value: true
  });
  colorUtils.blendWithWhite = blendWithWhite;
  colorUtils.colorDeltaE94 = colorDeltaE94;
  colorUtils.rgb2gray = rgb2gray;
  colorUtils.srgb2xyz = srgb2xyz;
  colorUtils.xyz2lab = xyz2lab;
  function blendWithWhite(c2, a) {
    return 255 + (c2 - 255) * a;
  }
  function rgb2gray(r2, g2, b) {
    return 77 * r2 + 150 * g2 + 29 * b + 128 >> 8;
  }
  function colorDeltaE94(rgb1, rgb2) {
    const [l1, a1, b1] = xyz2lab(srgb2xyz(rgb1));
    const [l2, a2, b2] = xyz2lab(srgb2xyz(rgb2));
    const deltaL = l1 - l2;
    const deltaA = a1 - a2;
    const deltaB = b1 - b2;
    const c1 = Math.sqrt(a1 ** 2 + b1 ** 2);
    const c2 = Math.sqrt(a2 ** 2 + b2 ** 2);
    const deltaC = c1 - c2;
    let deltaH = deltaA ** 2 + deltaB ** 2 - deltaC ** 2;
    deltaH = deltaH < 0 ? 0 : Math.sqrt(deltaH);
    const k1 = 0.045;
    const k2 = 0.015;
    const kL = 1;
    const kC = 1;
    const kH = 1;
    const sC = 1 + k1 * c1;
    const sH = 1 + k2 * c1;
    const sL = 1;
    return Math.sqrt((deltaL / sL / kL) ** 2 + (deltaC / sC / kC) ** 2 + (deltaH / sH / kH) ** 2);
  }
  function srgb2xyz(rgb) {
    let r2 = rgb[0] / 255;
    let g2 = rgb[1] / 255;
    let b = rgb[2] / 255;
    r2 = r2 > 0.04045 ? Math.pow((r2 + 0.055) / 1.055, 2.4) : r2 / 12.92;
    g2 = g2 > 0.04045 ? Math.pow((g2 + 0.055) / 1.055, 2.4) : g2 / 12.92;
    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
    return [r2 * 0.4124 + g2 * 0.3576 + b * 0.1805, r2 * 0.2126 + g2 * 0.7152 + b * 0.0722, r2 * 0.0193 + g2 * 0.1192 + b * 0.9505];
  }
  const sigma_pow2 = 6 * 6 / 29 / 29;
  const sigma_pow3 = 6 * 6 * 6 / 29 / 29 / 29;
  function xyz2lab(xyz) {
    const x2 = xyz[0] / 0.950489;
    const y2 = xyz[1];
    const z2 = xyz[2] / 1.08884;
    const fx = x2 > sigma_pow3 ? x2 ** (1 / 3) : x2 / 3 / sigma_pow2 + 4 / 29;
    const fy = y2 > sigma_pow3 ? y2 ** (1 / 3) : y2 / 3 / sigma_pow2 + 4 / 29;
    const fz = z2 > sigma_pow3 ? z2 ** (1 / 3) : z2 / 3 / sigma_pow2 + 4 / 29;
    const l = 116 * fy - 16;
    const a = 500 * (fx - fy);
    const b = 200 * (fy - fz);
    return [l, a, b];
  }
  return colorUtils;
}
var imageChannel = {};
var hasRequiredImageChannel;
function requireImageChannel() {
  if (hasRequiredImageChannel) return imageChannel;
  hasRequiredImageChannel = 1;
  Object.defineProperty(imageChannel, "__esModule", {
    value: true
  });
  imageChannel.ImageChannel = void 0;
  var _colorUtils = requireColorUtils();
  class ImageChannel {
    static intoRGB(width, height, data, options = {}) {
      const {
        paddingSize = 0,
        paddingColorOdd = [255, 0, 255],
        paddingColorEven = [0, 255, 0]
      } = options;
      const newWidth = width + 2 * paddingSize;
      const newHeight = height + 2 * paddingSize;
      const r2 = new Uint8Array(newWidth * newHeight);
      const g2 = new Uint8Array(newWidth * newHeight);
      const b = new Uint8Array(newWidth * newHeight);
      for (let y2 = 0; y2 < newHeight; ++y2) {
        for (let x2 = 0; x2 < newWidth; ++x2) {
          const index = y2 * newWidth + x2;
          if (y2 >= paddingSize && y2 < newHeight - paddingSize && x2 >= paddingSize && x2 < newWidth - paddingSize) {
            const offset = ((y2 - paddingSize) * width + (x2 - paddingSize)) * 4;
            const alpha = data[offset + 3] === 255 ? 1 : data[offset + 3] / 255;
            r2[index] = (0, _colorUtils.blendWithWhite)(data[offset], alpha);
            g2[index] = (0, _colorUtils.blendWithWhite)(data[offset + 1], alpha);
            b[index] = (0, _colorUtils.blendWithWhite)(data[offset + 2], alpha);
          } else {
            const color = (y2 + x2) % 2 === 0 ? paddingColorEven : paddingColorOdd;
            r2[index] = color[0];
            g2[index] = color[1];
            b[index] = color[2];
          }
        }
      }
      return [new ImageChannel(newWidth, newHeight, r2), new ImageChannel(newWidth, newHeight, g2), new ImageChannel(newWidth, newHeight, b)];
    }
    constructor(width, height, data) {
      this.data = void 0;
      this.width = void 0;
      this.height = void 0;
      this.data = data;
      this.width = width;
      this.height = height;
    }
    get(x2, y2) {
      return this.data[y2 * this.width + x2];
    }
    boundXY(x2, y2) {
      return [Math.min(Math.max(x2, 0), this.width - 1), Math.min(Math.max(y2, 0), this.height - 1)];
    }
  }
  imageChannel.ImageChannel = ImageChannel;
  return imageChannel;
}
var stats = {};
var hasRequiredStats;
function requireStats() {
  if (hasRequiredStats) return stats;
  hasRequiredStats = 1;
  Object.defineProperty(stats, "__esModule", {
    value: true
  });
  stats.FastStats = void 0;
  stats.ssim = ssim;
  const DYNAMIC_RANGE = 2 ** 8 - 1;
  function ssim(stats2, x1, y1, x2, y2) {
    const mean1 = stats2.meanC1(x1, y1, x2, y2);
    const mean2 = stats2.meanC2(x1, y1, x2, y2);
    const var1 = stats2.varianceC1(x1, y1, x2, y2);
    const var2 = stats2.varianceC2(x1, y1, x2, y2);
    const cov = stats2.covariance(x1, y1, x2, y2);
    const c1 = (0.01 * DYNAMIC_RANGE) ** 2;
    const c2 = (0.03 * DYNAMIC_RANGE) ** 2;
    return (2 * mean1 * mean2 + c1) * (2 * cov + c2) / (mean1 ** 2 + mean2 ** 2 + c1) / (var1 + var2 + c2);
  }
  class FastStats {
    constructor(c1, c2) {
      this.c1 = void 0;
      this.c2 = void 0;
      this._partialSumC1 = void 0;
      this._partialSumC2 = void 0;
      this._partialSumMult = void 0;
      this._partialSumSq1 = void 0;
      this._partialSumSq2 = void 0;
      this.c1 = c1;
      this.c2 = c2;
      const {
        width,
        height
      } = c1;
      this._partialSumC1 = new Array(width * height);
      this._partialSumC2 = new Array(width * height);
      this._partialSumSq1 = new Array(width * height);
      this._partialSumSq2 = new Array(width * height);
      this._partialSumMult = new Array(width * height);
      const recalc = (mx, idx, initial, x2, y2) => {
        mx[idx] = initial;
        if (y2 > 0) mx[idx] += mx[(y2 - 1) * width + x2];
        if (x2 > 0) mx[idx] += mx[y2 * width + x2 - 1];
        if (x2 > 0 && y2 > 0) mx[idx] -= mx[(y2 - 1) * width + x2 - 1];
      };
      for (let y2 = 0; y2 < height; ++y2) {
        for (let x2 = 0; x2 < width; ++x2) {
          const idx = y2 * width + x2;
          recalc(this._partialSumC1, idx, this.c1.data[idx], x2, y2);
          recalc(this._partialSumC2, idx, this.c2.data[idx], x2, y2);
          recalc(this._partialSumSq1, idx, this.c1.data[idx] * this.c1.data[idx], x2, y2);
          recalc(this._partialSumSq2, idx, this.c2.data[idx] * this.c2.data[idx], x2, y2);
          recalc(this._partialSumMult, idx, this.c1.data[idx] * this.c2.data[idx], x2, y2);
        }
      }
    }
    _sum(partialSum, x1, y1, x2, y2) {
      const width = this.c1.width;
      let result = partialSum[y2 * width + x2];
      if (y1 > 0) result -= partialSum[(y1 - 1) * width + x2];
      if (x1 > 0) result -= partialSum[y2 * width + x1 - 1];
      if (x1 > 0 && y1 > 0) result += partialSum[(y1 - 1) * width + x1 - 1];
      return result;
    }
    meanC1(x1, y1, x2, y2) {
      const N2 = (y2 - y1 + 1) * (x2 - x1 + 1);
      return this._sum(this._partialSumC1, x1, y1, x2, y2) / N2;
    }
    meanC2(x1, y1, x2, y2) {
      const N2 = (y2 - y1 + 1) * (x2 - x1 + 1);
      return this._sum(this._partialSumC2, x1, y1, x2, y2) / N2;
    }
    varianceC1(x1, y1, x2, y2) {
      const N2 = (y2 - y1 + 1) * (x2 - x1 + 1);
      return (this._sum(this._partialSumSq1, x1, y1, x2, y2) - this._sum(this._partialSumC1, x1, y1, x2, y2) ** 2 / N2) / N2;
    }
    varianceC2(x1, y1, x2, y2) {
      const N2 = (y2 - y1 + 1) * (x2 - x1 + 1);
      return (this._sum(this._partialSumSq2, x1, y1, x2, y2) - this._sum(this._partialSumC2, x1, y1, x2, y2) ** 2 / N2) / N2;
    }
    covariance(x1, y1, x2, y2) {
      const N2 = (y2 - y1 + 1) * (x2 - x1 + 1);
      return (this._sum(this._partialSumMult, x1, y1, x2, y2) - this._sum(this._partialSumC1, x1, y1, x2, y2) * this._sum(this._partialSumC2, x1, y1, x2, y2) / N2) / N2;
    }
  }
  stats.FastStats = FastStats;
  return stats;
}
var hasRequiredCompare;
function requireCompare() {
  if (hasRequiredCompare) return compare;
  hasRequiredCompare = 1;
  Object.defineProperty(compare, "__esModule", {
    value: true
  });
  compare.compare = compare$1;
  var _colorUtils = requireColorUtils();
  var _imageChannel = requireImageChannel();
  var _stats = requireStats();
  const SSIM_WINDOW_RADIUS = 15;
  const VARIANCE_WINDOW_RADIUS = 1;
  function drawPixel(width, data, x2, y2, r2, g2, b) {
    const idx = (y2 * width + x2) * 4;
    data[idx + 0] = r2;
    data[idx + 1] = g2;
    data[idx + 2] = b;
    data[idx + 3] = 255;
  }
  function compare$1(actual, expected, diff, width, height, options = {}) {
    const {
      maxColorDeltaE94 = 1
    } = options;
    const paddingSize = Math.max(VARIANCE_WINDOW_RADIUS, SSIM_WINDOW_RADIUS);
    const paddingColorEven = [255, 0, 255];
    const paddingColorOdd = [0, 255, 0];
    const [r1, g1, b1] = _imageChannel.ImageChannel.intoRGB(width, height, expected, {
      paddingSize,
      paddingColorEven,
      paddingColorOdd
    });
    const [r2, g2, b2] = _imageChannel.ImageChannel.intoRGB(width, height, actual, {
      paddingSize,
      paddingColorEven,
      paddingColorOdd
    });
    const noop = (x2, y2) => {
    };
    const drawRedPixel = diff ? (x2, y2) => drawPixel(width, diff, x2 - paddingSize, y2 - paddingSize, 255, 0, 0) : noop;
    const drawYellowPixel = diff ? (x2, y2) => drawPixel(width, diff, x2 - paddingSize, y2 - paddingSize, 255, 255, 0) : noop;
    const drawGrayPixel = diff ? (x2, y2) => {
      const gray = (0, _colorUtils.rgb2gray)(r1.get(x2, y2), g1.get(x2, y2), b1.get(x2, y2));
      const value = (0, _colorUtils.blendWithWhite)(gray, 0.1);
      drawPixel(width, diff, x2 - paddingSize, y2 - paddingSize, value, value, value);
    } : noop;
    let fastR, fastG, fastB;
    let diffCount = 0;
    for (let y2 = paddingSize; y2 < r1.height - paddingSize; ++y2) {
      for (let x2 = paddingSize; x2 < r1.width - paddingSize; ++x2) {
        if (r1.get(x2, y2) === r2.get(x2, y2) && g1.get(x2, y2) === g2.get(x2, y2) && b1.get(x2, y2) === b2.get(x2, y2)) {
          drawGrayPixel(x2, y2);
          continue;
        }
        const delta = (0, _colorUtils.colorDeltaE94)([r1.get(x2, y2), g1.get(x2, y2), b1.get(x2, y2)], [r2.get(x2, y2), g2.get(x2, y2), b2.get(x2, y2)]);
        if (delta <= maxColorDeltaE94) {
          drawGrayPixel(x2, y2);
          continue;
        }
        if (!fastR || !fastG || !fastB) {
          fastR = new _stats.FastStats(r1, r2);
          fastG = new _stats.FastStats(g1, g2);
          fastB = new _stats.FastStats(b1, b2);
        }
        const [varX1, varY1] = r1.boundXY(x2 - VARIANCE_WINDOW_RADIUS, y2 - VARIANCE_WINDOW_RADIUS);
        const [varX2, varY2] = r1.boundXY(x2 + VARIANCE_WINDOW_RADIUS, y2 + VARIANCE_WINDOW_RADIUS);
        const var1 = fastR.varianceC1(varX1, varY1, varX2, varY2) + fastG.varianceC1(varX1, varY1, varX2, varY2) + fastB.varianceC1(varX1, varY1, varX2, varY2);
        const var2 = fastR.varianceC2(varX1, varY1, varX2, varY2) + fastG.varianceC2(varX1, varY1, varX2, varY2) + fastB.varianceC2(varX1, varY1, varX2, varY2);
        if (var1 === 0 || var2 === 0) {
          drawRedPixel(x2, y2);
          ++diffCount;
          continue;
        }
        const [ssimX1, ssimY1] = r1.boundXY(x2 - SSIM_WINDOW_RADIUS, y2 - SSIM_WINDOW_RADIUS);
        const [ssimX2, ssimY2] = r1.boundXY(x2 + SSIM_WINDOW_RADIUS, y2 + SSIM_WINDOW_RADIUS);
        const ssimRGB = ((0, _stats.ssim)(fastR, ssimX1, ssimY1, ssimX2, ssimY2) + (0, _stats.ssim)(fastG, ssimX1, ssimY1, ssimX2, ssimY2) + (0, _stats.ssim)(fastB, ssimX1, ssimY1, ssimX2, ssimY2)) / 3;
        const isAntialiased = ssimRGB >= 0.99;
        if (isAntialiased) {
          drawYellowPixel(x2, y2);
        } else {
          drawRedPixel(x2, y2);
          ++diffCount;
        }
      }
    }
    return diffCount;
  }
  return compare;
}
var pixelmatch_1;
var hasRequiredPixelmatch;
function requirePixelmatch() {
  if (hasRequiredPixelmatch) return pixelmatch_1;
  hasRequiredPixelmatch = 1;
  pixelmatch_1 = pixelmatch;
  const defaultOptions = {
    threshold: 0.1,
    // matching threshold (0 to 1); smaller is more sensitive
    includeAA: false,
    // whether to skip anti-aliasing detection
    alpha: 0.1,
    // opacity of original image in diff output
    aaColor: [255, 255, 0],
    // color of anti-aliased pixels in diff output
    diffColor: [255, 0, 0],
    // color of different pixels in diff output
    diffColorAlt: null,
    // whether to detect dark on light differences between img1 and img2 and set an alternative color to differentiate between the two
    diffMask: false
    // draw the diff over a transparent background (a mask)
  };
  function pixelmatch(img1, img2, output2, width, height, options) {
    if (!isPixelData(img1) || !isPixelData(img2) || output2 && !isPixelData(output2))
      throw new Error("Image data: Uint8Array, Uint8ClampedArray or Buffer expected.");
    if (img1.length !== img2.length || output2 && output2.length !== img1.length)
      throw new Error("Image sizes do not match.");
    if (img1.length !== width * height * 4) throw new Error("Image data size does not match width/height.");
    options = Object.assign({}, defaultOptions, options);
    const len = width * height;
    const a32 = new Uint32Array(img1.buffer, img1.byteOffset, len);
    const b32 = new Uint32Array(img2.buffer, img2.byteOffset, len);
    let identical = true;
    for (let i = 0; i < len; i++) {
      if (a32[i] !== b32[i]) {
        identical = false;
        break;
      }
    }
    if (identical) {
      if (output2 && !options.diffMask) {
        for (let i = 0; i < len; i++) drawGrayPixel(img1, 4 * i, options.alpha, output2);
      }
      return 0;
    }
    const maxDelta = 35215 * options.threshold * options.threshold;
    let diff = 0;
    for (let y2 = 0; y2 < height; y2++) {
      for (let x2 = 0; x2 < width; x2++) {
        const pos = (y2 * width + x2) * 4;
        const delta = colorDelta(img1, img2, pos, pos);
        if (Math.abs(delta) > maxDelta) {
          if (!options.includeAA && (antialiased(img1, x2, y2, width, height, img2) || antialiased(img2, x2, y2, width, height, img1))) {
            if (output2 && !options.diffMask) drawPixel(output2, pos, ...options.aaColor);
          } else {
            if (output2) {
              drawPixel(output2, pos, ...delta < 0 && options.diffColorAlt || options.diffColor);
            }
            diff++;
          }
        } else if (output2) {
          if (!options.diffMask) drawGrayPixel(img1, pos, options.alpha, output2);
        }
      }
    }
    return diff;
  }
  function isPixelData(arr) {
    return ArrayBuffer.isView(arr) && arr.constructor.BYTES_PER_ELEMENT === 1;
  }
  function antialiased(img, x1, y1, width, height, img2) {
    const x0 = Math.max(x1 - 1, 0);
    const y0 = Math.max(y1 - 1, 0);
    const x2 = Math.min(x1 + 1, width - 1);
    const y2 = Math.min(y1 + 1, height - 1);
    const pos = (y1 * width + x1) * 4;
    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;
    let min = 0;
    let max = 0;
    let minX, minY, maxX, maxY;
    for (let x3 = x0; x3 <= x2; x3++) {
      for (let y3 = y0; y3 <= y2; y3++) {
        if (x3 === x1 && y3 === y1) continue;
        const delta = colorDelta(img, img, pos, (y3 * width + x3) * 4, true);
        if (delta === 0) {
          zeroes++;
          if (zeroes > 2) return false;
        } else if (delta < min) {
          min = delta;
          minX = x3;
          minY = y3;
        } else if (delta > max) {
          max = delta;
          maxX = x3;
          maxY = y3;
        }
      }
    }
    if (min === 0 || max === 0) return false;
    return hasManySiblings(img, minX, minY, width, height) && hasManySiblings(img2, minX, minY, width, height) || hasManySiblings(img, maxX, maxY, width, height) && hasManySiblings(img2, maxX, maxY, width, height);
  }
  function hasManySiblings(img, x1, y1, width, height) {
    const x0 = Math.max(x1 - 1, 0);
    const y0 = Math.max(y1 - 1, 0);
    const x2 = Math.min(x1 + 1, width - 1);
    const y2 = Math.min(y1 + 1, height - 1);
    const pos = (y1 * width + x1) * 4;
    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;
    for (let x3 = x0; x3 <= x2; x3++) {
      for (let y3 = y0; y3 <= y2; y3++) {
        if (x3 === x1 && y3 === y1) continue;
        const pos2 = (y3 * width + x3) * 4;
        if (img[pos] === img[pos2] && img[pos + 1] === img[pos2 + 1] && img[pos + 2] === img[pos2 + 2] && img[pos + 3] === img[pos2 + 3]) zeroes++;
        if (zeroes > 2) return true;
      }
    }
    return false;
  }
  function colorDelta(img1, img2, k2, m2, yOnly) {
    let r1 = img1[k2 + 0];
    let g1 = img1[k2 + 1];
    let b1 = img1[k2 + 2];
    let a1 = img1[k2 + 3];
    let r2 = img2[m2 + 0];
    let g2 = img2[m2 + 1];
    let b2 = img2[m2 + 2];
    let a2 = img2[m2 + 3];
    if (a1 === a2 && r1 === r2 && g1 === g2 && b1 === b2) return 0;
    if (a1 < 255) {
      a1 /= 255;
      r1 = blend(r1, a1);
      g1 = blend(g1, a1);
      b1 = blend(b1, a1);
    }
    if (a2 < 255) {
      a2 /= 255;
      r2 = blend(r2, a2);
      g2 = blend(g2, a2);
      b2 = blend(b2, a2);
    }
    const y1 = rgb2y(r1, g1, b1);
    const y2 = rgb2y(r2, g2, b2);
    const y3 = y1 - y2;
    if (yOnly) return y3;
    const i = rgb2i(r1, g1, b1) - rgb2i(r2, g2, b2);
    const q2 = rgb2q(r1, g1, b1) - rgb2q(r2, g2, b2);
    const delta = 0.5053 * y3 * y3 + 0.299 * i * i + 0.1957 * q2 * q2;
    return y1 > y2 ? -delta : delta;
  }
  function rgb2y(r2, g2, b) {
    return r2 * 0.29889531 + g2 * 0.58662247 + b * 0.11448223;
  }
  function rgb2i(r2, g2, b) {
    return r2 * 0.59597799 - g2 * 0.2741761 - b * 0.32180189;
  }
  function rgb2q(r2, g2, b) {
    return r2 * 0.21147017 - g2 * 0.52261711 + b * 0.31114694;
  }
  function blend(c2, a) {
    return 255 + (c2 - 255) * a;
  }
  function drawPixel(output2, pos, r2, g2, b) {
    output2[pos + 0] = r2;
    output2[pos + 1] = g2;
    output2[pos + 2] = b;
    output2[pos + 3] = 255;
  }
  function drawGrayPixel(img, i, alpha, output2) {
    const r2 = img[i + 0];
    const g2 = img[i + 1];
    const b = img[i + 2];
    const val = blend(rgb2y(r2, g2, b), alpha * img[i + 3] / 255);
    drawPixel(output2, i, val, val, val);
  }
  return pixelmatch_1;
}
var hasRequiredComparators;
function requireComparators() {
  if (hasRequiredComparators) return comparators;
  hasRequiredComparators = 1;
  Object.defineProperty(comparators, "__esModule", {
    value: true
  });
  comparators.compareBuffersOrStrings = compareBuffersOrStrings;
  comparators.getComparator = getComparator;
  var _compare = requireCompare();
  var _pixelmatch = _interopRequireDefault(requirePixelmatch());
  var _utilsBundle = requireUtilsBundle();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  function getComparator(mimeType2) {
    if (mimeType2 === "image/png") return compareImages.bind(null, "image/png");
    if (mimeType2 === "image/jpeg") return compareImages.bind(null, "image/jpeg");
    if (mimeType2 === "text/plain") return compareText;
    return compareBuffersOrStrings;
  }
  const JPEG_JS_MAX_BUFFER_SIZE_IN_MB = 5 * 1024;
  function compareBuffersOrStrings(actualBuffer, expectedBuffer) {
    if (typeof actualBuffer === "string") return compareText(actualBuffer, expectedBuffer);
    if (!actualBuffer || !(actualBuffer instanceof Buffer)) return {
      errorMessage: "Actual result should be a Buffer or a string."
    };
    if (Buffer.compare(actualBuffer, expectedBuffer)) return {
      errorMessage: "Buffers differ"
    };
    return null;
  }
  function compareImages(mimeType2, actualBuffer, expectedBuffer, options = {}) {
    var _options$comparator, _ref;
    if (!actualBuffer || !(actualBuffer instanceof Buffer)) return {
      errorMessage: "Actual result should be a Buffer."
    };
    validateBuffer(expectedBuffer, mimeType2);
    let actual = mimeType2 === "image/png" ? _utilsBundle.PNG.sync.read(actualBuffer) : _utilsBundle.jpegjs.decode(actualBuffer, {
      maxMemoryUsageInMB: JPEG_JS_MAX_BUFFER_SIZE_IN_MB
    });
    let expected = mimeType2 === "image/png" ? _utilsBundle.PNG.sync.read(expectedBuffer) : _utilsBundle.jpegjs.decode(expectedBuffer, {
      maxMemoryUsageInMB: JPEG_JS_MAX_BUFFER_SIZE_IN_MB
    });
    const size = {
      width: Math.max(expected.width, actual.width),
      height: Math.max(expected.height, actual.height)
    };
    let sizesMismatchError = "";
    if (expected.width !== actual.width || expected.height !== actual.height) {
      sizesMismatchError = `Expected an image ${expected.width}px by ${expected.height}px, received ${actual.width}px by ${actual.height}px. `;
      actual = resizeImage(actual, size);
      expected = resizeImage(expected, size);
    }
    const diff = new _utilsBundle.PNG({
      width: size.width,
      height: size.height
    });
    let count;
    if (options.comparator === "ssim-cie94") {
      count = (0, _compare.compare)(expected.data, actual.data, diff.data, size.width, size.height, {
        // All ΔE* formulae are originally designed to have the difference of 1.0 stand for a "just noticeable difference" (JND).
        // See https://en.wikipedia.org/wiki/Color_difference#CIELAB_%CE%94E*
        maxColorDeltaE94: 1
      });
    } else if (((_options$comparator = options.comparator) !== null && _options$comparator !== void 0 ? _options$comparator : "pixelmatch") === "pixelmatch") {
      var _options$threshold;
      count = (0, _pixelmatch.default)(expected.data, actual.data, diff.data, size.width, size.height, {
        threshold: (_options$threshold = options.threshold) !== null && _options$threshold !== void 0 ? _options$threshold : 0.2
      });
    } else {
      throw new Error(`Configuration specifies unknown comparator "${options.comparator}"`);
    }
    const maxDiffPixels1 = options.maxDiffPixels;
    const maxDiffPixels2 = options.maxDiffPixelRatio !== void 0 ? expected.width * expected.height * options.maxDiffPixelRatio : void 0;
    let maxDiffPixels;
    if (maxDiffPixels1 !== void 0 && maxDiffPixels2 !== void 0) maxDiffPixels = Math.min(maxDiffPixels1, maxDiffPixels2);
    else maxDiffPixels = (_ref = maxDiffPixels1 !== null && maxDiffPixels1 !== void 0 ? maxDiffPixels1 : maxDiffPixels2) !== null && _ref !== void 0 ? _ref : 0;
    const ratio = Math.ceil(count / (expected.width * expected.height) * 100) / 100;
    const pixelsMismatchError = count > maxDiffPixels ? `${count} pixels (ratio ${ratio.toFixed(2)} of all image pixels) are different.` : "";
    if (pixelsMismatchError || sizesMismatchError) return {
      errorMessage: sizesMismatchError + pixelsMismatchError,
      diff: _utilsBundle.PNG.sync.write(diff)
    };
    return null;
  }
  function validateBuffer(buffer2, mimeType2) {
    if (mimeType2 === "image/png") {
      const pngMagicNumber = [137, 80, 78, 71, 13, 10, 26, 10];
      if (buffer2.length < pngMagicNumber.length || !pngMagicNumber.every((byte, index) => buffer2[index] === byte)) throw new Error("could not decode image as PNG.");
    } else if (mimeType2 === "image/jpeg") {
      const jpegMagicNumber = [255, 216];
      if (buffer2.length < jpegMagicNumber.length || !jpegMagicNumber.every((byte, index) => buffer2[index] === byte)) throw new Error("could not decode image as JPEG.");
    }
  }
  function compareText(actual, expectedBuffer) {
    if (typeof actual !== "string") return {
      errorMessage: "Actual result should be a string"
    };
    let expected = expectedBuffer.toString("utf-8");
    if (expected === actual) return null;
    if (!actual.endsWith("\n")) actual += "\n";
    if (!expected.endsWith("\n")) expected += "\n";
    const lines = _utilsBundle.diff.createPatch("file", expected, actual, void 0, void 0, {
      context: 5
    }).split("\n");
    const coloredLines = lines.slice(4).map((line) => {
      if (line.startsWith("-")) return _utilsBundle.colors.red(line);
      if (line.startsWith("+")) return _utilsBundle.colors.green(line);
      if (line.startsWith("@@")) return _utilsBundle.colors.dim(line);
      return line;
    });
    const errorMessage = coloredLines.join("\n");
    return {
      errorMessage
    };
  }
  function resizeImage(image, size) {
    if (image.width === size.width && image.height === size.height) return image;
    const buffer2 = new Uint8Array(size.width * size.height * 4);
    for (let y2 = 0; y2 < size.height; y2++) {
      for (let x2 = 0; x2 < size.width; x2++) {
        const to = (y2 * size.width + x2) * 4;
        if (y2 < image.height && x2 < image.width) {
          const from = (y2 * image.width + x2) * 4;
          buffer2[to] = image.data[from];
          buffer2[to + 1] = image.data[from + 1];
          buffer2[to + 2] = image.data[from + 2];
          buffer2[to + 3] = image.data[from + 3];
        } else {
          buffer2[to] = 0;
          buffer2[to + 1] = 0;
          buffer2[to + 2] = 0;
          buffer2[to + 3] = 0;
        }
      }
    }
    return {
      data: Buffer.from(buffer2),
      width: size.width,
      height: size.height
    };
  }
  return comparators;
}
var debug$1 = {};
var env = {};
var hasRequiredEnv;
function requireEnv() {
  if (hasRequiredEnv) return env;
  hasRequiredEnv = 1;
  Object.defineProperty(env, "__esModule", {
    value: true
  });
  env.getAsBooleanFromENV = getAsBooleanFromENV;
  env.getFromENV = getFromENV;
  env.getPackageManager = getPackageManager;
  env.getPackageManagerExecCommand = getPackageManagerExecCommand;
  env.isLikelyNpxGlobal = isLikelyNpxGlobal;
  function getFromENV(name) {
    let value = process.env[name];
    value = value === void 0 ? process.env[`npm_config_${name.toLowerCase()}`] : value;
    value = value === void 0 ? process.env[`npm_package_config_${name.toLowerCase()}`] : value;
    return value;
  }
  function getAsBooleanFromENV(name, defaultValue) {
    const value = getFromENV(name);
    if (value === "false" || value === "0") return false;
    if (value) return true;
    return !!defaultValue;
  }
  function getPackageManager() {
    const env2 = process.env.npm_config_user_agent || "";
    if (env2.includes("yarn")) return "yarn";
    if (env2.includes("pnpm")) return "pnpm";
    return "npm";
  }
  function getPackageManagerExecCommand() {
    const packageManager = getPackageManager();
    if (packageManager === "yarn") return "yarn";
    if (packageManager === "pnpm") return "pnpm exec";
    return "npx";
  }
  function isLikelyNpxGlobal() {
    return process.argv.length >= 2 && process.argv[1].includes("_npx");
  }
  return env;
}
var hasRequiredDebug$1;
function requireDebug$1() {
  if (hasRequiredDebug$1) return debug$1;
  hasRequiredDebug$1 = 1;
  Object.defineProperty(debug$1, "__esModule", {
    value: true
  });
  debug$1.debugMode = debugMode;
  debug$1.isUnderTest = isUnderTest;
  debug$1.setUnderTest = setUnderTest;
  var _env = requireEnv();
  const _debugMode = (0, _env.getFromENV)("PWDEBUG") || "";
  function debugMode() {
    if (_debugMode === "console") return "console";
    if (_debugMode === "0" || _debugMode === "false") return "";
    return _debugMode ? "inspector" : "";
  }
  let _isUnderTest = !!process.env.PWTEST_UNDER_TEST;
  function setUnderTest() {
    _isUnderTest = true;
  }
  function isUnderTest() {
    return _isUnderTest;
  }
  return debug$1;
}
var eventsHelper = {};
var hasRequiredEventsHelper;
function requireEventsHelper() {
  if (hasRequiredEventsHelper) return eventsHelper;
  hasRequiredEventsHelper = 1;
  Object.defineProperty(eventsHelper, "__esModule", {
    value: true
  });
  eventsHelper.eventsHelper = void 0;
  class EventsHelper {
    static addEventListener(emitter, eventName, handler) {
      emitter.on(eventName, handler);
      return {
        emitter,
        eventName,
        handler
      };
    }
    static removeEventListeners(listeners) {
      for (const listener of listeners) listener.emitter.removeListener(listener.eventName, listener.handler);
      listeners.splice(0, listeners.length);
    }
  }
  eventsHelper.eventsHelper = EventsHelper;
  return eventsHelper;
}
var expectUtils = {};
var hasRequiredExpectUtils;
function requireExpectUtils() {
  if (hasRequiredExpectUtils) return expectUtils;
  hasRequiredExpectUtils = 1;
  Object.defineProperty(expectUtils, "__esModule", {
    value: true
  });
  expectUtils.serializeExpectedTextValues = serializeExpectedTextValues;
  var _rtti = requireRtti();
  function serializeExpectedTextValues(items, options = {}) {
    return items.map((i) => ({
      string: (0, _rtti.isString)(i) ? i : void 0,
      regexSource: (0, _rtti.isRegExp)(i) ? i.source : void 0,
      regexFlags: (0, _rtti.isRegExp)(i) ? i.flags : void 0,
      matchSubstring: options.matchSubstring,
      ignoreCase: options.ignoreCase,
      normalizeWhiteSpace: options.normalizeWhiteSpace
    }));
  }
  return expectUtils;
}
var httpServer = {};
var network$2 = {};
const __viteBrowserExternal = {};
const __viteBrowserExternal$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({ __proto__: null, default: __viteBrowserExternal }, Symbol.toStringTag, { value: "Module" }));
const require$$1 = /* @__PURE__ */ getAugmentedNamespace(__viteBrowserExternal$1);
var hasRequiredNetwork$2;
function requireNetwork$2() {
  if (hasRequiredNetwork$2) return network$2;
  hasRequiredNetwork$2 = 1;
  Object.defineProperty(network$2, "__esModule", {
    value: true
  });
  network$2.NET_DEFAULT_TIMEOUT = void 0;
  network$2.createHttp2Server = createHttp2Server;
  network$2.createHttpServer = createHttpServer;
  network$2.createHttpsServer = createHttpsServer;
  network$2.fetchData = fetchData;
  network$2.httpRequest = httpRequest;
  network$2.isURLAvailable = isURLAvailable;
  var _http = _interopRequireDefault(require$$19);
  var _http2 = _interopRequireDefault(require$$1);
  var _https = _interopRequireDefault(require$$2);
  var _url = _interopRequireDefault(require$$6);
  var _utilsBundle = requireUtilsBundle();
  var _happyEyeballs = requireHappyEyeballs();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  const NET_DEFAULT_TIMEOUT = network$2.NET_DEFAULT_TIMEOUT = 3e4;
  function httpRequest(params, onResponse, onError) {
    var _params$timeout;
    const parsedUrl = _url.default.parse(params.url);
    let options = {
      ...parsedUrl,
      agent: parsedUrl.protocol === "https:" ? _happyEyeballs.httpsHappyEyeballsAgent : _happyEyeballs.httpHappyEyeballsAgent,
      method: params.method || "GET",
      headers: params.headers
    };
    if (params.rejectUnauthorized !== void 0) options.rejectUnauthorized = params.rejectUnauthorized;
    const timeout = (_params$timeout = params.timeout) !== null && _params$timeout !== void 0 ? _params$timeout : NET_DEFAULT_TIMEOUT;
    const proxyURL = (0, _utilsBundle.getProxyForUrl)(params.url);
    if (proxyURL) {
      const parsedProxyURL = _url.default.parse(proxyURL);
      if (params.url.startsWith("http:")) {
        options = {
          path: parsedUrl.href,
          host: parsedProxyURL.hostname,
          port: parsedProxyURL.port,
          headers: options.headers,
          method: options.method
        };
      } else {
        parsedProxyURL.secureProxy = parsedProxyURL.protocol === "https:";
        options.agent = new _utilsBundle.HttpsProxyAgent(parsedProxyURL);
        options.rejectUnauthorized = false;
      }
    }
    const requestCallback = (res) => {
      const statusCode = res.statusCode || 0;
      if (statusCode >= 300 && statusCode < 400 && res.headers.location) httpRequest({
        ...params,
        url: new URL(res.headers.location, params.url).toString()
      }, onResponse, onError);
      else onResponse(res);
    };
    const request = options.protocol === "https:" ? _https.default.request(options, requestCallback) : _http.default.request(options, requestCallback);
    request.on("error", onError);
    if (timeout !== void 0) {
      const rejectOnTimeout = () => {
        onError(new Error(`Request to ${params.url} timed out after ${timeout}ms`));
        request.abort();
      };
      if (timeout <= 0) {
        rejectOnTimeout();
        return;
      }
      request.setTimeout(timeout, rejectOnTimeout);
    }
    request.end(params.data);
  }
  function fetchData(params, onError) {
    return new Promise((resolve2, reject) => {
      httpRequest(params, async (response) => {
        if (response.statusCode !== 200) {
          const error = onError ? await onError(params, response) : new Error(`fetch failed: server returned code ${response.statusCode}. URL: ${params.url}`);
          reject(error);
          return;
        }
        let body = "";
        response.on("data", (chunk) => body += chunk);
        response.on("error", (error) => reject(error));
        response.on("end", () => resolve2(body));
      }, reject);
    });
  }
  function createHttpServer(...args) {
    const server2 = _http.default.createServer(...args);
    decorateServer(server2);
    return server2;
  }
  function createHttpsServer(...args) {
    const server2 = _https.default.createServer(...args);
    decorateServer(server2);
    return server2;
  }
  function createHttp2Server(...args) {
    const server2 = _http2.default.createSecureServer(...args);
    decorateServer(server2);
    return server2;
  }
  async function isURLAvailable(url, ignoreHTTPSErrors, onLog, onStdErr) {
    let statusCode = await httpStatusCode(url, ignoreHTTPSErrors, onLog, onStdErr);
    if (statusCode === 404 && url.pathname === "/") {
      const indexUrl = new URL(url);
      indexUrl.pathname = "/index.html";
      statusCode = await httpStatusCode(indexUrl, ignoreHTTPSErrors, onLog, onStdErr);
    }
    return statusCode >= 200 && statusCode < 404;
  }
  async function httpStatusCode(url, ignoreHTTPSErrors, onLog, onStdErr) {
    return new Promise((resolve2) => {
      onLog === null || onLog === void 0 || onLog(`HTTP GET: ${url}`);
      httpRequest({
        url: url.toString(),
        headers: {
          Accept: "*/*"
        },
        rejectUnauthorized: !ignoreHTTPSErrors
      }, (res) => {
        var _res$statusCode;
        res.resume();
        const statusCode = (_res$statusCode = res.statusCode) !== null && _res$statusCode !== void 0 ? _res$statusCode : 0;
        onLog === null || onLog === void 0 || onLog(`HTTP Status: ${statusCode}`);
        resolve2(statusCode);
      }, (error) => {
        if (error.code === "DEPTH_ZERO_SELF_SIGNED_CERT") onStdErr === null || onStdErr === void 0 || onStdErr(`[WebServer] Self-signed certificate detected. Try adding ignoreHTTPSErrors: true to config.webServer.`);
        onLog === null || onLog === void 0 || onLog(`Error while checking if ${url} is available: ${error.message}`);
        resolve2(0);
      });
    });
  }
  function decorateServer(server2) {
    const sockets = /* @__PURE__ */ new Set();
    server2.on("connection", (socket) => {
      sockets.add(socket);
      socket.once("close", () => sockets.delete(socket));
    });
    const close = server2.close;
    server2.close = (callback) => {
      for (const socket of sockets) socket.destroy();
      sockets.clear();
      return close.call(server2, callback);
    };
  }
  return network$2;
}
var hasRequiredHttpServer;
function requireHttpServer() {
  if (hasRequiredHttpServer) return httpServer;
  hasRequiredHttpServer = 1;
  Object.defineProperty(httpServer, "__esModule", {
    value: true
  });
  httpServer.HttpServer = void 0;
  var _fs = _interopRequireDefault(require$$0$2);
  var _path2 = _interopRequireDefault(require$$1$1);
  var _utilsBundle = requireUtilsBundle();
  var _crypto = requireCrypto();
  var _assert = requireAssert$1();
  var _manualPromise = requireManualPromise();
  var _network = requireNetwork$2();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  class HttpServer {
    constructor() {
      this._server = void 0;
      this._urlPrefixPrecise = "";
      this._urlPrefixHumanReadable = "";
      this._port = 0;
      this._started = false;
      this._routes = [];
      this._wsGuid = void 0;
      this._server = (0, _network.createHttpServer)(this._onRequest.bind(this));
    }
    server() {
      return this._server;
    }
    routePrefix(prefix, handler) {
      this._routes.push({
        prefix,
        handler
      });
    }
    routePath(path, handler) {
      this._routes.push({
        exact: path,
        handler
      });
    }
    port() {
      return this._port;
    }
    async _tryStart(port, host) {
      const errorPromise = new _manualPromise.ManualPromise();
      const errorListener = (error) => errorPromise.reject(error);
      this._server.on("error", errorListener);
      try {
        this._server.listen(port, host);
        await Promise.race([new Promise((cb) => this._server.once("listening", cb)), errorPromise]);
      } finally {
        this._server.removeListener("error", errorListener);
      }
    }
    createWebSocket(transport2, guid) {
      (0, _assert.assert)(!this._wsGuid, "can only create one main websocket transport per server");
      this._wsGuid = guid || (0, _crypto.createGuid)();
      const wss = new _utilsBundle.wsServer({
        server: this._server,
        path: "/" + this._wsGuid
      });
      wss.on("connection", (ws) => {
        transport2.onconnect();
        transport2.sendEvent = (method, params) => ws.send(JSON.stringify({
          method,
          params
        }));
        transport2.close = () => ws.close();
        ws.on("message", async (message) => {
          const {
            id,
            method,
            params
          } = JSON.parse(String(message));
          try {
            const result = await transport2.dispatch(method, params);
            ws.send(JSON.stringify({
              id,
              result
            }));
          } catch (e2) {
            ws.send(JSON.stringify({
              id,
              error: String(e2)
            }));
          }
        });
        ws.on("close", () => transport2.onclose());
        ws.on("error", () => transport2.onclose());
      });
    }
    wsGuid() {
      return this._wsGuid;
    }
    async start(options = {}) {
      (0, _assert.assert)(!this._started, "server already started");
      this._started = true;
      const host = options.host || "localhost";
      if (options.preferredPort) {
        try {
          await this._tryStart(options.preferredPort, host);
        } catch (e2) {
          if (!e2 || !e2.message || !e2.message.includes("EADDRINUSE")) throw e2;
          await this._tryStart(void 0, host);
        }
      } else {
        await this._tryStart(options.port, host);
      }
      const address = this._server.address();
      (0, _assert.assert)(address, "Could not bind server socket");
      if (typeof address === "string") {
        this._urlPrefixPrecise = address;
        this._urlPrefixHumanReadable = address;
      } else {
        this._port = address.port;
        const resolvedHost = address.family === "IPv4" ? address.address : `[${address.address}]`;
        this._urlPrefixPrecise = `http://${resolvedHost}:${address.port}`;
        this._urlPrefixHumanReadable = `http://${host}:${address.port}`;
      }
    }
    async stop() {
      await new Promise((cb) => this._server.close(cb));
    }
    urlPrefix(purpose) {
      return purpose === "human-readable" ? this._urlPrefixHumanReadable : this._urlPrefixPrecise;
    }
    serveFile(request, response, absoluteFilePath, headers2) {
      try {
        for (const [name, value] of Object.entries(headers2 || {})) response.setHeader(name, value);
        if (request.headers.range) this._serveRangeFile(request, response, absoluteFilePath);
        else this._serveFile(response, absoluteFilePath);
        return true;
      } catch (e2) {
        return false;
      }
    }
    _serveFile(response, absoluteFilePath) {
      const content = _fs.default.readFileSync(absoluteFilePath);
      response.statusCode = 200;
      const contentType = _utilsBundle.mime.getType(_path2.default.extname(absoluteFilePath)) || "application/octet-stream";
      response.setHeader("Content-Type", contentType);
      response.setHeader("Content-Length", content.byteLength);
      response.end(content);
    }
    _serveRangeFile(request, response, absoluteFilePath) {
      const range = request.headers.range;
      if (!range || !range.startsWith("bytes=") || range.includes(", ") || [...range].filter((char) => char === "-").length !== 1) {
        response.statusCode = 400;
        return response.end("Bad request");
      }
      const [startStr, endStr] = range.replace(/bytes=/, "").split("-");
      let start;
      let end;
      const size = _fs.default.statSync(absoluteFilePath).size;
      if (startStr !== "" && endStr === "") {
        start = +startStr;
        end = size - 1;
      } else if (startStr === "" && endStr !== "") {
        start = size - +endStr;
        end = size - 1;
      } else {
        start = +startStr;
        end = +endStr;
      }
      if (Number.isNaN(start) || Number.isNaN(end) || start >= size || end >= size || start > end) {
        response.writeHead(416, {
          "Content-Range": `bytes */${size}`
        });
        return response.end();
      }
      response.writeHead(206, {
        "Content-Range": `bytes ${start}-${end}/${size}`,
        "Accept-Ranges": "bytes",
        "Content-Length": end - start + 1,
        "Content-Type": _utilsBundle.mime.getType(_path2.default.extname(absoluteFilePath))
      });
      const readable = _fs.default.createReadStream(absoluteFilePath, {
        start,
        end
      });
      readable.pipe(response);
    }
    _onRequest(request, response) {
      if (request.method === "OPTIONS") {
        response.writeHead(200);
        response.end();
        return;
      }
      request.on("error", () => response.end());
      try {
        if (!request.url) {
          response.end();
          return;
        }
        const url = new URL("http://localhost" + request.url);
        for (const route of this._routes) {
          if (route.exact && url.pathname === route.exact && route.handler(request, response)) return;
          if (route.prefix && url.pathname.startsWith(route.prefix) && route.handler(request, response)) return;
        }
        response.statusCode = 404;
        response.end();
      } catch (e2) {
        response.end();
      }
    }
  }
  httpServer.HttpServer = HttpServer;
  return httpServer;
}
var nodePlatform = {};
var zones = {};
var hasRequiredZones;
function requireZones() {
  if (hasRequiredZones) return zones;
  hasRequiredZones = 1;
  Object.defineProperty(zones, "__esModule", {
    value: true
  });
  zones.Zone = void 0;
  zones.currentZone = currentZone;
  zones.emptyZone = void 0;
  var _async_hooks = require$$0$5;
  const asyncLocalStorage = new _async_hooks.AsyncLocalStorage();
  class Zone {
    constructor(asyncLocalStorage2, store) {
      this._asyncLocalStorage = void 0;
      this._data = void 0;
      this._asyncLocalStorage = asyncLocalStorage2;
      this._data = store;
    }
    with(type, data) {
      return new Zone(this._asyncLocalStorage, new Map(this._data).set(type, data));
    }
    without(type) {
      const data = type ? new Map(this._data) : /* @__PURE__ */ new Map();
      data.delete(type);
      return new Zone(this._asyncLocalStorage, data);
    }
    run(func) {
      return this._asyncLocalStorage.run(this, func);
    }
    data(type) {
      return this._data.get(type);
    }
  }
  zones.Zone = Zone;
  const emptyZone = zones.emptyZone = new Zone(asyncLocalStorage, /* @__PURE__ */ new Map());
  function currentZone() {
    var _asyncLocalStorage$ge;
    return (_asyncLocalStorage$ge = asyncLocalStorage.getStore()) !== null && _asyncLocalStorage$ge !== void 0 ? _asyncLocalStorage$ge : emptyZone;
  }
  return zones;
}
var hasRequiredNodePlatform;
function requireNodePlatform() {
  if (hasRequiredNodePlatform) return nodePlatform;
  hasRequiredNodePlatform = 1;
  Object.defineProperty(nodePlatform, "__esModule", {
    value: true
  });
  nodePlatform.nodePlatform = void 0;
  nodePlatform.setBoxedStackPrefixes = setBoxedStackPrefixes;
  var _crypto = _interopRequireDefault(require$$5);
  var _fs = _interopRequireDefault(require$$0$2);
  var _path2 = _interopRequireDefault(require$$1$1);
  var util = _interopRequireWildcard(require$$1$2);
  var _stream = require$$12;
  var _events = require$$0$4;
  var _utilsBundle = requireUtilsBundle();
  var _debugLogger = requireDebugLogger();
  var _zones = requireZones();
  var _debug = requireDebug$1();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  const pipelineAsync = util.promisify(_stream.pipeline);
  class NodeZone {
    constructor(zone) {
      this._zone = void 0;
      this._zone = zone;
    }
    push(data) {
      return new NodeZone(this._zone.with("apiZone", data));
    }
    pop() {
      return new NodeZone(this._zone.without("apiZone"));
    }
    run(func) {
      return this._zone.run(func);
    }
    data() {
      return this._zone.data("apiZone");
    }
  }
  let boxedStackPrefixes = [];
  function setBoxedStackPrefixes(prefixes) {
    boxedStackPrefixes = prefixes;
  }
  const coreDir = _path2.default.dirname(new URL("../../../package.json", import.meta.url).pathname);
  nodePlatform.nodePlatform = {
    name: "node",
    boxedStackPrefixes: () => {
      if (process.env.PWDEBUGIMPL) return [];
      return [coreDir, ...boxedStackPrefixes];
    },
    calculateSha1: (text) => {
      const sha1 = _crypto.default.createHash("sha1");
      sha1.update(text);
      return Promise.resolve(sha1.digest("hex"));
    },
    colors: _utilsBundle.colors,
    coreDir,
    createGuid: () => _crypto.default.randomBytes(16).toString("hex"),
    defaultMaxListeners: () => _events.EventEmitter.defaultMaxListeners,
    fs: () => _fs.default,
    env: process.env,
    inspectCustom: util.inspect.custom,
    isDebugMode: () => !!(0, _debug.debugMode)(),
    isJSDebuggerAttached: () => !!require$$1.url(),
    isLogEnabled(name) {
      return _debugLogger.debugLogger.isEnabled(name);
    },
    isUnderTest: () => (0, _debug.isUnderTest)(),
    log(name, message) {
      _debugLogger.debugLogger.log(name, message);
    },
    path: () => _path2.default,
    pathSeparator: _path2.default.sep,
    showInternalStackFrames: () => !!process.env.PWDEBUGIMPL,
    async streamFile(path, stream2) {
      await pipelineAsync(_fs.default.createReadStream(path), stream2);
    },
    streamReadable: (channel) => {
      return new ReadableStreamImpl(channel);
    },
    streamWritable: (channel) => {
      return new WritableStreamImpl(channel);
    },
    zones: {
      current: () => new NodeZone((0, _zones.currentZone)()),
      empty: new NodeZone(_zones.emptyZone)
    }
  };
  class ReadableStreamImpl extends _stream.Readable {
    constructor(channel) {
      super();
      this._channel = void 0;
      this._channel = channel;
    }
    async _read() {
      const result = await this._channel.read({
        size: 1024 * 1024
      });
      if (result.binary.byteLength) this.push(result.binary);
      else this.push(null);
    }
    _destroy(error, callback) {
      this._channel.close().catch((e2) => null);
      super._destroy(error, callback);
    }
  }
  class WritableStreamImpl extends _stream.Writable {
    constructor(channel) {
      super();
      this._channel = void 0;
      this._channel = channel;
    }
    async _write(chunk, encoding, callback) {
      const error = await this._channel.write({
        binary: typeof chunk === "string" ? Buffer.from(chunk) : chunk
      }).catch((e2) => e2);
      callback(error || null);
    }
    async _final(callback) {
      const error = await this._channel.close().catch((e2) => e2);
      callback(error || null);
    }
  }
  return nodePlatform;
}
var processLauncher = {};
var hasRequiredProcessLauncher;
function requireProcessLauncher() {
  if (hasRequiredProcessLauncher) return processLauncher;
  hasRequiredProcessLauncher = 1;
  Object.defineProperty(processLauncher, "__esModule", {
    value: true
  });
  processLauncher.envArrayToObject = envArrayToObject;
  processLauncher.gracefullyCloseAll = gracefullyCloseAll;
  processLauncher.gracefullyCloseSet = void 0;
  processLauncher.gracefullyProcessExitDoNotHang = gracefullyProcessExitDoNotHang;
  processLauncher.launchProcess = launchProcess;
  var childProcess = _interopRequireWildcard(require$$0$3);
  var _fs = _interopRequireDefault(require$$0$2);
  var readline = _interopRequireWildcard(require$$2$2);
  var _fileUtils = requireFileUtils$1();
  var _utils = requireUtils();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  const gracefullyCloseSet = processLauncher.gracefullyCloseSet = /* @__PURE__ */ new Set();
  const killSet = /* @__PURE__ */ new Set();
  async function gracefullyCloseAll() {
    await Promise.all(Array.from(gracefullyCloseSet).map((gracefullyClose) => gracefullyClose().catch((e2) => {
    })));
  }
  function gracefullyProcessExitDoNotHang(code) {
    setTimeout(() => process.exit(code), 3e4);
    gracefullyCloseAll().then(() => {
      process.exit(code);
    });
  }
  function exitHandler() {
    for (const kill of killSet) kill();
  }
  let sigintHandlerCalled = false;
  function sigintHandler() {
    const exitWithCode130 = () => {
      if ((0, _utils.isUnderTest)()) {
        setTimeout(() => process.exit(130), 1e3);
      } else {
        process.exit(130);
      }
    };
    if (sigintHandlerCalled) {
      process.off("SIGINT", sigintHandler);
      for (const kill of killSet) kill();
      exitWithCode130();
    } else {
      sigintHandlerCalled = true;
      gracefullyCloseAll().then(() => exitWithCode130());
    }
  }
  function sigtermHandler() {
    gracefullyCloseAll();
  }
  function sighupHandler() {
    gracefullyCloseAll();
  }
  const installedHandlers = /* @__PURE__ */ new Set();
  const processHandlers = {
    exit: exitHandler,
    SIGINT: sigintHandler,
    SIGTERM: sigtermHandler,
    SIGHUP: sighupHandler
  };
  function addProcessHandlerIfNeeded(name) {
    if (!installedHandlers.has(name)) {
      installedHandlers.add(name);
      process.on(name, processHandlers[name]);
    }
  }
  function removeProcessHandlersIfNeeded() {
    if (killSet.size) return;
    for (const handler of installedHandlers) process.off(handler, processHandlers[handler]);
    installedHandlers.clear();
  }
  async function launchProcess(options) {
    const stdio = options.stdio === "pipe" ? ["ignore", "pipe", "pipe", "pipe", "pipe"] : ["pipe", "pipe", "pipe"];
    options.log(`<launching> ${options.command} ${options.args ? options.args.join(" ") : ""}`);
    const spawnOptions = {
      // On non-windows platforms, `detached: true` makes child process a leader of a new
      // process group, making it possible to kill child process tree with `.kill(-pid)` command.
      // @see https://nodejs.org/api/child_process.html#child_process_options_detached
      detached: process.platform !== "win32",
      env: options.env,
      cwd: options.cwd,
      shell: options.shell,
      stdio
    };
    const spawnedProcess = childProcess.spawn(options.command, options.args || [], spawnOptions);
    const cleanup = async () => {
      options.log(`[pid=${spawnedProcess.pid || "N/A"}] starting temporary directories cleanup`);
      const errors2 = await (0, _fileUtils.removeFolders)(options.tempDirectories);
      for (let i = 0; i < options.tempDirectories.length; ++i) {
        if (errors2[i]) options.log(`[pid=${spawnedProcess.pid || "N/A"}] exception while removing ${options.tempDirectories[i]}: ${errors2[i]}`);
      }
      options.log(`[pid=${spawnedProcess.pid || "N/A"}] finished temporary directories cleanup`);
    };
    spawnedProcess.on("error", () => {
    });
    if (!spawnedProcess.pid) {
      let failed;
      const failedPromise = new Promise((f2, r2) => failed = f2);
      spawnedProcess.once("error", (error) => {
        failed(new Error("Failed to launch: " + error));
      });
      return cleanup().then(() => failedPromise).then((e2) => Promise.reject(e2));
    }
    options.log(`<launched> pid=${spawnedProcess.pid}`);
    const stdout2 = readline.createInterface({
      input: spawnedProcess.stdout
    });
    stdout2.on("line", (data) => {
      options.log(`[pid=${spawnedProcess.pid}][out] ` + data);
    });
    const stderr2 = readline.createInterface({
      input: spawnedProcess.stderr
    });
    stderr2.on("line", (data) => {
      options.log(`[pid=${spawnedProcess.pid}][err] ` + data);
    });
    let processClosed = false;
    let fulfillCleanup = () => {
    };
    const waitForCleanup = new Promise((f2) => fulfillCleanup = f2);
    spawnedProcess.once("close", (exitCode, signal) => {
      options.log(`[pid=${spawnedProcess.pid}] <process did exit: exitCode=${exitCode}, signal=${signal}>`);
      processClosed = true;
      gracefullyCloseSet.delete(gracefullyClose);
      killSet.delete(killProcessAndCleanup);
      removeProcessHandlersIfNeeded();
      options.onExit(exitCode, signal);
      cleanup().then(fulfillCleanup);
    });
    addProcessHandlerIfNeeded("exit");
    if (options.handleSIGINT) addProcessHandlerIfNeeded("SIGINT");
    if (options.handleSIGTERM) addProcessHandlerIfNeeded("SIGTERM");
    if (options.handleSIGHUP) addProcessHandlerIfNeeded("SIGHUP");
    gracefullyCloseSet.add(gracefullyClose);
    killSet.add(killProcessAndCleanup);
    let gracefullyClosing = false;
    async function gracefullyClose() {
      if (gracefullyClosing) {
        options.log(`[pid=${spawnedProcess.pid}] <forcefully close>`);
        killProcess();
        await waitForCleanup;
        return;
      }
      gracefullyClosing = true;
      options.log(`[pid=${spawnedProcess.pid}] <gracefully close start>`);
      await options.attemptToGracefullyClose().catch(() => killProcess());
      await waitForCleanup;
      options.log(`[pid=${spawnedProcess.pid}] <gracefully close end>`);
    }
    function killProcess() {
      gracefullyCloseSet.delete(gracefullyClose);
      killSet.delete(killProcessAndCleanup);
      removeProcessHandlersIfNeeded();
      options.log(`[pid=${spawnedProcess.pid}] <kill>`);
      if (spawnedProcess.pid && !spawnedProcess.killed && !processClosed) {
        options.log(`[pid=${spawnedProcess.pid}] <will force kill>`);
        try {
          if (process.platform === "win32") {
            const taskkillProcess = childProcess.spawnSync(`taskkill /pid ${spawnedProcess.pid} /T /F`, {
              shell: true
            });
            const [stdout3, stderr3] = [taskkillProcess.stdout.toString(), taskkillProcess.stderr.toString()];
            if (stdout3) options.log(`[pid=${spawnedProcess.pid}] taskkill stdout: ${stdout3}`);
            if (stderr3) options.log(`[pid=${spawnedProcess.pid}] taskkill stderr: ${stderr3}`);
          } else {
            process.kill(-spawnedProcess.pid, "SIGKILL");
          }
        } catch (e2) {
          options.log(`[pid=${spawnedProcess.pid}] exception while trying to kill process: ${e2}`);
        }
      } else {
        options.log(`[pid=${spawnedProcess.pid}] <skipped force kill spawnedProcess.killed=${spawnedProcess.killed} processClosed=${processClosed}>`);
      }
    }
    function killProcessAndCleanup() {
      killProcess();
      options.log(`[pid=${spawnedProcess.pid || "N/A"}] starting temporary directories cleanup`);
      for (const dir of options.tempDirectories) {
        try {
          _fs.default.rmSync(dir, {
            force: true,
            recursive: true,
            maxRetries: 5
          });
        } catch (e2) {
          options.log(`[pid=${spawnedProcess.pid || "N/A"}] exception while removing ${dir}: ${e2}`);
        }
      }
      options.log(`[pid=${spawnedProcess.pid || "N/A"}] finished temporary directories cleanup`);
    }
    function killAndWait() {
      killProcess();
      return waitForCleanup;
    }
    return {
      launchedProcess: spawnedProcess,
      gracefullyClose,
      kill: killAndWait
    };
  }
  function envArrayToObject(env2) {
    const result = {};
    for (const {
      name,
      value
    } of env2) result[name] = value;
    return result;
  }
  return processLauncher;
}
var profiler = {};
var hasRequiredProfiler;
function requireProfiler() {
  if (hasRequiredProfiler) return profiler;
  hasRequiredProfiler = 1;
  Object.defineProperty(profiler, "__esModule", {
    value: true
  });
  profiler.startProfiling = startProfiling;
  profiler.stopProfiling = stopProfiling;
  var _fs = _interopRequireDefault(require$$0$2);
  var _path2 = _interopRequireDefault(require$$1$1);
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  const profileDir = process.env.PWTEST_PROFILE_DIR || "";
  let session;
  async function startProfiling() {
    if (!profileDir) return;
    session = new require$$1.Session();
    session.connect();
    await new Promise((f2) => {
      session.post("Profiler.enable", () => {
        session.post("Profiler.start", f2);
      });
    });
  }
  async function stopProfiling(profileName) {
    if (!profileDir) return;
    await new Promise((f2) => session.post("Profiler.stop", (err, {
      profile
    }) => {
      if (!err) {
        _fs.default.mkdirSync(profileDir, {
          recursive: true
        });
        _fs.default.writeFileSync(_path2.default.join(profileDir, profileName + ".json"), JSON.stringify(profile));
      }
      f2();
    }));
  }
  return profiler;
}
var task = {};
var hasRequiredTask;
function requireTask() {
  if (hasRequiredTask) return task;
  hasRequiredTask = 1;
  Object.defineProperty(task, "__esModule", {
    value: true
  });
  task.makeWaitForNextTask = makeWaitForNextTask;
  function makeWaitForNextTask() {
    if (process.versions.electron) return (callback) => setTimeout(callback, 0);
    if (parseInt(process.versions.node, 10) >= 11) return setImmediate;
    let spinning = false;
    const callbacks = [];
    const loop = () => {
      const callback = callbacks.shift();
      if (!callback) {
        spinning = false;
        return;
      }
      setImmediate(loop);
      callback();
    };
    return (callback) => {
      callbacks.push(callback);
      if (!spinning) {
        spinning = true;
        setImmediate(loop);
      }
    };
  }
  return task;
}
var wsServer = {};
var hasRequiredWsServer;
function requireWsServer() {
  if (hasRequiredWsServer) return wsServer;
  hasRequiredWsServer = 1;
  Object.defineProperty(wsServer, "__esModule", {
    value: true
  });
  wsServer.perMessageDeflate = wsServer.WSServer = void 0;
  var _network = requireNetwork$2();
  var _utilsBundle = requireUtilsBundle();
  var _debugLogger = requireDebugLogger();
  let lastConnectionId = 0;
  const kConnectionSymbol = Symbol("kConnection");
  const perMessageDeflate = wsServer.perMessageDeflate = {
    serverNoContextTakeover: true,
    zlibDeflateOptions: {
      level: 3
    },
    zlibInflateOptions: {
      chunkSize: 10 * 1024
    },
    threshold: 10 * 1024
  };
  class WSServer {
    constructor(delegate) {
      this._wsServer = void 0;
      this.server = void 0;
      this._delegate = void 0;
      this._delegate = delegate;
    }
    async listen(port = 0, hostname, path) {
      _debugLogger.debugLogger.log("server", `Server started at ${/* @__PURE__ */ new Date()}`);
      const server2 = (0, _network.createHttpServer)((request, response) => {
        if (request.method === "GET" && request.url === "/json") {
          response.setHeader("Content-Type", "application/json");
          response.end(JSON.stringify({
            wsEndpointPath: path
          }));
          return;
        }
        response.end("Running");
      });
      server2.on("error", (error) => _debugLogger.debugLogger.log("server", String(error)));
      this.server = server2;
      const wsEndpoint = await new Promise((resolve2, reject) => {
        server2.listen(port, hostname, () => {
          const address = server2.address();
          if (!address) {
            reject(new Error("Could not bind server socket"));
            return;
          }
          const wsEndpoint2 = typeof address === "string" ? `${address}${path}` : `ws://${hostname || "localhost"}:${address.port}${path}`;
          resolve2(wsEndpoint2);
        }).on("error", reject);
      });
      _debugLogger.debugLogger.log("server", "Listening at " + wsEndpoint);
      this._wsServer = new _utilsBundle.wsServer({
        noServer: true,
        perMessageDeflate
      });
      if (this._delegate.onHeaders) this._wsServer.on("headers", (headers2) => this._delegate.onHeaders(headers2));
      server2.on("upgrade", (request, socket, head) => {
        var _this$_delegate$onUpg, _this$_delegate, _this$_wsServer;
        const pathname = new URL("http://localhost" + request.url).pathname;
        if (pathname !== path) {
          socket.write(`HTTP/${request.httpVersion} 400 Bad Request\r
\r
`);
          socket.destroy();
          return;
        }
        const upgradeResult = (_this$_delegate$onUpg = (_this$_delegate = this._delegate).onUpgrade) === null || _this$_delegate$onUpg === void 0 ? void 0 : _this$_delegate$onUpg.call(_this$_delegate, request, socket);
        if (upgradeResult) {
          socket.write(upgradeResult.error);
          socket.destroy();
          return;
        }
        (_this$_wsServer = this._wsServer) === null || _this$_wsServer === void 0 || _this$_wsServer.handleUpgrade(request, socket, head, (ws) => {
          var _this$_wsServer2;
          return (_this$_wsServer2 = this._wsServer) === null || _this$_wsServer2 === void 0 ? void 0 : _this$_wsServer2.emit("connection", ws, request);
        });
      });
      this._wsServer.on("connection", (ws, request) => {
        _debugLogger.debugLogger.log("server", "Connected client ws.extension=" + ws.extensions);
        const url = new URL("http://localhost" + (request.url || ""));
        const id = String(++lastConnectionId);
        _debugLogger.debugLogger.log("server", `[${id}] serving connection: ${request.url}`);
        const connection2 = this._delegate.onConnection(request, url, ws, id);
        ws[kConnectionSymbol] = connection2;
      });
      return wsEndpoint;
    }
    async close() {
      var _this$_delegate$onClo, _this$_delegate2;
      const server2 = this._wsServer;
      if (!server2) return;
      _debugLogger.debugLogger.log("server", "closing websocket server");
      const waitForClose = new Promise((f2) => server2.close(f2));
      await Promise.all(Array.from(server2.clients).map(async (ws) => {
        const connection2 = ws[kConnectionSymbol];
        if (connection2) await connection2.close();
        try {
          ws.terminate();
        } catch (e2) {
        }
      }));
      await waitForClose;
      _debugLogger.debugLogger.log("server", "closing http server");
      if (this.server) await new Promise((f2) => this.server.close(f2));
      this._wsServer = void 0;
      this.server = void 0;
      _debugLogger.debugLogger.log("server", "closed server");
      await ((_this$_delegate$onClo = (_this$_delegate2 = this._delegate).onClose) === null || _this$_delegate$onClo === void 0 ? void 0 : _this$_delegate$onClo.call(_this$_delegate2));
    }
  }
  wsServer.WSServer = WSServer;
  return wsServer;
}
var zipFile = {};
var hasRequiredZipFile;
function requireZipFile() {
  if (hasRequiredZipFile) return zipFile;
  hasRequiredZipFile = 1;
  Object.defineProperty(zipFile, "__esModule", {
    value: true
  });
  zipFile.ZipFile = void 0;
  var _zipBundle = requireZipBundle();
  class ZipFile {
    constructor(fileName) {
      this._fileName = void 0;
      this._zipFile = void 0;
      this._entries = /* @__PURE__ */ new Map();
      this._openedPromise = void 0;
      this._fileName = fileName;
      this._openedPromise = this._open();
    }
    async _open() {
      await new Promise((fulfill, reject) => {
        _zipBundle.yauzl.open(this._fileName, {
          autoClose: false
        }, (e2, z2) => {
          if (e2) {
            reject(e2);
            return;
          }
          this._zipFile = z2;
          this._zipFile.on("entry", (entry) => {
            this._entries.set(entry.fileName, entry);
          });
          this._zipFile.on("end", fulfill);
        });
      });
    }
    async entries() {
      await this._openedPromise;
      return [...this._entries.keys()];
    }
    async read(entryPath) {
      await this._openedPromise;
      const entry = this._entries.get(entryPath);
      if (!entry) throw new Error(`${entryPath} not found in file ${this._fileName}`);
      return new Promise((resolve2, reject) => {
        this._zipFile.openReadStream(entry, (error, readStream) => {
          if (error || !readStream) {
            reject(error || "Entry not found");
            return;
          }
          const buffers = [];
          readStream.on("data", (data) => buffers.push(data));
          readStream.on("end", () => resolve2(Buffer.concat(buffers)));
        });
      });
    }
    close() {
      var _this$_zipFile;
      (_this$_zipFile = this._zipFile) === null || _this$_zipFile === void 0 || _this$_zipFile.close();
    }
  }
  zipFile.ZipFile = ZipFile;
  return zipFile;
}
var hasRequiredUtils;
function requireUtils() {
  if (hasRequiredUtils) return utils;
  hasRequiredUtils = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _exportNames = {
      colors: true
    };
    Object.defineProperty(exports, "colors", {
      enumerable: true,
      get: function() {
        return _utilsBundle.colors;
      }
    });
    var _colors = requireColors();
    Object.keys(_colors).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _colors[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _colors[key];
        }
      });
    });
    var _assert = requireAssert$1();
    Object.keys(_assert).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _assert[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _assert[key];
        }
      });
    });
    var _headers = requireHeaders();
    Object.keys(_headers).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _headers[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _headers[key];
        }
      });
    });
    var _locatorGenerators = requireLocatorGenerators();
    Object.keys(_locatorGenerators).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _locatorGenerators[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _locatorGenerators[key];
        }
      });
    });
    var _manualPromise = requireManualPromise();
    Object.keys(_manualPromise).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _manualPromise[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _manualPromise[key];
        }
      });
    });
    var _mimeType = requireMimeType();
    Object.keys(_mimeType).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _mimeType[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _mimeType[key];
        }
      });
    });
    var _multimap = requireMultimap();
    Object.keys(_multimap).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _multimap[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _multimap[key];
        }
      });
    });
    var _rtti = requireRtti();
    Object.keys(_rtti).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _rtti[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _rtti[key];
        }
      });
    });
    var _semaphore = requireSemaphore();
    Object.keys(_semaphore).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _semaphore[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _semaphore[key];
        }
      });
    });
    var _stackTrace = requireStackTrace();
    Object.keys(_stackTrace).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _stackTrace[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _stackTrace[key];
        }
      });
    });
    var _stringUtils = requireStringUtils();
    Object.keys(_stringUtils).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _stringUtils[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _stringUtils[key];
        }
      });
    });
    var _time = requireTime$1();
    Object.keys(_time).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _time[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _time[key];
        }
      });
    });
    var _timeoutRunner = requireTimeoutRunner();
    Object.keys(_timeoutRunner).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _timeoutRunner[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _timeoutRunner[key];
        }
      });
    });
    var _urlMatch = requireUrlMatch();
    Object.keys(_urlMatch).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _urlMatch[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _urlMatch[key];
        }
      });
    });
    var _ascii = requireAscii();
    Object.keys(_ascii).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _ascii[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _ascii[key];
        }
      });
    });
    var _comparators = requireComparators();
    Object.keys(_comparators).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _comparators[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _comparators[key];
        }
      });
    });
    var _crypto = requireCrypto();
    Object.keys(_crypto).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _crypto[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _crypto[key];
        }
      });
    });
    var _debug = requireDebug$1();
    Object.keys(_debug).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _debug[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _debug[key];
        }
      });
    });
    var _debugLogger = requireDebugLogger();
    Object.keys(_debugLogger).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _debugLogger[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _debugLogger[key];
        }
      });
    });
    var _env = requireEnv();
    Object.keys(_env).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _env[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _env[key];
        }
      });
    });
    var _eventsHelper = requireEventsHelper();
    Object.keys(_eventsHelper).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _eventsHelper[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _eventsHelper[key];
        }
      });
    });
    var _expectUtils = requireExpectUtils();
    Object.keys(_expectUtils).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _expectUtils[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _expectUtils[key];
        }
      });
    });
    var _fileUtils = requireFileUtils$1();
    Object.keys(_fileUtils).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _fileUtils[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _fileUtils[key];
        }
      });
    });
    var _hostPlatform = requireHostPlatform();
    Object.keys(_hostPlatform).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _hostPlatform[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _hostPlatform[key];
        }
      });
    });
    var _httpServer = requireHttpServer();
    Object.keys(_httpServer).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _httpServer[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _httpServer[key];
        }
      });
    });
    var _network = requireNetwork$2();
    Object.keys(_network).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _network[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _network[key];
        }
      });
    });
    var _nodePlatform = requireNodePlatform();
    Object.keys(_nodePlatform).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _nodePlatform[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _nodePlatform[key];
        }
      });
    });
    var _processLauncher = requireProcessLauncher();
    Object.keys(_processLauncher).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _processLauncher[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _processLauncher[key];
        }
      });
    });
    var _profiler = requireProfiler();
    Object.keys(_profiler).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _profiler[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _profiler[key];
        }
      });
    });
    var _socksProxy = requireSocksProxy();
    Object.keys(_socksProxy).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _socksProxy[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _socksProxy[key];
        }
      });
    });
    var _spawnAsync = requireSpawnAsync();
    Object.keys(_spawnAsync).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _spawnAsync[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _spawnAsync[key];
        }
      });
    });
    var _task = requireTask();
    Object.keys(_task).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _task[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _task[key];
        }
      });
    });
    var _userAgent = requireUserAgent();
    Object.keys(_userAgent).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _userAgent[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _userAgent[key];
        }
      });
    });
    var _wsServer = requireWsServer();
    Object.keys(_wsServer).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _wsServer[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _wsServer[key];
        }
      });
    });
    var _zipFile = requireZipFile();
    Object.keys(_zipFile).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _zipFile[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _zipFile[key];
        }
      });
    });
    var _zones = requireZones();
    Object.keys(_zones).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _zones[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _zones[key];
        }
      });
    });
    var _utilsBundle = requireUtilsBundle();
  })(utils);
  return utils;
}
const comment = "Do not edit this file, use utils/roll_browser.js";
const browsers = [{ "name": "chromium", "revision": "1161", "installByDefault": true, "browserVersion": "134.0.6998.35" }, { "name": "chromium-headless-shell", "revision": "1161", "installByDefault": true, "browserVersion": "134.0.6998.35" }, { "name": "chromium-tip-of-tree", "revision": "1304", "installByDefault": false, "browserVersion": "135.0.7021.0" }, { "name": "chromium-tip-of-tree-headless-shell", "revision": "1304", "installByDefault": false, "browserVersion": "135.0.7021.0" }, { "name": "firefox", "revision": "1475", "installByDefault": true, "browserVersion": "135.0" }, { "name": "firefox-beta", "revision": "1471", "installByDefault": false, "browserVersion": "136.0b4" }, { "name": "webkit", "revision": "2140", "installByDefault": true, "revisionOverrides": { "debian11-x64": "2105", "debian11-arm64": "2105", "mac10.14": "1446", "mac10.15": "1616", "mac11": "1816", "mac11-arm64": "1816", "mac12": "2009", "mac12-arm64": "2009", "ubuntu20.04-x64": "2092", "ubuntu20.04-arm64": "2092" }, "browserVersion": "18.4" }, { "name": "ffmpeg", "revision": "1011", "installByDefault": true, "revisionOverrides": { "mac12": "1010", "mac12-arm64": "1010" } }, { "name": "winldd", "revision": "1007", "installByDefault": false }, { "name": "android", "revision": "1001", "installByDefault": false }];
const require$$15 = {
  comment,
  browsers
};
var hasRequiredRegistry;
function requireRegistry() {
  if (hasRequiredRegistry) return registry;
  hasRequiredRegistry = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Registry = void 0;
    exports.browserDirectoryToMarkerFilePath = browserDirectoryToMarkerFilePath;
    exports.buildPlaywrightCLICommand = buildPlaywrightCLICommand;
    exports.findChromiumChannel = findChromiumChannel;
    exports.installBrowsersForNpmInstall = installBrowsersForNpmInstall;
    exports.registryDirectory = exports.registry = void 0;
    Object.defineProperty(exports, "writeDockerVersion", {
      enumerable: true,
      get: function() {
        return _dependencies.writeDockerVersion;
      }
    });
    var _fs = _interopRequireDefault(require$$0$2);
    var _os = _interopRequireDefault(require$$1$3);
    var _path2 = _interopRequireDefault(require$$1$1);
    var util = _interopRequireWildcard(require$$1$2);
    var _browserFetcher = requireBrowserFetcher();
    var _dependencies = requireDependencies();
    var _utils = requireUtils();
    var _ascii = requireAscii();
    var _debugLogger = requireDebugLogger();
    var _hostPlatform = requireHostPlatform();
    var _network = requireNetwork$2();
    var _spawnAsync = requireSpawnAsync();
    var _userAgent = requireUserAgent();
    var _utilsBundle = requireUtilsBundle();
    var _fileUtils = requireFileUtils$1();
    function _getRequireWildcardCache(e2) {
      if ("function" != typeof WeakMap) return null;
      var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function(e3) {
        return e3 ? t : r2;
      })(e2);
    }
    function _interopRequireWildcard(e2, r2) {
      if (e2 && e2.__esModule) return e2;
      if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
      var t = _getRequireWildcardCache(r2);
      if (t && t.has(e2)) return t.get(e2);
      var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
        var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
      }
      return n.default = e2, t && t.set(e2, n), n;
    }
    function _interopRequireDefault(e2) {
      return e2 && e2.__esModule ? e2 : { default: e2 };
    }
    const PACKAGE_PATH = _path2.default.join(new URL(".", import.meta.url).pathname, "..", "..", "..");
    const BIN_PATH = _path2.default.join(new URL(".", import.meta.url).pathname, "..", "..", "..", "bin");
    const PLAYWRIGHT_CDN_MIRRORS = [
      "https://cdn.playwright.dev/dbazure/download/playwright",
      // ESRP CDN
      "https://playwright.download.prss.microsoft.com/dbazure/download/playwright",
      // Directly hit ESRP CDN
      "https://cdn.playwright.dev"
      // Hit the Storage Bucket directly
    ];
    if (process.env.PW_TEST_CDN_THAT_SHOULD_WORK) {
      for (let i = 0; i < PLAYWRIGHT_CDN_MIRRORS.length; i++) {
        const cdn = PLAYWRIGHT_CDN_MIRRORS[i];
        if (cdn !== process.env.PW_TEST_CDN_THAT_SHOULD_WORK) {
          const parsedCDN = new URL(cdn);
          parsedCDN.hostname = parsedCDN.hostname + ".does-not-resolve.playwright.dev";
          PLAYWRIGHT_CDN_MIRRORS[i] = parsedCDN.toString();
        }
      }
    }
    const EXECUTABLE_PATHS = {
      "chromium": {
        "linux": ["chrome-linux", "chrome"],
        "mac": ["chrome-mac", "Chromium.app", "Contents", "MacOS", "Chromium"],
        "win": ["chrome-win", "chrome.exe"]
      },
      "chromium-headless-shell": {
        "linux": ["chrome-linux", "headless_shell"],
        "mac": ["chrome-mac", "headless_shell"],
        "win": ["chrome-win", "headless_shell.exe"]
      },
      "firefox": {
        "linux": ["firefox", "firefox"],
        "mac": ["firefox", "Nightly.app", "Contents", "MacOS", "firefox"],
        "win": ["firefox", "firefox.exe"]
      },
      "webkit": {
        "linux": ["pw_run.sh"],
        "mac": ["pw_run.sh"],
        "win": ["Playwright.exe"]
      },
      "ffmpeg": {
        "linux": ["ffmpeg-linux"],
        "mac": ["ffmpeg-mac"],
        "win": ["ffmpeg-win64.exe"]
      },
      "winldd": {
        "linux": void 0,
        "mac": void 0,
        "win": ["PrintDeps.exe"]
      }
    };
    const DOWNLOAD_PATHS = {
      "chromium": {
        "<unknown>": void 0,
        "ubuntu18.04-x64": void 0,
        "ubuntu20.04-x64": "builds/chromium/%s/chromium-linux.zip",
        "ubuntu22.04-x64": "builds/chromium/%s/chromium-linux.zip",
        "ubuntu24.04-x64": "builds/chromium/%s/chromium-linux.zip",
        "ubuntu18.04-arm64": void 0,
        "ubuntu20.04-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
        "ubuntu22.04-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
        "ubuntu24.04-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
        "debian11-x64": "builds/chromium/%s/chromium-linux.zip",
        "debian11-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
        "debian12-x64": "builds/chromium/%s/chromium-linux.zip",
        "debian12-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
        "mac10.13": "builds/chromium/%s/chromium-mac.zip",
        "mac10.14": "builds/chromium/%s/chromium-mac.zip",
        "mac10.15": "builds/chromium/%s/chromium-mac.zip",
        "mac11": "builds/chromium/%s/chromium-mac.zip",
        "mac11-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
        "mac12": "builds/chromium/%s/chromium-mac.zip",
        "mac12-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
        "mac13": "builds/chromium/%s/chromium-mac.zip",
        "mac13-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
        "mac14": "builds/chromium/%s/chromium-mac.zip",
        "mac14-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
        "mac15": "builds/chromium/%s/chromium-mac.zip",
        "mac15-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
        "win64": "builds/chromium/%s/chromium-win64.zip"
      },
      "chromium-headless-shell": {
        "<unknown>": void 0,
        "ubuntu18.04-x64": void 0,
        "ubuntu20.04-x64": "builds/chromium/%s/chromium-headless-shell-linux.zip",
        "ubuntu22.04-x64": "builds/chromium/%s/chromium-headless-shell-linux.zip",
        "ubuntu24.04-x64": "builds/chromium/%s/chromium-headless-shell-linux.zip",
        "ubuntu18.04-arm64": void 0,
        "ubuntu20.04-arm64": "builds/chromium/%s/chromium-headless-shell-linux-arm64.zip",
        "ubuntu22.04-arm64": "builds/chromium/%s/chromium-headless-shell-linux-arm64.zip",
        "ubuntu24.04-arm64": "builds/chromium/%s/chromium-headless-shell-linux-arm64.zip",
        "debian11-x64": "builds/chromium/%s/chromium-headless-shell-linux.zip",
        "debian11-arm64": "builds/chromium/%s/chromium-headless-shell-linux-arm64.zip",
        "debian12-x64": "builds/chromium/%s/chromium-headless-shell-linux.zip",
        "debian12-arm64": "builds/chromium/%s/chromium-headless-shell-linux-arm64.zip",
        "mac10.13": void 0,
        "mac10.14": void 0,
        "mac10.15": void 0,
        "mac11": "builds/chromium/%s/chromium-headless-shell-mac.zip",
        "mac11-arm64": "builds/chromium/%s/chromium-headless-shell-mac-arm64.zip",
        "mac12": "builds/chromium/%s/chromium-headless-shell-mac.zip",
        "mac12-arm64": "builds/chromium/%s/chromium-headless-shell-mac-arm64.zip",
        "mac13": "builds/chromium/%s/chromium-headless-shell-mac.zip",
        "mac13-arm64": "builds/chromium/%s/chromium-headless-shell-mac-arm64.zip",
        "mac14": "builds/chromium/%s/chromium-headless-shell-mac.zip",
        "mac14-arm64": "builds/chromium/%s/chromium-headless-shell-mac-arm64.zip",
        "mac15": "builds/chromium/%s/chromium-headless-shell-mac.zip",
        "mac15-arm64": "builds/chromium/%s/chromium-headless-shell-mac-arm64.zip",
        "win64": "builds/chromium/%s/chromium-headless-shell-win64.zip"
      },
      "chromium-tip-of-tree": {
        "<unknown>": void 0,
        "ubuntu18.04-x64": void 0,
        "ubuntu20.04-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
        "ubuntu22.04-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
        "ubuntu24.04-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
        "ubuntu18.04-arm64": void 0,
        "ubuntu20.04-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
        "ubuntu22.04-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
        "ubuntu24.04-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
        "debian11-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
        "debian11-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
        "debian12-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
        "debian12-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
        "mac10.13": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
        "mac10.14": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
        "mac10.15": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
        "mac11": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
        "mac11-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
        "mac12": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
        "mac12-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
        "mac13": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
        "mac13-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
        "mac14": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
        "mac14-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
        "mac15": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
        "mac15-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
        "win64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-win64.zip"
      },
      "chromium-tip-of-tree-headless-shell": {
        "<unknown>": void 0,
        "ubuntu18.04-x64": void 0,
        "ubuntu20.04-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-linux.zip",
        "ubuntu22.04-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-linux.zip",
        "ubuntu24.04-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-linux.zip",
        "ubuntu18.04-arm64": void 0,
        "ubuntu20.04-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-linux-arm64.zip",
        "ubuntu22.04-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-linux-arm64.zip",
        "ubuntu24.04-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-linux-arm64.zip",
        "debian11-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-linux.zip",
        "debian11-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-linux-arm64.zip",
        "debian12-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-linux.zip",
        "debian12-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-linux-arm64.zip",
        "mac10.13": void 0,
        "mac10.14": void 0,
        "mac10.15": void 0,
        "mac11": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-mac.zip",
        "mac11-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-mac-arm64.zip",
        "mac12": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-mac.zip",
        "mac12-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-mac-arm64.zip",
        "mac13": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-mac.zip",
        "mac13-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-mac-arm64.zip",
        "mac14": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-mac.zip",
        "mac14-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-mac-arm64.zip",
        "mac15": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-mac.zip",
        "mac15-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-mac-arm64.zip",
        "win64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-win64.zip"
      },
      "firefox": {
        "<unknown>": void 0,
        "ubuntu18.04-x64": void 0,
        "ubuntu20.04-x64": "builds/firefox/%s/firefox-ubuntu-20.04.zip",
        "ubuntu22.04-x64": "builds/firefox/%s/firefox-ubuntu-22.04.zip",
        "ubuntu24.04-x64": "builds/firefox/%s/firefox-ubuntu-24.04.zip",
        "ubuntu18.04-arm64": void 0,
        "ubuntu20.04-arm64": "builds/firefox/%s/firefox-ubuntu-20.04-arm64.zip",
        "ubuntu22.04-arm64": "builds/firefox/%s/firefox-ubuntu-22.04-arm64.zip",
        "ubuntu24.04-arm64": "builds/firefox/%s/firefox-ubuntu-24.04-arm64.zip",
        "debian11-x64": "builds/firefox/%s/firefox-debian-11.zip",
        "debian11-arm64": "builds/firefox/%s/firefox-debian-11-arm64.zip",
        "debian12-x64": "builds/firefox/%s/firefox-debian-12.zip",
        "debian12-arm64": "builds/firefox/%s/firefox-debian-12-arm64.zip",
        "mac10.13": "builds/firefox/%s/firefox-mac.zip",
        "mac10.14": "builds/firefox/%s/firefox-mac.zip",
        "mac10.15": "builds/firefox/%s/firefox-mac.zip",
        "mac11": "builds/firefox/%s/firefox-mac.zip",
        "mac11-arm64": "builds/firefox/%s/firefox-mac-arm64.zip",
        "mac12": "builds/firefox/%s/firefox-mac.zip",
        "mac12-arm64": "builds/firefox/%s/firefox-mac-arm64.zip",
        "mac13": "builds/firefox/%s/firefox-mac.zip",
        "mac13-arm64": "builds/firefox/%s/firefox-mac-arm64.zip",
        "mac14": "builds/firefox/%s/firefox-mac.zip",
        "mac14-arm64": "builds/firefox/%s/firefox-mac-arm64.zip",
        "mac15": "builds/firefox/%s/firefox-mac.zip",
        "mac15-arm64": "builds/firefox/%s/firefox-mac-arm64.zip",
        "win64": "builds/firefox/%s/firefox-win64.zip"
      },
      "firefox-beta": {
        "<unknown>": void 0,
        "ubuntu18.04-x64": void 0,
        "ubuntu20.04-x64": "builds/firefox-beta/%s/firefox-beta-ubuntu-20.04.zip",
        "ubuntu22.04-x64": "builds/firefox-beta/%s/firefox-beta-ubuntu-22.04.zip",
        "ubuntu24.04-x64": "builds/firefox-beta/%s/firefox-beta-ubuntu-24.04.zip",
        "ubuntu18.04-arm64": void 0,
        "ubuntu20.04-arm64": void 0,
        "ubuntu22.04-arm64": "builds/firefox-beta/%s/firefox-beta-ubuntu-22.04-arm64.zip",
        "ubuntu24.04-arm64": "builds/firefox-beta/%s/firefox-beta-ubuntu-24.04-arm64.zip",
        "debian11-x64": "builds/firefox-beta/%s/firefox-beta-debian-11.zip",
        "debian11-arm64": "builds/firefox-beta/%s/firefox-beta-debian-11-arm64.zip",
        "debian12-x64": "builds/firefox-beta/%s/firefox-beta-debian-12.zip",
        "debian12-arm64": "builds/firefox-beta/%s/firefox-beta-debian-12-arm64.zip",
        "mac10.13": "builds/firefox-beta/%s/firefox-beta-mac.zip",
        "mac10.14": "builds/firefox-beta/%s/firefox-beta-mac.zip",
        "mac10.15": "builds/firefox-beta/%s/firefox-beta-mac.zip",
        "mac11": "builds/firefox-beta/%s/firefox-beta-mac.zip",
        "mac11-arm64": "builds/firefox-beta/%s/firefox-beta-mac-arm64.zip",
        "mac12": "builds/firefox-beta/%s/firefox-beta-mac.zip",
        "mac12-arm64": "builds/firefox-beta/%s/firefox-beta-mac-arm64.zip",
        "mac13": "builds/firefox-beta/%s/firefox-beta-mac.zip",
        "mac13-arm64": "builds/firefox-beta/%s/firefox-beta-mac-arm64.zip",
        "mac14": "builds/firefox-beta/%s/firefox-beta-mac.zip",
        "mac14-arm64": "builds/firefox-beta/%s/firefox-beta-mac-arm64.zip",
        "mac15": "builds/firefox-beta/%s/firefox-beta-mac.zip",
        "mac15-arm64": "builds/firefox-beta/%s/firefox-beta-mac-arm64.zip",
        "win64": "builds/firefox-beta/%s/firefox-beta-win64.zip"
      },
      "webkit": {
        "<unknown>": void 0,
        "ubuntu18.04-x64": void 0,
        "ubuntu20.04-x64": "builds/webkit/%s/webkit-ubuntu-20.04.zip",
        "ubuntu22.04-x64": "builds/webkit/%s/webkit-ubuntu-22.04.zip",
        "ubuntu24.04-x64": "builds/webkit/%s/webkit-ubuntu-24.04.zip",
        "ubuntu18.04-arm64": void 0,
        "ubuntu20.04-arm64": "builds/webkit/%s/webkit-ubuntu-20.04-arm64.zip",
        "ubuntu22.04-arm64": "builds/webkit/%s/webkit-ubuntu-22.04-arm64.zip",
        "ubuntu24.04-arm64": "builds/webkit/%s/webkit-ubuntu-24.04-arm64.zip",
        "debian11-x64": "builds/webkit/%s/webkit-debian-11.zip",
        "debian11-arm64": "builds/webkit/%s/webkit-debian-11-arm64.zip",
        "debian12-x64": "builds/webkit/%s/webkit-debian-12.zip",
        "debian12-arm64": "builds/webkit/%s/webkit-debian-12-arm64.zip",
        "mac10.13": void 0,
        "mac10.14": "builds/deprecated-webkit-mac-10.14/%s/deprecated-webkit-mac-10.14.zip",
        "mac10.15": "builds/deprecated-webkit-mac-10.15/%s/deprecated-webkit-mac-10.15.zip",
        "mac11": "builds/webkit/%s/webkit-mac-11.zip",
        "mac11-arm64": "builds/webkit/%s/webkit-mac-11-arm64.zip",
        "mac12": "builds/webkit/%s/webkit-mac-12.zip",
        "mac12-arm64": "builds/webkit/%s/webkit-mac-12-arm64.zip",
        "mac13": "builds/webkit/%s/webkit-mac-13.zip",
        "mac13-arm64": "builds/webkit/%s/webkit-mac-13-arm64.zip",
        "mac14": "builds/webkit/%s/webkit-mac-14.zip",
        "mac14-arm64": "builds/webkit/%s/webkit-mac-14-arm64.zip",
        "mac15": "builds/webkit/%s/webkit-mac-15.zip",
        "mac15-arm64": "builds/webkit/%s/webkit-mac-15-arm64.zip",
        "win64": "builds/webkit/%s/webkit-win64.zip"
      },
      "ffmpeg": {
        "<unknown>": void 0,
        "ubuntu18.04-x64": void 0,
        "ubuntu20.04-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
        "ubuntu22.04-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
        "ubuntu24.04-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
        "ubuntu18.04-arm64": void 0,
        "ubuntu20.04-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
        "ubuntu22.04-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
        "ubuntu24.04-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
        "debian11-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
        "debian11-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
        "debian12-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
        "debian12-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
        "mac10.13": "builds/ffmpeg/%s/ffmpeg-mac.zip",
        "mac10.14": "builds/ffmpeg/%s/ffmpeg-mac.zip",
        "mac10.15": "builds/ffmpeg/%s/ffmpeg-mac.zip",
        "mac11": "builds/ffmpeg/%s/ffmpeg-mac.zip",
        "mac11-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
        "mac12": "builds/ffmpeg/%s/ffmpeg-mac.zip",
        "mac12-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
        "mac13": "builds/ffmpeg/%s/ffmpeg-mac.zip",
        "mac13-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
        "mac14": "builds/ffmpeg/%s/ffmpeg-mac.zip",
        "mac14-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
        "mac15": "builds/ffmpeg/%s/ffmpeg-mac.zip",
        "mac15-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
        "win64": "builds/ffmpeg/%s/ffmpeg-win64.zip"
      },
      "winldd": {
        "<unknown>": void 0,
        "ubuntu18.04-x64": void 0,
        "ubuntu20.04-x64": void 0,
        "ubuntu22.04-x64": void 0,
        "ubuntu24.04-x64": void 0,
        "ubuntu18.04-arm64": void 0,
        "ubuntu20.04-arm64": void 0,
        "ubuntu22.04-arm64": void 0,
        "ubuntu24.04-arm64": void 0,
        "debian11-x64": void 0,
        "debian11-arm64": void 0,
        "debian12-x64": void 0,
        "debian12-arm64": void 0,
        "mac10.13": void 0,
        "mac10.14": void 0,
        "mac10.15": void 0,
        "mac11": void 0,
        "mac11-arm64": void 0,
        "mac12": void 0,
        "mac12-arm64": void 0,
        "mac13": void 0,
        "mac13-arm64": void 0,
        "mac14": void 0,
        "mac14-arm64": void 0,
        "mac15": void 0,
        "mac15-arm64": void 0,
        "win64": "builds/winldd/%s/winldd-win64.zip"
      },
      "android": {
        "<unknown>": "builds/android/%s/android.zip",
        "ubuntu18.04-x64": void 0,
        "ubuntu20.04-x64": "builds/android/%s/android.zip",
        "ubuntu22.04-x64": "builds/android/%s/android.zip",
        "ubuntu24.04-x64": "builds/android/%s/android.zip",
        "ubuntu18.04-arm64": void 0,
        "ubuntu20.04-arm64": "builds/android/%s/android.zip",
        "ubuntu22.04-arm64": "builds/android/%s/android.zip",
        "ubuntu24.04-arm64": "builds/android/%s/android.zip",
        "debian11-x64": "builds/android/%s/android.zip",
        "debian11-arm64": "builds/android/%s/android.zip",
        "debian12-x64": "builds/android/%s/android.zip",
        "debian12-arm64": "builds/android/%s/android.zip",
        "mac10.13": "builds/android/%s/android.zip",
        "mac10.14": "builds/android/%s/android.zip",
        "mac10.15": "builds/android/%s/android.zip",
        "mac11": "builds/android/%s/android.zip",
        "mac11-arm64": "builds/android/%s/android.zip",
        "mac12": "builds/android/%s/android.zip",
        "mac12-arm64": "builds/android/%s/android.zip",
        "mac13": "builds/android/%s/android.zip",
        "mac13-arm64": "builds/android/%s/android.zip",
        "mac14": "builds/android/%s/android.zip",
        "mac14-arm64": "builds/android/%s/android.zip",
        "mac15": "builds/android/%s/android.zip",
        "mac15-arm64": "builds/android/%s/android.zip",
        "win64": "builds/android/%s/android.zip"
      },
      // TODO(bidi): implement downloads.
      "bidi": {}
    };
    const registryDirectory = exports.registryDirectory = (() => {
      let result;
      const envDefined = (0, _utils.getFromENV)("PLAYWRIGHT_BROWSERS_PATH");
      if (envDefined === "0") {
        result = _path2.default.join(new URL(".", import.meta.url).pathname, "..", "..", "..", ".local-browsers");
      } else if (envDefined) {
        result = envDefined;
      } else {
        let cacheDirectory;
        if (process.platform === "linux") cacheDirectory = process.env.XDG_CACHE_HOME || _path2.default.join(_os.default.homedir(), ".cache");
        else if (process.platform === "darwin") cacheDirectory = _path2.default.join(_os.default.homedir(), "Library", "Caches");
        else if (process.platform === "win32") cacheDirectory = process.env.LOCALAPPDATA || _path2.default.join(_os.default.homedir(), "AppData", "Local");
        else throw new Error("Unsupported platform: " + process.platform);
        result = _path2.default.join(cacheDirectory, "ms-playwright");
      }
      if (!_path2.default.isAbsolute(result)) {
        result = _path2.default.resolve((0, _utils.getFromENV)("INIT_CWD") || process.cwd(), result);
      }
      return result;
    })();
    function isBrowserDirectory(browserDirectory) {
      const baseName = _path2.default.basename(browserDirectory);
      for (const browserName of allDownloadable) {
        if (baseName.startsWith(browserName.replace(/-/g, "_") + "-")) return true;
      }
      return false;
    }
    function readDescriptors(browsersJSON) {
      return browsersJSON["browsers"].map((obj) => {
        const name = obj.name;
        const revisionOverride = (obj.revisionOverrides || {})[_hostPlatform.hostPlatform];
        const revision = revisionOverride || obj.revision;
        const browserDirectoryPrefix = revisionOverride ? `${name}_${_hostPlatform.hostPlatform}_special` : `${name}`;
        const descriptor = {
          name,
          revision,
          hasRevisionOverride: !!revisionOverride,
          // We only put browser version for the supported operating systems.
          browserVersion: revisionOverride ? void 0 : obj.browserVersion,
          installByDefault: !!obj.installByDefault,
          // Method `isBrowserDirectory` determines directory to be browser iff
          // it starts with some browser name followed by '-'. Some browser names
          // are prefixes of others, e.g. 'webkit' is a prefix of `webkit-technology-preview`.
          // To avoid older registries erroneously removing 'webkit-technology-preview', we have to
          // ensure that browser folders to never include dashes inside.
          dir: _path2.default.join(registryDirectory, browserDirectoryPrefix.replace(/-/g, "_") + "-" + revision)
        };
        return descriptor;
      });
    }
    const allDownloadable = ["android", "chromium", "firefox", "webkit", "ffmpeg", "firefox-beta", "chromium-tip-of-tree", "chromium-headless-shell", "chromium-tip-of-tree-headless-shell"];
    class Registry {
      constructor(browsersJSON) {
        this._executables = void 0;
        const descriptors = readDescriptors(browsersJSON);
        const findExecutablePath = (dir, name) => {
          let tokens = void 0;
          if (process.platform === "linux") tokens = EXECUTABLE_PATHS[name]["linux"];
          else if (process.platform === "darwin") tokens = EXECUTABLE_PATHS[name]["mac"];
          else if (process.platform === "win32") tokens = EXECUTABLE_PATHS[name]["win"];
          return tokens ? _path2.default.join(dir, ...tokens) : void 0;
        };
        const executablePathOrDie = (name, e2, installByDefault, sdkLanguage) => {
          if (!e2) throw new Error(`${name} is not supported on ${_hostPlatform.hostPlatform}`);
          const installCommand = buildPlaywrightCLICommand(sdkLanguage, `install${installByDefault ? "" : " " + name}`);
          if (!(0, _fileUtils.canAccessFile)(e2)) {
            const currentDockerVersion = (0, _dependencies.readDockerVersionSync)();
            const preferredDockerVersion = currentDockerVersion ? (0, _dependencies.dockerVersion)(currentDockerVersion.dockerImageNameTemplate) : null;
            const isOutdatedDockerImage = currentDockerVersion && preferredDockerVersion && currentDockerVersion.dockerImageName !== preferredDockerVersion.dockerImageName;
            const prettyMessage = isOutdatedDockerImage ? [`Looks like ${sdkLanguage === "javascript" ? "Playwright Test or " : ""}Playwright was just updated to ${preferredDockerVersion.driverVersion}.`, `Please update docker image as well.`, `-  current: ${currentDockerVersion.dockerImageName}`, `- required: ${preferredDockerVersion.dockerImageName}`, ``, `<3 Playwright Team`].join("\n") : [`Looks like ${sdkLanguage === "javascript" ? "Playwright Test or " : ""}Playwright was just installed or updated.`, `Please run the following command to download new browser${installByDefault ? "s" : ""}:`, ``, `    ${installCommand}`, ``, `<3 Playwright Team`].join("\n");
            throw new Error(`Executable doesn't exist at ${e2}
${(0, _ascii.wrapInASCIIBox)(prettyMessage, 1)}`);
          }
          return e2;
        };
        this._executables = [];
        const chromium2 = descriptors.find((d2) => d2.name === "chromium");
        const chromiumExecutable = findExecutablePath(chromium2.dir, "chromium");
        this._executables.push({
          type: "browser",
          name: "chromium",
          browserName: "chromium",
          directory: chromium2.dir,
          executablePath: () => chromiumExecutable,
          executablePathOrDie: (sdkLanguage) => executablePathOrDie("chromium", chromiumExecutable, chromium2.installByDefault, sdkLanguage),
          installType: chromium2.installByDefault ? "download-by-default" : "download-on-demand",
          _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, chromium2.dir, ["chrome-linux"], [], ["chrome-win"]),
          downloadURLs: this._downloadURLs(chromium2),
          browserVersion: chromium2.browserVersion,
          _install: () => this._downloadExecutable(chromium2, chromiumExecutable),
          _dependencyGroup: "chromium",
          _isHermeticInstallation: true
        });
        const chromiumHeadlessShell = descriptors.find((d2) => d2.name === "chromium-headless-shell");
        const chromiumHeadlessShellExecutable = findExecutablePath(chromiumHeadlessShell.dir, "chromium-headless-shell");
        this._executables.push({
          type: "channel",
          name: "chromium-headless-shell",
          browserName: "chromium",
          directory: chromiumHeadlessShell.dir,
          executablePath: () => chromiumHeadlessShellExecutable,
          executablePathOrDie: (sdkLanguage) => executablePathOrDie("chromium", chromiumHeadlessShellExecutable, chromiumHeadlessShell.installByDefault, sdkLanguage),
          installType: chromiumHeadlessShell.installByDefault ? "download-by-default" : "download-on-demand",
          _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, chromiumHeadlessShell.dir, ["chrome-linux"], [], ["chrome-win"]),
          downloadURLs: this._downloadURLs(chromiumHeadlessShell),
          browserVersion: chromium2.browserVersion,
          _install: () => this._downloadExecutable(chromiumHeadlessShell, chromiumHeadlessShellExecutable),
          _dependencyGroup: "chromium",
          _isHermeticInstallation: true
        });
        const chromiumTipOfTreeHeadlessShell = descriptors.find((d2) => d2.name === "chromium-tip-of-tree-headless-shell");
        const chromiumTipOfTreeHeadlessShellExecutable = findExecutablePath(chromiumTipOfTreeHeadlessShell.dir, "chromium-headless-shell");
        this._executables.push({
          type: "channel",
          name: "chromium-tip-of-tree-headless-shell",
          browserName: "chromium",
          directory: chromiumTipOfTreeHeadlessShell.dir,
          executablePath: () => chromiumTipOfTreeHeadlessShellExecutable,
          executablePathOrDie: (sdkLanguage) => executablePathOrDie("chromium", chromiumTipOfTreeHeadlessShellExecutable, chromiumTipOfTreeHeadlessShell.installByDefault, sdkLanguage),
          installType: chromiumTipOfTreeHeadlessShell.installByDefault ? "download-by-default" : "download-on-demand",
          _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, chromiumTipOfTreeHeadlessShell.dir, ["chrome-linux"], [], ["chrome-win"]),
          downloadURLs: this._downloadURLs(chromiumTipOfTreeHeadlessShell),
          browserVersion: chromium2.browserVersion,
          _install: () => this._downloadExecutable(chromiumTipOfTreeHeadlessShell, chromiumTipOfTreeHeadlessShellExecutable),
          _dependencyGroup: "chromium",
          _isHermeticInstallation: true
        });
        const chromiumTipOfTree = descriptors.find((d2) => d2.name === "chromium-tip-of-tree");
        const chromiumTipOfTreeExecutable = findExecutablePath(chromiumTipOfTree.dir, "chromium");
        this._executables.push({
          type: "tool",
          name: "chromium-tip-of-tree",
          browserName: "chromium",
          directory: chromiumTipOfTree.dir,
          executablePath: () => chromiumTipOfTreeExecutable,
          executablePathOrDie: (sdkLanguage) => executablePathOrDie("chromium-tip-of-tree", chromiumTipOfTreeExecutable, chromiumTipOfTree.installByDefault, sdkLanguage),
          installType: chromiumTipOfTree.installByDefault ? "download-by-default" : "download-on-demand",
          _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, chromiumTipOfTree.dir, ["chrome-linux"], [], ["chrome-win"]),
          downloadURLs: this._downloadURLs(chromiumTipOfTree),
          browserVersion: chromiumTipOfTree.browserVersion,
          _install: () => this._downloadExecutable(chromiumTipOfTree, chromiumTipOfTreeExecutable),
          _dependencyGroup: "chromium",
          _isHermeticInstallation: true
        });
        this._executables.push(this._createChromiumChannel("chrome", {
          "linux": "/opt/google/chrome/chrome",
          "darwin": "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",
          "win32": `\\Google\\Chrome\\Application\\chrome.exe`
        }, () => this._installChromiumChannel("chrome", {
          "linux": "reinstall_chrome_stable_linux.sh",
          "darwin": "reinstall_chrome_stable_mac.sh",
          "win32": "reinstall_chrome_stable_win.ps1"
        })));
        this._executables.push(this._createChromiumChannel("chrome-beta", {
          "linux": "/opt/google/chrome-beta/chrome",
          "darwin": "/Applications/Google Chrome Beta.app/Contents/MacOS/Google Chrome Beta",
          "win32": `\\Google\\Chrome Beta\\Application\\chrome.exe`
        }, () => this._installChromiumChannel("chrome-beta", {
          "linux": "reinstall_chrome_beta_linux.sh",
          "darwin": "reinstall_chrome_beta_mac.sh",
          "win32": "reinstall_chrome_beta_win.ps1"
        })));
        this._executables.push(this._createChromiumChannel("chrome-dev", {
          "linux": "/opt/google/chrome-unstable/chrome",
          "darwin": "/Applications/Google Chrome Dev.app/Contents/MacOS/Google Chrome Dev",
          "win32": `\\Google\\Chrome Dev\\Application\\chrome.exe`
        }));
        this._executables.push(this._createChromiumChannel("chrome-canary", {
          "linux": "",
          "darwin": "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary",
          "win32": `\\Google\\Chrome SxS\\Application\\chrome.exe`
        }));
        this._executables.push(this._createChromiumChannel("msedge", {
          "linux": "/opt/microsoft/msedge/msedge",
          "darwin": "/Applications/Microsoft Edge.app/Contents/MacOS/Microsoft Edge",
          "win32": `\\Microsoft\\Edge\\Application\\msedge.exe`
        }, () => this._installMSEdgeChannel("msedge", {
          "linux": "reinstall_msedge_stable_linux.sh",
          "darwin": "reinstall_msedge_stable_mac.sh",
          "win32": "reinstall_msedge_stable_win.ps1"
        })));
        this._executables.push(this._createChromiumChannel("msedge-beta", {
          "linux": "/opt/microsoft/msedge-beta/msedge",
          "darwin": "/Applications/Microsoft Edge Beta.app/Contents/MacOS/Microsoft Edge Beta",
          "win32": `\\Microsoft\\Edge Beta\\Application\\msedge.exe`
        }, () => this._installMSEdgeChannel("msedge-beta", {
          "darwin": "reinstall_msedge_beta_mac.sh",
          "linux": "reinstall_msedge_beta_linux.sh",
          "win32": "reinstall_msedge_beta_win.ps1"
        })));
        this._executables.push(this._createChromiumChannel("msedge-dev", {
          "linux": "/opt/microsoft/msedge-dev/msedge",
          "darwin": "/Applications/Microsoft Edge Dev.app/Contents/MacOS/Microsoft Edge Dev",
          "win32": `\\Microsoft\\Edge Dev\\Application\\msedge.exe`
        }, () => this._installMSEdgeChannel("msedge-dev", {
          "darwin": "reinstall_msedge_dev_mac.sh",
          "linux": "reinstall_msedge_dev_linux.sh",
          "win32": "reinstall_msedge_dev_win.ps1"
        })));
        this._executables.push(this._createChromiumChannel("msedge-canary", {
          "linux": "",
          "darwin": "/Applications/Microsoft Edge Canary.app/Contents/MacOS/Microsoft Edge Canary",
          "win32": `\\Microsoft\\Edge SxS\\Application\\msedge.exe`
        }));
        this._executables.push(this._createBidiFirefoxChannel("bidi-firefox-stable", {
          "linux": "/firefox/firefox",
          "darwin": "/Firefox.app/Contents/MacOS/firefox",
          "win32": "\\core\\firefox.exe"
        }));
        this._executables.push(this._createBidiFirefoxChannel("bidi-firefox-beta", {
          "linux": "/firefox/firefox",
          "darwin": "/Firefox.app/Contents/MacOS/firefox",
          "win32": "\\core\\firefox.exe"
        }));
        this._executables.push(this._createBidiFirefoxChannel("bidi-firefox-nightly", {
          "linux": "/firefox/firefox",
          "darwin": "/Firefox Nightly.app/Contents/MacOS/firefox",
          "win32": "\\firefox\\firefox.exe"
        }));
        this._executables.push(this._createBidiChannel("bidi-chrome-stable", {
          "linux": "/opt/google/chrome/chrome",
          "darwin": "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",
          "win32": `\\Google\\Chrome\\Application\\chrome.exe`
        }));
        this._executables.push(this._createBidiChannel("bidi-chrome-canary", {
          "linux": "",
          "darwin": "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary",
          "win32": `\\Google\\Chrome SxS\\Application\\chrome.exe`
        }));
        this._executables.push({
          type: "browser",
          name: "bidi-chromium",
          browserName: "bidi",
          directory: chromium2.dir,
          executablePath: () => chromiumExecutable,
          executablePathOrDie: (sdkLanguage) => executablePathOrDie("chromium", chromiumExecutable, chromium2.installByDefault, sdkLanguage),
          installType: "download-on-demand",
          _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, chromium2.dir, ["chrome-linux"], [], ["chrome-win"]),
          downloadURLs: this._downloadURLs(chromium2),
          browserVersion: chromium2.browserVersion,
          _install: () => this._downloadExecutable(chromium2, chromiumExecutable),
          _dependencyGroup: "chromium",
          _isHermeticInstallation: true
        });
        const firefox2 = descriptors.find((d2) => d2.name === "firefox");
        const firefoxExecutable = findExecutablePath(firefox2.dir, "firefox");
        this._executables.push({
          type: "browser",
          name: "firefox",
          browserName: "firefox",
          directory: firefox2.dir,
          executablePath: () => firefoxExecutable,
          executablePathOrDie: (sdkLanguage) => executablePathOrDie("firefox", firefoxExecutable, firefox2.installByDefault, sdkLanguage),
          installType: firefox2.installByDefault ? "download-by-default" : "download-on-demand",
          _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, firefox2.dir, ["firefox"], [], ["firefox"]),
          downloadURLs: this._downloadURLs(firefox2),
          browserVersion: firefox2.browserVersion,
          _install: () => this._downloadExecutable(firefox2, firefoxExecutable),
          _dependencyGroup: "firefox",
          _isHermeticInstallation: true
        });
        const firefoxBeta = descriptors.find((d2) => d2.name === "firefox-beta");
        const firefoxBetaExecutable = findExecutablePath(firefoxBeta.dir, "firefox");
        this._executables.push({
          type: "tool",
          name: "firefox-beta",
          browserName: "firefox",
          directory: firefoxBeta.dir,
          executablePath: () => firefoxBetaExecutable,
          executablePathOrDie: (sdkLanguage) => executablePathOrDie("firefox-beta", firefoxBetaExecutable, firefoxBeta.installByDefault, sdkLanguage),
          installType: firefoxBeta.installByDefault ? "download-by-default" : "download-on-demand",
          _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, firefoxBeta.dir, ["firefox"], [], ["firefox"]),
          downloadURLs: this._downloadURLs(firefoxBeta),
          browserVersion: firefoxBeta.browserVersion,
          _install: () => this._downloadExecutable(firefoxBeta, firefoxBetaExecutable),
          _dependencyGroup: "firefox",
          _isHermeticInstallation: true
        });
        const webkit2 = descriptors.find((d2) => d2.name === "webkit");
        const webkitExecutable = findExecutablePath(webkit2.dir, "webkit");
        const webkitLinuxLddDirectories = [_path2.default.join("minibrowser-gtk"), _path2.default.join("minibrowser-gtk", "bin"), _path2.default.join("minibrowser-gtk", "lib"), _path2.default.join("minibrowser-gtk", "sys", "lib"), _path2.default.join("minibrowser-wpe"), _path2.default.join("minibrowser-wpe", "bin"), _path2.default.join("minibrowser-wpe", "lib"), _path2.default.join("minibrowser-wpe", "sys", "lib")];
        this._executables.push({
          type: "browser",
          name: "webkit",
          browserName: "webkit",
          directory: webkit2.dir,
          executablePath: () => webkitExecutable,
          executablePathOrDie: (sdkLanguage) => executablePathOrDie("webkit", webkitExecutable, webkit2.installByDefault, sdkLanguage),
          installType: webkit2.installByDefault ? "download-by-default" : "download-on-demand",
          _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, webkit2.dir, webkitLinuxLddDirectories, ["libGLESv2.so.2", "libx264.so"], [""]),
          downloadURLs: this._downloadURLs(webkit2),
          browserVersion: webkit2.browserVersion,
          _install: () => this._downloadExecutable(webkit2, webkitExecutable),
          _dependencyGroup: "webkit",
          _isHermeticInstallation: true
        });
        const ffmpeg = descriptors.find((d2) => d2.name === "ffmpeg");
        const ffmpegExecutable = findExecutablePath(ffmpeg.dir, "ffmpeg");
        this._executables.push({
          type: "tool",
          name: "ffmpeg",
          browserName: void 0,
          directory: ffmpeg.dir,
          executablePath: () => ffmpegExecutable,
          executablePathOrDie: (sdkLanguage) => executablePathOrDie("ffmpeg", ffmpegExecutable, ffmpeg.installByDefault, sdkLanguage),
          installType: ffmpeg.installByDefault ? "download-by-default" : "download-on-demand",
          _validateHostRequirements: () => Promise.resolve(),
          downloadURLs: this._downloadURLs(ffmpeg),
          _install: () => this._downloadExecutable(ffmpeg, ffmpegExecutable),
          _dependencyGroup: "tools",
          _isHermeticInstallation: true
        });
        const winldd = descriptors.find((d2) => d2.name === "winldd");
        const winlddExecutable = findExecutablePath(winldd.dir, "winldd");
        this._executables.push({
          type: "tool",
          name: "winldd",
          browserName: void 0,
          directory: winldd.dir,
          executablePath: () => winlddExecutable,
          executablePathOrDie: (sdkLanguage) => executablePathOrDie("winldd", winlddExecutable, winldd.installByDefault, sdkLanguage),
          installType: process.platform === "win32" ? "download-by-default" : "none",
          _validateHostRequirements: () => Promise.resolve(),
          downloadURLs: this._downloadURLs(winldd),
          _install: () => this._downloadExecutable(winldd, winlddExecutable),
          _dependencyGroup: "tools",
          _isHermeticInstallation: true
        });
        const android2 = descriptors.find((d2) => d2.name === "android");
        this._executables.push({
          type: "tool",
          name: "android",
          browserName: void 0,
          directory: android2.dir,
          executablePath: () => void 0,
          executablePathOrDie: () => "",
          installType: "download-on-demand",
          _validateHostRequirements: () => Promise.resolve(),
          downloadURLs: this._downloadURLs(android2),
          _install: () => this._downloadExecutable(android2),
          _dependencyGroup: "tools",
          _isHermeticInstallation: true
        });
        this._executables.push({
          type: "browser",
          name: "bidi",
          browserName: "bidi",
          directory: void 0,
          executablePath: () => void 0,
          executablePathOrDie: () => "",
          installType: "none",
          _validateHostRequirements: () => Promise.resolve(),
          downloadURLs: [],
          _install: () => Promise.resolve(),
          _dependencyGroup: "tools",
          _isHermeticInstallation: true
        });
      }
      _createChromiumChannel(name, lookAt, install) {
        const executablePath = (sdkLanguage, shouldThrow) => {
          const suffix = lookAt[process.platform];
          if (!suffix) {
            if (shouldThrow) throw new Error(`Chromium distribution '${name}' is not supported on ${process.platform}`);
            return void 0;
          }
          const prefixes = process.platform === "win32" ? [process.env.LOCALAPPDATA, process.env.PROGRAMFILES, process.env["PROGRAMFILES(X86)"]].filter(Boolean) : [""];
          for (const prefix of prefixes) {
            const executablePath2 = _path2.default.join(prefix, suffix);
            if ((0, _fileUtils.canAccessFile)(executablePath2)) return executablePath2;
          }
          if (!shouldThrow) return void 0;
          const location2 = prefixes.length ? ` at ${_path2.default.join(prefixes[0], suffix)}` : ``;
          const installation = install ? `
Run "${buildPlaywrightCLICommand(sdkLanguage, "install " + name)}"` : "";
          throw new Error(`Chromium distribution '${name}' is not found${location2}${installation}`);
        };
        return {
          type: "channel",
          name,
          browserName: "chromium",
          directory: void 0,
          executablePath: (sdkLanguage) => executablePath(sdkLanguage, false),
          executablePathOrDie: (sdkLanguage) => executablePath(sdkLanguage, true),
          installType: install ? "install-script" : "none",
          _validateHostRequirements: () => Promise.resolve(),
          _isHermeticInstallation: false,
          _install: install
        };
      }
      _createBidiFirefoxChannel(name, lookAt, install) {
        const executablePath = (sdkLanguage, shouldThrow) => {
          const suffix = lookAt[process.platform];
          if (!suffix) {
            if (shouldThrow) throw new Error(`Firefox distribution '${name}' is not supported on ${process.platform}`);
            return void 0;
          }
          const folder = _path2.default.resolve("firefox");
          let channelName = "stable";
          if (name.includes("beta")) channelName = "beta";
          else if (name.includes("nightly")) channelName = "nightly";
          const installedVersions = _fs.default.readdirSync(folder);
          const found = installedVersions.filter((e2) => e2.includes(channelName));
          if (found.length === 1) return _path2.default.join(folder, found[0], suffix);
          if (found.length > 1) {
            if (shouldThrow) throw new Error(`Multiple Firefox installations found for channel '${name}': ${found.join(", ")}`);
            else return void 0;
          }
          if (shouldThrow) throw new Error(`Cannot find Firefox installation for channel '${name}' under ${folder}`);
          return void 0;
        };
        return {
          type: "channel",
          name,
          browserName: "bidi",
          directory: void 0,
          executablePath: (sdkLanguage) => executablePath(sdkLanguage, false),
          executablePathOrDie: (sdkLanguage) => executablePath(sdkLanguage, true),
          installType: "none",
          _validateHostRequirements: () => Promise.resolve(),
          _isHermeticInstallation: true,
          _install: install
        };
      }
      _createBidiChannel(name, lookAt, install) {
        const executablePath = (sdkLanguage, shouldThrow) => {
          const suffix = lookAt[process.platform];
          if (!suffix) {
            if (shouldThrow) throw new Error(`Firefox distribution '${name}' is not supported on ${process.platform}`);
            return void 0;
          }
          const prefixes = process.platform === "win32" ? [process.env.LOCALAPPDATA, process.env.PROGRAMFILES, process.env["PROGRAMFILES(X86)"]].filter(Boolean) : [""];
          for (const prefix of prefixes) {
            const executablePath2 = _path2.default.join(prefix, suffix);
            if ((0, _fileUtils.canAccessFile)(executablePath2)) return executablePath2;
          }
          if (!shouldThrow) return void 0;
          const location2 = prefixes.length ? ` at ${_path2.default.join(prefixes[0], suffix)}` : ``;
          const installation = install ? `
Run "${buildPlaywrightCLICommand(sdkLanguage, "install " + name)}"` : "";
          throw new Error(`Firefox distribution '${name}' is not found${location2}${installation}`);
        };
        return {
          type: "channel",
          name,
          browserName: "bidi",
          directory: void 0,
          executablePath: (sdkLanguage) => executablePath(sdkLanguage, false),
          executablePathOrDie: (sdkLanguage) => executablePath(sdkLanguage, true),
          installType: install ? "install-script" : "none",
          _validateHostRequirements: () => Promise.resolve(),
          _isHermeticInstallation: false,
          _install: install
        };
      }
      executables() {
        return this._executables;
      }
      findExecutable(name) {
        return this._executables.find((b) => b.name === name);
      }
      defaultExecutables() {
        return this._executables.filter((e2) => e2.installType === "download-by-default");
      }
      _dedupe(executables) {
        return Array.from(new Set(executables));
      }
      async _validateHostRequirements(sdkLanguage, browserDirectory, linuxLddDirectories, dlOpenLibraries, windowsExeAndDllDirectories) {
        if (_os.default.platform() === "linux") return await (0, _dependencies.validateDependenciesLinux)(sdkLanguage, linuxLddDirectories.map((d2) => _path2.default.join(browserDirectory, d2)), dlOpenLibraries);
        if (_os.default.platform() === "win32" && _os.default.arch() === "x64") return await (0, _dependencies.validateDependenciesWindows)(sdkLanguage, windowsExeAndDllDirectories.map((d2) => _path2.default.join(browserDirectory, d2)));
      }
      async installDeps(executablesToInstallDeps, dryRun) {
        const executables = this._dedupe(executablesToInstallDeps);
        const targets = /* @__PURE__ */ new Set();
        for (const executable of executables) {
          if (executable._dependencyGroup) targets.add(executable._dependencyGroup);
        }
        targets.add("tools");
        if (_os.default.platform() === "win32") return await (0, _dependencies.installDependenciesWindows)(targets, dryRun);
        if (_os.default.platform() === "linux") return await (0, _dependencies.installDependenciesLinux)(targets, dryRun);
      }
      async install(executablesToInstall, forceReinstall) {
        const executables = this._dedupe(executablesToInstall);
        await _fs.default.promises.mkdir(registryDirectory, {
          recursive: true
        });
        const lockfilePath = _path2.default.join(registryDirectory, "__dirlock");
        const linksDir = _path2.default.join(registryDirectory, ".links");
        let releaseLock;
        try {
          releaseLock = await _utilsBundle.lockfile.lock(registryDirectory, {
            retries: {
              // Retry 20 times during 10 minutes with
              // exponential back-off.
              // See documentation at: https://www.npmjs.com/package/retry#retrytimeoutsoptions
              retries: 20,
              factor: 1.27579
            },
            onCompromised: (err) => {
              throw new Error(`${err.message} Path: ${lockfilePath}`);
            },
            lockfilePath
          });
          await _fs.default.promises.mkdir(linksDir, {
            recursive: true
          });
          await _fs.default.promises.writeFile(_path2.default.join(linksDir, (0, _utils.calculateSha1)(PACKAGE_PATH)), PACKAGE_PATH);
          await this._validateInstallationCache(linksDir);
          for (const executable of executables) {
            if (!executable._install) throw new Error(`ERROR: Playwright does not support installing ${executable.name}`);
            const {
              embedderName
            } = (0, _userAgent.getEmbedderName)();
            if (!(0, _utils.getAsBooleanFromENV)("CI") && !executable._isHermeticInstallation && !forceReinstall && executable.executablePath(embedderName)) {
              const command = buildPlaywrightCLICommand(embedderName, "install --force " + executable.name);
              throw new Error("\n" + (0, _ascii.wrapInASCIIBox)([`ATTENTION: "${executable.name}" is already installed on the system!`, ``, `"${executable.name}" installation is not hermetic; installing newer version`, `requires *removal* of a current installation first.`, ``, `To *uninstall* current version and re-install latest "${executable.name}":`, ``, `- Close all running instances of "${executable.name}", if any`, `- Use "--force" to install browser:`, ``, `    ${command}`, ``, `<3 Playwright Team`].join("\n"), 1));
            }
            await executable._install();
          }
        } catch (e2) {
          if (e2.code === "ELOCKED") {
            const rmCommand = process.platform === "win32" ? "rm -R" : "rm -rf";
            throw new Error("\n" + (0, _ascii.wrapInASCIIBox)([`An active lockfile is found at:`, ``, `  ${lockfilePath}`, ``, `Either:`, `- wait a few minutes if other Playwright is installing browsers in parallel`, `- remove lock manually with:`, ``, `    ${rmCommand} ${lockfilePath}`, ``, `<3 Playwright Team`].join("\n"), 1));
          } else {
            throw e2;
          }
        } finally {
          if (releaseLock) await releaseLock();
        }
      }
      async uninstall(all) {
        const linksDir = _path2.default.join(registryDirectory, ".links");
        if (all) {
          const links = await _fs.default.promises.readdir(linksDir).catch(() => []);
          for (const link2 of links) await _fs.default.promises.unlink(_path2.default.join(linksDir, link2));
        } else {
          await _fs.default.promises.unlink(_path2.default.join(linksDir, (0, _utils.calculateSha1)(PACKAGE_PATH))).catch(() => {
          });
        }
        await this._validateInstallationCache(linksDir);
        return {
          numberOfBrowsersLeft: (await _fs.default.promises.readdir(registryDirectory).catch(() => [])).filter((browserDirectory) => isBrowserDirectory(browserDirectory)).length
        };
      }
      async validateHostRequirementsForExecutablesIfNeeded(executables, sdkLanguage) {
        if ((0, _utils.getAsBooleanFromENV)("PLAYWRIGHT_SKIP_VALIDATE_HOST_REQUIREMENTS")) {
          process.stderr.write("Skipping host requirements validation logic because `PLAYWRIGHT_SKIP_VALIDATE_HOST_REQUIREMENTS` env variable is set.\n");
          return;
        }
        for (const executable of executables) await this._validateHostRequirementsForExecutableIfNeeded(executable, sdkLanguage);
      }
      async _validateHostRequirementsForExecutableIfNeeded(executable, sdkLanguage) {
        const kMaximumReValidationPeriod = 30 * 24 * 60 * 60 * 1e3;
        if (!executable.directory) return;
        const markerFile = _path2.default.join(executable.directory, "DEPENDENCIES_VALIDATED");
        if (await _fs.default.promises.stat(markerFile).then((stat2) => Date.now() - stat2.mtime.getTime() < kMaximumReValidationPeriod).catch(() => false)) return;
        _debugLogger.debugLogger.log("install", `validating host requirements for "${executable.name}"`);
        try {
          await executable._validateHostRequirements(sdkLanguage);
          _debugLogger.debugLogger.log("install", `validation passed for ${executable.name}`);
        } catch (error) {
          _debugLogger.debugLogger.log("install", `validation failed for ${executable.name}`);
          throw error;
        }
        await _fs.default.promises.writeFile(markerFile, "").catch(() => {
        });
      }
      _downloadURLs(descriptor) {
        const paths = DOWNLOAD_PATHS[descriptor.name];
        const downloadPathTemplate = paths[_hostPlatform.hostPlatform] || paths["<unknown>"];
        if (!downloadPathTemplate) return [];
        const downloadPath = util.format(downloadPathTemplate, descriptor.revision);
        let downloadURLs = PLAYWRIGHT_CDN_MIRRORS.map((mirror) => `${mirror}/${downloadPath}`);
        let downloadHostEnv;
        if (descriptor.name.startsWith("chromium")) downloadHostEnv = "PLAYWRIGHT_CHROMIUM_DOWNLOAD_HOST";
        else if (descriptor.name.startsWith("firefox")) downloadHostEnv = "PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST";
        else if (descriptor.name.startsWith("webkit")) downloadHostEnv = "PLAYWRIGHT_WEBKIT_DOWNLOAD_HOST";
        const customHostOverride = downloadHostEnv && (0, _utils.getFromENV)(downloadHostEnv) || (0, _utils.getFromENV)("PLAYWRIGHT_DOWNLOAD_HOST");
        if (customHostOverride) downloadURLs = [`${customHostOverride}/${downloadPath}`];
        return downloadURLs;
      }
      async _downloadExecutable(descriptor, executablePath) {
        const downloadURLs = this._downloadURLs(descriptor);
        if (!downloadURLs.length) throw new Error(`ERROR: Playwright does not support ${descriptor.name} on ${_hostPlatform.hostPlatform}`);
        if (!_hostPlatform.isOfficiallySupportedPlatform) (0, _browserFetcher.logPolitely)(`BEWARE: your OS is not officially supported by Playwright; downloading fallback build for ${_hostPlatform.hostPlatform}.`);
        if (descriptor.hasRevisionOverride) {
          const message = `You are using a frozen ${descriptor.name} browser which does not receive updates anymore on ${_hostPlatform.hostPlatform}. Please update to the latest version of your operating system to test up-to-date browsers.`;
          if (process.env.GITHUB_ACTIONS) console.log(`::warning title=Playwright::${message}`);
          else (0, _browserFetcher.logPolitely)(message);
        }
        const displayName = descriptor.name.split("-").map((word) => {
          return word === "ffmpeg" ? "FFMPEG" : word.charAt(0).toUpperCase() + word.slice(1);
        }).join(" ");
        const title = descriptor.browserVersion ? `${displayName} ${descriptor.browserVersion} (playwright build v${descriptor.revision})` : `${displayName} playwright build v${descriptor.revision}`;
        const downloadFileName = `playwright-download-${descriptor.name}-${_hostPlatform.hostPlatform}-${descriptor.revision}.zip`;
        const downloadConnectionTimeoutEnv = (0, _utils.getFromENV)("PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT");
        const downloadConnectionTimeout = +(downloadConnectionTimeoutEnv || "0") || 3e4;
        await (0, _browserFetcher.downloadBrowserWithProgressBar)(title, descriptor.dir, executablePath, downloadURLs, downloadFileName, downloadConnectionTimeout).catch((e2) => {
          throw new Error(`Failed to download ${title}, caused by
${e2.stack}`);
        });
      }
      async _installMSEdgeChannel(channel, scripts) {
        const scriptArgs = [];
        if (process.platform !== "linux") {
          const products = lowercaseAllKeys(JSON.parse(await (0, _network.fetchData)({
            url: "https://edgeupdates.microsoft.com/api/products"
          })));
          const productName = {
            "msedge": "Stable",
            "msedge-beta": "Beta",
            "msedge-dev": "Dev"
          }[channel];
          const product = products.find((product2) => product2.product === productName);
          const searchConfig = {
            darwin: {
              platform: "MacOS",
              arch: "universal",
              artifact: "pkg"
            },
            win32: {
              platform: "Windows",
              arch: "x64",
              artifact: "msi"
            }
          }[process.platform];
          const release = searchConfig ? product.releases.find((release2) => release2.platform === searchConfig.platform && release2.architecture === searchConfig.arch && release2.artifacts.length > 0) : null;
          const artifact2 = release ? release.artifacts.find((artifact3) => artifact3.artifactname === searchConfig.artifact) : null;
          if (artifact2) scriptArgs.push(
            artifact2.location
            /* url */
          );
          else throw new Error(`Cannot install ${channel} on ${process.platform}`);
        }
        await this._installChromiumChannel(channel, scripts, scriptArgs);
      }
      async _installChromiumChannel(channel, scripts, scriptArgs = []) {
        const scriptName = scripts[process.platform];
        if (!scriptName) throw new Error(`Cannot install ${channel} on ${process.platform}`);
        const cwd2 = BIN_PATH;
        const isPowerShell = scriptName.endsWith(".ps1");
        if (isPowerShell) {
          const args = ["-ExecutionPolicy", "Bypass", "-File", _path2.default.join(BIN_PATH, scriptName), ...scriptArgs];
          const {
            code
          } = await (0, _spawnAsync.spawnAsync)("powershell.exe", args, {
            cwd: cwd2,
            stdio: "inherit"
          });
          if (code !== 0) throw new Error(`Failed to install ${channel}`);
        } else {
          const {
            command,
            args,
            elevatedPermissions
          } = await (0, _dependencies.transformCommandsForRoot)([`bash "${_path2.default.join(BIN_PATH, scriptName)}" ${scriptArgs.join("")}`]);
          if (elevatedPermissions) console.log("Switching to root user to install dependencies...");
          const {
            code
          } = await (0, _spawnAsync.spawnAsync)(command, args, {
            cwd: cwd2,
            stdio: "inherit"
          });
          if (code !== 0) throw new Error(`Failed to install ${channel}`);
        }
      }
      async _validateInstallationCache(linksDir) {
        const usedBrowserPaths = /* @__PURE__ */ new Set();
        for (const fileName of await _fs.default.promises.readdir(linksDir)) {
          const linkPath = _path2.default.join(linksDir, fileName);
          let linkTarget = "";
          try {
            linkTarget = (await _fs.default.promises.readFile(linkPath)).toString();
            const browsersJSON = commonjsRequire(_path2.default.join(linkTarget, "browsers.json"));
            const descriptors = readDescriptors(browsersJSON);
            for (const browserName of allDownloadable) {
              const descriptor = descriptors.find((d2) => d2.name === browserName);
              if (!descriptor) continue;
              const usedBrowserPath = descriptor.dir;
              const browserRevision = parseInt(descriptor.revision, 10);
              const shouldHaveMarkerFile = browserName === "chromium" && (browserRevision >= 786218 || browserRevision < 3e5) || browserName === "firefox" && browserRevision >= 1128 || browserName === "webkit" && browserRevision >= 1307 || // All new applications have a marker file right away.
              browserName !== "firefox" && browserName !== "chromium" && browserName !== "webkit";
              if (!shouldHaveMarkerFile || await (0, _fileUtils.existsAsync)(browserDirectoryToMarkerFilePath(usedBrowserPath))) usedBrowserPaths.add(usedBrowserPath);
            }
          } catch (e2) {
            await _fs.default.promises.unlink(linkPath).catch((e3) => {
            });
          }
        }
        if (!(0, _utils.getAsBooleanFromENV)("PLAYWRIGHT_SKIP_BROWSER_GC")) {
          let downloadedBrowsers = (await _fs.default.promises.readdir(registryDirectory)).map((file2) => _path2.default.join(registryDirectory, file2));
          downloadedBrowsers = downloadedBrowsers.filter((file2) => isBrowserDirectory(file2));
          const directories = new Set(downloadedBrowsers);
          for (const browserDirectory of usedBrowserPaths) directories.delete(browserDirectory);
          for (const directory of directories) (0, _browserFetcher.logPolitely)("Removing unused browser at " + directory);
          await (0, _fileUtils.removeFolders)([...directories]);
        }
      }
    }
    exports.Registry = Registry;
    function browserDirectoryToMarkerFilePath(browserDirectory) {
      return _path2.default.join(browserDirectory, "INSTALLATION_COMPLETE");
    }
    function buildPlaywrightCLICommand(sdkLanguage, parameters) {
      switch (sdkLanguage) {
        case "python":
          return `playwright ${parameters}`;
        case "java":
          return `mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="${parameters}"`;
        case "csharp":
          return `pwsh bin/Debug/netX/playwright.ps1 ${parameters}`;
        default: {
          const packageManagerCommand = (0, _utils.getPackageManagerExecCommand)();
          return `${packageManagerCommand} playwright ${parameters}`;
        }
      }
    }
    async function installBrowsersForNpmInstall(browsers2) {
      if ((0, _utils.getAsBooleanFromENV)("PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD")) {
        (0, _browserFetcher.logPolitely)("Skipping browsers download because `PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD` env variable is set");
        return false;
      }
      const executables = [];
      if (process.platform === "win32") executables.push(registry2.findExecutable("winldd"));
      for (const browserName of browsers2) {
        const executable = registry2.findExecutable(browserName);
        if (!executable || executable.installType === "none") throw new Error(`Cannot install ${browserName}`);
        executables.push(executable);
      }
      await registry2.install(
        executables,
        false
        /* forceReinstall */
      );
    }
    function findChromiumChannel(sdkLanguage) {
      let channel = null;
      for (const name of ["chromium", "chrome", "msedge"]) {
        try {
          registry2.findExecutable(name).executablePathOrDie(sdkLanguage);
          channel = name === "chromium" ? void 0 : name;
          break;
        } catch (e2) {
        }
      }
      if (channel === null) {
        const installCommand = buildPlaywrightCLICommand(sdkLanguage, `install chromium`);
        const prettyMessage = [`No chromium-based browser found on the system.`, `Please run the following command to download one:`, ``, `    ${installCommand}`, ``, `<3 Playwright Team`].join("\n");
        throw new Error("\n" + (0, _ascii.wrapInASCIIBox)(prettyMessage, 1));
      }
      return channel;
    }
    function lowercaseAllKeys(json2) {
      if (typeof json2 !== "object" || !json2) return json2;
      if (Array.isArray(json2)) return json2.map(lowercaseAllKeys);
      const result = {};
      for (const [key, value] of Object.entries(json2)) result[key.toLowerCase()] = lowercaseAllKeys(value);
      return result;
    }
    const registry2 = exports.registry = new Registry(require$$15);
  })(registry);
  return registry;
}
var dispatcher = {};
var validator = {};
var validatorPrimitives = {};
var hasRequiredValidatorPrimitives;
function requireValidatorPrimitives() {
  if (hasRequiredValidatorPrimitives) return validatorPrimitives;
  hasRequiredValidatorPrimitives = 1;
  Object.defineProperty(validatorPrimitives, "__esModule", {
    value: true
  });
  validatorPrimitives.ValidationError = void 0;
  validatorPrimitives.createMetadataValidator = createMetadataValidator;
  validatorPrimitives.findValidator = findValidator;
  validatorPrimitives.maybeFindValidator = maybeFindValidator;
  validatorPrimitives.tUndefined = validatorPrimitives.tType = validatorPrimitives.tString = validatorPrimitives.tOptional = validatorPrimitives.tObject = validatorPrimitives.tNumber = validatorPrimitives.tEnum = validatorPrimitives.tChannel = validatorPrimitives.tBoolean = validatorPrimitives.tBinary = validatorPrimitives.tArray = validatorPrimitives.tAny = validatorPrimitives.scheme = void 0;
  class ValidationError extends Error {
  }
  validatorPrimitives.ValidationError = ValidationError;
  const scheme = validatorPrimitives.scheme = {};
  function findValidator(type, method, kind) {
    const validator2 = maybeFindValidator(type, method, kind);
    if (!validator2) throw new ValidationError(`Unknown scheme for ${kind}: ${type}.${method}`);
    return validator2;
  }
  function maybeFindValidator(type, method, kind) {
    const schemeName = type + (kind === "Initializer" ? "" : method[0].toUpperCase() + method.substring(1)) + kind;
    return scheme[schemeName];
  }
  function createMetadataValidator() {
    return tOptional(scheme["Metadata"]);
  }
  const tNumber = (arg, path, context) => {
    if (arg instanceof Number) return arg.valueOf();
    if (typeof arg === "number") return arg;
    throw new ValidationError(`${path}: expected number, got ${typeof arg}`);
  };
  validatorPrimitives.tNumber = tNumber;
  const tBoolean = (arg, path, context) => {
    if (arg instanceof Boolean) return arg.valueOf();
    if (typeof arg === "boolean") return arg;
    throw new ValidationError(`${path}: expected boolean, got ${typeof arg}`);
  };
  validatorPrimitives.tBoolean = tBoolean;
  const tString = (arg, path, context) => {
    if (arg instanceof String) return arg.valueOf();
    if (typeof arg === "string") return arg;
    throw new ValidationError(`${path}: expected string, got ${typeof arg}`);
  };
  validatorPrimitives.tString = tString;
  const tBinary = (arg, path, context) => {
    if (context.binary === "fromBase64") {
      if (arg instanceof String) return Buffer.from(arg.valueOf(), "base64");
      if (typeof arg === "string") return Buffer.from(arg, "base64");
      throw new ValidationError(`${path}: expected base64-encoded buffer, got ${typeof arg}`);
    }
    if (context.binary === "toBase64") {
      if (!(arg instanceof Buffer)) throw new ValidationError(`${path}: expected Buffer, got ${typeof arg}`);
      return arg.toString("base64");
    }
    if (context.binary === "buffer") {
      if (!(arg instanceof Buffer)) throw new ValidationError(`${path}: expected Buffer, got ${typeof arg}`);
      return arg;
    }
    throw new ValidationError(`Unsupported binary behavior "${context.binary}"`);
  };
  validatorPrimitives.tBinary = tBinary;
  const tUndefined = (arg, path, context) => {
    if (Object.is(arg, void 0)) return arg;
    throw new ValidationError(`${path}: expected undefined, got ${typeof arg}`);
  };
  validatorPrimitives.tUndefined = tUndefined;
  const tAny = (arg, path, context) => {
    return arg;
  };
  validatorPrimitives.tAny = tAny;
  const tOptional = (v2) => {
    return (arg, path, context) => {
      if (Object.is(arg, void 0)) return arg;
      return v2(arg, path, context);
    };
  };
  validatorPrimitives.tOptional = tOptional;
  const tArray = (v2) => {
    return (arg, path, context) => {
      if (!Array.isArray(arg)) throw new ValidationError(`${path}: expected array, got ${typeof arg}`);
      return arg.map((x2, index) => v2(x2, path + "[" + index + "]", context));
    };
  };
  validatorPrimitives.tArray = tArray;
  const tObject = (s2) => {
    return (arg, path, context) => {
      if (Object.is(arg, null)) throw new ValidationError(`${path}: expected object, got null`);
      if (typeof arg !== "object") throw new ValidationError(`${path}: expected object, got ${typeof arg}`);
      const result = {};
      for (const [key, v2] of Object.entries(s2)) {
        const value = v2(arg[key], path ? path + "." + key : key, context);
        if (!Object.is(value, void 0)) result[key] = value;
      }
      if (context.isUnderTest()) {
        for (const [key, value] of Object.entries(arg)) {
          if (key.startsWith("__testHook")) result[key] = value;
        }
      }
      return result;
    };
  };
  validatorPrimitives.tObject = tObject;
  const tEnum = (e2) => {
    return (arg, path, context) => {
      if (!e2.includes(arg)) throw new ValidationError(`${path}: expected one of (${e2.join("|")})`);
      return arg;
    };
  };
  validatorPrimitives.tEnum = tEnum;
  const tChannel = (names) => {
    return (arg, path, context) => {
      return context.tChannelImpl(names, arg, path, context);
    };
  };
  validatorPrimitives.tChannel = tChannel;
  const tType = (name) => {
    return (arg, path, context) => {
      const v2 = scheme[name];
      if (!v2) throw new ValidationError(path + ': unknown type "' + name + '"');
      return v2(arg, path, context);
    };
  };
  validatorPrimitives.tType = tType;
  return validatorPrimitives;
}
var hasRequiredValidator;
function requireValidator() {
  if (hasRequiredValidator) return validator;
  hasRequiredValidator = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "ValidationError", {
      enumerable: true,
      get: function() {
        return _validatorPrimitives.ValidationError;
      }
    });
    Object.defineProperty(exports, "createMetadataValidator", {
      enumerable: true,
      get: function() {
        return _validatorPrimitives.createMetadataValidator;
      }
    });
    Object.defineProperty(exports, "findValidator", {
      enumerable: true,
      get: function() {
        return _validatorPrimitives.findValidator;
      }
    });
    Object.defineProperty(exports, "maybeFindValidator", {
      enumerable: true,
      get: function() {
        return _validatorPrimitives.maybeFindValidator;
      }
    });
    var _validatorPrimitives = requireValidatorPrimitives();
    _validatorPrimitives.scheme.StackFrame = (0, _validatorPrimitives.tObject)({
      file: _validatorPrimitives.tString,
      line: _validatorPrimitives.tNumber,
      column: _validatorPrimitives.tNumber,
      function: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.Metadata = (0, _validatorPrimitives.tObject)({
      location: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        file: _validatorPrimitives.tString,
        line: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
        column: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
      })),
      apiName: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      internal: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      stepId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.ClientSideCallMetadata = (0, _validatorPrimitives.tObject)({
      id: _validatorPrimitives.tNumber,
      stack: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("StackFrame")))
    });
    _validatorPrimitives.scheme.Point = (0, _validatorPrimitives.tObject)({
      x: _validatorPrimitives.tNumber,
      y: _validatorPrimitives.tNumber
    });
    _validatorPrimitives.scheme.Rect = (0, _validatorPrimitives.tObject)({
      x: _validatorPrimitives.tNumber,
      y: _validatorPrimitives.tNumber,
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    });
    _validatorPrimitives.scheme.SerializedValue = (0, _validatorPrimitives.tObject)({
      n: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      b: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      s: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      v: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["null", "undefined", "NaN", "Infinity", "-Infinity", "-0"])),
      d: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      u: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      bi: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      e: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        m: _validatorPrimitives.tString,
        n: _validatorPrimitives.tString,
        s: _validatorPrimitives.tString
      })),
      r: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        p: _validatorPrimitives.tString,
        f: _validatorPrimitives.tString
      })),
      a: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SerializedValue"))),
      o: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        k: _validatorPrimitives.tString,
        v: (0, _validatorPrimitives.tType)("SerializedValue")
      }))),
      h: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      id: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      ref: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.SerializedArgument = (0, _validatorPrimitives.tObject)({
      value: (0, _validatorPrimitives.tType)("SerializedValue"),
      handles: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)("*"))
    });
    _validatorPrimitives.scheme.ExpectedTextValue = (0, _validatorPrimitives.tObject)({
      string: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      regexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      regexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      matchSubstring: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      ignoreCase: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      normalizeWhiteSpace: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.AXNode = (0, _validatorPrimitives.tObject)({
      role: _validatorPrimitives.tString,
      name: _validatorPrimitives.tString,
      valueString: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      valueNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      description: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      keyshortcuts: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      roledescription: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      valuetext: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      disabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      expanded: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      focused: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      modal: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      multiline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      multiselectable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      readonly: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      required: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      selected: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      checked: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["checked", "unchecked", "mixed"])),
      pressed: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["pressed", "released", "mixed"])),
      level: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      valuemin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      valuemax: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      autocomplete: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      haspopup: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      invalid: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      orientation: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      children: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("AXNode")))
    });
    _validatorPrimitives.scheme.SetNetworkCookie = (0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      value: _validatorPrimitives.tString,
      url: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      domain: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      path: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      expires: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      httpOnly: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      secure: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      sameSite: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["Strict", "Lax", "None"]))
    });
    _validatorPrimitives.scheme.NetworkCookie = (0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      value: _validatorPrimitives.tString,
      domain: _validatorPrimitives.tString,
      path: _validatorPrimitives.tString,
      expires: _validatorPrimitives.tNumber,
      httpOnly: _validatorPrimitives.tBoolean,
      secure: _validatorPrimitives.tBoolean,
      sameSite: (0, _validatorPrimitives.tEnum)(["Strict", "Lax", "None"])
    });
    _validatorPrimitives.scheme.NameValue = (0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      value: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.IndexedDBDatabase = (0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      version: _validatorPrimitives.tNumber,
      stores: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        name: _validatorPrimitives.tString,
        autoIncrement: _validatorPrimitives.tBoolean,
        keyPath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        keyPathArray: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
        records: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
          key: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
          keyEncoded: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
          value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
          valueEncoded: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny)
        })),
        indexes: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
          name: _validatorPrimitives.tString,
          keyPath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
          keyPathArray: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
          multiEntry: _validatorPrimitives.tBoolean,
          unique: _validatorPrimitives.tBoolean
        }))
      }))
    });
    _validatorPrimitives.scheme.SetOriginStorage = (0, _validatorPrimitives.tObject)({
      origin: _validatorPrimitives.tString,
      localStorage: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")),
      indexedDB: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("IndexedDBDatabase")))
    });
    _validatorPrimitives.scheme.OriginStorage = (0, _validatorPrimitives.tObject)({
      origin: _validatorPrimitives.tString,
      localStorage: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")),
      indexedDB: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("IndexedDBDatabase")))
    });
    _validatorPrimitives.scheme.SerializedError = (0, _validatorPrimitives.tObject)({
      error: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        message: _validatorPrimitives.tString,
        name: _validatorPrimitives.tString,
        stack: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
      })),
      value: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("SerializedValue"))
    });
    _validatorPrimitives.scheme.RecordHarOptions = (0, _validatorPrimitives.tObject)({
      path: _validatorPrimitives.tString,
      content: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["embed", "attach", "omit"])),
      mode: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["full", "minimal"])),
      urlGlob: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      urlRegexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      urlRegexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.FormField = (0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      file: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        name: _validatorPrimitives.tString,
        mimeType: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        buffer: _validatorPrimitives.tBinary
      }))
    });
    _validatorPrimitives.scheme.APIRequestContextInitializer = (0, _validatorPrimitives.tObject)({
      tracing: (0, _validatorPrimitives.tChannel)(["Tracing"])
    });
    _validatorPrimitives.scheme.APIRequestContextFetchParams = (0, _validatorPrimitives.tObject)({
      url: _validatorPrimitives.tString,
      encodedParams: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      params: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
      method: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      headers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
      postData: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      jsonData: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      formData: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
      multipartData: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("FormField"))),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      failOnStatusCode: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      maxRedirects: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      maxRetries: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.APIRequestContextFetchResult = (0, _validatorPrimitives.tObject)({
      response: (0, _validatorPrimitives.tType)("APIResponse")
    });
    _validatorPrimitives.scheme.APIRequestContextFetchResponseBodyParams = (0, _validatorPrimitives.tObject)({
      fetchUid: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.APIRequestContextFetchResponseBodyResult = (0, _validatorPrimitives.tObject)({
      binary: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary)
    });
    _validatorPrimitives.scheme.APIRequestContextFetchLogParams = (0, _validatorPrimitives.tObject)({
      fetchUid: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.APIRequestContextFetchLogResult = (0, _validatorPrimitives.tObject)({
      log: (0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.APIRequestContextStorageStateParams = (0, _validatorPrimitives.tObject)({
      indexedDB: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.APIRequestContextStorageStateResult = (0, _validatorPrimitives.tObject)({
      cookies: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NetworkCookie")),
      origins: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("OriginStorage"))
    });
    _validatorPrimitives.scheme.APIRequestContextDisposeAPIResponseParams = (0, _validatorPrimitives.tObject)({
      fetchUid: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.APIRequestContextDisposeAPIResponseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.APIRequestContextDisposeParams = (0, _validatorPrimitives.tObject)({
      reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.APIRequestContextDisposeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.APIResponse = (0, _validatorPrimitives.tObject)({
      fetchUid: _validatorPrimitives.tString,
      url: _validatorPrimitives.tString,
      status: _validatorPrimitives.tNumber,
      statusText: _validatorPrimitives.tString,
      headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
    });
    _validatorPrimitives.scheme.LifecycleEvent = (0, _validatorPrimitives.tEnum)(["load", "domcontentloaded", "networkidle", "commit"]);
    _validatorPrimitives.scheme.LocalUtilsInitializer = (0, _validatorPrimitives.tObject)({
      deviceDescriptors: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        name: _validatorPrimitives.tString,
        descriptor: (0, _validatorPrimitives.tObject)({
          userAgent: _validatorPrimitives.tString,
          viewport: (0, _validatorPrimitives.tObject)({
            width: _validatorPrimitives.tNumber,
            height: _validatorPrimitives.tNumber
          }),
          screen: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
            width: _validatorPrimitives.tNumber,
            height: _validatorPrimitives.tNumber
          })),
          deviceScaleFactor: _validatorPrimitives.tNumber,
          isMobile: _validatorPrimitives.tBoolean,
          hasTouch: _validatorPrimitives.tBoolean,
          defaultBrowserType: (0, _validatorPrimitives.tEnum)(["chromium", "firefox", "webkit"])
        })
      }))
    });
    _validatorPrimitives.scheme.LocalUtilsZipParams = (0, _validatorPrimitives.tObject)({
      zipFile: _validatorPrimitives.tString,
      entries: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")),
      stacksId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      mode: (0, _validatorPrimitives.tEnum)(["write", "append"]),
      includeSources: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.LocalUtilsZipResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.LocalUtilsHarOpenParams = (0, _validatorPrimitives.tObject)({
      file: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.LocalUtilsHarOpenResult = (0, _validatorPrimitives.tObject)({
      harId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      error: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.LocalUtilsHarLookupParams = (0, _validatorPrimitives.tObject)({
      harId: _validatorPrimitives.tString,
      url: _validatorPrimitives.tString,
      method: _validatorPrimitives.tString,
      headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")),
      postData: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      isNavigationRequest: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.LocalUtilsHarLookupResult = (0, _validatorPrimitives.tObject)({
      action: (0, _validatorPrimitives.tEnum)(["error", "redirect", "fulfill", "noentry"]),
      message: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      redirectURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      status: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      headers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
      body: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary)
    });
    _validatorPrimitives.scheme.LocalUtilsHarCloseParams = (0, _validatorPrimitives.tObject)({
      harId: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.LocalUtilsHarCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.LocalUtilsHarUnzipParams = (0, _validatorPrimitives.tObject)({
      zipFile: _validatorPrimitives.tString,
      harFile: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.LocalUtilsHarUnzipResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.LocalUtilsConnectParams = (0, _validatorPrimitives.tObject)({
      wsEndpoint: _validatorPrimitives.tString,
      headers: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
      exposeNetwork: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      slowMo: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      socksProxyRedirectPortForTest: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.LocalUtilsConnectResult = (0, _validatorPrimitives.tObject)({
      pipe: (0, _validatorPrimitives.tChannel)(["JsonPipe"]),
      headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
    });
    _validatorPrimitives.scheme.LocalUtilsTracingStartedParams = (0, _validatorPrimitives.tObject)({
      tracesDir: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      traceName: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.LocalUtilsTracingStartedResult = (0, _validatorPrimitives.tObject)({
      stacksId: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.LocalUtilsAddStackToTracingNoReplyParams = (0, _validatorPrimitives.tObject)({
      callData: (0, _validatorPrimitives.tType)("ClientSideCallMetadata")
    });
    _validatorPrimitives.scheme.LocalUtilsAddStackToTracingNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.LocalUtilsTraceDiscardedParams = (0, _validatorPrimitives.tObject)({
      stacksId: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.LocalUtilsTraceDiscardedResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.RootInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.RootInitializeParams = (0, _validatorPrimitives.tObject)({
      sdkLanguage: (0, _validatorPrimitives.tEnum)(["javascript", "python", "java", "csharp"])
    });
    _validatorPrimitives.scheme.RootInitializeResult = (0, _validatorPrimitives.tObject)({
      playwright: (0, _validatorPrimitives.tChannel)(["Playwright"])
    });
    _validatorPrimitives.scheme.PlaywrightInitializer = (0, _validatorPrimitives.tObject)({
      chromium: (0, _validatorPrimitives.tChannel)(["BrowserType"]),
      firefox: (0, _validatorPrimitives.tChannel)(["BrowserType"]),
      webkit: (0, _validatorPrimitives.tChannel)(["BrowserType"]),
      bidiChromium: (0, _validatorPrimitives.tChannel)(["BrowserType"]),
      bidiFirefox: (0, _validatorPrimitives.tChannel)(["BrowserType"]),
      android: (0, _validatorPrimitives.tChannel)(["Android"]),
      electron: (0, _validatorPrimitives.tChannel)(["Electron"]),
      utils: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["LocalUtils"])),
      selectors: (0, _validatorPrimitives.tChannel)(["Selectors"]),
      preLaunchedBrowser: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Browser"])),
      preConnectedAndroidDevice: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["AndroidDevice"])),
      socksSupport: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["SocksSupport"]))
    });
    _validatorPrimitives.scheme.PlaywrightNewRequestParams = (0, _validatorPrimitives.tObject)({
      baseURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      userAgent: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
      failOnStatusCode: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      clientCertificates: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        origin: _validatorPrimitives.tString,
        cert: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
        key: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
        passphrase: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        pfx: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary)
      }))),
      httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        username: _validatorPrimitives.tString,
        password: _validatorPrimitives.tString,
        origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        send: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["always", "unauthorized"]))
      })),
      proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        server: _validatorPrimitives.tString,
        bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
      })),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      storageState: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        cookies: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NetworkCookie"))),
        origins: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SetOriginStorage")))
      })),
      tracesDir: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.PlaywrightNewRequestResult = (0, _validatorPrimitives.tObject)({
      request: (0, _validatorPrimitives.tChannel)(["APIRequestContext"])
    });
    _validatorPrimitives.scheme.RecorderSource = (0, _validatorPrimitives.tObject)({
      isRecorded: _validatorPrimitives.tBoolean,
      id: _validatorPrimitives.tString,
      label: _validatorPrimitives.tString,
      text: _validatorPrimitives.tString,
      language: _validatorPrimitives.tString,
      highlight: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        line: _validatorPrimitives.tNumber,
        type: _validatorPrimitives.tString
      })),
      revealLine: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      group: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.DebugControllerInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.DebugControllerInspectRequestedEvent = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      locator: _validatorPrimitives.tString,
      ariaSnapshot: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.DebugControllerSetModeRequestedEvent = (0, _validatorPrimitives.tObject)({
      mode: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.DebugControllerStateChangedEvent = (0, _validatorPrimitives.tObject)({
      pageCount: _validatorPrimitives.tNumber
    });
    _validatorPrimitives.scheme.DebugControllerSourceChangedEvent = (0, _validatorPrimitives.tObject)({
      text: _validatorPrimitives.tString,
      header: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      footer: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      actions: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString))
    });
    _validatorPrimitives.scheme.DebugControllerPausedEvent = (0, _validatorPrimitives.tObject)({
      paused: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.DebugControllerInitializeParams = (0, _validatorPrimitives.tObject)({
      codegenId: _validatorPrimitives.tString,
      sdkLanguage: (0, _validatorPrimitives.tEnum)(["javascript", "python", "java", "csharp"])
    });
    _validatorPrimitives.scheme.DebugControllerInitializeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.DebugControllerSetReportStateChangedParams = (0, _validatorPrimitives.tObject)({
      enabled: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.DebugControllerSetReportStateChangedResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.DebugControllerResetForReuseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.DebugControllerResetForReuseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.DebugControllerNavigateParams = (0, _validatorPrimitives.tObject)({
      url: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.DebugControllerNavigateResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.DebugControllerSetRecorderModeParams = (0, _validatorPrimitives.tObject)({
      mode: (0, _validatorPrimitives.tEnum)(["inspecting", "recording", "none"]),
      testIdAttributeName: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.DebugControllerSetRecorderModeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.DebugControllerHighlightParams = (0, _validatorPrimitives.tObject)({
      selector: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      ariaTemplate: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.DebugControllerHighlightResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.DebugControllerHideHighlightParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.DebugControllerHideHighlightResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.DebugControllerResumeParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.DebugControllerResumeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.DebugControllerKillParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.DebugControllerKillResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.DebugControllerCloseAllBrowsersParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.DebugControllerCloseAllBrowsersResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.SocksSupportInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.SocksSupportSocksRequestedEvent = (0, _validatorPrimitives.tObject)({
      uid: _validatorPrimitives.tString,
      host: _validatorPrimitives.tString,
      port: _validatorPrimitives.tNumber
    });
    _validatorPrimitives.scheme.SocksSupportSocksDataEvent = (0, _validatorPrimitives.tObject)({
      uid: _validatorPrimitives.tString,
      data: _validatorPrimitives.tBinary
    });
    _validatorPrimitives.scheme.SocksSupportSocksClosedEvent = (0, _validatorPrimitives.tObject)({
      uid: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.SocksSupportSocksConnectedParams = (0, _validatorPrimitives.tObject)({
      uid: _validatorPrimitives.tString,
      host: _validatorPrimitives.tString,
      port: _validatorPrimitives.tNumber
    });
    _validatorPrimitives.scheme.SocksSupportSocksConnectedResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.SocksSupportSocksFailedParams = (0, _validatorPrimitives.tObject)({
      uid: _validatorPrimitives.tString,
      errorCode: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.SocksSupportSocksFailedResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.SocksSupportSocksDataParams = (0, _validatorPrimitives.tObject)({
      uid: _validatorPrimitives.tString,
      data: _validatorPrimitives.tBinary
    });
    _validatorPrimitives.scheme.SocksSupportSocksDataResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.SocksSupportSocksErrorParams = (0, _validatorPrimitives.tObject)({
      uid: _validatorPrimitives.tString,
      error: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.SocksSupportSocksErrorResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.SocksSupportSocksEndParams = (0, _validatorPrimitives.tObject)({
      uid: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.SocksSupportSocksEndResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.SelectorsInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.SelectorsRegisterParams = (0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      source: _validatorPrimitives.tString,
      contentScript: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.SelectorsRegisterResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.SelectorsSetTestIdAttributeNameParams = (0, _validatorPrimitives.tObject)({
      testIdAttributeName: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.SelectorsSetTestIdAttributeNameResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserTypeInitializer = (0, _validatorPrimitives.tObject)({
      executablePath: _validatorPrimitives.tString,
      name: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.BrowserTypeLaunchParams = (0, _validatorPrimitives.tObject)({
      channel: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      executablePath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
      ignoreAllDefaultArgs: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      ignoreDefaultArgs: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
      handleSIGINT: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      handleSIGTERM: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      handleSIGHUP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      env: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
      headless: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      devtools: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        server: _validatorPrimitives.tString,
        bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
      })),
      downloadsPath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      tracesDir: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      chromiumSandbox: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      firefoxUserPrefs: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
      slowMo: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.BrowserTypeLaunchResult = (0, _validatorPrimitives.tObject)({
      browser: (0, _validatorPrimitives.tChannel)(["Browser"])
    });
    _validatorPrimitives.scheme.BrowserTypeLaunchPersistentContextParams = (0, _validatorPrimitives.tObject)({
      channel: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      executablePath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
      ignoreAllDefaultArgs: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      ignoreDefaultArgs: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
      handleSIGINT: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      handleSIGTERM: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      handleSIGHUP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      env: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
      headless: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      devtools: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        server: _validatorPrimitives.tString,
        bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
      })),
      downloadsPath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      tracesDir: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      chromiumSandbox: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      firefoxUserPrefs: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
      noDefaultViewport: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      viewport: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      })),
      screen: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      })),
      ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      clientCertificates: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        origin: _validatorPrimitives.tString,
        cert: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
        key: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
        passphrase: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        pfx: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary)
      }))),
      javaScriptEnabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      bypassCSP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      userAgent: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      locale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      timezoneId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        longitude: _validatorPrimitives.tNumber,
        latitude: _validatorPrimitives.tNumber,
        accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
      })),
      permissions: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
      extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
      offline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        username: _validatorPrimitives.tString,
        password: _validatorPrimitives.tString,
        origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        send: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["always", "unauthorized"]))
      })),
      deviceScaleFactor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      isMobile: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      hasTouch: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
      reducedMotion: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
      forcedColors: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["active", "none", "no-override"])),
      acceptDownloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
      contrast: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["no-preference", "more", "no-override"])),
      baseURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      recordVideo: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        dir: _validatorPrimitives.tString,
        size: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
          width: _validatorPrimitives.tNumber,
          height: _validatorPrimitives.tNumber
        }))
      })),
      recordHar: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RecordHarOptions")),
      strictSelectors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      serviceWorkers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["allow", "block"])),
      userDataDir: _validatorPrimitives.tString,
      slowMo: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.BrowserTypeLaunchPersistentContextResult = (0, _validatorPrimitives.tObject)({
      context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
    });
    _validatorPrimitives.scheme.BrowserTypeConnectOverCDPParams = (0, _validatorPrimitives.tObject)({
      endpointURL: _validatorPrimitives.tString,
      headers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
      slowMo: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.BrowserTypeConnectOverCDPResult = (0, _validatorPrimitives.tObject)({
      browser: (0, _validatorPrimitives.tChannel)(["Browser"]),
      defaultContext: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["BrowserContext"]))
    });
    _validatorPrimitives.scheme.BrowserInitializer = (0, _validatorPrimitives.tObject)({
      version: _validatorPrimitives.tString,
      name: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.BrowserCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserCloseParams = (0, _validatorPrimitives.tObject)({
      reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.BrowserCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserKillForTestsParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserKillForTestsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserDefaultUserAgentForTestParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserDefaultUserAgentForTestResult = (0, _validatorPrimitives.tObject)({
      userAgent: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.BrowserNewContextParams = (0, _validatorPrimitives.tObject)({
      noDefaultViewport: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      viewport: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      })),
      screen: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      })),
      ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      clientCertificates: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        origin: _validatorPrimitives.tString,
        cert: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
        key: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
        passphrase: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        pfx: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary)
      }))),
      javaScriptEnabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      bypassCSP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      userAgent: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      locale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      timezoneId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        longitude: _validatorPrimitives.tNumber,
        latitude: _validatorPrimitives.tNumber,
        accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
      })),
      permissions: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
      extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
      offline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        username: _validatorPrimitives.tString,
        password: _validatorPrimitives.tString,
        origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        send: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["always", "unauthorized"]))
      })),
      deviceScaleFactor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      isMobile: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      hasTouch: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
      reducedMotion: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
      forcedColors: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["active", "none", "no-override"])),
      acceptDownloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
      contrast: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["no-preference", "more", "no-override"])),
      baseURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      recordVideo: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        dir: _validatorPrimitives.tString,
        size: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
          width: _validatorPrimitives.tNumber,
          height: _validatorPrimitives.tNumber
        }))
      })),
      recordHar: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RecordHarOptions")),
      strictSelectors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      serviceWorkers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["allow", "block"])),
      proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        server: _validatorPrimitives.tString,
        bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
      })),
      storageState: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        cookies: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SetNetworkCookie"))),
        origins: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SetOriginStorage")))
      }))
    });
    _validatorPrimitives.scheme.BrowserNewContextResult = (0, _validatorPrimitives.tObject)({
      context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
    });
    _validatorPrimitives.scheme.BrowserNewContextForReuseParams = (0, _validatorPrimitives.tObject)({
      noDefaultViewport: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      viewport: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      })),
      screen: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      })),
      ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      clientCertificates: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        origin: _validatorPrimitives.tString,
        cert: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
        key: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
        passphrase: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        pfx: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary)
      }))),
      javaScriptEnabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      bypassCSP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      userAgent: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      locale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      timezoneId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        longitude: _validatorPrimitives.tNumber,
        latitude: _validatorPrimitives.tNumber,
        accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
      })),
      permissions: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
      extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
      offline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        username: _validatorPrimitives.tString,
        password: _validatorPrimitives.tString,
        origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        send: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["always", "unauthorized"]))
      })),
      deviceScaleFactor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      isMobile: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      hasTouch: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
      reducedMotion: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
      forcedColors: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["active", "none", "no-override"])),
      acceptDownloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
      contrast: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["no-preference", "more", "no-override"])),
      baseURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      recordVideo: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        dir: _validatorPrimitives.tString,
        size: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
          width: _validatorPrimitives.tNumber,
          height: _validatorPrimitives.tNumber
        }))
      })),
      recordHar: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RecordHarOptions")),
      strictSelectors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      serviceWorkers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["allow", "block"])),
      proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        server: _validatorPrimitives.tString,
        bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
      })),
      storageState: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        cookies: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SetNetworkCookie"))),
        origins: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SetOriginStorage")))
      }))
    });
    _validatorPrimitives.scheme.BrowserNewContextForReuseResult = (0, _validatorPrimitives.tObject)({
      context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
    });
    _validatorPrimitives.scheme.BrowserStopPendingOperationsParams = (0, _validatorPrimitives.tObject)({
      reason: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.BrowserStopPendingOperationsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserNewBrowserCDPSessionParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserNewBrowserCDPSessionResult = (0, _validatorPrimitives.tObject)({
      session: (0, _validatorPrimitives.tChannel)(["CDPSession"])
    });
    _validatorPrimitives.scheme.BrowserStartTracingParams = (0, _validatorPrimitives.tObject)({
      page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"])),
      screenshots: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      categories: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString))
    });
    _validatorPrimitives.scheme.BrowserStartTracingResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserStopTracingParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserStopTracingResult = (0, _validatorPrimitives.tObject)({
      artifact: (0, _validatorPrimitives.tChannel)(["Artifact"])
    });
    _validatorPrimitives.scheme.EventTargetInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.EventTargetWaitForEventInfoParams = (0, _validatorPrimitives.tObject)({
      info: (0, _validatorPrimitives.tObject)({
        waitId: _validatorPrimitives.tString,
        phase: (0, _validatorPrimitives.tEnum)(["before", "after", "log"]),
        event: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        message: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        error: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
      })
    });
    _validatorPrimitives.scheme.BrowserContextWaitForEventInfoParams = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
    _validatorPrimitives.scheme.PageWaitForEventInfoParams = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
    _validatorPrimitives.scheme.WebSocketWaitForEventInfoParams = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
    _validatorPrimitives.scheme.ElectronApplicationWaitForEventInfoParams = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
    _validatorPrimitives.scheme.AndroidDeviceWaitForEventInfoParams = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
    _validatorPrimitives.scheme.EventTargetWaitForEventInfoResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextWaitForEventInfoResult = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
    _validatorPrimitives.scheme.PageWaitForEventInfoResult = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
    _validatorPrimitives.scheme.WebSocketWaitForEventInfoResult = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
    _validatorPrimitives.scheme.ElectronApplicationWaitForEventInfoResult = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
    _validatorPrimitives.scheme.AndroidDeviceWaitForEventInfoResult = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
    _validatorPrimitives.scheme.BrowserContextInitializer = (0, _validatorPrimitives.tObject)({
      isChromium: _validatorPrimitives.tBoolean,
      requestContext: (0, _validatorPrimitives.tChannel)(["APIRequestContext"]),
      tracing: (0, _validatorPrimitives.tChannel)(["Tracing"])
    });
    _validatorPrimitives.scheme.BrowserContextBindingCallEvent = (0, _validatorPrimitives.tObject)({
      binding: (0, _validatorPrimitives.tChannel)(["BindingCall"])
    });
    _validatorPrimitives.scheme.BrowserContextConsoleEvent = (0, _validatorPrimitives.tObject)({
      type: _validatorPrimitives.tString,
      text: _validatorPrimitives.tString,
      args: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])),
      location: (0, _validatorPrimitives.tObject)({
        url: _validatorPrimitives.tString,
        lineNumber: _validatorPrimitives.tNumber,
        columnNumber: _validatorPrimitives.tNumber
      }),
      page: (0, _validatorPrimitives.tChannel)(["Page"])
    });
    _validatorPrimitives.scheme.BrowserContextCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextDialogEvent = (0, _validatorPrimitives.tObject)({
      dialog: (0, _validatorPrimitives.tChannel)(["Dialog"])
    });
    _validatorPrimitives.scheme.BrowserContextPageEvent = (0, _validatorPrimitives.tObject)({
      page: (0, _validatorPrimitives.tChannel)(["Page"])
    });
    _validatorPrimitives.scheme.BrowserContextPageErrorEvent = (0, _validatorPrimitives.tObject)({
      error: (0, _validatorPrimitives.tType)("SerializedError"),
      page: (0, _validatorPrimitives.tChannel)(["Page"])
    });
    _validatorPrimitives.scheme.BrowserContextRouteEvent = (0, _validatorPrimitives.tObject)({
      route: (0, _validatorPrimitives.tChannel)(["Route"])
    });
    _validatorPrimitives.scheme.BrowserContextWebSocketRouteEvent = (0, _validatorPrimitives.tObject)({
      webSocketRoute: (0, _validatorPrimitives.tChannel)(["WebSocketRoute"])
    });
    _validatorPrimitives.scheme.BrowserContextVideoEvent = (0, _validatorPrimitives.tObject)({
      artifact: (0, _validatorPrimitives.tChannel)(["Artifact"])
    });
    _validatorPrimitives.scheme.BrowserContextBackgroundPageEvent = (0, _validatorPrimitives.tObject)({
      page: (0, _validatorPrimitives.tChannel)(["Page"])
    });
    _validatorPrimitives.scheme.BrowserContextServiceWorkerEvent = (0, _validatorPrimitives.tObject)({
      worker: (0, _validatorPrimitives.tChannel)(["Worker"])
    });
    _validatorPrimitives.scheme.BrowserContextRequestEvent = (0, _validatorPrimitives.tObject)({
      request: (0, _validatorPrimitives.tChannel)(["Request"]),
      page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"]))
    });
    _validatorPrimitives.scheme.BrowserContextRequestFailedEvent = (0, _validatorPrimitives.tObject)({
      request: (0, _validatorPrimitives.tChannel)(["Request"]),
      failureText: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      responseEndTiming: _validatorPrimitives.tNumber,
      page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"]))
    });
    _validatorPrimitives.scheme.BrowserContextRequestFinishedEvent = (0, _validatorPrimitives.tObject)({
      request: (0, _validatorPrimitives.tChannel)(["Request"]),
      response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"])),
      responseEndTiming: _validatorPrimitives.tNumber,
      page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"]))
    });
    _validatorPrimitives.scheme.BrowserContextResponseEvent = (0, _validatorPrimitives.tObject)({
      response: (0, _validatorPrimitives.tChannel)(["Response"]),
      page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"]))
    });
    _validatorPrimitives.scheme.BrowserContextAddCookiesParams = (0, _validatorPrimitives.tObject)({
      cookies: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SetNetworkCookie"))
    });
    _validatorPrimitives.scheme.BrowserContextAddCookiesResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextAddInitScriptParams = (0, _validatorPrimitives.tObject)({
      source: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.BrowserContextAddInitScriptResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextClearCookiesParams = (0, _validatorPrimitives.tObject)({
      name: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      nameRegexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      nameRegexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      domain: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      domainRegexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      domainRegexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      path: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      pathRegexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      pathRegexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.BrowserContextClearCookiesResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextClearPermissionsParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextClearPermissionsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextCloseParams = (0, _validatorPrimitives.tObject)({
      reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.BrowserContextCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextCookiesParams = (0, _validatorPrimitives.tObject)({
      urls: (0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.BrowserContextCookiesResult = (0, _validatorPrimitives.tObject)({
      cookies: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NetworkCookie"))
    });
    _validatorPrimitives.scheme.BrowserContextExposeBindingParams = (0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      needsHandle: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.BrowserContextExposeBindingResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextGrantPermissionsParams = (0, _validatorPrimitives.tObject)({
      permissions: (0, _validatorPrimitives.tArray)(_validatorPrimitives.tString),
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.BrowserContextGrantPermissionsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextNewPageParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextNewPageResult = (0, _validatorPrimitives.tObject)({
      page: (0, _validatorPrimitives.tChannel)(["Page"])
    });
    _validatorPrimitives.scheme.BrowserContextSetDefaultNavigationTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.BrowserContextSetDefaultNavigationTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextSetDefaultTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.BrowserContextSetDefaultTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextSetExtraHTTPHeadersParams = (0, _validatorPrimitives.tObject)({
      headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
    });
    _validatorPrimitives.scheme.BrowserContextSetExtraHTTPHeadersResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextSetGeolocationParams = (0, _validatorPrimitives.tObject)({
      geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        longitude: _validatorPrimitives.tNumber,
        latitude: _validatorPrimitives.tNumber,
        accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
      }))
    });
    _validatorPrimitives.scheme.BrowserContextSetGeolocationResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextSetHTTPCredentialsParams = (0, _validatorPrimitives.tObject)({
      httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        username: _validatorPrimitives.tString,
        password: _validatorPrimitives.tString,
        origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
      }))
    });
    _validatorPrimitives.scheme.BrowserContextSetHTTPCredentialsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextSetNetworkInterceptionPatternsParams = (0, _validatorPrimitives.tObject)({
      patterns: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        glob: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        regexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        regexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
      }))
    });
    _validatorPrimitives.scheme.BrowserContextSetNetworkInterceptionPatternsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextSetWebSocketInterceptionPatternsParams = (0, _validatorPrimitives.tObject)({
      patterns: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        glob: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        regexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        regexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
      }))
    });
    _validatorPrimitives.scheme.BrowserContextSetWebSocketInterceptionPatternsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextSetOfflineParams = (0, _validatorPrimitives.tObject)({
      offline: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.BrowserContextSetOfflineResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextStorageStateParams = (0, _validatorPrimitives.tObject)({
      indexedDB: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.BrowserContextStorageStateResult = (0, _validatorPrimitives.tObject)({
      cookies: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NetworkCookie")),
      origins: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("OriginStorage"))
    });
    _validatorPrimitives.scheme.BrowserContextPauseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextPauseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextEnableRecorderParams = (0, _validatorPrimitives.tObject)({
      language: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      mode: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["inspecting", "recording"])),
      pauseOnNextStatement: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      testIdAttributeName: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      launchOptions: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
      contextOptions: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
      device: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      saveStorage: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      outputFile: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      handleSIGINT: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      omitCallTracking: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.BrowserContextEnableRecorderResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextNewCDPSessionParams = (0, _validatorPrimitives.tObject)({
      page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"])),
      frame: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Frame"]))
    });
    _validatorPrimitives.scheme.BrowserContextNewCDPSessionResult = (0, _validatorPrimitives.tObject)({
      session: (0, _validatorPrimitives.tChannel)(["CDPSession"])
    });
    _validatorPrimitives.scheme.BrowserContextHarStartParams = (0, _validatorPrimitives.tObject)({
      page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"])),
      options: (0, _validatorPrimitives.tType)("RecordHarOptions")
    });
    _validatorPrimitives.scheme.BrowserContextHarStartResult = (0, _validatorPrimitives.tObject)({
      harId: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.BrowserContextHarExportParams = (0, _validatorPrimitives.tObject)({
      harId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.BrowserContextHarExportResult = (0, _validatorPrimitives.tObject)({
      artifact: (0, _validatorPrimitives.tChannel)(["Artifact"])
    });
    _validatorPrimitives.scheme.BrowserContextCreateTempFilesParams = (0, _validatorPrimitives.tObject)({
      rootDirName: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      items: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        name: _validatorPrimitives.tString,
        lastModifiedMs: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
      }))
    });
    _validatorPrimitives.scheme.BrowserContextCreateTempFilesResult = (0, _validatorPrimitives.tObject)({
      rootDir: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["WritableStream"])),
      writableStreams: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["WritableStream"]))
    });
    _validatorPrimitives.scheme.BrowserContextUpdateSubscriptionParams = (0, _validatorPrimitives.tObject)({
      event: (0, _validatorPrimitives.tEnum)(["console", "dialog", "request", "response", "requestFinished", "requestFailed"]),
      enabled: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.BrowserContextUpdateSubscriptionResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextClockFastForwardParams = (0, _validatorPrimitives.tObject)({
      ticksNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      ticksString: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.BrowserContextClockFastForwardResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextClockInstallParams = (0, _validatorPrimitives.tObject)({
      timeNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      timeString: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.BrowserContextClockInstallResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextClockPauseAtParams = (0, _validatorPrimitives.tObject)({
      timeNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      timeString: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.BrowserContextClockPauseAtResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextClockResumeParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextClockResumeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextClockRunForParams = (0, _validatorPrimitives.tObject)({
      ticksNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      ticksString: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.BrowserContextClockRunForResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextClockSetFixedTimeParams = (0, _validatorPrimitives.tObject)({
      timeNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      timeString: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.BrowserContextClockSetFixedTimeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BrowserContextClockSetSystemTimeParams = (0, _validatorPrimitives.tObject)({
      timeNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      timeString: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.BrowserContextClockSetSystemTimeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageInitializer = (0, _validatorPrimitives.tObject)({
      mainFrame: (0, _validatorPrimitives.tChannel)(["Frame"]),
      viewportSize: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      })),
      isClosed: _validatorPrimitives.tBoolean,
      opener: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"]))
    });
    _validatorPrimitives.scheme.PageBindingCallEvent = (0, _validatorPrimitives.tObject)({
      binding: (0, _validatorPrimitives.tChannel)(["BindingCall"])
    });
    _validatorPrimitives.scheme.PageCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageCrashEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageDownloadEvent = (0, _validatorPrimitives.tObject)({
      url: _validatorPrimitives.tString,
      suggestedFilename: _validatorPrimitives.tString,
      artifact: (0, _validatorPrimitives.tChannel)(["Artifact"])
    });
    _validatorPrimitives.scheme.PageFileChooserEvent = (0, _validatorPrimitives.tObject)({
      element: (0, _validatorPrimitives.tChannel)(["ElementHandle"]),
      isMultiple: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.PageFrameAttachedEvent = (0, _validatorPrimitives.tObject)({
      frame: (0, _validatorPrimitives.tChannel)(["Frame"])
    });
    _validatorPrimitives.scheme.PageFrameDetachedEvent = (0, _validatorPrimitives.tObject)({
      frame: (0, _validatorPrimitives.tChannel)(["Frame"])
    });
    _validatorPrimitives.scheme.PageLocatorHandlerTriggeredEvent = (0, _validatorPrimitives.tObject)({
      uid: _validatorPrimitives.tNumber
    });
    _validatorPrimitives.scheme.PageRouteEvent = (0, _validatorPrimitives.tObject)({
      route: (0, _validatorPrimitives.tChannel)(["Route"])
    });
    _validatorPrimitives.scheme.PageWebSocketRouteEvent = (0, _validatorPrimitives.tObject)({
      webSocketRoute: (0, _validatorPrimitives.tChannel)(["WebSocketRoute"])
    });
    _validatorPrimitives.scheme.PageVideoEvent = (0, _validatorPrimitives.tObject)({
      artifact: (0, _validatorPrimitives.tChannel)(["Artifact"])
    });
    _validatorPrimitives.scheme.PageWebSocketEvent = (0, _validatorPrimitives.tObject)({
      webSocket: (0, _validatorPrimitives.tChannel)(["WebSocket"])
    });
    _validatorPrimitives.scheme.PageWorkerEvent = (0, _validatorPrimitives.tObject)({
      worker: (0, _validatorPrimitives.tChannel)(["Worker"])
    });
    _validatorPrimitives.scheme.PageSetDefaultNavigationTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.PageSetDefaultNavigationTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageSetDefaultTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.PageSetDefaultTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageAddInitScriptParams = (0, _validatorPrimitives.tObject)({
      source: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.PageAddInitScriptResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageCloseParams = (0, _validatorPrimitives.tObject)({
      runBeforeUnload: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.PageCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageEmulateMediaParams = (0, _validatorPrimitives.tObject)({
      media: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["screen", "print", "no-override"])),
      colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
      reducedMotion: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
      forcedColors: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["active", "none", "no-override"])),
      contrast: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["no-preference", "more", "no-override"]))
    });
    _validatorPrimitives.scheme.PageEmulateMediaResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageExposeBindingParams = (0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      needsHandle: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.PageExposeBindingResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageGoBackParams = (0, _validatorPrimitives.tObject)({
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      waitUntil: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent"))
    });
    _validatorPrimitives.scheme.PageGoBackResult = (0, _validatorPrimitives.tObject)({
      response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"]))
    });
    _validatorPrimitives.scheme.PageGoForwardParams = (0, _validatorPrimitives.tObject)({
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      waitUntil: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent"))
    });
    _validatorPrimitives.scheme.PageGoForwardResult = (0, _validatorPrimitives.tObject)({
      response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"]))
    });
    _validatorPrimitives.scheme.PageRequestGCParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageRequestGCResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageRegisterLocatorHandlerParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.PageRegisterLocatorHandlerResult = (0, _validatorPrimitives.tObject)({
      uid: _validatorPrimitives.tNumber
    });
    _validatorPrimitives.scheme.PageResolveLocatorHandlerNoReplyParams = (0, _validatorPrimitives.tObject)({
      uid: _validatorPrimitives.tNumber,
      remove: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.PageResolveLocatorHandlerNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageUnregisterLocatorHandlerParams = (0, _validatorPrimitives.tObject)({
      uid: _validatorPrimitives.tNumber
    });
    _validatorPrimitives.scheme.PageUnregisterLocatorHandlerResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageReloadParams = (0, _validatorPrimitives.tObject)({
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      waitUntil: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent"))
    });
    _validatorPrimitives.scheme.PageReloadResult = (0, _validatorPrimitives.tObject)({
      response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"]))
    });
    _validatorPrimitives.scheme.PageExpectScreenshotParams = (0, _validatorPrimitives.tObject)({
      expected: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      timeout: _validatorPrimitives.tNumber,
      isNot: _validatorPrimitives.tBoolean,
      locator: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        frame: (0, _validatorPrimitives.tChannel)(["Frame"]),
        selector: _validatorPrimitives.tString
      })),
      comparator: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      maxDiffPixels: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      maxDiffPixelRatio: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      threshold: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      fullPage: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      clip: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Rect")),
      omitBackground: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      caret: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["hide", "initial"])),
      animations: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["disabled", "allow"])),
      scale: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["css", "device"])),
      mask: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        frame: (0, _validatorPrimitives.tChannel)(["Frame"]),
        selector: _validatorPrimitives.tString
      }))),
      maskColor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      style: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.PageExpectScreenshotResult = (0, _validatorPrimitives.tObject)({
      diff: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      errorMessage: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      actual: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      previous: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      timedOut: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      log: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString))
    });
    _validatorPrimitives.scheme.PageScreenshotParams = (0, _validatorPrimitives.tObject)({
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      type: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["png", "jpeg"])),
      quality: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      fullPage: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      clip: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Rect")),
      omitBackground: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      caret: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["hide", "initial"])),
      animations: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["disabled", "allow"])),
      scale: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["css", "device"])),
      mask: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        frame: (0, _validatorPrimitives.tChannel)(["Frame"]),
        selector: _validatorPrimitives.tString
      }))),
      maskColor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      style: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.PageScreenshotResult = (0, _validatorPrimitives.tObject)({
      binary: _validatorPrimitives.tBinary
    });
    _validatorPrimitives.scheme.PageSetExtraHTTPHeadersParams = (0, _validatorPrimitives.tObject)({
      headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
    });
    _validatorPrimitives.scheme.PageSetExtraHTTPHeadersResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageSetNetworkInterceptionPatternsParams = (0, _validatorPrimitives.tObject)({
      patterns: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        glob: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        regexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        regexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
      }))
    });
    _validatorPrimitives.scheme.PageSetNetworkInterceptionPatternsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageSetWebSocketInterceptionPatternsParams = (0, _validatorPrimitives.tObject)({
      patterns: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        glob: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        regexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        regexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
      }))
    });
    _validatorPrimitives.scheme.PageSetWebSocketInterceptionPatternsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageSetViewportSizeParams = (0, _validatorPrimitives.tObject)({
      viewportSize: (0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      })
    });
    _validatorPrimitives.scheme.PageSetViewportSizeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageKeyboardDownParams = (0, _validatorPrimitives.tObject)({
      key: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.PageKeyboardDownResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageKeyboardUpParams = (0, _validatorPrimitives.tObject)({
      key: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.PageKeyboardUpResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageKeyboardInsertTextParams = (0, _validatorPrimitives.tObject)({
      text: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.PageKeyboardInsertTextResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageKeyboardTypeParams = (0, _validatorPrimitives.tObject)({
      text: _validatorPrimitives.tString,
      delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.PageKeyboardTypeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageKeyboardPressParams = (0, _validatorPrimitives.tObject)({
      key: _validatorPrimitives.tString,
      delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.PageKeyboardPressResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageMouseMoveParams = (0, _validatorPrimitives.tObject)({
      x: _validatorPrimitives.tNumber,
      y: _validatorPrimitives.tNumber,
      steps: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.PageMouseMoveResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageMouseDownParams = (0, _validatorPrimitives.tObject)({
      button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
      clickCount: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.PageMouseDownResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageMouseUpParams = (0, _validatorPrimitives.tObject)({
      button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
      clickCount: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.PageMouseUpResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageMouseClickParams = (0, _validatorPrimitives.tObject)({
      x: _validatorPrimitives.tNumber,
      y: _validatorPrimitives.tNumber,
      delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
      clickCount: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.PageMouseClickResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageMouseWheelParams = (0, _validatorPrimitives.tObject)({
      deltaX: _validatorPrimitives.tNumber,
      deltaY: _validatorPrimitives.tNumber
    });
    _validatorPrimitives.scheme.PageMouseWheelResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageTouchscreenTapParams = (0, _validatorPrimitives.tObject)({
      x: _validatorPrimitives.tNumber,
      y: _validatorPrimitives.tNumber
    });
    _validatorPrimitives.scheme.PageTouchscreenTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageAccessibilitySnapshotParams = (0, _validatorPrimitives.tObject)({
      interestingOnly: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      root: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
    });
    _validatorPrimitives.scheme.PageAccessibilitySnapshotResult = (0, _validatorPrimitives.tObject)({
      rootAXNode: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("AXNode"))
    });
    _validatorPrimitives.scheme.PagePdfParams = (0, _validatorPrimitives.tObject)({
      scale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      displayHeaderFooter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      headerTemplate: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      footerTemplate: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      printBackground: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      landscape: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      pageRanges: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      format: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      width: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      height: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      preferCSSPageSize: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      margin: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        top: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        bottom: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        left: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        right: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
      })),
      tagged: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      outline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.PagePdfResult = (0, _validatorPrimitives.tObject)({
      pdf: _validatorPrimitives.tBinary
    });
    _validatorPrimitives.scheme.PageStartJSCoverageParams = (0, _validatorPrimitives.tObject)({
      resetOnNavigation: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      reportAnonymousScripts: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.PageStartJSCoverageResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageStopJSCoverageParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageStopJSCoverageResult = (0, _validatorPrimitives.tObject)({
      entries: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        url: _validatorPrimitives.tString,
        scriptId: _validatorPrimitives.tString,
        source: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        functions: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
          functionName: _validatorPrimitives.tString,
          isBlockCoverage: _validatorPrimitives.tBoolean,
          ranges: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
            startOffset: _validatorPrimitives.tNumber,
            endOffset: _validatorPrimitives.tNumber,
            count: _validatorPrimitives.tNumber
          }))
        }))
      }))
    });
    _validatorPrimitives.scheme.PageStartCSSCoverageParams = (0, _validatorPrimitives.tObject)({
      resetOnNavigation: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.PageStartCSSCoverageResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageStopCSSCoverageParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageStopCSSCoverageResult = (0, _validatorPrimitives.tObject)({
      entries: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        url: _validatorPrimitives.tString,
        text: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        ranges: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
          start: _validatorPrimitives.tNumber,
          end: _validatorPrimitives.tNumber
        }))
      }))
    });
    _validatorPrimitives.scheme.PageBringToFrontParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageBringToFrontResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.PageUpdateSubscriptionParams = (0, _validatorPrimitives.tObject)({
      event: (0, _validatorPrimitives.tEnum)(["console", "dialog", "fileChooser", "request", "response", "requestFinished", "requestFailed"]),
      enabled: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.PageUpdateSubscriptionResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.FrameInitializer = (0, _validatorPrimitives.tObject)({
      url: _validatorPrimitives.tString,
      name: _validatorPrimitives.tString,
      parentFrame: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Frame"])),
      loadStates: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("LifecycleEvent"))
    });
    _validatorPrimitives.scheme.FrameLoadstateEvent = (0, _validatorPrimitives.tObject)({
      add: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent")),
      remove: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent"))
    });
    _validatorPrimitives.scheme.FrameNavigatedEvent = (0, _validatorPrimitives.tObject)({
      url: _validatorPrimitives.tString,
      name: _validatorPrimitives.tString,
      newDocument: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        request: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Request"]))
      })),
      error: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.FrameEvalOnSelectorParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      expression: _validatorPrimitives.tString,
      isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      arg: (0, _validatorPrimitives.tType)("SerializedArgument")
    });
    _validatorPrimitives.scheme.FrameEvalOnSelectorResult = (0, _validatorPrimitives.tObject)({
      value: (0, _validatorPrimitives.tType)("SerializedValue")
    });
    _validatorPrimitives.scheme.FrameEvalOnSelectorAllParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      expression: _validatorPrimitives.tString,
      isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      arg: (0, _validatorPrimitives.tType)("SerializedArgument")
    });
    _validatorPrimitives.scheme.FrameEvalOnSelectorAllResult = (0, _validatorPrimitives.tObject)({
      value: (0, _validatorPrimitives.tType)("SerializedValue")
    });
    _validatorPrimitives.scheme.FrameAddScriptTagParams = (0, _validatorPrimitives.tObject)({
      url: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      content: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      type: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.FrameAddScriptTagResult = (0, _validatorPrimitives.tObject)({
      element: (0, _validatorPrimitives.tChannel)(["ElementHandle"])
    });
    _validatorPrimitives.scheme.FrameAddStyleTagParams = (0, _validatorPrimitives.tObject)({
      url: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      content: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.FrameAddStyleTagResult = (0, _validatorPrimitives.tObject)({
      element: (0, _validatorPrimitives.tChannel)(["ElementHandle"])
    });
    _validatorPrimitives.scheme.FrameAriaSnapshotParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      id: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      mode: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["raw", "regex"])),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.FrameAriaSnapshotResult = (0, _validatorPrimitives.tObject)({
      snapshot: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.FrameBlurParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.FrameBlurResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.FrameCheckParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.FrameCheckResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.FrameClickParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
      position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
      delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
      clickCount: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.FrameClickResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.FrameContentParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.FrameContentResult = (0, _validatorPrimitives.tObject)({
      value: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.FrameDragAndDropParams = (0, _validatorPrimitives.tObject)({
      source: _validatorPrimitives.tString,
      target: _validatorPrimitives.tString,
      force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      sourcePosition: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
      targetPosition: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.FrameDragAndDropResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.FrameDblclickParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
      position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
      delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.FrameDblclickResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.FrameDispatchEventParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      type: _validatorPrimitives.tString,
      eventInit: (0, _validatorPrimitives.tType)("SerializedArgument"),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.FrameDispatchEventResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.FrameEvaluateExpressionParams = (0, _validatorPrimitives.tObject)({
      expression: _validatorPrimitives.tString,
      isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      arg: (0, _validatorPrimitives.tType)("SerializedArgument")
    });
    _validatorPrimitives.scheme.FrameEvaluateExpressionResult = (0, _validatorPrimitives.tObject)({
      value: (0, _validatorPrimitives.tType)("SerializedValue")
    });
    _validatorPrimitives.scheme.FrameEvaluateExpressionHandleParams = (0, _validatorPrimitives.tObject)({
      expression: _validatorPrimitives.tString,
      isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      arg: (0, _validatorPrimitives.tType)("SerializedArgument")
    });
    _validatorPrimitives.scheme.FrameEvaluateExpressionHandleResult = (0, _validatorPrimitives.tObject)({
      handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
    });
    _validatorPrimitives.scheme.FrameFillParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      value: _validatorPrimitives.tString,
      force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.FrameFillResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.FrameFocusParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.FrameFocusResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.FrameFrameElementParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.FrameFrameElementResult = (0, _validatorPrimitives.tObject)({
      element: (0, _validatorPrimitives.tChannel)(["ElementHandle"])
    });
    _validatorPrimitives.scheme.FrameHighlightParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.FrameHighlightResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.FrameGetAttributeParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      name: _validatorPrimitives.tString,
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.FrameGetAttributeResult = (0, _validatorPrimitives.tObject)({
      value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.FrameGotoParams = (0, _validatorPrimitives.tObject)({
      url: _validatorPrimitives.tString,
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      waitUntil: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent")),
      referer: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.FrameGotoResult = (0, _validatorPrimitives.tObject)({
      response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"]))
    });
    _validatorPrimitives.scheme.FrameHoverParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
      position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.FrameHoverResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.FrameInnerHTMLParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.FrameInnerHTMLResult = (0, _validatorPrimitives.tObject)({
      value: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.FrameInnerTextParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.FrameInnerTextResult = (0, _validatorPrimitives.tObject)({
      value: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.FrameInputValueParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.FrameInputValueResult = (0, _validatorPrimitives.tObject)({
      value: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.FrameIsCheckedParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.FrameIsCheckedResult = (0, _validatorPrimitives.tObject)({
      value: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.FrameIsDisabledParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.FrameIsDisabledResult = (0, _validatorPrimitives.tObject)({
      value: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.FrameIsEnabledParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.FrameIsEnabledResult = (0, _validatorPrimitives.tObject)({
      value: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.FrameIsHiddenParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.FrameIsHiddenResult = (0, _validatorPrimitives.tObject)({
      value: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.FrameIsVisibleParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.FrameIsVisibleResult = (0, _validatorPrimitives.tObject)({
      value: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.FrameIsEditableParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.FrameIsEditableResult = (0, _validatorPrimitives.tObject)({
      value: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.FramePressParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      key: _validatorPrimitives.tString,
      delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.FramePressResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.FrameQuerySelectorParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.FrameQuerySelectorResult = (0, _validatorPrimitives.tObject)({
      element: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
    });
    _validatorPrimitives.scheme.FrameQuerySelectorAllParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.FrameQuerySelectorAllResult = (0, _validatorPrimitives.tObject)({
      elements: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
    });
    _validatorPrimitives.scheme.FrameQueryCountParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.FrameQueryCountResult = (0, _validatorPrimitives.tObject)({
      value: _validatorPrimitives.tNumber
    });
    _validatorPrimitives.scheme.FrameSelectOptionParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      elements: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))),
      options: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        valueOrLabel: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        label: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        index: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
      }))),
      force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.FrameSelectOptionResult = (0, _validatorPrimitives.tObject)({
      values: (0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.FrameSetContentParams = (0, _validatorPrimitives.tObject)({
      html: _validatorPrimitives.tString,
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      waitUntil: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent"))
    });
    _validatorPrimitives.scheme.FrameSetContentResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.FrameSetInputFilesParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      payloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        name: _validatorPrimitives.tString,
        mimeType: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        buffer: _validatorPrimitives.tBinary
      }))),
      localDirectory: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      directoryStream: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["WritableStream"])),
      localPaths: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
      streams: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["WritableStream"]))),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.FrameSetInputFilesResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.FrameTapParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
      position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.FrameTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.FrameTextContentParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.FrameTextContentResult = (0, _validatorPrimitives.tObject)({
      value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.FrameTitleParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.FrameTitleResult = (0, _validatorPrimitives.tObject)({
      value: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.FrameTypeParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      text: _validatorPrimitives.tString,
      delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.FrameTypeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.FrameUncheckParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.FrameUncheckResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.FrameWaitForTimeoutParams = (0, _validatorPrimitives.tObject)({
      timeout: _validatorPrimitives.tNumber
    });
    _validatorPrimitives.scheme.FrameWaitForTimeoutResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.FrameWaitForFunctionParams = (0, _validatorPrimitives.tObject)({
      expression: _validatorPrimitives.tString,
      isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      arg: (0, _validatorPrimitives.tType)("SerializedArgument"),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      pollingInterval: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.FrameWaitForFunctionResult = (0, _validatorPrimitives.tObject)({
      handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
    });
    _validatorPrimitives.scheme.FrameWaitForSelectorParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      state: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["attached", "detached", "visible", "hidden"])),
      omitReturnValue: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.FrameWaitForSelectorResult = (0, _validatorPrimitives.tObject)({
      element: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
    });
    _validatorPrimitives.scheme.FrameExpectParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      expression: _validatorPrimitives.tString,
      expressionArg: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
      expectedText: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("ExpectedTextValue"))),
      expectedNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      expectedValue: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("SerializedArgument")),
      useInnerText: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      isNot: _validatorPrimitives.tBoolean,
      timeout: _validatorPrimitives.tNumber
    });
    _validatorPrimitives.scheme.FrameExpectResult = (0, _validatorPrimitives.tObject)({
      matches: _validatorPrimitives.tBoolean,
      received: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("SerializedValue")),
      timedOut: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      log: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString))
    });
    _validatorPrimitives.scheme.WorkerInitializer = (0, _validatorPrimitives.tObject)({
      url: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.WorkerCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.WorkerEvaluateExpressionParams = (0, _validatorPrimitives.tObject)({
      expression: _validatorPrimitives.tString,
      isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      arg: (0, _validatorPrimitives.tType)("SerializedArgument")
    });
    _validatorPrimitives.scheme.WorkerEvaluateExpressionResult = (0, _validatorPrimitives.tObject)({
      value: (0, _validatorPrimitives.tType)("SerializedValue")
    });
    _validatorPrimitives.scheme.WorkerEvaluateExpressionHandleParams = (0, _validatorPrimitives.tObject)({
      expression: _validatorPrimitives.tString,
      isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      arg: (0, _validatorPrimitives.tType)("SerializedArgument")
    });
    _validatorPrimitives.scheme.WorkerEvaluateExpressionHandleResult = (0, _validatorPrimitives.tObject)({
      handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
    });
    _validatorPrimitives.scheme.JSHandleInitializer = (0, _validatorPrimitives.tObject)({
      preview: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.JSHandlePreviewUpdatedEvent = (0, _validatorPrimitives.tObject)({
      preview: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.ElementHandlePreviewUpdatedEvent = (0, _validatorPrimitives.tType)("JSHandlePreviewUpdatedEvent");
    _validatorPrimitives.scheme.JSHandleDisposeParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleDisposeParams = (0, _validatorPrimitives.tType)("JSHandleDisposeParams");
    _validatorPrimitives.scheme.JSHandleDisposeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleDisposeResult = (0, _validatorPrimitives.tType)("JSHandleDisposeResult");
    _validatorPrimitives.scheme.JSHandleEvaluateExpressionParams = (0, _validatorPrimitives.tObject)({
      expression: _validatorPrimitives.tString,
      isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      arg: (0, _validatorPrimitives.tType)("SerializedArgument")
    });
    _validatorPrimitives.scheme.ElementHandleEvaluateExpressionParams = (0, _validatorPrimitives.tType)("JSHandleEvaluateExpressionParams");
    _validatorPrimitives.scheme.JSHandleEvaluateExpressionResult = (0, _validatorPrimitives.tObject)({
      value: (0, _validatorPrimitives.tType)("SerializedValue")
    });
    _validatorPrimitives.scheme.ElementHandleEvaluateExpressionResult = (0, _validatorPrimitives.tType)("JSHandleEvaluateExpressionResult");
    _validatorPrimitives.scheme.JSHandleEvaluateExpressionHandleParams = (0, _validatorPrimitives.tObject)({
      expression: _validatorPrimitives.tString,
      isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      arg: (0, _validatorPrimitives.tType)("SerializedArgument")
    });
    _validatorPrimitives.scheme.ElementHandleEvaluateExpressionHandleParams = (0, _validatorPrimitives.tType)("JSHandleEvaluateExpressionHandleParams");
    _validatorPrimitives.scheme.JSHandleEvaluateExpressionHandleResult = (0, _validatorPrimitives.tObject)({
      handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
    });
    _validatorPrimitives.scheme.ElementHandleEvaluateExpressionHandleResult = (0, _validatorPrimitives.tType)("JSHandleEvaluateExpressionHandleResult");
    _validatorPrimitives.scheme.JSHandleGetPropertyListParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleGetPropertyListParams = (0, _validatorPrimitives.tType)("JSHandleGetPropertyListParams");
    _validatorPrimitives.scheme.JSHandleGetPropertyListResult = (0, _validatorPrimitives.tObject)({
      properties: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        name: _validatorPrimitives.tString,
        value: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
      }))
    });
    _validatorPrimitives.scheme.ElementHandleGetPropertyListResult = (0, _validatorPrimitives.tType)("JSHandleGetPropertyListResult");
    _validatorPrimitives.scheme.JSHandleGetPropertyParams = (0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.ElementHandleGetPropertyParams = (0, _validatorPrimitives.tType)("JSHandleGetPropertyParams");
    _validatorPrimitives.scheme.JSHandleGetPropertyResult = (0, _validatorPrimitives.tObject)({
      handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
    });
    _validatorPrimitives.scheme.ElementHandleGetPropertyResult = (0, _validatorPrimitives.tType)("JSHandleGetPropertyResult");
    _validatorPrimitives.scheme.JSHandleJsonValueParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleJsonValueParams = (0, _validatorPrimitives.tType)("JSHandleJsonValueParams");
    _validatorPrimitives.scheme.JSHandleJsonValueResult = (0, _validatorPrimitives.tObject)({
      value: (0, _validatorPrimitives.tType)("SerializedValue")
    });
    _validatorPrimitives.scheme.ElementHandleJsonValueResult = (0, _validatorPrimitives.tType)("JSHandleJsonValueResult");
    _validatorPrimitives.scheme.ElementHandleInitializer = (0, _validatorPrimitives.tObject)({
      preview: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.ElementHandleEvalOnSelectorParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      expression: _validatorPrimitives.tString,
      isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      arg: (0, _validatorPrimitives.tType)("SerializedArgument")
    });
    _validatorPrimitives.scheme.ElementHandleEvalOnSelectorResult = (0, _validatorPrimitives.tObject)({
      value: (0, _validatorPrimitives.tType)("SerializedValue")
    });
    _validatorPrimitives.scheme.ElementHandleEvalOnSelectorAllParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      expression: _validatorPrimitives.tString,
      isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      arg: (0, _validatorPrimitives.tType)("SerializedArgument")
    });
    _validatorPrimitives.scheme.ElementHandleEvalOnSelectorAllResult = (0, _validatorPrimitives.tObject)({
      value: (0, _validatorPrimitives.tType)("SerializedValue")
    });
    _validatorPrimitives.scheme.ElementHandleBoundingBoxParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleBoundingBoxResult = (0, _validatorPrimitives.tObject)({
      value: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Rect"))
    });
    _validatorPrimitives.scheme.ElementHandleCheckParams = (0, _validatorPrimitives.tObject)({
      force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.ElementHandleCheckResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleClickParams = (0, _validatorPrimitives.tObject)({
      force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
      position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
      delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
      clickCount: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.ElementHandleClickResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleContentFrameParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleContentFrameResult = (0, _validatorPrimitives.tObject)({
      frame: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Frame"]))
    });
    _validatorPrimitives.scheme.ElementHandleDblclickParams = (0, _validatorPrimitives.tObject)({
      force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
      position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
      delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.ElementHandleDblclickResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleDispatchEventParams = (0, _validatorPrimitives.tObject)({
      type: _validatorPrimitives.tString,
      eventInit: (0, _validatorPrimitives.tType)("SerializedArgument")
    });
    _validatorPrimitives.scheme.ElementHandleDispatchEventResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleFillParams = (0, _validatorPrimitives.tObject)({
      value: _validatorPrimitives.tString,
      force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.ElementHandleFillResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleFocusParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleFocusResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleGenerateLocatorStringParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleGenerateLocatorStringResult = (0, _validatorPrimitives.tObject)({
      value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.ElementHandleGetAttributeParams = (0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.ElementHandleGetAttributeResult = (0, _validatorPrimitives.tObject)({
      value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.ElementHandleHoverParams = (0, _validatorPrimitives.tObject)({
      force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
      position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.ElementHandleHoverResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleInnerHTMLParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleInnerHTMLResult = (0, _validatorPrimitives.tObject)({
      value: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.ElementHandleInnerTextParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleInnerTextResult = (0, _validatorPrimitives.tObject)({
      value: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.ElementHandleInputValueParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleInputValueResult = (0, _validatorPrimitives.tObject)({
      value: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.ElementHandleIsCheckedParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleIsCheckedResult = (0, _validatorPrimitives.tObject)({
      value: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.ElementHandleIsDisabledParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleIsDisabledResult = (0, _validatorPrimitives.tObject)({
      value: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.ElementHandleIsEditableParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleIsEditableResult = (0, _validatorPrimitives.tObject)({
      value: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.ElementHandleIsEnabledParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleIsEnabledResult = (0, _validatorPrimitives.tObject)({
      value: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.ElementHandleIsHiddenParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleIsHiddenResult = (0, _validatorPrimitives.tObject)({
      value: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.ElementHandleIsVisibleParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleIsVisibleResult = (0, _validatorPrimitives.tObject)({
      value: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.ElementHandleOwnerFrameParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleOwnerFrameResult = (0, _validatorPrimitives.tObject)({
      frame: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Frame"]))
    });
    _validatorPrimitives.scheme.ElementHandlePressParams = (0, _validatorPrimitives.tObject)({
      key: _validatorPrimitives.tString,
      delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.ElementHandlePressResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleQuerySelectorParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.ElementHandleQuerySelectorResult = (0, _validatorPrimitives.tObject)({
      element: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
    });
    _validatorPrimitives.scheme.ElementHandleQuerySelectorAllParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.ElementHandleQuerySelectorAllResult = (0, _validatorPrimitives.tObject)({
      elements: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
    });
    _validatorPrimitives.scheme.ElementHandleScreenshotParams = (0, _validatorPrimitives.tObject)({
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      type: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["png", "jpeg"])),
      quality: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      omitBackground: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      caret: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["hide", "initial"])),
      animations: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["disabled", "allow"])),
      scale: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["css", "device"])),
      mask: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        frame: (0, _validatorPrimitives.tChannel)(["Frame"]),
        selector: _validatorPrimitives.tString
      }))),
      maskColor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      style: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.ElementHandleScreenshotResult = (0, _validatorPrimitives.tObject)({
      binary: _validatorPrimitives.tBinary
    });
    _validatorPrimitives.scheme.ElementHandleScrollIntoViewIfNeededParams = (0, _validatorPrimitives.tObject)({
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.ElementHandleScrollIntoViewIfNeededResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleSelectOptionParams = (0, _validatorPrimitives.tObject)({
      elements: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))),
      options: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        valueOrLabel: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        label: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        index: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
      }))),
      force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.ElementHandleSelectOptionResult = (0, _validatorPrimitives.tObject)({
      values: (0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.ElementHandleSelectTextParams = (0, _validatorPrimitives.tObject)({
      force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.ElementHandleSelectTextResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleSetInputFilesParams = (0, _validatorPrimitives.tObject)({
      payloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        name: _validatorPrimitives.tString,
        mimeType: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        buffer: _validatorPrimitives.tBinary
      }))),
      localDirectory: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      directoryStream: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["WritableStream"])),
      localPaths: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
      streams: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["WritableStream"]))),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.ElementHandleSetInputFilesResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleTapParams = (0, _validatorPrimitives.tObject)({
      force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
      position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.ElementHandleTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleTextContentParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleTextContentResult = (0, _validatorPrimitives.tObject)({
      value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.ElementHandleTypeParams = (0, _validatorPrimitives.tObject)({
      text: _validatorPrimitives.tString,
      delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.ElementHandleTypeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleUncheckParams = (0, _validatorPrimitives.tObject)({
      force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.ElementHandleUncheckResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleWaitForElementStateParams = (0, _validatorPrimitives.tObject)({
      state: (0, _validatorPrimitives.tEnum)(["visible", "hidden", "stable", "enabled", "disabled", "editable"]),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.ElementHandleWaitForElementStateResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElementHandleWaitForSelectorParams = (0, _validatorPrimitives.tObject)({
      selector: _validatorPrimitives.tString,
      strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      state: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["attached", "detached", "visible", "hidden"]))
    });
    _validatorPrimitives.scheme.ElementHandleWaitForSelectorResult = (0, _validatorPrimitives.tObject)({
      element: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
    });
    _validatorPrimitives.scheme.RequestInitializer = (0, _validatorPrimitives.tObject)({
      frame: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Frame"])),
      serviceWorker: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Worker"])),
      url: _validatorPrimitives.tString,
      resourceType: _validatorPrimitives.tString,
      method: _validatorPrimitives.tString,
      postData: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")),
      isNavigationRequest: _validatorPrimitives.tBoolean,
      redirectedFrom: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Request"]))
    });
    _validatorPrimitives.scheme.RequestResponseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.RequestResponseResult = (0, _validatorPrimitives.tObject)({
      response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"]))
    });
    _validatorPrimitives.scheme.RequestRawRequestHeadersParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.RequestRawRequestHeadersResult = (0, _validatorPrimitives.tObject)({
      headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
    });
    _validatorPrimitives.scheme.RouteInitializer = (0, _validatorPrimitives.tObject)({
      request: (0, _validatorPrimitives.tChannel)(["Request"])
    });
    _validatorPrimitives.scheme.RouteRedirectNavigationRequestParams = (0, _validatorPrimitives.tObject)({
      url: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.RouteRedirectNavigationRequestResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.RouteAbortParams = (0, _validatorPrimitives.tObject)({
      errorCode: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.RouteAbortResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.RouteContinueParams = (0, _validatorPrimitives.tObject)({
      url: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      method: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      headers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
      postData: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      isFallback: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.RouteContinueResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.RouteFulfillParams = (0, _validatorPrimitives.tObject)({
      status: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      headers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
      body: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      isBase64: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      fetchResponseUid: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.RouteFulfillResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.WebSocketRouteInitializer = (0, _validatorPrimitives.tObject)({
      url: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.WebSocketRouteMessageFromPageEvent = (0, _validatorPrimitives.tObject)({
      message: _validatorPrimitives.tString,
      isBase64: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.WebSocketRouteMessageFromServerEvent = (0, _validatorPrimitives.tObject)({
      message: _validatorPrimitives.tString,
      isBase64: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.WebSocketRouteClosePageEvent = (0, _validatorPrimitives.tObject)({
      code: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      wasClean: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.WebSocketRouteCloseServerEvent = (0, _validatorPrimitives.tObject)({
      code: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      wasClean: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.WebSocketRouteConnectParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.WebSocketRouteConnectResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.WebSocketRouteEnsureOpenedParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.WebSocketRouteEnsureOpenedResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.WebSocketRouteSendToPageParams = (0, _validatorPrimitives.tObject)({
      message: _validatorPrimitives.tString,
      isBase64: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.WebSocketRouteSendToPageResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.WebSocketRouteSendToServerParams = (0, _validatorPrimitives.tObject)({
      message: _validatorPrimitives.tString,
      isBase64: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.WebSocketRouteSendToServerResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.WebSocketRouteClosePageParams = (0, _validatorPrimitives.tObject)({
      code: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      wasClean: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.WebSocketRouteClosePageResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.WebSocketRouteCloseServerParams = (0, _validatorPrimitives.tObject)({
      code: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      wasClean: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.WebSocketRouteCloseServerResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ResourceTiming = (0, _validatorPrimitives.tObject)({
      startTime: _validatorPrimitives.tNumber,
      domainLookupStart: _validatorPrimitives.tNumber,
      domainLookupEnd: _validatorPrimitives.tNumber,
      connectStart: _validatorPrimitives.tNumber,
      secureConnectionStart: _validatorPrimitives.tNumber,
      connectEnd: _validatorPrimitives.tNumber,
      requestStart: _validatorPrimitives.tNumber,
      responseStart: _validatorPrimitives.tNumber
    });
    _validatorPrimitives.scheme.ResponseInitializer = (0, _validatorPrimitives.tObject)({
      request: (0, _validatorPrimitives.tChannel)(["Request"]),
      url: _validatorPrimitives.tString,
      status: _validatorPrimitives.tNumber,
      statusText: _validatorPrimitives.tString,
      headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")),
      timing: (0, _validatorPrimitives.tType)("ResourceTiming"),
      fromServiceWorker: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.ResponseBodyParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ResponseBodyResult = (0, _validatorPrimitives.tObject)({
      binary: _validatorPrimitives.tBinary
    });
    _validatorPrimitives.scheme.ResponseSecurityDetailsParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ResponseSecurityDetailsResult = (0, _validatorPrimitives.tObject)({
      value: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("SecurityDetails"))
    });
    _validatorPrimitives.scheme.ResponseServerAddrParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ResponseServerAddrResult = (0, _validatorPrimitives.tObject)({
      value: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RemoteAddr"))
    });
    _validatorPrimitives.scheme.ResponseRawResponseHeadersParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ResponseRawResponseHeadersResult = (0, _validatorPrimitives.tObject)({
      headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
    });
    _validatorPrimitives.scheme.ResponseSizesParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ResponseSizesResult = (0, _validatorPrimitives.tObject)({
      sizes: (0, _validatorPrimitives.tType)("RequestSizes")
    });
    _validatorPrimitives.scheme.SecurityDetails = (0, _validatorPrimitives.tObject)({
      issuer: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      protocol: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      subjectName: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      validFrom: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      validTo: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.RequestSizes = (0, _validatorPrimitives.tObject)({
      requestBodySize: _validatorPrimitives.tNumber,
      requestHeadersSize: _validatorPrimitives.tNumber,
      responseBodySize: _validatorPrimitives.tNumber,
      responseHeadersSize: _validatorPrimitives.tNumber
    });
    _validatorPrimitives.scheme.RemoteAddr = (0, _validatorPrimitives.tObject)({
      ipAddress: _validatorPrimitives.tString,
      port: _validatorPrimitives.tNumber
    });
    _validatorPrimitives.scheme.WebSocketInitializer = (0, _validatorPrimitives.tObject)({
      url: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.WebSocketOpenEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.WebSocketFrameSentEvent = (0, _validatorPrimitives.tObject)({
      opcode: _validatorPrimitives.tNumber,
      data: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.WebSocketFrameReceivedEvent = (0, _validatorPrimitives.tObject)({
      opcode: _validatorPrimitives.tNumber,
      data: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.WebSocketSocketErrorEvent = (0, _validatorPrimitives.tObject)({
      error: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.WebSocketCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BindingCallInitializer = (0, _validatorPrimitives.tObject)({
      frame: (0, _validatorPrimitives.tChannel)(["Frame"]),
      name: _validatorPrimitives.tString,
      args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SerializedValue"))),
      handle: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"]))
    });
    _validatorPrimitives.scheme.BindingCallRejectParams = (0, _validatorPrimitives.tObject)({
      error: (0, _validatorPrimitives.tType)("SerializedError")
    });
    _validatorPrimitives.scheme.BindingCallRejectResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.BindingCallResolveParams = (0, _validatorPrimitives.tObject)({
      result: (0, _validatorPrimitives.tType)("SerializedArgument")
    });
    _validatorPrimitives.scheme.BindingCallResolveResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.DialogInitializer = (0, _validatorPrimitives.tObject)({
      page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"])),
      type: _validatorPrimitives.tString,
      message: _validatorPrimitives.tString,
      defaultValue: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.DialogAcceptParams = (0, _validatorPrimitives.tObject)({
      promptText: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.DialogAcceptResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.DialogDismissParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.DialogDismissResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.TracingInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.TracingTracingStartParams = (0, _validatorPrimitives.tObject)({
      name: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      snapshots: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      screenshots: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      live: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.TracingTracingStartResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.TracingTracingStartChunkParams = (0, _validatorPrimitives.tObject)({
      name: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      title: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.TracingTracingStartChunkResult = (0, _validatorPrimitives.tObject)({
      traceName: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.TracingTracingGroupParams = (0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      location: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        file: _validatorPrimitives.tString,
        line: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
        column: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
      }))
    });
    _validatorPrimitives.scheme.TracingTracingGroupResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.TracingTracingGroupEndParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.TracingTracingGroupEndResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.TracingTracingStopChunkParams = (0, _validatorPrimitives.tObject)({
      mode: (0, _validatorPrimitives.tEnum)(["archive", "discard", "entries"])
    });
    _validatorPrimitives.scheme.TracingTracingStopChunkResult = (0, _validatorPrimitives.tObject)({
      artifact: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Artifact"])),
      entries: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")))
    });
    _validatorPrimitives.scheme.TracingTracingStopParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.TracingTracingStopResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ArtifactInitializer = (0, _validatorPrimitives.tObject)({
      absolutePath: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.ArtifactPathAfterFinishedParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ArtifactPathAfterFinishedResult = (0, _validatorPrimitives.tObject)({
      value: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.ArtifactSaveAsParams = (0, _validatorPrimitives.tObject)({
      path: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.ArtifactSaveAsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ArtifactSaveAsStreamParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ArtifactSaveAsStreamResult = (0, _validatorPrimitives.tObject)({
      stream: (0, _validatorPrimitives.tChannel)(["Stream"])
    });
    _validatorPrimitives.scheme.ArtifactFailureParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ArtifactFailureResult = (0, _validatorPrimitives.tObject)({
      error: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.ArtifactStreamParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ArtifactStreamResult = (0, _validatorPrimitives.tObject)({
      stream: (0, _validatorPrimitives.tChannel)(["Stream"])
    });
    _validatorPrimitives.scheme.ArtifactCancelParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ArtifactCancelResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ArtifactDeleteParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ArtifactDeleteResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.StreamInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.StreamReadParams = (0, _validatorPrimitives.tObject)({
      size: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.StreamReadResult = (0, _validatorPrimitives.tObject)({
      binary: _validatorPrimitives.tBinary
    });
    _validatorPrimitives.scheme.StreamCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.StreamCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.WritableStreamInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.WritableStreamWriteParams = (0, _validatorPrimitives.tObject)({
      binary: _validatorPrimitives.tBinary
    });
    _validatorPrimitives.scheme.WritableStreamWriteResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.WritableStreamCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.WritableStreamCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.CDPSessionInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.CDPSessionEventEvent = (0, _validatorPrimitives.tObject)({
      method: _validatorPrimitives.tString,
      params: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny)
    });
    _validatorPrimitives.scheme.CDPSessionSendParams = (0, _validatorPrimitives.tObject)({
      method: _validatorPrimitives.tString,
      params: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny)
    });
    _validatorPrimitives.scheme.CDPSessionSendResult = (0, _validatorPrimitives.tObject)({
      result: _validatorPrimitives.tAny
    });
    _validatorPrimitives.scheme.CDPSessionDetachParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.CDPSessionDetachResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElectronInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElectronLaunchParams = (0, _validatorPrimitives.tObject)({
      executablePath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
      cwd: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      env: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      acceptDownloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
      bypassCSP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
      extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
      geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        longitude: _validatorPrimitives.tNumber,
        latitude: _validatorPrimitives.tNumber,
        accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
      })),
      httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        username: _validatorPrimitives.tString,
        password: _validatorPrimitives.tString,
        origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
      })),
      ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      locale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      offline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      recordHar: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RecordHarOptions")),
      recordVideo: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        dir: _validatorPrimitives.tString,
        size: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
          width: _validatorPrimitives.tNumber,
          height: _validatorPrimitives.tNumber
        }))
      })),
      strictSelectors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      timezoneId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      tracesDir: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.ElectronLaunchResult = (0, _validatorPrimitives.tObject)({
      electronApplication: (0, _validatorPrimitives.tChannel)(["ElectronApplication"])
    });
    _validatorPrimitives.scheme.ElectronApplicationInitializer = (0, _validatorPrimitives.tObject)({
      context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
    });
    _validatorPrimitives.scheme.ElectronApplicationCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.ElectronApplicationConsoleEvent = (0, _validatorPrimitives.tObject)({
      type: _validatorPrimitives.tString,
      text: _validatorPrimitives.tString,
      args: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])),
      location: (0, _validatorPrimitives.tObject)({
        url: _validatorPrimitives.tString,
        lineNumber: _validatorPrimitives.tNumber,
        columnNumber: _validatorPrimitives.tNumber
      })
    });
    _validatorPrimitives.scheme.ElectronApplicationBrowserWindowParams = (0, _validatorPrimitives.tObject)({
      page: (0, _validatorPrimitives.tChannel)(["Page"])
    });
    _validatorPrimitives.scheme.ElectronApplicationBrowserWindowResult = (0, _validatorPrimitives.tObject)({
      handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
    });
    _validatorPrimitives.scheme.ElectronApplicationEvaluateExpressionParams = (0, _validatorPrimitives.tObject)({
      expression: _validatorPrimitives.tString,
      isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      arg: (0, _validatorPrimitives.tType)("SerializedArgument")
    });
    _validatorPrimitives.scheme.ElectronApplicationEvaluateExpressionResult = (0, _validatorPrimitives.tObject)({
      value: (0, _validatorPrimitives.tType)("SerializedValue")
    });
    _validatorPrimitives.scheme.ElectronApplicationEvaluateExpressionHandleParams = (0, _validatorPrimitives.tObject)({
      expression: _validatorPrimitives.tString,
      isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      arg: (0, _validatorPrimitives.tType)("SerializedArgument")
    });
    _validatorPrimitives.scheme.ElectronApplicationEvaluateExpressionHandleResult = (0, _validatorPrimitives.tObject)({
      handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
    });
    _validatorPrimitives.scheme.ElectronApplicationUpdateSubscriptionParams = (0, _validatorPrimitives.tObject)({
      event: (0, _validatorPrimitives.tEnum)(["console"]),
      enabled: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.ElectronApplicationUpdateSubscriptionResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidDevicesParams = (0, _validatorPrimitives.tObject)({
      host: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      port: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      omitDriverInstall: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
    });
    _validatorPrimitives.scheme.AndroidDevicesResult = (0, _validatorPrimitives.tObject)({
      devices: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["AndroidDevice"]))
    });
    _validatorPrimitives.scheme.AndroidSetDefaultTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
      timeout: _validatorPrimitives.tNumber
    });
    _validatorPrimitives.scheme.AndroidSetDefaultTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidSocketInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidSocketDataEvent = (0, _validatorPrimitives.tObject)({
      data: _validatorPrimitives.tBinary
    });
    _validatorPrimitives.scheme.AndroidSocketCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidSocketWriteParams = (0, _validatorPrimitives.tObject)({
      data: _validatorPrimitives.tBinary
    });
    _validatorPrimitives.scheme.AndroidSocketWriteResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidSocketCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidSocketCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidDeviceInitializer = (0, _validatorPrimitives.tObject)({
      model: _validatorPrimitives.tString,
      serial: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.AndroidDeviceCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidDeviceWebViewAddedEvent = (0, _validatorPrimitives.tObject)({
      webView: (0, _validatorPrimitives.tType)("AndroidWebView")
    });
    _validatorPrimitives.scheme.AndroidDeviceWebViewRemovedEvent = (0, _validatorPrimitives.tObject)({
      socketName: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.AndroidDeviceWaitParams = (0, _validatorPrimitives.tObject)({
      selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
      state: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["gone"])),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.AndroidDeviceWaitResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidDeviceFillParams = (0, _validatorPrimitives.tObject)({
      selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
      text: _validatorPrimitives.tString,
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.AndroidDeviceFillResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidDeviceTapParams = (0, _validatorPrimitives.tObject)({
      selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
      duration: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.AndroidDeviceTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidDeviceDragParams = (0, _validatorPrimitives.tObject)({
      selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
      dest: (0, _validatorPrimitives.tType)("Point"),
      speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.AndroidDeviceDragResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidDeviceFlingParams = (0, _validatorPrimitives.tObject)({
      selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
      direction: (0, _validatorPrimitives.tEnum)(["up", "down", "left", "right"]),
      speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.AndroidDeviceFlingResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidDeviceLongTapParams = (0, _validatorPrimitives.tObject)({
      selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.AndroidDeviceLongTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidDevicePinchCloseParams = (0, _validatorPrimitives.tObject)({
      selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
      percent: _validatorPrimitives.tNumber,
      speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.AndroidDevicePinchCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidDevicePinchOpenParams = (0, _validatorPrimitives.tObject)({
      selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
      percent: _validatorPrimitives.tNumber,
      speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.AndroidDevicePinchOpenResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidDeviceScrollParams = (0, _validatorPrimitives.tObject)({
      selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
      direction: (0, _validatorPrimitives.tEnum)(["up", "down", "left", "right"]),
      percent: _validatorPrimitives.tNumber,
      speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.AndroidDeviceScrollResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidDeviceSwipeParams = (0, _validatorPrimitives.tObject)({
      selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
      direction: (0, _validatorPrimitives.tEnum)(["up", "down", "left", "right"]),
      percent: _validatorPrimitives.tNumber,
      speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.AndroidDeviceSwipeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidDeviceInfoParams = (0, _validatorPrimitives.tObject)({
      selector: (0, _validatorPrimitives.tType)("AndroidSelector")
    });
    _validatorPrimitives.scheme.AndroidDeviceInfoResult = (0, _validatorPrimitives.tObject)({
      info: (0, _validatorPrimitives.tType)("AndroidElementInfo")
    });
    _validatorPrimitives.scheme.AndroidDeviceScreenshotParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidDeviceScreenshotResult = (0, _validatorPrimitives.tObject)({
      binary: _validatorPrimitives.tBinary
    });
    _validatorPrimitives.scheme.AndroidDeviceInputTypeParams = (0, _validatorPrimitives.tObject)({
      text: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.AndroidDeviceInputTypeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidDeviceInputPressParams = (0, _validatorPrimitives.tObject)({
      key: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.AndroidDeviceInputPressResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidDeviceInputTapParams = (0, _validatorPrimitives.tObject)({
      point: (0, _validatorPrimitives.tType)("Point")
    });
    _validatorPrimitives.scheme.AndroidDeviceInputTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidDeviceInputSwipeParams = (0, _validatorPrimitives.tObject)({
      segments: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("Point")),
      steps: _validatorPrimitives.tNumber
    });
    _validatorPrimitives.scheme.AndroidDeviceInputSwipeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidDeviceInputDragParams = (0, _validatorPrimitives.tObject)({
      from: (0, _validatorPrimitives.tType)("Point"),
      to: (0, _validatorPrimitives.tType)("Point"),
      steps: _validatorPrimitives.tNumber
    });
    _validatorPrimitives.scheme.AndroidDeviceInputDragResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidDeviceLaunchBrowserParams = (0, _validatorPrimitives.tObject)({
      noDefaultViewport: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      viewport: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      })),
      screen: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      })),
      ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      clientCertificates: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        origin: _validatorPrimitives.tString,
        cert: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
        key: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
        passphrase: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        pfx: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary)
      }))),
      javaScriptEnabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      bypassCSP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      userAgent: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      locale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      timezoneId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        longitude: _validatorPrimitives.tNumber,
        latitude: _validatorPrimitives.tNumber,
        accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
      })),
      permissions: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
      extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
      offline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        username: _validatorPrimitives.tString,
        password: _validatorPrimitives.tString,
        origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        send: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["always", "unauthorized"]))
      })),
      deviceScaleFactor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      isMobile: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      hasTouch: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
      reducedMotion: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
      forcedColors: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["active", "none", "no-override"])),
      acceptDownloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
      contrast: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["no-preference", "more", "no-override"])),
      baseURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      recordVideo: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        dir: _validatorPrimitives.tString,
        size: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
          width: _validatorPrimitives.tNumber,
          height: _validatorPrimitives.tNumber
        }))
      })),
      recordHar: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RecordHarOptions")),
      strictSelectors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      serviceWorkers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["allow", "block"])),
      pkg: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
      proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        server: _validatorPrimitives.tString,
        bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
        password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
      }))
    });
    _validatorPrimitives.scheme.AndroidDeviceLaunchBrowserResult = (0, _validatorPrimitives.tObject)({
      context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
    });
    _validatorPrimitives.scheme.AndroidDeviceOpenParams = (0, _validatorPrimitives.tObject)({
      command: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.AndroidDeviceOpenResult = (0, _validatorPrimitives.tObject)({
      socket: (0, _validatorPrimitives.tChannel)(["AndroidSocket"])
    });
    _validatorPrimitives.scheme.AndroidDeviceShellParams = (0, _validatorPrimitives.tObject)({
      command: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.AndroidDeviceShellResult = (0, _validatorPrimitives.tObject)({
      result: _validatorPrimitives.tBinary
    });
    _validatorPrimitives.scheme.AndroidDeviceInstallApkParams = (0, _validatorPrimitives.tObject)({
      file: _validatorPrimitives.tBinary,
      args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString))
    });
    _validatorPrimitives.scheme.AndroidDeviceInstallApkResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidDevicePushParams = (0, _validatorPrimitives.tObject)({
      file: _validatorPrimitives.tBinary,
      path: _validatorPrimitives.tString,
      mode: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    });
    _validatorPrimitives.scheme.AndroidDevicePushResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidDeviceSetDefaultTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
      timeout: _validatorPrimitives.tNumber
    });
    _validatorPrimitives.scheme.AndroidDeviceSetDefaultTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidDeviceConnectToWebViewParams = (0, _validatorPrimitives.tObject)({
      socketName: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.AndroidDeviceConnectToWebViewResult = (0, _validatorPrimitives.tObject)({
      context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
    });
    _validatorPrimitives.scheme.AndroidDeviceCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidDeviceCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.AndroidWebView = (0, _validatorPrimitives.tObject)({
      pid: _validatorPrimitives.tNumber,
      pkg: _validatorPrimitives.tString,
      socketName: _validatorPrimitives.tString
    });
    _validatorPrimitives.scheme.AndroidSelector = (0, _validatorPrimitives.tObject)({
      checkable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      checked: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      clazz: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      clickable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      depth: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      desc: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      enabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      focusable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      focused: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      hasChild: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        selector: (0, _validatorPrimitives.tType)("AndroidSelector")
      })),
      hasDescendant: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
        maxDepth: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
      })),
      longClickable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      pkg: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      res: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      scrollable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      selected: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
      text: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.AndroidElementInfo = (0, _validatorPrimitives.tObject)({
      children: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("AndroidElementInfo"))),
      clazz: _validatorPrimitives.tString,
      desc: _validatorPrimitives.tString,
      res: _validatorPrimitives.tString,
      pkg: _validatorPrimitives.tString,
      text: _validatorPrimitives.tString,
      bounds: (0, _validatorPrimitives.tType)("Rect"),
      checkable: _validatorPrimitives.tBoolean,
      checked: _validatorPrimitives.tBoolean,
      clickable: _validatorPrimitives.tBoolean,
      enabled: _validatorPrimitives.tBoolean,
      focusable: _validatorPrimitives.tBoolean,
      focused: _validatorPrimitives.tBoolean,
      longClickable: _validatorPrimitives.tBoolean,
      scrollable: _validatorPrimitives.tBoolean,
      selected: _validatorPrimitives.tBoolean
    });
    _validatorPrimitives.scheme.JsonPipeInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.JsonPipeMessageEvent = (0, _validatorPrimitives.tObject)({
      message: _validatorPrimitives.tAny
    });
    _validatorPrimitives.scheme.JsonPipeClosedEvent = (0, _validatorPrimitives.tObject)({
      reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    });
    _validatorPrimitives.scheme.JsonPipeSendParams = (0, _validatorPrimitives.tObject)({
      message: _validatorPrimitives.tAny
    });
    _validatorPrimitives.scheme.JsonPipeSendResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.JsonPipeCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
    _validatorPrimitives.scheme.JsonPipeCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  })(validator);
  return validator;
}
var errors$1 = {};
var serializers = {};
var hasRequiredSerializers;
function requireSerializers() {
  if (hasRequiredSerializers) return serializers;
  hasRequiredSerializers = 1;
  Object.defineProperty(serializers, "__esModule", {
    value: true
  });
  serializers.parseSerializedValue = parseSerializedValue;
  serializers.serializeValue = serializeValue;
  function parseSerializedValue(value, handles) {
    return innerParseSerializedValue(value, handles, /* @__PURE__ */ new Map());
  }
  function innerParseSerializedValue(value, handles, refs) {
    if (value.ref !== void 0) return refs.get(value.ref);
    if (value.n !== void 0) return value.n;
    if (value.s !== void 0) return value.s;
    if (value.b !== void 0) return value.b;
    if (value.v !== void 0) {
      if (value.v === "undefined") return void 0;
      if (value.v === "null") return null;
      if (value.v === "NaN") return NaN;
      if (value.v === "Infinity") return Infinity;
      if (value.v === "-Infinity") return -Infinity;
      if (value.v === "-0") return -0;
    }
    if (value.d !== void 0) return new Date(value.d);
    if (value.u !== void 0) return new URL(value.u);
    if (value.bi !== void 0) return BigInt(value.bi);
    if (value.e !== void 0) {
      const error = new Error(value.e.m);
      error.name = value.e.n;
      error.stack = value.e.s;
      return error;
    }
    if (value.r !== void 0) return new RegExp(value.r.p, value.r.f);
    if (value.a !== void 0) {
      const result = [];
      refs.set(value.id, result);
      for (const v2 of value.a) result.push(innerParseSerializedValue(v2, handles, refs));
      return result;
    }
    if (value.o !== void 0) {
      const result = {};
      refs.set(value.id, result);
      for (const {
        k: k2,
        v: v2
      } of value.o) result[k2] = innerParseSerializedValue(v2, handles, refs);
      return result;
    }
    if (value.h !== void 0) {
      if (handles === void 0) throw new Error("Unexpected handle");
      return handles[value.h];
    }
    throw new Error("Unexpected value");
  }
  function serializeValue(value, handleSerializer) {
    return innerSerializeValue(value, handleSerializer, {
      lastId: 0,
      visited: /* @__PURE__ */ new Map()
    });
  }
  function innerSerializeValue(value, handleSerializer, visitorInfo) {
    const handle = handleSerializer(value);
    if ("fallThrough" in handle) value = handle.fallThrough;
    else return handle;
    if (typeof value === "symbol") return {
      v: "undefined"
    };
    if (Object.is(value, void 0)) return {
      v: "undefined"
    };
    if (Object.is(value, null)) return {
      v: "null"
    };
    if (Object.is(value, NaN)) return {
      v: "NaN"
    };
    if (Object.is(value, Infinity)) return {
      v: "Infinity"
    };
    if (Object.is(value, -Infinity)) return {
      v: "-Infinity"
    };
    if (Object.is(value, -0)) return {
      v: "-0"
    };
    if (typeof value === "boolean") return {
      b: value
    };
    if (typeof value === "number") return {
      n: value
    };
    if (typeof value === "string") return {
      s: value
    };
    if (typeof value === "bigint") return {
      bi: value.toString()
    };
    if (isError(value)) return {
      e: {
        n: value.name,
        m: value.message,
        s: value.stack || ""
      }
    };
    if (isDate(value)) return {
      d: value.toJSON()
    };
    if (isURL(value)) return {
      u: value.toJSON()
    };
    if (isRegExp(value)) return {
      r: {
        p: value.source,
        f: value.flags
      }
    };
    const id = visitorInfo.visited.get(value);
    if (id) return {
      ref: id
    };
    if (Array.isArray(value)) {
      const a = [];
      const id2 = ++visitorInfo.lastId;
      visitorInfo.visited.set(value, id2);
      for (let i = 0; i < value.length; ++i) a.push(innerSerializeValue(value[i], handleSerializer, visitorInfo));
      return {
        a,
        id: id2
      };
    }
    if (typeof value === "object") {
      const o2 = [];
      const id2 = ++visitorInfo.lastId;
      visitorInfo.visited.set(value, id2);
      for (const name of Object.keys(value)) o2.push({
        k: name,
        v: innerSerializeValue(value[name], handleSerializer, visitorInfo)
      });
      return {
        o: o2,
        id: id2
      };
    }
    throw new Error("Unexpected value");
  }
  function isRegExp(obj) {
    return obj instanceof RegExp || Object.prototype.toString.call(obj) === "[object RegExp]";
  }
  function isDate(obj) {
    return obj instanceof Date || Object.prototype.toString.call(obj) === "[object Date]";
  }
  function isURL(obj) {
    return obj instanceof URL || Object.prototype.toString.call(obj) === "[object URL]";
  }
  function isError(obj) {
    const proto = obj ? Object.getPrototypeOf(obj) : null;
    return obj instanceof Error || (proto === null || proto === void 0 ? void 0 : proto.name) === "Error" || proto && isError(proto);
  }
  return serializers;
}
var hasRequiredErrors$1;
function requireErrors$1() {
  if (hasRequiredErrors$1) return errors$1;
  hasRequiredErrors$1 = 1;
  Object.defineProperty(errors$1, "__esModule", {
    value: true
  });
  errors$1.TimeoutError = errors$1.TargetClosedError = void 0;
  errors$1.isTargetClosedError = isTargetClosedError;
  errors$1.parseError = parseError;
  errors$1.serializeError = serializeError;
  var _serializers = requireSerializers();
  var _utils = requireUtils();
  class CustomError extends Error {
    constructor(message) {
      super(message);
      this.name = this.constructor.name;
    }
  }
  class TimeoutError extends CustomError {
  }
  errors$1.TimeoutError = TimeoutError;
  class TargetClosedError extends CustomError {
    constructor(cause, logs) {
      super((cause || "Target page, context or browser has been closed") + (logs || ""));
    }
  }
  errors$1.TargetClosedError = TargetClosedError;
  function isTargetClosedError(error) {
    return error instanceof TargetClosedError || error.name === "TargetClosedError";
  }
  function serializeError(e2) {
    if ((0, _utils.isError)(e2)) return {
      error: {
        message: e2.message,
        stack: e2.stack,
        name: e2.name
      }
    };
    return {
      value: (0, _serializers.serializeValue)(e2, (value) => ({
        fallThrough: value
      }))
    };
  }
  function parseError(error) {
    if (!error.error) {
      if (error.value === void 0) throw new Error("Serialized error must have either an error or a value");
      return (0, _serializers.parseSerializedValue)(error.value, void 0);
    }
    const e2 = new Error(error.error.message);
    e2.stack = error.error.stack || "";
    e2.name = error.error.name;
    return e2;
  }
  return errors$1;
}
var instrumentation = {};
var hasRequiredInstrumentation;
function requireInstrumentation() {
  if (hasRequiredInstrumentation) return instrumentation;
  hasRequiredInstrumentation = 1;
  Object.defineProperty(instrumentation, "__esModule", {
    value: true
  });
  instrumentation.SdkObject = void 0;
  instrumentation.createInstrumentation = createInstrumentation;
  instrumentation.serverSideCallMetadata = serverSideCallMetadata;
  var _events = require$$0$4;
  var _crypto = requireCrypto();
  class SdkObject extends _events.EventEmitter {
    constructor(parent, guidPrefix, guid) {
      super();
      this.guid = void 0;
      this.attribution = void 0;
      this.instrumentation = void 0;
      this.guid = guid || `${guidPrefix || ""}@${(0, _crypto.createGuid)()}`;
      this.setMaxListeners(0);
      this.attribution = {
        ...parent.attribution
      };
      this.instrumentation = parent.instrumentation;
    }
  }
  instrumentation.SdkObject = SdkObject;
  function createInstrumentation() {
    const listeners = /* @__PURE__ */ new Map();
    return new Proxy({}, {
      get: (obj, prop) => {
        if (typeof prop !== "string") return obj[prop];
        if (prop === "addListener") return (listener, context) => listeners.set(listener, context);
        if (prop === "removeListener") return (listener) => listeners.delete(listener);
        if (!prop.startsWith("on")) return obj[prop];
        return async (sdkObject, ...params) => {
          for (const [listener, context] of listeners) {
            var _prop, _ref;
            if (!context || sdkObject.attribution.context === context) await ((_prop = (_ref = listener)[prop]) === null || _prop === void 0 ? void 0 : _prop.call(_ref, sdkObject, ...params));
          }
        };
      }
    });
  }
  function serverSideCallMetadata() {
    return {
      id: "",
      startTime: 0,
      endTime: 0,
      type: "Internal",
      method: "",
      params: {},
      log: [],
      isServerSide: true
    };
  }
  return instrumentation;
}
var protocolError = {};
var hasRequiredProtocolError;
function requireProtocolError() {
  if (hasRequiredProtocolError) return protocolError;
  hasRequiredProtocolError = 1;
  Object.defineProperty(protocolError, "__esModule", {
    value: true
  });
  protocolError.ProtocolError = void 0;
  protocolError.isProtocolError = isProtocolError;
  protocolError.isSessionClosedError = isSessionClosedError;
  var _stackTrace = requireStackTrace();
  class ProtocolError extends Error {
    constructor(type, method, logs) {
      super();
      this.type = void 0;
      this.method = void 0;
      this.logs = void 0;
      this.type = type;
      this.method = method;
      this.logs = logs;
    }
    setMessage(message) {
      (0, _stackTrace.rewriteErrorMessage)(this, `Protocol error (${this.method}): ${message}`);
    }
    browserLogMessage() {
      return this.logs ? "\nBrowser logs:\n" + this.logs : "";
    }
  }
  protocolError.ProtocolError = ProtocolError;
  function isProtocolError(e2) {
    return e2 instanceof ProtocolError;
  }
  function isSessionClosedError(e2) {
    return e2 instanceof ProtocolError && (e2.type === "closed" || e2.type === "crashed");
  }
  return protocolError;
}
var callLog = {};
var hasRequiredCallLog;
function requireCallLog() {
  if (hasRequiredCallLog) return callLog;
  hasRequiredCallLog = 1;
  Object.defineProperty(callLog, "__esModule", {
    value: true
  });
  callLog.compressCallLog = compressCallLog;
  callLog.findRepeatedSubsequencesForTest = void 0;
  function compressCallLog(log2) {
    const lines = [];
    for (const block of findRepeatedSubsequences(log2)) {
      for (let i = 0; i < block.sequence.length; i++) {
        const line = block.sequence[i];
        const leadingWhitespace = line.match(/^\s*/);
        const whitespacePrefix = "  " + (leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace[0]) || "";
        const countPrefix = `${block.count} × `;
        if (block.count > 1 && i === 0) lines.push(whitespacePrefix + countPrefix + line.trim());
        else if (block.count > 1) lines.push(whitespacePrefix + " ".repeat(countPrefix.length - 2) + "- " + line.trim());
        else lines.push(whitespacePrefix + "- " + line.trim());
      }
    }
    return lines;
  }
  function findRepeatedSubsequences(s2) {
    const n = s2.length;
    const result = [];
    let i = 0;
    const arraysEqual = (a1, a2) => {
      if (a1.length !== a2.length) return false;
      for (let j = 0; j < a1.length; j++) {
        if (a1[j] !== a2[j]) return false;
      }
      return true;
    };
    while (i < n) {
      let maxRepeatCount = 1;
      let maxRepeatSubstr = [s2[i]];
      let maxRepeatLength = 1;
      for (let p = 1; p <= n - i; p++) {
        const substr = s2.slice(i, i + p);
        let k2 = 1;
        while (i + p * k2 <= n && arraysEqual(s2.slice(i + p * (k2 - 1), i + p * k2), substr)) k2 += 1;
        k2 -= 1;
        if (k2 > 1 && k2 * p > maxRepeatCount * maxRepeatLength) {
          maxRepeatCount = k2;
          maxRepeatSubstr = substr;
          maxRepeatLength = p;
        }
      }
      result.push({
        sequence: maxRepeatSubstr,
        count: maxRepeatCount
      });
      i += maxRepeatLength * maxRepeatCount;
    }
    return result;
  }
  callLog.findRepeatedSubsequencesForTest = findRepeatedSubsequences;
  return callLog;
}
var hasRequiredDispatcher;
function requireDispatcher() {
  if (hasRequiredDispatcher) return dispatcher;
  hasRequiredDispatcher = 1;
  Object.defineProperty(dispatcher, "__esModule", {
    value: true
  });
  dispatcher.dispatcherSymbol = dispatcher.RootDispatcher = dispatcher.DispatcherConnection = dispatcher.Dispatcher = void 0;
  dispatcher.existingDispatcher = existingDispatcher;
  dispatcher.setMaxDispatchersForTest = setMaxDispatchersForTest;
  var _events = require$$0$4;
  var _eventsHelper = requireEventsHelper();
  var _validator = requireValidator();
  var _utils = requireUtils();
  var _debug = requireDebug$1();
  var _errors = requireErrors$1();
  var _instrumentation = requireInstrumentation();
  var _protocolError = requireProtocolError();
  var _callLog = requireCallLog();
  const dispatcherSymbol = dispatcher.dispatcherSymbol = Symbol("dispatcher");
  const metadataValidator = (0, _validator.createMetadataValidator)();
  function existingDispatcher(object) {
    return object[dispatcherSymbol];
  }
  let maxDispatchersOverride;
  function setMaxDispatchersForTest(value) {
    maxDispatchersOverride = value;
  }
  function maxDispatchersForBucket(gcBucket) {
    var _ref;
    return (_ref = maxDispatchersOverride !== null && maxDispatchersOverride !== void 0 ? maxDispatchersOverride : {
      "JSHandle": 1e5,
      "ElementHandle": 1e5
    }[gcBucket]) !== null && _ref !== void 0 ? _ref : 1e4;
  }
  class Dispatcher extends _events.EventEmitter {
    constructor(parent, object, type, initializer, gcBucket) {
      super();
      this._connection = void 0;
      this._parent = void 0;
      this._dispatchers = /* @__PURE__ */ new Map();
      this._disposed = false;
      this._eventListeners = [];
      this._guid = void 0;
      this._type = void 0;
      this._gcBucket = void 0;
      this._object = void 0;
      this._openScope = new _utils.LongStandingScope();
      this._connection = parent instanceof DispatcherConnection ? parent : parent._connection;
      this._parent = parent instanceof DispatcherConnection ? void 0 : parent;
      const guid = object.guid;
      this._guid = guid;
      this._type = type;
      this._object = object;
      this._gcBucket = gcBucket !== null && gcBucket !== void 0 ? gcBucket : type;
      object[dispatcherSymbol] = this;
      this._connection.registerDispatcher(this);
      if (this._parent) {
        (0, _utils.assert)(!this._parent._dispatchers.has(guid));
        this._parent._dispatchers.set(guid, this);
      }
      if (this._parent) this._connection.sendCreate(this._parent, type, guid, initializer);
      this._connection.maybeDisposeStaleDispatchers(this._gcBucket);
    }
    parentScope() {
      return this._parent;
    }
    addObjectListener(eventName, handler) {
      this._eventListeners.push(_eventsHelper.eventsHelper.addEventListener(this._object, eventName, handler));
    }
    adopt(child) {
      if (child._parent === this) return;
      const oldParent = child._parent;
      oldParent._dispatchers.delete(child._guid);
      this._dispatchers.set(child._guid, child);
      child._parent = this;
      this._connection.sendAdopt(this, child);
    }
    async _handleCommand(callMetadata, method, validParams) {
      const commandPromise = this[method](validParams, callMetadata);
      try {
        return await this._openScope.race(commandPromise);
      } catch (e2) {
        if (callMetadata.potentiallyClosesScope && (0, _errors.isTargetClosedError)(e2)) return await commandPromise;
        throw e2;
      }
    }
    _dispatchEvent(method, params) {
      if (this._disposed) {
        if ((0, _debug.isUnderTest)()) throw new Error(`${this._guid} is sending "${String(method)}" event after being disposed`);
        return;
      }
      this._connection.sendEvent(this, method, params);
    }
    _dispose(reason) {
      this._disposeRecursively(new _errors.TargetClosedError());
      this._connection.sendDispose(this, reason);
    }
    _onDispose() {
    }
    _disposeRecursively(error) {
      var _this$_parent;
      (0, _utils.assert)(!this._disposed, `${this._guid} is disposed more than once`);
      this._onDispose();
      this._disposed = true;
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      (_this$_parent = this._parent) === null || _this$_parent === void 0 || _this$_parent._dispatchers.delete(this._guid);
      const list = this._connection._dispatchersByBucket.get(this._gcBucket);
      list === null || list === void 0 || list.delete(this._guid);
      this._connection._dispatchers.delete(this._guid);
      for (const dispatcher2 of [...this._dispatchers.values()]) dispatcher2._disposeRecursively(error);
      this._dispatchers.clear();
      delete this._object[dispatcherSymbol];
      this._openScope.close(error);
    }
    _debugScopeState() {
      return {
        _guid: this._guid,
        objects: Array.from(this._dispatchers.values()).map((o2) => o2._debugScopeState())
      };
    }
    async waitForEventInfo() {
    }
  }
  dispatcher.Dispatcher = Dispatcher;
  class RootDispatcher extends Dispatcher {
    constructor(connection2, createPlaywright) {
      super(connection2, {
        guid: ""
      }, "Root", {});
      this._initialized = false;
      this.createPlaywright = createPlaywright;
    }
    async initialize(params) {
      (0, _utils.assert)(this.createPlaywright);
      (0, _utils.assert)(!this._initialized);
      this._initialized = true;
      return {
        playwright: await this.createPlaywright(this, params)
      };
    }
  }
  dispatcher.RootDispatcher = RootDispatcher;
  class DispatcherConnection {
    constructor(isLocal) {
      this._dispatchers = /* @__PURE__ */ new Map();
      this._dispatchersByBucket = /* @__PURE__ */ new Map();
      this.onmessage = (message) => {
      };
      this._waitOperations = /* @__PURE__ */ new Map();
      this._isLocal = void 0;
      this._isLocal = !!isLocal;
    }
    sendEvent(dispatcher2, event, params) {
      const validator2 = (0, _validator.findValidator)(dispatcher2._type, event, "Event");
      params = validator2(params, "", this._validatorToWireContext());
      this.onmessage({
        guid: dispatcher2._guid,
        method: event,
        params
      });
    }
    sendCreate(parent, type, guid, initializer) {
      const validator2 = (0, _validator.findValidator)(type, "", "Initializer");
      initializer = validator2(initializer, "", this._validatorToWireContext());
      this.onmessage({
        guid: parent._guid,
        method: "__create__",
        params: {
          type,
          initializer,
          guid
        }
      });
    }
    sendAdopt(parent, dispatcher2) {
      this.onmessage({
        guid: parent._guid,
        method: "__adopt__",
        params: {
          guid: dispatcher2._guid
        }
      });
    }
    sendDispose(dispatcher2, reason) {
      this.onmessage({
        guid: dispatcher2._guid,
        method: "__dispose__",
        params: {
          reason
        }
      });
    }
    _validatorToWireContext() {
      return {
        tChannelImpl: this._tChannelImplToWire.bind(this),
        binary: this._isLocal ? "buffer" : "toBase64",
        isUnderTest: _debug.isUnderTest
      };
    }
    _validatorFromWireContext() {
      return {
        tChannelImpl: this._tChannelImplFromWire.bind(this),
        binary: this._isLocal ? "buffer" : "fromBase64",
        isUnderTest: _debug.isUnderTest
      };
    }
    _tChannelImplFromWire(names, arg, path, context) {
      if (arg && typeof arg === "object" && typeof arg.guid === "string") {
        const guid = arg.guid;
        const dispatcher2 = this._dispatchers.get(guid);
        if (!dispatcher2) throw new _validator.ValidationError(`${path}: no object with guid ${guid}`);
        if (names !== "*" && !names.includes(dispatcher2._type)) throw new _validator.ValidationError(`${path}: object with guid ${guid} has type ${dispatcher2._type}, expected ${names.toString()}`);
        return dispatcher2;
      }
      throw new _validator.ValidationError(`${path}: expected guid for ${names.toString()}`);
    }
    _tChannelImplToWire(names, arg, path, context) {
      if (arg instanceof Dispatcher) {
        if (names !== "*" && !names.includes(arg._type)) throw new _validator.ValidationError(`${path}: dispatcher with guid ${arg._guid} has type ${arg._type}, expected ${names.toString()}`);
        return {
          guid: arg._guid
        };
      }
      throw new _validator.ValidationError(`${path}: expected dispatcher ${names.toString()}`);
    }
    registerDispatcher(dispatcher2) {
      (0, _utils.assert)(!this._dispatchers.has(dispatcher2._guid));
      this._dispatchers.set(dispatcher2._guid, dispatcher2);
      let list = this._dispatchersByBucket.get(dispatcher2._gcBucket);
      if (!list) {
        list = /* @__PURE__ */ new Set();
        this._dispatchersByBucket.set(dispatcher2._gcBucket, list);
      }
      list.add(dispatcher2._guid);
    }
    maybeDisposeStaleDispatchers(gcBucket) {
      const maxDispatchers = maxDispatchersForBucket(gcBucket);
      const list = this._dispatchersByBucket.get(gcBucket);
      if (!list || list.size <= maxDispatchers) return;
      const dispatchersArray = [...list];
      const disposeCount = maxDispatchers / 10 | 0;
      this._dispatchersByBucket.set(gcBucket, new Set(dispatchersArray.slice(disposeCount)));
      for (let i = 0; i < disposeCount; ++i) {
        const d2 = this._dispatchers.get(dispatchersArray[i]);
        if (!d2) continue;
        d2._dispose("gc");
      }
    }
    async dispatch(message) {
      var _sdkObject$attributio, _sdkObject$attributio2, _params$info;
      const {
        id,
        guid,
        method,
        params,
        metadata
      } = message;
      const dispatcher2 = this._dispatchers.get(guid);
      if (!dispatcher2) {
        this.onmessage({
          id,
          error: (0, _errors.serializeError)(new _errors.TargetClosedError())
        });
        return;
      }
      let validParams;
      let validMetadata;
      try {
        const validator2 = (0, _validator.findValidator)(dispatcher2._type, method, "Params");
        const validatorContext = this._validatorFromWireContext();
        validParams = validator2(params, "", validatorContext);
        validMetadata = metadataValidator(metadata, "", validatorContext);
        if (typeof dispatcher2[method] !== "function") throw new Error(`Mismatching dispatcher: "${dispatcher2._type}" does not implement "${method}"`);
      } catch (e2) {
        this.onmessage({
          id,
          error: (0, _errors.serializeError)(e2)
        });
        return;
      }
      const sdkObject = dispatcher2._object instanceof _instrumentation.SdkObject ? dispatcher2._object : void 0;
      const callMetadata = {
        id: `call@${id}`,
        location: validMetadata.location,
        apiName: validMetadata.apiName,
        internal: validMetadata.internal,
        stepId: validMetadata.stepId,
        objectId: sdkObject === null || sdkObject === void 0 ? void 0 : sdkObject.guid,
        pageId: sdkObject === null || sdkObject === void 0 || (_sdkObject$attributio = sdkObject.attribution) === null || _sdkObject$attributio === void 0 || (_sdkObject$attributio = _sdkObject$attributio.page) === null || _sdkObject$attributio === void 0 ? void 0 : _sdkObject$attributio.guid,
        frameId: sdkObject === null || sdkObject === void 0 || (_sdkObject$attributio2 = sdkObject.attribution) === null || _sdkObject$attributio2 === void 0 || (_sdkObject$attributio2 = _sdkObject$attributio2.frame) === null || _sdkObject$attributio2 === void 0 ? void 0 : _sdkObject$attributio2.guid,
        startTime: (0, _utils.monotonicTime)(),
        endTime: 0,
        type: dispatcher2._type,
        method,
        params: params || {},
        log: []
      };
      if (sdkObject && params !== null && params !== void 0 && (_params$info = params.info) !== null && _params$info !== void 0 && _params$info.waitId) {
        const info = params.info;
        switch (info.phase) {
          case "before": {
            this._waitOperations.set(info.waitId, callMetadata);
            await sdkObject.instrumentation.onBeforeCall(sdkObject, callMetadata);
            this.onmessage({
              id
            });
            return;
          }
          case "log": {
            const originalMetadata = this._waitOperations.get(info.waitId);
            originalMetadata.log.push(info.message);
            sdkObject.instrumentation.onCallLog(sdkObject, originalMetadata, "api", info.message);
            this.onmessage({
              id
            });
            return;
          }
          case "after": {
            const originalMetadata = this._waitOperations.get(info.waitId);
            originalMetadata.endTime = (0, _utils.monotonicTime)();
            originalMetadata.error = info.error ? {
              error: {
                name: "Error",
                message: info.error
              }
            } : void 0;
            this._waitOperations.delete(info.waitId);
            await sdkObject.instrumentation.onAfterCall(sdkObject, originalMetadata);
            this.onmessage({
              id
            });
            return;
          }
        }
      }
      await (sdkObject === null || sdkObject === void 0 ? void 0 : sdkObject.instrumentation.onBeforeCall(sdkObject, callMetadata));
      const response = {
        id
      };
      try {
        const result = await dispatcher2._handleCommand(callMetadata, method, validParams);
        const validator2 = (0, _validator.findValidator)(dispatcher2._type, method, "Result");
        response.result = validator2(result, "", this._validatorToWireContext());
        callMetadata.result = result;
      } catch (e2) {
        if ((0, _errors.isTargetClosedError)(e2) && sdkObject) {
          const reason = closeReason(sdkObject);
          if (reason) (0, _utils.rewriteErrorMessage)(e2, reason);
        } else if ((0, _protocolError.isProtocolError)(e2)) {
          if (e2.type === "closed") {
            const reason = sdkObject ? closeReason(sdkObject) : void 0;
            e2 = new _errors.TargetClosedError(reason, e2.browserLogMessage());
          } else if (e2.type === "crashed") {
            (0, _utils.rewriteErrorMessage)(e2, "Target crashed " + e2.browserLogMessage());
          }
        }
        response.error = (0, _errors.serializeError)(e2);
        callMetadata.error = response.error;
      } finally {
        callMetadata.endTime = (0, _utils.monotonicTime)();
        await (sdkObject === null || sdkObject === void 0 ? void 0 : sdkObject.instrumentation.onAfterCall(sdkObject, callMetadata));
      }
      if (response.error) response.log = (0, _callLog.compressCallLog)(callMetadata.log);
      this.onmessage(response);
    }
  }
  dispatcher.DispatcherConnection = DispatcherConnection;
  function closeReason(sdkObject) {
    var _sdkObject$attributio3, _sdkObject$attributio4, _sdkObject$attributio5;
    return ((_sdkObject$attributio3 = sdkObject.attribution.page) === null || _sdkObject$attributio3 === void 0 ? void 0 : _sdkObject$attributio3._closeReason) || ((_sdkObject$attributio4 = sdkObject.attribution.context) === null || _sdkObject$attributio4 === void 0 ? void 0 : _sdkObject$attributio4._closeReason) || ((_sdkObject$attributio5 = sdkObject.attribution.browser) === null || _sdkObject$attributio5 === void 0 ? void 0 : _sdkObject$attributio5._closeReason);
  }
  return dispatcher;
}
var playwrightDispatcher = {};
var fetch$2 = {};
var timeoutSettings$1 = {};
var hasRequiredTimeoutSettings$1;
function requireTimeoutSettings$1() {
  if (hasRequiredTimeoutSettings$1) return timeoutSettings$1;
  hasRequiredTimeoutSettings$1 = 1;
  Object.defineProperty(timeoutSettings$1, "__esModule", {
    value: true
  });
  timeoutSettings$1.TimeoutSettings = timeoutSettings$1.DEFAULT_TIMEOUT = timeoutSettings$1.DEFAULT_LAUNCH_TIMEOUT = void 0;
  var _debug = requireDebug$1();
  const DEFAULT_TIMEOUT = timeoutSettings$1.DEFAULT_TIMEOUT = 3e4;
  const DEFAULT_LAUNCH_TIMEOUT = timeoutSettings$1.DEFAULT_LAUNCH_TIMEOUT = 3 * 60 * 1e3;
  class TimeoutSettings {
    constructor(parent) {
      this._parent = void 0;
      this._defaultTimeout = void 0;
      this._defaultNavigationTimeout = void 0;
      this._parent = parent;
    }
    setDefaultTimeout(timeout) {
      this._defaultTimeout = timeout;
    }
    setDefaultNavigationTimeout(timeout) {
      this._defaultNavigationTimeout = timeout;
    }
    defaultNavigationTimeout() {
      return this._defaultNavigationTimeout;
    }
    defaultTimeout() {
      return this._defaultTimeout;
    }
    navigationTimeout(options) {
      if (typeof options.timeout === "number") return options.timeout;
      if (this._defaultNavigationTimeout !== void 0) return this._defaultNavigationTimeout;
      if ((0, _debug.debugMode)()) return 0;
      if (this._defaultTimeout !== void 0) return this._defaultTimeout;
      if (this._parent) return this._parent.navigationTimeout(options);
      return DEFAULT_TIMEOUT;
    }
    timeout(options) {
      if (typeof options.timeout === "number") return options.timeout;
      if ((0, _debug.debugMode)()) return 0;
      if (this._defaultTimeout !== void 0) return this._defaultTimeout;
      if (this._parent) return this._parent.timeout(options);
      return DEFAULT_TIMEOUT;
    }
    static timeout(options) {
      if (typeof options.timeout === "number") return options.timeout;
      if ((0, _debug.debugMode)()) return 0;
      return DEFAULT_TIMEOUT;
    }
    static launchTimeout(options) {
      if (typeof options.timeout === "number") return options.timeout;
      if ((0, _debug.debugMode)()) return 0;
      return DEFAULT_LAUNCH_TIMEOUT;
    }
  }
  timeoutSettings$1.TimeoutSettings = TimeoutSettings;
  return timeoutSettings$1;
}
var browserContext$1 = {};
var clock$1 = {};
var clockSource = {};
var hasRequiredClockSource;
function requireClockSource() {
  if (hasRequiredClockSource) return clockSource;
  hasRequiredClockSource = 1;
  Object.defineProperty(clockSource, "__esModule", {
    value: true
  });
  clockSource.source = void 0;
  clockSource.source = '\nvar __commonJS = obj => {\n  let required = false;\n  let result;\n  return function __require() {\n    if (!required) {\n      required = true;\n      let fn;\n      for (const name in obj) { fn = obj[name]; break; }\n      const module = { exports: {} };\n      fn(module.exports, module);\n      result = module.exports;\n    }\n    return result;\n  }\n};\nvar __export = (target, all) => {for (var name in all) target[name] = all[name];};\nvar __toESM = mod => ({ ...mod, \'default\': mod });\nvar __toCommonJS = mod => ({ ...mod, __esModule: true });\n\n\n// packages/playwright-core/src/server/injected/clock.ts\nvar clock_exports = {};\n__export(clock_exports, {\n  ClockController: () => ClockController,\n  createClock: () => createClock,\n  inject: () => inject,\n  install: () => install\n});\nmodule.exports = __toCommonJS(clock_exports);\nvar ClockController = class {\n  constructor(embedder) {\n    this._duringTick = false;\n    this._timers = /* @__PURE__ */ new Map();\n    this._uniqueTimerId = idCounterStart;\n    this.disposables = [];\n    this._log = [];\n    this._now = { time: asWallTime(0), isFixedTime: false, ticks: 0, origin: asWallTime(-1) };\n    this._embedder = embedder;\n  }\n  uninstall() {\n    this.disposables.forEach((dispose) => dispose());\n    this.disposables.length = 0;\n  }\n  now() {\n    this._replayLogOnce();\n    return this._now.time;\n  }\n  install(time) {\n    this._replayLogOnce();\n    this._innerSetTime(asWallTime(time));\n  }\n  setSystemTime(time) {\n    this._replayLogOnce();\n    this._innerSetTime(asWallTime(time));\n  }\n  setFixedTime(time) {\n    this._replayLogOnce();\n    this._innerSetFixedTime(asWallTime(time));\n  }\n  performanceNow() {\n    this._replayLogOnce();\n    return this._now.ticks;\n  }\n  _innerSetTime(time) {\n    this._now.time = time;\n    this._now.isFixedTime = false;\n    if (this._now.origin < 0)\n      this._now.origin = this._now.time;\n  }\n  _innerSetFixedTime(time) {\n    this._innerSetTime(time);\n    this._now.isFixedTime = true;\n  }\n  _advanceNow(to) {\n    if (!this._now.isFixedTime)\n      this._now.time = asWallTime(this._now.time + to - this._now.ticks);\n    this._now.ticks = to;\n  }\n  async log(type, time, param) {\n    this._log.push({ type, time, param });\n  }\n  async runFor(ticks) {\n    this._replayLogOnce();\n    if (ticks < 0)\n      throw new TypeError("Negative ticks are not supported");\n    await this._runTo(shiftTicks(this._now.ticks, ticks));\n  }\n  async _runTo(to) {\n    to = Math.ceil(to);\n    if (this._now.ticks > to)\n      return;\n    let firstException;\n    while (true) {\n      const result = await this._callFirstTimer(to);\n      if (!result.timerFound)\n        break;\n      firstException = firstException || result.error;\n    }\n    this._advanceNow(to);\n    if (firstException)\n      throw firstException;\n  }\n  async pauseAt(time) {\n    this._replayLogOnce();\n    this._innerPause();\n    const toConsume = time - this._now.time;\n    await this._innerFastForwardTo(shiftTicks(this._now.ticks, toConsume));\n    return toConsume;\n  }\n  _innerPause() {\n    this._realTime = void 0;\n    this._updateRealTimeTimer();\n  }\n  resume() {\n    this._replayLogOnce();\n    this._innerResume();\n  }\n  _innerResume() {\n    const now = this._embedder.performanceNow();\n    this._realTime = { startTicks: now, lastSyncTicks: now };\n    this._updateRealTimeTimer();\n  }\n  _updateRealTimeTimer() {\n    var _a;\n    if (!this._realTime) {\n      (_a = this._currentRealTimeTimer) == null ? void 0 : _a.dispose();\n      this._currentRealTimeTimer = void 0;\n      return;\n    }\n    const firstTimer = this._firstTimer();\n    const callAt = Math.min(firstTimer ? firstTimer.callAt : this._now.ticks + maxTimeout, this._now.ticks + 100);\n    if (this._currentRealTimeTimer && this._currentRealTimeTimer.callAt < callAt)\n      return;\n    if (this._currentRealTimeTimer) {\n      this._currentRealTimeTimer.dispose();\n      this._currentRealTimeTimer = void 0;\n    }\n    this._currentRealTimeTimer = {\n      callAt,\n      dispose: this._embedder.setTimeout(() => {\n        const now = this._embedder.performanceNow();\n        this._currentRealTimeTimer = void 0;\n        const sinceLastSync = now - this._realTime.lastSyncTicks;\n        this._realTime.lastSyncTicks = now;\n        void this._runTo(shiftTicks(this._now.ticks, sinceLastSync)).catch((e) => console.error(e)).then(() => this._updateRealTimeTimer());\n      }, callAt - this._now.ticks)\n    };\n  }\n  async fastForward(ticks) {\n    this._replayLogOnce();\n    await this._innerFastForwardTo(shiftTicks(this._now.ticks, ticks | 0));\n  }\n  async _innerFastForwardTo(to) {\n    if (to < this._now.ticks)\n      throw new Error("Cannot fast-forward to the past");\n    for (const timer of this._timers.values()) {\n      if (to > timer.callAt)\n        timer.callAt = to;\n    }\n    await this._runTo(to);\n  }\n  addTimer(options) {\n    this._replayLogOnce();\n    if (options.type === "AnimationFrame" /* AnimationFrame */ && !options.func)\n      throw new Error("Callback must be provided to requestAnimationFrame calls");\n    if (options.type === "IdleCallback" /* IdleCallback */ && !options.func)\n      throw new Error("Callback must be provided to requestIdleCallback calls");\n    if (["Timeout" /* Timeout */, "Interval" /* Interval */].includes(options.type) && !options.func && options.delay === void 0)\n      throw new Error("Callback must be provided to timer calls");\n    let delay = options.delay ? +options.delay : 0;\n    if (!Number.isFinite(delay))\n      delay = 0;\n    delay = delay > maxTimeout ? 1 : delay;\n    delay = Math.max(0, delay);\n    const timer = {\n      type: options.type,\n      func: options.func,\n      args: options.args || [],\n      delay,\n      callAt: shiftTicks(this._now.ticks, delay || (this._duringTick ? 1 : 0)),\n      createdAt: this._now.ticks,\n      id: this._uniqueTimerId++,\n      error: new Error()\n    };\n    this._timers.set(timer.id, timer);\n    if (this._realTime)\n      this._updateRealTimeTimer();\n    return timer.id;\n  }\n  countTimers() {\n    return this._timers.size;\n  }\n  _firstTimer(beforeTick) {\n    let firstTimer = null;\n    for (const timer of this._timers.values()) {\n      const isInRange = beforeTick === void 0 || timer.callAt <= beforeTick;\n      if (isInRange && (!firstTimer || compareTimers(firstTimer, timer) === 1))\n        firstTimer = timer;\n    }\n    return firstTimer;\n  }\n  _takeFirstTimer(beforeTick) {\n    const timer = this._firstTimer(beforeTick);\n    if (!timer)\n      return null;\n    this._advanceNow(timer.callAt);\n    if (timer.type === "Interval" /* Interval */)\n      timer.callAt = shiftTicks(timer.callAt, timer.delay);\n    else\n      this._timers.delete(timer.id);\n    return timer;\n  }\n  async _callFirstTimer(beforeTick) {\n    const timer = this._takeFirstTimer(beforeTick);\n    if (!timer)\n      return { timerFound: false };\n    this._duringTick = true;\n    try {\n      if (typeof timer.func !== "function") {\n        let error2;\n        try {\n          (() => {\n            globalThis.eval(timer.func);\n          })();\n        } catch (e) {\n          error2 = e;\n        }\n        await new Promise((f) => this._embedder.setTimeout(f));\n        return { timerFound: true, error: error2 };\n      }\n      let args = timer.args;\n      if (timer.type === "AnimationFrame" /* AnimationFrame */)\n        args = [this._now.ticks];\n      else if (timer.type === "IdleCallback" /* IdleCallback */)\n        args = [{ didTimeout: false, timeRemaining: () => 0 }];\n      let error;\n      try {\n        timer.func.apply(null, args);\n      } catch (e) {\n        error = e;\n      }\n      await new Promise((f) => this._embedder.setTimeout(f));\n      return { timerFound: true, error };\n    } finally {\n      this._duringTick = false;\n    }\n  }\n  getTimeToNextFrame() {\n    return 16 - this._now.ticks % 16;\n  }\n  clearTimer(timerId, type) {\n    this._replayLogOnce();\n    if (!timerId) {\n      return;\n    }\n    const id = Number(timerId);\n    if (Number.isNaN(id) || id < idCounterStart) {\n      const handlerName = getClearHandler(type);\n      new Error(`Clock: ${handlerName} was invoked to clear a native timer instead of one created by the clock library.`);\n    }\n    const timer = this._timers.get(id);\n    if (timer) {\n      if (timer.type === type || timer.type === "Timeout" && type === "Interval" || timer.type === "Interval" && type === "Timeout") {\n        this._timers.delete(id);\n      } else {\n        const clear = getClearHandler(type);\n        const schedule = getScheduleHandler(timer.type);\n        throw new Error(\n          `Cannot clear timer: timer created with ${schedule}() but cleared with ${clear}()`\n        );\n      }\n    }\n  }\n  _replayLogOnce() {\n    if (!this._log.length)\n      return;\n    let lastLogTime = -1;\n    let isPaused = false;\n    for (const { type, time, param } of this._log) {\n      if (!isPaused && lastLogTime !== -1)\n        this._advanceNow(shiftTicks(this._now.ticks, time - lastLogTime));\n      lastLogTime = time;\n      if (type === "install") {\n        this._innerSetTime(asWallTime(param));\n      } else if (type === "fastForward" || type === "runFor") {\n        this._advanceNow(shiftTicks(this._now.ticks, param));\n      } else if (type === "pauseAt") {\n        isPaused = true;\n        this._innerPause();\n        this._innerSetTime(asWallTime(param));\n      } else if (type === "resume") {\n        this._innerResume();\n        isPaused = false;\n      } else if (type === "setFixedTime") {\n        this._innerSetFixedTime(asWallTime(param));\n      } else if (type === "setSystemTime") {\n        this._innerSetTime(asWallTime(param));\n      }\n    }\n    if (!isPaused && lastLogTime > 0)\n      this._advanceNow(shiftTicks(this._now.ticks, this._embedder.dateNow() - lastLogTime));\n    this._log.length = 0;\n  }\n};\nfunction mirrorDateProperties(target, source) {\n  for (const prop in source) {\n    if (source.hasOwnProperty(prop))\n      target[prop] = source[prop];\n  }\n  target.toString = () => source.toString();\n  target.prototype = source.prototype;\n  target.parse = source.parse;\n  target.UTC = source.UTC;\n  target.prototype.toUTCString = source.prototype.toUTCString;\n  target.isFake = true;\n  return target;\n}\nfunction createDate(clock, NativeDate) {\n  function ClockDate(year, month, date, hour, minute, second, ms) {\n    if (!(this instanceof ClockDate))\n      return new NativeDate(clock.now()).toString();\n    switch (arguments.length) {\n      case 0:\n        return new NativeDate(clock.now());\n      case 1:\n        return new NativeDate(year);\n      case 2:\n        return new NativeDate(year, month);\n      case 3:\n        return new NativeDate(year, month, date);\n      case 4:\n        return new NativeDate(year, month, date, hour);\n      case 5:\n        return new NativeDate(year, month, date, hour, minute);\n      case 6:\n        return new NativeDate(\n          year,\n          month,\n          date,\n          hour,\n          minute,\n          second\n        );\n      default:\n        return new NativeDate(\n          year,\n          month,\n          date,\n          hour,\n          minute,\n          second,\n          ms\n        );\n    }\n  }\n  ClockDate.now = () => clock.now();\n  return mirrorDateProperties(ClockDate, NativeDate);\n}\nfunction createIntl(clock, NativeIntl) {\n  const ClockIntl = {};\n  for (const key of Object.getOwnPropertyNames(NativeIntl))\n    ClockIntl[key] = NativeIntl[key];\n  ClockIntl.DateTimeFormat = function(...args) {\n    const realFormatter = new NativeIntl.DateTimeFormat(...args);\n    const formatter = {\n      formatRange: realFormatter.formatRange.bind(realFormatter),\n      formatRangeToParts: realFormatter.formatRangeToParts.bind(realFormatter),\n      resolvedOptions: realFormatter.resolvedOptions.bind(realFormatter),\n      format: (date) => realFormatter.format(date || clock.now()),\n      formatToParts: (date) => realFormatter.formatToParts(date || clock.now())\n    };\n    return formatter;\n  };\n  ClockIntl.DateTimeFormat.prototype = Object.create(\n    NativeIntl.DateTimeFormat.prototype\n  );\n  ClockIntl.DateTimeFormat.supportedLocalesOf = NativeIntl.DateTimeFormat.supportedLocalesOf;\n  return ClockIntl;\n}\nfunction compareTimers(a, b) {\n  if (a.callAt < b.callAt)\n    return -1;\n  if (a.callAt > b.callAt)\n    return 1;\n  if (a.type === "Immediate" /* Immediate */ && b.type !== "Immediate" /* Immediate */)\n    return -1;\n  if (a.type !== "Immediate" /* Immediate */ && b.type === "Immediate" /* Immediate */)\n    return 1;\n  if (a.createdAt < b.createdAt)\n    return -1;\n  if (a.createdAt > b.createdAt)\n    return 1;\n  if (a.id < b.id)\n    return -1;\n  if (a.id > b.id)\n    return 1;\n}\nvar maxTimeout = Math.pow(2, 31) - 1;\nvar idCounterStart = 1e12;\nfunction platformOriginals(globalObject) {\n  const raw = {\n    setTimeout: globalObject.setTimeout,\n    clearTimeout: globalObject.clearTimeout,\n    setInterval: globalObject.setInterval,\n    clearInterval: globalObject.clearInterval,\n    requestAnimationFrame: globalObject.requestAnimationFrame ? globalObject.requestAnimationFrame : void 0,\n    cancelAnimationFrame: globalObject.cancelAnimationFrame ? globalObject.cancelAnimationFrame : void 0,\n    requestIdleCallback: globalObject.requestIdleCallback ? globalObject.requestIdleCallback : void 0,\n    cancelIdleCallback: globalObject.cancelIdleCallback ? globalObject.cancelIdleCallback : void 0,\n    Date: globalObject.Date,\n    performance: globalObject.performance,\n    Intl: globalObject.Intl\n  };\n  const bound = { ...raw };\n  for (const key of Object.keys(bound)) {\n    if (key !== "Date" && typeof bound[key] === "function")\n      bound[key] = bound[key].bind(globalObject);\n  }\n  return { raw, bound };\n}\nfunction getScheduleHandler(type) {\n  if (type === "IdleCallback" || type === "AnimationFrame")\n    return `request${type}`;\n  return `set${type}`;\n}\nfunction createApi(clock, originals) {\n  return {\n    setTimeout: (func, timeout, ...args) => {\n      const delay = timeout ? +timeout : timeout;\n      return clock.addTimer({\n        type: "Timeout" /* Timeout */,\n        func,\n        args,\n        delay\n      });\n    },\n    clearTimeout: (timerId) => {\n      if (timerId)\n        clock.clearTimer(timerId, "Timeout" /* Timeout */);\n    },\n    setInterval: (func, timeout, ...args) => {\n      const delay = timeout ? +timeout : timeout;\n      return clock.addTimer({\n        type: "Interval" /* Interval */,\n        func,\n        args,\n        delay\n      });\n    },\n    clearInterval: (timerId) => {\n      if (timerId)\n        return clock.clearTimer(timerId, "Interval" /* Interval */);\n    },\n    requestAnimationFrame: (callback) => {\n      return clock.addTimer({\n        type: "AnimationFrame" /* AnimationFrame */,\n        func: callback,\n        delay: clock.getTimeToNextFrame()\n      });\n    },\n    cancelAnimationFrame: (timerId) => {\n      if (timerId)\n        return clock.clearTimer(timerId, "AnimationFrame" /* AnimationFrame */);\n    },\n    requestIdleCallback: (callback, options) => {\n      let timeToNextIdlePeriod = 0;\n      if (clock.countTimers() > 0)\n        timeToNextIdlePeriod = 50;\n      return clock.addTimer({\n        type: "IdleCallback" /* IdleCallback */,\n        func: callback,\n        delay: (options == null ? void 0 : options.timeout) ? Math.min(options == null ? void 0 : options.timeout, timeToNextIdlePeriod) : timeToNextIdlePeriod\n      });\n    },\n    cancelIdleCallback: (timerId) => {\n      if (timerId)\n        return clock.clearTimer(timerId, "IdleCallback" /* IdleCallback */);\n    },\n    Intl: originals.Intl ? createIntl(clock, originals.Intl) : void 0,\n    Date: createDate(clock, originals.Date),\n    performance: originals.performance ? fakePerformance(clock, originals.performance) : void 0\n  };\n}\nfunction getClearHandler(type) {\n  if (type === "IdleCallback" || type === "AnimationFrame")\n    return `cancel${type}`;\n  return `clear${type}`;\n}\nfunction fakePerformance(clock, performance) {\n  const result = {\n    now: () => clock.performanceNow()\n  };\n  result.__defineGetter__("timeOrigin", () => clock._now.origin || 0);\n  for (const key of Object.keys(performance.__proto__)) {\n    if (key === "now" || key === "timeOrigin")\n      continue;\n    if (key === "getEntries" || key === "getEntriesByName" || key === "getEntriesByType")\n      result[key] = () => [];\n    else\n      result[key] = () => {\n      };\n  }\n  return result;\n}\nfunction createClock(globalObject) {\n  const originals = platformOriginals(globalObject);\n  const embedder = {\n    dateNow: () => originals.raw.Date.now(),\n    performanceNow: () => Math.ceil(originals.raw.performance.now()),\n    setTimeout: (task, timeout) => {\n      const timerId = originals.bound.setTimeout(task, timeout);\n      return () => originals.bound.clearTimeout(timerId);\n    },\n    setInterval: (task, delay) => {\n      const intervalId = originals.bound.setInterval(task, delay);\n      return () => originals.bound.clearInterval(intervalId);\n    }\n  };\n  const clock = new ClockController(embedder);\n  const api = createApi(clock, originals.bound);\n  return { clock, api, originals: originals.raw };\n}\nfunction install(globalObject, config = {}) {\n  var _a, _b;\n  if ((_a = globalObject.Date) == null ? void 0 : _a.isFake) {\n    throw new TypeError(`Can\'t install fake timers twice on the same global object.`);\n  }\n  const { clock, api, originals } = createClock(globalObject);\n  const toFake = ((_b = config.toFake) == null ? void 0 : _b.length) ? config.toFake : Object.keys(originals);\n  for (const method of toFake) {\n    if (method === "Date") {\n      globalObject.Date = mirrorDateProperties(api.Date, globalObject.Date);\n    } else if (method === "Intl") {\n      globalObject.Intl = api[method];\n    } else if (method === "performance") {\n      globalObject.performance = api[method];\n      const kEventTimeStamp = Symbol("playwrightEventTimeStamp");\n      Object.defineProperty(Event.prototype, "timeStamp", {\n        get() {\n          var _a2;\n          if (!this[kEventTimeStamp])\n            this[kEventTimeStamp] = (_a2 = api.performance) == null ? void 0 : _a2.now();\n          return this[kEventTimeStamp];\n        }\n      });\n    } else {\n      globalObject[method] = (...args) => {\n        return api[method].apply(api, args);\n      };\n    }\n    clock.disposables.push(() => {\n      globalObject[method] = originals[method];\n    });\n  }\n  return { clock, api, originals };\n}\nfunction inject(globalObject) {\n  const builtin = platformOriginals(globalObject).bound;\n  const { clock: controller } = install(globalObject);\n  controller.resume();\n  return {\n    controller,\n    builtin\n  };\n}\nfunction asWallTime(n) {\n  return n;\n}\nfunction shiftTicks(ticks, ms) {\n  return ticks + ms;\n}\n';
  return clockSource;
}
var hasRequiredClock$1;
function requireClock$1() {
  if (hasRequiredClock$1) return clock$1;
  hasRequiredClock$1 = 1;
  Object.defineProperty(clock$1, "__esModule", {
    value: true
  });
  clock$1.Clock = void 0;
  var clockSource2 = _interopRequireWildcard(requireClockSource());
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  class Clock {
    constructor(browserContext2) {
      this._browserContext = void 0;
      this._scriptInstalled = false;
      this._browserContext = browserContext2;
    }
    markAsUninstalled() {
      this._scriptInstalled = false;
    }
    async fastForward(ticks) {
      await this._installIfNeeded();
      const ticksMillis = parseTicks(ticks);
      await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('fastForward', ${Date.now()}, ${ticksMillis})`);
      await this._evaluateInFrames(`globalThis.__pwClock.controller.fastForward(${ticksMillis})`);
    }
    async install(time2) {
      await this._installIfNeeded();
      const timeMillis = time2 !== void 0 ? parseTime(time2) : Date.now();
      await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('install', ${Date.now()}, ${timeMillis})`);
      await this._evaluateInFrames(`globalThis.__pwClock.controller.install(${timeMillis})`);
    }
    async pauseAt(ticks) {
      await this._installIfNeeded();
      const timeMillis = parseTime(ticks);
      await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('pauseAt', ${Date.now()}, ${timeMillis})`);
      await this._evaluateInFrames(`globalThis.__pwClock.controller.pauseAt(${timeMillis})`);
    }
    async resume() {
      await this._installIfNeeded();
      await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('resume', ${Date.now()})`);
      await this._evaluateInFrames(`globalThis.__pwClock.controller.resume()`);
    }
    async setFixedTime(time2) {
      await this._installIfNeeded();
      const timeMillis = parseTime(time2);
      await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('setFixedTime', ${Date.now()}, ${timeMillis})`);
      await this._evaluateInFrames(`globalThis.__pwClock.controller.setFixedTime(${timeMillis})`);
    }
    async setSystemTime(time2) {
      await this._installIfNeeded();
      const timeMillis = parseTime(time2);
      await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('setSystemTime', ${Date.now()}, ${timeMillis})`);
      await this._evaluateInFrames(`globalThis.__pwClock.controller.setSystemTime(${timeMillis})`);
    }
    async runFor(ticks) {
      await this._installIfNeeded();
      const ticksMillis = parseTicks(ticks);
      await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('runFor', ${Date.now()}, ${ticksMillis})`);
      await this._evaluateInFrames(`globalThis.__pwClock.controller.runFor(${ticksMillis})`);
    }
    async _installIfNeeded() {
      if (this._scriptInstalled) return;
      this._scriptInstalled = true;
      const script = `(() => {
      const module = {};
      ${clockSource2.source}
      globalThis.__pwClock = (module.exports.inject())(globalThis);
    })();`;
      await this._browserContext.addInitScript(script);
      await this._evaluateInFrames(script);
    }
    async _evaluateInFrames(script) {
      await this._browserContext.safeNonStallingEvaluateInAllFrames(script, "main", {
        throwOnJSErrors: true
      });
    }
  }
  clock$1.Clock = Clock;
  function parseTicks(value) {
    if (typeof value === "number") return value;
    if (!value) return 0;
    const str = value;
    const strings = str.split(":");
    const l = strings.length;
    let i = l;
    let ms2 = 0;
    let parsed;
    if (l > 3 || !/^(\d\d:){0,2}\d\d?$/.test(str)) {
      throw new Error(`Clock only understands numbers, 'mm:ss' and 'hh:mm:ss'`);
    }
    while (i--) {
      parsed = parseInt(strings[i], 10);
      if (parsed >= 60) throw new Error(`Invalid time ${str}`);
      ms2 += parsed * Math.pow(60, l - i - 1);
    }
    return ms2 * 1e3;
  }
  function parseTime(epoch) {
    if (!epoch) return 0;
    if (typeof epoch === "number") return epoch;
    const parsed = new Date(epoch);
    if (!isFinite(parsed.getTime())) throw new Error(`Invalid date: ${epoch}`);
    return parsed.getTime();
  }
  return clock$1;
}
var _debugger = {};
var debug = {};
var hasRequiredDebug;
function requireDebug() {
  if (hasRequiredDebug) return debug;
  hasRequiredDebug = 1;
  Object.defineProperty(debug, "__esModule", {
    value: true
  });
  debug.slowMoActions = debug.pausesBeforeInputActions = debug.commandsWithTracingSnapshots = void 0;
  debug.slowMoActions = /* @__PURE__ */ new Set(["Page.goBack", "Page.goForward", "Page.reload", "Page.keyboardDown", "Page.keyboardUp", "Page.keyboardInsertText", "Page.keyboardType", "Page.keyboardPress", "Page.mouseMove", "Page.mouseDown", "Page.mouseUp", "Page.mouseClick", "Page.mouseWheel", "Page.touchscreenTap", "Frame.blur", "Frame.check", "Frame.click", "Frame.dragAndDrop", "Frame.dblclick", "Frame.dispatchEvent", "Frame.fill", "Frame.focus", "Frame.goto", "Frame.hover", "Frame.press", "Frame.selectOption", "Frame.setInputFiles", "Frame.tap", "Frame.type", "Frame.uncheck", "ElementHandle.check", "ElementHandle.click", "ElementHandle.dblclick", "ElementHandle.dispatchEvent", "ElementHandle.fill", "ElementHandle.focus", "ElementHandle.hover", "ElementHandle.press", "ElementHandle.scrollIntoViewIfNeeded", "ElementHandle.selectOption", "ElementHandle.selectText", "ElementHandle.setInputFiles", "ElementHandle.tap", "ElementHandle.type", "ElementHandle.uncheck"]);
  debug.commandsWithTracingSnapshots = /* @__PURE__ */ new Set(["EventTarget.waitForEventInfo", "BrowserContext.waitForEventInfo", "Page.waitForEventInfo", "WebSocket.waitForEventInfo", "ElectronApplication.waitForEventInfo", "AndroidDevice.waitForEventInfo", "Page.emulateMedia", "Page.goBack", "Page.goForward", "Page.reload", "Page.expectScreenshot", "Page.screenshot", "Page.setViewportSize", "Page.keyboardDown", "Page.keyboardUp", "Page.keyboardInsertText", "Page.keyboardType", "Page.keyboardPress", "Page.mouseMove", "Page.mouseDown", "Page.mouseUp", "Page.mouseClick", "Page.mouseWheel", "Page.touchscreenTap", "Page.accessibilitySnapshot", "Frame.evalOnSelector", "Frame.evalOnSelectorAll", "Frame.addScriptTag", "Frame.addStyleTag", "Frame.ariaSnapshot", "Frame.blur", "Frame.check", "Frame.click", "Frame.content", "Frame.dragAndDrop", "Frame.dblclick", "Frame.dispatchEvent", "Frame.evaluateExpression", "Frame.evaluateExpressionHandle", "Frame.fill", "Frame.focus", "Frame.getAttribute", "Frame.goto", "Frame.hover", "Frame.innerHTML", "Frame.innerText", "Frame.inputValue", "Frame.isChecked", "Frame.isDisabled", "Frame.isEnabled", "Frame.isHidden", "Frame.isVisible", "Frame.isEditable", "Frame.press", "Frame.querySelector", "Frame.querySelectorAll", "Frame.queryCount", "Frame.selectOption", "Frame.setContent", "Frame.setInputFiles", "Frame.tap", "Frame.textContent", "Frame.type", "Frame.uncheck", "Frame.waitForTimeout", "Frame.waitForFunction", "Frame.waitForSelector", "Frame.expect", "JSHandle.evaluateExpression", "ElementHandle.evaluateExpression", "JSHandle.evaluateExpressionHandle", "ElementHandle.evaluateExpressionHandle", "ElementHandle.evalOnSelector", "ElementHandle.evalOnSelectorAll", "ElementHandle.boundingBox", "ElementHandle.check", "ElementHandle.click", "ElementHandle.contentFrame", "ElementHandle.dblclick", "ElementHandle.dispatchEvent", "ElementHandle.fill", "ElementHandle.focus", "ElementHandle.hover", "ElementHandle.innerHTML", "ElementHandle.innerText", "ElementHandle.inputValue", "ElementHandle.isChecked", "ElementHandle.isDisabled", "ElementHandle.isEditable", "ElementHandle.isEnabled", "ElementHandle.isHidden", "ElementHandle.isVisible", "ElementHandle.press", "ElementHandle.querySelector", "ElementHandle.querySelectorAll", "ElementHandle.screenshot", "ElementHandle.scrollIntoViewIfNeeded", "ElementHandle.selectOption", "ElementHandle.selectText", "ElementHandle.setInputFiles", "ElementHandle.tap", "ElementHandle.textContent", "ElementHandle.type", "ElementHandle.uncheck", "ElementHandle.waitForElementState", "ElementHandle.waitForSelector"]);
  debug.pausesBeforeInputActions = /* @__PURE__ */ new Set(["Frame.check", "Frame.click", "Frame.dragAndDrop", "Frame.dblclick", "Frame.fill", "Frame.hover", "Frame.press", "Frame.selectOption", "Frame.setInputFiles", "Frame.tap", "Frame.type", "Frame.uncheck", "ElementHandle.check", "ElementHandle.click", "ElementHandle.dblclick", "ElementHandle.fill", "ElementHandle.hover", "ElementHandle.press", "ElementHandle.selectOption", "ElementHandle.setInputFiles", "ElementHandle.tap", "ElementHandle.type", "ElementHandle.uncheck"]);
  return debug;
}
var hasRequired_debugger;
function require_debugger() {
  if (hasRequired_debugger) return _debugger;
  hasRequired_debugger = 1;
  Object.defineProperty(_debugger, "__esModule", {
    value: true
  });
  _debugger.Debugger = void 0;
  _debugger.shouldSlowMo = shouldSlowMo;
  var _events = require$$0$4;
  var _utils = requireUtils();
  var _browserContext = requireBrowserContext$1();
  var _debug = requireDebug();
  const symbol = Symbol("Debugger");
  class Debugger extends _events.EventEmitter {
    constructor(context) {
      super();
      this._pauseOnNextStatement = false;
      this._pausedCallsMetadata = /* @__PURE__ */ new Map();
      this._enabled = void 0;
      this._context = void 0;
      this._muted = false;
      this._slowMo = void 0;
      this._context = context;
      this._context[symbol] = this;
      this._enabled = (0, _utils.debugMode)() === "inspector";
      if (this._enabled) this.pauseOnNextStatement();
      context.instrumentation.addListener(this, context);
      this._context.once(_browserContext.BrowserContext.Events.Close, () => {
        this._context.instrumentation.removeListener(this);
      });
      this._slowMo = this._context._browser.options.slowMo;
    }
    async setMuted(muted) {
      this._muted = muted;
    }
    async onBeforeCall(sdkObject, metadata) {
      if (this._muted) return;
      if (shouldPauseOnCall(sdkObject, metadata) || this._pauseOnNextStatement && shouldPauseBeforeStep(metadata)) await this.pause(sdkObject, metadata);
    }
    async _doSlowMo() {
      await new Promise((f2) => setTimeout(f2, this._slowMo));
    }
    async onAfterCall(sdkObject, metadata) {
      if (this._slowMo && shouldSlowMo(metadata)) await this._doSlowMo();
    }
    async onBeforeInputAction(sdkObject, metadata) {
      if (this._muted) return;
      if (this._enabled && this._pauseOnNextStatement) await this.pause(sdkObject, metadata);
    }
    async pause(sdkObject, metadata) {
      if (this._muted) return;
      this._enabled = true;
      metadata.pauseStartTime = (0, _utils.monotonicTime)();
      const result = new Promise((resolve2) => {
        this._pausedCallsMetadata.set(metadata, {
          resolve: resolve2,
          sdkObject
        });
      });
      this.emit(Debugger.Events.PausedStateChanged);
      return result;
    }
    resume(step) {
      if (!this.isPaused()) return;
      this._pauseOnNextStatement = step;
      const endTime = (0, _utils.monotonicTime)();
      for (const [metadata, {
        resolve: resolve2
      }] of this._pausedCallsMetadata) {
        metadata.pauseEndTime = endTime;
        resolve2();
      }
      this._pausedCallsMetadata.clear();
      this.emit(Debugger.Events.PausedStateChanged);
    }
    pauseOnNextStatement() {
      this._pauseOnNextStatement = true;
    }
    isPaused(metadata) {
      if (metadata) return this._pausedCallsMetadata.has(metadata);
      return !!this._pausedCallsMetadata.size;
    }
    pausedDetails() {
      const result = [];
      for (const [metadata, {
        sdkObject
      }] of this._pausedCallsMetadata) result.push({
        metadata,
        sdkObject
      });
      return result;
    }
  }
  _debugger.Debugger = Debugger;
  Debugger.Events = {
    PausedStateChanged: "pausedstatechanged"
  };
  function shouldPauseOnCall(sdkObject, metadata) {
    var _sdkObject$attributio;
    if (sdkObject.attribution.playwright.options.isServer) return false;
    if (!((_sdkObject$attributio = sdkObject.attribution.browser) !== null && _sdkObject$attributio !== void 0 && _sdkObject$attributio.options.headful) && !(0, _utils.isUnderTest)()) return false;
    return metadata.method === "pause";
  }
  function shouldPauseBeforeStep(metadata) {
    if (!metadata.apiName) return false;
    if (metadata.method === "close") return true;
    if (metadata.method === "waitForSelector" || metadata.method === "waitForEventInfo" || metadata.method === "querySelector" || metadata.method === "querySelectorAll") return false;
    const step = metadata.type + "." + metadata.method;
    return _debug.commandsWithTracingSnapshots.has(step) && !_debug.pausesBeforeInputActions.has(metadata.type + "." + metadata.method);
  }
  function shouldSlowMo(metadata) {
    return _debug.slowMoActions.has(metadata.type + "." + metadata.method);
  }
  return _debugger;
}
var harRecorder = {};
var artifact$1 = {};
var hasRequiredArtifact$1;
function requireArtifact$1() {
  if (hasRequiredArtifact$1) return artifact$1;
  hasRequiredArtifact$1 = 1;
  Object.defineProperty(artifact$1, "__esModule", {
    value: true
  });
  artifact$1.Artifact = void 0;
  var _fs = _interopRequireDefault(require$$0$2);
  var _utils = requireUtils();
  var _errors = requireErrors$1();
  var _instrumentation = requireInstrumentation();
  var _manualPromise = requireManualPromise();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  class Artifact extends _instrumentation.SdkObject {
    constructor(parent, localPath, unaccessibleErrorMessage, cancelCallback) {
      super(parent, "artifact");
      this._localPath = void 0;
      this._unaccessibleErrorMessage = void 0;
      this._cancelCallback = void 0;
      this._finishedPromise = new _manualPromise.ManualPromise();
      this._saveCallbacks = [];
      this._finished = false;
      this._deleted = false;
      this._failureError = void 0;
      this._localPath = localPath;
      this._unaccessibleErrorMessage = unaccessibleErrorMessage;
      this._cancelCallback = cancelCallback;
    }
    finishedPromise() {
      return this._finishedPromise;
    }
    localPath() {
      return this._localPath;
    }
    async localPathAfterFinished() {
      if (this._unaccessibleErrorMessage) throw new Error(this._unaccessibleErrorMessage);
      await this._finishedPromise;
      if (this._failureError) throw this._failureError;
      return this._localPath;
    }
    saveAs(saveCallback) {
      if (this._unaccessibleErrorMessage) throw new Error(this._unaccessibleErrorMessage);
      if (this._deleted) throw new Error(`File already deleted. Save before deleting.`);
      if (this._failureError) throw this._failureError;
      if (this._finished) {
        saveCallback(this._localPath).catch(() => {
        });
        return;
      }
      this._saveCallbacks.push(saveCallback);
    }
    async failureError() {
      var _this$_failureError;
      if (this._unaccessibleErrorMessage) return this._unaccessibleErrorMessage;
      await this._finishedPromise;
      return ((_this$_failureError = this._failureError) === null || _this$_failureError === void 0 ? void 0 : _this$_failureError.message) || null;
    }
    async cancel() {
      (0, _utils.assert)(this._cancelCallback !== void 0);
      return this._cancelCallback();
    }
    async delete() {
      if (this._unaccessibleErrorMessage) return;
      const fileName = await this.localPathAfterFinished();
      if (this._deleted) return;
      this._deleted = true;
      if (fileName) await _fs.default.promises.unlink(fileName).catch((e2) => {
      });
    }
    async deleteOnContextClose() {
      if (this._deleted) return;
      this._deleted = true;
      if (!this._unaccessibleErrorMessage) await _fs.default.promises.unlink(this._localPath).catch((e2) => {
      });
      await this.reportFinished(new _errors.TargetClosedError());
    }
    async reportFinished(error) {
      if (this._finished) return;
      this._finished = true;
      this._failureError = error;
      if (error) {
        for (const callback of this._saveCallbacks) await callback("", error);
      } else {
        for (const callback of this._saveCallbacks) await callback(this._localPath);
      }
      this._saveCallbacks = [];
      this._finishedPromise.resolve();
    }
  }
  artifact$1.Artifact = Artifact;
  return artifact$1;
}
var harTracer = {};
var frames = {};
var dom = {};
var javascript$1 = {};
var utilityScriptSource = {};
var hasRequiredUtilityScriptSource;
function requireUtilityScriptSource() {
  if (hasRequiredUtilityScriptSource) return utilityScriptSource;
  hasRequiredUtilityScriptSource = 1;
  Object.defineProperty(utilityScriptSource, "__esModule", {
    value: true
  });
  utilityScriptSource.source = void 0;
  utilityScriptSource.source = '\nvar __commonJS = obj => {\n  let required = false;\n  let result;\n  return function __require() {\n    if (!required) {\n      required = true;\n      let fn;\n      for (const name in obj) { fn = obj[name]; break; }\n      const module = { exports: {} };\n      fn(module.exports, module);\n      result = module.exports;\n    }\n    return result;\n  }\n};\nvar __export = (target, all) => {for (var name in all) target[name] = all[name];};\nvar __toESM = mod => ({ ...mod, \'default\': mod });\nvar __toCommonJS = mod => ({ ...mod, __esModule: true });\n\n\n// packages/playwright-core/src/server/injected/utilityScript.ts\nvar utilityScript_exports = {};\n__export(utilityScript_exports, {\n  UtilityScript: () => UtilityScript\n});\nmodule.exports = __toCommonJS(utilityScript_exports);\n\n// packages/playwright-core/src/server/isomorphic/utilityScriptSerializers.ts\nfunction source() {\n  function isRegExp(obj) {\n    try {\n      return obj instanceof RegExp || Object.prototype.toString.call(obj) === "[object RegExp]";\n    } catch (error) {\n      return false;\n    }\n  }\n  function isDate(obj) {\n    try {\n      return obj instanceof Date || Object.prototype.toString.call(obj) === "[object Date]";\n    } catch (error) {\n      return false;\n    }\n  }\n  function isURL(obj) {\n    try {\n      return obj instanceof URL || Object.prototype.toString.call(obj) === "[object URL]";\n    } catch (error) {\n      return false;\n    }\n  }\n  function isError(obj) {\n    var _a;\n    try {\n      return obj instanceof Error || obj && ((_a = Object.getPrototypeOf(obj)) == null ? void 0 : _a.name) === "Error";\n    } catch (error) {\n      return false;\n    }\n  }\n  function parseEvaluationResultValue2(value, handles = [], refs = /* @__PURE__ */ new Map()) {\n    if (Object.is(value, void 0))\n      return void 0;\n    if (typeof value === "object" && value) {\n      if ("ref" in value)\n        return refs.get(value.ref);\n      if ("v" in value) {\n        if (value.v === "undefined")\n          return void 0;\n        if (value.v === "null")\n          return null;\n        if (value.v === "NaN")\n          return NaN;\n        if (value.v === "Infinity")\n          return Infinity;\n        if (value.v === "-Infinity")\n          return -Infinity;\n        if (value.v === "-0")\n          return -0;\n        return void 0;\n      }\n      if ("d" in value)\n        return new Date(value.d);\n      if ("u" in value)\n        return new URL(value.u);\n      if ("bi" in value)\n        return BigInt(value.bi);\n      if ("e" in value) {\n        const error = new Error(value.e.m);\n        error.name = value.e.n;\n        error.stack = value.e.s;\n        return error;\n      }\n      if ("r" in value)\n        return new RegExp(value.r.p, value.r.f);\n      if ("a" in value) {\n        const result2 = [];\n        refs.set(value.id, result2);\n        for (const a of value.a)\n          result2.push(parseEvaluationResultValue2(a, handles, refs));\n        return result2;\n      }\n      if ("o" in value) {\n        const result2 = {};\n        refs.set(value.id, result2);\n        for (const { k, v } of value.o)\n          result2[k] = parseEvaluationResultValue2(v, handles, refs);\n        return result2;\n      }\n      if ("h" in value)\n        return handles[value.h];\n    }\n    return value;\n  }\n  function serializeAsCallArgument2(value, handleSerializer) {\n    return serialize(value, handleSerializer, { visited: /* @__PURE__ */ new Map(), lastId: 0 });\n  }\n  function serialize(value, handleSerializer, visitorInfo) {\n    if (value && typeof value === "object") {\n      if (typeof globalThis.Window === "function" && value instanceof globalThis.Window)\n        return "ref: <Window>";\n      if (typeof globalThis.Document === "function" && value instanceof globalThis.Document)\n        return "ref: <Document>";\n      if (typeof globalThis.Node === "function" && value instanceof globalThis.Node)\n        return "ref: <Node>";\n    }\n    return innerSerialize(value, handleSerializer, visitorInfo);\n  }\n  function innerSerialize(value, handleSerializer, visitorInfo) {\n    var _a;\n    const result2 = handleSerializer(value);\n    if ("fallThrough" in result2)\n      value = result2.fallThrough;\n    else\n      return result2;\n    if (typeof value === "symbol")\n      return { v: "undefined" };\n    if (Object.is(value, void 0))\n      return { v: "undefined" };\n    if (Object.is(value, null))\n      return { v: "null" };\n    if (Object.is(value, NaN))\n      return { v: "NaN" };\n    if (Object.is(value, Infinity))\n      return { v: "Infinity" };\n    if (Object.is(value, -Infinity))\n      return { v: "-Infinity" };\n    if (Object.is(value, -0))\n      return { v: "-0" };\n    if (typeof value === "boolean")\n      return value;\n    if (typeof value === "number")\n      return value;\n    if (typeof value === "string")\n      return value;\n    if (typeof value === "bigint")\n      return { bi: value.toString() };\n    if (isError(value)) {\n      let stack;\n      if ((_a = value.stack) == null ? void 0 : _a.startsWith(value.name + ": " + value.message)) {\n        stack = value.stack;\n      } else {\n        stack = `${value.name}: ${value.message}\n${value.stack}`;\n      }\n      return { e: { n: value.name, m: value.message, s: stack } };\n    }\n    if (isDate(value))\n      return { d: value.toJSON() };\n    if (isURL(value))\n      return { u: value.toJSON() };\n    if (isRegExp(value))\n      return { r: { p: value.source, f: value.flags } };\n    const id = visitorInfo.visited.get(value);\n    if (id)\n      return { ref: id };\n    if (Array.isArray(value)) {\n      const a = [];\n      const id2 = ++visitorInfo.lastId;\n      visitorInfo.visited.set(value, id2);\n      for (let i = 0; i < value.length; ++i)\n        a.push(serialize(value[i], handleSerializer, visitorInfo));\n      return { a, id: id2 };\n    }\n    if (typeof value === "object") {\n      const o = [];\n      const id2 = ++visitorInfo.lastId;\n      visitorInfo.visited.set(value, id2);\n      for (const name of Object.keys(value)) {\n        let item;\n        try {\n          item = value[name];\n        } catch (e) {\n          continue;\n        }\n        if (name === "toJSON" && typeof item === "function")\n          o.push({ k: name, v: { o: [], id: 0 } });\n        else\n          o.push({ k: name, v: serialize(item, handleSerializer, visitorInfo) });\n      }\n      let jsonWrapper;\n      try {\n        if (o.length === 0 && value.toJSON && typeof value.toJSON === "function")\n          jsonWrapper = { value: value.toJSON() };\n      } catch (e) {\n      }\n      if (jsonWrapper)\n        return innerSerialize(jsonWrapper.value, handleSerializer, visitorInfo);\n      return { o, id: id2 };\n    }\n  }\n  return { parseEvaluationResultValue: parseEvaluationResultValue2, serializeAsCallArgument: serializeAsCallArgument2 };\n}\nvar result = source();\nvar parseEvaluationResultValue = result.parseEvaluationResultValue;\nvar serializeAsCallArgument = result.serializeAsCallArgument;\n\n// packages/playwright-core/src/server/injected/utilityScript.ts\nvar UtilityScript = class {\n  constructor(isUnderTest) {\n    this.serializeAsCallArgument = serializeAsCallArgument;\n    this.parseEvaluationResultValue = parseEvaluationResultValue;\n    if (isUnderTest)\n      this._setBuiltins();\n  }\n  evaluate(isFunction, returnByValue, expression, argCount, ...argsAndHandles) {\n    const args = argsAndHandles.slice(0, argCount);\n    const handles = argsAndHandles.slice(argCount);\n    const parameters = [];\n    for (let i = 0; i < args.length; i++)\n      parameters[i] = this.parseEvaluationResultValue(args[i], handles);\n    let result2 = globalThis.eval(expression);\n    if (isFunction === true) {\n      result2 = result2(...parameters);\n    } else if (isFunction === false) {\n      result2 = result2;\n    } else {\n      if (typeof result2 === "function")\n        result2 = result2(...parameters);\n    }\n    return returnByValue ? this._promiseAwareJsonValueNoThrow(result2) : result2;\n  }\n  jsonValue(returnByValue, value) {\n    if (Object.is(value, void 0))\n      return void 0;\n    return serializeAsCallArgument(value, (value2) => ({ fallThrough: value2 }));\n  }\n  _promiseAwareJsonValueNoThrow(value) {\n    const safeJson = (value2) => {\n      try {\n        return this.jsonValue(true, value2);\n      } catch (e) {\n        return void 0;\n      }\n    };\n    if (value && typeof value === "object" && typeof value.then === "function") {\n      return (async () => {\n        const promiseValue = await value;\n        return safeJson(promiseValue);\n      })();\n    }\n    return safeJson(value);\n  }\n  _setBuiltins() {\n    var _a, _b;\n    const window = globalThis;\n    window.builtinSetTimeout = (callback, timeout) => {\n      var _a2;\n      if ((_a2 = window.__pwClock) == null ? void 0 : _a2.builtin)\n        return window.__pwClock.builtin.setTimeout(callback, timeout);\n      return setTimeout(callback, timeout);\n    };\n    window.builtinClearTimeout = (id) => {\n      var _a2;\n      if ((_a2 = window.__pwClock) == null ? void 0 : _a2.builtin)\n        return window.__pwClock.builtin.clearTimeout(id);\n      return clearTimeout(id);\n    };\n    window.builtinSetInterval = (callback, timeout) => {\n      var _a2;\n      if ((_a2 = window.__pwClock) == null ? void 0 : _a2.builtin)\n        return window.__pwClock.builtin.setInterval(callback, timeout);\n      return setInterval(callback, timeout);\n    };\n    window.builtinClearInterval = (id) => {\n      var _a2;\n      if ((_a2 = window.__pwClock) == null ? void 0 : _a2.builtin)\n        return window.__pwClock.builtin.clearInterval(id);\n      return clearInterval(id);\n    };\n    window.builtinRequestAnimationFrame = (callback) => {\n      var _a2;\n      if ((_a2 = window.__pwClock) == null ? void 0 : _a2.builtin)\n        return window.__pwClock.builtin.requestAnimationFrame(callback);\n      return requestAnimationFrame(callback);\n    };\n    window.builtinCancelAnimationFrame = (id) => {\n      var _a2;\n      if ((_a2 = window.__pwClock) == null ? void 0 : _a2.builtin)\n        return window.__pwClock.builtin.cancelAnimationFrame(id);\n      return cancelAnimationFrame(id);\n    };\n    window.builtinDate = ((_a = window.__pwClock) == null ? void 0 : _a.builtin.Date) || Date;\n    window.builtinPerformance = ((_b = window.__pwClock) == null ? void 0 : _b.builtin.performance) || performance;\n  }\n};\n';
  return utilityScriptSource;
}
var utilityScriptSerializers = {};
var hasRequiredUtilityScriptSerializers;
function requireUtilityScriptSerializers() {
  if (hasRequiredUtilityScriptSerializers) return utilityScriptSerializers;
  hasRequiredUtilityScriptSerializers = 1;
  Object.defineProperty(utilityScriptSerializers, "__esModule", {
    value: true
  });
  utilityScriptSerializers.serializeAsCallArgument = utilityScriptSerializers.parseEvaluationResultValue = void 0;
  utilityScriptSerializers.source = source;
  function source() {
    function isRegExp(obj) {
      try {
        return obj instanceof RegExp || Object.prototype.toString.call(obj) === "[object RegExp]";
      } catch (error) {
        return false;
      }
    }
    function isDate(obj) {
      try {
        return obj instanceof Date || Object.prototype.toString.call(obj) === "[object Date]";
      } catch (error) {
        return false;
      }
    }
    function isURL(obj) {
      try {
        return obj instanceof URL || Object.prototype.toString.call(obj) === "[object URL]";
      } catch (error) {
        return false;
      }
    }
    function isError(obj) {
      try {
        var _Object$getPrototypeO;
        return obj instanceof Error || obj && ((_Object$getPrototypeO = Object.getPrototypeOf(obj)) === null || _Object$getPrototypeO === void 0 ? void 0 : _Object$getPrototypeO.name) === "Error";
      } catch (error) {
        return false;
      }
    }
    function parseEvaluationResultValue(value, handles = [], refs = /* @__PURE__ */ new Map()) {
      if (Object.is(value, void 0)) return void 0;
      if (typeof value === "object" && value) {
        if ("ref" in value) return refs.get(value.ref);
        if ("v" in value) {
          if (value.v === "undefined") return void 0;
          if (value.v === "null") return null;
          if (value.v === "NaN") return NaN;
          if (value.v === "Infinity") return Infinity;
          if (value.v === "-Infinity") return -Infinity;
          if (value.v === "-0") return -0;
          return void 0;
        }
        if ("d" in value) return new Date(value.d);
        if ("u" in value) return new URL(value.u);
        if ("bi" in value) return BigInt(value.bi);
        if ("e" in value) {
          const error = new Error(value.e.m);
          error.name = value.e.n;
          error.stack = value.e.s;
          return error;
        }
        if ("r" in value) return new RegExp(value.r.p, value.r.f);
        if ("a" in value) {
          const result2 = [];
          refs.set(value.id, result2);
          for (const a of value.a) result2.push(parseEvaluationResultValue(a, handles, refs));
          return result2;
        }
        if ("o" in value) {
          const result2 = {};
          refs.set(value.id, result2);
          for (const {
            k: k2,
            v: v2
          } of value.o) result2[k2] = parseEvaluationResultValue(v2, handles, refs);
          return result2;
        }
        if ("h" in value) return handles[value.h];
      }
      return value;
    }
    function serializeAsCallArgument(value, handleSerializer) {
      return serialize(value, handleSerializer, {
        visited: /* @__PURE__ */ new Map(),
        lastId: 0
      });
    }
    function serialize(value, handleSerializer, visitorInfo) {
      if (value && typeof value === "object") {
        if (typeof globalThis.Window === "function" && value instanceof globalThis.Window) return "ref: <Window>";
        if (typeof globalThis.Document === "function" && value instanceof globalThis.Document) return "ref: <Document>";
        if (typeof globalThis.Node === "function" && value instanceof globalThis.Node) return "ref: <Node>";
      }
      return innerSerialize(value, handleSerializer, visitorInfo);
    }
    function innerSerialize(value, handleSerializer, visitorInfo) {
      const result2 = handleSerializer(value);
      if ("fallThrough" in result2) value = result2.fallThrough;
      else return result2;
      if (typeof value === "symbol") return {
        v: "undefined"
      };
      if (Object.is(value, void 0)) return {
        v: "undefined"
      };
      if (Object.is(value, null)) return {
        v: "null"
      };
      if (Object.is(value, NaN)) return {
        v: "NaN"
      };
      if (Object.is(value, Infinity)) return {
        v: "Infinity"
      };
      if (Object.is(value, -Infinity)) return {
        v: "-Infinity"
      };
      if (Object.is(value, -0)) return {
        v: "-0"
      };
      if (typeof value === "boolean") return value;
      if (typeof value === "number") return value;
      if (typeof value === "string") return value;
      if (typeof value === "bigint") return {
        bi: value.toString()
      };
      if (isError(value)) {
        var _value$stack;
        let stack;
        if ((_value$stack = value.stack) !== null && _value$stack !== void 0 && _value$stack.startsWith(value.name + ": " + value.message)) {
          stack = value.stack;
        } else {
          stack = `${value.name}: ${value.message}
${value.stack}`;
        }
        return {
          e: {
            n: value.name,
            m: value.message,
            s: stack
          }
        };
      }
      if (isDate(value)) return {
        d: value.toJSON()
      };
      if (isURL(value)) return {
        u: value.toJSON()
      };
      if (isRegExp(value)) return {
        r: {
          p: value.source,
          f: value.flags
        }
      };
      const id = visitorInfo.visited.get(value);
      if (id) return {
        ref: id
      };
      if (Array.isArray(value)) {
        const a = [];
        const id2 = ++visitorInfo.lastId;
        visitorInfo.visited.set(value, id2);
        for (let i = 0; i < value.length; ++i) a.push(serialize(value[i], handleSerializer, visitorInfo));
        return {
          a,
          id: id2
        };
      }
      if (typeof value === "object") {
        const o2 = [];
        const id2 = ++visitorInfo.lastId;
        visitorInfo.visited.set(value, id2);
        for (const name of Object.keys(value)) {
          let item;
          try {
            item = value[name];
          } catch (e2) {
            continue;
          }
          if (name === "toJSON" && typeof item === "function") o2.push({
            k: name,
            v: {
              o: [],
              id: 0
            }
          });
          else o2.push({
            k: name,
            v: serialize(item, handleSerializer, visitorInfo)
          });
        }
        let jsonWrapper;
        try {
          if (o2.length === 0 && value.toJSON && typeof value.toJSON === "function") jsonWrapper = {
            value: value.toJSON()
          };
        } catch (e2) {
        }
        if (jsonWrapper) return innerSerialize(jsonWrapper.value, handleSerializer, visitorInfo);
        return {
          o: o2,
          id: id2
        };
      }
    }
    return {
      parseEvaluationResultValue,
      serializeAsCallArgument
    };
  }
  const result = source();
  utilityScriptSerializers.parseEvaluationResultValue = result.parseEvaluationResultValue;
  utilityScriptSerializers.serializeAsCallArgument = result.serializeAsCallArgument;
  return utilityScriptSerializers;
}
var hasRequiredJavascript$1;
function requireJavascript$1() {
  if (hasRequiredJavascript$1) return javascript$1;
  hasRequiredJavascript$1 = 1;
  Object.defineProperty(javascript$1, "__esModule", {
    value: true
  });
  javascript$1.JavaScriptErrorInEvaluate = javascript$1.JSHandle = javascript$1.ExecutionContext = void 0;
  javascript$1.evaluate = evaluate;
  javascript$1.evaluateExpression = evaluateExpression;
  javascript$1.isJavaScriptErrorInEvaluate = isJavaScriptErrorInEvaluate;
  javascript$1.normalizeEvaluationExpression = normalizeEvaluationExpression;
  javascript$1.parseUnserializableValue = parseUnserializableValue;
  javascript$1.sparseArrayToString = sparseArrayToString;
  var _instrumentation = requireInstrumentation();
  var utilityScriptSource2 = _interopRequireWildcard(requireUtilityScriptSource());
  var _utils = requireUtils();
  var _utilityScriptSerializers = requireUtilityScriptSerializers();
  var _manualPromise = requireManualPromise();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  class ExecutionContext extends _instrumentation.SdkObject {
    constructor(parent, delegate, worldNameForTest) {
      super(parent, "execution-context");
      this.delegate = void 0;
      this._utilityScriptPromise = void 0;
      this._contextDestroyedScope = new _manualPromise.LongStandingScope();
      this.worldNameForTest = void 0;
      this.worldNameForTest = worldNameForTest;
      this.delegate = delegate;
    }
    contextDestroyed(reason) {
      this._contextDestroyedScope.close(new Error(reason));
    }
    async _raceAgainstContextDestroyed(promise) {
      return this._contextDestroyedScope.race(promise);
    }
    rawEvaluateJSON(expression) {
      return this._raceAgainstContextDestroyed(this.delegate.rawEvaluateJSON(expression));
    }
    rawEvaluateHandle(expression) {
      return this._raceAgainstContextDestroyed(this.delegate.rawEvaluateHandle(this, expression));
    }
    async evaluateWithArguments(expression, returnByValue, values, handles) {
      const utilityScript = await this._utilityScript();
      return this._raceAgainstContextDestroyed(this.delegate.evaluateWithArguments(expression, returnByValue, utilityScript, values, handles));
    }
    getProperties(object) {
      return this._raceAgainstContextDestroyed(this.delegate.getProperties(object));
    }
    releaseHandle(handle) {
      return this.delegate.releaseHandle(handle);
    }
    adoptIfNeeded(handle) {
      return null;
    }
    _utilityScript() {
      if (!this._utilityScriptPromise) {
        const source = `
      (() => {
        const module = {};
        ${utilityScriptSource2.source}
        return new (module.exports.UtilityScript())(${(0, _utils.isUnderTest)()});
      })();`;
        this._utilityScriptPromise = this._raceAgainstContextDestroyed(this.delegate.rawEvaluateHandle(this, source)).then((handle) => {
          handle._setPreview("UtilityScript");
          return handle;
        });
      }
      return this._utilityScriptPromise;
    }
    async doSlowMo() {
    }
  }
  javascript$1.ExecutionContext = ExecutionContext;
  class JSHandle extends _instrumentation.SdkObject {
    constructor(context, type, preview, objectId, value) {
      super(context, "handle");
      this.__jshandle = true;
      this._context = void 0;
      this._disposed = false;
      this._objectId = void 0;
      this._value = void 0;
      this._objectType = void 0;
      this._preview = void 0;
      this._previewCallback = void 0;
      this._context = context;
      this._objectId = objectId;
      this._value = value;
      this._objectType = type;
      this._preview = this._objectId ? preview || `JSHandle@${this._objectType}` : String(value);
      if (this._objectId && globalThis.leakedJSHandles) globalThis.leakedJSHandles.set(this, new Error("Leaked JSHandle"));
    }
    async evaluate(pageFunction, arg) {
      return evaluate(this._context, true, pageFunction, this, arg);
    }
    async evaluateHandle(pageFunction, arg) {
      return evaluate(this._context, false, pageFunction, this, arg);
    }
    async evaluateExpression(expression, options, arg) {
      const value = await evaluateExpression(this._context, expression, {
        ...options,
        returnByValue: true
      }, this, arg);
      await this._context.doSlowMo();
      return value;
    }
    async evaluateExpressionHandle(expression, options, arg) {
      const value = await evaluateExpression(this._context, expression, {
        ...options,
        returnByValue: false
      }, this, arg);
      await this._context.doSlowMo();
      return value;
    }
    async getProperty(propertyName) {
      const objectHandle = await this.evaluateHandle((object, propertyName2) => {
        const result2 = {
          __proto__: null
        };
        result2[propertyName2] = object[propertyName2];
        return result2;
      }, propertyName);
      const properties = await objectHandle.getProperties();
      const result = properties.get(propertyName);
      objectHandle.dispose();
      return result;
    }
    async getProperties() {
      if (!this._objectId) return /* @__PURE__ */ new Map();
      return this._context.getProperties(this);
    }
    rawValue() {
      return this._value;
    }
    async jsonValue() {
      if (!this._objectId) return this._value;
      const script = `(utilityScript, ...args) => utilityScript.jsonValue(...args)`;
      return this._context.evaluateWithArguments(script, true, [true], [this]);
    }
    asElement() {
      return null;
    }
    dispose() {
      if (this._disposed) return;
      this._disposed = true;
      if (this._objectId) {
        this._context.releaseHandle(this).catch((e2) => {
        });
        if (globalThis.leakedJSHandles) globalThis.leakedJSHandles.delete(this);
      }
    }
    toString() {
      return this._preview;
    }
    _setPreviewCallback(callback) {
      this._previewCallback = callback;
    }
    preview() {
      return this._preview;
    }
    worldNameForTest() {
      return this._context.worldNameForTest;
    }
    _setPreview(preview) {
      this._preview = preview;
      if (this._previewCallback) this._previewCallback(preview);
    }
  }
  javascript$1.JSHandle = JSHandle;
  async function evaluate(context, returnByValue, pageFunction, ...args) {
    return evaluateExpression(context, String(pageFunction), {
      returnByValue,
      isFunction: typeof pageFunction === "function"
    }, ...args);
  }
  async function evaluateExpression(context, expression, options, ...args) {
    expression = normalizeEvaluationExpression(expression, options.isFunction);
    const handles = [];
    const toDispose = [];
    const pushHandle = (handle) => {
      handles.push(handle);
      return handles.length - 1;
    };
    args = args.map((arg) => (0, _utilityScriptSerializers.serializeAsCallArgument)(arg, (handle) => {
      if (handle instanceof JSHandle) {
        if (!handle._objectId) return {
          fallThrough: handle._value
        };
        if (handle._disposed) throw new JavaScriptErrorInEvaluate("JSHandle is disposed!");
        const adopted = context.adoptIfNeeded(handle);
        if (adopted === null) return {
          h: pushHandle(Promise.resolve(handle))
        };
        toDispose.push(adopted);
        return {
          h: pushHandle(adopted)
        };
      }
      return {
        fallThrough: handle
      };
    }));
    const utilityScriptObjects = [];
    for (const handle of await Promise.all(handles)) {
      if (handle._context !== context) throw new JavaScriptErrorInEvaluate("JSHandles can be evaluated only in the context they were created!");
      utilityScriptObjects.push(handle);
    }
    const utilityScriptValues = [options.isFunction, options.returnByValue, expression, args.length, ...args];
    const script = `(utilityScript, ...args) => utilityScript.evaluate(...args)`;
    try {
      return await context.evaluateWithArguments(script, options.returnByValue || false, utilityScriptValues, utilityScriptObjects);
    } finally {
      toDispose.map((handlePromise) => handlePromise.then((handle) => handle.dispose()));
    }
  }
  function parseUnserializableValue(unserializableValue) {
    if (unserializableValue === "NaN") return NaN;
    if (unserializableValue === "Infinity") return Infinity;
    if (unserializableValue === "-Infinity") return -Infinity;
    if (unserializableValue === "-0") return -0;
  }
  function normalizeEvaluationExpression(expression, isFunction) {
    expression = expression.trim();
    if (isFunction) {
      try {
        new Function("(" + expression + ")");
      } catch (e1) {
        if (expression.startsWith("async ")) expression = "async function " + expression.substring("async ".length);
        else expression = "function " + expression;
        try {
          new Function("(" + expression + ")");
        } catch (e2) {
          throw new Error("Passed function is not well-serializable!");
        }
      }
    }
    if (/^(async)?\s*function(\s|\()/.test(expression)) expression = "(" + expression + ")";
    return expression;
  }
  class JavaScriptErrorInEvaluate extends Error {
  }
  javascript$1.JavaScriptErrorInEvaluate = JavaScriptErrorInEvaluate;
  function isJavaScriptErrorInEvaluate(error) {
    return error instanceof JavaScriptErrorInEvaluate;
  }
  function sparseArrayToString(entries) {
    const arrayEntries = [];
    for (const {
      name,
      value
    } of entries) {
      const index = +name;
      if (isNaN(index) || index < 0) continue;
      arrayEntries.push({
        index,
        value
      });
    }
    arrayEntries.sort((a, b) => a.index - b.index);
    let lastIndex = -1;
    const tokens = [];
    for (const {
      index,
      value
    } of arrayEntries) {
      const emptyItems = index - lastIndex - 1;
      if (emptyItems === 1) tokens.push(`empty`);
      else if (emptyItems > 1) tokens.push(`empty x ${emptyItems}`);
      tokens.push(String(value));
      lastIndex = index;
    }
    return "[" + tokens.join(", ") + "]";
  }
  return javascript$1;
}
var progress = {};
var hasRequiredProgress;
function requireProgress() {
  if (hasRequiredProgress) return progress;
  hasRequiredProgress = 1;
  Object.defineProperty(progress, "__esModule", {
    value: true
  });
  progress.ProgressController = void 0;
  var _errors = requireErrors$1();
  var _utils = requireUtils();
  var _manualPromise = requireManualPromise();
  class ProgressController {
    constructor(metadata, sdkObject) {
      this._forceAbortPromise = new _manualPromise.ManualPromise();
      this._cleanups = [];
      this._logName = "api";
      this._state = "before";
      this._deadline = 0;
      this._timeout = 0;
      this.metadata = void 0;
      this.instrumentation = void 0;
      this.sdkObject = void 0;
      this.metadata = metadata;
      this.sdkObject = sdkObject;
      this.instrumentation = sdkObject.instrumentation;
      this._forceAbortPromise.catch((e2) => null);
    }
    setLogName(logName) {
      this._logName = logName;
    }
    abort(error) {
      this._forceAbortPromise.reject(error);
    }
    async run(task2, timeout) {
      var _this$sdkObject$attri;
      if (timeout) {
        this._timeout = timeout;
        this._deadline = timeout ? (0, _utils.monotonicTime)() + timeout : 0;
      }
      (0, _utils.assert)(this._state === "before");
      this._state = "running";
      (_this$sdkObject$attri = this.sdkObject.attribution.context) === null || _this$sdkObject$attri === void 0 || _this$sdkObject$attri._activeProgressControllers.add(this);
      const progress2 = {
        log: (message) => {
          if (this._state === "running") this.metadata.log.push(message);
          this.instrumentation.onCallLog(this.sdkObject, this.metadata, this._logName, message);
        },
        timeUntilDeadline: () => this._deadline ? this._deadline - (0, _utils.monotonicTime)() : 2147483647,
        // 2^31-1 safe setTimeout in Node.
        isRunning: () => this._state === "running",
        cleanupWhenAborted: (cleanup) => {
          if (this._state === "running") this._cleanups.push(cleanup);
          else runCleanup(cleanup);
        },
        throwIfAborted: () => {
          if (this._state === "aborted") throw new AbortedError();
        },
        metadata: this.metadata
      };
      const timeoutError = new _errors.TimeoutError(`Timeout ${this._timeout}ms exceeded.`);
      const timer = setTimeout(() => this._forceAbortPromise.reject(timeoutError), progress2.timeUntilDeadline());
      try {
        const promise = task2(progress2);
        const result = await Promise.race([promise, this._forceAbortPromise]);
        this._state = "finished";
        return result;
      } catch (e2) {
        this._state = "aborted";
        await Promise.all(this._cleanups.splice(0).map(runCleanup));
        throw e2;
      } finally {
        var _this$sdkObject$attri2;
        (_this$sdkObject$attri2 = this.sdkObject.attribution.context) === null || _this$sdkObject$attri2 === void 0 || _this$sdkObject$attri2._activeProgressControllers.delete(this);
        clearTimeout(timer);
      }
    }
  }
  progress.ProgressController = ProgressController;
  async function runCleanup(cleanup) {
    try {
      await cleanup();
    } catch (e2) {
    }
  }
  class AbortedError extends Error {
  }
  return progress;
}
var fileUploadUtils = {};
var hasRequiredFileUploadUtils;
function requireFileUploadUtils() {
  if (hasRequiredFileUploadUtils) return fileUploadUtils;
  hasRequiredFileUploadUtils = 1;
  Object.defineProperty(fileUploadUtils, "__esModule", {
    value: true
  });
  fileUploadUtils.fileUploadSizeLimit = void 0;
  fileUploadUtils.prepareFilesForUpload = prepareFilesForUpload;
  var _fs = _interopRequireDefault(require$$0$2);
  var _path2 = _interopRequireDefault(require$$1$1);
  var _assert = requireAssert$1();
  var _utilsBundle = requireUtilsBundle();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  const fileUploadSizeLimit = fileUploadUtils.fileUploadSizeLimit = 50 * 1024 * 1024;
  async function filesExceedUploadLimit(files) {
    const sizes = await Promise.all(files.map(async (file2) => (await _fs.default.promises.stat(file2)).size));
    return sizes.reduce((total, size) => total + size, 0) >= fileUploadSizeLimit;
  }
  async function prepareFilesForUpload(frame2, params) {
    var _fileBuffers;
    const {
      payloads,
      streams,
      directoryStream
    } = params;
    let {
      localPaths,
      localDirectory
    } = params;
    if ([payloads, localPaths, localDirectory, streams, directoryStream].filter(Boolean).length !== 1) throw new Error("Exactly one of payloads, localPaths and streams must be provided");
    if (streams) localPaths = streams.map((c2) => c2.path());
    if (directoryStream) localDirectory = directoryStream.path();
    if (localPaths) {
      for (const p of localPaths) (0, _assert.assert)(_path2.default.isAbsolute(p) && _path2.default.resolve(p) === p, "Paths provided to localPaths must be absolute and fully resolved.");
    }
    let fileBuffers = payloads;
    if (!frame2._page._browserContext._browser._isCollocatedWithServer) {
      if (localPaths) {
        if (await filesExceedUploadLimit(localPaths)) throw new Error("Cannot transfer files larger than 50Mb to a browser not co-located with the server");
        fileBuffers = await Promise.all(localPaths.map(async (item) => {
          return {
            name: _path2.default.basename(item),
            buffer: await _fs.default.promises.readFile(item),
            lastModifiedMs: (await _fs.default.promises.stat(item)).mtimeMs
          };
        }));
        localPaths = void 0;
      }
    }
    const filePayloads = (_fileBuffers = fileBuffers) === null || _fileBuffers === void 0 ? void 0 : _fileBuffers.map((payload) => ({
      name: payload.name,
      mimeType: payload.mimeType || _utilsBundle.mime.getType(payload.name) || "application/octet-stream",
      buffer: payload.buffer.toString("base64"),
      lastModifiedMs: payload.lastModifiedMs
    }));
    return {
      localPaths,
      localDirectory,
      filePayloads
    };
  }
  return fileUploadUtils;
}
var injectedScriptSource = {};
var hasRequiredInjectedScriptSource;
function requireInjectedScriptSource() {
  if (hasRequiredInjectedScriptSource) return injectedScriptSource;
  hasRequiredInjectedScriptSource = 1;
  Object.defineProperty(injectedScriptSource, "__esModule", {
    value: true
  });
  injectedScriptSource.source = void 0;
  injectedScriptSource.source = '\nvar __commonJS = obj => {\n  let required = false;\n  let result;\n  return function __require() {\n    if (!required) {\n      required = true;\n      let fn;\n      for (const name in obj) { fn = obj[name]; break; }\n      const module = { exports: {} };\n      fn(module.exports, module);\n      result = module.exports;\n    }\n    return result;\n  }\n};\nvar __export = (target, all) => {for (var name in all) target[name] = all[name];};\nvar __toESM = mod => ({ ...mod, \'default\': mod });\nvar __toCommonJS = mod => ({ ...mod, __esModule: true });\n\n\n// packages/playwright-core/src/server/injected/injectedScript.ts\nvar injectedScript_exports = {};\n__export(injectedScript_exports, {\n  InjectedScript: () => InjectedScript\n});\nmodule.exports = __toCommonJS(injectedScript_exports);\n\n// packages/playwright-core/src/utils/isomorphic/ariaSnapshot.ts\nfunction parseAriaSnapshot(yaml, text, options = {}) {\n  var _a;\n  const lineCounter = new yaml.LineCounter();\n  const parseOptions = {\n    keepSourceTokens: true,\n    lineCounter,\n    ...options\n  };\n  const yamlDoc = yaml.parseDocument(text, parseOptions);\n  const errors = [];\n  const convertRange = (range) => {\n    return [lineCounter.linePos(range[0]), lineCounter.linePos(range[1])];\n  };\n  const addError = (error) => {\n    errors.push({\n      message: error.message,\n      range: [lineCounter.linePos(error.pos[0]), lineCounter.linePos(error.pos[1])]\n    });\n  };\n  const convertSeq = (container, seq) => {\n    for (const item of seq.items) {\n      const itemIsString = item instanceof yaml.Scalar && typeof item.value === "string";\n      if (itemIsString) {\n        const childNode = KeyParser.parse(item, parseOptions, errors);\n        if (childNode) {\n          container.children = container.children || [];\n          container.children.push(childNode);\n        }\n        continue;\n      }\n      const itemIsMap = item instanceof yaml.YAMLMap;\n      if (itemIsMap) {\n        convertMap(container, item);\n        continue;\n      }\n      errors.push({\n        message: "Sequence items should be strings or maps",\n        range: convertRange(item.range || seq.range)\n      });\n    }\n  };\n  const convertMap = (container, map) => {\n    for (const entry of map.items) {\n      container.children = container.children || [];\n      const keyIsString = entry.key instanceof yaml.Scalar && typeof entry.key.value === "string";\n      if (!keyIsString) {\n        errors.push({\n          message: "Only string keys are supported",\n          range: convertRange(entry.key.range || map.range)\n        });\n        continue;\n      }\n      const key = entry.key;\n      const value = entry.value;\n      if (key.value === "text") {\n        const valueIsString = value instanceof yaml.Scalar && typeof value.value === "string";\n        if (!valueIsString) {\n          errors.push({\n            message: "Text value should be a string",\n            range: convertRange(entry.value.range || map.range)\n          });\n          continue;\n        }\n        container.children.push({\n          kind: "text",\n          text: valueOrRegex(value.value)\n        });\n        continue;\n      }\n      const childNode = KeyParser.parse(key, parseOptions, errors);\n      if (!childNode)\n        continue;\n      const valueIsScalar = value instanceof yaml.Scalar;\n      if (valueIsScalar) {\n        const type = typeof value.value;\n        if (type !== "string" && type !== "number" && type !== "boolean") {\n          errors.push({\n            message: "Node value should be a string or a sequence",\n            range: convertRange(entry.value.range || map.range)\n          });\n          continue;\n        }\n        container.children.push({\n          ...childNode,\n          children: [{\n            kind: "text",\n            text: valueOrRegex(String(value.value))\n          }]\n        });\n        continue;\n      }\n      const valueIsSequence = value instanceof yaml.YAMLSeq;\n      if (valueIsSequence) {\n        container.children.push(childNode);\n        convertSeq(childNode, value);\n        continue;\n      }\n      errors.push({\n        message: "Map values should be strings or sequences",\n        range: convertRange(entry.value.range || map.range)\n      });\n    }\n  };\n  const fragment = { kind: "role", role: "fragment" };\n  yamlDoc.errors.forEach(addError);\n  if (errors.length)\n    return { errors, fragment };\n  if (!(yamlDoc.contents instanceof yaml.YAMLSeq)) {\n    errors.push({\n      message: \'Aria snapshot must be a YAML sequence, elements starting with " -"\',\n      range: yamlDoc.contents ? convertRange(yamlDoc.contents.range) : [{ line: 0, col: 0 }, { line: 0, col: 0 }]\n    });\n  }\n  if (errors.length)\n    return { errors, fragment };\n  convertSeq(fragment, yamlDoc.contents);\n  if (errors.length)\n    return { errors, fragment: emptyFragment };\n  if (((_a = fragment.children) == null ? void 0 : _a.length) === 1)\n    return { fragment: fragment.children[0], errors };\n  return { fragment, errors };\n}\nvar emptyFragment = { kind: "role", role: "fragment" };\nfunction normalizeWhitespace(text) {\n  return text.replace(/[\\u200b\\u00ad]/g, "").replace(/[\\r\\n\\s\\t]+/g, " ").trim();\n}\nfunction valueOrRegex(value) {\n  return value.startsWith("/") && value.endsWith("/") && value.length > 1 ? { pattern: value.slice(1, -1) } : normalizeWhitespace(value);\n}\nvar KeyParser = class _KeyParser {\n  static parse(text, options, errors) {\n    try {\n      return new _KeyParser(text.value)._parse();\n    } catch (e) {\n      if (e instanceof ParserError) {\n        const message = options.prettyErrors === false ? e.message : e.message + ":\\n\\n" + text.value + "\\n" + " ".repeat(e.pos) + "^\\n";\n        errors.push({\n          message,\n          range: [options.lineCounter.linePos(text.range[0]), options.lineCounter.linePos(text.range[0] + e.pos)]\n        });\n        return null;\n      }\n      throw e;\n    }\n  }\n  constructor(input) {\n    this._input = input;\n    this._pos = 0;\n    this._length = input.length;\n  }\n  _peek() {\n    return this._input[this._pos] || "";\n  }\n  _next() {\n    if (this._pos < this._length)\n      return this._input[this._pos++];\n    return null;\n  }\n  _eof() {\n    return this._pos >= this._length;\n  }\n  _isWhitespace() {\n    return !this._eof() && /\\s/.test(this._peek());\n  }\n  _skipWhitespace() {\n    while (this._isWhitespace())\n      this._pos++;\n  }\n  _readIdentifier(type) {\n    if (this._eof())\n      this._throwError(`Unexpected end of input when expecting ${type}`);\n    const start = this._pos;\n    while (!this._eof() && /[a-zA-Z]/.test(this._peek()))\n      this._pos++;\n    return this._input.slice(start, this._pos);\n  }\n  _readString() {\n    let result = "";\n    let escaped = false;\n    while (!this._eof()) {\n      const ch = this._next();\n      if (escaped) {\n        result += ch;\n        escaped = false;\n      } else if (ch === "\\\\") {\n        escaped = true;\n      } else if (ch === \'"\') {\n        return result;\n      } else {\n        result += ch;\n      }\n    }\n    this._throwError("Unterminated string");\n  }\n  _throwError(message, offset = 0) {\n    throw new ParserError(message, offset || this._pos);\n  }\n  _readRegex() {\n    let result = "";\n    let escaped = false;\n    let insideClass = false;\n    while (!this._eof()) {\n      const ch = this._next();\n      if (escaped) {\n        result += ch;\n        escaped = false;\n      } else if (ch === "\\\\") {\n        escaped = true;\n        result += ch;\n      } else if (ch === "/" && !insideClass) {\n        return { pattern: result };\n      } else if (ch === "[") {\n        insideClass = true;\n        result += ch;\n      } else if (ch === "]" && insideClass) {\n        result += ch;\n        insideClass = false;\n      } else {\n        result += ch;\n      }\n    }\n    this._throwError("Unterminated regex");\n  }\n  _readStringOrRegex() {\n    const ch = this._peek();\n    if (ch === \'"\') {\n      this._next();\n      return normalizeWhitespace(this._readString());\n    }\n    if (ch === "/") {\n      this._next();\n      return this._readRegex();\n    }\n    return null;\n  }\n  _readAttributes(result) {\n    let errorPos = this._pos;\n    while (true) {\n      this._skipWhitespace();\n      if (this._peek() === "[") {\n        this._next();\n        this._skipWhitespace();\n        errorPos = this._pos;\n        const flagName = this._readIdentifier("attribute");\n        this._skipWhitespace();\n        let flagValue = "";\n        if (this._peek() === "=") {\n          this._next();\n          this._skipWhitespace();\n          errorPos = this._pos;\n          while (this._peek() !== "]" && !this._isWhitespace() && !this._eof())\n            flagValue += this._next();\n        }\n        this._skipWhitespace();\n        if (this._peek() !== "]")\n          this._throwError("Expected ]");\n        this._next();\n        this._applyAttribute(result, flagName, flagValue || "true", errorPos);\n      } else {\n        break;\n      }\n    }\n  }\n  _parse() {\n    this._skipWhitespace();\n    const role = this._readIdentifier("role");\n    this._skipWhitespace();\n    const name = this._readStringOrRegex() || "";\n    const result = { kind: "role", role, name };\n    this._readAttributes(result);\n    this._skipWhitespace();\n    if (!this._eof())\n      this._throwError("Unexpected input");\n    return result;\n  }\n  _applyAttribute(node, key, value, errorPos) {\n    if (key === "checked") {\n      this._assert(value === "true" || value === "false" || value === "mixed", \'Value of "checked" attribute must be a boolean or "mixed"\', errorPos);\n      node.checked = value === "true" ? true : value === "false" ? false : "mixed";\n      return;\n    }\n    if (key === "disabled") {\n      this._assert(value === "true" || value === "false", \'Value of "disabled" attribute must be a boolean\', errorPos);\n      node.disabled = value === "true";\n      return;\n    }\n    if (key === "expanded") {\n      this._assert(value === "true" || value === "false", \'Value of "expanded" attribute must be a boolean\', errorPos);\n      node.expanded = value === "true";\n      return;\n    }\n    if (key === "level") {\n      this._assert(!isNaN(Number(value)), \'Value of "level" attribute must be a number\', errorPos);\n      node.level = Number(value);\n      return;\n    }\n    if (key === "pressed") {\n      this._assert(value === "true" || value === "false" || value === "mixed", \'Value of "pressed" attribute must be a boolean or "mixed"\', errorPos);\n      node.pressed = value === "true" ? true : value === "false" ? false : "mixed";\n      return;\n    }\n    if (key === "selected") {\n      this._assert(value === "true" || value === "false", \'Value of "selected" attribute must be a boolean\', errorPos);\n      node.selected = value === "true";\n      return;\n    }\n    this._assert(false, `Unsupported attribute [${key}]`, errorPos);\n  }\n  _assert(value, message, valuePos) {\n    if (!value)\n      this._throwError(message || "Assertion error", valuePos);\n  }\n};\nvar ParserError = class extends Error {\n  constructor(message, pos) {\n    super(message);\n    this.pos = pos;\n  }\n};\n\n// packages/playwright-core/src/utils/isomorphic/stringUtils.ts\nfunction escapeWithQuotes(text, char = "\'") {\n  const stringified = JSON.stringify(text);\n  const escapedText = stringified.substring(1, stringified.length - 1).replace(/\\\\"/g, \'"\');\n  if (char === "\'")\n    return char + escapedText.replace(/[\']/g, "\\\\\'") + char;\n  if (char === \'"\')\n    return char + escapedText.replace(/["]/g, \'\\\\"\') + char;\n  if (char === "`")\n    return char + escapedText.replace(/[`]/g, "`") + char;\n  throw new Error("Invalid escape char");\n}\nfunction toTitleCase(name) {\n  return name.charAt(0).toUpperCase() + name.substring(1);\n}\nfunction toSnakeCase(name) {\n  return name.replace(/([a-z0-9])([A-Z])/g, "$1_$2").replace(/([A-Z])([A-Z][a-z])/g, "$1_$2").toLowerCase();\n}\nfunction cssEscape(s) {\n  let result = "";\n  for (let i = 0; i < s.length; i++)\n    result += cssEscapeOne(s, i);\n  return result;\n}\nfunction quoteCSSAttributeValue(text) {\n  return `"${cssEscape(text).replace(/\\\\ /g, " ")}"`;\n}\nfunction cssEscapeOne(s, i) {\n  const c = s.charCodeAt(i);\n  if (c === 0)\n    return "\\uFFFD";\n  if (c >= 1 && c <= 31 || c >= 48 && c <= 57 && (i === 0 || i === 1 && s.charCodeAt(0) === 45))\n    return "\\\\" + c.toString(16) + " ";\n  if (i === 0 && c === 45 && s.length === 1)\n    return "\\\\" + s.charAt(i);\n  if (c >= 128 || c === 45 || c === 95 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122)\n    return s.charAt(i);\n  return "\\\\" + s.charAt(i);\n}\nvar normalizedWhitespaceCache;\nfunction cacheNormalizedWhitespaces() {\n  normalizedWhitespaceCache = /* @__PURE__ */ new Map();\n}\nfunction normalizeWhiteSpace(text) {\n  let result = normalizedWhitespaceCache == null ? void 0 : normalizedWhitespaceCache.get(text);\n  if (result === void 0) {\n    result = text.replace(/[\\u200b\\u00ad]/g, "").trim().replace(/\\s+/g, " ");\n    normalizedWhitespaceCache == null ? void 0 : normalizedWhitespaceCache.set(text, result);\n  }\n  return result;\n}\nfunction normalizeEscapedRegexQuotes(source) {\n  return source.replace(/(^|[^\\\\])(\\\\\\\\)*\\\\([\'"`])/g, "$1$2$3");\n}\nfunction escapeRegexForSelector(re) {\n  if (re.unicode || re.unicodeSets)\n    return String(re);\n  return String(re).replace(/(^|[^\\\\])(\\\\\\\\)*(["\'`])/g, "$1$2\\\\$3").replace(/>>/g, "\\\\>\\\\>");\n}\nfunction escapeForTextSelector(text, exact) {\n  if (typeof text !== "string")\n    return escapeRegexForSelector(text);\n  return `${JSON.stringify(text)}${exact ? "s" : "i"}`;\n}\nfunction escapeForAttributeSelector(value, exact) {\n  if (typeof value !== "string")\n    return escapeRegexForSelector(value);\n  return `"${value.replace(/\\\\/g, "\\\\\\\\").replace(/["]/g, \'\\\\"\')}"${exact ? "s" : "i"}`;\n}\nfunction trimString(input, cap, suffix = "") {\n  if (input.length <= cap)\n    return input;\n  const chars = [...input];\n  if (chars.length > cap)\n    return chars.slice(0, cap - suffix.length).join("") + suffix;\n  return chars.join("");\n}\nfunction trimStringWithEllipsis(input, cap) {\n  return trimString(input, cap, "\\u2026");\n}\nfunction escapeRegExp(s) {\n  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, "\\\\$&");\n}\nfunction longestCommonSubstring(s1, s2) {\n  const n = s1.length;\n  const m = s2.length;\n  let maxLen = 0;\n  let endingIndex = 0;\n  const dp = Array(n + 1).fill(null).map(() => Array(m + 1).fill(0));\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= m; j++) {\n      if (s1[i - 1] === s2[j - 1]) {\n        dp[i][j] = dp[i - 1][j - 1] + 1;\n        if (dp[i][j] > maxLen) {\n          maxLen = dp[i][j];\n          endingIndex = i;\n        }\n      }\n    }\n  }\n  return s1.slice(endingIndex - maxLen, endingIndex);\n}\n\n// packages/playwright-core/src/server/injected/domUtils.ts\nvar browserNameForWorkarounds = "";\nfunction setBrowserName(name) {\n  browserNameForWorkarounds = name;\n}\nfunction isInsideScope(scope, element) {\n  while (element) {\n    if (scope.contains(element))\n      return true;\n    element = enclosingShadowHost(element);\n  }\n  return false;\n}\nfunction parentElementOrShadowHost(element) {\n  if (element.parentElement)\n    return element.parentElement;\n  if (!element.parentNode)\n    return;\n  if (element.parentNode.nodeType === 11 && element.parentNode.host)\n    return element.parentNode.host;\n}\nfunction enclosingShadowRootOrDocument(element) {\n  let node = element;\n  while (node.parentNode)\n    node = node.parentNode;\n  if (node.nodeType === 11 || node.nodeType === 9)\n    return node;\n}\nfunction enclosingShadowHost(element) {\n  while (element.parentElement)\n    element = element.parentElement;\n  return parentElementOrShadowHost(element);\n}\nfunction closestCrossShadow(element, css, scope) {\n  while (element) {\n    const closest = element.closest(css);\n    if (scope && closest !== scope && (closest == null ? void 0 : closest.contains(scope)))\n      return;\n    if (closest)\n      return closest;\n    element = enclosingShadowHost(element);\n  }\n}\nfunction getElementComputedStyle(element, pseudo) {\n  return element.ownerDocument && element.ownerDocument.defaultView ? element.ownerDocument.defaultView.getComputedStyle(element, pseudo) : void 0;\n}\nfunction isElementStyleVisibilityVisible(element, style) {\n  style = style != null ? style : getElementComputedStyle(element);\n  if (!style)\n    return true;\n  if (Element.prototype.checkVisibility && browserNameForWorkarounds !== "webkit") {\n    if (!element.checkVisibility())\n      return false;\n  } else {\n    const detailsOrSummary = element.closest("details,summary");\n    if (detailsOrSummary !== element && (detailsOrSummary == null ? void 0 : detailsOrSummary.nodeName) === "DETAILS" && !detailsOrSummary.open)\n      return false;\n  }\n  if (style.visibility !== "visible")\n    return false;\n  return true;\n}\nfunction isElementVisible(element) {\n  const style = getElementComputedStyle(element);\n  if (!style)\n    return true;\n  if (style.display === "contents") {\n    for (let child = element.firstChild; child; child = child.nextSibling) {\n      if (child.nodeType === 1 && isElementVisible(child))\n        return true;\n      if (child.nodeType === 3 && isVisibleTextNode(child))\n        return true;\n    }\n    return false;\n  }\n  if (!isElementStyleVisibilityVisible(element, style))\n    return false;\n  const rect = element.getBoundingClientRect();\n  return rect.width > 0 && rect.height > 0;\n}\nfunction isVisibleTextNode(node) {\n  const range = node.ownerDocument.createRange();\n  range.selectNode(node);\n  const rect = range.getBoundingClientRect();\n  return rect.width > 0 && rect.height > 0;\n}\nfunction elementSafeTagName(element) {\n  if (element instanceof HTMLFormElement)\n    return "FORM";\n  return element.tagName.toUpperCase();\n}\n\n// packages/playwright-core/src/server/injected/roleUtils.ts\nfunction hasExplicitAccessibleName(e) {\n  return e.hasAttribute("aria-label") || e.hasAttribute("aria-labelledby");\n}\nvar kAncestorPreventingLandmark = "article:not([role]), aside:not([role]), main:not([role]), nav:not([role]), section:not([role]), [role=article], [role=complementary], [role=main], [role=navigation], [role=region]";\nvar kGlobalAriaAttributes = /* @__PURE__ */ new Map([\n  ["aria-atomic", void 0],\n  ["aria-busy", void 0],\n  ["aria-controls", void 0],\n  ["aria-current", void 0],\n  ["aria-describedby", void 0],\n  ["aria-details", void 0],\n  // Global use deprecated in ARIA 1.2\n  // [\'aria-disabled\', undefined],\n  ["aria-dropeffect", void 0],\n  // Global use deprecated in ARIA 1.2\n  // [\'aria-errormessage\', undefined],\n  ["aria-flowto", void 0],\n  ["aria-grabbed", void 0],\n  // Global use deprecated in ARIA 1.2\n  // [\'aria-haspopup\', undefined],\n  ["aria-hidden", void 0],\n  // Global use deprecated in ARIA 1.2\n  // [\'aria-invalid\', undefined],\n  ["aria-keyshortcuts", void 0],\n  ["aria-label", /* @__PURE__ */ new Set(["caption", "code", "deletion", "emphasis", "generic", "insertion", "paragraph", "presentation", "strong", "subscript", "superscript"])],\n  ["aria-labelledby", /* @__PURE__ */ new Set(["caption", "code", "deletion", "emphasis", "generic", "insertion", "paragraph", "presentation", "strong", "subscript", "superscript"])],\n  ["aria-live", void 0],\n  ["aria-owns", void 0],\n  ["aria-relevant", void 0],\n  ["aria-roledescription", /* @__PURE__ */ new Set(["generic"])]\n]);\nfunction hasGlobalAriaAttribute(element, forRole) {\n  return [...kGlobalAriaAttributes].some(([attr, prohibited]) => {\n    return !(prohibited == null ? void 0 : prohibited.has(forRole || "")) && element.hasAttribute(attr);\n  });\n}\nfunction hasTabIndex(element) {\n  return !Number.isNaN(Number(String(element.getAttribute("tabindex"))));\n}\nfunction isFocusable(element) {\n  return !isNativelyDisabled(element) && (isNativelyFocusable(element) || hasTabIndex(element));\n}\nfunction isNativelyFocusable(element) {\n  const tagName = elementSafeTagName(element);\n  if (["BUTTON", "DETAILS", "SELECT", "TEXTAREA"].includes(tagName))\n    return true;\n  if (tagName === "A" || tagName === "AREA")\n    return element.hasAttribute("href");\n  if (tagName === "INPUT")\n    return !element.hidden;\n  return false;\n}\nvar kImplicitRoleByTagName = {\n  "A": (e) => {\n    return e.hasAttribute("href") ? "link" : null;\n  },\n  "AREA": (e) => {\n    return e.hasAttribute("href") ? "link" : null;\n  },\n  "ARTICLE": () => "article",\n  "ASIDE": () => "complementary",\n  "BLOCKQUOTE": () => "blockquote",\n  "BUTTON": () => "button",\n  "CAPTION": () => "caption",\n  "CODE": () => "code",\n  "DATALIST": () => "listbox",\n  "DD": () => "definition",\n  "DEL": () => "deletion",\n  "DETAILS": () => "group",\n  "DFN": () => "term",\n  "DIALOG": () => "dialog",\n  "DT": () => "term",\n  "EM": () => "emphasis",\n  "FIELDSET": () => "group",\n  "FIGURE": () => "figure",\n  "FOOTER": (e) => closestCrossShadow(e, kAncestorPreventingLandmark) ? null : "contentinfo",\n  "FORM": (e) => hasExplicitAccessibleName(e) ? "form" : null,\n  "H1": () => "heading",\n  "H2": () => "heading",\n  "H3": () => "heading",\n  "H4": () => "heading",\n  "H5": () => "heading",\n  "H6": () => "heading",\n  "HEADER": (e) => closestCrossShadow(e, kAncestorPreventingLandmark) ? null : "banner",\n  "HR": () => "separator",\n  "HTML": () => "document",\n  "IMG": (e) => e.getAttribute("alt") === "" && !e.getAttribute("title") && !hasGlobalAriaAttribute(e) && !hasTabIndex(e) ? "presentation" : "img",\n  "INPUT": (e) => {\n    const type = e.type.toLowerCase();\n    if (type === "search")\n      return e.hasAttribute("list") ? "combobox" : "searchbox";\n    if (["email", "tel", "text", "url", ""].includes(type)) {\n      const list = getIdRefs(e, e.getAttribute("list"))[0];\n      return list && elementSafeTagName(list) === "DATALIST" ? "combobox" : "textbox";\n    }\n    if (type === "hidden")\n      return null;\n    return inputTypeToRole[type] || "textbox";\n  },\n  "INS": () => "insertion",\n  "LI": () => "listitem",\n  "MAIN": () => "main",\n  "MARK": () => "mark",\n  "MATH": () => "math",\n  "MENU": () => "list",\n  "METER": () => "meter",\n  "NAV": () => "navigation",\n  "OL": () => "list",\n  "OPTGROUP": () => "group",\n  "OPTION": () => "option",\n  "OUTPUT": () => "status",\n  "P": () => "paragraph",\n  "PROGRESS": () => "progressbar",\n  "SECTION": (e) => hasExplicitAccessibleName(e) ? "region" : null,\n  "SELECT": (e) => e.hasAttribute("multiple") || e.size > 1 ? "listbox" : "combobox",\n  "STRONG": () => "strong",\n  "SUB": () => "subscript",\n  "SUP": () => "superscript",\n  // For <svg> we default to Chrome behavior:\n  // - Chrome reports \'img\'.\n  // - Firefox reports \'diagram\' that is not in official ARIA spec yet.\n  // - Safari reports \'no role\', but still computes accessible name.\n  "SVG": () => "img",\n  "TABLE": () => "table",\n  "TBODY": () => "rowgroup",\n  "TD": (e) => {\n    const table = closestCrossShadow(e, "table");\n    const role = table ? getExplicitAriaRole(table) : "";\n    return role === "grid" || role === "treegrid" ? "gridcell" : "cell";\n  },\n  "TEXTAREA": () => "textbox",\n  "TFOOT": () => "rowgroup",\n  "TH": (e) => {\n    if (e.getAttribute("scope") === "col")\n      return "columnheader";\n    if (e.getAttribute("scope") === "row")\n      return "rowheader";\n    const table = closestCrossShadow(e, "table");\n    const role = table ? getExplicitAriaRole(table) : "";\n    return role === "grid" || role === "treegrid" ? "gridcell" : "cell";\n  },\n  "THEAD": () => "rowgroup",\n  "TIME": () => "time",\n  "TR": () => "row",\n  "UL": () => "list"\n};\nvar kPresentationInheritanceParents = {\n  "DD": ["DL", "DIV"],\n  "DIV": ["DL"],\n  "DT": ["DL", "DIV"],\n  "LI": ["OL", "UL"],\n  "TBODY": ["TABLE"],\n  "TD": ["TR"],\n  "TFOOT": ["TABLE"],\n  "TH": ["TR"],\n  "THEAD": ["TABLE"],\n  "TR": ["THEAD", "TBODY", "TFOOT", "TABLE"]\n};\nfunction getImplicitAriaRole(element) {\n  var _a;\n  const implicitRole = ((_a = kImplicitRoleByTagName[elementSafeTagName(element)]) == null ? void 0 : _a.call(kImplicitRoleByTagName, element)) || "";\n  if (!implicitRole)\n    return null;\n  let ancestor = element;\n  while (ancestor) {\n    const parent = parentElementOrShadowHost(ancestor);\n    const parents = kPresentationInheritanceParents[elementSafeTagName(ancestor)];\n    if (!parents || !parent || !parents.includes(elementSafeTagName(parent)))\n      break;\n    const parentExplicitRole = getExplicitAriaRole(parent);\n    if ((parentExplicitRole === "none" || parentExplicitRole === "presentation") && !hasPresentationConflictResolution(parent, parentExplicitRole))\n      return parentExplicitRole;\n    ancestor = parent;\n  }\n  return implicitRole;\n}\nvar validRoles = [\n  "alert",\n  "alertdialog",\n  "application",\n  "article",\n  "banner",\n  "blockquote",\n  "button",\n  "caption",\n  "cell",\n  "checkbox",\n  "code",\n  "columnheader",\n  "combobox",\n  "complementary",\n  "contentinfo",\n  "definition",\n  "deletion",\n  "dialog",\n  "directory",\n  "document",\n  "emphasis",\n  "feed",\n  "figure",\n  "form",\n  "generic",\n  "grid",\n  "gridcell",\n  "group",\n  "heading",\n  "img",\n  "insertion",\n  "link",\n  "list",\n  "listbox",\n  "listitem",\n  "log",\n  "main",\n  "mark",\n  "marquee",\n  "math",\n  "meter",\n  "menu",\n  "menubar",\n  "menuitem",\n  "menuitemcheckbox",\n  "menuitemradio",\n  "navigation",\n  "none",\n  "note",\n  "option",\n  "paragraph",\n  "presentation",\n  "progressbar",\n  "radio",\n  "radiogroup",\n  "region",\n  "row",\n  "rowgroup",\n  "rowheader",\n  "scrollbar",\n  "search",\n  "searchbox",\n  "separator",\n  "slider",\n  "spinbutton",\n  "status",\n  "strong",\n  "subscript",\n  "superscript",\n  "switch",\n  "tab",\n  "table",\n  "tablist",\n  "tabpanel",\n  "term",\n  "textbox",\n  "time",\n  "timer",\n  "toolbar",\n  "tooltip",\n  "tree",\n  "treegrid",\n  "treeitem"\n];\nfunction getExplicitAriaRole(element) {\n  const roles = (element.getAttribute("role") || "").split(" ").map((role) => role.trim());\n  return roles.find((role) => validRoles.includes(role)) || null;\n}\nfunction hasPresentationConflictResolution(element, role) {\n  return hasGlobalAriaAttribute(element, role) || isFocusable(element);\n}\nfunction getAriaRole(element) {\n  const explicitRole = getExplicitAriaRole(element);\n  if (!explicitRole)\n    return getImplicitAriaRole(element);\n  if (explicitRole === "none" || explicitRole === "presentation") {\n    const implicitRole = getImplicitAriaRole(element);\n    if (hasPresentationConflictResolution(element, implicitRole))\n      return implicitRole;\n  }\n  return explicitRole;\n}\nfunction getAriaBoolean(attr) {\n  return attr === null ? void 0 : attr.toLowerCase() === "true";\n}\nfunction isElementIgnoredForAria(element) {\n  return ["STYLE", "SCRIPT", "NOSCRIPT", "TEMPLATE"].includes(elementSafeTagName(element));\n}\nfunction isElementHiddenForAria(element) {\n  if (isElementIgnoredForAria(element))\n    return true;\n  const style = getElementComputedStyle(element);\n  const isSlot = element.nodeName === "SLOT";\n  if ((style == null ? void 0 : style.display) === "contents" && !isSlot) {\n    for (let child = element.firstChild; child; child = child.nextSibling) {\n      if (child.nodeType === 1 && !isElementHiddenForAria(child))\n        return false;\n      if (child.nodeType === 3 && isVisibleTextNode(child))\n        return false;\n    }\n    return true;\n  }\n  const isOptionInsideSelect = element.nodeName === "OPTION" && !!element.closest("select");\n  if (!isOptionInsideSelect && !isSlot && !isElementStyleVisibilityVisible(element, style))\n    return true;\n  return belongsToDisplayNoneOrAriaHiddenOrNonSlotted(element);\n}\nfunction belongsToDisplayNoneOrAriaHiddenOrNonSlotted(element) {\n  let hidden = cacheIsHidden == null ? void 0 : cacheIsHidden.get(element);\n  if (hidden === void 0) {\n    hidden = false;\n    if (element.parentElement && element.parentElement.shadowRoot && !element.assignedSlot)\n      hidden = true;\n    if (!hidden) {\n      const style = getElementComputedStyle(element);\n      hidden = !style || style.display === "none" || getAriaBoolean(element.getAttribute("aria-hidden")) === true;\n    }\n    if (!hidden) {\n      const parent = parentElementOrShadowHost(element);\n      if (parent)\n        hidden = belongsToDisplayNoneOrAriaHiddenOrNonSlotted(parent);\n    }\n    cacheIsHidden == null ? void 0 : cacheIsHidden.set(element, hidden);\n  }\n  return hidden;\n}\nfunction getIdRefs(element, ref) {\n  if (!ref)\n    return [];\n  const root = enclosingShadowRootOrDocument(element);\n  if (!root)\n    return [];\n  try {\n    const ids = ref.split(" ").filter((id) => !!id);\n    const set = /* @__PURE__ */ new Set();\n    for (const id of ids) {\n      const firstElement = root.querySelector("#" + CSS.escape(id));\n      if (firstElement)\n        set.add(firstElement);\n    }\n    return [...set];\n  } catch (e) {\n    return [];\n  }\n}\nfunction trimFlatString(s) {\n  return s.trim();\n}\nfunction asFlatString(s) {\n  return s.split("\\xA0").map((chunk) => chunk.replace(/\\r\\n/g, "\\n").replace(/[\\u200b\\u00ad]/g, "").replace(/\\s\\s*/g, " ")).join("\\xA0").trim();\n}\nfunction queryInAriaOwned(element, selector) {\n  const result = [...element.querySelectorAll(selector)];\n  for (const owned of getIdRefs(element, element.getAttribute("aria-owns"))) {\n    if (owned.matches(selector))\n      result.push(owned);\n    result.push(...owned.querySelectorAll(selector));\n  }\n  return result;\n}\nfunction getPseudoContent(element, pseudo) {\n  const cache = pseudo === "::before" ? cachePseudoContentBefore : cachePseudoContentAfter;\n  if (cache == null ? void 0 : cache.has(element))\n    return (cache == null ? void 0 : cache.get(element)) || "";\n  const pseudoStyle = getElementComputedStyle(element, pseudo);\n  const content = getPseudoContentImpl(element, pseudoStyle);\n  if (cache)\n    cache.set(element, content);\n  return content;\n}\nfunction getPseudoContentImpl(element, pseudoStyle) {\n  if (!pseudoStyle || pseudoStyle.display === "none" || pseudoStyle.visibility === "hidden")\n    return "";\n  const content = pseudoStyle.content;\n  let resolvedContent;\n  if (content[0] === "\'" && content[content.length - 1] === "\'" || content[0] === \'"\' && content[content.length - 1] === \'"\') {\n    resolvedContent = content.substring(1, content.length - 1);\n  } else if (content.startsWith("attr(") && content.endsWith(")")) {\n    const attrName = content.substring("attr(".length, content.length - 1).trim();\n    resolvedContent = element.getAttribute(attrName) || "";\n  }\n  if (resolvedContent !== void 0) {\n    const display = pseudoStyle.display || "inline";\n    if (display !== "inline")\n      return " " + resolvedContent + " ";\n    return resolvedContent;\n  }\n  return "";\n}\nfunction getAriaLabelledByElements(element) {\n  const ref = element.getAttribute("aria-labelledby");\n  if (ref === null)\n    return null;\n  const refs = getIdRefs(element, ref);\n  return refs.length ? refs : null;\n}\nfunction allowsNameFromContent(role, targetDescendant) {\n  const alwaysAllowsNameFromContent = ["button", "cell", "checkbox", "columnheader", "gridcell", "heading", "link", "menuitem", "menuitemcheckbox", "menuitemradio", "option", "radio", "row", "rowheader", "switch", "tab", "tooltip", "treeitem"].includes(role);\n  const descendantAllowsNameFromContent = targetDescendant && ["", "caption", "code", "contentinfo", "definition", "deletion", "emphasis", "insertion", "list", "listitem", "mark", "none", "paragraph", "presentation", "region", "row", "rowgroup", "section", "strong", "subscript", "superscript", "table", "term", "time"].includes(role);\n  return alwaysAllowsNameFromContent || descendantAllowsNameFromContent;\n}\nfunction getElementAccessibleName(element, includeHidden) {\n  const cache = includeHidden ? cacheAccessibleNameHidden : cacheAccessibleName;\n  let accessibleName = cache == null ? void 0 : cache.get(element);\n  if (accessibleName === void 0) {\n    accessibleName = "";\n    const elementProhibitsNaming = ["caption", "code", "definition", "deletion", "emphasis", "generic", "insertion", "mark", "paragraph", "presentation", "strong", "subscript", "suggestion", "superscript", "term", "time"].includes(getAriaRole(element) || "");\n    if (!elementProhibitsNaming) {\n      accessibleName = asFlatString(getTextAlternativeInternal(element, {\n        includeHidden,\n        visitedElements: /* @__PURE__ */ new Set(),\n        embeddedInTargetElement: "self"\n      }));\n    }\n    cache == null ? void 0 : cache.set(element, accessibleName);\n  }\n  return accessibleName;\n}\nfunction getElementAccessibleDescription(element, includeHidden) {\n  const cache = includeHidden ? cacheAccessibleDescriptionHidden : cacheAccessibleDescription;\n  let accessibleDescription = cache == null ? void 0 : cache.get(element);\n  if (accessibleDescription === void 0) {\n    accessibleDescription = "";\n    if (element.hasAttribute("aria-describedby")) {\n      const describedBy = getIdRefs(element, element.getAttribute("aria-describedby"));\n      accessibleDescription = asFlatString(describedBy.map((ref) => getTextAlternativeInternal(ref, {\n        includeHidden,\n        visitedElements: /* @__PURE__ */ new Set(),\n        embeddedInDescribedBy: { element: ref, hidden: isElementHiddenForAria(ref) }\n      })).join(" "));\n    } else if (element.hasAttribute("aria-description")) {\n      accessibleDescription = asFlatString(element.getAttribute("aria-description") || "");\n    } else {\n      accessibleDescription = asFlatString(element.getAttribute("title") || "");\n    }\n    cache == null ? void 0 : cache.set(element, accessibleDescription);\n  }\n  return accessibleDescription;\n}\nvar kAriaInvalidRoles = ["application", "checkbox", "combobox", "gridcell", "listbox", "radiogroup", "slider", "spinbutton", "textbox", "tree", "columnheader", "rowheader", "searchbox", "switch", "treegrid"];\nfunction getAriaInvalid(element) {\n  const role = getAriaRole(element) || "";\n  if (!role || !kAriaInvalidRoles.includes(role))\n    return "false";\n  const ariaInvalid = element.getAttribute("aria-invalid");\n  if (!ariaInvalid || ariaInvalid.trim() === "" || ariaInvalid.toLocaleLowerCase() === "false")\n    return "false";\n  if (ariaInvalid === "true" || ariaInvalid === "grammar" || ariaInvalid === "spelling")\n    return ariaInvalid;\n  return "true";\n}\nfunction getValidityInvalid(element) {\n  if ("validity" in element) {\n    const validity = element.validity;\n    return (validity == null ? void 0 : validity.valid) === false;\n  }\n  return false;\n}\nfunction getElementAccessibleErrorMessage(element) {\n  const cache = cacheAccessibleErrorMessage;\n  let accessibleErrorMessage = cacheAccessibleErrorMessage == null ? void 0 : cacheAccessibleErrorMessage.get(element);\n  if (accessibleErrorMessage === void 0) {\n    accessibleErrorMessage = "";\n    const isAriaInvalid = getAriaInvalid(element) !== "false";\n    const isValidityInvalid = getValidityInvalid(element);\n    if (isAriaInvalid || isValidityInvalid) {\n      const errorMessageId = element.getAttribute("aria-errormessage");\n      const errorMessages = getIdRefs(element, errorMessageId);\n      const parts = errorMessages.map((errorMessage) => asFlatString(\n        getTextAlternativeInternal(errorMessage, {\n          visitedElements: /* @__PURE__ */ new Set(),\n          embeddedInDescribedBy: { element: errorMessage, hidden: isElementHiddenForAria(errorMessage) }\n        })\n      ));\n      accessibleErrorMessage = parts.join(" ").trim();\n    }\n    cache == null ? void 0 : cache.set(element, accessibleErrorMessage);\n  }\n  return accessibleErrorMessage;\n}\nfunction getTextAlternativeInternal(element, options) {\n  var _a, _b, _c, _d;\n  if (options.visitedElements.has(element))\n    return "";\n  const childOptions = {\n    ...options,\n    embeddedInTargetElement: options.embeddedInTargetElement === "self" ? "descendant" : options.embeddedInTargetElement\n  };\n  if (!options.includeHidden) {\n    const isEmbeddedInHiddenReferenceTraversal = !!((_a = options.embeddedInLabelledBy) == null ? void 0 : _a.hidden) || !!((_b = options.embeddedInDescribedBy) == null ? void 0 : _b.hidden) || !!((_c = options.embeddedInNativeTextAlternative) == null ? void 0 : _c.hidden) || !!((_d = options.embeddedInLabel) == null ? void 0 : _d.hidden);\n    if (isElementIgnoredForAria(element) || !isEmbeddedInHiddenReferenceTraversal && isElementHiddenForAria(element)) {\n      options.visitedElements.add(element);\n      return "";\n    }\n  }\n  const labelledBy = getAriaLabelledByElements(element);\n  if (!options.embeddedInLabelledBy) {\n    const accessibleName = (labelledBy || []).map((ref) => getTextAlternativeInternal(ref, {\n      ...options,\n      embeddedInLabelledBy: { element: ref, hidden: isElementHiddenForAria(ref) },\n      embeddedInDescribedBy: void 0,\n      embeddedInTargetElement: void 0,\n      embeddedInLabel: void 0,\n      embeddedInNativeTextAlternative: void 0\n    })).join(" ");\n    if (accessibleName)\n      return accessibleName;\n  }\n  const role = getAriaRole(element) || "";\n  const tagName = elementSafeTagName(element);\n  if (!!options.embeddedInLabel || !!options.embeddedInLabelledBy || options.embeddedInTargetElement === "descendant") {\n    const isOwnLabel = [...element.labels || []].includes(element);\n    const isOwnLabelledBy = (labelledBy || []).includes(element);\n    if (!isOwnLabel && !isOwnLabelledBy) {\n      if (role === "textbox") {\n        options.visitedElements.add(element);\n        if (tagName === "INPUT" || tagName === "TEXTAREA")\n          return element.value;\n        return element.textContent || "";\n      }\n      if (["combobox", "listbox"].includes(role)) {\n        options.visitedElements.add(element);\n        let selectedOptions;\n        if (tagName === "SELECT") {\n          selectedOptions = [...element.selectedOptions];\n          if (!selectedOptions.length && element.options.length)\n            selectedOptions.push(element.options[0]);\n        } else {\n          const listbox = role === "combobox" ? queryInAriaOwned(element, "*").find((e) => getAriaRole(e) === "listbox") : element;\n          selectedOptions = listbox ? queryInAriaOwned(listbox, \'[aria-selected="true"]\').filter((e) => getAriaRole(e) === "option") : [];\n        }\n        if (!selectedOptions.length && tagName === "INPUT") {\n          return element.value;\n        }\n        return selectedOptions.map((option) => getTextAlternativeInternal(option, childOptions)).join(" ");\n      }\n      if (["progressbar", "scrollbar", "slider", "spinbutton", "meter"].includes(role)) {\n        options.visitedElements.add(element);\n        if (element.hasAttribute("aria-valuetext"))\n          return element.getAttribute("aria-valuetext") || "";\n        if (element.hasAttribute("aria-valuenow"))\n          return element.getAttribute("aria-valuenow") || "";\n        return element.getAttribute("value") || "";\n      }\n      if (["menu"].includes(role)) {\n        options.visitedElements.add(element);\n        return "";\n      }\n    }\n  }\n  const ariaLabel = element.getAttribute("aria-label") || "";\n  if (trimFlatString(ariaLabel)) {\n    options.visitedElements.add(element);\n    return ariaLabel;\n  }\n  if (!["presentation", "none"].includes(role)) {\n    if (tagName === "INPUT" && ["button", "submit", "reset"].includes(element.type)) {\n      options.visitedElements.add(element);\n      const value = element.value || "";\n      if (trimFlatString(value))\n        return value;\n      if (element.type === "submit")\n        return "Submit";\n      if (element.type === "reset")\n        return "Reset";\n      const title = element.getAttribute("title") || "";\n      return title;\n    }\n    if (tagName === "INPUT" && element.type === "image") {\n      options.visitedElements.add(element);\n      const labels = element.labels || [];\n      if (labels.length && !options.embeddedInLabelledBy)\n        return getAccessibleNameFromAssociatedLabels(labels, options);\n      const alt = element.getAttribute("alt") || "";\n      if (trimFlatString(alt))\n        return alt;\n      const title = element.getAttribute("title") || "";\n      if (trimFlatString(title))\n        return title;\n      return "Submit";\n    }\n    if (!labelledBy && tagName === "BUTTON") {\n      options.visitedElements.add(element);\n      const labels = element.labels || [];\n      if (labels.length)\n        return getAccessibleNameFromAssociatedLabels(labels, options);\n    }\n    if (!labelledBy && tagName === "OUTPUT") {\n      options.visitedElements.add(element);\n      const labels = element.labels || [];\n      if (labels.length)\n        return getAccessibleNameFromAssociatedLabels(labels, options);\n      return element.getAttribute("title") || "";\n    }\n    if (!labelledBy && (tagName === "TEXTAREA" || tagName === "SELECT" || tagName === "INPUT")) {\n      options.visitedElements.add(element);\n      const labels = element.labels || [];\n      if (labels.length)\n        return getAccessibleNameFromAssociatedLabels(labels, options);\n      const usePlaceholder = tagName === "INPUT" && ["text", "password", "search", "tel", "email", "url"].includes(element.type) || tagName === "TEXTAREA";\n      const placeholder = element.getAttribute("placeholder") || "";\n      const title = element.getAttribute("title") || "";\n      if (!usePlaceholder || title)\n        return title;\n      return placeholder;\n    }\n    if (!labelledBy && tagName === "FIELDSET") {\n      options.visitedElements.add(element);\n      for (let child = element.firstElementChild; child; child = child.nextElementSibling) {\n        if (elementSafeTagName(child) === "LEGEND") {\n          return getTextAlternativeInternal(child, {\n            ...childOptions,\n            embeddedInNativeTextAlternative: { element: child, hidden: isElementHiddenForAria(child) }\n          });\n        }\n      }\n      const title = element.getAttribute("title") || "";\n      return title;\n    }\n    if (!labelledBy && tagName === "FIGURE") {\n      options.visitedElements.add(element);\n      for (let child = element.firstElementChild; child; child = child.nextElementSibling) {\n        if (elementSafeTagName(child) === "FIGCAPTION") {\n          return getTextAlternativeInternal(child, {\n            ...childOptions,\n            embeddedInNativeTextAlternative: { element: child, hidden: isElementHiddenForAria(child) }\n          });\n        }\n      }\n      const title = element.getAttribute("title") || "";\n      return title;\n    }\n    if (tagName === "IMG") {\n      options.visitedElements.add(element);\n      const alt = element.getAttribute("alt") || "";\n      if (trimFlatString(alt))\n        return alt;\n      const title = element.getAttribute("title") || "";\n      return title;\n    }\n    if (tagName === "TABLE") {\n      options.visitedElements.add(element);\n      for (let child = element.firstElementChild; child; child = child.nextElementSibling) {\n        if (elementSafeTagName(child) === "CAPTION") {\n          return getTextAlternativeInternal(child, {\n            ...childOptions,\n            embeddedInNativeTextAlternative: { element: child, hidden: isElementHiddenForAria(child) }\n          });\n        }\n      }\n      const summary = element.getAttribute("summary") || "";\n      if (summary)\n        return summary;\n    }\n    if (tagName === "AREA") {\n      options.visitedElements.add(element);\n      const alt = element.getAttribute("alt") || "";\n      if (trimFlatString(alt))\n        return alt;\n      const title = element.getAttribute("title") || "";\n      return title;\n    }\n    if (tagName === "SVG" || element.ownerSVGElement) {\n      options.visitedElements.add(element);\n      for (let child = element.firstElementChild; child; child = child.nextElementSibling) {\n        if (elementSafeTagName(child) === "TITLE" && child.ownerSVGElement) {\n          return getTextAlternativeInternal(child, {\n            ...childOptions,\n            embeddedInLabelledBy: { element: child, hidden: isElementHiddenForAria(child) }\n          });\n        }\n      }\n    }\n    if (element.ownerSVGElement && tagName === "A") {\n      const title = element.getAttribute("xlink:title") || "";\n      if (trimFlatString(title)) {\n        options.visitedElements.add(element);\n        return title;\n      }\n    }\n  }\n  const shouldNameFromContentForSummary = tagName === "SUMMARY" && !["presentation", "none"].includes(role);\n  if (allowsNameFromContent(role, options.embeddedInTargetElement === "descendant") || shouldNameFromContentForSummary || !!options.embeddedInLabelledBy || !!options.embeddedInDescribedBy || !!options.embeddedInLabel || !!options.embeddedInNativeTextAlternative) {\n    options.visitedElements.add(element);\n    const accessibleName = innerAccumulatedElementText(element, childOptions);\n    const maybeTrimmedAccessibleName = options.embeddedInTargetElement === "self" ? trimFlatString(accessibleName) : accessibleName;\n    if (maybeTrimmedAccessibleName)\n      return accessibleName;\n  }\n  if (!["presentation", "none"].includes(role) || tagName === "IFRAME") {\n    options.visitedElements.add(element);\n    const title = element.getAttribute("title") || "";\n    if (trimFlatString(title))\n      return title;\n  }\n  options.visitedElements.add(element);\n  return "";\n}\nfunction innerAccumulatedElementText(element, options) {\n  const tokens = [];\n  const visit = (node, skipSlotted) => {\n    var _a;\n    if (skipSlotted && node.assignedSlot)\n      return;\n    if (node.nodeType === 1) {\n      const display = ((_a = getElementComputedStyle(node)) == null ? void 0 : _a.display) || "inline";\n      let token = getTextAlternativeInternal(node, options);\n      if (display !== "inline" || node.nodeName === "BR")\n        token = " " + token + " ";\n      tokens.push(token);\n    } else if (node.nodeType === 3) {\n      tokens.push(node.textContent || "");\n    }\n  };\n  tokens.push(getPseudoContent(element, "::before"));\n  const assignedNodes = element.nodeName === "SLOT" ? element.assignedNodes() : [];\n  if (assignedNodes.length) {\n    for (const child of assignedNodes)\n      visit(child, false);\n  } else {\n    for (let child = element.firstChild; child; child = child.nextSibling)\n      visit(child, true);\n    if (element.shadowRoot) {\n      for (let child = element.shadowRoot.firstChild; child; child = child.nextSibling)\n        visit(child, true);\n    }\n    for (const owned of getIdRefs(element, element.getAttribute("aria-owns")))\n      visit(owned, true);\n  }\n  tokens.push(getPseudoContent(element, "::after"));\n  return tokens.join("");\n}\nvar kAriaSelectedRoles = ["gridcell", "option", "row", "tab", "rowheader", "columnheader", "treeitem"];\nfunction getAriaSelected(element) {\n  if (elementSafeTagName(element) === "OPTION")\n    return element.selected;\n  if (kAriaSelectedRoles.includes(getAriaRole(element) || ""))\n    return getAriaBoolean(element.getAttribute("aria-selected")) === true;\n  return false;\n}\nvar kAriaCheckedRoles = ["checkbox", "menuitemcheckbox", "option", "radio", "switch", "menuitemradio", "treeitem"];\nfunction getAriaChecked(element) {\n  const result = getChecked(element, true);\n  return result === "error" ? false : result;\n}\nfunction getCheckedAllowMixed(element) {\n  return getChecked(element, true);\n}\nfunction getCheckedWithoutMixed(element) {\n  const result = getChecked(element, false);\n  return result;\n}\nfunction getChecked(element, allowMixed) {\n  const tagName = elementSafeTagName(element);\n  if (allowMixed && tagName === "INPUT" && element.indeterminate)\n    return "mixed";\n  if (tagName === "INPUT" && ["checkbox", "radio"].includes(element.type))\n    return element.checked;\n  if (kAriaCheckedRoles.includes(getAriaRole(element) || "")) {\n    const checked = element.getAttribute("aria-checked");\n    if (checked === "true")\n      return true;\n    if (allowMixed && checked === "mixed")\n      return "mixed";\n    return false;\n  }\n  return "error";\n}\nvar kAriaReadonlyRoles = ["checkbox", "combobox", "grid", "gridcell", "listbox", "radiogroup", "slider", "spinbutton", "textbox", "columnheader", "rowheader", "searchbox", "switch", "treegrid"];\nfunction getReadonly(element) {\n  const tagName = elementSafeTagName(element);\n  if (["INPUT", "TEXTAREA", "SELECT"].includes(tagName))\n    return element.hasAttribute("readonly");\n  if (kAriaReadonlyRoles.includes(getAriaRole(element) || ""))\n    return element.getAttribute("aria-readonly") === "true";\n  if (element.isContentEditable)\n    return false;\n  return "error";\n}\nvar kAriaPressedRoles = ["button"];\nfunction getAriaPressed(element) {\n  if (kAriaPressedRoles.includes(getAriaRole(element) || "")) {\n    const pressed = element.getAttribute("aria-pressed");\n    if (pressed === "true")\n      return true;\n    if (pressed === "mixed")\n      return "mixed";\n  }\n  return false;\n}\nvar kAriaExpandedRoles = ["application", "button", "checkbox", "combobox", "gridcell", "link", "listbox", "menuitem", "row", "rowheader", "tab", "treeitem", "columnheader", "menuitemcheckbox", "menuitemradio", "rowheader", "switch"];\nfunction getAriaExpanded(element) {\n  if (elementSafeTagName(element) === "DETAILS")\n    return element.open;\n  if (kAriaExpandedRoles.includes(getAriaRole(element) || "")) {\n    const expanded = element.getAttribute("aria-expanded");\n    if (expanded === null)\n      return void 0;\n    if (expanded === "true")\n      return true;\n    return false;\n  }\n  return void 0;\n}\nvar kAriaLevelRoles = ["heading", "listitem", "row", "treeitem"];\nfunction getAriaLevel(element) {\n  const native = { "H1": 1, "H2": 2, "H3": 3, "H4": 4, "H5": 5, "H6": 6 }[elementSafeTagName(element)];\n  if (native)\n    return native;\n  if (kAriaLevelRoles.includes(getAriaRole(element) || "")) {\n    const attr = element.getAttribute("aria-level");\n    const value = attr === null ? Number.NaN : Number(attr);\n    if (Number.isInteger(value) && value >= 1)\n      return value;\n  }\n  return 0;\n}\nvar kAriaDisabledRoles = ["application", "button", "composite", "gridcell", "group", "input", "link", "menuitem", "scrollbar", "separator", "tab", "checkbox", "columnheader", "combobox", "grid", "listbox", "menu", "menubar", "menuitemcheckbox", "menuitemradio", "option", "radio", "radiogroup", "row", "rowheader", "searchbox", "select", "slider", "spinbutton", "switch", "tablist", "textbox", "toolbar", "tree", "treegrid", "treeitem"];\nfunction getAriaDisabled(element) {\n  return isNativelyDisabled(element) || hasExplicitAriaDisabled(element);\n}\nfunction isNativelyDisabled(element) {\n  const isNativeFormControl = ["BUTTON", "INPUT", "SELECT", "TEXTAREA", "OPTION", "OPTGROUP"].includes(element.tagName);\n  return isNativeFormControl && (element.hasAttribute("disabled") || belongsToDisabledFieldSet(element));\n}\nfunction belongsToDisabledFieldSet(element) {\n  if (!element)\n    return false;\n  if (elementSafeTagName(element) === "FIELDSET" && element.hasAttribute("disabled"))\n    return true;\n  return belongsToDisabledFieldSet(element.parentElement);\n}\nfunction hasExplicitAriaDisabled(element) {\n  if (!element)\n    return false;\n  if (kAriaDisabledRoles.includes(getAriaRole(element) || "")) {\n    const attribute = (element.getAttribute("aria-disabled") || "").toLowerCase();\n    if (attribute === "true")\n      return true;\n    if (attribute === "false")\n      return false;\n  }\n  return hasExplicitAriaDisabled(parentElementOrShadowHost(element));\n}\nfunction getAccessibleNameFromAssociatedLabels(labels, options) {\n  return [...labels].map((label) => getTextAlternativeInternal(label, {\n    ...options,\n    embeddedInLabel: { element: label, hidden: isElementHiddenForAria(label) },\n    embeddedInNativeTextAlternative: void 0,\n    embeddedInLabelledBy: void 0,\n    embeddedInDescribedBy: void 0,\n    embeddedInTargetElement: void 0\n  })).filter((accessibleName) => !!accessibleName).join(" ");\n}\nvar cacheAccessibleName;\nvar cacheAccessibleNameHidden;\nvar cacheAccessibleDescription;\nvar cacheAccessibleDescriptionHidden;\nvar cacheAccessibleErrorMessage;\nvar cacheIsHidden;\nvar cachePseudoContentBefore;\nvar cachePseudoContentAfter;\nvar cachesCounter = 0;\nfunction beginAriaCaches() {\n  ++cachesCounter;\n  cacheAccessibleName != null ? cacheAccessibleName : cacheAccessibleName = /* @__PURE__ */ new Map();\n  cacheAccessibleNameHidden != null ? cacheAccessibleNameHidden : cacheAccessibleNameHidden = /* @__PURE__ */ new Map();\n  cacheAccessibleDescription != null ? cacheAccessibleDescription : cacheAccessibleDescription = /* @__PURE__ */ new Map();\n  cacheAccessibleDescriptionHidden != null ? cacheAccessibleDescriptionHidden : cacheAccessibleDescriptionHidden = /* @__PURE__ */ new Map();\n  cacheAccessibleErrorMessage != null ? cacheAccessibleErrorMessage : cacheAccessibleErrorMessage = /* @__PURE__ */ new Map();\n  cacheIsHidden != null ? cacheIsHidden : cacheIsHidden = /* @__PURE__ */ new Map();\n  cachePseudoContentBefore != null ? cachePseudoContentBefore : cachePseudoContentBefore = /* @__PURE__ */ new Map();\n  cachePseudoContentAfter != null ? cachePseudoContentAfter : cachePseudoContentAfter = /* @__PURE__ */ new Map();\n}\nfunction endAriaCaches() {\n  if (!--cachesCounter) {\n    cacheAccessibleName = void 0;\n    cacheAccessibleNameHidden = void 0;\n    cacheAccessibleDescription = void 0;\n    cacheAccessibleDescriptionHidden = void 0;\n    cacheAccessibleErrorMessage = void 0;\n    cacheIsHidden = void 0;\n    cachePseudoContentBefore = void 0;\n    cachePseudoContentAfter = void 0;\n  }\n}\nvar inputTypeToRole = {\n  "button": "button",\n  "checkbox": "checkbox",\n  "image": "button",\n  "number": "spinbutton",\n  "radio": "radio",\n  "range": "slider",\n  "reset": "button",\n  "submit": "button"\n};\n\n// packages/playwright-core/src/server/injected/yaml.ts\nfunction yamlEscapeKeyIfNeeded(str) {\n  if (!yamlStringNeedsQuotes(str))\n    return str;\n  return `\'` + str.replace(/\'/g, `\'\'`) + `\'`;\n}\nfunction yamlEscapeValueIfNeeded(str) {\n  if (!yamlStringNeedsQuotes(str))\n    return str;\n  return \'"\' + str.replace(/[\\\\"\\x00-\\x1f\\x7f-\\x9f]/g, (c) => {\n    switch (c) {\n      case "\\\\":\n        return "\\\\\\\\";\n      case \'"\':\n        return \'\\\\"\';\n      case "\\b":\n        return "\\\\b";\n      case "\\f":\n        return "\\\\f";\n      case "\\n":\n        return "\\\\n";\n      case "\\r":\n        return "\\\\r";\n      case "	":\n        return "\\\\t";\n      default:\n        const code = c.charCodeAt(0);\n        return "\\\\x" + code.toString(16).padStart(2, "0");\n    }\n  }) + \'"\';\n}\nfunction yamlStringNeedsQuotes(str) {\n  if (str.length === 0)\n    return true;\n  if (/^\\s|\\s$/.test(str))\n    return true;\n  if (/[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f-\\x9f]/.test(str))\n    return true;\n  if (/^-/.test(str))\n    return true;\n  if (/[\\n:](\\s|$)/.test(str))\n    return true;\n  if (/\\s#/.test(str))\n    return true;\n  if (/[\\n\\r]/.test(str))\n    return true;\n  if (/^[&*\\],?!>|@"\'#%]/.test(str))\n    return true;\n  if (/[{}`]/.test(str))\n    return true;\n  if (/^\\[/.test(str))\n    return true;\n  if (!isNaN(Number(str)) || ["y", "n", "yes", "no", "true", "false", "on", "off", "null"].includes(str.toLowerCase()))\n    return true;\n  return false;\n}\n\n// packages/playwright-core/src/server/injected/ariaSnapshot.ts\nfunction generateAriaTree(rootElement) {\n  const visited = /* @__PURE__ */ new Set();\n  const snapshot = {\n    root: { role: "fragment", name: "", children: [], element: rootElement },\n    elements: /* @__PURE__ */ new Map(),\n    ids: /* @__PURE__ */ new Map()\n  };\n  const addElement = (element) => {\n    const id = snapshot.elements.size + 1;\n    snapshot.elements.set(id, element);\n    snapshot.ids.set(element, id);\n  };\n  addElement(rootElement);\n  const visit = (ariaNode, node) => {\n    if (visited.has(node))\n      return;\n    visited.add(node);\n    if (node.nodeType === Node.TEXT_NODE && node.nodeValue) {\n      const text = node.nodeValue;\n      if (ariaNode.role !== "textbox" && text)\n        ariaNode.children.push(node.nodeValue || "");\n      return;\n    }\n    if (node.nodeType !== Node.ELEMENT_NODE)\n      return;\n    const element = node;\n    if (isElementHiddenForAria(element))\n      return;\n    const ariaChildren = [];\n    if (element.hasAttribute("aria-owns")) {\n      const ids = element.getAttribute("aria-owns").split(/\\s+/);\n      for (const id of ids) {\n        const ownedElement = rootElement.ownerDocument.getElementById(id);\n        if (ownedElement)\n          ariaChildren.push(ownedElement);\n      }\n    }\n    addElement(element);\n    const childAriaNode = toAriaNode(element);\n    if (childAriaNode)\n      ariaNode.children.push(childAriaNode);\n    processElement(childAriaNode || ariaNode, element, ariaChildren);\n  };\n  function processElement(ariaNode, element, ariaChildren = []) {\n    var _a;\n    const display = ((_a = getElementComputedStyle(element)) == null ? void 0 : _a.display) || "inline";\n    const treatAsBlock = display !== "inline" || element.nodeName === "BR" ? " " : "";\n    if (treatAsBlock)\n      ariaNode.children.push(treatAsBlock);\n    ariaNode.children.push(getPseudoContent(element, "::before"));\n    const assignedNodes = element.nodeName === "SLOT" ? element.assignedNodes() : [];\n    if (assignedNodes.length) {\n      for (const child of assignedNodes)\n        visit(ariaNode, child);\n    } else {\n      for (let child = element.firstChild; child; child = child.nextSibling) {\n        if (!child.assignedSlot)\n          visit(ariaNode, child);\n      }\n      if (element.shadowRoot) {\n        for (let child = element.shadowRoot.firstChild; child; child = child.nextSibling)\n          visit(ariaNode, child);\n      }\n    }\n    for (const child of ariaChildren)\n      visit(ariaNode, child);\n    ariaNode.children.push(getPseudoContent(element, "::after"));\n    if (treatAsBlock)\n      ariaNode.children.push(treatAsBlock);\n    if (ariaNode.children.length === 1 && ariaNode.name === ariaNode.children[0])\n      ariaNode.children = [];\n  }\n  beginAriaCaches();\n  try {\n    visit(snapshot.root, rootElement);\n  } finally {\n    endAriaCaches();\n  }\n  normalizeStringChildren(snapshot.root);\n  return snapshot;\n}\nfunction toAriaNode(element) {\n  const role = getAriaRole(element);\n  if (!role || role === "presentation" || role === "none")\n    return null;\n  const name = normalizeWhiteSpace(getElementAccessibleName(element, false) || "");\n  const result = { role, name, children: [], element };\n  if (kAriaCheckedRoles.includes(role))\n    result.checked = getAriaChecked(element);\n  if (kAriaDisabledRoles.includes(role))\n    result.disabled = getAriaDisabled(element);\n  if (kAriaExpandedRoles.includes(role))\n    result.expanded = getAriaExpanded(element);\n  if (kAriaLevelRoles.includes(role))\n    result.level = getAriaLevel(element);\n  if (kAriaPressedRoles.includes(role))\n    result.pressed = getAriaPressed(element);\n  if (kAriaSelectedRoles.includes(role))\n    result.selected = getAriaSelected(element);\n  if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n    if (element.type !== "checkbox" && element.type !== "radio")\n      result.children = [element.value];\n  }\n  return result;\n}\nfunction normalizeStringChildren(rootA11yNode) {\n  const flushChildren = (buffer, normalizedChildren) => {\n    if (!buffer.length)\n      return;\n    const text = normalizeWhiteSpace(buffer.join(""));\n    if (text)\n      normalizedChildren.push(text);\n    buffer.length = 0;\n  };\n  const visit = (ariaNode) => {\n    const normalizedChildren = [];\n    const buffer = [];\n    for (const child of ariaNode.children || []) {\n      if (typeof child === "string") {\n        buffer.push(child);\n      } else {\n        flushChildren(buffer, normalizedChildren);\n        visit(child);\n        normalizedChildren.push(child);\n      }\n    }\n    flushChildren(buffer, normalizedChildren);\n    ariaNode.children = normalizedChildren.length ? normalizedChildren : [];\n    if (ariaNode.children.length === 1 && ariaNode.children[0] === ariaNode.name)\n      ariaNode.children = [];\n  };\n  visit(rootA11yNode);\n}\nfunction matchesText(text, template) {\n  if (!template)\n    return true;\n  if (!text)\n    return false;\n  if (typeof template === "string")\n    return text === template;\n  return !!text.match(new RegExp(template.pattern));\n}\nfunction matchesTextNode(text, template) {\n  return matchesText(text, template.text);\n}\nfunction matchesName(text, template) {\n  return matchesText(text, template.name);\n}\nfunction matchesAriaTree(rootElement, template) {\n  const root = generateAriaTree(rootElement).root;\n  const matches = matchesNodeDeep(root, template, false);\n  return {\n    matches,\n    received: {\n      raw: renderAriaTree(root, { mode: "raw" }),\n      regex: renderAriaTree(root, { mode: "regex" })\n    }\n  };\n}\nfunction getAllByAria(rootElement, template) {\n  const root = generateAriaTree(rootElement).root;\n  const matches = matchesNodeDeep(root, template, true);\n  return matches.map((n) => n.element);\n}\nfunction matchesNode(node, template, depth) {\n  if (typeof node === "string" && template.kind === "text")\n    return matchesTextNode(node, template);\n  if (node !== null && typeof node === "object" && template.kind === "role") {\n    if (template.role !== "fragment" && template.role !== node.role)\n      return false;\n    if (template.checked !== void 0 && template.checked !== node.checked)\n      return false;\n    if (template.disabled !== void 0 && template.disabled !== node.disabled)\n      return false;\n    if (template.expanded !== void 0 && template.expanded !== node.expanded)\n      return false;\n    if (template.level !== void 0 && template.level !== node.level)\n      return false;\n    if (template.pressed !== void 0 && template.pressed !== node.pressed)\n      return false;\n    if (template.selected !== void 0 && template.selected !== node.selected)\n      return false;\n    if (!matchesName(node.name, template))\n      return false;\n    if (!containsList(node.children || [], template.children || [], depth))\n      return false;\n    return true;\n  }\n  return false;\n}\nfunction containsList(children, template, depth) {\n  if (template.length > children.length)\n    return false;\n  const cc = children.slice();\n  const tt = template.slice();\n  for (const t of tt) {\n    let c = cc.shift();\n    while (c) {\n      if (matchesNode(c, t, depth + 1))\n        break;\n      c = cc.shift();\n    }\n    if (!c)\n      return false;\n  }\n  return true;\n}\nfunction matchesNodeDeep(root, template, collectAll) {\n  const results = [];\n  const visit = (node, parent) => {\n    if (matchesNode(node, template, 0)) {\n      const result = typeof node === "string" ? parent : node;\n      if (result)\n        results.push(result);\n      return !collectAll;\n    }\n    if (typeof node === "string")\n      return false;\n    for (const child of node.children || []) {\n      if (visit(child, node))\n        return true;\n    }\n    return false;\n  };\n  visit(root, null);\n  return results;\n}\nfunction renderAriaTree(ariaNode, options) {\n  const lines = [];\n  const includeText = (options == null ? void 0 : options.mode) === "regex" ? textContributesInfo : () => true;\n  const renderString = (options == null ? void 0 : options.mode) === "regex" ? convertToBestGuessRegex : (str) => str;\n  const visit = (ariaNode2, parentAriaNode, indent) => {\n    if (typeof ariaNode2 === "string") {\n      if (parentAriaNode && !includeText(parentAriaNode, ariaNode2))\n        return;\n      const text = yamlEscapeValueIfNeeded(renderString(ariaNode2));\n      if (text)\n        lines.push(indent + "- text: " + text);\n      return;\n    }\n    let key = ariaNode2.role;\n    if (ariaNode2.name && ariaNode2.name.length <= 900) {\n      const name = renderString(ariaNode2.name);\n      if (name) {\n        const stringifiedName = name.startsWith("/") && name.endsWith("/") ? name : JSON.stringify(name);\n        key += " " + stringifiedName;\n      }\n    }\n    if (ariaNode2.checked === "mixed")\n      key += ` [checked=mixed]`;\n    if (ariaNode2.checked === true)\n      key += ` [checked]`;\n    if (ariaNode2.disabled)\n      key += ` [disabled]`;\n    if (ariaNode2.expanded)\n      key += ` [expanded]`;\n    if (ariaNode2.level)\n      key += ` [level=${ariaNode2.level}]`;\n    if (ariaNode2.pressed === "mixed")\n      key += ` [pressed=mixed]`;\n    if (ariaNode2.pressed === true)\n      key += ` [pressed]`;\n    if (ariaNode2.selected === true)\n      key += ` [selected]`;\n    if (options == null ? void 0 : options.ids) {\n      const id = options == null ? void 0 : options.ids.get(ariaNode2.element);\n      if (id)\n        key += ` [id=${id}]`;\n    }\n    const escapedKey = indent + "- " + yamlEscapeKeyIfNeeded(key);\n    if (!ariaNode2.children.length) {\n      lines.push(escapedKey);\n    } else if (ariaNode2.children.length === 1 && typeof ariaNode2.children[0] === "string") {\n      const text = includeText(ariaNode2, ariaNode2.children[0]) ? renderString(ariaNode2.children[0]) : null;\n      if (text)\n        lines.push(escapedKey + ": " + yamlEscapeValueIfNeeded(text));\n      else\n        lines.push(escapedKey);\n    } else {\n      lines.push(escapedKey + ":");\n      for (const child of ariaNode2.children || [])\n        visit(child, ariaNode2, indent + "  ");\n    }\n  };\n  if (ariaNode.role === "fragment") {\n    for (const child of ariaNode.children || [])\n      visit(child, ariaNode, "");\n  } else {\n    visit(ariaNode, null, "");\n  }\n  return lines.join("\\n");\n}\nfunction convertToBestGuessRegex(text) {\n  const dynamicContent = [\n    // 2mb\n    { regex: /\\b[\\d,.]+[bkmBKM]+\\b/, replacement: "[\\\\d,.]+[bkmBKM]+" },\n    // 2ms, 20s\n    { regex: /\\b\\d+[hmsp]+\\b/, replacement: "\\\\d+[hmsp]+" },\n    { regex: /\\b[\\d,.]+[hmsp]+\\b/, replacement: "[\\\\d,.]+[hmsp]+" },\n    // Do not replace single digits with regex by default.\n    // 2+ digits: [Issue 22, 22.3, 2.33, 2,333]\n    { regex: /\\b\\d+,\\d+\\b/, replacement: "\\\\d+,\\\\d+" },\n    { regex: /\\b\\d+\\.\\d{2,}\\b/, replacement: "\\\\d+\\\\.\\\\d+" },\n    { regex: /\\b\\d{2,}\\.\\d+\\b/, replacement: "\\\\d+\\\\.\\\\d+" },\n    { regex: /\\b\\d{2,}\\b/, replacement: "\\\\d+" }\n  ];\n  let pattern = "";\n  let lastIndex = 0;\n  const combinedRegex = new RegExp(dynamicContent.map((r) => "(" + r.regex.source + ")").join("|"), "g");\n  text.replace(combinedRegex, (match, ...args) => {\n    const offset = args[args.length - 2];\n    const groups = args.slice(0, -2);\n    pattern += escapeRegExp(text.slice(lastIndex, offset));\n    for (let i = 0; i < groups.length; i++) {\n      if (groups[i]) {\n        const { replacement } = dynamicContent[i];\n        pattern += replacement;\n        break;\n      }\n    }\n    lastIndex = offset + match.length;\n    return match;\n  });\n  if (!pattern)\n    return text;\n  pattern += escapeRegExp(text.slice(lastIndex));\n  return String(new RegExp(pattern));\n}\nfunction textContributesInfo(node, text) {\n  if (!text.length)\n    return false;\n  if (!node.name)\n    return true;\n  if (node.name.length > text.length)\n    return false;\n  const substr = text.length <= 200 && node.name.length <= 200 ? longestCommonSubstring(text, node.name) : "";\n  let filtered = text;\n  while (substr && filtered.includes(substr))\n    filtered = filtered.replace(substr, "");\n  return filtered.trim().length / text.length > 0.1;\n}\n\n// packages/playwright-core/src/server/injected/highlight.css?inline\nvar highlight_default = ":host{font-size:13px;font-family:system-ui,Ubuntu,Droid Sans,sans-serif;color:#333}svg{position:absolute;height:0}x-pw-tooltip{backdrop-filter:blur(5px);background-color:#fff;border-radius:6px;box-shadow:0 .5rem 1.2rem #0000004d;display:none;font-size:12.8px;font-weight:400;left:0;line-height:1.5;max-width:600px;position:absolute;top:0;padding:0;flex-direction:column;overflow:hidden}x-pw-tooltip-line{display:flex;max-width:600px;padding:6px;user-select:none;cursor:pointer}x-pw-tooltip-line.selectable:hover{background-color:#f2f2f2;overflow:hidden}x-pw-tooltip-footer{display:flex;max-width:600px;padding:6px;user-select:none;color:#777}x-pw-dialog{background-color:#fff;pointer-events:auto;border-radius:6px;box-shadow:0 .5rem 1.2rem #0000004d;display:flex;flex-direction:column;position:absolute;width:400px;height:150px;z-index:10;font-size:13px}x-pw-dialog-body{display:flex;flex-direction:column;flex:auto}x-pw-dialog-body label{margin:5px 8px;display:flex;flex-direction:row;align-items:center}x-pw-highlight{position:absolute;top:0;left:0;width:0;height:0}x-pw-action-point{position:absolute;width:20px;height:20px;background:red;border-radius:10px;margin:-10px 0 0 -10px;z-index:2}x-pw-separator{height:1px;margin:6px 9px;background:#949494e5}x-pw-tool-gripper{height:28px;width:24px;margin:2px 0;cursor:grab}x-pw-tool-gripper:active{cursor:grabbing}x-pw-tool-gripper>x-div{width:16px;height:16px;margin:6px 4px;clip-path:url(#icon-gripper);background-color:#555}x-pw-tools-list>label{display:flex;align-items:center;margin:0 10px;user-select:none}x-pw-tools-list{display:flex;width:100%;border-bottom:1px solid #dddddd}x-pw-tool-item{pointer-events:auto;height:28px;width:28px;border-radius:3px}x-pw-tool-item:not(.disabled){cursor:pointer}x-pw-tool-item:not(.disabled):hover{background-color:#dbdbdb}x-pw-tool-item.toggled{background-color:#8acae480}x-pw-tool-item.toggled:not(.disabled):hover{background-color:#8acae4c4}x-pw-tool-item>x-div{width:16px;height:16px;margin:6px;background-color:#3a3a3a}x-pw-tool-item.disabled>x-div{background-color:#61616180;cursor:default}x-pw-tool-item.record.toggled{background-color:transparent}x-pw-tool-item.record.toggled:not(.disabled):hover{background-color:#dbdbdb}x-pw-tool-item.record.toggled>x-div{background-color:#a1260d}x-pw-tool-item.record.disabled.toggled>x-div{opacity:.8}x-pw-tool-item.accept>x-div{background-color:#388a34}x-pw-tool-item.record>x-div{clip-path:url(#icon-circle-large-filled)}x-pw-tool-item.pick-locator>x-div{clip-path:url(#icon-inspect)}x-pw-tool-item.text>x-div{clip-path:url(#icon-whole-word)}x-pw-tool-item.visibility>x-div{clip-path:url(#icon-eye)}x-pw-tool-item.value>x-div{clip-path:url(#icon-symbol-constant)}x-pw-tool-item.snapshot>x-div{clip-path:url(#icon-gist)}x-pw-tool-item.accept>x-div{clip-path:url(#icon-check)}x-pw-tool-item.cancel>x-div{clip-path:url(#icon-close)}x-pw-tool-item.succeeded>x-div{clip-path:url(#icon-pass);background-color:#388a34!important}x-pw-overlay{position:absolute;top:0;max-width:min-content;z-index:2147483647;background:transparent;pointer-events:auto}x-pw-overlay x-pw-tools-list{background-color:#fffd;box-shadow:#0000001a 0 5px 5px;border-radius:3px;border-bottom:none}x-pw-overlay x-pw-tool-item{margin:2px}textarea.text-editor{font-family:system-ui,Ubuntu,Droid Sans,sans-serif;flex:auto;border:none;margin:6px 10px;color:#333;outline:1px solid transparent!important;resize:none;padding:0;font-size:13px}textarea.text-editor.does-not-match{outline:1px solid red!important}x-div{display:block}x-spacer{flex:auto}*{box-sizing:border-box}*[hidden]{display:none!important}x-locator-editor{flex:none;width:100%;height:60px;padding:4px;border-bottom:1px solid #dddddd;outline:1px solid transparent}x-locator-editor.does-not-match{outline:1px solid red}.CodeMirror{width:100%!important;height:100%!important}\\n";\n\n// packages/playwright-core/src/utils/isomorphic/cssTokenizer.ts\nvar between = function(num, first, last) {\n  return num >= first && num <= last;\n};\nfunction digit(code) {\n  return between(code, 48, 57);\n}\nfunction hexdigit(code) {\n  return digit(code) || between(code, 65, 70) || between(code, 97, 102);\n}\nfunction uppercaseletter(code) {\n  return between(code, 65, 90);\n}\nfunction lowercaseletter(code) {\n  return between(code, 97, 122);\n}\nfunction letter(code) {\n  return uppercaseletter(code) || lowercaseletter(code);\n}\nfunction nonascii(code) {\n  return code >= 128;\n}\nfunction namestartchar(code) {\n  return letter(code) || nonascii(code) || code === 95;\n}\nfunction namechar(code) {\n  return namestartchar(code) || digit(code) || code === 45;\n}\nfunction nonprintable(code) {\n  return between(code, 0, 8) || code === 11 || between(code, 14, 31) || code === 127;\n}\nfunction newline(code) {\n  return code === 10;\n}\nfunction whitespace(code) {\n  return newline(code) || code === 9 || code === 32;\n}\nvar maximumallowedcodepoint = 1114111;\nvar InvalidCharacterError = class extends Error {\n  constructor(message) {\n    super(message);\n    this.name = "InvalidCharacterError";\n  }\n};\nfunction preprocess(str) {\n  const codepoints = [];\n  for (let i = 0; i < str.length; i++) {\n    let code = str.charCodeAt(i);\n    if (code === 13 && str.charCodeAt(i + 1) === 10) {\n      code = 10;\n      i++;\n    }\n    if (code === 13 || code === 12)\n      code = 10;\n    if (code === 0)\n      code = 65533;\n    if (between(code, 55296, 56319) && between(str.charCodeAt(i + 1), 56320, 57343)) {\n      const lead = code - 55296;\n      const trail = str.charCodeAt(i + 1) - 56320;\n      code = Math.pow(2, 16) + lead * Math.pow(2, 10) + trail;\n      i++;\n    }\n    codepoints.push(code);\n  }\n  return codepoints;\n}\nfunction stringFromCode(code) {\n  if (code <= 65535)\n    return String.fromCharCode(code);\n  code -= Math.pow(2, 16);\n  const lead = Math.floor(code / Math.pow(2, 10)) + 55296;\n  const trail = code % Math.pow(2, 10) + 56320;\n  return String.fromCharCode(lead) + String.fromCharCode(trail);\n}\nfunction tokenize(str1) {\n  const str = preprocess(str1);\n  let i = -1;\n  const tokens = [];\n  let code;\n  let line = 0;\n  let column = 0;\n  let lastLineLength = 0;\n  const incrLineno = function() {\n    line += 1;\n    lastLineLength = column;\n    column = 0;\n  };\n  const locStart = { line, column };\n  const codepoint = function(i2) {\n    if (i2 >= str.length)\n      return -1;\n    return str[i2];\n  };\n  const next = function(num) {\n    if (num === void 0)\n      num = 1;\n    if (num > 3)\n      throw "Spec Error: no more than three codepoints of lookahead.";\n    return codepoint(i + num);\n  };\n  const consume = function(num) {\n    if (num === void 0)\n      num = 1;\n    i += num;\n    code = codepoint(i);\n    if (newline(code))\n      incrLineno();\n    else\n      column += num;\n    return true;\n  };\n  const reconsume = function() {\n    i -= 1;\n    if (newline(code)) {\n      line -= 1;\n      column = lastLineLength;\n    } else {\n      column -= 1;\n    }\n    locStart.line = line;\n    locStart.column = column;\n    return true;\n  };\n  const eof = function(codepoint2) {\n    if (codepoint2 === void 0)\n      codepoint2 = code;\n    return codepoint2 === -1;\n  };\n  const donothing = function() {\n  };\n  const parseerror = function() {\n  };\n  const consumeAToken = function() {\n    consumeComments();\n    consume();\n    if (whitespace(code)) {\n      while (whitespace(next()))\n        consume();\n      return new WhitespaceToken();\n    } else if (code === 34) {\n      return consumeAStringToken();\n    } else if (code === 35) {\n      if (namechar(next()) || areAValidEscape(next(1), next(2))) {\n        const token = new HashToken("");\n        if (wouldStartAnIdentifier(next(1), next(2), next(3)))\n          token.type = "id";\n        token.value = consumeAName();\n        return token;\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 36) {\n      if (next() === 61) {\n        consume();\n        return new SuffixMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 39) {\n      return consumeAStringToken();\n    } else if (code === 40) {\n      return new OpenParenToken();\n    } else if (code === 41) {\n      return new CloseParenToken();\n    } else if (code === 42) {\n      if (next() === 61) {\n        consume();\n        return new SubstringMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 43) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 44) {\n      return new CommaToken();\n    } else if (code === 45) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else if (next(1) === 45 && next(2) === 62) {\n        consume(2);\n        return new CDCToken();\n      } else if (startsWithAnIdentifier()) {\n        reconsume();\n        return consumeAnIdentlikeToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 46) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 58) {\n      return new ColonToken();\n    } else if (code === 59) {\n      return new SemicolonToken();\n    } else if (code === 60) {\n      if (next(1) === 33 && next(2) === 45 && next(3) === 45) {\n        consume(3);\n        return new CDOToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 64) {\n      if (wouldStartAnIdentifier(next(1), next(2), next(3)))\n        return new AtKeywordToken(consumeAName());\n      else\n        return new DelimToken(code);\n    } else if (code === 91) {\n      return new OpenSquareToken();\n    } else if (code === 92) {\n      if (startsWithAValidEscape()) {\n        reconsume();\n        return consumeAnIdentlikeToken();\n      } else {\n        parseerror();\n        return new DelimToken(code);\n      }\n    } else if (code === 93) {\n      return new CloseSquareToken();\n    } else if (code === 94) {\n      if (next() === 61) {\n        consume();\n        return new PrefixMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 123) {\n      return new OpenCurlyToken();\n    } else if (code === 124) {\n      if (next() === 61) {\n        consume();\n        return new DashMatchToken();\n      } else if (next() === 124) {\n        consume();\n        return new ColumnToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 125) {\n      return new CloseCurlyToken();\n    } else if (code === 126) {\n      if (next() === 61) {\n        consume();\n        return new IncludeMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (digit(code)) {\n      reconsume();\n      return consumeANumericToken();\n    } else if (namestartchar(code)) {\n      reconsume();\n      return consumeAnIdentlikeToken();\n    } else if (eof()) {\n      return new EOFToken();\n    } else {\n      return new DelimToken(code);\n    }\n  };\n  const consumeComments = function() {\n    while (next(1) === 47 && next(2) === 42) {\n      consume(2);\n      while (true) {\n        consume();\n        if (code === 42 && next() === 47) {\n          consume();\n          break;\n        } else if (eof()) {\n          parseerror();\n          return;\n        }\n      }\n    }\n  };\n  const consumeANumericToken = function() {\n    const num = consumeANumber();\n    if (wouldStartAnIdentifier(next(1), next(2), next(3))) {\n      const token = new DimensionToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      token.type = num.type;\n      token.unit = consumeAName();\n      return token;\n    } else if (next() === 37) {\n      consume();\n      const token = new PercentageToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      return token;\n    } else {\n      const token = new NumberToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      token.type = num.type;\n      return token;\n    }\n  };\n  const consumeAnIdentlikeToken = function() {\n    const str2 = consumeAName();\n    if (str2.toLowerCase() === "url" && next() === 40) {\n      consume();\n      while (whitespace(next(1)) && whitespace(next(2)))\n        consume();\n      if (next() === 34 || next() === 39)\n        return new FunctionToken(str2);\n      else if (whitespace(next()) && (next(2) === 34 || next(2) === 39))\n        return new FunctionToken(str2);\n      else\n        return consumeAURLToken();\n    } else if (next() === 40) {\n      consume();\n      return new FunctionToken(str2);\n    } else {\n      return new IdentToken(str2);\n    }\n  };\n  const consumeAStringToken = function(endingCodePoint) {\n    if (endingCodePoint === void 0)\n      endingCodePoint = code;\n    let string = "";\n    while (consume()) {\n      if (code === endingCodePoint || eof()) {\n        return new StringToken(string);\n      } else if (newline(code)) {\n        parseerror();\n        reconsume();\n        return new BadStringToken();\n      } else if (code === 92) {\n        if (eof(next()))\n          donothing();\n        else if (newline(next()))\n          consume();\n        else\n          string += stringFromCode(consumeEscape());\n      } else {\n        string += stringFromCode(code);\n      }\n    }\n    throw new Error("Internal error");\n  };\n  const consumeAURLToken = function() {\n    const token = new URLToken("");\n    while (whitespace(next()))\n      consume();\n    if (eof(next()))\n      return token;\n    while (consume()) {\n      if (code === 41 || eof()) {\n        return token;\n      } else if (whitespace(code)) {\n        while (whitespace(next()))\n          consume();\n        if (next() === 41 || eof(next())) {\n          consume();\n          return token;\n        } else {\n          consumeTheRemnantsOfABadURL();\n          return new BadURLToken();\n        }\n      } else if (code === 34 || code === 39 || code === 40 || nonprintable(code)) {\n        parseerror();\n        consumeTheRemnantsOfABadURL();\n        return new BadURLToken();\n      } else if (code === 92) {\n        if (startsWithAValidEscape()) {\n          token.value += stringFromCode(consumeEscape());\n        } else {\n          parseerror();\n          consumeTheRemnantsOfABadURL();\n          return new BadURLToken();\n        }\n      } else {\n        token.value += stringFromCode(code);\n      }\n    }\n    throw new Error("Internal error");\n  };\n  const consumeEscape = function() {\n    consume();\n    if (hexdigit(code)) {\n      const digits = [code];\n      for (let total = 0; total < 5; total++) {\n        if (hexdigit(next())) {\n          consume();\n          digits.push(code);\n        } else {\n          break;\n        }\n      }\n      if (whitespace(next()))\n        consume();\n      let value = parseInt(digits.map(function(x) {\n        return String.fromCharCode(x);\n      }).join(""), 16);\n      if (value > maximumallowedcodepoint)\n        value = 65533;\n      return value;\n    } else if (eof()) {\n      return 65533;\n    } else {\n      return code;\n    }\n  };\n  const areAValidEscape = function(c1, c2) {\n    if (c1 !== 92)\n      return false;\n    if (newline(c2))\n      return false;\n    return true;\n  };\n  const startsWithAValidEscape = function() {\n    return areAValidEscape(code, next());\n  };\n  const wouldStartAnIdentifier = function(c1, c2, c3) {\n    if (c1 === 45)\n      return namestartchar(c2) || c2 === 45 || areAValidEscape(c2, c3);\n    else if (namestartchar(c1))\n      return true;\n    else if (c1 === 92)\n      return areAValidEscape(c1, c2);\n    else\n      return false;\n  };\n  const startsWithAnIdentifier = function() {\n    return wouldStartAnIdentifier(code, next(1), next(2));\n  };\n  const wouldStartANumber = function(c1, c2, c3) {\n    if (c1 === 43 || c1 === 45) {\n      if (digit(c2))\n        return true;\n      if (c2 === 46 && digit(c3))\n        return true;\n      return false;\n    } else if (c1 === 46) {\n      if (digit(c2))\n        return true;\n      return false;\n    } else if (digit(c1)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  const startsWithANumber = function() {\n    return wouldStartANumber(code, next(1), next(2));\n  };\n  const consumeAName = function() {\n    let result = "";\n    while (consume()) {\n      if (namechar(code)) {\n        result += stringFromCode(code);\n      } else if (startsWithAValidEscape()) {\n        result += stringFromCode(consumeEscape());\n      } else {\n        reconsume();\n        return result;\n      }\n    }\n    throw new Error("Internal parse error");\n  };\n  const consumeANumber = function() {\n    let repr = "";\n    let type = "integer";\n    if (next() === 43 || next() === 45) {\n      consume();\n      repr += stringFromCode(code);\n    }\n    while (digit(next())) {\n      consume();\n      repr += stringFromCode(code);\n    }\n    if (next(1) === 46 && digit(next(2))) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = "number";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    }\n    const c1 = next(1), c2 = next(2), c3 = next(3);\n    if ((c1 === 69 || c1 === 101) && digit(c2)) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = "number";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    } else if ((c1 === 69 || c1 === 101) && (c2 === 43 || c2 === 45) && digit(c3)) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = "number";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    }\n    const value = convertAStringToANumber(repr);\n    return { type, value, repr };\n  };\n  const convertAStringToANumber = function(string) {\n    return +string;\n  };\n  const consumeTheRemnantsOfABadURL = function() {\n    while (consume()) {\n      if (code === 41 || eof()) {\n        return;\n      } else if (startsWithAValidEscape()) {\n        consumeEscape();\n        donothing();\n      } else {\n        donothing();\n      }\n    }\n  };\n  let iterationCount = 0;\n  while (!eof(next())) {\n    tokens.push(consumeAToken());\n    iterationCount++;\n    if (iterationCount > str.length * 2)\n      throw new Error("I\'m infinite-looping!");\n  }\n  return tokens;\n}\nvar CSSParserToken = class {\n  constructor() {\n    this.tokenType = "";\n  }\n  toJSON() {\n    return { token: this.tokenType };\n  }\n  toString() {\n    return this.tokenType;\n  }\n  toSource() {\n    return "" + this;\n  }\n};\nvar BadStringToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "BADSTRING";\n  }\n};\nvar BadURLToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "BADURL";\n  }\n};\nvar WhitespaceToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "WHITESPACE";\n  }\n  toString() {\n    return "WS";\n  }\n  toSource() {\n    return " ";\n  }\n};\nvar CDOToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "CDO";\n  }\n  toSource() {\n    return "<!--";\n  }\n};\nvar CDCToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "CDC";\n  }\n  toSource() {\n    return "-->";\n  }\n};\nvar ColonToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = ":";\n  }\n};\nvar SemicolonToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = ";";\n  }\n};\nvar CommaToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = ",";\n  }\n};\nvar GroupingToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.value = "";\n    this.mirror = "";\n  }\n};\nvar OpenCurlyToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "{";\n    this.value = "{";\n    this.mirror = "}";\n  }\n};\nvar CloseCurlyToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "}";\n    this.value = "}";\n    this.mirror = "{";\n  }\n};\nvar OpenSquareToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "[";\n    this.value = "[";\n    this.mirror = "]";\n  }\n};\nvar CloseSquareToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "]";\n    this.value = "]";\n    this.mirror = "[";\n  }\n};\nvar OpenParenToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "(";\n    this.value = "(";\n    this.mirror = ")";\n  }\n};\nvar CloseParenToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = ")";\n    this.value = ")";\n    this.mirror = "(";\n  }\n};\nvar IncludeMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "~=";\n  }\n};\nvar DashMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "|=";\n  }\n};\nvar PrefixMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "^=";\n  }\n};\nvar SuffixMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "$=";\n  }\n};\nvar SubstringMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "*=";\n  }\n};\nvar ColumnToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "||";\n  }\n};\nvar EOFToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "EOF";\n  }\n  toSource() {\n    return "";\n  }\n};\nvar DelimToken = class extends CSSParserToken {\n  constructor(code) {\n    super();\n    this.tokenType = "DELIM";\n    this.value = "";\n    this.value = stringFromCode(code);\n  }\n  toString() {\n    return "DELIM(" + this.value + ")";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    return json;\n  }\n  toSource() {\n    if (this.value === "\\\\")\n      return "\\\\\\n";\n    else\n      return this.value;\n  }\n};\nvar StringValuedToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.value = "";\n  }\n  ASCIIMatch(str) {\n    return this.value.toLowerCase() === str.toLowerCase();\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    return json;\n  }\n};\nvar IdentToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "IDENT";\n    this.value = val;\n  }\n  toString() {\n    return "IDENT(" + this.value + ")";\n  }\n  toSource() {\n    return escapeIdent(this.value);\n  }\n};\nvar FunctionToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "FUNCTION";\n    this.value = val;\n    this.mirror = ")";\n  }\n  toString() {\n    return "FUNCTION(" + this.value + ")";\n  }\n  toSource() {\n    return escapeIdent(this.value) + "(";\n  }\n};\nvar AtKeywordToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "AT-KEYWORD";\n    this.value = val;\n  }\n  toString() {\n    return "AT(" + this.value + ")";\n  }\n  toSource() {\n    return "@" + escapeIdent(this.value);\n  }\n};\nvar HashToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "HASH";\n    this.value = val;\n    this.type = "unrestricted";\n  }\n  toString() {\n    return "HASH(" + this.value + ")";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.type = this.type;\n    return json;\n  }\n  toSource() {\n    if (this.type === "id")\n      return "#" + escapeIdent(this.value);\n    else\n      return "#" + escapeHash(this.value);\n  }\n};\nvar StringToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "STRING";\n    this.value = val;\n  }\n  toString() {\n    return \'"\' + escapeString(this.value) + \'"\';\n  }\n};\nvar URLToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "URL";\n    this.value = val;\n  }\n  toString() {\n    return "URL(" + this.value + ")";\n  }\n  toSource() {\n    return \'url("\' + escapeString(this.value) + \'")\';\n  }\n};\nvar NumberToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = "NUMBER";\n    this.type = "integer";\n    this.repr = "";\n  }\n  toString() {\n    if (this.type === "integer")\n      return "INT(" + this.value + ")";\n    return "NUMBER(" + this.value + ")";\n  }\n  toJSON() {\n    const json = super.toJSON();\n    json.value = this.value;\n    json.type = this.type;\n    json.repr = this.repr;\n    return json;\n  }\n  toSource() {\n    return this.repr;\n  }\n};\nvar PercentageToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = "PERCENTAGE";\n    this.repr = "";\n  }\n  toString() {\n    return "PERCENTAGE(" + this.value + ")";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.repr = this.repr;\n    return json;\n  }\n  toSource() {\n    return this.repr + "%";\n  }\n};\nvar DimensionToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = "DIMENSION";\n    this.type = "integer";\n    this.repr = "";\n    this.unit = "";\n  }\n  toString() {\n    return "DIM(" + this.value + "," + this.unit + ")";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.type = this.type;\n    json.repr = this.repr;\n    json.unit = this.unit;\n    return json;\n  }\n  toSource() {\n    const source = this.repr;\n    let unit = escapeIdent(this.unit);\n    if (unit[0].toLowerCase() === "e" && (unit[1] === "-" || between(unit.charCodeAt(1), 48, 57))) {\n      unit = "\\\\65 " + unit.slice(1, unit.length);\n    }\n    return source + unit;\n  }\n};\nfunction escapeIdent(string) {\n  string = "" + string;\n  let result = "";\n  const firstcode = string.charCodeAt(0);\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");\n    if (between(code, 1, 31) || code === 127 || i === 0 && between(code, 48, 57) || i === 1 && between(code, 48, 57) && firstcode === 45)\n      result += "\\\\" + code.toString(16) + " ";\n    else if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))\n      result += string[i];\n    else\n      result += "\\\\" + string[i];\n  }\n  return result;\n}\nfunction escapeHash(string) {\n  string = "" + string;\n  let result = "";\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");\n    if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))\n      result += string[i];\n    else\n      result += "\\\\" + code.toString(16) + " ";\n  }\n  return result;\n}\nfunction escapeString(string) {\n  string = "" + string;\n  let result = "";\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");\n    if (between(code, 1, 31) || code === 127)\n      result += "\\\\" + code.toString(16) + " ";\n    else if (code === 34 || code === 92)\n      result += "\\\\" + string[i];\n    else\n      result += string[i];\n  }\n  return result;\n}\n\n// packages/playwright-core/src/utils/isomorphic/cssParser.ts\nvar InvalidSelectorError = class extends Error {\n};\nfunction parseCSS(selector, customNames) {\n  let tokens;\n  try {\n    tokens = tokenize(selector);\n    if (!(tokens[tokens.length - 1] instanceof EOFToken))\n      tokens.push(new EOFToken());\n  } catch (e) {\n    const newMessage = e.message + ` while parsing css selector "${selector}". Did you mean to CSS.escape it?`;\n    const index = (e.stack || "").indexOf(e.message);\n    if (index !== -1)\n      e.stack = e.stack.substring(0, index) + newMessage + e.stack.substring(index + e.message.length);\n    e.message = newMessage;\n    throw e;\n  }\n  const unsupportedToken = tokens.find((token) => {\n    return token instanceof AtKeywordToken || token instanceof BadStringToken || token instanceof BadURLToken || token instanceof ColumnToken || token instanceof CDOToken || token instanceof CDCToken || token instanceof SemicolonToken || // TODO: Consider using these for something, e.g. to escape complex strings.\n    // For example :xpath{ (//div/bar[@attr="foo"])[2]/baz }\n    // Or this way :xpath( {complex-xpath-goes-here("hello")} )\n    token instanceof OpenCurlyToken || token instanceof CloseCurlyToken || // TODO: Consider treating these as strings?\n    token instanceof URLToken || token instanceof PercentageToken;\n  });\n  if (unsupportedToken)\n    throw new InvalidSelectorError(`Unsupported token "${unsupportedToken.toSource()}" while parsing css selector "${selector}". Did you mean to CSS.escape it?`);\n  let pos = 0;\n  const names = /* @__PURE__ */ new Set();\n  function unexpected() {\n    return new InvalidSelectorError(`Unexpected token "${tokens[pos].toSource()}" while parsing css selector "${selector}". Did you mean to CSS.escape it?`);\n  }\n  function skipWhitespace() {\n    while (tokens[pos] instanceof WhitespaceToken)\n      pos++;\n  }\n  function isIdent(p = pos) {\n    return tokens[p] instanceof IdentToken;\n  }\n  function isString(p = pos) {\n    return tokens[p] instanceof StringToken;\n  }\n  function isNumber(p = pos) {\n    return tokens[p] instanceof NumberToken;\n  }\n  function isComma(p = pos) {\n    return tokens[p] instanceof CommaToken;\n  }\n  function isOpenParen(p = pos) {\n    return tokens[p] instanceof OpenParenToken;\n  }\n  function isCloseParen(p = pos) {\n    return tokens[p] instanceof CloseParenToken;\n  }\n  function isFunction(p = pos) {\n    return tokens[p] instanceof FunctionToken;\n  }\n  function isStar(p = pos) {\n    return tokens[p] instanceof DelimToken && tokens[p].value === "*";\n  }\n  function isEOF(p = pos) {\n    return tokens[p] instanceof EOFToken;\n  }\n  function isClauseCombinator(p = pos) {\n    return tokens[p] instanceof DelimToken && [">", "+", "~"].includes(tokens[p].value);\n  }\n  function isSelectorClauseEnd(p = pos) {\n    return isComma(p) || isCloseParen(p) || isEOF(p) || isClauseCombinator(p) || tokens[p] instanceof WhitespaceToken;\n  }\n  function consumeFunctionArguments() {\n    const result2 = [consumeArgument()];\n    while (true) {\n      skipWhitespace();\n      if (!isComma())\n        break;\n      pos++;\n      result2.push(consumeArgument());\n    }\n    return result2;\n  }\n  function consumeArgument() {\n    skipWhitespace();\n    if (isNumber())\n      return tokens[pos++].value;\n    if (isString())\n      return tokens[pos++].value;\n    return consumeComplexSelector();\n  }\n  function consumeComplexSelector() {\n    const result2 = { simples: [] };\n    skipWhitespace();\n    if (isClauseCombinator()) {\n      result2.simples.push({ selector: { functions: [{ name: "scope", args: [] }] }, combinator: "" });\n    } else {\n      result2.simples.push({ selector: consumeSimpleSelector(), combinator: "" });\n    }\n    while (true) {\n      skipWhitespace();\n      if (isClauseCombinator()) {\n        result2.simples[result2.simples.length - 1].combinator = tokens[pos++].value;\n        skipWhitespace();\n      } else if (isSelectorClauseEnd()) {\n        break;\n      }\n      result2.simples.push({ combinator: "", selector: consumeSimpleSelector() });\n    }\n    return result2;\n  }\n  function consumeSimpleSelector() {\n    let rawCSSString = "";\n    const functions = [];\n    while (!isSelectorClauseEnd()) {\n      if (isIdent() || isStar()) {\n        rawCSSString += tokens[pos++].toSource();\n      } else if (tokens[pos] instanceof HashToken) {\n        rawCSSString += tokens[pos++].toSource();\n      } else if (tokens[pos] instanceof DelimToken && tokens[pos].value === ".") {\n        pos++;\n        if (isIdent())\n          rawCSSString += "." + tokens[pos++].toSource();\n        else\n          throw unexpected();\n      } else if (tokens[pos] instanceof ColonToken) {\n        pos++;\n        if (isIdent()) {\n          if (!customNames.has(tokens[pos].value.toLowerCase())) {\n            rawCSSString += ":" + tokens[pos++].toSource();\n          } else {\n            const name = tokens[pos++].value.toLowerCase();\n            functions.push({ name, args: [] });\n            names.add(name);\n          }\n        } else if (isFunction()) {\n          const name = tokens[pos++].value.toLowerCase();\n          if (!customNames.has(name)) {\n            rawCSSString += `:${name}(${consumeBuiltinFunctionArguments()})`;\n          } else {\n            functions.push({ name, args: consumeFunctionArguments() });\n            names.add(name);\n          }\n          skipWhitespace();\n          if (!isCloseParen())\n            throw unexpected();\n          pos++;\n        } else {\n          throw unexpected();\n        }\n      } else if (tokens[pos] instanceof OpenSquareToken) {\n        rawCSSString += "[";\n        pos++;\n        while (!(tokens[pos] instanceof CloseSquareToken) && !isEOF())\n          rawCSSString += tokens[pos++].toSource();\n        if (!(tokens[pos] instanceof CloseSquareToken))\n          throw unexpected();\n        rawCSSString += "]";\n        pos++;\n      } else {\n        throw unexpected();\n      }\n    }\n    if (!rawCSSString && !functions.length)\n      throw unexpected();\n    return { css: rawCSSString || void 0, functions };\n  }\n  function consumeBuiltinFunctionArguments() {\n    let s = "";\n    let balance = 1;\n    while (!isEOF()) {\n      if (isOpenParen() || isFunction())\n        balance++;\n      if (isCloseParen())\n        balance--;\n      if (!balance)\n        break;\n      s += tokens[pos++].toSource();\n    }\n    return s;\n  }\n  const result = consumeFunctionArguments();\n  if (!isEOF())\n    throw unexpected();\n  if (result.some((arg) => typeof arg !== "object" || !("simples" in arg)))\n    throw new InvalidSelectorError(`Error while parsing css selector "${selector}". Did you mean to CSS.escape it?`);\n  return { selector: result, names: Array.from(names) };\n}\n\n// packages/playwright-core/src/utils/isomorphic/selectorParser.ts\nvar kNestedSelectorNames = /* @__PURE__ */ new Set(["internal:has", "internal:has-not", "internal:and", "internal:or", "internal:chain", "left-of", "right-of", "above", "below", "near"]);\nvar kNestedSelectorNamesWithDistance = /* @__PURE__ */ new Set(["left-of", "right-of", "above", "below", "near"]);\nvar customCSSNames = /* @__PURE__ */ new Set(["not", "is", "where", "has", "scope", "light", "visible", "text", "text-matches", "text-is", "has-text", "above", "below", "right-of", "left-of", "near", "nth-match"]);\nfunction parseSelector(selector) {\n  const parsedStrings = parseSelectorString(selector);\n  const parts = [];\n  for (const part of parsedStrings.parts) {\n    if (part.name === "css" || part.name === "css:light") {\n      if (part.name === "css:light")\n        part.body = ":light(" + part.body + ")";\n      const parsedCSS = parseCSS(part.body, customCSSNames);\n      parts.push({\n        name: "css",\n        body: parsedCSS.selector,\n        source: part.body\n      });\n      continue;\n    }\n    if (kNestedSelectorNames.has(part.name)) {\n      let innerSelector;\n      let distance;\n      try {\n        const unescaped = JSON.parse("[" + part.body + "]");\n        if (!Array.isArray(unescaped) || unescaped.length < 1 || unescaped.length > 2 || typeof unescaped[0] !== "string")\n          throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n        innerSelector = unescaped[0];\n        if (unescaped.length === 2) {\n          if (typeof unescaped[1] !== "number" || !kNestedSelectorNamesWithDistance.has(part.name))\n            throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n          distance = unescaped[1];\n        }\n      } catch (e) {\n        throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n      }\n      const nested = { name: part.name, source: part.body, body: { parsed: parseSelector(innerSelector), distance } };\n      const lastFrame = [...nested.body.parsed.parts].reverse().find((part2) => part2.name === "internal:control" && part2.body === "enter-frame");\n      const lastFrameIndex = lastFrame ? nested.body.parsed.parts.indexOf(lastFrame) : -1;\n      if (lastFrameIndex !== -1 && selectorPartsEqual(nested.body.parsed.parts.slice(0, lastFrameIndex + 1), parts.slice(0, lastFrameIndex + 1)))\n        nested.body.parsed.parts.splice(0, lastFrameIndex + 1);\n      parts.push(nested);\n      continue;\n    }\n    parts.push({ ...part, source: part.body });\n  }\n  if (kNestedSelectorNames.has(parts[0].name))\n    throw new InvalidSelectorError(`"${parts[0].name}" selector cannot be first`);\n  return {\n    capture: parsedStrings.capture,\n    parts\n  };\n}\nfunction selectorPartsEqual(list1, list2) {\n  return stringifySelector({ parts: list1 }) === stringifySelector({ parts: list2 });\n}\nfunction stringifySelector(selector, forceEngineName) {\n  if (typeof selector === "string")\n    return selector;\n  return selector.parts.map((p, i) => {\n    let includeEngine = true;\n    if (!forceEngineName && i !== selector.capture) {\n      if (p.name === "css")\n        includeEngine = false;\n      else if (p.name === "xpath" && p.source.startsWith("//") || p.source.startsWith(".."))\n        includeEngine = false;\n    }\n    const prefix = includeEngine ? p.name + "=" : "";\n    return `${i === selector.capture ? "*" : ""}${prefix}${p.source}`;\n  }).join(" >> ");\n}\nfunction visitAllSelectorParts(selector, visitor) {\n  const visit = (selector2, nested) => {\n    for (const part of selector2.parts) {\n      visitor(part, nested);\n      if (kNestedSelectorNames.has(part.name))\n        visit(part.body.parsed, true);\n    }\n  };\n  visit(selector, false);\n}\nfunction parseSelectorString(selector) {\n  let index = 0;\n  let quote;\n  let start = 0;\n  const result = { parts: [] };\n  const append = () => {\n    const part = selector.substring(start, index).trim();\n    const eqIndex = part.indexOf("=");\n    let name;\n    let body;\n    if (eqIndex !== -1 && part.substring(0, eqIndex).trim().match(/^[a-zA-Z_0-9-+:*]+$/)) {\n      name = part.substring(0, eqIndex).trim();\n      body = part.substring(eqIndex + 1);\n    } else if (part.length > 1 && part[0] === \'"\' && part[part.length - 1] === \'"\') {\n      name = "text";\n      body = part;\n    } else if (part.length > 1 && part[0] === "\'" && part[part.length - 1] === "\'") {\n      name = "text";\n      body = part;\n    } else if (/^\\(*\\/\\//.test(part) || part.startsWith("..")) {\n      name = "xpath";\n      body = part;\n    } else {\n      name = "css";\n      body = part;\n    }\n    let capture = false;\n    if (name[0] === "*") {\n      capture = true;\n      name = name.substring(1);\n    }\n    result.parts.push({ name, body });\n    if (capture) {\n      if (result.capture !== void 0)\n        throw new InvalidSelectorError(`Only one of the selectors can capture using * modifier`);\n      result.capture = result.parts.length - 1;\n    }\n  };\n  if (!selector.includes(">>")) {\n    index = selector.length;\n    append();\n    return result;\n  }\n  const shouldIgnoreTextSelectorQuote = () => {\n    const prefix = selector.substring(start, index);\n    const match = prefix.match(/^\\s*text\\s*=(.*)$/);\n    return !!match && !!match[1];\n  };\n  while (index < selector.length) {\n    const c = selector[index];\n    if (c === "\\\\" && index + 1 < selector.length) {\n      index += 2;\n    } else if (c === quote) {\n      quote = void 0;\n      index++;\n    } else if (!quote && (c === \'"\' || c === "\'" || c === "`") && !shouldIgnoreTextSelectorQuote()) {\n      quote = c;\n      index++;\n    } else if (!quote && c === ">" && selector[index + 1] === ">") {\n      append();\n      index += 2;\n      start = index;\n    } else {\n      index++;\n    }\n  }\n  append();\n  return result;\n}\nfunction parseAttributeSelector(selector, allowUnquotedStrings) {\n  let wp = 0;\n  let EOL = selector.length === 0;\n  const next = () => selector[wp] || "";\n  const eat1 = () => {\n    const result2 = next();\n    ++wp;\n    EOL = wp >= selector.length;\n    return result2;\n  };\n  const syntaxError = (stage) => {\n    if (EOL)\n      throw new InvalidSelectorError(`Unexpected end of selector while parsing selector \\`${selector}\\``);\n    throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - unexpected symbol "${next()}" at position ${wp}` + (stage ? " during " + stage : ""));\n  };\n  function skipSpaces() {\n    while (!EOL && /\\s/.test(next()))\n      eat1();\n  }\n  function isCSSNameChar(char) {\n    return char >= "\\x80" || char >= "0" && char <= "9" || char >= "A" && char <= "Z" || char >= "a" && char <= "z" || char >= "0" && char <= "9" || char === "_" || char === "-";\n  }\n  function readIdentifier() {\n    let result2 = "";\n    skipSpaces();\n    while (!EOL && isCSSNameChar(next()))\n      result2 += eat1();\n    return result2;\n  }\n  function readQuotedString(quote) {\n    let result2 = eat1();\n    if (result2 !== quote)\n      syntaxError("parsing quoted string");\n    while (!EOL && next() !== quote) {\n      if (next() === "\\\\")\n        eat1();\n      result2 += eat1();\n    }\n    if (next() !== quote)\n      syntaxError("parsing quoted string");\n    result2 += eat1();\n    return result2;\n  }\n  function readRegularExpression() {\n    if (eat1() !== "/")\n      syntaxError("parsing regular expression");\n    let source = "";\n    let inClass = false;\n    while (!EOL) {\n      if (next() === "\\\\") {\n        source += eat1();\n        if (EOL)\n          syntaxError("parsing regular expression");\n      } else if (inClass && next() === "]") {\n        inClass = false;\n      } else if (!inClass && next() === "[") {\n        inClass = true;\n      } else if (!inClass && next() === "/") {\n        break;\n      }\n      source += eat1();\n    }\n    if (eat1() !== "/")\n      syntaxError("parsing regular expression");\n    let flags = "";\n    while (!EOL && next().match(/[dgimsuy]/))\n      flags += eat1();\n    try {\n      return new RegExp(source, flags);\n    } catch (e) {\n      throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\`: ${e.message}`);\n    }\n  }\n  function readAttributeToken() {\n    let token = "";\n    skipSpaces();\n    if (next() === `\'` || next() === `"`)\n      token = readQuotedString(next()).slice(1, -1);\n    else\n      token = readIdentifier();\n    if (!token)\n      syntaxError("parsing property path");\n    return token;\n  }\n  function readOperator() {\n    skipSpaces();\n    let op = "";\n    if (!EOL)\n      op += eat1();\n    if (!EOL && op !== "=")\n      op += eat1();\n    if (!["=", "*=", "^=", "$=", "|=", "~="].includes(op))\n      syntaxError("parsing operator");\n    return op;\n  }\n  function readAttribute() {\n    eat1();\n    const jsonPath = [];\n    jsonPath.push(readAttributeToken());\n    skipSpaces();\n    while (next() === ".") {\n      eat1();\n      jsonPath.push(readAttributeToken());\n      skipSpaces();\n    }\n    if (next() === "]") {\n      eat1();\n      return { name: jsonPath.join("."), jsonPath, op: "<truthy>", value: null, caseSensitive: false };\n    }\n    const operator = readOperator();\n    let value = void 0;\n    let caseSensitive = true;\n    skipSpaces();\n    if (next() === "/") {\n      if (operator !== "=")\n        throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - cannot use ${operator} in attribute with regular expression`);\n      value = readRegularExpression();\n    } else if (next() === `\'` || next() === `"`) {\n      value = readQuotedString(next()).slice(1, -1);\n      skipSpaces();\n      if (next() === "i" || next() === "I") {\n        caseSensitive = false;\n        eat1();\n      } else if (next() === "s" || next() === "S") {\n        caseSensitive = true;\n        eat1();\n      }\n    } else {\n      value = "";\n      while (!EOL && (isCSSNameChar(next()) || next() === "+" || next() === "."))\n        value += eat1();\n      if (value === "true") {\n        value = true;\n      } else if (value === "false") {\n        value = false;\n      } else {\n        if (!allowUnquotedStrings) {\n          value = +value;\n          if (Number.isNaN(value))\n            syntaxError("parsing attribute value");\n        }\n      }\n    }\n    skipSpaces();\n    if (next() !== "]")\n      syntaxError("parsing attribute value");\n    eat1();\n    if (operator !== "=" && typeof value !== "string")\n      throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - cannot use ${operator} in attribute with non-string matching value - ${value}`);\n    return { name: jsonPath.join("."), jsonPath, op: operator, value, caseSensitive };\n  }\n  const result = {\n    name: "",\n    attributes: []\n  };\n  result.name = readIdentifier();\n  skipSpaces();\n  while (next() === "[") {\n    result.attributes.push(readAttribute());\n    skipSpaces();\n  }\n  if (!EOL)\n    syntaxError(void 0);\n  if (!result.name && !result.attributes.length)\n    throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - selector cannot be empty`);\n  return result;\n}\n\n// packages/playwright-core/src/utils/isomorphic/locatorGenerators.ts\nfunction asLocator(lang, selector, isFrameLocator = false) {\n  return asLocators(lang, selector, isFrameLocator, 1)[0];\n}\nfunction asLocators(lang, selector, isFrameLocator = false, maxOutputSize = 20, preferredQuote) {\n  try {\n    return innerAsLocators(new generators[lang](preferredQuote), parseSelector(selector), isFrameLocator, maxOutputSize);\n  } catch (e) {\n    return [selector];\n  }\n}\nfunction innerAsLocators(factory, parsed, isFrameLocator = false, maxOutputSize = 20) {\n  const parts = [...parsed.parts];\n  const tokens = [];\n  let nextBase = isFrameLocator ? "frame-locator" : "page";\n  for (let index = 0; index < parts.length; index++) {\n    const part = parts[index];\n    const base = nextBase;\n    nextBase = "locator";\n    if (part.name === "nth") {\n      if (part.body === "0")\n        tokens.push([factory.generateLocator(base, "first", ""), factory.generateLocator(base, "nth", "0")]);\n      else if (part.body === "-1")\n        tokens.push([factory.generateLocator(base, "last", ""), factory.generateLocator(base, "nth", "-1")]);\n      else\n        tokens.push([factory.generateLocator(base, "nth", part.body)]);\n      continue;\n    }\n    if (part.name === "visible") {\n      tokens.push([factory.generateLocator(base, "visible", part.body), factory.generateLocator(base, "default", `visible=${part.body}`)]);\n      continue;\n    }\n    if (part.name === "internal:text") {\n      const { exact, text } = detectExact(part.body);\n      tokens.push([factory.generateLocator(base, "text", text, { exact })]);\n      continue;\n    }\n    if (part.name === "internal:has-text") {\n      const { exact, text } = detectExact(part.body);\n      if (!exact) {\n        tokens.push([factory.generateLocator(base, "has-text", text, { exact })]);\n        continue;\n      }\n    }\n    if (part.name === "internal:has-not-text") {\n      const { exact, text } = detectExact(part.body);\n      if (!exact) {\n        tokens.push([factory.generateLocator(base, "has-not-text", text, { exact })]);\n        continue;\n      }\n    }\n    if (part.name === "internal:has") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "has", inner)));\n      continue;\n    }\n    if (part.name === "internal:has-not") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "hasNot", inner)));\n      continue;\n    }\n    if (part.name === "internal:and") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "and", inner)));\n      continue;\n    }\n    if (part.name === "internal:or") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "or", inner)));\n      continue;\n    }\n    if (part.name === "internal:chain") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "chain", inner)));\n      continue;\n    }\n    if (part.name === "internal:label") {\n      const { exact, text } = detectExact(part.body);\n      tokens.push([factory.generateLocator(base, "label", text, { exact })]);\n      continue;\n    }\n    if (part.name === "internal:role") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const options = { attrs: [] };\n      for (const attr of attrSelector.attributes) {\n        if (attr.name === "name") {\n          options.exact = attr.caseSensitive;\n          options.name = attr.value;\n        } else {\n          if (attr.name === "level" && typeof attr.value === "string")\n            attr.value = +attr.value;\n          options.attrs.push({ name: attr.name === "include-hidden" ? "includeHidden" : attr.name, value: attr.value });\n        }\n      }\n      tokens.push([factory.generateLocator(base, "role", attrSelector.name, options)]);\n      continue;\n    }\n    if (part.name === "internal:testid") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const { value } = attrSelector.attributes[0];\n      tokens.push([factory.generateLocator(base, "test-id", value)]);\n      continue;\n    }\n    if (part.name === "internal:attr") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const { name, value, caseSensitive } = attrSelector.attributes[0];\n      const text = value;\n      const exact = !!caseSensitive;\n      if (name === "placeholder") {\n        tokens.push([factory.generateLocator(base, "placeholder", text, { exact })]);\n        continue;\n      }\n      if (name === "alt") {\n        tokens.push([factory.generateLocator(base, "alt", text, { exact })]);\n        continue;\n      }\n      if (name === "title") {\n        tokens.push([factory.generateLocator(base, "title", text, { exact })]);\n        continue;\n      }\n    }\n    if (part.name === "internal:control" && part.body === "enter-frame") {\n      const lastTokens = tokens[tokens.length - 1];\n      const lastPart = parts[index - 1];\n      const transformed = lastTokens.map((token) => factory.chainLocators([token, factory.generateLocator(base, "frame", "")]));\n      if (["xpath", "css"].includes(lastPart.name)) {\n        transformed.push(\n          factory.generateLocator(base, "frame-locator", stringifySelector({ parts: [lastPart] })),\n          factory.generateLocator(base, "frame-locator", stringifySelector({ parts: [lastPart] }, true))\n        );\n      }\n      lastTokens.splice(0, lastTokens.length, ...transformed);\n      nextBase = "frame-locator";\n      continue;\n    }\n    const nextPart = parts[index + 1];\n    const selectorPart = stringifySelector({ parts: [part] });\n    const locatorPart = factory.generateLocator(base, "default", selectorPart);\n    if (nextPart && ["internal:has-text", "internal:has-not-text"].includes(nextPart.name)) {\n      const { exact, text } = detectExact(nextPart.body);\n      if (!exact) {\n        const nextLocatorPart = factory.generateLocator("locator", nextPart.name === "internal:has-text" ? "has-text" : "has-not-text", text, { exact });\n        const options = {};\n        if (nextPart.name === "internal:has-text")\n          options.hasText = text;\n        else\n          options.hasNotText = text;\n        const combinedPart = factory.generateLocator(base, "default", selectorPart, options);\n        tokens.push([factory.chainLocators([locatorPart, nextLocatorPart]), combinedPart]);\n        index++;\n        continue;\n      }\n    }\n    let locatorPartWithEngine;\n    if (["xpath", "css"].includes(part.name)) {\n      const selectorPart2 = stringifySelector(\n        { parts: [part] },\n        /* forceEngineName */\n        true\n      );\n      locatorPartWithEngine = factory.generateLocator(base, "default", selectorPart2);\n    }\n    tokens.push([locatorPart, locatorPartWithEngine].filter(Boolean));\n  }\n  return combineTokens(factory, tokens, maxOutputSize);\n}\nfunction combineTokens(factory, tokens, maxOutputSize) {\n  const currentTokens = tokens.map(() => "");\n  const result = [];\n  const visit = (index) => {\n    if (index === tokens.length) {\n      result.push(factory.chainLocators(currentTokens));\n      return result.length < maxOutputSize;\n    }\n    for (const taken of tokens[index]) {\n      currentTokens[index] = taken;\n      if (!visit(index + 1))\n        return false;\n    }\n    return true;\n  };\n  visit(0);\n  return result;\n}\nfunction detectExact(text) {\n  let exact = false;\n  const match = text.match(/^\\/(.*)\\/([igm]*)$/);\n  if (match)\n    return { text: new RegExp(match[1], match[2]) };\n  if (text.endsWith(\'"\')) {\n    text = JSON.parse(text);\n    exact = true;\n  } else if (text.endsWith(\'"s\')) {\n    text = JSON.parse(text.substring(0, text.length - 1));\n    exact = true;\n  } else if (text.endsWith(\'"i\')) {\n    text = JSON.parse(text.substring(0, text.length - 1));\n    exact = false;\n  }\n  return { exact, text };\n}\nvar JavaScriptLocatorFactory = class {\n  constructor(preferredQuote) {\n    this.preferredQuote = preferredQuote;\n  }\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case "default":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, { hasText: ${this.toHasText(options.hasText)} })`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, { hasNotText: ${this.toHasText(options.hasNotText)} })`;\n        return `locator(${this.quote(body)})`;\n      case "frame-locator":\n        return `frameLocator(${this.quote(body)})`;\n      case "frame":\n        return `contentFrame()`;\n      case "nth":\n        return `nth(${body})`;\n      case "first":\n        return `first()`;\n      case "last":\n        return `last()`;\n      case "visible":\n        return `filter({ visible: ${body === "true" ? "true" : "false"} })`;\n      case "role":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`name: ${this.regexToSourceString(options.name)}`);\n        } else if (typeof options.name === "string") {\n          attrs.push(`name: ${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`exact: true`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`${name}: ${typeof value === "string" ? this.quote(value) : value}`);\n        const attrString = attrs.length ? `, { ${attrs.join(", ")} }` : "";\n        return `getByRole(${this.quote(body)}${attrString})`;\n      case "has-text":\n        return `filter({ hasText: ${this.toHasText(body)} })`;\n      case "has-not-text":\n        return `filter({ hasNotText: ${this.toHasText(body)} })`;\n      case "has":\n        return `filter({ has: ${body} })`;\n      case "hasNot":\n        return `filter({ hasNot: ${body} })`;\n      case "and":\n        return `and(${body})`;\n      case "or":\n        return `or(${body})`;\n      case "chain":\n        return `locator(${body})`;\n      case "test-id":\n        return `getByTestId(${this.toTestIdValue(body)})`;\n      case "text":\n        return this.toCallWithExact("getByText", body, !!options.exact);\n      case "alt":\n        return this.toCallWithExact("getByAltText", body, !!options.exact);\n      case "placeholder":\n        return this.toCallWithExact("getByPlaceholder", body, !!options.exact);\n      case "label":\n        return this.toCallWithExact("getByLabel", body, !!options.exact);\n      case "title":\n        return this.toCallWithExact("getByTitle", body, !!options.exact);\n      default:\n        throw new Error("Unknown selector kind " + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(".");\n  }\n  regexToSourceString(re) {\n    return normalizeEscapedRegexQuotes(String(re));\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToSourceString(body)})`;\n    return exact ? `${method}(${this.quote(body)}, { exact: true })` : `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToSourceString(body);\n    return this.quote(body);\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToSourceString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    var _a;\n    return escapeWithQuotes(text, (_a = this.preferredQuote) != null ? _a : "\'");\n  }\n};\nvar PythonLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case "default":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, has_text=${this.toHasText(options.hasText)})`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, has_not_text=${this.toHasText(options.hasNotText)})`;\n        return `locator(${this.quote(body)})`;\n      case "frame-locator":\n        return `frame_locator(${this.quote(body)})`;\n      case "frame":\n        return `content_frame`;\n      case "nth":\n        return `nth(${body})`;\n      case "first":\n        return `first`;\n      case "last":\n        return `last`;\n      case "visible":\n        return `filter(visible=${body === "true" ? "True" : "False"})`;\n      case "role":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`name=${this.regexToString(options.name)}`);\n        } else if (typeof options.name === "string") {\n          attrs.push(`name=${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`exact=True`);\n        }\n        for (const { name, value } of options.attrs) {\n          let valueString = typeof value === "string" ? this.quote(value) : value;\n          if (typeof value === "boolean")\n            valueString = value ? "True" : "False";\n          attrs.push(`${toSnakeCase(name)}=${valueString}`);\n        }\n        const attrString = attrs.length ? `, ${attrs.join(", ")}` : "";\n        return `get_by_role(${this.quote(body)}${attrString})`;\n      case "has-text":\n        return `filter(has_text=${this.toHasText(body)})`;\n      case "has-not-text":\n        return `filter(has_not_text=${this.toHasText(body)})`;\n      case "has":\n        return `filter(has=${body})`;\n      case "hasNot":\n        return `filter(has_not=${body})`;\n      case "and":\n        return `and_(${body})`;\n      case "or":\n        return `or_(${body})`;\n      case "chain":\n        return `locator(${body})`;\n      case "test-id":\n        return `get_by_test_id(${this.toTestIdValue(body)})`;\n      case "text":\n        return this.toCallWithExact("get_by_text", body, !!options.exact);\n      case "alt":\n        return this.toCallWithExact("get_by_alt_text", body, !!options.exact);\n      case "placeholder":\n        return this.toCallWithExact("get_by_placeholder", body, !!options.exact);\n      case "label":\n        return this.toCallWithExact("get_by_label", body, !!options.exact);\n      case "title":\n        return this.toCallWithExact("get_by_title", body, !!options.exact);\n      default:\n        throw new Error("Unknown selector kind " + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(".");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes("i") ? ", re.IGNORECASE" : "";\n    return `re.compile(r"${normalizeEscapedRegexQuotes(body.source).replace(/\\\\\\//, "/").replace(/"/g, \'\\\\"\')}"${suffix})`;\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, exact=True)`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToString(body);\n    return `${this.quote(body)}`;\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    return escapeWithQuotes(text, \'"\');\n  }\n};\nvar JavaLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    let clazz;\n    switch (base) {\n      case "page":\n        clazz = "Page";\n        break;\n      case "frame-locator":\n        clazz = "FrameLocator";\n        break;\n      case "locator":\n        clazz = "Locator";\n        break;\n    }\n    switch (kind) {\n      case "default":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasText(${this.toHasText(options.hasText)}))`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasNotText(${this.toHasText(options.hasNotText)}))`;\n        return `locator(${this.quote(body)})`;\n      case "frame-locator":\n        return `frameLocator(${this.quote(body)})`;\n      case "frame":\n        return `contentFrame()`;\n      case "nth":\n        return `nth(${body})`;\n      case "first":\n        return `first()`;\n      case "last":\n        return `last()`;\n      case "visible":\n        return `filter(new ${clazz}.FilterOptions().setVisible(${body === "true" ? "true" : "false"}))`;\n      case "role":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`.setName(${this.regexToString(options.name)})`);\n        } else if (typeof options.name === "string") {\n          attrs.push(`.setName(${this.quote(options.name)})`);\n          if (options.exact)\n            attrs.push(`.setExact(true)`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`.set${toTitleCase(name)}(${typeof value === "string" ? this.quote(value) : value})`);\n        const attrString = attrs.length ? `, new ${clazz}.GetByRoleOptions()${attrs.join("")}` : "";\n        return `getByRole(AriaRole.${toSnakeCase(body).toUpperCase()}${attrString})`;\n      case "has-text":\n        return `filter(new ${clazz}.FilterOptions().setHasText(${this.toHasText(body)}))`;\n      case "has-not-text":\n        return `filter(new ${clazz}.FilterOptions().setHasNotText(${this.toHasText(body)}))`;\n      case "has":\n        return `filter(new ${clazz}.FilterOptions().setHas(${body}))`;\n      case "hasNot":\n        return `filter(new ${clazz}.FilterOptions().setHasNot(${body}))`;\n      case "and":\n        return `and(${body})`;\n      case "or":\n        return `or(${body})`;\n      case "chain":\n        return `locator(${body})`;\n      case "test-id":\n        return `getByTestId(${this.toTestIdValue(body)})`;\n      case "text":\n        return this.toCallWithExact(clazz, "getByText", body, !!options.exact);\n      case "alt":\n        return this.toCallWithExact(clazz, "getByAltText", body, !!options.exact);\n      case "placeholder":\n        return this.toCallWithExact(clazz, "getByPlaceholder", body, !!options.exact);\n      case "label":\n        return this.toCallWithExact(clazz, "getByLabel", body, !!options.exact);\n      case "title":\n        return this.toCallWithExact(clazz, "getByTitle", body, !!options.exact);\n      default:\n        throw new Error("Unknown selector kind " + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(".");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes("i") ? ", Pattern.CASE_INSENSITIVE" : "";\n    return `Pattern.compile(${this.quote(normalizeEscapedRegexQuotes(body.source))}${suffix})`;\n  }\n  toCallWithExact(clazz, method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, new ${clazz}.${toTitleCase(method)}Options().setExact(true))`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToString(body);\n    return this.quote(body);\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    return escapeWithQuotes(text, \'"\');\n  }\n};\nvar CSharpLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case "default":\n        if (options.hasText !== void 0)\n          return `Locator(${this.quote(body)}, new() { ${this.toHasText(options.hasText)} })`;\n        if (options.hasNotText !== void 0)\n          return `Locator(${this.quote(body)}, new() { ${this.toHasNotText(options.hasNotText)} })`;\n        return `Locator(${this.quote(body)})`;\n      case "frame-locator":\n        return `FrameLocator(${this.quote(body)})`;\n      case "frame":\n        return `ContentFrame`;\n      case "nth":\n        return `Nth(${body})`;\n      case "first":\n        return `First`;\n      case "last":\n        return `Last`;\n      case "visible":\n        return `Filter(new() { Visible = ${body === "true" ? "true" : "false"} })`;\n      case "role":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`NameRegex = ${this.regexToString(options.name)}`);\n        } else if (typeof options.name === "string") {\n          attrs.push(`Name = ${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`Exact = true`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`${toTitleCase(name)} = ${typeof value === "string" ? this.quote(value) : value}`);\n        const attrString = attrs.length ? `, new() { ${attrs.join(", ")} }` : "";\n        return `GetByRole(AriaRole.${toTitleCase(body)}${attrString})`;\n      case "has-text":\n        return `Filter(new() { ${this.toHasText(body)} })`;\n      case "has-not-text":\n        return `Filter(new() { ${this.toHasNotText(body)} })`;\n      case "has":\n        return `Filter(new() { Has = ${body} })`;\n      case "hasNot":\n        return `Filter(new() { HasNot = ${body} })`;\n      case "and":\n        return `And(${body})`;\n      case "or":\n        return `Or(${body})`;\n      case "chain":\n        return `Locator(${body})`;\n      case "test-id":\n        return `GetByTestId(${this.toTestIdValue(body)})`;\n      case "text":\n        return this.toCallWithExact("GetByText", body, !!options.exact);\n      case "alt":\n        return this.toCallWithExact("GetByAltText", body, !!options.exact);\n      case "placeholder":\n        return this.toCallWithExact("GetByPlaceholder", body, !!options.exact);\n      case "label":\n        return this.toCallWithExact("GetByLabel", body, !!options.exact);\n      case "title":\n        return this.toCallWithExact("GetByTitle", body, !!options.exact);\n      default:\n        throw new Error("Unknown selector kind " + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(".");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes("i") ? ", RegexOptions.IgnoreCase" : "";\n    return `new Regex(${this.quote(normalizeEscapedRegexQuotes(body.source))}${suffix})`;\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, new() { Exact = true })`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return `HasTextRegex = ${this.regexToString(body)}`;\n    return `HasText = ${this.quote(body)}`;\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  toHasNotText(body) {\n    if (isRegExp(body))\n      return `HasNotTextRegex = ${this.regexToString(body)}`;\n    return `HasNotText = ${this.quote(body)}`;\n  }\n  quote(text) {\n    return escapeWithQuotes(text, \'"\');\n  }\n};\nvar JsonlLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    return JSON.stringify({\n      kind,\n      body,\n      options\n    });\n  }\n  chainLocators(locators) {\n    const objects = locators.map((l) => JSON.parse(l));\n    for (let i = 0; i < objects.length - 1; ++i)\n      objects[i].next = objects[i + 1];\n    return JSON.stringify(objects[0]);\n  }\n};\nvar generators = {\n  javascript: JavaScriptLocatorFactory,\n  python: PythonLocatorFactory,\n  java: JavaLocatorFactory,\n  csharp: CSharpLocatorFactory,\n  jsonl: JsonlLocatorFactory\n};\nfunction isRegExp(obj) {\n  return obj instanceof RegExp;\n}\n\n// packages/playwright-core/src/server/injected/highlight.ts\nvar Highlight = class {\n  constructor(injectedScript) {\n    this._highlightEntries = [];\n    this._highlightOptions = {};\n    this._language = "javascript";\n    this._injectedScript = injectedScript;\n    const document = injectedScript.document;\n    this._isUnderTest = injectedScript.isUnderTest;\n    this._glassPaneElement = document.createElement("x-pw-glass");\n    this._glassPaneElement.style.position = "fixed";\n    this._glassPaneElement.style.top = "0";\n    this._glassPaneElement.style.right = "0";\n    this._glassPaneElement.style.bottom = "0";\n    this._glassPaneElement.style.left = "0";\n    this._glassPaneElement.style.zIndex = "2147483646";\n    this._glassPaneElement.style.pointerEvents = "none";\n    this._glassPaneElement.style.display = "flex";\n    this._glassPaneElement.style.backgroundColor = "transparent";\n    for (const eventName of ["click", "auxclick", "dragstart", "input", "keydown", "keyup", "pointerdown", "pointerup", "mousedown", "mouseup", "mouseleave", "focus", "scroll"]) {\n      this._glassPaneElement.addEventListener(eventName, (e) => {\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n        if (e.type === "click" && e.button === 0 && this._highlightOptions.tooltipListItemSelected)\n          this._highlightOptions.tooltipListItemSelected(void 0);\n      });\n    }\n    this._actionPointElement = document.createElement("x-pw-action-point");\n    this._actionPointElement.setAttribute("hidden", "true");\n    this._glassPaneShadow = this._glassPaneElement.attachShadow({ mode: this._isUnderTest ? "open" : "closed" });\n    if (typeof this._glassPaneShadow.adoptedStyleSheets.push === "function") {\n      const sheet = new this._injectedScript.window.CSSStyleSheet();\n      sheet.replaceSync(highlight_default);\n      this._glassPaneShadow.adoptedStyleSheets.push(sheet);\n    } else {\n      const styleElement = this._injectedScript.document.createElement("style");\n      styleElement.textContent = highlight_default;\n      this._glassPaneShadow.appendChild(styleElement);\n    }\n    this._glassPaneShadow.appendChild(this._actionPointElement);\n  }\n  install() {\n    if (this._injectedScript.document.documentElement && !this._injectedScript.document.documentElement.contains(this._glassPaneElement))\n      this._injectedScript.document.documentElement.appendChild(this._glassPaneElement);\n  }\n  setLanguage(language) {\n    this._language = language;\n  }\n  runHighlightOnRaf(selector) {\n    if (this._rafRequest)\n      cancelAnimationFrame(this._rafRequest);\n    this.updateHighlight(this._injectedScript.querySelectorAll(selector, this._injectedScript.document.documentElement), { tooltipText: asLocator(this._language, stringifySelector(selector)) });\n    this._rafRequest = this._injectedScript.builtinRequestAnimationFrame(() => this.runHighlightOnRaf(selector));\n  }\n  uninstall() {\n    if (this._rafRequest)\n      cancelAnimationFrame(this._rafRequest);\n    this._glassPaneElement.remove();\n  }\n  showActionPoint(x, y) {\n    this._actionPointElement.style.top = y + "px";\n    this._actionPointElement.style.left = x + "px";\n    this._actionPointElement.hidden = false;\n  }\n  hideActionPoint() {\n    this._actionPointElement.hidden = true;\n  }\n  clearHighlight() {\n    var _a, _b;\n    for (const entry of this._highlightEntries) {\n      (_a = entry.highlightElement) == null ? void 0 : _a.remove();\n      (_b = entry.tooltipElement) == null ? void 0 : _b.remove();\n    }\n    this._highlightEntries = [];\n    this._highlightOptions = {};\n    this._glassPaneElement.style.pointerEvents = "none";\n  }\n  updateHighlight(elements, options) {\n    this._innerUpdateHighlight(elements, options);\n  }\n  maskElements(elements, color) {\n    this._innerUpdateHighlight(elements, { color });\n  }\n  _innerUpdateHighlight(elements, options) {\n    let color = options.color;\n    if (!color)\n      color = elements.length > 1 ? "#f6b26b7f" : "#6fa8dc7f";\n    if (this._highlightIsUpToDate(elements, options))\n      return;\n    this.clearHighlight();\n    this._highlightOptions = options;\n    this._glassPaneElement.style.pointerEvents = options.tooltipListItemSelected ? "initial" : "none";\n    for (let i = 0; i < elements.length; ++i) {\n      const highlightElement = this._createHighlightElement();\n      this._glassPaneShadow.appendChild(highlightElement);\n      let tooltipElement;\n      if (options.tooltipList || options.tooltipText || options.tooltipFooter) {\n        tooltipElement = this._injectedScript.document.createElement("x-pw-tooltip");\n        this._glassPaneShadow.appendChild(tooltipElement);\n        tooltipElement.style.top = "0";\n        tooltipElement.style.left = "0";\n        tooltipElement.style.display = "flex";\n        let lines = [];\n        if (options.tooltipList) {\n          lines = options.tooltipList;\n        } else if (options.tooltipText) {\n          const suffix = elements.length > 1 ? ` [${i + 1} of ${elements.length}]` : "";\n          lines = [options.tooltipText + suffix];\n        }\n        for (let index = 0; index < lines.length; index++) {\n          const element = this._injectedScript.document.createElement("x-pw-tooltip-line");\n          element.textContent = lines[index];\n          tooltipElement.appendChild(element);\n          if (options.tooltipListItemSelected) {\n            element.classList.add("selectable");\n            element.addEventListener("click", () => {\n              var _a;\n              return (_a = options.tooltipListItemSelected) == null ? void 0 : _a.call(options, index);\n            });\n          }\n        }\n        if (options.tooltipFooter) {\n          const footer = this._injectedScript.document.createElement("x-pw-tooltip-footer");\n          footer.textContent = options.tooltipFooter;\n          tooltipElement.appendChild(footer);\n        }\n      }\n      this._highlightEntries.push({ targetElement: elements[i], tooltipElement, highlightElement });\n    }\n    for (const entry of this._highlightEntries) {\n      entry.box = entry.targetElement.getBoundingClientRect();\n      if (!entry.tooltipElement)\n        continue;\n      const { anchorLeft, anchorTop } = this.tooltipPosition(entry.box, entry.tooltipElement);\n      entry.tooltipTop = anchorTop;\n      entry.tooltipLeft = anchorLeft;\n    }\n    for (const entry of this._highlightEntries) {\n      if (entry.tooltipElement) {\n        entry.tooltipElement.style.top = entry.tooltipTop + "px";\n        entry.tooltipElement.style.left = entry.tooltipLeft + "px";\n      }\n      const box = entry.box;\n      entry.highlightElement.style.backgroundColor = color;\n      entry.highlightElement.style.left = box.x + "px";\n      entry.highlightElement.style.top = box.y + "px";\n      entry.highlightElement.style.width = box.width + "px";\n      entry.highlightElement.style.height = box.height + "px";\n      entry.highlightElement.style.display = "block";\n      if (this._isUnderTest)\n        console.error("Highlight box for test: " + JSON.stringify({ x: box.x, y: box.y, width: box.width, height: box.height }));\n    }\n  }\n  firstBox() {\n    var _a;\n    return (_a = this._highlightEntries[0]) == null ? void 0 : _a.box;\n  }\n  tooltipPosition(box, tooltipElement) {\n    const tooltipWidth = tooltipElement.offsetWidth;\n    const tooltipHeight = tooltipElement.offsetHeight;\n    const totalWidth = this._glassPaneElement.offsetWidth;\n    const totalHeight = this._glassPaneElement.offsetHeight;\n    let anchorLeft = box.left;\n    if (anchorLeft + tooltipWidth > totalWidth - 5)\n      anchorLeft = totalWidth - tooltipWidth - 5;\n    let anchorTop = box.bottom + 5;\n    if (anchorTop + tooltipHeight > totalHeight - 5) {\n      if (box.top > tooltipHeight + 5) {\n        anchorTop = box.top - tooltipHeight - 5;\n      } else {\n        anchorTop = totalHeight - 5 - tooltipHeight;\n      }\n    }\n    return { anchorLeft, anchorTop };\n  }\n  _highlightIsUpToDate(elements, options) {\n    var _a, _b;\n    if (options.tooltipText !== this._highlightOptions.tooltipText)\n      return false;\n    if (options.tooltipListItemSelected !== this._highlightOptions.tooltipListItemSelected)\n      return false;\n    if (options.tooltipFooter !== this._highlightOptions.tooltipFooter)\n      return false;\n    if (((_a = options.tooltipList) == null ? void 0 : _a.length) !== ((_b = this._highlightOptions.tooltipList) == null ? void 0 : _b.length))\n      return false;\n    if (options.tooltipList && this._highlightOptions.tooltipList) {\n      for (let i = 0; i < options.tooltipList.length; i++) {\n        if (options.tooltipList[i] !== this._highlightOptions.tooltipList[i])\n          return false;\n      }\n    }\n    if (elements.length !== this._highlightEntries.length)\n      return false;\n    for (let i = 0; i < this._highlightEntries.length; ++i) {\n      if (elements[i] !== this._highlightEntries[i].targetElement)\n        return false;\n      const oldBox = this._highlightEntries[i].box;\n      if (!oldBox)\n        return false;\n      const box = elements[i].getBoundingClientRect();\n      if (box.top !== oldBox.top || box.right !== oldBox.right || box.bottom !== oldBox.bottom || box.left !== oldBox.left)\n        return false;\n    }\n    return true;\n  }\n  _createHighlightElement() {\n    return this._injectedScript.document.createElement("x-pw-highlight");\n  }\n  appendChild(element) {\n    this._glassPaneShadow.appendChild(element);\n  }\n};\n\n// packages/playwright-core/src/server/injected/layoutSelectorUtils.ts\nfunction boxRightOf(box1, box2, maxDistance) {\n  const distance = box1.left - box2.right;\n  if (distance < 0 || maxDistance !== void 0 && distance > maxDistance)\n    return;\n  return distance + Math.max(box2.bottom - box1.bottom, 0) + Math.max(box1.top - box2.top, 0);\n}\nfunction boxLeftOf(box1, box2, maxDistance) {\n  const distance = box2.left - box1.right;\n  if (distance < 0 || maxDistance !== void 0 && distance > maxDistance)\n    return;\n  return distance + Math.max(box2.bottom - box1.bottom, 0) + Math.max(box1.top - box2.top, 0);\n}\nfunction boxAbove(box1, box2, maxDistance) {\n  const distance = box2.top - box1.bottom;\n  if (distance < 0 || maxDistance !== void 0 && distance > maxDistance)\n    return;\n  return distance + Math.max(box1.left - box2.left, 0) + Math.max(box2.right - box1.right, 0);\n}\nfunction boxBelow(box1, box2, maxDistance) {\n  const distance = box1.top - box2.bottom;\n  if (distance < 0 || maxDistance !== void 0 && distance > maxDistance)\n    return;\n  return distance + Math.max(box1.left - box2.left, 0) + Math.max(box2.right - box1.right, 0);\n}\nfunction boxNear(box1, box2, maxDistance) {\n  const kThreshold = maxDistance === void 0 ? 50 : maxDistance;\n  let score = 0;\n  if (box1.left - box2.right >= 0)\n    score += box1.left - box2.right;\n  if (box2.left - box1.right >= 0)\n    score += box2.left - box1.right;\n  if (box2.top - box1.bottom >= 0)\n    score += box2.top - box1.bottom;\n  if (box1.top - box2.bottom >= 0)\n    score += box1.top - box2.bottom;\n  return score > kThreshold ? void 0 : score;\n}\nvar kLayoutSelectorNames = ["left-of", "right-of", "above", "below", "near"];\nfunction layoutSelectorScore(name, element, inner, maxDistance) {\n  const box = element.getBoundingClientRect();\n  const scorer = { "left-of": boxLeftOf, "right-of": boxRightOf, "above": boxAbove, "below": boxBelow, "near": boxNear }[name];\n  let bestScore;\n  for (const e of inner) {\n    if (e === element)\n      continue;\n    const score = scorer(box, e.getBoundingClientRect(), maxDistance);\n    if (score === void 0)\n      continue;\n    if (bestScore === void 0 || score < bestScore)\n      bestScore = score;\n  }\n  return bestScore;\n}\n\n// packages/playwright-core/src/server/injected/selectorUtils.ts\nfunction matchesComponentAttribute(obj, attr) {\n  for (const token of attr.jsonPath) {\n    if (obj !== void 0 && obj !== null)\n      obj = obj[token];\n  }\n  return matchesAttributePart(obj, attr);\n}\nfunction matchesAttributePart(value, attr) {\n  const objValue = typeof value === "string" && !attr.caseSensitive ? value.toUpperCase() : value;\n  const attrValue = typeof attr.value === "string" && !attr.caseSensitive ? attr.value.toUpperCase() : attr.value;\n  if (attr.op === "<truthy>")\n    return !!objValue;\n  if (attr.op === "=") {\n    if (attrValue instanceof RegExp)\n      return typeof objValue === "string" && !!objValue.match(attrValue);\n    return objValue === attrValue;\n  }\n  if (typeof objValue !== "string" || typeof attrValue !== "string")\n    return false;\n  if (attr.op === "*=")\n    return objValue.includes(attrValue);\n  if (attr.op === "^=")\n    return objValue.startsWith(attrValue);\n  if (attr.op === "$=")\n    return objValue.endsWith(attrValue);\n  if (attr.op === "|=")\n    return objValue === attrValue || objValue.startsWith(attrValue + "-");\n  if (attr.op === "~=")\n    return objValue.split(" ").includes(attrValue);\n  return false;\n}\nfunction shouldSkipForTextMatching(element) {\n  const document = element.ownerDocument;\n  return element.nodeName === "SCRIPT" || element.nodeName === "NOSCRIPT" || element.nodeName === "STYLE" || document.head && document.head.contains(element);\n}\nfunction elementText(cache, root) {\n  let value = cache.get(root);\n  if (value === void 0) {\n    value = { full: "", normalized: "", immediate: [] };\n    if (!shouldSkipForTextMatching(root)) {\n      let currentImmediate = "";\n      if (root instanceof HTMLInputElement && (root.type === "submit" || root.type === "button")) {\n        value = { full: root.value, normalized: normalizeWhiteSpace(root.value), immediate: [root.value] };\n      } else {\n        for (let child = root.firstChild; child; child = child.nextSibling) {\n          if (child.nodeType === Node.TEXT_NODE) {\n            value.full += child.nodeValue || "";\n            currentImmediate += child.nodeValue || "";\n          } else if (child.nodeType === Node.COMMENT_NODE) {\n            continue;\n          } else {\n            if (currentImmediate)\n              value.immediate.push(currentImmediate);\n            currentImmediate = "";\n            if (child.nodeType === Node.ELEMENT_NODE)\n              value.full += elementText(cache, child).full;\n          }\n        }\n        if (currentImmediate)\n          value.immediate.push(currentImmediate);\n        if (root.shadowRoot)\n          value.full += elementText(cache, root.shadowRoot).full;\n        if (value.full)\n          value.normalized = normalizeWhiteSpace(value.full);\n      }\n    }\n    cache.set(root, value);\n  }\n  return value;\n}\nfunction elementMatchesText(cache, element, matcher) {\n  if (shouldSkipForTextMatching(element))\n    return "none";\n  if (!matcher(elementText(cache, element)))\n    return "none";\n  for (let child = element.firstChild; child; child = child.nextSibling) {\n    if (child.nodeType === Node.ELEMENT_NODE && matcher(elementText(cache, child)))\n      return "selfAndChildren";\n  }\n  if (element.shadowRoot && matcher(elementText(cache, element.shadowRoot)))\n    return "selfAndChildren";\n  return "self";\n}\nfunction getElementLabels(textCache, element) {\n  const labels = getAriaLabelledByElements(element);\n  if (labels)\n    return labels.map((label) => elementText(textCache, label));\n  const ariaLabel = element.getAttribute("aria-label");\n  if (ariaLabel !== null && !!ariaLabel.trim())\n    return [{ full: ariaLabel, normalized: normalizeWhiteSpace(ariaLabel), immediate: [ariaLabel] }];\n  const isNonHiddenInput = element.nodeName === "INPUT" && element.type !== "hidden";\n  if (["BUTTON", "METER", "OUTPUT", "PROGRESS", "SELECT", "TEXTAREA"].includes(element.nodeName) || isNonHiddenInput) {\n    const labels2 = element.labels;\n    if (labels2)\n      return [...labels2].map((label) => elementText(textCache, label));\n  }\n  return [];\n}\n\n// packages/playwright-core/src/server/injected/reactSelectorEngine.ts\nfunction getFunctionComponentName(component) {\n  return component.displayName || component.name || "Anonymous";\n}\nfunction getComponentName(reactElement) {\n  if (reactElement.type) {\n    switch (typeof reactElement.type) {\n      case "function":\n        return getFunctionComponentName(reactElement.type);\n      case "string":\n        return reactElement.type;\n      case "object":\n        return reactElement.type.displayName || (reactElement.type.render ? getFunctionComponentName(reactElement.type.render) : "");\n    }\n  }\n  if (reactElement._currentElement) {\n    const elementType = reactElement._currentElement.type;\n    if (typeof elementType === "string")\n      return elementType;\n    if (typeof elementType === "function")\n      return elementType.displayName || elementType.name || "Anonymous";\n  }\n  return "";\n}\nfunction getComponentKey(reactElement) {\n  var _a, _b;\n  return (_b = reactElement.key) != null ? _b : (_a = reactElement._currentElement) == null ? void 0 : _a.key;\n}\nfunction getChildren(reactElement) {\n  if (reactElement.child) {\n    const children = [];\n    for (let child = reactElement.child; child; child = child.sibling)\n      children.push(child);\n    return children;\n  }\n  if (!reactElement._currentElement)\n    return [];\n  const isKnownElement = (reactElement2) => {\n    var _a;\n    const elementType = (_a = reactElement2._currentElement) == null ? void 0 : _a.type;\n    return typeof elementType === "function" || typeof elementType === "string";\n  };\n  if (reactElement._renderedComponent) {\n    const child = reactElement._renderedComponent;\n    return isKnownElement(child) ? [child] : [];\n  }\n  if (reactElement._renderedChildren)\n    return [...Object.values(reactElement._renderedChildren)].filter(isKnownElement);\n  return [];\n}\nfunction getProps(reactElement) {\n  var _a;\n  const props = (\n    // React 16+\n    reactElement.memoizedProps || // React 15\n    ((_a = reactElement._currentElement) == null ? void 0 : _a.props)\n  );\n  if (!props || typeof props === "string")\n    return props;\n  const result = { ...props };\n  delete result.children;\n  return result;\n}\nfunction buildComponentsTree(reactElement) {\n  var _a;\n  const treeNode = {\n    key: getComponentKey(reactElement),\n    name: getComponentName(reactElement),\n    children: getChildren(reactElement).map(buildComponentsTree),\n    rootElements: [],\n    props: getProps(reactElement)\n  };\n  const rootElement = (\n    // React 16+\n    // @see https://github.com/baruchvlz/resq/blob/5c15a5e04d3f7174087248f5a158c3d6dcc1ec72/src/utils.js#L29\n    reactElement.stateNode || // React 15\n    reactElement._hostNode || ((_a = reactElement._renderedComponent) == null ? void 0 : _a._hostNode)\n  );\n  if (rootElement instanceof Element) {\n    treeNode.rootElements.push(rootElement);\n  } else {\n    for (const child of treeNode.children)\n      treeNode.rootElements.push(...child.rootElements);\n  }\n  return treeNode;\n}\nfunction filterComponentsTree(treeNode, searchFn, result = []) {\n  if (searchFn(treeNode))\n    result.push(treeNode);\n  for (const child of treeNode.children)\n    filterComponentsTree(child, searchFn, result);\n  return result;\n}\nfunction findReactRoots(root, roots = []) {\n  const document = root.ownerDocument || root;\n  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);\n  do {\n    const node = walker.currentNode;\n    const reactNode = node;\n    const rootKey = Object.keys(reactNode).find((key) => key.startsWith("__reactContainer") && reactNode[key] !== null);\n    if (rootKey) {\n      roots.push(reactNode[rootKey].stateNode.current);\n    } else {\n      const legacyRootKey = "_reactRootContainer";\n      if (reactNode.hasOwnProperty(legacyRootKey) && reactNode[legacyRootKey] !== null) {\n        roots.push(reactNode[legacyRootKey]._internalRoot.current);\n      }\n    }\n    if (node instanceof Element && node.hasAttribute("data-reactroot")) {\n      for (const key of Object.keys(node)) {\n        if (key.startsWith("__reactInternalInstance") || key.startsWith("__reactFiber"))\n          roots.push(node[key]);\n      }\n    }\n    const shadowRoot = node instanceof Element ? node.shadowRoot : null;\n    if (shadowRoot)\n      findReactRoots(shadowRoot, roots);\n  } while (walker.nextNode());\n  return roots;\n}\nvar ReactEngine = {\n  queryAll(scope, selector) {\n    const { name, attributes } = parseAttributeSelector(selector, false);\n    const reactRoots = findReactRoots(scope.ownerDocument || scope);\n    const trees = reactRoots.map((reactRoot) => buildComponentsTree(reactRoot));\n    const treeNodes = trees.map((tree) => filterComponentsTree(tree, (treeNode) => {\n      var _a;\n      const props = (_a = treeNode.props) != null ? _a : {};\n      if (treeNode.key !== void 0)\n        props.key = treeNode.key;\n      if (name && treeNode.name !== name)\n        return false;\n      if (treeNode.rootElements.some((domNode) => !isInsideScope(scope, domNode)))\n        return false;\n      for (const attr of attributes) {\n        if (!matchesComponentAttribute(props, attr))\n          return false;\n      }\n      return true;\n    })).flat();\n    const allRootElements = /* @__PURE__ */ new Set();\n    for (const treeNode of treeNodes) {\n      for (const domNode of treeNode.rootElements)\n        allRootElements.add(domNode);\n    }\n    return [...allRootElements];\n  }\n};\n\n// packages/playwright-core/src/server/injected/roleSelectorEngine.ts\nvar kSupportedAttributes = ["selected", "checked", "pressed", "expanded", "level", "disabled", "name", "include-hidden"];\nkSupportedAttributes.sort();\nfunction validateSupportedRole(attr, roles, role) {\n  if (!roles.includes(role))\n    throw new Error(`"${attr}" attribute is only supported for roles: ${roles.slice().sort().map((role2) => `"${role2}"`).join(", ")}`);\n}\nfunction validateSupportedValues(attr, values) {\n  if (attr.op !== "<truthy>" && !values.includes(attr.value))\n    throw new Error(`"${attr.name}" must be one of ${values.map((v) => JSON.stringify(v)).join(", ")}`);\n}\nfunction validateSupportedOp(attr, ops) {\n  if (!ops.includes(attr.op))\n    throw new Error(`"${attr.name}" does not support "${attr.op}" matcher`);\n}\nfunction validateAttributes(attrs, role) {\n  const options = { role };\n  for (const attr of attrs) {\n    switch (attr.name) {\n      case "checked": {\n        validateSupportedRole(attr.name, kAriaCheckedRoles, role);\n        validateSupportedValues(attr, [true, false, "mixed"]);\n        validateSupportedOp(attr, ["<truthy>", "="]);\n        options.checked = attr.op === "<truthy>" ? true : attr.value;\n        break;\n      }\n      case "pressed": {\n        validateSupportedRole(attr.name, kAriaPressedRoles, role);\n        validateSupportedValues(attr, [true, false, "mixed"]);\n        validateSupportedOp(attr, ["<truthy>", "="]);\n        options.pressed = attr.op === "<truthy>" ? true : attr.value;\n        break;\n      }\n      case "selected": {\n        validateSupportedRole(attr.name, kAriaSelectedRoles, role);\n        validateSupportedValues(attr, [true, false]);\n        validateSupportedOp(attr, ["<truthy>", "="]);\n        options.selected = attr.op === "<truthy>" ? true : attr.value;\n        break;\n      }\n      case "expanded": {\n        validateSupportedRole(attr.name, kAriaExpandedRoles, role);\n        validateSupportedValues(attr, [true, false]);\n        validateSupportedOp(attr, ["<truthy>", "="]);\n        options.expanded = attr.op === "<truthy>" ? true : attr.value;\n        break;\n      }\n      case "level": {\n        validateSupportedRole(attr.name, kAriaLevelRoles, role);\n        if (typeof attr.value === "string")\n          attr.value = +attr.value;\n        if (attr.op !== "=" || typeof attr.value !== "number" || Number.isNaN(attr.value))\n          throw new Error(`"level" attribute must be compared to a number`);\n        options.level = attr.value;\n        break;\n      }\n      case "disabled": {\n        validateSupportedValues(attr, [true, false]);\n        validateSupportedOp(attr, ["<truthy>", "="]);\n        options.disabled = attr.op === "<truthy>" ? true : attr.value;\n        break;\n      }\n      case "name": {\n        if (attr.op === "<truthy>")\n          throw new Error(`"name" attribute must have a value`);\n        if (typeof attr.value !== "string" && !(attr.value instanceof RegExp))\n          throw new Error(`"name" attribute must be a string or a regular expression`);\n        options.name = attr.value;\n        options.nameOp = attr.op;\n        options.exact = attr.caseSensitive;\n        break;\n      }\n      case "include-hidden": {\n        validateSupportedValues(attr, [true, false]);\n        validateSupportedOp(attr, ["<truthy>", "="]);\n        options.includeHidden = attr.op === "<truthy>" ? true : attr.value;\n        break;\n      }\n      default: {\n        throw new Error(`Unknown attribute "${attr.name}", must be one of ${kSupportedAttributes.map((a) => `"${a}"`).join(", ")}.`);\n      }\n    }\n  }\n  return options;\n}\nfunction queryRole(scope, options, internal) {\n  const result = [];\n  const match = (element) => {\n    if (getAriaRole(element) !== options.role)\n      return;\n    if (options.selected !== void 0 && getAriaSelected(element) !== options.selected)\n      return;\n    if (options.checked !== void 0 && getAriaChecked(element) !== options.checked)\n      return;\n    if (options.pressed !== void 0 && getAriaPressed(element) !== options.pressed)\n      return;\n    if (options.expanded !== void 0 && getAriaExpanded(element) !== options.expanded)\n      return;\n    if (options.level !== void 0 && getAriaLevel(element) !== options.level)\n      return;\n    if (options.disabled !== void 0 && getAriaDisabled(element) !== options.disabled)\n      return;\n    if (!options.includeHidden) {\n      const isHidden = isElementHiddenForAria(element);\n      if (isHidden)\n        return;\n    }\n    if (options.name !== void 0) {\n      const accessibleName = normalizeWhiteSpace(getElementAccessibleName(element, !!options.includeHidden));\n      if (typeof options.name === "string")\n        options.name = normalizeWhiteSpace(options.name);\n      if (internal && !options.exact && options.nameOp === "=")\n        options.nameOp = "*=";\n      if (!matchesAttributePart(accessibleName, { name: "", jsonPath: [], op: options.nameOp || "=", value: options.name, caseSensitive: !!options.exact }))\n        return;\n    }\n    result.push(element);\n  };\n  const query = (root) => {\n    const shadows = [];\n    if (root.shadowRoot)\n      shadows.push(root.shadowRoot);\n    for (const element of root.querySelectorAll("*")) {\n      match(element);\n      if (element.shadowRoot)\n        shadows.push(element.shadowRoot);\n    }\n    shadows.forEach(query);\n  };\n  query(scope);\n  return result;\n}\nfunction createRoleEngine(internal) {\n  return {\n    queryAll: (scope, selector) => {\n      const parsed = parseAttributeSelector(selector, true);\n      const role = parsed.name.toLowerCase();\n      if (!role)\n        throw new Error(`Role must not be empty`);\n      const options = validateAttributes(parsed.attributes, role);\n      beginAriaCaches();\n      try {\n        return queryRole(scope, options, internal);\n      } finally {\n        endAriaCaches();\n      }\n    }\n  };\n}\n\n// packages/playwright-core/src/server/injected/selectorEvaluator.ts\nvar SelectorEvaluatorImpl = class {\n  constructor(extraEngines) {\n    this._engines = /* @__PURE__ */ new Map();\n    this._cacheQueryCSS = /* @__PURE__ */ new Map();\n    this._cacheMatches = /* @__PURE__ */ new Map();\n    this._cacheQuery = /* @__PURE__ */ new Map();\n    this._cacheMatchesSimple = /* @__PURE__ */ new Map();\n    this._cacheMatchesParents = /* @__PURE__ */ new Map();\n    this._cacheCallMatches = /* @__PURE__ */ new Map();\n    this._cacheCallQuery = /* @__PURE__ */ new Map();\n    this._cacheQuerySimple = /* @__PURE__ */ new Map();\n    this._cacheText = /* @__PURE__ */ new Map();\n    this._retainCacheCounter = 0;\n    for (const [name, engine] of extraEngines)\n      this._engines.set(name, engine);\n    this._engines.set("not", notEngine);\n    this._engines.set("is", isEngine);\n    this._engines.set("where", isEngine);\n    this._engines.set("has", hasEngine);\n    this._engines.set("scope", scopeEngine);\n    this._engines.set("light", lightEngine);\n    this._engines.set("visible", visibleEngine);\n    this._engines.set("text", textEngine);\n    this._engines.set("text-is", textIsEngine);\n    this._engines.set("text-matches", textMatchesEngine);\n    this._engines.set("has-text", hasTextEngine);\n    this._engines.set("right-of", createLayoutEngine("right-of"));\n    this._engines.set("left-of", createLayoutEngine("left-of"));\n    this._engines.set("above", createLayoutEngine("above"));\n    this._engines.set("below", createLayoutEngine("below"));\n    this._engines.set("near", createLayoutEngine("near"));\n    this._engines.set("nth-match", nthMatchEngine);\n    const allNames = [...this._engines.keys()];\n    allNames.sort();\n    const parserNames = [...customCSSNames];\n    parserNames.sort();\n    if (allNames.join("|") !== parserNames.join("|"))\n      throw new Error(`Please keep customCSSNames in sync with evaluator engines: ${allNames.join("|")} vs ${parserNames.join("|")}`);\n  }\n  begin() {\n    ++this._retainCacheCounter;\n  }\n  end() {\n    --this._retainCacheCounter;\n    if (!this._retainCacheCounter) {\n      this._cacheQueryCSS.clear();\n      this._cacheMatches.clear();\n      this._cacheQuery.clear();\n      this._cacheMatchesSimple.clear();\n      this._cacheMatchesParents.clear();\n      this._cacheCallMatches.clear();\n      this._cacheCallQuery.clear();\n      this._cacheQuerySimple.clear();\n      this._cacheText.clear();\n    }\n  }\n  _cached(cache, main, rest, cb) {\n    if (!cache.has(main))\n      cache.set(main, []);\n    const entries = cache.get(main);\n    const entry = entries.find((e) => rest.every((value, index) => e.rest[index] === value));\n    if (entry)\n      return entry.result;\n    const result = cb();\n    entries.push({ rest, result });\n    return result;\n  }\n  _checkSelector(s) {\n    const wellFormed = typeof s === "object" && s && (Array.isArray(s) || "simples" in s && s.simples.length);\n    if (!wellFormed)\n      throw new Error(`Malformed selector "${s}"`);\n    return s;\n  }\n  matches(element, s, context) {\n    const selector = this._checkSelector(s);\n    this.begin();\n    try {\n      return this._cached(this._cacheMatches, element, [selector, context.scope, context.pierceShadow, context.originalScope], () => {\n        if (Array.isArray(selector))\n          return this._matchesEngine(isEngine, element, selector, context);\n        if (this._hasScopeClause(selector))\n          context = this._expandContextForScopeMatching(context);\n        if (!this._matchesSimple(element, selector.simples[selector.simples.length - 1].selector, context))\n          return false;\n        return this._matchesParents(element, selector, selector.simples.length - 2, context);\n      });\n    } finally {\n      this.end();\n    }\n  }\n  query(context, s) {\n    const selector = this._checkSelector(s);\n    this.begin();\n    try {\n      return this._cached(this._cacheQuery, selector, [context.scope, context.pierceShadow, context.originalScope], () => {\n        if (Array.isArray(selector))\n          return this._queryEngine(isEngine, context, selector);\n        if (this._hasScopeClause(selector))\n          context = this._expandContextForScopeMatching(context);\n        const previousScoreMap = this._scoreMap;\n        this._scoreMap = /* @__PURE__ */ new Map();\n        let elements = this._querySimple(context, selector.simples[selector.simples.length - 1].selector);\n        elements = elements.filter((element) => this._matchesParents(element, selector, selector.simples.length - 2, context));\n        if (this._scoreMap.size) {\n          elements.sort((a, b) => {\n            const aScore = this._scoreMap.get(a);\n            const bScore = this._scoreMap.get(b);\n            if (aScore === bScore)\n              return 0;\n            if (aScore === void 0)\n              return 1;\n            if (bScore === void 0)\n              return -1;\n            return aScore - bScore;\n          });\n        }\n        this._scoreMap = previousScoreMap;\n        return elements;\n      });\n    } finally {\n      this.end();\n    }\n  }\n  _markScore(element, score) {\n    if (this._scoreMap)\n      this._scoreMap.set(element, score);\n  }\n  _hasScopeClause(selector) {\n    return selector.simples.some((simple) => simple.selector.functions.some((f) => f.name === "scope"));\n  }\n  _expandContextForScopeMatching(context) {\n    if (context.scope.nodeType !== 1)\n      return context;\n    const scope = parentElementOrShadowHost(context.scope);\n    if (!scope)\n      return context;\n    return { ...context, scope, originalScope: context.originalScope || context.scope };\n  }\n  _matchesSimple(element, simple, context) {\n    return this._cached(this._cacheMatchesSimple, element, [simple, context.scope, context.pierceShadow, context.originalScope], () => {\n      if (element === context.scope)\n        return false;\n      if (simple.css && !this._matchesCSS(element, simple.css))\n        return false;\n      for (const func of simple.functions) {\n        if (!this._matchesEngine(this._getEngine(func.name), element, func.args, context))\n          return false;\n      }\n      return true;\n    });\n  }\n  _querySimple(context, simple) {\n    if (!simple.functions.length)\n      return this._queryCSS(context, simple.css || "*");\n    return this._cached(this._cacheQuerySimple, simple, [context.scope, context.pierceShadow, context.originalScope], () => {\n      let css = simple.css;\n      const funcs = simple.functions;\n      if (css === "*" && funcs.length)\n        css = void 0;\n      let elements;\n      let firstIndex = -1;\n      if (css !== void 0) {\n        elements = this._queryCSS(context, css);\n      } else {\n        firstIndex = funcs.findIndex((func) => this._getEngine(func.name).query !== void 0);\n        if (firstIndex === -1)\n          firstIndex = 0;\n        elements = this._queryEngine(this._getEngine(funcs[firstIndex].name), context, funcs[firstIndex].args);\n      }\n      for (let i = 0; i < funcs.length; i++) {\n        if (i === firstIndex)\n          continue;\n        const engine = this._getEngine(funcs[i].name);\n        if (engine.matches !== void 0)\n          elements = elements.filter((e) => this._matchesEngine(engine, e, funcs[i].args, context));\n      }\n      for (let i = 0; i < funcs.length; i++) {\n        if (i === firstIndex)\n          continue;\n        const engine = this._getEngine(funcs[i].name);\n        if (engine.matches === void 0)\n          elements = elements.filter((e) => this._matchesEngine(engine, e, funcs[i].args, context));\n      }\n      return elements;\n    });\n  }\n  _matchesParents(element, complex, index, context) {\n    if (index < 0)\n      return true;\n    return this._cached(this._cacheMatchesParents, element, [complex, index, context.scope, context.pierceShadow, context.originalScope], () => {\n      const { selector: simple, combinator } = complex.simples[index];\n      if (combinator === ">") {\n        const parent = parentElementOrShadowHostInContext(element, context);\n        if (!parent || !this._matchesSimple(parent, simple, context))\n          return false;\n        return this._matchesParents(parent, complex, index - 1, context);\n      }\n      if (combinator === "+") {\n        const previousSibling = previousSiblingInContext(element, context);\n        if (!previousSibling || !this._matchesSimple(previousSibling, simple, context))\n          return false;\n        return this._matchesParents(previousSibling, complex, index - 1, context);\n      }\n      if (combinator === "") {\n        let parent = parentElementOrShadowHostInContext(element, context);\n        while (parent) {\n          if (this._matchesSimple(parent, simple, context)) {\n            if (this._matchesParents(parent, complex, index - 1, context))\n              return true;\n            if (complex.simples[index - 1].combinator === "")\n              break;\n          }\n          parent = parentElementOrShadowHostInContext(parent, context);\n        }\n        return false;\n      }\n      if (combinator === "~") {\n        let previousSibling = previousSiblingInContext(element, context);\n        while (previousSibling) {\n          if (this._matchesSimple(previousSibling, simple, context)) {\n            if (this._matchesParents(previousSibling, complex, index - 1, context))\n              return true;\n            if (complex.simples[index - 1].combinator === "~")\n              break;\n          }\n          previousSibling = previousSiblingInContext(previousSibling, context);\n        }\n        return false;\n      }\n      if (combinator === ">=") {\n        let parent = element;\n        while (parent) {\n          if (this._matchesSimple(parent, simple, context)) {\n            if (this._matchesParents(parent, complex, index - 1, context))\n              return true;\n            if (complex.simples[index - 1].combinator === "")\n              break;\n          }\n          parent = parentElementOrShadowHostInContext(parent, context);\n        }\n        return false;\n      }\n      throw new Error(`Unsupported combinator "${combinator}"`);\n    });\n  }\n  _matchesEngine(engine, element, args, context) {\n    if (engine.matches)\n      return this._callMatches(engine, element, args, context);\n    if (engine.query)\n      return this._callQuery(engine, args, context).includes(element);\n    throw new Error(`Selector engine should implement "matches" or "query"`);\n  }\n  _queryEngine(engine, context, args) {\n    if (engine.query)\n      return this._callQuery(engine, args, context);\n    if (engine.matches)\n      return this._queryCSS(context, "*").filter((element) => this._callMatches(engine, element, args, context));\n    throw new Error(`Selector engine should implement "matches" or "query"`);\n  }\n  _callMatches(engine, element, args, context) {\n    return this._cached(this._cacheCallMatches, element, [engine, context.scope, context.pierceShadow, context.originalScope, ...args], () => {\n      return engine.matches(element, args, context, this);\n    });\n  }\n  _callQuery(engine, args, context) {\n    return this._cached(this._cacheCallQuery, engine, [context.scope, context.pierceShadow, context.originalScope, ...args], () => {\n      return engine.query(context, args, this);\n    });\n  }\n  _matchesCSS(element, css) {\n    return element.matches(css);\n  }\n  _queryCSS(context, css) {\n    return this._cached(this._cacheQueryCSS, css, [context.scope, context.pierceShadow, context.originalScope], () => {\n      let result = [];\n      function query(root) {\n        result = result.concat([...root.querySelectorAll(css)]);\n        if (!context.pierceShadow)\n          return;\n        if (root.shadowRoot)\n          query(root.shadowRoot);\n        for (const element of root.querySelectorAll("*")) {\n          if (element.shadowRoot)\n            query(element.shadowRoot);\n        }\n      }\n      query(context.scope);\n      return result;\n    });\n  }\n  _getEngine(name) {\n    const engine = this._engines.get(name);\n    if (!engine)\n      throw new Error(`Unknown selector engine "${name}"`);\n    return engine;\n  }\n};\nvar isEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length === 0)\n      throw new Error(`"is" engine expects non-empty selector list`);\n    return args.some((selector) => evaluator.matches(element, selector, context));\n  },\n  query(context, args, evaluator) {\n    if (args.length === 0)\n      throw new Error(`"is" engine expects non-empty selector list`);\n    let elements = [];\n    for (const arg of args)\n      elements = elements.concat(evaluator.query(context, arg));\n    return args.length === 1 ? elements : sortInDOMOrder(elements);\n  }\n};\nvar hasEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length === 0)\n      throw new Error(`"has" engine expects non-empty selector list`);\n    return evaluator.query({ ...context, scope: element }, args).length > 0;\n  }\n  // TODO: we can implement efficient "query" by matching "args" and returning\n  // all parents/descendants, just have to be careful with the ":scope" matching.\n};\nvar scopeEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length !== 0)\n      throw new Error(`"scope" engine expects no arguments`);\n    const actualScope = context.originalScope || context.scope;\n    if (actualScope.nodeType === 9)\n      return element === actualScope.documentElement;\n    return element === actualScope;\n  },\n  query(context, args, evaluator) {\n    if (args.length !== 0)\n      throw new Error(`"scope" engine expects no arguments`);\n    const actualScope = context.originalScope || context.scope;\n    if (actualScope.nodeType === 9) {\n      const root = actualScope.documentElement;\n      return root ? [root] : [];\n    }\n    if (actualScope.nodeType === 1)\n      return [actualScope];\n    return [];\n  }\n};\nvar notEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length === 0)\n      throw new Error(`"not" engine expects non-empty selector list`);\n    return !evaluator.matches(element, args, context);\n  }\n};\nvar lightEngine = {\n  query(context, args, evaluator) {\n    return evaluator.query({ ...context, pierceShadow: false }, args);\n  },\n  matches(element, args, context, evaluator) {\n    return evaluator.matches(element, args, { ...context, pierceShadow: false });\n  }\n};\nvar visibleEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length)\n      throw new Error(`"visible" engine expects no arguments`);\n    return isElementVisible(element);\n  }\n};\nvar textEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length !== 1 || typeof args[0] !== "string")\n      throw new Error(`"text" engine expects a single string`);\n    const text = normalizeWhiteSpace(args[0]).toLowerCase();\n    const matcher = (elementText2) => elementText2.normalized.toLowerCase().includes(text);\n    return elementMatchesText(evaluator._cacheText, element, matcher) === "self";\n  }\n};\nvar textIsEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length !== 1 || typeof args[0] !== "string")\n      throw new Error(`"text-is" engine expects a single string`);\n    const text = normalizeWhiteSpace(args[0]);\n    const matcher = (elementText2) => {\n      if (!text && !elementText2.immediate.length)\n        return true;\n      return elementText2.immediate.some((s) => normalizeWhiteSpace(s) === text);\n    };\n    return elementMatchesText(evaluator._cacheText, element, matcher) !== "none";\n  }\n};\nvar textMatchesEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length === 0 || typeof args[0] !== "string" || args.length > 2 || args.length === 2 && typeof args[1] !== "string")\n      throw new Error(`"text-matches" engine expects a regexp body and optional regexp flags`);\n    const re = new RegExp(args[0], args.length === 2 ? args[1] : void 0);\n    const matcher = (elementText2) => re.test(elementText2.full);\n    return elementMatchesText(evaluator._cacheText, element, matcher) === "self";\n  }\n};\nvar hasTextEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length !== 1 || typeof args[0] !== "string")\n      throw new Error(`"has-text" engine expects a single string`);\n    if (shouldSkipForTextMatching(element))\n      return false;\n    const text = normalizeWhiteSpace(args[0]).toLowerCase();\n    const matcher = (elementText2) => elementText2.normalized.toLowerCase().includes(text);\n    return matcher(elementText(evaluator._cacheText, element));\n  }\n};\nfunction createLayoutEngine(name) {\n  return {\n    matches(element, args, context, evaluator) {\n      const maxDistance = args.length && typeof args[args.length - 1] === "number" ? args[args.length - 1] : void 0;\n      const queryArgs = maxDistance === void 0 ? args : args.slice(0, args.length - 1);\n      if (args.length < 1 + (maxDistance === void 0 ? 0 : 1))\n        throw new Error(`"${name}" engine expects a selector list and optional maximum distance in pixels`);\n      const inner = evaluator.query(context, queryArgs);\n      const score = layoutSelectorScore(name, element, inner, maxDistance);\n      if (score === void 0)\n        return false;\n      evaluator._markScore(element, score);\n      return true;\n    }\n  };\n}\nvar nthMatchEngine = {\n  query(context, args, evaluator) {\n    let index = args[args.length - 1];\n    if (args.length < 2)\n      throw new Error(`"nth-match" engine expects non-empty selector list and an index argument`);\n    if (typeof index !== "number" || index < 1)\n      throw new Error(`"nth-match" engine expects a one-based index as the last argument`);\n    const elements = isEngine.query(context, args.slice(0, args.length - 1), evaluator);\n    index--;\n    return index < elements.length ? [elements[index]] : [];\n  }\n};\nfunction parentElementOrShadowHostInContext(element, context) {\n  if (element === context.scope)\n    return;\n  if (!context.pierceShadow)\n    return element.parentElement || void 0;\n  return parentElementOrShadowHost(element);\n}\nfunction previousSiblingInContext(element, context) {\n  if (element === context.scope)\n    return;\n  return element.previousElementSibling || void 0;\n}\nfunction sortInDOMOrder(elements) {\n  const elementToEntry = /* @__PURE__ */ new Map();\n  const roots = [];\n  const result = [];\n  function append(element) {\n    let entry = elementToEntry.get(element);\n    if (entry)\n      return entry;\n    const parent = parentElementOrShadowHost(element);\n    if (parent) {\n      const parentEntry = append(parent);\n      parentEntry.children.push(element);\n    } else {\n      roots.push(element);\n    }\n    entry = { children: [], taken: false };\n    elementToEntry.set(element, entry);\n    return entry;\n  }\n  for (const e of elements)\n    append(e).taken = true;\n  function visit(element) {\n    const entry = elementToEntry.get(element);\n    if (entry.taken)\n      result.push(element);\n    if (entry.children.length > 1) {\n      const set = new Set(entry.children);\n      entry.children = [];\n      let child = element.firstElementChild;\n      while (child && entry.children.length < set.size) {\n        if (set.has(child))\n          entry.children.push(child);\n        child = child.nextElementSibling;\n      }\n      child = element.shadowRoot ? element.shadowRoot.firstElementChild : null;\n      while (child && entry.children.length < set.size) {\n        if (set.has(child))\n          entry.children.push(child);\n        child = child.nextElementSibling;\n      }\n    }\n    entry.children.forEach(visit);\n  }\n  roots.forEach(visit);\n  return result;\n}\n\n// packages/playwright-core/src/server/injected/selectorGenerator.ts\nvar cacheAllowText = /* @__PURE__ */ new Map();\nvar cacheDisallowText = /* @__PURE__ */ new Map();\nvar kTextScoreRange = 10;\nvar kExactPenalty = kTextScoreRange / 2;\nvar kTestIdScore = 1;\nvar kOtherTestIdScore = 2;\nvar kIframeByAttributeScore = 10;\nvar kBeginPenalizedScore = 50;\nvar kRoleWithNameScore = 100;\nvar kPlaceholderScore = 120;\nvar kLabelScore = 140;\nvar kAltTextScore = 160;\nvar kTextScore = 180;\nvar kTitleScore = 200;\nvar kTextScoreRegex = 250;\nvar kPlaceholderScoreExact = kPlaceholderScore + kExactPenalty;\nvar kLabelScoreExact = kLabelScore + kExactPenalty;\nvar kRoleWithNameScoreExact = kRoleWithNameScore + kExactPenalty;\nvar kAltTextScoreExact = kAltTextScore + kExactPenalty;\nvar kTextScoreExact = kTextScore + kExactPenalty;\nvar kTitleScoreExact = kTitleScore + kExactPenalty;\nvar kEndPenalizedScore = 300;\nvar kCSSIdScore = 500;\nvar kRoleWithoutNameScore = 510;\nvar kCSSInputTypeNameScore = 520;\nvar kCSSTagNameScore = 530;\nvar kNthScore = 1e4;\nvar kCSSFallbackScore = 1e7;\nvar kScoreThresholdForTextExpect = 1e3;\nfunction generateSelector(injectedScript, targetElement, options) {\n  var _a;\n  injectedScript._evaluator.begin();\n  beginAriaCaches();\n  try {\n    let selectors = [];\n    if (options.forTextExpect) {\n      let targetTokens = cssFallback(injectedScript, targetElement.ownerDocument.documentElement, options);\n      for (let element = targetElement; element; element = parentElementOrShadowHost(element)) {\n        const tokens = generateSelectorFor(injectedScript, element, { ...options, noText: true });\n        if (!tokens)\n          continue;\n        const score = combineScores(tokens);\n        if (score <= kScoreThresholdForTextExpect) {\n          targetTokens = tokens;\n          break;\n        }\n      }\n      selectors = [joinTokens(targetTokens)];\n    } else {\n      if (!targetElement.matches("input,textarea,select") && !targetElement.isContentEditable) {\n        const interactiveParent = closestCrossShadow(targetElement, "button,select,input,[role=button],[role=checkbox],[role=radio],a,[role=link]", options.root);\n        if (interactiveParent && isElementVisible(interactiveParent))\n          targetElement = interactiveParent;\n      }\n      if (options.multiple) {\n        const withText = generateSelectorFor(injectedScript, targetElement, options);\n        const withoutText = generateSelectorFor(injectedScript, targetElement, { ...options, noText: true });\n        let tokens = [withText, withoutText];\n        cacheAllowText.clear();\n        cacheDisallowText.clear();\n        if (withText && hasCSSIdToken(withText))\n          tokens.push(generateSelectorFor(injectedScript, targetElement, { ...options, noCSSId: true }));\n        if (withoutText && hasCSSIdToken(withoutText))\n          tokens.push(generateSelectorFor(injectedScript, targetElement, { ...options, noText: true, noCSSId: true }));\n        tokens = tokens.filter(Boolean);\n        if (!tokens.length) {\n          const css = cssFallback(injectedScript, targetElement, options);\n          tokens.push(css);\n          if (hasCSSIdToken(css))\n            tokens.push(cssFallback(injectedScript, targetElement, { ...options, noCSSId: true }));\n        }\n        selectors = [...new Set(tokens.map((t) => joinTokens(t)))];\n      } else {\n        const targetTokens = generateSelectorFor(injectedScript, targetElement, options) || cssFallback(injectedScript, targetElement, options);\n        selectors = [joinTokens(targetTokens)];\n      }\n    }\n    const selector = selectors[0];\n    const parsedSelector = injectedScript.parseSelector(selector);\n    return {\n      selector,\n      selectors,\n      elements: injectedScript.querySelectorAll(parsedSelector, (_a = options.root) != null ? _a : targetElement.ownerDocument)\n    };\n  } finally {\n    cacheAllowText.clear();\n    cacheDisallowText.clear();\n    endAriaCaches();\n    injectedScript._evaluator.end();\n  }\n}\nfunction filterRegexTokens(textCandidates) {\n  return textCandidates.filter((c) => c[0].selector[0] !== "/");\n}\nfunction generateSelectorFor(injectedScript, targetElement, options) {\n  if (options.root && !isInsideScope(options.root, targetElement))\n    throw new Error(`Target element must belong to the root\'s subtree`);\n  if (targetElement === options.root)\n    return [{ engine: "css", selector: ":scope", score: 1 }];\n  if (targetElement.ownerDocument.documentElement === targetElement)\n    return [{ engine: "css", selector: "html", score: 1 }];\n  const calculate = (element, allowText) => {\n    var _a;\n    const allowNthMatch = element === targetElement;\n    let textCandidates = allowText ? buildTextCandidates(injectedScript, element, element === targetElement) : [];\n    if (element !== targetElement) {\n      textCandidates = filterRegexTokens(textCandidates);\n    }\n    const noTextCandidates = buildNoTextCandidates(injectedScript, element, options).filter((token) => !options.omitInternalEngines || !token.engine.startsWith("internal:")).map((token) => [token]);\n    let result = chooseFirstSelector(injectedScript, (_a = options.root) != null ? _a : targetElement.ownerDocument, element, [...textCandidates, ...noTextCandidates], allowNthMatch);\n    textCandidates = filterRegexTokens(textCandidates);\n    const checkWithText = (textCandidatesToUse) => {\n      const allowParentText = allowText && !textCandidatesToUse.length;\n      const candidates = [...textCandidatesToUse, ...noTextCandidates].filter((c) => {\n        if (!result)\n          return true;\n        return combineScores(c) < combineScores(result);\n      });\n      let bestPossibleInParent = candidates[0];\n      if (!bestPossibleInParent)\n        return;\n      for (let parent = parentElementOrShadowHost(element); parent && parent !== options.root; parent = parentElementOrShadowHost(parent)) {\n        const parentTokens = calculateCached(parent, allowParentText);\n        if (!parentTokens)\n          continue;\n        if (result && combineScores([...parentTokens, ...bestPossibleInParent]) >= combineScores(result))\n          continue;\n        bestPossibleInParent = chooseFirstSelector(injectedScript, parent, element, candidates, allowNthMatch);\n        if (!bestPossibleInParent)\n          return;\n        const combined = [...parentTokens, ...bestPossibleInParent];\n        if (!result || combineScores(combined) < combineScores(result))\n          result = combined;\n      }\n    };\n    checkWithText(textCandidates);\n    if (element === targetElement && textCandidates.length)\n      checkWithText([]);\n    return result;\n  };\n  const calculateCached = (element, allowText) => {\n    const cache = allowText ? cacheAllowText : cacheDisallowText;\n    let value = cache.get(element);\n    if (value === void 0) {\n      value = calculate(element, allowText);\n      cache.set(element, value);\n    }\n    return value;\n  };\n  return calculate(targetElement, !options.noText);\n}\nfunction buildNoTextCandidates(injectedScript, element, options) {\n  const candidates = [];\n  {\n    for (const attr of ["data-testid", "data-test-id", "data-test"]) {\n      if (attr !== options.testIdAttributeName && element.getAttribute(attr))\n        candidates.push({ engine: "css", selector: `[${attr}=${quoteCSSAttributeValue(element.getAttribute(attr))}]`, score: kOtherTestIdScore });\n    }\n    if (!options.noCSSId) {\n      const idAttr = element.getAttribute("id");\n      if (idAttr && !isGuidLike(idAttr))\n        candidates.push({ engine: "css", selector: makeSelectorForId(idAttr), score: kCSSIdScore });\n    }\n    candidates.push({ engine: "css", selector: cssEscape(element.nodeName.toLowerCase()), score: kCSSTagNameScore });\n  }\n  if (element.nodeName === "IFRAME") {\n    for (const attribute of ["name", "title"]) {\n      if (element.getAttribute(attribute))\n        candidates.push({ engine: "css", selector: `${cssEscape(element.nodeName.toLowerCase())}[${attribute}=${quoteCSSAttributeValue(element.getAttribute(attribute))}]`, score: kIframeByAttributeScore });\n    }\n    if (element.getAttribute(options.testIdAttributeName))\n      candidates.push({ engine: "css", selector: `[${options.testIdAttributeName}=${quoteCSSAttributeValue(element.getAttribute(options.testIdAttributeName))}]`, score: kTestIdScore });\n    penalizeScoreForLength([candidates]);\n    return candidates;\n  }\n  if (element.getAttribute(options.testIdAttributeName))\n    candidates.push({ engine: "internal:testid", selector: `[${options.testIdAttributeName}=${escapeForAttributeSelector(element.getAttribute(options.testIdAttributeName), true)}]`, score: kTestIdScore });\n  if (element.nodeName === "INPUT" || element.nodeName === "TEXTAREA") {\n    const input = element;\n    if (input.placeholder) {\n      candidates.push({ engine: "internal:attr", selector: `[placeholder=${escapeForAttributeSelector(input.placeholder, true)}]`, score: kPlaceholderScoreExact });\n      for (const alternative of suitableTextAlternatives(input.placeholder))\n        candidates.push({ engine: "internal:attr", selector: `[placeholder=${escapeForAttributeSelector(alternative.text, false)}]`, score: kPlaceholderScore - alternative.scoreBonus });\n    }\n  }\n  const labels = getElementLabels(injectedScript._evaluator._cacheText, element);\n  for (const label of labels) {\n    const labelText = label.normalized;\n    candidates.push({ engine: "internal:label", selector: escapeForTextSelector(labelText, true), score: kLabelScoreExact });\n    for (const alternative of suitableTextAlternatives(labelText))\n      candidates.push({ engine: "internal:label", selector: escapeForTextSelector(alternative.text, false), score: kLabelScore - alternative.scoreBonus });\n  }\n  const ariaRole = getAriaRole(element);\n  if (ariaRole && !["none", "presentation"].includes(ariaRole))\n    candidates.push({ engine: "internal:role", selector: ariaRole, score: kRoleWithoutNameScore });\n  if (element.getAttribute("name") && ["BUTTON", "FORM", "FIELDSET", "FRAME", "IFRAME", "INPUT", "KEYGEN", "OBJECT", "OUTPUT", "SELECT", "TEXTAREA", "MAP", "META", "PARAM"].includes(element.nodeName))\n    candidates.push({ engine: "css", selector: `${cssEscape(element.nodeName.toLowerCase())}[name=${quoteCSSAttributeValue(element.getAttribute("name"))}]`, score: kCSSInputTypeNameScore });\n  if (["INPUT", "TEXTAREA"].includes(element.nodeName) && element.getAttribute("type") !== "hidden") {\n    if (element.getAttribute("type"))\n      candidates.push({ engine: "css", selector: `${cssEscape(element.nodeName.toLowerCase())}[type=${quoteCSSAttributeValue(element.getAttribute("type"))}]`, score: kCSSInputTypeNameScore });\n  }\n  if (["INPUT", "TEXTAREA", "SELECT"].includes(element.nodeName) && element.getAttribute("type") !== "hidden")\n    candidates.push({ engine: "css", selector: cssEscape(element.nodeName.toLowerCase()), score: kCSSInputTypeNameScore + 1 });\n  penalizeScoreForLength([candidates]);\n  return candidates;\n}\nfunction buildTextCandidates(injectedScript, element, isTargetNode) {\n  if (element.nodeName === "SELECT")\n    return [];\n  const candidates = [];\n  const title = element.getAttribute("title");\n  if (title) {\n    candidates.push([{ engine: "internal:attr", selector: `[title=${escapeForAttributeSelector(title, true)}]`, score: kTitleScoreExact }]);\n    for (const alternative of suitableTextAlternatives(title))\n      candidates.push([{ engine: "internal:attr", selector: `[title=${escapeForAttributeSelector(alternative.text, false)}]`, score: kTitleScore - alternative.scoreBonus }]);\n  }\n  const alt = element.getAttribute("alt");\n  if (alt && ["APPLET", "AREA", "IMG", "INPUT"].includes(element.nodeName)) {\n    candidates.push([{ engine: "internal:attr", selector: `[alt=${escapeForAttributeSelector(alt, true)}]`, score: kAltTextScoreExact }]);\n    for (const alternative of suitableTextAlternatives(alt))\n      candidates.push([{ engine: "internal:attr", selector: `[alt=${escapeForAttributeSelector(alternative.text, false)}]`, score: kAltTextScore - alternative.scoreBonus }]);\n  }\n  const text = elementText(injectedScript._evaluator._cacheText, element).normalized;\n  const textAlternatives = text ? suitableTextAlternatives(text) : [];\n  if (text) {\n    if (isTargetNode) {\n      if (text.length <= 80)\n        candidates.push([{ engine: "internal:text", selector: escapeForTextSelector(text, true), score: kTextScoreExact }]);\n      for (const alternative of textAlternatives)\n        candidates.push([{ engine: "internal:text", selector: escapeForTextSelector(alternative.text, false), score: kTextScore - alternative.scoreBonus }]);\n    }\n    const cssToken = { engine: "css", selector: cssEscape(element.nodeName.toLowerCase()), score: kCSSTagNameScore };\n    for (const alternative of textAlternatives)\n      candidates.push([cssToken, { engine: "internal:has-text", selector: escapeForTextSelector(alternative.text, false), score: kTextScore - alternative.scoreBonus }]);\n    if (text.length <= 80) {\n      const re = new RegExp("^" + escapeRegExp(text) + "$");\n      candidates.push([cssToken, { engine: "internal:has-text", selector: escapeForTextSelector(re, false), score: kTextScoreRegex }]);\n    }\n  }\n  const ariaRole = getAriaRole(element);\n  if (ariaRole && !["none", "presentation"].includes(ariaRole)) {\n    const ariaName = getElementAccessibleName(element, false);\n    if (ariaName) {\n      const roleToken = { engine: "internal:role", selector: `${ariaRole}[name=${escapeForAttributeSelector(ariaName, true)}]`, score: kRoleWithNameScoreExact };\n      candidates.push([roleToken]);\n      for (const alternative of suitableTextAlternatives(ariaName))\n        candidates.push([{ engine: "internal:role", selector: `${ariaRole}[name=${escapeForAttributeSelector(alternative.text, false)}]`, score: kRoleWithNameScore - alternative.scoreBonus }]);\n    } else {\n      const roleToken = { engine: "internal:role", selector: `${ariaRole}`, score: kRoleWithoutNameScore };\n      for (const alternative of textAlternatives)\n        candidates.push([roleToken, { engine: "internal:has-text", selector: escapeForTextSelector(alternative.text, false), score: kTextScore - alternative.scoreBonus }]);\n      if (text.length <= 80) {\n        const re = new RegExp("^" + escapeRegExp(text) + "$");\n        candidates.push([roleToken, { engine: "internal:has-text", selector: escapeForTextSelector(re, false), score: kTextScoreRegex }]);\n      }\n    }\n  }\n  penalizeScoreForLength(candidates);\n  return candidates;\n}\nfunction makeSelectorForId(id) {\n  return /^[a-zA-Z][a-zA-Z0-9\\-\\_]+$/.test(id) ? "#" + id : `[id="${cssEscape(id)}"]`;\n}\nfunction hasCSSIdToken(tokens) {\n  return tokens.some((token) => token.engine === "css" && (token.selector.startsWith("#") || token.selector.startsWith(\'[id="\')));\n}\nfunction cssFallback(injectedScript, targetElement, options) {\n  var _a;\n  const root = (_a = options.root) != null ? _a : targetElement.ownerDocument;\n  const tokens = [];\n  function uniqueCSSSelector(prefix) {\n    const path = tokens.slice();\n    if (prefix)\n      path.unshift(prefix);\n    const selector = path.join(" > ");\n    const parsedSelector = injectedScript.parseSelector(selector);\n    const node = injectedScript.querySelector(parsedSelector, root, false);\n    return node === targetElement ? selector : void 0;\n  }\n  function makeStrict(selector) {\n    const token = { engine: "css", selector, score: kCSSFallbackScore };\n    const parsedSelector = injectedScript.parseSelector(selector);\n    const elements = injectedScript.querySelectorAll(parsedSelector, root);\n    if (elements.length === 1)\n      return [token];\n    const nth = { engine: "nth", selector: String(elements.indexOf(targetElement)), score: kNthScore };\n    return [token, nth];\n  }\n  for (let element = targetElement; element && element !== root; element = parentElementOrShadowHost(element)) {\n    const nodeName = element.nodeName.toLowerCase();\n    let bestTokenForLevel = "";\n    if (element.id && !options.noCSSId) {\n      const token = makeSelectorForId(element.id);\n      const selector = uniqueCSSSelector(token);\n      if (selector)\n        return makeStrict(selector);\n      bestTokenForLevel = token;\n    }\n    const parent = element.parentNode;\n    const classes = [...element.classList];\n    for (let i = 0; i < classes.length; ++i) {\n      const token = "." + cssEscape(classes.slice(0, i + 1).join("."));\n      const selector = uniqueCSSSelector(token);\n      if (selector)\n        return makeStrict(selector);\n      if (!bestTokenForLevel && parent) {\n        const sameClassSiblings = parent.querySelectorAll(token);\n        if (sameClassSiblings.length === 1)\n          bestTokenForLevel = token;\n      }\n    }\n    if (parent) {\n      const siblings = [...parent.children];\n      const sameTagSiblings = siblings.filter((sibling) => sibling.nodeName.toLowerCase() === nodeName);\n      const token = sameTagSiblings.indexOf(element) === 0 ? cssEscape(nodeName) : `${cssEscape(nodeName)}:nth-child(${1 + siblings.indexOf(element)})`;\n      const selector = uniqueCSSSelector(token);\n      if (selector)\n        return makeStrict(selector);\n      if (!bestTokenForLevel)\n        bestTokenForLevel = token;\n    } else if (!bestTokenForLevel) {\n      bestTokenForLevel = cssEscape(nodeName);\n    }\n    tokens.unshift(bestTokenForLevel);\n  }\n  return makeStrict(uniqueCSSSelector());\n}\nfunction penalizeScoreForLength(groups) {\n  for (const group of groups) {\n    for (const token of group) {\n      if (token.score > kBeginPenalizedScore && token.score < kEndPenalizedScore)\n        token.score += Math.min(kTextScoreRange, token.selector.length / 10 | 0);\n    }\n  }\n}\nfunction joinTokens(tokens) {\n  const parts = [];\n  let lastEngine = "";\n  for (const { engine, selector } of tokens) {\n    if (parts.length && (lastEngine !== "css" || engine !== "css" || selector.startsWith(":nth-match(")))\n      parts.push(">>");\n    lastEngine = engine;\n    if (engine === "css")\n      parts.push(selector);\n    else\n      parts.push(`${engine}=${selector}`);\n  }\n  return parts.join(" ");\n}\nfunction combineScores(tokens) {\n  let score = 0;\n  for (let i = 0; i < tokens.length; i++)\n    score += tokens[i].score * (tokens.length - i);\n  return score;\n}\nfunction chooseFirstSelector(injectedScript, scope, targetElement, selectors, allowNthMatch) {\n  const joined = selectors.map((tokens) => ({ tokens, score: combineScores(tokens) }));\n  joined.sort((a, b) => a.score - b.score);\n  let bestWithIndex = null;\n  for (const { tokens } of joined) {\n    const parsedSelector = injectedScript.parseSelector(joinTokens(tokens));\n    const result = injectedScript.querySelectorAll(parsedSelector, scope);\n    if (result[0] === targetElement && result.length === 1) {\n      return tokens;\n    }\n    const index = result.indexOf(targetElement);\n    if (!allowNthMatch || bestWithIndex || index === -1 || result.length > 5)\n      continue;\n    const nth = { engine: "nth", selector: String(index), score: kNthScore };\n    bestWithIndex = [...tokens, nth];\n  }\n  return bestWithIndex;\n}\nfunction isGuidLike(id) {\n  let lastCharacterType;\n  let transitionCount = 0;\n  for (let i = 0; i < id.length; ++i) {\n    const c = id[i];\n    let characterType;\n    if (c === "-" || c === "_")\n      continue;\n    if (c >= "a" && c <= "z")\n      characterType = "lower";\n    else if (c >= "A" && c <= "Z")\n      characterType = "upper";\n    else if (c >= "0" && c <= "9")\n      characterType = "digit";\n    else\n      characterType = "other";\n    if (characterType === "lower" && lastCharacterType === "upper") {\n      lastCharacterType = characterType;\n      continue;\n    }\n    if (lastCharacterType && lastCharacterType !== characterType)\n      ++transitionCount;\n    lastCharacterType = characterType;\n  }\n  return transitionCount >= id.length / 4;\n}\nfunction trimWordBoundary(text, maxLength) {\n  if (text.length <= maxLength)\n    return text;\n  text = text.substring(0, maxLength);\n  const match = text.match(/^(.*)\\b(.+?)$/);\n  if (!match)\n    return "";\n  return match[1].trimEnd();\n}\nfunction suitableTextAlternatives(text) {\n  let result = [];\n  {\n    const match = text.match(/^([\\d.,]+)[^.,\\w]/);\n    const leadingNumberLength = match ? match[1].length : 0;\n    if (leadingNumberLength) {\n      const alt = trimWordBoundary(text.substring(leadingNumberLength).trimStart(), 80);\n      result.push({ text: alt, scoreBonus: alt.length <= 30 ? 2 : 1 });\n    }\n  }\n  {\n    const match = text.match(/[^.,\\w]([\\d.,]+)$/);\n    const trailingNumberLength = match ? match[1].length : 0;\n    if (trailingNumberLength) {\n      const alt = trimWordBoundary(text.substring(0, text.length - trailingNumberLength).trimEnd(), 80);\n      result.push({ text: alt, scoreBonus: alt.length <= 30 ? 2 : 1 });\n    }\n  }\n  if (text.length <= 30) {\n    result.push({ text, scoreBonus: 0 });\n  } else {\n    result.push({ text: trimWordBoundary(text, 80), scoreBonus: 0 });\n    result.push({ text: trimWordBoundary(text, 30), scoreBonus: 1 });\n  }\n  result = result.filter((r) => r.text);\n  if (!result.length)\n    result.push({ text: text.substring(0, 80), scoreBonus: 0 });\n  return result;\n}\n\n// packages/playwright-core/src/server/injected/vueSelectorEngine.ts\nfunction basename(filename, ext) {\n  const normalized = filename.replace(/^[a-zA-Z]:/, "").replace(/\\\\/g, "/");\n  let result = normalized.substring(normalized.lastIndexOf("/") + 1);\n  if (ext && result.endsWith(ext))\n    result = result.substring(0, result.length - ext.length);\n  return result;\n}\nfunction toUpper(_, c) {\n  return c ? c.toUpperCase() : "";\n}\nvar classifyRE = /(?:^|[-_/])(\\w)/g;\nvar classify = (str) => {\n  return str && str.replace(classifyRE, toUpper);\n};\nfunction buildComponentsTreeVue3(instance) {\n  function getComponentTypeName(options) {\n    const name = options.name || options._componentTag || options.__playwright_guessedName;\n    if (name)\n      return name;\n    const file = options.__file;\n    if (file)\n      return classify(basename(file, ".vue"));\n  }\n  function saveComponentName(instance2, key) {\n    instance2.type.__playwright_guessedName = key;\n    return key;\n  }\n  function getInstanceName(instance2) {\n    var _a, _b, _c, _d;\n    const name = getComponentTypeName(instance2.type || {});\n    if (name)\n      return name;\n    if (instance2.root === instance2)\n      return "Root";\n    for (const key in (_b = (_a = instance2.parent) == null ? void 0 : _a.type) == null ? void 0 : _b.components) {\n      if (((_c = instance2.parent) == null ? void 0 : _c.type.components[key]) === instance2.type)\n        return saveComponentName(instance2, key);\n    }\n    for (const key in (_d = instance2.appContext) == null ? void 0 : _d.components) {\n      if (instance2.appContext.components[key] === instance2.type)\n        return saveComponentName(instance2, key);\n    }\n    return "Anonymous Component";\n  }\n  function isBeingDestroyed(instance2) {\n    return instance2._isBeingDestroyed || instance2.isUnmounted;\n  }\n  function isFragment(instance2) {\n    return instance2.subTree.type.toString() === "Symbol(Fragment)";\n  }\n  function getInternalInstanceChildren(subTree) {\n    const list = [];\n    if (subTree.component)\n      list.push(subTree.component);\n    if (subTree.suspense)\n      list.push(...getInternalInstanceChildren(subTree.suspense.activeBranch));\n    if (Array.isArray(subTree.children)) {\n      subTree.children.forEach((childSubTree) => {\n        if (childSubTree.component)\n          list.push(childSubTree.component);\n        else\n          list.push(...getInternalInstanceChildren(childSubTree));\n      });\n    }\n    return list.filter((child) => {\n      var _a;\n      return !isBeingDestroyed(child) && !((_a = child.type.devtools) == null ? void 0 : _a.hide);\n    });\n  }\n  function getRootElementsFromComponentInstance(instance2) {\n    if (isFragment(instance2))\n      return getFragmentRootElements(instance2.subTree);\n    return [instance2.subTree.el];\n  }\n  function getFragmentRootElements(vnode) {\n    if (!vnode.children)\n      return [];\n    const list = [];\n    for (let i = 0, l = vnode.children.length; i < l; i++) {\n      const childVnode = vnode.children[i];\n      if (childVnode.component)\n        list.push(...getRootElementsFromComponentInstance(childVnode.component));\n      else if (childVnode.el)\n        list.push(childVnode.el);\n    }\n    return list;\n  }\n  function buildComponentsTree2(instance2) {\n    return {\n      name: getInstanceName(instance2),\n      children: getInternalInstanceChildren(instance2.subTree).map(buildComponentsTree2),\n      rootElements: getRootElementsFromComponentInstance(instance2),\n      props: instance2.props\n    };\n  }\n  return buildComponentsTree2(instance);\n}\nfunction buildComponentsTreeVue2(instance) {\n  function getComponentName2(options) {\n    const name = options.displayName || options.name || options._componentTag;\n    if (name)\n      return name;\n    const file = options.__file;\n    if (file)\n      return classify(basename(file, ".vue"));\n  }\n  function getInstanceName(instance2) {\n    const name = getComponentName2(instance2.$options || instance2.fnOptions || {});\n    if (name)\n      return name;\n    return instance2.$root === instance2 ? "Root" : "Anonymous Component";\n  }\n  function getInternalInstanceChildren(instance2) {\n    if (instance2.$children)\n      return instance2.$children;\n    if (Array.isArray(instance2.subTree.children))\n      return instance2.subTree.children.filter((vnode) => !!vnode.component).map((vnode) => vnode.component);\n    return [];\n  }\n  function buildComponentsTree2(instance2) {\n    return {\n      name: getInstanceName(instance2),\n      children: getInternalInstanceChildren(instance2).map(buildComponentsTree2),\n      rootElements: [instance2.$el],\n      props: instance2._props\n    };\n  }\n  return buildComponentsTree2(instance);\n}\nfunction filterComponentsTree2(treeNode, searchFn, result = []) {\n  if (searchFn(treeNode))\n    result.push(treeNode);\n  for (const child of treeNode.children)\n    filterComponentsTree2(child, searchFn, result);\n  return result;\n}\nfunction findVueRoots(root, roots = []) {\n  const document = root.ownerDocument || root;\n  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);\n  const vue2Roots = /* @__PURE__ */ new Set();\n  do {\n    const node = walker.currentNode;\n    if (node.__vue__)\n      vue2Roots.add(node.__vue__.$root);\n    if (node.__vue_app__ && node._vnode && node._vnode.component)\n      roots.push({ root: node._vnode.component, version: 3 });\n    const shadowRoot = node instanceof Element ? node.shadowRoot : null;\n    if (shadowRoot)\n      findVueRoots(shadowRoot, roots);\n  } while (walker.nextNode());\n  for (const vue2root of vue2Roots) {\n    roots.push({\n      version: 2,\n      root: vue2root\n    });\n  }\n  return roots;\n}\nvar VueEngine = {\n  queryAll(scope, selector) {\n    const document = scope.ownerDocument || scope;\n    const { name, attributes } = parseAttributeSelector(selector, false);\n    const vueRoots = findVueRoots(document);\n    const trees = vueRoots.map((vueRoot) => vueRoot.version === 3 ? buildComponentsTreeVue3(vueRoot.root) : buildComponentsTreeVue2(vueRoot.root));\n    const treeNodes = trees.map((tree) => filterComponentsTree2(tree, (treeNode) => {\n      if (name && treeNode.name !== name)\n        return false;\n      if (treeNode.rootElements.some((rootElement) => !isInsideScope(scope, rootElement)))\n        return false;\n      for (const attr of attributes) {\n        if (!matchesComponentAttribute(treeNode.props, attr))\n          return false;\n      }\n      return true;\n    })).flat();\n    const allRootElements = /* @__PURE__ */ new Set();\n    for (const treeNode of treeNodes) {\n      for (const rootElement of treeNode.rootElements)\n        allRootElements.add(rootElement);\n    }\n    return [...allRootElements];\n  }\n};\n\n// packages/playwright-core/src/server/injected/xpathSelectorEngine.ts\nvar XPathEngine = {\n  queryAll(root, selector) {\n    if (selector.startsWith("/") && root.nodeType !== Node.DOCUMENT_NODE)\n      selector = "." + selector;\n    const result = [];\n    const document = root.ownerDocument || root;\n    if (!document)\n      return result;\n    const it = document.evaluate(selector, root, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE);\n    for (let node = it.iterateNext(); node; node = it.iterateNext()) {\n      if (node.nodeType === Node.ELEMENT_NODE)\n        result.push(node);\n    }\n    return result;\n  }\n};\n\n// packages/playwright-core/src/server/injected/injectedScript.ts\nvar InjectedScript = class {\n  // eslint-disable-next-line no-restricted-globals\n  constructor(window, isUnderTest, sdkLanguage, testIdAttributeNameForStrictErrorAndConsoleCodegen, stableRafCount, browserName, customEngines) {\n    this.onGlobalListenersRemoved = /* @__PURE__ */ new Set();\n    this._testIdAttributeNameForStrictErrorAndConsoleCodegen = "data-testid";\n    // Recorder must use any external dependencies through InjectedScript.\n    // Otherwise it will end up with a copy of all modules it uses, and any\n    // module-level globals will be duplicated, which leads to subtle bugs.\n    this.utils = {\n      asLocator,\n      cacheNormalizedWhitespaces,\n      elementText,\n      getAriaRole,\n      getElementAccessibleDescription,\n      getElementAccessibleName,\n      isElementVisible,\n      isInsideScope,\n      normalizeWhiteSpace,\n      parseAriaSnapshot\n    };\n    this.window = window;\n    this.document = window.document;\n    this.isUnderTest = isUnderTest;\n    this._sdkLanguage = sdkLanguage;\n    this._testIdAttributeNameForStrictErrorAndConsoleCodegen = testIdAttributeNameForStrictErrorAndConsoleCodegen;\n    this._evaluator = new SelectorEvaluatorImpl(/* @__PURE__ */ new Map());\n    this._engines = /* @__PURE__ */ new Map();\n    this._engines.set("xpath", XPathEngine);\n    this._engines.set("xpath:light", XPathEngine);\n    this._engines.set("_react", ReactEngine);\n    this._engines.set("_vue", VueEngine);\n    this._engines.set("role", createRoleEngine(false));\n    this._engines.set("text", this._createTextEngine(true, false));\n    this._engines.set("text:light", this._createTextEngine(false, false));\n    this._engines.set("id", this._createAttributeEngine("id", true));\n    this._engines.set("id:light", this._createAttributeEngine("id", false));\n    this._engines.set("data-testid", this._createAttributeEngine("data-testid", true));\n    this._engines.set("data-testid:light", this._createAttributeEngine("data-testid", false));\n    this._engines.set("data-test-id", this._createAttributeEngine("data-test-id", true));\n    this._engines.set("data-test-id:light", this._createAttributeEngine("data-test-id", false));\n    this._engines.set("data-test", this._createAttributeEngine("data-test", true));\n    this._engines.set("data-test:light", this._createAttributeEngine("data-test", false));\n    this._engines.set("css", this._createCSSEngine());\n    this._engines.set("nth", { queryAll: () => [] });\n    this._engines.set("visible", this._createVisibleEngine());\n    this._engines.set("internal:control", this._createControlEngine());\n    this._engines.set("internal:has", this._createHasEngine());\n    this._engines.set("internal:has-not", this._createHasNotEngine());\n    this._engines.set("internal:and", { queryAll: () => [] });\n    this._engines.set("internal:or", { queryAll: () => [] });\n    this._engines.set("internal:chain", this._createInternalChainEngine());\n    this._engines.set("internal:label", this._createInternalLabelEngine());\n    this._engines.set("internal:text", this._createTextEngine(true, true));\n    this._engines.set("internal:has-text", this._createInternalHasTextEngine());\n    this._engines.set("internal:has-not-text", this._createInternalHasNotTextEngine());\n    this._engines.set("internal:attr", this._createNamedAttributeEngine());\n    this._engines.set("internal:testid", this._createNamedAttributeEngine());\n    this._engines.set("internal:role", createRoleEngine(true));\n    this._engines.set("internal:aria-id", this._createAriaIdEngine());\n    for (const { name, engine } of customEngines)\n      this._engines.set(name, engine);\n    this._stableRafCount = stableRafCount;\n    this._browserName = browserName;\n    setBrowserName(browserName);\n    this._setupGlobalListenersRemovalDetection();\n    this._setupHitTargetInterceptors();\n    if (isUnderTest)\n      this.window.__injectedScript = this;\n  }\n  builtinSetTimeout(callback, timeout) {\n    var _a;\n    if ((_a = this.window.__pwClock) == null ? void 0 : _a.builtin)\n      return this.window.__pwClock.builtin.setTimeout(callback, timeout);\n    return this.window.setTimeout(callback, timeout);\n  }\n  builtinClearTimeout(timeout) {\n    var _a;\n    if ((_a = this.window.__pwClock) == null ? void 0 : _a.builtin)\n      return this.window.__pwClock.builtin.clearTimeout(timeout);\n    return this.window.clearTimeout(timeout);\n  }\n  builtinRequestAnimationFrame(callback) {\n    var _a;\n    if ((_a = this.window.__pwClock) == null ? void 0 : _a.builtin)\n      return this.window.__pwClock.builtin.requestAnimationFrame(callback);\n    return this.window.requestAnimationFrame(callback);\n  }\n  eval(expression) {\n    return this.window.eval(expression);\n  }\n  testIdAttributeNameForStrictErrorAndConsoleCodegen() {\n    return this._testIdAttributeNameForStrictErrorAndConsoleCodegen;\n  }\n  parseSelector(selector) {\n    const result = parseSelector(selector);\n    visitAllSelectorParts(result, (part) => {\n      if (!this._engines.has(part.name))\n        throw this.createStacklessError(`Unknown engine "${part.name}" while parsing selector ${selector}`);\n    });\n    return result;\n  }\n  generateSelector(targetElement, options) {\n    return generateSelector(this, targetElement, options);\n  }\n  generateSelectorSimple(targetElement, options) {\n    return generateSelector(this, targetElement, { ...options, testIdAttributeName: this._testIdAttributeNameForStrictErrorAndConsoleCodegen }).selector;\n  }\n  querySelector(selector, root, strict) {\n    const result = this.querySelectorAll(selector, root);\n    if (strict && result.length > 1)\n      throw this.strictModeViolationError(selector, result);\n    return result[0];\n  }\n  _queryNth(elements, part) {\n    const list = [...elements];\n    let nth = +part.body;\n    if (nth === -1)\n      nth = list.length - 1;\n    return new Set(list.slice(nth, nth + 1));\n  }\n  _queryLayoutSelector(elements, part, originalRoot) {\n    const name = part.name;\n    const body = part.body;\n    const result = [];\n    const inner = this.querySelectorAll(body.parsed, originalRoot);\n    for (const element of elements) {\n      const score = layoutSelectorScore(name, element, inner, body.distance);\n      if (score !== void 0)\n        result.push({ element, score });\n    }\n    result.sort((a, b) => a.score - b.score);\n    return new Set(result.map((r) => r.element));\n  }\n  ariaSnapshot(node, options) {\n    if (node.nodeType !== Node.ELEMENT_NODE)\n      throw this.createStacklessError("Can only capture aria snapshot of Element nodes.");\n    const ariaSnapshot = generateAriaTree(node);\n    this._ariaElementById = ariaSnapshot.elements;\n    return renderAriaTree(ariaSnapshot.root, { ...options, ids: (options == null ? void 0 : options.id) ? ariaSnapshot.ids : void 0 });\n  }\n  ariaSnapshotAsObject(node) {\n    return generateAriaTree(node);\n  }\n  ariaSnapshotElement(snapshot, elementId) {\n    return snapshot.elements.get(elementId) || null;\n  }\n  renderAriaTree(ariaNode, options) {\n    return renderAriaTree(ariaNode, options);\n  }\n  renderAriaSnapshotWithIds(ariaSnapshot) {\n    return renderAriaTree(ariaSnapshot.root, { ids: ariaSnapshot.ids });\n  }\n  getAllByAria(document, template) {\n    return getAllByAria(document.documentElement, template);\n  }\n  querySelectorAll(selector, root) {\n    if (selector.capture !== void 0) {\n      if (selector.parts.some((part) => part.name === "nth"))\n        throw this.createStacklessError(`Can\'t query n-th element in a request with the capture.`);\n      const withHas = { parts: selector.parts.slice(0, selector.capture + 1) };\n      if (selector.capture < selector.parts.length - 1) {\n        const parsed = { parts: selector.parts.slice(selector.capture + 1) };\n        const has = { name: "internal:has", body: { parsed }, source: stringifySelector(parsed) };\n        withHas.parts.push(has);\n      }\n      return this.querySelectorAll(withHas, root);\n    }\n    if (!root["querySelectorAll"])\n      throw this.createStacklessError("Node is not queryable.");\n    if (selector.capture !== void 0) {\n      throw this.createStacklessError("Internal error: there should not be a capture in the selector.");\n    }\n    if (root.nodeType === 11 && selector.parts.length === 1 && selector.parts[0].name === "css" && selector.parts[0].source === ":scope")\n      return [root];\n    this._evaluator.begin();\n    try {\n      let roots = /* @__PURE__ */ new Set([root]);\n      for (const part of selector.parts) {\n        if (part.name === "nth") {\n          roots = this._queryNth(roots, part);\n        } else if (part.name === "internal:and") {\n          const andElements = this.querySelectorAll(part.body.parsed, root);\n          roots = new Set(andElements.filter((e) => roots.has(e)));\n        } else if (part.name === "internal:or") {\n          const orElements = this.querySelectorAll(part.body.parsed, root);\n          roots = new Set(sortInDOMOrder(/* @__PURE__ */ new Set([...roots, ...orElements])));\n        } else if (kLayoutSelectorNames.includes(part.name)) {\n          roots = this._queryLayoutSelector(roots, part, root);\n        } else {\n          const next = /* @__PURE__ */ new Set();\n          for (const root2 of roots) {\n            const all = this._queryEngineAll(part, root2);\n            for (const one of all)\n              next.add(one);\n          }\n          roots = next;\n        }\n      }\n      return [...roots];\n    } finally {\n      this._evaluator.end();\n    }\n  }\n  _queryEngineAll(part, root) {\n    const result = this._engines.get(part.name).queryAll(root, part.body);\n    for (const element of result) {\n      if (!("nodeName" in element))\n        throw this.createStacklessError(`Expected a Node but got ${Object.prototype.toString.call(element)}`);\n    }\n    return result;\n  }\n  _createAttributeEngine(attribute, shadow) {\n    const toCSS = (selector) => {\n      const css = `[${attribute}=${JSON.stringify(selector)}]`;\n      return [{ simples: [{ selector: { css, functions: [] }, combinator: "" }] }];\n    };\n    return {\n      queryAll: (root, selector) => {\n        return this._evaluator.query({ scope: root, pierceShadow: shadow }, toCSS(selector));\n      }\n    };\n  }\n  _createCSSEngine() {\n    return {\n      queryAll: (root, body) => {\n        return this._evaluator.query({ scope: root, pierceShadow: true }, body);\n      }\n    };\n  }\n  _createTextEngine(shadow, internal) {\n    const queryAll = (root, selector) => {\n      const { matcher, kind } = createTextMatcher(selector, internal);\n      const result = [];\n      let lastDidNotMatchSelf = null;\n      const appendElement = (element) => {\n        if (kind === "lax" && lastDidNotMatchSelf && lastDidNotMatchSelf.contains(element))\n          return false;\n        const matches = elementMatchesText(this._evaluator._cacheText, element, matcher);\n        if (matches === "none")\n          lastDidNotMatchSelf = element;\n        if (matches === "self" || matches === "selfAndChildren" && kind === "strict" && !internal)\n          result.push(element);\n      };\n      if (root.nodeType === Node.ELEMENT_NODE)\n        appendElement(root);\n      const elements = this._evaluator._queryCSS({ scope: root, pierceShadow: shadow }, "*");\n      for (const element of elements)\n        appendElement(element);\n      return result;\n    };\n    return { queryAll };\n  }\n  _createInternalHasTextEngine() {\n    return {\n      queryAll: (root, selector) => {\n        if (root.nodeType !== 1)\n          return [];\n        const element = root;\n        const text = elementText(this._evaluator._cacheText, element);\n        const { matcher } = createTextMatcher(selector, true);\n        return matcher(text) ? [element] : [];\n      }\n    };\n  }\n  _createInternalHasNotTextEngine() {\n    return {\n      queryAll: (root, selector) => {\n        if (root.nodeType !== 1)\n          return [];\n        const element = root;\n        const text = elementText(this._evaluator._cacheText, element);\n        const { matcher } = createTextMatcher(selector, true);\n        return matcher(text) ? [] : [element];\n      }\n    };\n  }\n  _createInternalLabelEngine() {\n    return {\n      queryAll: (root, selector) => {\n        const { matcher } = createTextMatcher(selector, true);\n        const allElements = this._evaluator._queryCSS({ scope: root, pierceShadow: true }, "*");\n        return allElements.filter((element) => {\n          return getElementLabels(this._evaluator._cacheText, element).some((label) => matcher(label));\n        });\n      }\n    };\n  }\n  _createNamedAttributeEngine() {\n    const queryAll = (root, selector) => {\n      const parsed = parseAttributeSelector(selector, true);\n      if (parsed.name || parsed.attributes.length !== 1)\n        throw new Error("Malformed attribute selector: " + selector);\n      const { name, value, caseSensitive } = parsed.attributes[0];\n      const lowerCaseValue = caseSensitive ? null : value.toLowerCase();\n      let matcher;\n      if (value instanceof RegExp)\n        matcher = (s) => !!s.match(value);\n      else if (caseSensitive)\n        matcher = (s) => s === value;\n      else\n        matcher = (s) => s.toLowerCase().includes(lowerCaseValue);\n      const elements = this._evaluator._queryCSS({ scope: root, pierceShadow: true }, `[${name}]`);\n      return elements.filter((e) => matcher(e.getAttribute(name)));\n    };\n    return { queryAll };\n  }\n  _createControlEngine() {\n    return {\n      queryAll(root, body) {\n        if (body === "enter-frame")\n          return [];\n        if (body === "return-empty")\n          return [];\n        if (body === "component") {\n          if (root.nodeType !== 1)\n            return [];\n          return [root.childElementCount === 1 ? root.firstElementChild : root];\n        }\n        throw new Error(`Internal error, unknown internal:control selector ${body}`);\n      }\n    };\n  }\n  _createHasEngine() {\n    const queryAll = (root, body) => {\n      if (root.nodeType !== 1)\n        return [];\n      const has = !!this.querySelector(body.parsed, root, false);\n      return has ? [root] : [];\n    };\n    return { queryAll };\n  }\n  _createHasNotEngine() {\n    const queryAll = (root, body) => {\n      if (root.nodeType !== 1)\n        return [];\n      const has = !!this.querySelector(body.parsed, root, false);\n      return has ? [] : [root];\n    };\n    return { queryAll };\n  }\n  _createVisibleEngine() {\n    const queryAll = (root, body) => {\n      if (root.nodeType !== 1)\n        return [];\n      const visible = body === "true";\n      return isElementVisible(root) === visible ? [root] : [];\n    };\n    return { queryAll };\n  }\n  _createInternalChainEngine() {\n    const queryAll = (root, body) => {\n      return this.querySelectorAll(body.parsed, root);\n    };\n    return { queryAll };\n  }\n  extend(source, params) {\n    const constrFunction = this.window.eval(`\n    (() => {\n      const module = {};\n      ${source}\n      return module.exports.default();\n    })()`);\n    return new constrFunction(this, params);\n  }\n  async viewportRatio(element) {\n    return await new Promise((resolve) => {\n      const observer = new IntersectionObserver((entries) => {\n        resolve(entries[0].intersectionRatio);\n        observer.disconnect();\n      });\n      observer.observe(element);\n      this.builtinRequestAnimationFrame(() => {\n      });\n    });\n  }\n  getElementBorderWidth(node) {\n    if (node.nodeType !== Node.ELEMENT_NODE || !node.ownerDocument || !node.ownerDocument.defaultView)\n      return { left: 0, top: 0 };\n    const style = node.ownerDocument.defaultView.getComputedStyle(node);\n    return { left: parseInt(style.borderLeftWidth || "", 10), top: parseInt(style.borderTopWidth || "", 10) };\n  }\n  describeIFrameStyle(iframe) {\n    if (!iframe.ownerDocument || !iframe.ownerDocument.defaultView)\n      return "error:notconnected";\n    const defaultView = iframe.ownerDocument.defaultView;\n    for (let e = iframe; e; e = parentElementOrShadowHost(e)) {\n      if (defaultView.getComputedStyle(e).transform !== "none")\n        return "transformed";\n    }\n    const iframeStyle = defaultView.getComputedStyle(iframe);\n    return {\n      left: parseInt(iframeStyle.borderLeftWidth || "", 10) + parseInt(iframeStyle.paddingLeft || "", 10),\n      top: parseInt(iframeStyle.borderTopWidth || "", 10) + parseInt(iframeStyle.paddingTop || "", 10)\n    };\n  }\n  retarget(node, behavior) {\n    let element = node.nodeType === Node.ELEMENT_NODE ? node : node.parentElement;\n    if (!element)\n      return null;\n    if (behavior === "none")\n      return element;\n    if (!element.matches("input, textarea, select") && !element.isContentEditable) {\n      if (behavior === "button-link")\n        element = element.closest("button, [role=button], a, [role=link]") || element;\n      else\n        element = element.closest("button, [role=button], [role=checkbox], [role=radio]") || element;\n    }\n    if (behavior === "follow-label") {\n      if (!element.matches("a, input, textarea, button, select, [role=link], [role=button], [role=checkbox], [role=radio]") && !element.isContentEditable) {\n        const enclosingLabel = element.closest("label");\n        if (enclosingLabel && enclosingLabel.control)\n          element = enclosingLabel.control;\n      }\n    }\n    return element;\n  }\n  async checkElementStates(node, states) {\n    if (states.includes("stable")) {\n      const stableResult = await this._checkElementIsStable(node);\n      if (stableResult === false)\n        return { missingState: "stable" };\n      if (stableResult === "error:notconnected")\n        return "error:notconnected";\n    }\n    for (const state of states) {\n      if (state !== "stable") {\n        const result = this.elementState(node, state);\n        if (result.received === "error:notconnected")\n          return "error:notconnected";\n        if (!result.matches)\n          return { missingState: state };\n      }\n    }\n  }\n  async _checkElementIsStable(node) {\n    const continuePolling = Symbol("continuePolling");\n    let lastRect;\n    let stableRafCounter = 0;\n    let lastTime = 0;\n    const check = () => {\n      const element = this.retarget(node, "no-follow-label");\n      if (!element)\n        return "error:notconnected";\n      const time = performance.now();\n      if (this._stableRafCount > 1 && time - lastTime < 15)\n        return continuePolling;\n      lastTime = time;\n      const clientRect = element.getBoundingClientRect();\n      const rect = { x: clientRect.top, y: clientRect.left, width: clientRect.width, height: clientRect.height };\n      if (lastRect) {\n        const samePosition = rect.x === lastRect.x && rect.y === lastRect.y && rect.width === lastRect.width && rect.height === lastRect.height;\n        if (!samePosition)\n          return false;\n        if (++stableRafCounter >= this._stableRafCount)\n          return true;\n      }\n      lastRect = rect;\n      return continuePolling;\n    };\n    let fulfill;\n    let reject;\n    const result = new Promise((f, r) => {\n      fulfill = f;\n      reject = r;\n    });\n    const raf = () => {\n      try {\n        const success = check();\n        if (success !== continuePolling)\n          fulfill(success);\n        else\n          this.builtinRequestAnimationFrame(raf);\n      } catch (e) {\n        reject(e);\n      }\n    };\n    this.builtinRequestAnimationFrame(raf);\n    return result;\n  }\n  _createAriaIdEngine() {\n    const queryAll = (root, selector) => {\n      var _a;\n      const ariaId = parseInt(selector, 10);\n      const result = (_a = this._ariaElementById) == null ? void 0 : _a.get(ariaId);\n      return result && result.isConnected ? [result] : [];\n    };\n    return { queryAll };\n  }\n  elementState(node, state) {\n    const element = this.retarget(node, ["visible", "hidden"].includes(state) ? "none" : "follow-label");\n    if (!element || !element.isConnected) {\n      if (state === "hidden")\n        return { matches: true, received: "hidden" };\n      return { matches: false, received: "error:notconnected" };\n    }\n    if (state === "visible" || state === "hidden") {\n      const visible = isElementVisible(element);\n      return {\n        matches: state === "visible" ? visible : !visible,\n        received: visible ? "visible" : "hidden"\n      };\n    }\n    if (state === "disabled" || state === "enabled") {\n      const disabled = getAriaDisabled(element);\n      return {\n        matches: state === "disabled" ? disabled : !disabled,\n        received: disabled ? "disabled" : "enabled"\n      };\n    }\n    if (state === "editable") {\n      const disabled = getAriaDisabled(element);\n      const readonly = getReadonly(element);\n      if (readonly === "error")\n        throw this.createStacklessError("Element is not an <input>, <textarea>, <select> or [contenteditable] and does not have a role allowing [aria-readonly]");\n      return {\n        matches: !disabled && !readonly,\n        received: disabled ? "disabled" : readonly ? "readOnly" : "editable"\n      };\n    }\n    if (state === "checked" || state === "unchecked") {\n      const need = state === "checked";\n      const checked = getCheckedWithoutMixed(element);\n      if (checked === "error")\n        throw this.createStacklessError("Not a checkbox or radio button");\n      return {\n        matches: need === checked,\n        received: checked ? "checked" : "unchecked"\n      };\n    }\n    if (state === "indeterminate") {\n      const checked = getCheckedAllowMixed(element);\n      if (checked === "error")\n        throw this.createStacklessError("Not a checkbox or radio button");\n      return {\n        matches: checked === "mixed",\n        received: checked === true ? "checked" : checked === false ? "unchecked" : "mixed"\n      };\n    }\n    throw this.createStacklessError(`Unexpected element state "${state}"`);\n  }\n  selectOptions(node, optionsToSelect) {\n    const element = this.retarget(node, "follow-label");\n    if (!element)\n      return "error:notconnected";\n    if (element.nodeName.toLowerCase() !== "select")\n      throw this.createStacklessError("Element is not a <select> element");\n    const select = element;\n    const options = [...select.options];\n    const selectedOptions = [];\n    let remainingOptionsToSelect = optionsToSelect.slice();\n    for (let index = 0; index < options.length; index++) {\n      const option = options[index];\n      const filter = (optionToSelect) => {\n        if (optionToSelect instanceof Node)\n          return option === optionToSelect;\n        let matches = true;\n        if (optionToSelect.valueOrLabel !== void 0)\n          matches = matches && (optionToSelect.valueOrLabel === option.value || optionToSelect.valueOrLabel === option.label);\n        if (optionToSelect.value !== void 0)\n          matches = matches && optionToSelect.value === option.value;\n        if (optionToSelect.label !== void 0)\n          matches = matches && optionToSelect.label === option.label;\n        if (optionToSelect.index !== void 0)\n          matches = matches && optionToSelect.index === index;\n        return matches;\n      };\n      if (!remainingOptionsToSelect.some(filter))\n        continue;\n      selectedOptions.push(option);\n      if (select.multiple) {\n        remainingOptionsToSelect = remainingOptionsToSelect.filter((o) => !filter(o));\n      } else {\n        remainingOptionsToSelect = [];\n        break;\n      }\n    }\n    if (remainingOptionsToSelect.length)\n      return "error:optionsnotfound";\n    select.value = void 0;\n    selectedOptions.forEach((option) => option.selected = true);\n    select.dispatchEvent(new Event("input", { bubbles: true, composed: true }));\n    select.dispatchEvent(new Event("change", { bubbles: true }));\n    return selectedOptions.map((option) => option.value);\n  }\n  fill(node, value) {\n    const element = this.retarget(node, "follow-label");\n    if (!element)\n      return "error:notconnected";\n    if (element.nodeName.toLowerCase() === "input") {\n      const input = element;\n      const type = input.type.toLowerCase();\n      const kInputTypesToSetValue = /* @__PURE__ */ new Set(["color", "date", "time", "datetime-local", "month", "range", "week"]);\n      const kInputTypesToTypeInto = /* @__PURE__ */ new Set(["", "email", "number", "password", "search", "tel", "text", "url"]);\n      if (!kInputTypesToTypeInto.has(type) && !kInputTypesToSetValue.has(type))\n        throw this.createStacklessError(`Input of type "${type}" cannot be filled`);\n      if (type === "number") {\n        value = value.trim();\n        if (isNaN(Number(value)))\n          throw this.createStacklessError("Cannot type text into input[type=number]");\n      }\n      if (kInputTypesToSetValue.has(type)) {\n        value = value.trim();\n        input.focus();\n        input.value = value;\n        if (input.value !== value)\n          throw this.createStacklessError("Malformed value");\n        element.dispatchEvent(new Event("input", { bubbles: true, composed: true }));\n        element.dispatchEvent(new Event("change", { bubbles: true }));\n        return "done";\n      }\n    } else if (element.nodeName.toLowerCase() === "textarea") {\n    } else if (!element.isContentEditable) {\n      throw this.createStacklessError("Element is not an <input>, <textarea> or [contenteditable] element");\n    }\n    this.selectText(element);\n    return "needsinput";\n  }\n  selectText(node) {\n    const element = this.retarget(node, "follow-label");\n    if (!element)\n      return "error:notconnected";\n    if (element.nodeName.toLowerCase() === "input") {\n      const input = element;\n      input.select();\n      input.focus();\n      return "done";\n    }\n    if (element.nodeName.toLowerCase() === "textarea") {\n      const textarea = element;\n      textarea.selectionStart = 0;\n      textarea.selectionEnd = textarea.value.length;\n      textarea.focus();\n      return "done";\n    }\n    const range = element.ownerDocument.createRange();\n    range.selectNodeContents(element);\n    const selection = element.ownerDocument.defaultView.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n    element.focus();\n    return "done";\n  }\n  _activelyFocused(node) {\n    const activeElement = node.getRootNode().activeElement;\n    const isFocused = activeElement === node && !!node.ownerDocument && node.ownerDocument.hasFocus();\n    return { activeElement, isFocused };\n  }\n  focusNode(node, resetSelectionIfNotFocused) {\n    if (!node.isConnected)\n      return "error:notconnected";\n    if (node.nodeType !== Node.ELEMENT_NODE)\n      throw this.createStacklessError("Node is not an element");\n    const { activeElement, isFocused: wasFocused } = this._activelyFocused(node);\n    if (node.isContentEditable && !wasFocused && activeElement && activeElement.blur) {\n      activeElement.blur();\n    }\n    node.focus();\n    node.focus();\n    if (resetSelectionIfNotFocused && !wasFocused && node.nodeName.toLowerCase() === "input") {\n      try {\n        const input = node;\n        input.setSelectionRange(0, 0);\n      } catch (e) {\n      }\n    }\n    return "done";\n  }\n  blurNode(node) {\n    if (!node.isConnected)\n      return "error:notconnected";\n    if (node.nodeType !== Node.ELEMENT_NODE)\n      throw this.createStacklessError("Node is not an element");\n    node.blur();\n    return "done";\n  }\n  setInputFiles(node, payloads) {\n    if (node.nodeType !== Node.ELEMENT_NODE)\n      return "Node is not of type HTMLElement";\n    const element = node;\n    if (element.nodeName !== "INPUT")\n      return "Not an <input> element";\n    const input = element;\n    const type = (input.getAttribute("type") || "").toLowerCase();\n    if (type !== "file")\n      return "Not an input[type=file] element";\n    const files = payloads.map((file) => {\n      const bytes = Uint8Array.from(atob(file.buffer), (c) => c.charCodeAt(0));\n      return new File([bytes], file.name, { type: file.mimeType, lastModified: file.lastModifiedMs });\n    });\n    const dt = new DataTransfer();\n    for (const file of files)\n      dt.items.add(file);\n    input.files = dt.files;\n    input.dispatchEvent(new Event("input", { bubbles: true, composed: true }));\n    input.dispatchEvent(new Event("change", { bubbles: true }));\n  }\n  expectHitTarget(hitPoint, targetElement) {\n    const roots = [];\n    let parentElement = targetElement;\n    while (parentElement) {\n      const root = enclosingShadowRootOrDocument(parentElement);\n      if (!root)\n        break;\n      roots.push(root);\n      if (root.nodeType === 9)\n        break;\n      parentElement = root.host;\n    }\n    let hitElement;\n    for (let index = roots.length - 1; index >= 0; index--) {\n      const root = roots[index];\n      const elements = root.elementsFromPoint(hitPoint.x, hitPoint.y);\n      const singleElement = root.elementFromPoint(hitPoint.x, hitPoint.y);\n      if (singleElement && elements[0] && parentElementOrShadowHost(singleElement) === elements[0]) {\n        const style = this.window.getComputedStyle(singleElement);\n        if ((style == null ? void 0 : style.display) === "contents") {\n          elements.unshift(singleElement);\n        }\n      }\n      if (elements[0] && elements[0].shadowRoot === root && elements[1] === singleElement) {\n        elements.shift();\n      }\n      const innerElement = elements[0];\n      if (!innerElement)\n        break;\n      hitElement = innerElement;\n      if (index && innerElement !== roots[index - 1].host)\n        break;\n    }\n    const hitParents = [];\n    while (hitElement && hitElement !== targetElement) {\n      hitParents.push(hitElement);\n      hitElement = parentElementOrShadowHost(hitElement);\n    }\n    if (hitElement === targetElement)\n      return "done";\n    const hitTargetDescription = this.previewNode(hitParents[0] || this.document.documentElement);\n    let rootHitTargetDescription;\n    let element = targetElement;\n    while (element) {\n      const index = hitParents.indexOf(element);\n      if (index !== -1) {\n        if (index > 1)\n          rootHitTargetDescription = this.previewNode(hitParents[index - 1]);\n        break;\n      }\n      element = parentElementOrShadowHost(element);\n    }\n    if (rootHitTargetDescription)\n      return { hitTargetDescription: `${hitTargetDescription} from ${rootHitTargetDescription} subtree` };\n    return { hitTargetDescription };\n  }\n  // Life of a pointer action, for example click.\n  //\n  // 0. Retry items 1 and 2 while action fails due to navigation or element being detached.\n  //   1. Resolve selector to an element.\n  //   2. Retry the following steps until the element is detached or frame navigates away.\n  //     2a. Wait for the element to be stable (not moving), visible and enabled.\n  //     2b. Scroll element into view. Scrolling alternates between:\n  //         - Built-in protocol scrolling.\n  //         - Anchoring to the top/left, bottom/right and center/center.\n  //         This is to scroll elements from under sticky headers/footers.\n  //     2c. Click point is calculated, either based on explicitly specified position,\n  //         or some visible point of the element based on protocol content quads.\n  //     2d. Click point relative to page viewport is converted relative to the target iframe\n  //         for the next hit-point check.\n  //     2e. (injected) Hit target at the click point must be a descendant of the target element.\n  //         This prevents mis-clicking in edge cases like <iframe> overlaying the target.\n  //     2f. (injected) Events specific for click (or some other action type) are intercepted on\n  //         the Window with capture:true. See 2i for details.\n  //         Note: this step is skipped for drag&drop (see inline comments for the reason).\n  //     2g. Necessary keyboard modifiers are pressed.\n  //     2h. Click event is issued (mousemove + mousedown + mouseup).\n  //     2i. (injected) For each event, we check that hit target at the event point\n  //         is a descendant of the target element.\n  //         This guarantees no race between issuing the event and handling it in the page,\n  //         for example due to layout shift.\n  //         When hit target check fails, we block all future events in the page.\n  //     2j. Keyboard modifiers are restored.\n  //     2k. (injected) Event interceptor is removed.\n  //     2l. All navigations triggered between 2g-2k are awaited to be either committed or canceled.\n  //     2m. If failed, wait for increasing amount of time before the next retry.\n  setupHitTargetInterceptor(node, action, hitPoint, blockAllEvents) {\n    const element = this.retarget(node, "button-link");\n    if (!element || !element.isConnected)\n      return "error:notconnected";\n    if (hitPoint) {\n      const preliminaryResult = this.expectHitTarget(hitPoint, element);\n      if (preliminaryResult !== "done")\n        return preliminaryResult.hitTargetDescription;\n    }\n    if (action === "drag")\n      return { stop: () => "done" };\n    const events = {\n      "hover": kHoverHitTargetInterceptorEvents,\n      "tap": kTapHitTargetInterceptorEvents,\n      "mouse": kMouseHitTargetInterceptorEvents\n    }[action];\n    let result;\n    const listener = (event) => {\n      if (!events.has(event.type))\n        return;\n      if (!event.isTrusted)\n        return;\n      const point = !!this.window.TouchEvent && event instanceof this.window.TouchEvent ? event.touches[0] : event;\n      if (result === void 0 && point)\n        result = this.expectHitTarget({ x: point.clientX, y: point.clientY }, element);\n      if (blockAllEvents || result !== "done" && result !== void 0) {\n        event.preventDefault();\n        event.stopPropagation();\n        event.stopImmediatePropagation();\n      }\n    };\n    const stop = () => {\n      if (this._hitTargetInterceptor === listener)\n        this._hitTargetInterceptor = void 0;\n      return result || "done";\n    };\n    this._hitTargetInterceptor = listener;\n    return { stop };\n  }\n  dispatchEvent(node, type, eventInitObj) {\n    var _a, _b, _c, _d, _e;\n    let event;\n    const eventInit = { bubbles: true, cancelable: true, composed: true, ...eventInitObj };\n    switch (eventType.get(type)) {\n      case "mouse":\n        event = new MouseEvent(type, eventInit);\n        break;\n      case "keyboard":\n        event = new KeyboardEvent(type, eventInit);\n        break;\n      case "touch": {\n        if (this._browserName === "webkit") {\n          const createTouch = (t) => {\n            var _a2, _b2, _c2;\n            if (t instanceof Touch)\n              return t;\n            let pageX = t.pageX;\n            if (pageX === void 0 && t.clientX !== void 0)\n              pageX = t.clientX + (((_a2 = this.document.scrollingElement) == null ? void 0 : _a2.scrollLeft) || 0);\n            let pageY = t.pageY;\n            if (pageY === void 0 && t.clientY !== void 0)\n              pageY = t.clientY + (((_b2 = this.document.scrollingElement) == null ? void 0 : _b2.scrollTop) || 0);\n            return this.document.createTouch(this.window, (_c2 = t.target) != null ? _c2 : node, t.identifier, pageX, pageY, t.screenX, t.screenY, t.radiusX, t.radiusY, t.rotationAngle, t.force);\n          };\n          const createTouchList = (touches) => {\n            if (touches instanceof TouchList || !touches)\n              return touches;\n            return this.document.createTouchList(...touches.map(createTouch));\n          };\n          (_a = eventInit.target) != null ? _a : eventInit.target = node;\n          eventInit.touches = createTouchList(eventInit.touches);\n          eventInit.targetTouches = createTouchList(eventInit.targetTouches);\n          eventInit.changedTouches = createTouchList(eventInit.changedTouches);\n          event = new TouchEvent(type, eventInit);\n        } else {\n          (_b = eventInit.target) != null ? _b : eventInit.target = node;\n          eventInit.touches = (_c = eventInit.touches) == null ? void 0 : _c.map((t) => {\n            var _a2;\n            return t instanceof Touch ? t : new Touch({ ...t, target: (_a2 = t.target) != null ? _a2 : node });\n          });\n          eventInit.targetTouches = (_d = eventInit.targetTouches) == null ? void 0 : _d.map((t) => {\n            var _a2;\n            return t instanceof Touch ? t : new Touch({ ...t, target: (_a2 = t.target) != null ? _a2 : node });\n          });\n          eventInit.changedTouches = (_e = eventInit.changedTouches) == null ? void 0 : _e.map((t) => {\n            var _a2;\n            return t instanceof Touch ? t : new Touch({ ...t, target: (_a2 = t.target) != null ? _a2 : node });\n          });\n          event = new TouchEvent(type, eventInit);\n        }\n        break;\n      }\n      case "pointer":\n        event = new PointerEvent(type, eventInit);\n        break;\n      case "focus":\n        event = new FocusEvent(type, eventInit);\n        break;\n      case "drag":\n        event = new DragEvent(type, eventInit);\n        break;\n      case "wheel":\n        event = new WheelEvent(type, eventInit);\n        break;\n      case "deviceorientation":\n        try {\n          event = new DeviceOrientationEvent(type, eventInit);\n        } catch {\n          const { bubbles, cancelable, alpha, beta, gamma, absolute } = eventInit;\n          event = this.document.createEvent("DeviceOrientationEvent");\n          event.initDeviceOrientationEvent(type, bubbles, cancelable, alpha, beta, gamma, absolute);\n        }\n        break;\n      case "devicemotion":\n        try {\n          event = new DeviceMotionEvent(type, eventInit);\n        } catch {\n          const { bubbles, cancelable, acceleration, accelerationIncludingGravity, rotationRate, interval } = eventInit;\n          event = this.document.createEvent("DeviceMotionEvent");\n          event.initDeviceMotionEvent(type, bubbles, cancelable, acceleration, accelerationIncludingGravity, rotationRate, interval);\n        }\n        break;\n      default:\n        event = new Event(type, eventInit);\n        break;\n    }\n    node.dispatchEvent(event);\n  }\n  previewNode(node) {\n    if (node.nodeType === Node.TEXT_NODE)\n      return oneLine(`#text=${node.nodeValue || ""}`);\n    if (node.nodeType !== Node.ELEMENT_NODE)\n      return oneLine(`<${node.nodeName.toLowerCase()} />`);\n    const element = node;\n    const attrs = [];\n    for (let i = 0; i < element.attributes.length; i++) {\n      const { name, value } = element.attributes[i];\n      if (name === "style")\n        continue;\n      if (!value && booleanAttributes.has(name))\n        attrs.push(` ${name}`);\n      else\n        attrs.push(` ${name}="${value}"`);\n    }\n    attrs.sort((a, b) => a.length - b.length);\n    const attrText = trimStringWithEllipsis(attrs.join(""), 500);\n    if (autoClosingTags.has(element.nodeName))\n      return oneLine(`<${element.nodeName.toLowerCase()}${attrText}/>`);\n    const children = element.childNodes;\n    let onlyText = false;\n    if (children.length <= 5) {\n      onlyText = true;\n      for (let i = 0; i < children.length; i++)\n        onlyText = onlyText && children[i].nodeType === Node.TEXT_NODE;\n    }\n    const text = onlyText ? element.textContent || "" : children.length ? "\\u2026" : "";\n    return oneLine(`<${element.nodeName.toLowerCase()}${attrText}>${trimStringWithEllipsis(text, 50)}</${element.nodeName.toLowerCase()}>`);\n  }\n  strictModeViolationError(selector, matches) {\n    const infos = matches.slice(0, 10).map((m) => ({\n      preview: this.previewNode(m),\n      selector: this.generateSelectorSimple(m)\n    }));\n    const lines = infos.map((info, i) => `\n    ${i + 1}) ${info.preview} aka ${asLocator(this._sdkLanguage, info.selector)}`);\n    if (infos.length < matches.length)\n      lines.push("\\n    ...");\n    return this.createStacklessError(`strict mode violation: ${asLocator(this._sdkLanguage, stringifySelector(selector))} resolved to ${matches.length} elements:${lines.join("")}\n`);\n  }\n  createStacklessError(message) {\n    if (this._browserName === "firefox") {\n      const error2 = new Error("Error: " + message);\n      error2.stack = "";\n      return error2;\n    }\n    const error = new Error(message);\n    delete error.stack;\n    return error;\n  }\n  createHighlight() {\n    return new Highlight(this);\n  }\n  maskSelectors(selectors, color) {\n    if (this._highlight)\n      this.hideHighlight();\n    this._highlight = new Highlight(this);\n    this._highlight.install();\n    const elements = [];\n    for (const selector of selectors)\n      elements.push(this.querySelectorAll(selector, this.document.documentElement));\n    this._highlight.maskElements(elements.flat(), color);\n  }\n  highlight(selector) {\n    if (!this._highlight) {\n      this._highlight = new Highlight(this);\n      this._highlight.install();\n    }\n    this._highlight.runHighlightOnRaf(selector);\n  }\n  hideHighlight() {\n    if (this._highlight) {\n      this._highlight.uninstall();\n      delete this._highlight;\n    }\n  }\n  markTargetElements(markedElements, callId) {\n    var _a, _b;\n    if (((_a = this._markedElements) == null ? void 0 : _a.callId) !== callId)\n      this._markedElements = void 0;\n    const previous = ((_b = this._markedElements) == null ? void 0 : _b.elements) || /* @__PURE__ */ new Set();\n    const unmarkEvent = new CustomEvent("__playwright_unmark_target__", {\n      bubbles: true,\n      cancelable: true,\n      detail: callId,\n      composed: true\n    });\n    for (const element of previous) {\n      if (!markedElements.has(element))\n        element.dispatchEvent(unmarkEvent);\n    }\n    const markEvent = new CustomEvent("__playwright_mark_target__", {\n      bubbles: true,\n      cancelable: true,\n      detail: callId,\n      composed: true\n    });\n    for (const element of markedElements) {\n      if (!previous.has(element))\n        element.dispatchEvent(markEvent);\n    }\n    this._markedElements = { callId, elements: markedElements };\n  }\n  _setupGlobalListenersRemovalDetection() {\n    const customEventName = "__playwright_global_listeners_check__";\n    let seenEvent = false;\n    const handleCustomEvent = () => seenEvent = true;\n    this.window.addEventListener(customEventName, handleCustomEvent);\n    new MutationObserver((entries) => {\n      const newDocumentElement = entries.some((entry) => Array.from(entry.addedNodes).includes(this.document.documentElement));\n      if (!newDocumentElement)\n        return;\n      seenEvent = false;\n      this.window.dispatchEvent(new CustomEvent(customEventName));\n      if (seenEvent)\n        return;\n      this.window.addEventListener(customEventName, handleCustomEvent);\n      for (const callback of this.onGlobalListenersRemoved)\n        callback();\n    }).observe(this.document, { childList: true });\n  }\n  _setupHitTargetInterceptors() {\n    const listener = (event) => {\n      var _a;\n      return (_a = this._hitTargetInterceptor) == null ? void 0 : _a.call(this, event);\n    };\n    const addHitTargetInterceptorListeners = () => {\n      for (const event of kAllHitTargetInterceptorEvents)\n        this.window.addEventListener(event, listener, { capture: true, passive: false });\n    };\n    addHitTargetInterceptorListeners();\n    this.onGlobalListenersRemoved.add(addHitTargetInterceptorListeners);\n  }\n  async expect(element, options, elements) {\n    const isArray = options.expression === "to.have.count" || options.expression.endsWith(".array");\n    if (isArray)\n      return this.expectArray(elements, options);\n    if (!element) {\n      if (!options.isNot && options.expression === "to.be.hidden")\n        return { matches: true };\n      if (options.isNot && options.expression === "to.be.visible")\n        return { matches: false };\n      if (!options.isNot && options.expression === "to.be.detached")\n        return { matches: true };\n      if (options.isNot && options.expression === "to.be.attached")\n        return { matches: false };\n      if (options.isNot && options.expression === "to.be.in.viewport")\n        return { matches: false };\n      return { matches: options.isNot, missingReceived: true };\n    }\n    return await this.expectSingleElement(element, options);\n  }\n  async expectSingleElement(element, options) {\n    var _a, _b;\n    const expression = options.expression;\n    {\n      let result;\n      if (expression === "to.have.attribute") {\n        const hasAttribute = element.hasAttribute(options.expressionArg);\n        result = {\n          matches: hasAttribute,\n          received: hasAttribute ? "attribute present" : "attribute not present"\n        };\n      } else if (expression === "to.be.checked") {\n        const { checked, indeterminate } = options.expectedValue;\n        if (indeterminate) {\n          if (checked !== void 0)\n            throw this.createStacklessError("Can\'t assert indeterminate and checked at the same time");\n          result = this.elementState(element, "indeterminate");\n        } else {\n          result = this.elementState(element, checked === false ? "unchecked" : "checked");\n        }\n      } else if (expression === "to.be.disabled") {\n        result = this.elementState(element, "disabled");\n      } else if (expression === "to.be.editable") {\n        result = this.elementState(element, "editable");\n      } else if (expression === "to.be.readonly") {\n        result = this.elementState(element, "editable");\n        result.matches = !result.matches;\n      } else if (expression === "to.be.empty") {\n        if (element.nodeName === "INPUT" || element.nodeName === "TEXTAREA") {\n          const value = element.value;\n          result = { matches: !value, received: value ? "notEmpty" : "empty" };\n        } else {\n          const text = (_a = element.textContent) == null ? void 0 : _a.trim();\n          result = { matches: !text, received: text ? "notEmpty" : "empty" };\n        }\n      } else if (expression === "to.be.enabled") {\n        result = this.elementState(element, "enabled");\n      } else if (expression === "to.be.focused") {\n        const focused = this._activelyFocused(element).isFocused;\n        result = {\n          matches: focused,\n          received: focused ? "focused" : "inactive"\n        };\n      } else if (expression === "to.be.hidden") {\n        result = this.elementState(element, "hidden");\n      } else if (expression === "to.be.visible") {\n        result = this.elementState(element, "visible");\n      } else if (expression === "to.be.attached") {\n        result = {\n          matches: true,\n          received: "attached"\n        };\n      } else if (expression === "to.be.detached") {\n        result = {\n          matches: false,\n          received: "attached"\n        };\n      }\n      if (result) {\n        if (result.received === "error:notconnected")\n          throw this.createStacklessError("Element is not connected");\n        return result;\n      }\n    }\n    {\n      if (expression === "to.have.property") {\n        let target = element;\n        const properties = options.expressionArg.split(".");\n        for (let i = 0; i < properties.length - 1; i++) {\n          if (typeof target !== "object" || !(properties[i] in target))\n            return { received: void 0, matches: false };\n          target = target[properties[i]];\n        }\n        const received = target[properties[properties.length - 1]];\n        const matches = deepEquals(received, options.expectedValue);\n        return { received, matches };\n      }\n    }\n    {\n      if (expression === "to.be.in.viewport") {\n        const ratio = await this.viewportRatio(element);\n        return { received: `viewport ratio ${ratio}`, matches: ratio > 0 && ratio > ((_b = options.expectedNumber) != null ? _b : 0) - 1e-9 };\n      }\n    }\n    {\n      if (expression === "to.have.values") {\n        element = this.retarget(element, "follow-label");\n        if (element.nodeName !== "SELECT" || !element.multiple)\n          throw this.createStacklessError("Not a select element with a multiple attribute");\n        const received = [...element.selectedOptions].map((o) => o.value);\n        if (received.length !== options.expectedText.length)\n          return { received, matches: false };\n        return { received, matches: received.map((r, i) => new ExpectedTextMatcher(options.expectedText[i]).matches(r)).every(Boolean) };\n      }\n    }\n    {\n      if (expression === "to.match.aria") {\n        const result = matchesAriaTree(element, options.expectedValue);\n        return {\n          received: result.received,\n          matches: !!result.matches.length\n        };\n      }\n    }\n    {\n      let received;\n      if (expression === "to.have.attribute.value") {\n        const value = element.getAttribute(options.expressionArg);\n        if (value === null)\n          return { received: null, matches: false };\n        received = value;\n      } else if (expression === "to.have.class") {\n        received = element.classList.toString();\n      } else if (expression === "to.have.css") {\n        received = this.window.getComputedStyle(element).getPropertyValue(options.expressionArg);\n      } else if (expression === "to.have.id") {\n        received = element.id;\n      } else if (expression === "to.have.text") {\n        received = options.useInnerText ? element.innerText : elementText(/* @__PURE__ */ new Map(), element).full;\n      } else if (expression === "to.have.accessible.name") {\n        received = getElementAccessibleName(\n          element,\n          false\n          /* includeHidden */\n        );\n      } else if (expression === "to.have.accessible.description") {\n        received = getElementAccessibleDescription(\n          element,\n          false\n          /* includeHidden */\n        );\n      } else if (expression === "to.have.accessible.error.message") {\n        received = getElementAccessibleErrorMessage(element);\n      } else if (expression === "to.have.role") {\n        received = getAriaRole(element) || "";\n      } else if (expression === "to.have.title") {\n        received = this.document.title;\n      } else if (expression === "to.have.url") {\n        received = this.document.location.href;\n      } else if (expression === "to.have.value") {\n        element = this.retarget(element, "follow-label");\n        if (element.nodeName !== "INPUT" && element.nodeName !== "TEXTAREA" && element.nodeName !== "SELECT")\n          throw this.createStacklessError("Not an input element");\n        received = element.value;\n      }\n      if (received !== void 0 && options.expectedText) {\n        const matcher = new ExpectedTextMatcher(options.expectedText[0]);\n        return { received, matches: matcher.matches(received) };\n      }\n    }\n    throw this.createStacklessError("Unknown expect matcher: " + expression);\n  }\n  expectArray(elements, options) {\n    const expression = options.expression;\n    if (expression === "to.have.count") {\n      const received2 = elements.length;\n      const matches = received2 === options.expectedNumber;\n      return { received: received2, matches };\n    }\n    let received;\n    if (expression === "to.have.text.array" || expression === "to.contain.text.array")\n      received = elements.map((e) => options.useInnerText ? e.innerText : elementText(/* @__PURE__ */ new Map(), e).full);\n    else if (expression === "to.have.class.array")\n      received = elements.map((e) => e.classList.toString());\n    if (received && options.expectedText) {\n      const lengthShouldMatch = expression !== "to.contain.text.array";\n      const matchesLength = received.length === options.expectedText.length || !lengthShouldMatch;\n      if (!matchesLength)\n        return { received, matches: false };\n      const matchers = options.expectedText.map((e) => new ExpectedTextMatcher(e));\n      let mIndex = 0, rIndex = 0;\n      while (mIndex < matchers.length && rIndex < received.length) {\n        if (matchers[mIndex].matches(received[rIndex]))\n          ++mIndex;\n        ++rIndex;\n      }\n      return { received, matches: mIndex === matchers.length };\n    }\n    throw this.createStacklessError("Unknown expect matcher: " + expression);\n  }\n};\nvar autoClosingTags = /* @__PURE__ */ new Set(["AREA", "BASE", "BR", "COL", "COMMAND", "EMBED", "HR", "IMG", "INPUT", "KEYGEN", "LINK", "MENUITEM", "META", "PARAM", "SOURCE", "TRACK", "WBR"]);\nvar booleanAttributes = /* @__PURE__ */ new Set(["checked", "selected", "disabled", "readonly", "multiple"]);\nfunction oneLine(s) {\n  return s.replace(/\\n/g, "\\u21B5").replace(/\\t/g, "\\u21C6");\n}\nvar eventType = /* @__PURE__ */ new Map([\n  ["auxclick", "mouse"],\n  ["click", "mouse"],\n  ["dblclick", "mouse"],\n  ["mousedown", "mouse"],\n  ["mouseeenter", "mouse"],\n  ["mouseleave", "mouse"],\n  ["mousemove", "mouse"],\n  ["mouseout", "mouse"],\n  ["mouseover", "mouse"],\n  ["mouseup", "mouse"],\n  ["mouseleave", "mouse"],\n  ["mousewheel", "mouse"],\n  ["keydown", "keyboard"],\n  ["keyup", "keyboard"],\n  ["keypress", "keyboard"],\n  ["textInput", "keyboard"],\n  ["touchstart", "touch"],\n  ["touchmove", "touch"],\n  ["touchend", "touch"],\n  ["touchcancel", "touch"],\n  ["pointerover", "pointer"],\n  ["pointerout", "pointer"],\n  ["pointerenter", "pointer"],\n  ["pointerleave", "pointer"],\n  ["pointerdown", "pointer"],\n  ["pointerup", "pointer"],\n  ["pointermove", "pointer"],\n  ["pointercancel", "pointer"],\n  ["gotpointercapture", "pointer"],\n  ["lostpointercapture", "pointer"],\n  ["focus", "focus"],\n  ["blur", "focus"],\n  ["drag", "drag"],\n  ["dragstart", "drag"],\n  ["dragend", "drag"],\n  ["dragover", "drag"],\n  ["dragenter", "drag"],\n  ["dragleave", "drag"],\n  ["dragexit", "drag"],\n  ["drop", "drag"],\n  ["wheel", "wheel"],\n  ["deviceorientation", "deviceorientation"],\n  ["deviceorientationabsolute", "deviceorientation"],\n  ["devicemotion", "devicemotion"]\n]);\nvar kHoverHitTargetInterceptorEvents = /* @__PURE__ */ new Set(["mousemove"]);\nvar kTapHitTargetInterceptorEvents = /* @__PURE__ */ new Set(["pointerdown", "pointerup", "touchstart", "touchend", "touchcancel"]);\nvar kMouseHitTargetInterceptorEvents = /* @__PURE__ */ new Set(["mousedown", "mouseup", "pointerdown", "pointerup", "click", "auxclick", "dblclick", "contextmenu"]);\nvar kAllHitTargetInterceptorEvents = /* @__PURE__ */ new Set([...kHoverHitTargetInterceptorEvents, ...kTapHitTargetInterceptorEvents, ...kMouseHitTargetInterceptorEvents]);\nfunction cssUnquote(s) {\n  s = s.substring(1, s.length - 1);\n  if (!s.includes("\\\\"))\n    return s;\n  const r = [];\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === "\\\\" && i + 1 < s.length)\n      i++;\n    r.push(s[i++]);\n  }\n  return r.join("");\n}\nfunction createTextMatcher(selector, internal) {\n  if (selector[0] === "/" && selector.lastIndexOf("/") > 0) {\n    const lastSlash = selector.lastIndexOf("/");\n    const re = new RegExp(selector.substring(1, lastSlash), selector.substring(lastSlash + 1));\n    return { matcher: (elementText2) => re.test(elementText2.full), kind: "regex" };\n  }\n  const unquote = internal ? JSON.parse.bind(JSON) : cssUnquote;\n  let strict = false;\n  if (selector.length > 1 && selector[0] === \'"\' && selector[selector.length - 1] === \'"\') {\n    selector = unquote(selector);\n    strict = true;\n  } else if (internal && selector.length > 1 && selector[0] === \'"\' && selector[selector.length - 2] === \'"\' && selector[selector.length - 1] === "i") {\n    selector = unquote(selector.substring(0, selector.length - 1));\n    strict = false;\n  } else if (internal && selector.length > 1 && selector[0] === \'"\' && selector[selector.length - 2] === \'"\' && selector[selector.length - 1] === "s") {\n    selector = unquote(selector.substring(0, selector.length - 1));\n    strict = true;\n  } else if (selector.length > 1 && selector[0] === "\'" && selector[selector.length - 1] === "\'") {\n    selector = unquote(selector);\n    strict = true;\n  }\n  selector = normalizeWhiteSpace(selector);\n  if (strict) {\n    if (internal)\n      return { kind: "strict", matcher: (elementText2) => elementText2.normalized === selector };\n    const strictTextNodeMatcher = (elementText2) => {\n      if (!selector && !elementText2.immediate.length)\n        return true;\n      return elementText2.immediate.some((s) => normalizeWhiteSpace(s) === selector);\n    };\n    return { matcher: strictTextNodeMatcher, kind: "strict" };\n  }\n  selector = selector.toLowerCase();\n  return { kind: "lax", matcher: (elementText2) => elementText2.normalized.toLowerCase().includes(selector) };\n}\nvar ExpectedTextMatcher = class {\n  constructor(expected) {\n    this._normalizeWhiteSpace = expected.normalizeWhiteSpace;\n    this._ignoreCase = expected.ignoreCase;\n    this._string = expected.matchSubstring ? void 0 : this.normalize(expected.string);\n    this._substring = expected.matchSubstring ? this.normalize(expected.string) : void 0;\n    if (expected.regexSource) {\n      const flags = new Set((expected.regexFlags || "").split(""));\n      if (expected.ignoreCase === false)\n        flags.delete("i");\n      if (expected.ignoreCase === true)\n        flags.add("i");\n      this._regex = new RegExp(expected.regexSource, [...flags].join(""));\n    }\n  }\n  matches(text) {\n    if (!this._regex)\n      text = this.normalize(text);\n    if (this._string !== void 0)\n      return text === this._string;\n    if (this._substring !== void 0)\n      return text.includes(this._substring);\n    if (this._regex)\n      return !!this._regex.test(text);\n    return false;\n  }\n  normalize(s) {\n    if (!s)\n      return s;\n    if (this._normalizeWhiteSpace)\n      s = normalizeWhiteSpace(s);\n    if (this._ignoreCase)\n      s = s.toLocaleLowerCase();\n    return s;\n  }\n};\nfunction deepEquals(a, b) {\n  if (a === b)\n    return true;\n  if (a && b && typeof a === "object" && typeof b === "object") {\n    if (a.constructor !== b.constructor)\n      return false;\n    if (Array.isArray(a)) {\n      if (a.length !== b.length)\n        return false;\n      for (let i = 0; i < a.length; ++i) {\n        if (!deepEquals(a[i], b[i]))\n          return false;\n      }\n      return true;\n    }\n    if (a instanceof RegExp)\n      return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf)\n      return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString)\n      return a.toString() === b.toString();\n    const keys = Object.keys(a);\n    if (keys.length !== Object.keys(b).length)\n      return false;\n    for (let i = 0; i < keys.length; ++i) {\n      if (!b.hasOwnProperty(keys[i]))\n        return false;\n    }\n    for (const key of keys) {\n      if (!deepEquals(a[key], b[key]))\n        return false;\n    }\n    return true;\n  }\n  if (typeof a === "number" && typeof b === "number")\n    return isNaN(a) && isNaN(b);\n  return false;\n}\n';
  return injectedScriptSource;
}
var hasRequiredDom;
function requireDom() {
  if (hasRequiredDom) return dom;
  hasRequiredDom = 1;
  Object.defineProperty(dom, "__esModule", {
    value: true
  });
  dom.NonRecoverableDOMError = dom.FrameExecutionContext = dom.ElementHandle = void 0;
  dom.assertDone = assertDone;
  dom.isNonRecoverableDOMError = isNonRecoverableDOMError;
  dom.kUnableToAdoptErrorMessage = void 0;
  dom.throwElementIsNotAttached = throwElementIsNotAttached;
  dom.throwRetargetableDOMError = throwRetargetableDOMError;
  var _fs = _interopRequireDefault(require$$0$2);
  var js = _interopRequireWildcard(requireJavascript$1());
  var _progress = requireProgress();
  var _utils = requireUtils();
  var _fileUploadUtils = requireFileUploadUtils();
  var _protocolError = requireProtocolError();
  var injectedScriptSource2 = _interopRequireWildcard(requireInjectedScriptSource());
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  class NonRecoverableDOMError extends Error {
  }
  dom.NonRecoverableDOMError = NonRecoverableDOMError;
  function isNonRecoverableDOMError(error) {
    return error instanceof NonRecoverableDOMError;
  }
  class FrameExecutionContext extends js.ExecutionContext {
    constructor(delegate, frame2, world) {
      super(frame2, delegate, world || "content-script");
      this.frame = void 0;
      this._injectedScriptPromise = void 0;
      this.world = void 0;
      this.frame = frame2;
      this.world = world;
    }
    adoptIfNeeded(handle) {
      if (handle instanceof ElementHandle && handle._context !== this) return this.frame._page._delegate.adoptElementHandle(handle, this);
      return null;
    }
    async evaluate(pageFunction, arg) {
      return js.evaluate(this, true, pageFunction, arg);
    }
    async evaluateHandle(pageFunction, arg) {
      return js.evaluate(this, false, pageFunction, arg);
    }
    async evaluateExpression(expression, options, arg) {
      return js.evaluateExpression(this, expression, {
        ...options,
        returnByValue: true
      }, arg);
    }
    async evaluateExpressionHandle(expression, options, arg) {
      return js.evaluateExpression(this, expression, {
        ...options,
        returnByValue: false
      }, arg);
    }
    injectedScript() {
      if (!this._injectedScriptPromise) {
        const custom = [];
        const selectorsRegistry = this.frame._page.context().selectors();
        for (const [name, {
          source: source2
        }] of selectorsRegistry._engines) custom.push(`{ name: '${name}', engine: (${source2}) }`);
        const sdkLanguage = this.frame.attribution.playwright.options.sdkLanguage;
        const source = `
        (() => {
        const module = {};
        ${injectedScriptSource2.source}
        return new (module.exports.InjectedScript())(
          globalThis,
          ${(0, _utils.isUnderTest)()},
          "${sdkLanguage}",
          ${JSON.stringify(selectorsRegistry.testIdAttributeName())},
          ${this.frame._page._delegate.rafCountForStablePosition()},
          "${this.frame._page._browserContext._browser.options.name}",
          [${custom.join(",\n")}]
        );
        })();
      `;
        this._injectedScriptPromise = this.rawEvaluateHandle(source).then((handle) => {
          handle._setPreview("InjectedScript");
          return handle;
        });
      }
      return this._injectedScriptPromise;
    }
  }
  dom.FrameExecutionContext = FrameExecutionContext;
  class ElementHandle extends js.JSHandle {
    constructor(context, objectId) {
      super(context, "node", void 0, objectId);
      this.__elementhandle = true;
      this._page = void 0;
      this._frame = void 0;
      this._page = context.frame._page;
      this._frame = context.frame;
      this._initializePreview().catch((e2) => {
      });
    }
    async _initializePreview() {
      const utility = await this._context.injectedScript();
      this._setPreview(await utility.evaluate((injected, e2) => "JSHandle@" + injected.previewNode(e2), this));
    }
    asElement() {
      return this;
    }
    async evaluateInUtility(pageFunction, arg) {
      try {
        const utility = await this._frame._utilityContext();
        return await utility.evaluate(pageFunction, [await utility.injectedScript(), this, arg]);
      } catch (e2) {
        if (js.isJavaScriptErrorInEvaluate(e2) || (0, _protocolError.isSessionClosedError)(e2)) throw e2;
        return "error:notconnected";
      }
    }
    async evaluateHandleInUtility(pageFunction, arg) {
      try {
        const utility = await this._frame._utilityContext();
        return await utility.evaluateHandle(pageFunction, [await utility.injectedScript(), this, arg]);
      } catch (e2) {
        if (js.isJavaScriptErrorInEvaluate(e2) || (0, _protocolError.isSessionClosedError)(e2)) throw e2;
        return "error:notconnected";
      }
    }
    async ownerFrame() {
      const frameId = await this._page._delegate.getOwnerFrame(this);
      if (!frameId) return null;
      const frame2 = this._page._frameManager.frame(frameId);
      if (frame2) return frame2;
      for (const page2 of this._page._browserContext.pages()) {
        const frame3 = page2._frameManager.frame(frameId);
        if (frame3) return frame3;
      }
      return null;
    }
    async isIframeElement() {
      return this.evaluateInUtility(([injected, node]) => node && (node.nodeName === "IFRAME" || node.nodeName === "FRAME"), {});
    }
    async contentFrame() {
      const isFrameElement = throwRetargetableDOMError(await this.isIframeElement());
      if (!isFrameElement) return null;
      return this._page._delegate.getContentFrame(this);
    }
    async generateLocatorString() {
      const selector = await this.evaluateInUtility(async ([injected, node]) => {
        return injected.generateSelectorSimple(node);
      }, {});
      if (selector === "error:notconnected") return;
      return (0, _utils.asLocator)("javascript", selector);
    }
    async getAttribute(metadata, name) {
      return this._frame.getAttribute(metadata, ":scope", name, {}, this);
    }
    async inputValue(metadata) {
      return this._frame.inputValue(metadata, ":scope", {}, this);
    }
    async textContent(metadata) {
      return this._frame.textContent(metadata, ":scope", {}, this);
    }
    async innerText(metadata) {
      return this._frame.innerText(metadata, ":scope", {}, this);
    }
    async innerHTML(metadata) {
      return this._frame.innerHTML(metadata, ":scope", {}, this);
    }
    async dispatchEvent(metadata, type, eventInit = {}) {
      return this._frame.dispatchEvent(metadata, ":scope", type, eventInit, {}, this);
    }
    async _scrollRectIntoViewIfNeeded(rect) {
      return await this._page._delegate.scrollRectIntoViewIfNeeded(this, rect);
    }
    async _waitAndScrollIntoViewIfNeeded(progress2, waitForVisible) {
      const result = await this._retryAction(progress2, "scroll into view", async () => {
        progress2.log(`  waiting for element to be stable`);
        const waitResult = await this.evaluateInUtility(async ([injected, node, {
          waitForVisible: waitForVisible2
        }]) => {
          return await injected.checkElementStates(node, waitForVisible2 ? ["visible", "stable"] : ["stable"]);
        }, {
          waitForVisible
        });
        if (waitResult) return waitResult;
        return await this._scrollRectIntoViewIfNeeded();
      }, {});
      assertDone(throwRetargetableDOMError(result));
    }
    async scrollIntoViewIfNeeded(metadata, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this._waitAndScrollIntoViewIfNeeded(
        progress2,
        false
        /* waitForVisible */
      ), this._page._timeoutSettings.timeout(options));
    }
    async _clickablePoint() {
      const intersectQuadWithViewport = (quad) => {
        return quad.map((point) => ({
          x: Math.min(Math.max(point.x, 0), metrics.width),
          y: Math.min(Math.max(point.y, 0), metrics.height)
        }));
      };
      const computeQuadArea = (quad) => {
        let area = 0;
        for (let i = 0; i < quad.length; ++i) {
          const p1 = quad[i];
          const p2 = quad[(i + 1) % quad.length];
          area += (p1.x * p2.y - p2.x * p1.y) / 2;
        }
        return Math.abs(area);
      };
      const [quads, metrics] = await Promise.all([this._page._delegate.getContentQuads(this), this._page.mainFrame()._utilityContext().then((utility) => utility.evaluate(() => ({
        width: innerWidth,
        height: innerHeight
      })))]);
      if (quads === "error:notconnected") return quads;
      if (!quads || !quads.length) return "error:notvisible";
      const filtered = quads.map((quad) => intersectQuadWithViewport(quad)).filter((quad) => computeQuadArea(quad) > 0.99);
      if (!filtered.length) return "error:notinviewport";
      if (this._page._browserContext._browser.options.name === "firefox") {
        for (const quad of filtered) {
          const integerPoint = findIntegerPointInsideQuad(quad);
          if (integerPoint) return integerPoint;
        }
      }
      return quadMiddlePoint(filtered[0]);
    }
    async _offsetPoint(offset) {
      const [box, border] = await Promise.all([this.boundingBox(), this.evaluateInUtility(([injected, node]) => injected.getElementBorderWidth(node), {}).catch((e2) => {
      })]);
      if (!box || !border) return "error:notvisible";
      if (border === "error:notconnected") return border;
      return {
        x: box.x + border.left + offset.x,
        y: box.y + border.top + offset.y
      };
    }
    async _retryAction(progress2, actionName, action, options) {
      let retry = 0;
      const waitTime = [0, 20, 100, 100, 500];
      while (progress2.isRunning()) {
        if (retry) {
          progress2.log(`retrying ${actionName} action${options.trial ? " (trial run)" : ""}`);
          const timeout = waitTime[Math.min(retry - 1, waitTime.length - 1)];
          if (timeout) {
            progress2.log(`  waiting ${timeout}ms`);
            const result2 = await this.evaluateInUtility(([injected, node, timeout2]) => new Promise((f2) => setTimeout(f2, timeout2)), timeout);
            if (result2 === "error:notconnected") return result2;
          }
        } else {
          progress2.log(`attempting ${actionName} action${options.trial ? " (trial run)" : ""}`);
        }
        if (!options.skipActionPreChecks && !options.force) await this._frame._page.performActionPreChecks(progress2);
        const result = await action(retry);
        ++retry;
        if (result === "error:notvisible") {
          if (options.force) throw new NonRecoverableDOMError("Element is not visible");
          progress2.log("  element is not visible");
          continue;
        }
        if (result === "error:notinviewport") {
          if (options.force) throw new NonRecoverableDOMError("Element is outside of the viewport");
          progress2.log("  element is outside of the viewport");
          continue;
        }
        if (result === "error:optionsnotfound") {
          progress2.log("  did not find some options");
          continue;
        }
        if (typeof result === "object" && "hitTargetDescription" in result) {
          progress2.log(`  ${result.hitTargetDescription} intercepts pointer events`);
          continue;
        }
        if (typeof result === "object" && "missingState" in result) {
          progress2.log(`  element is not ${result.missingState}`);
          continue;
        }
        return result;
      }
      return "done";
    }
    async _retryPointerAction(progress2, actionName, waitForEnabled, action, options) {
      const skipActionPreChecks = actionName === "move and up";
      return await this._retryAction(progress2, actionName, async (retry) => {
        const scrollOptions = [void 0, {
          block: "end",
          inline: "end"
        }, {
          block: "center",
          inline: "center"
        }, {
          block: "start",
          inline: "start"
        }];
        const forceScrollOptions = scrollOptions[retry % scrollOptions.length];
        return await this._performPointerAction(progress2, actionName, waitForEnabled, action, forceScrollOptions, options);
      }, {
        ...options,
        skipActionPreChecks
      });
    }
    async _performPointerAction(progress2, actionName, waitForEnabled, action, forceScrollOptions, options) {
      const {
        force = false,
        position
      } = options;
      const doScrollIntoView = async () => {
        if (forceScrollOptions) {
          return await this.evaluateInUtility(([injected, node, options2]) => {
            if (node.nodeType === 1) node.scrollIntoView(options2);
            return "done";
          }, forceScrollOptions);
        }
        return await this._scrollRectIntoViewIfNeeded(position ? {
          x: position.x,
          y: position.y,
          width: 0,
          height: 0
        } : void 0);
      };
      if (this._frame.parentFrame()) {
        progress2.throwIfAborted();
        await doScrollIntoView().catch(() => {
        });
      }
      if (options.__testHookBeforeStable) await options.__testHookBeforeStable();
      if (!force) {
        const elementStates = waitForEnabled ? ["visible", "enabled", "stable"] : ["visible", "stable"];
        progress2.log(`  waiting for element to be ${waitForEnabled ? "visible, enabled and stable" : "visible and stable"}`);
        const result = await this.evaluateInUtility(async ([injected, node, {
          elementStates: elementStates2
        }]) => {
          return await injected.checkElementStates(node, elementStates2);
        }, {
          elementStates
        });
        if (result) return result;
        progress2.log(`  element is ${waitForEnabled ? "visible, enabled and stable" : "visible and stable"}`);
      }
      if (options.__testHookAfterStable) await options.__testHookAfterStable();
      progress2.log("  scrolling into view if needed");
      progress2.throwIfAborted();
      const scrolled = await doScrollIntoView();
      if (scrolled !== "done") return scrolled;
      progress2.log("  done scrolling");
      const maybePoint = position ? await this._offsetPoint(position) : await this._clickablePoint();
      if (typeof maybePoint === "string") return maybePoint;
      const point = roundPoint(maybePoint);
      progress2.metadata.point = point;
      await this.instrumentation.onBeforeInputAction(this, progress2.metadata);
      let hitTargetInterceptionHandle;
      if (force) {
        progress2.log(`  forcing action`);
      } else {
        if (options.__testHookBeforeHitTarget) await options.__testHookBeforeHitTarget();
        const frameCheckResult = await this._checkFrameIsHitTarget(point);
        if (frameCheckResult === "error:notconnected" || "hitTargetDescription" in frameCheckResult) return frameCheckResult;
        const hitPoint = frameCheckResult.framePoint;
        const actionType = actionName === "move and up" ? "drag" : actionName === "hover" || actionName === "tap" ? actionName : "mouse";
        const handle = await this.evaluateHandleInUtility(([injected, node, {
          actionType: actionType2,
          hitPoint: hitPoint2,
          trial
        }]) => injected.setupHitTargetInterceptor(node, actionType2, hitPoint2, trial), {
          actionType,
          hitPoint,
          trial: !!options.trial
        });
        if (handle === "error:notconnected") return handle;
        if (!handle._objectId) {
          const error = handle.rawValue();
          if (error === "error:notconnected") return error;
          return {
            hitTargetDescription: error
          };
        }
        hitTargetInterceptionHandle = handle;
        progress2.cleanupWhenAborted(() => {
          hitTargetInterceptionHandle.evaluate((h2) => h2.stop()).catch((e2) => {
          });
          hitTargetInterceptionHandle.dispose();
        });
      }
      const actionResult = await this._page._frameManager.waitForSignalsCreatedBy(progress2, options.waitAfter === true, async () => {
        if (options.__testHookBeforePointerAction) await options.__testHookBeforePointerAction();
        progress2.throwIfAborted();
        let restoreModifiers;
        if (options && options.modifiers) restoreModifiers = await this._page.keyboard.ensureModifiers(options.modifiers);
        progress2.log(`  performing ${actionName} action`);
        await action(point);
        if (restoreModifiers) await this._page.keyboard.ensureModifiers(restoreModifiers);
        if (hitTargetInterceptionHandle) {
          const stopHitTargetInterception = this._frame.raceAgainstEvaluationStallingEvents(() => {
            return hitTargetInterceptionHandle.evaluate((h2) => h2.stop());
          }).catch((e2) => "done").finally(() => {
            var _hitTargetInterceptio;
            (_hitTargetInterceptio = hitTargetInterceptionHandle) === null || _hitTargetInterceptio === void 0 || _hitTargetInterceptio.dispose();
          });
          if (options.waitAfter !== false) {
            const hitTargetResult = await stopHitTargetInterception;
            if (hitTargetResult !== "done") return hitTargetResult;
          }
        }
        progress2.log(`  ${options.trial ? "trial " : ""}${actionName} action done`);
        progress2.log("  waiting for scheduled navigations to finish");
        if (options.__testHookAfterPointerAction) await options.__testHookAfterPointerAction();
        return "done";
      });
      if (actionResult !== "done") return actionResult;
      progress2.log("  navigations have finished");
      return "done";
    }
    async _markAsTargetElement(metadata) {
      if (!metadata.id) return;
      await this.evaluateInUtility(([injected, node, callId]) => {
        if (node.nodeType === 1) injected.markTargetElements(/* @__PURE__ */ new Set([node]), callId);
      }, metadata.id);
    }
    async hover(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        await this._markAsTargetElement(metadata);
        const result = await this._hover(progress2, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    _hover(progress2, options) {
      return this._retryPointerAction(progress2, "hover", false, (point) => this._page.mouse.move(point.x, point.y), {
        ...options,
        waitAfter: "disabled"
      });
    }
    async click(metadata, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        await this._markAsTargetElement(metadata);
        const result = await this._click(progress2, {
          ...options,
          waitAfter: !options.noWaitAfter
        });
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    _click(progress2, options) {
      return this._retryPointerAction(progress2, "click", true, (point) => this._page.mouse.click(point.x, point.y, options), options);
    }
    async dblclick(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        await this._markAsTargetElement(metadata);
        const result = await this._dblclick(progress2, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    _dblclick(progress2, options) {
      return this._retryPointerAction(progress2, "dblclick", true, (point) => this._page.mouse.dblclick(point.x, point.y, options), {
        ...options,
        waitAfter: "disabled"
      });
    }
    async tap(metadata, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        await this._markAsTargetElement(metadata);
        const result = await this._tap(progress2, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    _tap(progress2, options) {
      return this._retryPointerAction(progress2, "tap", true, (point) => this._page.touchscreen.tap(point.x, point.y), {
        ...options,
        waitAfter: "disabled"
      });
    }
    async selectOption(metadata, elements, values, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        await this._markAsTargetElement(metadata);
        const result = await this._selectOption(progress2, elements, values, options);
        return throwRetargetableDOMError(result);
      }, this._page._timeoutSettings.timeout(options));
    }
    async _selectOption(progress2, elements, values, options) {
      let resultingOptions = [];
      await this._retryAction(progress2, "select option", async () => {
        await this.instrumentation.onBeforeInputAction(this, progress2.metadata);
        if (!options.force) progress2.log(`  waiting for element to be visible and enabled`);
        const optionsToSelect = [...elements, ...values];
        const result = await this.evaluateInUtility(async ([injected, node, {
          optionsToSelect: optionsToSelect2,
          force
        }]) => {
          if (!force) {
            const checkResult = await injected.checkElementStates(node, ["visible", "enabled"]);
            if (checkResult) return checkResult;
          }
          return injected.selectOptions(node, optionsToSelect2);
        }, {
          optionsToSelect,
          force: options.force
        });
        if (Array.isArray(result)) {
          progress2.log("  selected specified option(s)");
          resultingOptions = result;
          return "done";
        }
        return result;
      }, options);
      return resultingOptions;
    }
    async fill(metadata, value, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        await this._markAsTargetElement(metadata);
        const result = await this._fill(progress2, value, options);
        assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async _fill(progress2, value, options) {
      progress2.log(`  fill("${value}")`);
      return await this._retryAction(progress2, "fill", async () => {
        await this.instrumentation.onBeforeInputAction(this, progress2.metadata);
        if (!options.force) progress2.log("  waiting for element to be visible, enabled and editable");
        const result = await this.evaluateInUtility(async ([injected, node, {
          value: value2,
          force
        }]) => {
          if (!force) {
            const checkResult = await injected.checkElementStates(node, ["visible", "enabled", "editable"]);
            if (checkResult) return checkResult;
          }
          return injected.fill(node, value2);
        }, {
          value,
          force: options.force
        });
        progress2.throwIfAborted();
        if (result === "needsinput") {
          if (value) await this._page.keyboard.insertText(value);
          else await this._page.keyboard.press("Delete");
          return "done";
        } else {
          return result;
        }
      }, options);
    }
    async selectText(metadata, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._retryAction(progress2, "selectText", async () => {
          if (!options.force) progress2.log("  waiting for element to be visible");
          return await this.evaluateInUtility(async ([injected, node, {
            force
          }]) => {
            if (!force) {
              const checkResult = await injected.checkElementStates(node, ["visible"]);
              if (checkResult) return checkResult;
            }
            return injected.selectText(node);
          }, {
            force: options.force
          });
        }, options);
        assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async setInputFiles(metadata, params) {
      const inputFileItems = await (0, _fileUploadUtils.prepareFilesForUpload)(this._frame, params);
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        await this._markAsTargetElement(metadata);
        const result = await this._setInputFiles(progress2, inputFileItems);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(params));
    }
    async _setInputFiles(progress2, items) {
      const {
        filePayloads,
        localPaths,
        localDirectory
      } = items;
      const multiple = filePayloads && filePayloads.length > 1 || localPaths && localPaths.length > 1;
      const result = await this.evaluateHandleInUtility(([injected, node, {
        multiple: multiple2,
        directoryUpload
      }]) => {
        const element = injected.retarget(node, "follow-label");
        if (!element) return;
        if (element.tagName !== "INPUT") throw injected.createStacklessError("Node is not an HTMLInputElement");
        const inputElement = element;
        if (multiple2 && !inputElement.multiple && !inputElement.webkitdirectory) throw injected.createStacklessError("Non-multiple file input can only accept single file");
        if (directoryUpload && !inputElement.webkitdirectory) throw injected.createStacklessError("File input does not support directories, pass individual files instead");
        if (!directoryUpload && inputElement.webkitdirectory) throw injected.createStacklessError("[webkitdirectory] input requires passing a path to a directory");
        return inputElement;
      }, {
        multiple,
        directoryUpload: !!localDirectory
      });
      if (result === "error:notconnected" || !result.asElement()) return "error:notconnected";
      const retargeted = result.asElement();
      await this.instrumentation.onBeforeInputAction(this, progress2.metadata);
      progress2.throwIfAborted();
      if (localPaths || localDirectory) {
        const localPathsOrDirectory = localDirectory ? [localDirectory] : localPaths;
        await Promise.all(localPathsOrDirectory.map((localPath) => _fs.default.promises.access(localPath, _fs.default.constants.F_OK)));
        const waitForInputEvent = localDirectory ? this.evaluate((node) => new Promise((fulfill) => {
          node.addEventListener("input", fulfill, {
            once: true
          });
        })).catch(() => {
        }) : Promise.resolve();
        await this._page._delegate.setInputFilePaths(retargeted, localPathsOrDirectory);
        await waitForInputEvent;
      } else {
        await retargeted.evaluateInUtility(([injected, node, files]) => injected.setInputFiles(node, files), filePayloads);
      }
      return "done";
    }
    async focus(metadata) {
      const controller = new _progress.ProgressController(metadata, this);
      await controller.run(async (progress2) => {
        await this._markAsTargetElement(metadata);
        const result = await this._focus(progress2);
        return assertDone(throwRetargetableDOMError(result));
      }, 0);
    }
    async _focus(progress2, resetSelectionIfNotFocused) {
      progress2.throwIfAborted();
      return await this.evaluateInUtility(([injected, node, resetSelectionIfNotFocused2]) => injected.focusNode(node, resetSelectionIfNotFocused2), resetSelectionIfNotFocused);
    }
    async _blur(progress2) {
      progress2.throwIfAborted();
      return await this.evaluateInUtility(([injected, node]) => injected.blurNode(node), {});
    }
    async type(metadata, text, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        await this._markAsTargetElement(metadata);
        const result = await this._type(progress2, text, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async _type(progress2, text, options) {
      progress2.log(`elementHandle.type("${text}")`);
      await this.instrumentation.onBeforeInputAction(this, progress2.metadata);
      const result = await this._focus(
        progress2,
        true
        /* resetSelectionIfNotFocused */
      );
      if (result !== "done") return result;
      progress2.throwIfAborted();
      await this._page.keyboard.type(text, options);
      return "done";
    }
    async press(metadata, key, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        await this._markAsTargetElement(metadata);
        const result = await this._press(progress2, key, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async _press(progress2, key, options) {
      progress2.log(`elementHandle.press("${key}")`);
      await this.instrumentation.onBeforeInputAction(this, progress2.metadata);
      return this._page._frameManager.waitForSignalsCreatedBy(progress2, !options.noWaitAfter, async () => {
        const result = await this._focus(
          progress2,
          true
          /* resetSelectionIfNotFocused */
        );
        if (result !== "done") return result;
        progress2.throwIfAborted();
        await this._page.keyboard.press(key, options);
        return "done";
      });
    }
    async check(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._setChecked(progress2, true, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async uncheck(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._setChecked(progress2, false, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async _setChecked(progress2, state, options) {
      const isChecked = async () => {
        const result2 = await this.evaluateInUtility(([injected, node]) => injected.elementState(node, "checked"), {});
        if (result2 === "error:notconnected" || result2.received === "error:notconnected") throwElementIsNotAttached();
        return result2.matches;
      };
      await this._markAsTargetElement(progress2.metadata);
      if (await isChecked() === state) return "done";
      const result = await this._click(progress2, {
        ...options,
        waitAfter: "disabled"
      });
      if (result !== "done") return result;
      if (options.trial) return "done";
      if (await isChecked() !== state) throw new NonRecoverableDOMError("Clicking the checkbox did not change its state");
      return "done";
    }
    async boundingBox() {
      return this._page._delegate.getBoundingBox(this);
    }
    async ariaSnapshot(options) {
      return await this.evaluateInUtility(([injected, element, options2]) => injected.ariaSnapshot(element, options2), options);
    }
    async screenshot(metadata, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this._page._screenshotter.screenshotElement(progress2, this, options), this._page._timeoutSettings.timeout(options));
    }
    async querySelector(selector, options) {
      return this._frame.selectors.query(selector, options, this);
    }
    async querySelectorAll(selector) {
      return this._frame.selectors.queryAll(selector, this);
    }
    async evalOnSelector(selector, strict, expression, isFunction, arg) {
      return this._frame.evalOnSelector(selector, strict, expression, isFunction, arg, this);
    }
    async evalOnSelectorAll(selector, expression, isFunction, arg) {
      return this._frame.evalOnSelectorAll(selector, expression, isFunction, arg, this);
    }
    async isVisible(metadata) {
      return this._frame.isVisible(metadata, ":scope", {}, this);
    }
    async isHidden(metadata) {
      return this._frame.isHidden(metadata, ":scope", {}, this);
    }
    async isEnabled(metadata) {
      return this._frame.isEnabled(metadata, ":scope", {}, this);
    }
    async isDisabled(metadata) {
      return this._frame.isDisabled(metadata, ":scope", {}, this);
    }
    async isEditable(metadata) {
      return this._frame.isEditable(metadata, ":scope", {}, this);
    }
    async isChecked(metadata) {
      return this._frame.isChecked(metadata, ":scope", {}, this);
    }
    async waitForElementState(metadata, state, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const actionName = `wait for ${state}`;
        const result = await this._retryAction(progress2, actionName, async () => {
          return await this.evaluateInUtility(async ([injected, node, state2]) => {
            return await injected.checkElementStates(node, [state2]) || "done";
          }, state);
        }, {});
        assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async waitForSelector(metadata, selector, options = {}) {
      return this._frame.waitForSelector(metadata, selector, options, this);
    }
    async _adoptTo(context) {
      if (this._context !== context) {
        const adopted = await this._page._delegate.adoptElementHandle(this, context);
        this.dispose();
        return adopted;
      }
      return this;
    }
    async _checkFrameIsHitTarget(point) {
      let frame2 = this._frame;
      const data = [];
      while (frame2.parentFrame()) {
        const frameElement = await frame2.frameElement();
        const box = await frameElement.boundingBox();
        const style = await frameElement.evaluateInUtility(([injected, iframe]) => injected.describeIFrameStyle(iframe), {}).catch((e2) => "error:notconnected");
        if (!box || style === "error:notconnected") return "error:notconnected";
        if (style === "transformed") {
          return {
            framePoint: void 0
          };
        }
        const pointInFrame = {
          x: point.x - box.x - style.left,
          y: point.y - box.y - style.top
        };
        data.push({
          frame: frame2,
          frameElement,
          pointInFrame
        });
        frame2 = frame2.parentFrame();
      }
      data.push({
        frame: frame2,
        frameElement: null,
        pointInFrame: point
      });
      for (let i = data.length - 1; i > 0; i--) {
        const element = data[i - 1].frameElement;
        const point2 = data[i].pointInFrame;
        const hitTargetResult = await element.evaluateInUtility(([injected, element2, hitPoint]) => {
          return injected.expectHitTarget(hitPoint, element2);
        }, point2);
        if (hitTargetResult !== "done") return hitTargetResult;
      }
      return {
        framePoint: data[0].pointInFrame
      };
    }
  }
  dom.ElementHandle = ElementHandle;
  function throwRetargetableDOMError(result) {
    if (result === "error:notconnected") throwElementIsNotAttached();
    return result;
  }
  function throwElementIsNotAttached() {
    throw new Error("Element is not attached to the DOM");
  }
  function assertDone(result) {
  }
  function roundPoint(point) {
    return {
      x: (point.x * 100 | 0) / 100,
      y: (point.y * 100 | 0) / 100
    };
  }
  function quadMiddlePoint(quad) {
    const result = {
      x: 0,
      y: 0
    };
    for (const point of quad) {
      result.x += point.x / 4;
      result.y += point.y / 4;
    }
    return result;
  }
  function triangleArea(p1, p2, p3) {
    return Math.abs(p1.x * (p2.y - p3.y) + p2.x * (p3.y - p1.y) + p3.x * (p1.y - p2.y)) / 2;
  }
  function isPointInsideQuad(point, quad) {
    const area1 = triangleArea(point, quad[0], quad[1]) + triangleArea(point, quad[1], quad[2]) + triangleArea(point, quad[2], quad[3]) + triangleArea(point, quad[3], quad[0]);
    const area2 = triangleArea(quad[0], quad[1], quad[2]) + triangleArea(quad[1], quad[2], quad[3]);
    if (Math.abs(area1 - area2) > 0.1) return false;
    return point.x < Math.max(quad[0].x, quad[1].x, quad[2].x, quad[3].x) && point.y < Math.max(quad[0].y, quad[1].y, quad[2].y, quad[3].y);
  }
  function findIntegerPointInsideQuad(quad) {
    const point = quadMiddlePoint(quad);
    point.x = Math.floor(point.x);
    point.y = Math.floor(point.y);
    if (isPointInsideQuad(point, quad)) return point;
    point.x += 1;
    if (isPointInsideQuad(point, quad)) return point;
    point.y += 1;
    if (isPointInsideQuad(point, quad)) return point;
    point.x -= 1;
    if (isPointInsideQuad(point, quad)) return point;
  }
  dom.kUnableToAdoptErrorMessage = "Unable to adopt element handle from a different document";
  return dom;
}
var frameSelectors = {};
var hasRequiredFrameSelectors;
function requireFrameSelectors() {
  if (hasRequiredFrameSelectors) return frameSelectors;
  hasRequiredFrameSelectors = 1;
  Object.defineProperty(frameSelectors, "__esModule", {
    value: true
  });
  frameSelectors.FrameSelectors = void 0;
  var _utils = requireUtils();
  var _selectorParser = requireSelectorParser();
  class FrameSelectors {
    constructor(frame2) {
      this.frame = void 0;
      this.frame = frame2;
    }
    _parseSelector(selector, options) {
      const strict = typeof (options === null || options === void 0 ? void 0 : options.strict) === "boolean" ? options.strict : !!this.frame._page.context()._options.strictSelectors;
      return this.frame._page.context().selectors().parseSelector(selector, strict);
    }
    async query(selector, options, scope) {
      const resolved = await this.resolveInjectedForSelector(selector, options, scope);
      if (!resolved) return null;
      const handle = await resolved.injected.evaluateHandle((injected, {
        info,
        scope: scope2
      }) => {
        return injected.querySelector(info.parsed, scope2 || document, info.strict);
      }, {
        info: resolved.info,
        scope: resolved.scope
      });
      const elementHandle2 = handle.asElement();
      if (!elementHandle2) {
        handle.dispose();
        return null;
      }
      return adoptIfNeeded(elementHandle2, await resolved.frame._mainContext());
    }
    async queryArrayInMainWorld(selector, scope) {
      const resolved = await this.resolveInjectedForSelector(selector, {
        mainWorld: true
      }, scope);
      if (!resolved) throw new Error(`Failed to find frame for selector "${selector}"`);
      return await resolved.injected.evaluateHandle((injected, {
        info,
        scope: scope2
      }) => {
        return injected.querySelectorAll(info.parsed, scope2 || document);
      }, {
        info: resolved.info,
        scope: resolved.scope
      });
    }
    async queryCount(selector) {
      const resolved = await this.resolveInjectedForSelector(selector);
      if (!resolved) throw new Error(`Failed to find frame for selector "${selector}"`);
      return await resolved.injected.evaluate((injected, {
        info
      }) => {
        return injected.querySelectorAll(info.parsed, document).length;
      }, {
        info: resolved.info
      });
    }
    async queryAll(selector, scope) {
      const resolved = await this.resolveInjectedForSelector(selector, {}, scope);
      if (!resolved) return [];
      const arrayHandle = await resolved.injected.evaluateHandle((injected, {
        info,
        scope: scope2
      }) => {
        return injected.querySelectorAll(info.parsed, scope2 || document);
      }, {
        info: resolved.info,
        scope: resolved.scope
      });
      const properties = await arrayHandle.getProperties();
      arrayHandle.dispose();
      const targetContext = await resolved.frame._mainContext();
      const result = [];
      for (const property of properties.values()) {
        const elementHandle2 = property.asElement();
        if (elementHandle2) result.push(adoptIfNeeded(elementHandle2, targetContext));
        else property.dispose();
      }
      return Promise.all(result);
    }
    async resolveFrameForSelector(selector, options = {}, scope) {
      let frame2 = this.frame;
      const frameChunks = (0, _selectorParser.splitSelectorByFrame)(selector);
      for (const chunk of frameChunks) {
        (0, _selectorParser.visitAllSelectorParts)(chunk, (part, nested) => {
          if (nested && part.name === "internal:control" && part.body === "enter-frame") {
            const locator2 = (0, _utils.asLocator)(this.frame._page.attribution.playwright.options.sdkLanguage, selector);
            throw new _selectorParser.InvalidSelectorError(`Frame locators are not allowed inside composite locators, while querying "${locator2}"`);
          }
        });
      }
      for (let i = 0; i < frameChunks.length - 1; ++i) {
        const info = this._parseSelector(frameChunks[i], options);
        const context = await frame2._context(info.world);
        const injectedScript = await context.injectedScript();
        const handle = await injectedScript.evaluateHandle((injected, {
          info: info2,
          scope: scope2,
          selectorString
        }) => {
          const element2 = injected.querySelector(info2.parsed, scope2 || document, info2.strict);
          if (element2 && element2.nodeName !== "IFRAME" && element2.nodeName !== "FRAME") throw injected.createStacklessError(`Selector "${selectorString}" resolved to ${injected.previewNode(element2)}, <iframe> was expected`);
          return element2;
        }, {
          info,
          scope: i === 0 ? scope : void 0,
          selectorString: (0, _selectorParser.stringifySelector)(info.parsed)
        });
        const element = handle.asElement();
        if (!element) return null;
        const maybeFrame = await frame2._page._delegate.getContentFrame(element);
        element.dispose();
        if (!maybeFrame) return null;
        frame2 = maybeFrame;
      }
      if (frame2 !== this.frame) scope = void 0;
      return {
        frame: frame2,
        info: frame2.selectors._parseSelector(frameChunks[frameChunks.length - 1], options),
        scope
      };
    }
    async resolveInjectedForSelector(selector, options, scope) {
      const resolved = await this.resolveFrameForSelector(selector, options, scope);
      if (!resolved) return;
      const context = await resolved.frame._context(options !== null && options !== void 0 && options.mainWorld ? "main" : resolved.info.world);
      const injected = await context.injectedScript();
      return {
        injected,
        info: resolved.info,
        frame: resolved.frame,
        scope: resolved.scope
      };
    }
  }
  frameSelectors.FrameSelectors = FrameSelectors;
  async function adoptIfNeeded(handle, context) {
    if (handle._context === context) return handle;
    const adopted = await handle._page._delegate.adoptElementHandle(handle, context);
    handle.dispose();
    return adopted;
  }
  return frameSelectors;
}
var helper = {};
var hasRequiredHelper;
function requireHelper() {
  if (hasRequiredHelper) return helper;
  hasRequiredHelper = 1;
  Object.defineProperty(helper, "__esModule", {
    value: true
  });
  helper.helper = void 0;
  var _debugLogger = requireDebugLogger();
  var _eventsHelper = requireEventsHelper();
  const MAX_LOG_LENGTH = process.env.MAX_LOG_LENGTH ? +process.env.MAX_LOG_LENGTH : Infinity;
  class Helper {
    static completeUserURL(urlString) {
      if (urlString.startsWith("localhost") || urlString.startsWith("127.0.0.1")) urlString = "http://" + urlString;
      return urlString;
    }
    static enclosingIntRect(rect) {
      const x2 = Math.floor(rect.x + 1e-3);
      const y2 = Math.floor(rect.y + 1e-3);
      const x22 = Math.ceil(rect.x + rect.width - 1e-3);
      const y22 = Math.ceil(rect.y + rect.height - 1e-3);
      return {
        x: x2,
        y: y2,
        width: x22 - x2,
        height: y22 - y2
      };
    }
    static enclosingIntSize(size) {
      return {
        width: Math.floor(size.width + 1e-3),
        height: Math.floor(size.height + 1e-3)
      };
    }
    static getViewportSizeFromWindowFeatures(features) {
      const widthString = features.find((f2) => f2.startsWith("width="));
      const heightString = features.find((f2) => f2.startsWith("height="));
      const width = widthString ? parseInt(widthString.substring(6), 10) : NaN;
      const height = heightString ? parseInt(heightString.substring(7), 10) : NaN;
      if (!Number.isNaN(width) && !Number.isNaN(height)) return {
        width,
        height
      };
      return null;
    }
    static waitForEvent(progress2, emitter, event, predicate) {
      const listeners = [];
      const promise = new Promise((resolve2, reject) => {
        listeners.push(_eventsHelper.eventsHelper.addEventListener(emitter, event, (eventArg) => {
          try {
            if (predicate && !predicate(eventArg)) return;
            _eventsHelper.eventsHelper.removeEventListeners(listeners);
            resolve2(eventArg);
          } catch (e2) {
            _eventsHelper.eventsHelper.removeEventListeners(listeners);
            reject(e2);
          }
        }));
      });
      const dispose = () => _eventsHelper.eventsHelper.removeEventListeners(listeners);
      if (progress2) progress2.cleanupWhenAborted(dispose);
      return {
        promise,
        dispose
      };
    }
    static secondsToRoundishMillis(value) {
      return (value * 1e6 | 0) / 1e3;
    }
    static millisToRoundishMillis(value) {
      return (value * 1e3 | 0) / 1e3;
    }
    static debugProtocolLogger(protocolLogger) {
      return (direction, message) => {
        if (protocolLogger) protocolLogger(direction, message);
        if (_debugLogger.debugLogger.isEnabled("protocol")) {
          let text = JSON.stringify(message);
          if (text.length > MAX_LOG_LENGTH) text = text.substring(0, MAX_LOG_LENGTH / 2) + " <<<<<( LOG TRUNCATED )>>>>> " + text.substring(text.length - MAX_LOG_LENGTH / 2);
          _debugLogger.debugLogger.log("protocol", (direction === "send" ? "SEND ► " : "◀ RECV ") + text);
        }
      };
    }
    static formatBrowserLogs(logs, disconnectReason) {
      if (!disconnectReason && !logs.length) return "";
      return "\n" + (disconnectReason ? disconnectReason + "\n" : "") + logs.join("\n");
    }
  }
  helper.helper = Helper;
  return helper;
}
var network$1 = {};
var hasRequiredNetwork$1;
function requireNetwork$1() {
  if (hasRequiredNetwork$1) return network$1;
  hasRequiredNetwork$1 = 1;
  Object.defineProperty(network$1, "__esModule", {
    value: true
  });
  network$1.WebSocket = network$1.Route = network$1.Response = network$1.Request = void 0;
  network$1.filterCookies = filterCookies;
  network$1.kMaxCookieExpiresDateInSeconds = void 0;
  network$1.mergeHeaders = mergeHeaders;
  network$1.parseURL = parseURL;
  network$1.rewriteCookies = rewriteCookies;
  network$1.singleHeader = singleHeader;
  network$1.statusText = statusText;
  network$1.stripFragmentFromUrl = stripFragmentFromUrl;
  var _utils = requireUtils();
  var _browserContext = requireBrowserContext$1();
  var _fetch = requireFetch$1();
  var _instrumentation = requireInstrumentation();
  var _manualPromise = requireManualPromise();
  function filterCookies(cookies, urls) {
    const parsedURLs = urls.map((s2) => new URL(s2));
    return cookies.filter((c2) => {
      if (!parsedURLs.length) return true;
      for (const parsedURL of parsedURLs) {
        let domain = c2.domain;
        if (!domain.startsWith(".")) domain = "." + domain;
        if (!("." + parsedURL.hostname).endsWith(domain)) continue;
        if (!parsedURL.pathname.startsWith(c2.path)) continue;
        if (parsedURL.protocol !== "https:" && parsedURL.hostname !== "localhost" && c2.secure) continue;
        return true;
      }
      return false;
    });
  }
  const kMaxCookieExpiresDateInSeconds = network$1.kMaxCookieExpiresDateInSeconds = 253402300799;
  function rewriteCookies(cookies) {
    return cookies.map((c2) => {
      (0, _utils.assert)(c2.url || c2.domain && c2.path, "Cookie should have a url or a domain/path pair");
      (0, _utils.assert)(!(c2.url && c2.domain), "Cookie should have either url or domain");
      (0, _utils.assert)(!(c2.url && c2.path), "Cookie should have either url or path");
      (0, _utils.assert)(!(c2.expires && c2.expires < 0 && c2.expires !== -1), "Cookie should have a valid expires, only -1 or a positive number for the unix timestamp in seconds is allowed");
      (0, _utils.assert)(!(c2.expires && c2.expires > 0 && c2.expires > kMaxCookieExpiresDateInSeconds), "Cookie should have a valid expires, only -1 or a positive number for the unix timestamp in seconds is allowed");
      const copy2 = {
        ...c2
      };
      if (copy2.url) {
        (0, _utils.assert)(copy2.url !== "about:blank", `Blank page can not have cookie "${c2.name}"`);
        (0, _utils.assert)(!copy2.url.startsWith("data:"), `Data URL page can not have cookie "${c2.name}"`);
        const url = new URL(copy2.url);
        copy2.domain = url.hostname;
        copy2.path = url.pathname.substring(0, url.pathname.lastIndexOf("/") + 1);
        copy2.secure = url.protocol === "https:";
      }
      return copy2;
    });
  }
  function parseURL(url) {
    try {
      return new URL(url);
    } catch (e2) {
      return null;
    }
  }
  function stripFragmentFromUrl(url) {
    if (!url.includes("#")) return url;
    return url.substring(0, url.indexOf("#"));
  }
  class Request extends _instrumentation.SdkObject {
    constructor(context, frame2, serviceWorker, redirectedFrom, documentId, url, resourceType, method, postData, headers2) {
      super(frame2 || context, "request");
      this._response = null;
      this._redirectedFrom = void 0;
      this._redirectedTo = null;
      this._documentId = void 0;
      this._isFavicon = void 0;
      this._failureText = null;
      this._url = void 0;
      this._resourceType = void 0;
      this._method = void 0;
      this._postData = void 0;
      this._headers = void 0;
      this._headersMap = /* @__PURE__ */ new Map();
      this._frame = null;
      this._serviceWorker = null;
      this._context = void 0;
      this._rawRequestHeadersPromise = new _manualPromise.ManualPromise();
      this._waitForResponsePromise = new _manualPromise.ManualPromise();
      this._responseEndTiming = -1;
      this._overrides = void 0;
      this._bodySize = void 0;
      (0, _utils.assert)(!url.startsWith("data:"), "Data urls should not fire requests");
      this._context = context;
      this._frame = frame2;
      this._serviceWorker = serviceWorker;
      this._redirectedFrom = redirectedFrom;
      if (redirectedFrom) redirectedFrom._redirectedTo = this;
      this._documentId = documentId;
      this._url = stripFragmentFromUrl(url);
      this._resourceType = resourceType;
      this._method = method;
      this._postData = postData;
      this._headers = headers2;
      this._updateHeadersMap();
      this._isFavicon = url.endsWith("/favicon.ico") || !!(redirectedFrom !== null && redirectedFrom !== void 0 && redirectedFrom._isFavicon);
    }
    _setFailureText(failureText) {
      this._failureText = failureText;
      this._waitForResponsePromise.resolve(null);
    }
    _setOverrides(overrides) {
      this._overrides = overrides;
      this._updateHeadersMap();
    }
    _updateHeadersMap() {
      for (const {
        name,
        value
      } of this.headers()) this._headersMap.set(name.toLowerCase(), value);
    }
    _hasOverrides() {
      return !!this._overrides;
    }
    url() {
      var _this$_overrides;
      return ((_this$_overrides = this._overrides) === null || _this$_overrides === void 0 ? void 0 : _this$_overrides.url) || this._url;
    }
    resourceType() {
      return this._resourceType;
    }
    method() {
      var _this$_overrides2;
      return ((_this$_overrides2 = this._overrides) === null || _this$_overrides2 === void 0 ? void 0 : _this$_overrides2.method) || this._method;
    }
    postDataBuffer() {
      var _this$_overrides3;
      return ((_this$_overrides3 = this._overrides) === null || _this$_overrides3 === void 0 ? void 0 : _this$_overrides3.postData) || this._postData;
    }
    headers() {
      var _this$_overrides4;
      return ((_this$_overrides4 = this._overrides) === null || _this$_overrides4 === void 0 ? void 0 : _this$_overrides4.headers) || this._headers;
    }
    headerValue(name) {
      return this._headersMap.get(name);
    }
    // "null" means no raw headers available - we'll use provisional headers as raw headers.
    setRawRequestHeaders(headers2) {
      if (!this._rawRequestHeadersPromise.isDone()) this._rawRequestHeadersPromise.resolve(headers2 || this._headers);
    }
    async rawRequestHeaders() {
      var _this$_overrides5;
      return ((_this$_overrides5 = this._overrides) === null || _this$_overrides5 === void 0 ? void 0 : _this$_overrides5.headers) || this._rawRequestHeadersPromise;
    }
    response() {
      return this._waitForResponsePromise;
    }
    _existingResponse() {
      return this._response;
    }
    _setResponse(response) {
      this._response = response;
      this._waitForResponsePromise.resolve(response);
    }
    _finalRequest() {
      return this._redirectedTo ? this._redirectedTo._finalRequest() : this;
    }
    frame() {
      return this._frame;
    }
    serviceWorker() {
      return this._serviceWorker;
    }
    isNavigationRequest() {
      return !!this._documentId;
    }
    redirectedFrom() {
      return this._redirectedFrom;
    }
    failure() {
      if (this._failureText === null) return null;
      return {
        errorText: this._failureText
      };
    }
    // TODO(bidi): remove once post body is available.
    _setBodySize(size) {
      this._bodySize = size;
    }
    bodySize() {
      var _this$postDataBuffer;
      return this._bodySize || ((_this$postDataBuffer = this.postDataBuffer()) === null || _this$postDataBuffer === void 0 ? void 0 : _this$postDataBuffer.length) || 0;
    }
    async requestHeadersSize() {
      let headersSize = 4;
      headersSize += this.method().length;
      headersSize += new URL(this.url()).pathname.length;
      headersSize += 8;
      const headers2 = await this.rawRequestHeaders();
      for (const header of headers2) headersSize += header.name.length + header.value.length + 4;
      return headersSize;
    }
  }
  network$1.Request = Request;
  class Route extends _instrumentation.SdkObject {
    constructor(request, delegate) {
      super(request._frame || request._context, "route");
      this._request = void 0;
      this._delegate = void 0;
      this._handled = false;
      this._request = request;
      this._delegate = delegate;
      this._request._context.addRouteInFlight(this);
    }
    request() {
      return this._request;
    }
    async abort(errorCode = "failed") {
      this._startHandling();
      this._request._context.emit(_browserContext.BrowserContext.Events.RequestAborted, this._request);
      await this._delegate.abort(errorCode);
      this._endHandling();
    }
    async redirectNavigationRequest(url) {
      this._startHandling();
      (0, _utils.assert)(this._request.isNavigationRequest());
      this._request.frame().redirectNavigation(url, this._request._documentId, this._request.headerValue("referer"));
    }
    async fulfill(overrides) {
      this._startHandling();
      let body = overrides.body;
      let isBase64 = overrides.isBase64 || false;
      if (body === void 0) {
        if (overrides.fetchResponseUid) {
          const buffer2 = this._request._context.fetchRequest.fetchResponses.get(overrides.fetchResponseUid) || _fetch.APIRequestContext.findResponseBody(overrides.fetchResponseUid);
          (0, _utils.assert)(buffer2, "Fetch response has been disposed");
          body = buffer2.toString("base64");
          isBase64 = true;
        } else {
          body = "";
          isBase64 = false;
        }
      }
      const headers2 = [...overrides.headers || []];
      this._maybeAddCorsHeaders(headers2);
      this._request._context.emit(_browserContext.BrowserContext.Events.RequestFulfilled, this._request);
      await this._delegate.fulfill({
        status: overrides.status || 200,
        headers: headers2,
        body,
        isBase64
      });
      this._endHandling();
    }
    // See https://github.com/microsoft/playwright/issues/12929
    _maybeAddCorsHeaders(headers2) {
      const origin = this._request.headerValue("origin");
      if (!origin) return;
      const requestUrl = new URL(this._request.url());
      if (!requestUrl.protocol.startsWith("http")) return;
      if (requestUrl.origin === origin.trim()) return;
      const corsHeader = headers2.find(({
        name
      }) => name === "access-control-allow-origin");
      if (corsHeader) return;
      headers2.push({
        name: "access-control-allow-origin",
        value: origin
      });
      headers2.push({
        name: "access-control-allow-credentials",
        value: "true"
      });
      headers2.push({
        name: "vary",
        value: "Origin"
      });
    }
    async continue(overrides) {
      this._startHandling();
      if (overrides.url) {
        const newUrl = new URL(overrides.url);
        const oldUrl = new URL(this._request.url());
        if (oldUrl.protocol !== newUrl.protocol) throw new Error("New URL must have same protocol as overridden URL");
      }
      this._request._setOverrides(overrides);
      if (!overrides.isFallback) this._request._context.emit(_browserContext.BrowserContext.Events.RequestContinued, this._request);
      await this._delegate.continue(overrides);
      this._endHandling();
    }
    _startHandling() {
      (0, _utils.assert)(!this._handled, "Route is already handled!");
      this._handled = true;
    }
    _endHandling() {
      this._request._context.removeRouteInFlight(this);
    }
  }
  network$1.Route = Route;
  class Response extends _instrumentation.SdkObject {
    constructor(request, status, statusText2, headers2, timing, getResponseBodyCallback, fromServiceWorker, httpVersion) {
      super(request.frame() || request._context, "response");
      this._request = void 0;
      this._contentPromise = null;
      this._finishedPromise = new _manualPromise.ManualPromise();
      this._status = void 0;
      this._statusText = void 0;
      this._url = void 0;
      this._headers = void 0;
      this._headersMap = /* @__PURE__ */ new Map();
      this._getResponseBodyCallback = void 0;
      this._timing = void 0;
      this._serverAddrPromise = new _manualPromise.ManualPromise();
      this._securityDetailsPromise = new _manualPromise.ManualPromise();
      this._rawResponseHeadersPromise = new _manualPromise.ManualPromise();
      this._httpVersion = void 0;
      this._fromServiceWorker = void 0;
      this._encodedBodySizePromise = new _manualPromise.ManualPromise();
      this._transferSizePromise = new _manualPromise.ManualPromise();
      this._responseHeadersSizePromise = new _manualPromise.ManualPromise();
      this._request = request;
      this._timing = timing;
      this._status = status;
      this._statusText = statusText2;
      this._url = request.url();
      this._headers = headers2;
      for (const {
        name,
        value
      } of this._headers) this._headersMap.set(name.toLowerCase(), value);
      this._getResponseBodyCallback = getResponseBodyCallback;
      this._request._setResponse(this);
      this._httpVersion = httpVersion;
      this._fromServiceWorker = fromServiceWorker;
    }
    _serverAddrFinished(addr) {
      this._serverAddrPromise.resolve(addr);
    }
    _securityDetailsFinished(securityDetails) {
      this._securityDetailsPromise.resolve(securityDetails);
    }
    _requestFinished(responseEndTiming) {
      this._request._responseEndTiming = Math.max(responseEndTiming, this._timing.responseStart);
      if (this._timing.requestStart === -1) this._timing.requestStart = this._request._responseEndTiming;
      this._finishedPromise.resolve();
    }
    _setHttpVersion(httpVersion) {
      this._httpVersion = httpVersion;
    }
    url() {
      return this._url;
    }
    status() {
      return this._status;
    }
    statusText() {
      return this._statusText;
    }
    headers() {
      return this._headers;
    }
    headerValue(name) {
      return this._headersMap.get(name);
    }
    async rawResponseHeaders() {
      return this._rawResponseHeadersPromise;
    }
    // "null" means no raw headers available - we'll use provisional headers as raw headers.
    setRawResponseHeaders(headers2) {
      if (!this._rawResponseHeadersPromise.isDone()) this._rawResponseHeadersPromise.resolve(headers2 || this._headers);
    }
    setTransferSize(size) {
      this._transferSizePromise.resolve(size);
    }
    setEncodedBodySize(size) {
      this._encodedBodySizePromise.resolve(size);
    }
    setResponseHeadersSize(size) {
      this._responseHeadersSizePromise.resolve(size);
    }
    timing() {
      return this._timing;
    }
    async serverAddr() {
      return await this._serverAddrPromise || null;
    }
    async securityDetails() {
      return await this._securityDetailsPromise || null;
    }
    body() {
      if (!this._contentPromise) {
        this._contentPromise = this._finishedPromise.then(async () => {
          if (this._status >= 300 && this._status <= 399) throw new Error("Response body is unavailable for redirect responses");
          return this._getResponseBodyCallback();
        });
      }
      return this._contentPromise;
    }
    request() {
      return this._request;
    }
    frame() {
      return this._request.frame();
    }
    httpVersion() {
      if (!this._httpVersion) return "HTTP/1.1";
      if (this._httpVersion === "http/1.1") return "HTTP/1.1";
      if (this._httpVersion === "h2") return "HTTP/2.0";
      return this._httpVersion;
    }
    fromServiceWorker() {
      return this._fromServiceWorker;
    }
    async responseHeadersSize() {
      const availableSize = await this._responseHeadersSizePromise;
      if (availableSize !== null) return availableSize;
      let headersSize = 4;
      headersSize += 8;
      headersSize += 3;
      headersSize += this.statusText().length;
      const headers2 = await this._rawResponseHeadersPromise;
      for (const header of headers2) headersSize += header.name.length + header.value.length + 4;
      headersSize += 2;
      return headersSize;
    }
    async sizes() {
      const requestHeadersSize = await this._request.requestHeadersSize();
      const responseHeadersSize = await this.responseHeadersSize();
      let encodedBodySize = await this._encodedBodySizePromise;
      if (encodedBodySize === null) {
        var _headers$find;
        const headers2 = await this._rawResponseHeadersPromise;
        const contentLength = (_headers$find = headers2.find((h2) => h2.name.toLowerCase() === "content-length")) === null || _headers$find === void 0 ? void 0 : _headers$find.value;
        encodedBodySize = contentLength ? +contentLength : 0;
      }
      let transferSize = await this._transferSizePromise;
      if (transferSize === null) {
        transferSize = responseHeadersSize + encodedBodySize;
      }
      return {
        requestBodySize: this._request.bodySize(),
        requestHeadersSize,
        responseBodySize: encodedBodySize,
        responseHeadersSize,
        transferSize
      };
    }
  }
  network$1.Response = Response;
  class WebSocket extends _instrumentation.SdkObject {
    constructor(parent, url) {
      super(parent, "ws");
      this._url = void 0;
      this._notified = false;
      this._url = url;
    }
    markAsNotified() {
      if (this._notified) return false;
      this._notified = true;
      return true;
    }
    url() {
      return this._url;
    }
    frameSent(opcode, data) {
      this.emit(WebSocket.Events.FrameSent, {
        opcode,
        data
      });
    }
    frameReceived(opcode, data) {
      this.emit(WebSocket.Events.FrameReceived, {
        opcode,
        data
      });
    }
    error(errorMessage) {
      this.emit(WebSocket.Events.SocketError, errorMessage);
    }
    closed() {
      this.emit(WebSocket.Events.Close);
    }
  }
  network$1.WebSocket = WebSocket;
  WebSocket.Events = {
    Close: "close",
    SocketError: "socketerror",
    FrameReceived: "framereceived",
    FrameSent: "framesent"
  };
  const STATUS_TEXTS = {
    "100": "Continue",
    "101": "Switching Protocols",
    "102": "Processing",
    "103": "Early Hints",
    "200": "OK",
    "201": "Created",
    "202": "Accepted",
    "203": "Non-Authoritative Information",
    "204": "No Content",
    "205": "Reset Content",
    "206": "Partial Content",
    "207": "Multi-Status",
    "208": "Already Reported",
    "226": "IM Used",
    "300": "Multiple Choices",
    "301": "Moved Permanently",
    "302": "Found",
    "303": "See Other",
    "304": "Not Modified",
    "305": "Use Proxy",
    "306": "Switch Proxy",
    "307": "Temporary Redirect",
    "308": "Permanent Redirect",
    "400": "Bad Request",
    "401": "Unauthorized",
    "402": "Payment Required",
    "403": "Forbidden",
    "404": "Not Found",
    "405": "Method Not Allowed",
    "406": "Not Acceptable",
    "407": "Proxy Authentication Required",
    "408": "Request Timeout",
    "409": "Conflict",
    "410": "Gone",
    "411": "Length Required",
    "412": "Precondition Failed",
    "413": "Payload Too Large",
    "414": "URI Too Long",
    "415": "Unsupported Media Type",
    "416": "Range Not Satisfiable",
    "417": "Expectation Failed",
    "418": "I'm a teapot",
    "421": "Misdirected Request",
    "422": "Unprocessable Entity",
    "423": "Locked",
    "424": "Failed Dependency",
    "425": "Too Early",
    "426": "Upgrade Required",
    "428": "Precondition Required",
    "429": "Too Many Requests",
    "431": "Request Header Fields Too Large",
    "451": "Unavailable For Legal Reasons",
    "500": "Internal Server Error",
    "501": "Not Implemented",
    "502": "Bad Gateway",
    "503": "Service Unavailable",
    "504": "Gateway Timeout",
    "505": "HTTP Version Not Supported",
    "506": "Variant Also Negotiates",
    "507": "Insufficient Storage",
    "508": "Loop Detected",
    "510": "Not Extended",
    "511": "Network Authentication Required"
  };
  function statusText(status) {
    return STATUS_TEXTS[String(status)] || "Unknown";
  }
  function singleHeader(name, value) {
    return [{
      name,
      value
    }];
  }
  function mergeHeaders(headers2) {
    const lowerCaseToValue = /* @__PURE__ */ new Map();
    const lowerCaseToOriginalCase = /* @__PURE__ */ new Map();
    for (const h2 of headers2) {
      if (!h2) continue;
      for (const {
        name,
        value
      } of h2) {
        const lower = name.toLowerCase();
        lowerCaseToOriginalCase.set(lower, name);
        lowerCaseToValue.set(lower, value);
      }
    }
    const result = [];
    for (const [lower, value] of lowerCaseToValue) result.push({
      name: lowerCaseToOriginalCase.get(lower),
      value
    });
    return result;
  }
  return network$1;
}
var page$1 = {};
var accessibility$1 = {};
var hasRequiredAccessibility$1;
function requireAccessibility$1() {
  if (hasRequiredAccessibility$1) return accessibility$1;
  hasRequiredAccessibility$1 = 1;
  Object.defineProperty(accessibility$1, "__esModule", {
    value: true
  });
  accessibility$1.Accessibility = void 0;
  class Accessibility {
    constructor(getAXTree) {
      this._getAXTree = void 0;
      this._getAXTree = getAXTree;
    }
    async snapshot(options = {}) {
      const {
        interestingOnly = true,
        root = null
      } = options;
      const {
        tree,
        needle
      } = await this._getAXTree(root || void 0);
      if (!interestingOnly) {
        if (root) return needle && serializeTree(needle)[0];
        return serializeTree(tree)[0];
      }
      const interestingNodes = /* @__PURE__ */ new Set();
      collectInterestingNodes(interestingNodes, tree, false);
      if (root && (!needle || !interestingNodes.has(needle))) return null;
      return serializeTree(needle || tree, interestingNodes)[0];
    }
  }
  accessibility$1.Accessibility = Accessibility;
  function collectInterestingNodes(collection, node, insideControl) {
    if (node.isInteresting(insideControl)) collection.add(node);
    if (node.isLeafNode()) return;
    insideControl = insideControl || node.isControl();
    for (const child of node.children()) collectInterestingNodes(collection, child, insideControl);
  }
  function serializeTree(node, whitelistedNodes) {
    const children = [];
    for (const child of node.children()) children.push(...serializeTree(child, whitelistedNodes));
    if (whitelistedNodes && !whitelistedNodes.has(node)) return children;
    const serializedNode = node.serialize();
    if (children.length) serializedNode.children = children;
    return [serializedNode];
  }
  return accessibility$1;
}
var console$2 = {};
var hasRequiredConsole$1;
function requireConsole$1() {
  if (hasRequiredConsole$1) return console$2;
  hasRequiredConsole$1 = 1;
  Object.defineProperty(console$2, "__esModule", {
    value: true
  });
  console$2.ConsoleMessage = void 0;
  class ConsoleMessage {
    constructor(page2, type, text, args, location2) {
      this._type = void 0;
      this._text = void 0;
      this._args = void 0;
      this._location = void 0;
      this._page = void 0;
      this._page = page2;
      this._type = type;
      this._text = text;
      this._args = args;
      this._location = location2 || {
        url: "",
        lineNumber: 0,
        columnNumber: 0
      };
    }
    page() {
      return this._page;
    }
    type() {
      return this._type;
    }
    text() {
      if (this._text === void 0) this._text = this._args.map((arg) => arg.preview()).join(" ");
      return this._text;
    }
    args() {
      return this._args;
    }
    location() {
      return this._location;
    }
  }
  console$2.ConsoleMessage = ConsoleMessage;
  return console$2;
}
var fileChooser$1 = {};
var hasRequiredFileChooser$1;
function requireFileChooser$1() {
  if (hasRequiredFileChooser$1) return fileChooser$1;
  hasRequiredFileChooser$1 = 1;
  Object.defineProperty(fileChooser$1, "__esModule", {
    value: true
  });
  fileChooser$1.FileChooser = void 0;
  class FileChooser {
    constructor(page2, elementHandle2, isMultiple) {
      this._page = void 0;
      this._elementHandle = void 0;
      this._isMultiple = void 0;
      this._page = page2;
      this._elementHandle = elementHandle2;
      this._isMultiple = isMultiple;
    }
    element() {
      return this._elementHandle;
    }
    isMultiple() {
      return this._isMultiple;
    }
    page() {
      return this._page;
    }
  }
  fileChooser$1.FileChooser = FileChooser;
  return fileChooser$1;
}
var input$1 = {};
var usKeyboardLayout = {};
var hasRequiredUsKeyboardLayout;
function requireUsKeyboardLayout() {
  if (hasRequiredUsKeyboardLayout) return usKeyboardLayout;
  hasRequiredUsKeyboardLayout = 1;
  Object.defineProperty(usKeyboardLayout, "__esModule", {
    value: true
  });
  usKeyboardLayout.keypadLocation = usKeyboardLayout.USKeyboardLayout = void 0;
  usKeyboardLayout.keypadLocation = 3;
  usKeyboardLayout.USKeyboardLayout = {
    // Functions row
    "Escape": {
      "keyCode": 27,
      "key": "Escape"
    },
    "F1": {
      "keyCode": 112,
      "key": "F1"
    },
    "F2": {
      "keyCode": 113,
      "key": "F2"
    },
    "F3": {
      "keyCode": 114,
      "key": "F3"
    },
    "F4": {
      "keyCode": 115,
      "key": "F4"
    },
    "F5": {
      "keyCode": 116,
      "key": "F5"
    },
    "F6": {
      "keyCode": 117,
      "key": "F6"
    },
    "F7": {
      "keyCode": 118,
      "key": "F7"
    },
    "F8": {
      "keyCode": 119,
      "key": "F8"
    },
    "F9": {
      "keyCode": 120,
      "key": "F9"
    },
    "F10": {
      "keyCode": 121,
      "key": "F10"
    },
    "F11": {
      "keyCode": 122,
      "key": "F11"
    },
    "F12": {
      "keyCode": 123,
      "key": "F12"
    },
    // Numbers row
    "Backquote": {
      "keyCode": 192,
      "shiftKey": "~",
      "key": "`"
    },
    "Digit1": {
      "keyCode": 49,
      "shiftKey": "!",
      "key": "1"
    },
    "Digit2": {
      "keyCode": 50,
      "shiftKey": "@",
      "key": "2"
    },
    "Digit3": {
      "keyCode": 51,
      "shiftKey": "#",
      "key": "3"
    },
    "Digit4": {
      "keyCode": 52,
      "shiftKey": "$",
      "key": "4"
    },
    "Digit5": {
      "keyCode": 53,
      "shiftKey": "%",
      "key": "5"
    },
    "Digit6": {
      "keyCode": 54,
      "shiftKey": "^",
      "key": "6"
    },
    "Digit7": {
      "keyCode": 55,
      "shiftKey": "&",
      "key": "7"
    },
    "Digit8": {
      "keyCode": 56,
      "shiftKey": "*",
      "key": "8"
    },
    "Digit9": {
      "keyCode": 57,
      "shiftKey": "(",
      "key": "9"
    },
    "Digit0": {
      "keyCode": 48,
      "shiftKey": ")",
      "key": "0"
    },
    "Minus": {
      "keyCode": 189,
      "shiftKey": "_",
      "key": "-"
    },
    "Equal": {
      "keyCode": 187,
      "shiftKey": "+",
      "key": "="
    },
    "Backslash": {
      "keyCode": 220,
      "shiftKey": "|",
      "key": "\\"
    },
    "Backspace": {
      "keyCode": 8,
      "key": "Backspace"
    },
    // First row
    "Tab": {
      "keyCode": 9,
      "key": "Tab"
    },
    "KeyQ": {
      "keyCode": 81,
      "shiftKey": "Q",
      "key": "q"
    },
    "KeyW": {
      "keyCode": 87,
      "shiftKey": "W",
      "key": "w"
    },
    "KeyE": {
      "keyCode": 69,
      "shiftKey": "E",
      "key": "e"
    },
    "KeyR": {
      "keyCode": 82,
      "shiftKey": "R",
      "key": "r"
    },
    "KeyT": {
      "keyCode": 84,
      "shiftKey": "T",
      "key": "t"
    },
    "KeyY": {
      "keyCode": 89,
      "shiftKey": "Y",
      "key": "y"
    },
    "KeyU": {
      "keyCode": 85,
      "shiftKey": "U",
      "key": "u"
    },
    "KeyI": {
      "keyCode": 73,
      "shiftKey": "I",
      "key": "i"
    },
    "KeyO": {
      "keyCode": 79,
      "shiftKey": "O",
      "key": "o"
    },
    "KeyP": {
      "keyCode": 80,
      "shiftKey": "P",
      "key": "p"
    },
    "BracketLeft": {
      "keyCode": 219,
      "shiftKey": "{",
      "key": "["
    },
    "BracketRight": {
      "keyCode": 221,
      "shiftKey": "}",
      "key": "]"
    },
    // Second row
    "CapsLock": {
      "keyCode": 20,
      "key": "CapsLock"
    },
    "KeyA": {
      "keyCode": 65,
      "shiftKey": "A",
      "key": "a"
    },
    "KeyS": {
      "keyCode": 83,
      "shiftKey": "S",
      "key": "s"
    },
    "KeyD": {
      "keyCode": 68,
      "shiftKey": "D",
      "key": "d"
    },
    "KeyF": {
      "keyCode": 70,
      "shiftKey": "F",
      "key": "f"
    },
    "KeyG": {
      "keyCode": 71,
      "shiftKey": "G",
      "key": "g"
    },
    "KeyH": {
      "keyCode": 72,
      "shiftKey": "H",
      "key": "h"
    },
    "KeyJ": {
      "keyCode": 74,
      "shiftKey": "J",
      "key": "j"
    },
    "KeyK": {
      "keyCode": 75,
      "shiftKey": "K",
      "key": "k"
    },
    "KeyL": {
      "keyCode": 76,
      "shiftKey": "L",
      "key": "l"
    },
    "Semicolon": {
      "keyCode": 186,
      "shiftKey": ":",
      "key": ";"
    },
    "Quote": {
      "keyCode": 222,
      "shiftKey": '"',
      "key": "'"
    },
    "Enter": {
      "keyCode": 13,
      "key": "Enter",
      "text": "\r"
    },
    // Third row
    "ShiftLeft": {
      "keyCode": 160,
      "keyCodeWithoutLocation": 16,
      "key": "Shift",
      "location": 1
    },
    "KeyZ": {
      "keyCode": 90,
      "shiftKey": "Z",
      "key": "z"
    },
    "KeyX": {
      "keyCode": 88,
      "shiftKey": "X",
      "key": "x"
    },
    "KeyC": {
      "keyCode": 67,
      "shiftKey": "C",
      "key": "c"
    },
    "KeyV": {
      "keyCode": 86,
      "shiftKey": "V",
      "key": "v"
    },
    "KeyB": {
      "keyCode": 66,
      "shiftKey": "B",
      "key": "b"
    },
    "KeyN": {
      "keyCode": 78,
      "shiftKey": "N",
      "key": "n"
    },
    "KeyM": {
      "keyCode": 77,
      "shiftKey": "M",
      "key": "m"
    },
    "Comma": {
      "keyCode": 188,
      "shiftKey": "<",
      "key": ","
    },
    "Period": {
      "keyCode": 190,
      "shiftKey": ">",
      "key": "."
    },
    "Slash": {
      "keyCode": 191,
      "shiftKey": "?",
      "key": "/"
    },
    "ShiftRight": {
      "keyCode": 161,
      "keyCodeWithoutLocation": 16,
      "key": "Shift",
      "location": 2
    },
    // Last row
    "ControlLeft": {
      "keyCode": 162,
      "keyCodeWithoutLocation": 17,
      "key": "Control",
      "location": 1
    },
    "MetaLeft": {
      "keyCode": 91,
      "key": "Meta",
      "location": 1
    },
    "AltLeft": {
      "keyCode": 164,
      "keyCodeWithoutLocation": 18,
      "key": "Alt",
      "location": 1
    },
    "Space": {
      "keyCode": 32,
      "key": " "
    },
    "AltRight": {
      "keyCode": 165,
      "keyCodeWithoutLocation": 18,
      "key": "Alt",
      "location": 2
    },
    "AltGraph": {
      "keyCode": 225,
      "key": "AltGraph"
    },
    "MetaRight": {
      "keyCode": 92,
      "key": "Meta",
      "location": 2
    },
    "ContextMenu": {
      "keyCode": 93,
      "key": "ContextMenu"
    },
    "ControlRight": {
      "keyCode": 163,
      "keyCodeWithoutLocation": 17,
      "key": "Control",
      "location": 2
    },
    // Center block
    "PrintScreen": {
      "keyCode": 44,
      "key": "PrintScreen"
    },
    "ScrollLock": {
      "keyCode": 145,
      "key": "ScrollLock"
    },
    "Pause": {
      "keyCode": 19,
      "key": "Pause"
    },
    "PageUp": {
      "keyCode": 33,
      "key": "PageUp"
    },
    "PageDown": {
      "keyCode": 34,
      "key": "PageDown"
    },
    "Insert": {
      "keyCode": 45,
      "key": "Insert"
    },
    "Delete": {
      "keyCode": 46,
      "key": "Delete"
    },
    "Home": {
      "keyCode": 36,
      "key": "Home"
    },
    "End": {
      "keyCode": 35,
      "key": "End"
    },
    "ArrowLeft": {
      "keyCode": 37,
      "key": "ArrowLeft"
    },
    "ArrowUp": {
      "keyCode": 38,
      "key": "ArrowUp"
    },
    "ArrowRight": {
      "keyCode": 39,
      "key": "ArrowRight"
    },
    "ArrowDown": {
      "keyCode": 40,
      "key": "ArrowDown"
    },
    // Numpad
    "NumLock": {
      "keyCode": 144,
      "key": "NumLock"
    },
    "NumpadDivide": {
      "keyCode": 111,
      "key": "/",
      "location": 3
    },
    "NumpadMultiply": {
      "keyCode": 106,
      "key": "*",
      "location": 3
    },
    "NumpadSubtract": {
      "keyCode": 109,
      "key": "-",
      "location": 3
    },
    "Numpad7": {
      "keyCode": 36,
      "shiftKeyCode": 103,
      "key": "Home",
      "shiftKey": "7",
      "location": 3
    },
    "Numpad8": {
      "keyCode": 38,
      "shiftKeyCode": 104,
      "key": "ArrowUp",
      "shiftKey": "8",
      "location": 3
    },
    "Numpad9": {
      "keyCode": 33,
      "shiftKeyCode": 105,
      "key": "PageUp",
      "shiftKey": "9",
      "location": 3
    },
    "Numpad4": {
      "keyCode": 37,
      "shiftKeyCode": 100,
      "key": "ArrowLeft",
      "shiftKey": "4",
      "location": 3
    },
    "Numpad5": {
      "keyCode": 12,
      "shiftKeyCode": 101,
      "key": "Clear",
      "shiftKey": "5",
      "location": 3
    },
    "Numpad6": {
      "keyCode": 39,
      "shiftKeyCode": 102,
      "key": "ArrowRight",
      "shiftKey": "6",
      "location": 3
    },
    "NumpadAdd": {
      "keyCode": 107,
      "key": "+",
      "location": 3
    },
    "Numpad1": {
      "keyCode": 35,
      "shiftKeyCode": 97,
      "key": "End",
      "shiftKey": "1",
      "location": 3
    },
    "Numpad2": {
      "keyCode": 40,
      "shiftKeyCode": 98,
      "key": "ArrowDown",
      "shiftKey": "2",
      "location": 3
    },
    "Numpad3": {
      "keyCode": 34,
      "shiftKeyCode": 99,
      "key": "PageDown",
      "shiftKey": "3",
      "location": 3
    },
    "Numpad0": {
      "keyCode": 45,
      "shiftKeyCode": 96,
      "key": "Insert",
      "shiftKey": "0",
      "location": 3
    },
    "NumpadDecimal": {
      "keyCode": 46,
      "shiftKeyCode": 110,
      "key": "\0",
      "shiftKey": ".",
      "location": 3
    },
    "NumpadEnter": {
      "keyCode": 13,
      "key": "Enter",
      "text": "\r",
      "location": 3
    }
  };
  return usKeyboardLayout;
}
var hasRequiredInput$1;
function requireInput$1() {
  if (hasRequiredInput$1) return input$1;
  hasRequiredInput$1 = 1;
  Object.defineProperty(input$1, "__esModule", {
    value: true
  });
  input$1.keypadLocation = input$1.Touchscreen = input$1.Mouse = input$1.Keyboard = void 0;
  input$1.resolveSmartModifier = resolveSmartModifier;
  input$1.resolveSmartModifierString = resolveSmartModifierString;
  var _utils = requireUtils();
  var keyboardLayout = _interopRequireWildcard(requireUsKeyboardLayout());
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  input$1.keypadLocation = keyboardLayout.keypadLocation;
  const kModifiers = ["Alt", "Control", "Meta", "Shift"];
  class Keyboard {
    constructor(raw) {
      this._pressedModifiers = /* @__PURE__ */ new Set();
      this._pressedKeys = /* @__PURE__ */ new Set();
      this._raw = void 0;
      this._raw = raw;
    }
    async down(key) {
      const description = this._keyDescriptionForString(key);
      const autoRepeat = this._pressedKeys.has(description.code);
      this._pressedKeys.add(description.code);
      if (kModifiers.includes(description.key)) this._pressedModifiers.add(description.key);
      await this._raw.keydown(this._pressedModifiers, key, description, autoRepeat);
    }
    _keyDescriptionForString(str) {
      const keyString = resolveSmartModifierString(str);
      let description = usKeyboardLayout2.get(keyString);
      (0, _utils.assert)(description, `Unknown key: "${keyString}"`);
      const shift = this._pressedModifiers.has("Shift");
      description = shift && description.shifted ? description.shifted : description;
      if (this._pressedModifiers.size > 1 || !this._pressedModifiers.has("Shift") && this._pressedModifiers.size === 1) return {
        ...description,
        text: ""
      };
      return description;
    }
    async up(key) {
      const description = this._keyDescriptionForString(key);
      if (kModifiers.includes(description.key)) this._pressedModifiers.delete(description.key);
      this._pressedKeys.delete(description.code);
      await this._raw.keyup(this._pressedModifiers, key, description);
    }
    async insertText(text) {
      await this._raw.sendText(text);
    }
    async type(text, options) {
      const delay = options && options.delay || void 0;
      for (const char of text) {
        if (usKeyboardLayout2.has(char)) {
          await this.press(char, {
            delay
          });
        } else {
          if (delay) await new Promise((f2) => setTimeout(f2, delay));
          await this.insertText(char);
        }
      }
    }
    async press(key, options = {}) {
      function split(keyString) {
        const keys = [];
        let building = "";
        for (const char of keyString) {
          if (char === "+" && building) {
            keys.push(building);
            building = "";
          } else {
            building += char;
          }
        }
        keys.push(building);
        return keys;
      }
      const tokens = split(key);
      key = tokens[tokens.length - 1];
      for (let i = 0; i < tokens.length - 1; ++i) await this.down(tokens[i]);
      await this.down(key);
      if (options.delay) await new Promise((f2) => setTimeout(f2, options.delay));
      await this.up(key);
      for (let i = tokens.length - 2; i >= 0; --i) await this.up(tokens[i]);
    }
    async ensureModifiers(mm) {
      const modifiers = mm.map(resolveSmartModifier);
      for (const modifier of modifiers) {
        if (!kModifiers.includes(modifier)) throw new Error("Unknown modifier " + modifier);
      }
      const restore = Array.from(this._pressedModifiers);
      for (const key of kModifiers) {
        const needDown = modifiers.includes(key);
        const isDown = this._pressedModifiers.has(key);
        if (needDown && !isDown) await this.down(key);
        else if (!needDown && isDown) await this.up(key);
      }
      return restore;
    }
    _modifiers() {
      return this._pressedModifiers;
    }
  }
  input$1.Keyboard = Keyboard;
  function resolveSmartModifierString(key) {
    if (key === "ControlOrMeta") return process.platform === "darwin" ? "Meta" : "Control";
    return key;
  }
  function resolveSmartModifier(m2) {
    return resolveSmartModifierString(m2);
  }
  class Mouse {
    constructor(raw, page2) {
      this._keyboard = void 0;
      this._x = 0;
      this._y = 0;
      this._lastButton = "none";
      this._buttons = /* @__PURE__ */ new Set();
      this._raw = void 0;
      this._page = void 0;
      this._raw = raw;
      this._page = page2;
      this._keyboard = this._page.keyboard;
    }
    async move(x2, y2, options = {}, metadata) {
      if (metadata) metadata.point = {
        x: x2,
        y: y2
      };
      const {
        steps = 1
      } = options;
      const fromX = this._x;
      const fromY = this._y;
      this._x = x2;
      this._y = y2;
      for (let i = 1; i <= steps; i++) {
        const middleX = fromX + (x2 - fromX) * (i / steps);
        const middleY = fromY + (y2 - fromY) * (i / steps);
        await this._raw.move(middleX, middleY, this._lastButton, this._buttons, this._keyboard._modifiers(), !!options.forClick);
      }
    }
    async down(options = {}, metadata) {
      if (metadata) metadata.point = {
        x: this._x,
        y: this._y
      };
      const {
        button = "left",
        clickCount = 1
      } = options;
      this._lastButton = button;
      this._buttons.add(button);
      await this._raw.down(this._x, this._y, this._lastButton, this._buttons, this._keyboard._modifiers(), clickCount);
    }
    async up(options = {}, metadata) {
      if (metadata) metadata.point = {
        x: this._x,
        y: this._y
      };
      const {
        button = "left",
        clickCount = 1
      } = options;
      this._lastButton = "none";
      this._buttons.delete(button);
      await this._raw.up(this._x, this._y, button, this._buttons, this._keyboard._modifiers(), clickCount);
    }
    async click(x2, y2, options = {}, metadata) {
      if (metadata) metadata.point = {
        x: x2,
        y: y2
      };
      const {
        delay = null,
        clickCount = 1
      } = options;
      if (delay) {
        this.move(x2, y2, {
          forClick: true
        });
        for (let cc = 1; cc <= clickCount; ++cc) {
          await this.down({
            ...options,
            clickCount: cc
          });
          await new Promise((f2) => setTimeout(f2, delay));
          await this.up({
            ...options,
            clickCount: cc
          });
          if (cc < clickCount) await new Promise((f2) => setTimeout(f2, delay));
        }
      } else {
        const promises = [];
        promises.push(this.move(x2, y2, {
          forClick: true
        }));
        for (let cc = 1; cc <= clickCount; ++cc) {
          promises.push(this.down({
            ...options,
            clickCount: cc
          }));
          promises.push(this.up({
            ...options,
            clickCount: cc
          }));
        }
        await Promise.all(promises);
      }
    }
    async dblclick(x2, y2, options = {}) {
      await this.click(x2, y2, {
        ...options,
        clickCount: 2
      });
    }
    async wheel(deltaX, deltaY) {
      await this._raw.wheel(this._x, this._y, this._buttons, this._keyboard._modifiers(), deltaX, deltaY);
    }
  }
  input$1.Mouse = Mouse;
  const aliases = /* @__PURE__ */ new Map([["ShiftLeft", ["Shift"]], ["ControlLeft", ["Control"]], ["AltLeft", ["Alt"]], ["MetaLeft", ["Meta"]], ["Enter", ["\n", "\r"]]]);
  const usKeyboardLayout2 = buildLayoutClosure(keyboardLayout.USKeyboardLayout);
  function buildLayoutClosure(layout) {
    const result = /* @__PURE__ */ new Map();
    for (const code in layout) {
      const definition = layout[code];
      const description = {
        key: definition.key || "",
        keyCode: definition.keyCode || 0,
        keyCodeWithoutLocation: definition.keyCodeWithoutLocation || definition.keyCode || 0,
        code,
        text: definition.text || "",
        location: definition.location || 0
      };
      if (definition.key.length === 1) description.text = description.key;
      let shiftedDescription;
      if (definition.shiftKey) {
        (0, _utils.assert)(definition.shiftKey.length === 1);
        shiftedDescription = {
          ...description
        };
        shiftedDescription.key = definition.shiftKey;
        shiftedDescription.text = definition.shiftKey;
        if (definition.shiftKeyCode) shiftedDescription.keyCode = definition.shiftKeyCode;
      }
      result.set(code, {
        ...description,
        shifted: shiftedDescription
      });
      if (aliases.has(code)) {
        for (const alias of aliases.get(code)) result.set(alias, description);
      }
      if (definition.location) continue;
      if (description.key.length === 1) result.set(description.key, description);
      if (shiftedDescription) result.set(shiftedDescription.key, {
        ...shiftedDescription,
        shifted: void 0
      });
    }
    return result;
  }
  class Touchscreen {
    constructor(raw, page2) {
      this._raw = void 0;
      this._page = void 0;
      this._raw = raw;
      this._page = page2;
    }
    async tap(x2, y2, metadata) {
      if (metadata) metadata.point = {
        x: x2,
        y: y2
      };
      if (!this._page._browserContext._options.hasTouch) throw new Error("hasTouch must be enabled on the browser context before using the touchscreen.");
      await this._raw.tap(x2, y2, this._page.keyboard._modifiers());
    }
  }
  input$1.Touchscreen = Touchscreen;
  return input$1;
}
var screenshotter = {};
var hasRequiredScreenshotter;
function requireScreenshotter() {
  if (hasRequiredScreenshotter) return screenshotter;
  hasRequiredScreenshotter = 1;
  Object.defineProperty(screenshotter, "__esModule", {
    value: true
  });
  screenshotter.Screenshotter = void 0;
  screenshotter.validateScreenshotOptions = validateScreenshotOptions;
  var _helper = requireHelper();
  var _utils = requireUtils();
  var _multimap = requireMultimap();
  function inPagePrepareForScreenshots(screenshotStyle, hideCaret, disableAnimations, syncAnimations) {
    if (syncAnimations) {
      const style = document.createElement("style");
      style.textContent = "body {}";
      document.head.appendChild(style);
      document.documentElement.getBoundingClientRect();
      style.remove();
    }
    if (!screenshotStyle && !hideCaret && !disableAnimations) return;
    const collectRoots = (root, roots2 = []) => {
      roots2.push(root);
      const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);
      do {
        const node = walker.currentNode;
        const shadowRoot = node instanceof Element ? node.shadowRoot : null;
        if (shadowRoot) collectRoots(shadowRoot, roots2);
      } while (walker.nextNode());
      return roots2;
    };
    const roots = collectRoots(document);
    const cleanupCallbacks = [];
    if (screenshotStyle) {
      for (const root of roots) {
        const styleTag = document.createElement("style");
        styleTag.textContent = screenshotStyle;
        if (root === document) document.documentElement.append(styleTag);
        else root.append(styleTag);
        cleanupCallbacks.push(() => {
          styleTag.remove();
        });
      }
    }
    if (hideCaret) {
      const elements = /* @__PURE__ */ new Map();
      for (const root of roots) {
        root.querySelectorAll("input,textarea,[contenteditable]").forEach((element) => {
          elements.set(element, {
            value: element.style.getPropertyValue("caret-color"),
            priority: element.style.getPropertyPriority("caret-color")
          });
          element.style.setProperty("caret-color", "transparent", "important");
        });
      }
      cleanupCallbacks.push(() => {
        for (const [element, value] of elements) element.style.setProperty("caret-color", value.value, value.priority);
      });
    }
    if (disableAnimations) {
      const infiniteAnimationsToResume = /* @__PURE__ */ new Set();
      const handleAnimations = (root) => {
        for (const animation of root.getAnimations()) {
          if (!animation.effect || animation.playbackRate === 0 || infiniteAnimationsToResume.has(animation)) continue;
          const endTime = animation.effect.getComputedTiming().endTime;
          if (Number.isFinite(endTime)) {
            try {
              animation.finish();
            } catch (e2) {
            }
          } else {
            try {
              animation.cancel();
              infiniteAnimationsToResume.add(animation);
            } catch (e2) {
            }
          }
        }
      };
      for (const root of roots) {
        const handleRootAnimations = handleAnimations.bind(null, root);
        handleRootAnimations();
        root.addEventListener("transitionrun", handleRootAnimations);
        root.addEventListener("animationstart", handleRootAnimations);
        cleanupCallbacks.push(() => {
          root.removeEventListener("transitionrun", handleRootAnimations);
          root.removeEventListener("animationstart", handleRootAnimations);
        });
      }
      cleanupCallbacks.push(() => {
        for (const animation of infiniteAnimationsToResume) {
          try {
            animation.play();
          } catch (e2) {
          }
        }
      });
    }
    window.__pwCleanupScreenshot = () => {
      for (const cleanupCallback of cleanupCallbacks) cleanupCallback();
      delete window.__pwCleanupScreenshot;
    };
  }
  class Screenshotter {
    constructor(page2) {
      this._queue = new TaskQueue();
      this._page = void 0;
      this._page = page2;
      this._queue = new TaskQueue();
    }
    async _originalViewportSize(progress2) {
      const originalViewportSize = this._page.viewportSize();
      let viewportSize = originalViewportSize;
      if (!viewportSize) viewportSize = await this._page.mainFrame().waitForFunctionValueInUtility(progress2, () => ({
        width: window.innerWidth,
        height: window.innerHeight
      }));
      return {
        viewportSize,
        originalViewportSize
      };
    }
    async _fullPageSize(progress2) {
      const fullPageSize = await this._page.mainFrame().waitForFunctionValueInUtility(progress2, () => {
        if (!document.body || !document.documentElement) return null;
        return {
          width: Math.max(document.body.scrollWidth, document.documentElement.scrollWidth, document.body.offsetWidth, document.documentElement.offsetWidth, document.body.clientWidth, document.documentElement.clientWidth),
          height: Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight)
        };
      });
      return fullPageSize;
    }
    async screenshotPage(progress2, options) {
      const format2 = validateScreenshotOptions(options);
      return this._queue.postTask(async () => {
        progress2.log("taking page screenshot");
        const {
          viewportSize
        } = await this._originalViewportSize(progress2);
        await this._preparePageForScreenshot(progress2, this._page.mainFrame(), options.style, options.caret !== "initial", options.animations === "disabled");
        progress2.throwIfAborted();
        if (options.fullPage) {
          const fullPageSize = await this._fullPageSize(progress2);
          let documentRect = {
            x: 0,
            y: 0,
            width: fullPageSize.width,
            height: fullPageSize.height
          };
          const fitsViewport = fullPageSize.width <= viewportSize.width && fullPageSize.height <= viewportSize.height;
          if (options.clip) documentRect = trimClipToSize(options.clip, documentRect);
          const buffer3 = await this._screenshot(progress2, format2, documentRect, void 0, fitsViewport, options);
          progress2.throwIfAborted();
          await this._restorePageAfterScreenshot();
          return buffer3;
        }
        const viewportRect = options.clip ? trimClipToSize(options.clip, viewportSize) : {
          x: 0,
          y: 0,
          ...viewportSize
        };
        const buffer2 = await this._screenshot(progress2, format2, void 0, viewportRect, true, options);
        progress2.throwIfAborted();
        await this._restorePageAfterScreenshot();
        return buffer2;
      });
    }
    async screenshotElement(progress2, handle, options) {
      const format2 = validateScreenshotOptions(options);
      return this._queue.postTask(async () => {
        progress2.log("taking element screenshot");
        const {
          viewportSize
        } = await this._originalViewportSize(progress2);
        await this._preparePageForScreenshot(progress2, handle._frame, options.style, options.caret !== "initial", options.animations === "disabled");
        progress2.throwIfAborted();
        await handle._waitAndScrollIntoViewIfNeeded(
          progress2,
          true
          /* waitForVisible */
        );
        progress2.throwIfAborted();
        const boundingBox = await handle.boundingBox();
        (0, _utils.assert)(boundingBox, "Node is either not visible or not an HTMLElement");
        (0, _utils.assert)(boundingBox.width !== 0, "Node has 0 width.");
        (0, _utils.assert)(boundingBox.height !== 0, "Node has 0 height.");
        const fitsViewport = boundingBox.width <= viewportSize.width && boundingBox.height <= viewportSize.height;
        progress2.throwIfAborted();
        const scrollOffset = await this._page.mainFrame().waitForFunctionValueInUtility(progress2, () => ({
          x: window.scrollX,
          y: window.scrollY
        }));
        const documentRect = {
          ...boundingBox
        };
        documentRect.x += scrollOffset.x;
        documentRect.y += scrollOffset.y;
        const buffer2 = await this._screenshot(progress2, format2, _helper.helper.enclosingIntRect(documentRect), void 0, fitsViewport, options);
        progress2.throwIfAborted();
        await this._restorePageAfterScreenshot();
        return buffer2;
      });
    }
    async _preparePageForScreenshot(progress2, frame2, screenshotStyle, hideCaret, disableAnimations) {
      if (disableAnimations) progress2.log("  disabled all CSS animations");
      const syncAnimations = this._page._delegate.shouldToggleStyleSheetToSyncAnimations();
      await this._page.safeNonStallingEvaluateInAllFrames("(" + inPagePrepareForScreenshots.toString() + `)(${JSON.stringify(screenshotStyle)}, ${hideCaret}, ${disableAnimations}, ${syncAnimations})`, "utility");
      if (!process.env.PW_TEST_SCREENSHOT_NO_FONTS_READY) {
        progress2.log("waiting for fonts to load...");
        await frame2.nonStallingEvaluateInExistingContext("document.fonts.ready", "utility").catch(() => {
        });
        progress2.log("fonts loaded");
      }
      progress2.cleanupWhenAborted(() => this._restorePageAfterScreenshot());
    }
    async _restorePageAfterScreenshot() {
      await this._page.safeNonStallingEvaluateInAllFrames("window.__pwCleanupScreenshot && window.__pwCleanupScreenshot()", "utility");
    }
    async _maskElements(progress2, options) {
      const framesToParsedSelectors = new _multimap.MultiMap();
      const cleanup = async () => {
        await Promise.all([...framesToParsedSelectors.keys()].map(async (frame2) => {
          await frame2.hideHighlight();
        }));
      };
      if (!options.mask || !options.mask.length) return cleanup;
      await Promise.all((options.mask || []).map(async ({
        frame: frame2,
        selector
      }) => {
        const pair = await frame2.selectors.resolveFrameForSelector(selector);
        if (pair) framesToParsedSelectors.set(pair.frame, pair.info.parsed);
      }));
      progress2.throwIfAborted();
      await Promise.all([...framesToParsedSelectors.keys()].map(async (frame2) => {
        await frame2.maskSelectors(framesToParsedSelectors.get(frame2), options.maskColor || "#F0F");
      }));
      progress2.cleanupWhenAborted(cleanup);
      return cleanup;
    }
    async _screenshot(progress2, format2, documentRect, viewportRect, fitsViewport, options) {
      var _options$quality;
      if (options.__testHookBeforeScreenshot) await options.__testHookBeforeScreenshot();
      progress2.throwIfAborted();
      const shouldSetDefaultBackground = options.omitBackground && format2 === "png";
      if (shouldSetDefaultBackground) {
        await this._page._delegate.setBackgroundColor({
          r: 0,
          g: 0,
          b: 0,
          a: 0
        });
        progress2.cleanupWhenAborted(() => this._page._delegate.setBackgroundColor());
      }
      progress2.throwIfAborted();
      const cleanupHighlight = await this._maskElements(progress2, options);
      progress2.throwIfAborted();
      const quality = format2 === "jpeg" ? (_options$quality = options.quality) !== null && _options$quality !== void 0 ? _options$quality : 80 : void 0;
      const buffer2 = await this._page._delegate.takeScreenshot(progress2, format2, documentRect, viewportRect, quality, fitsViewport, options.scale || "device");
      progress2.throwIfAborted();
      await cleanupHighlight();
      progress2.throwIfAborted();
      if (shouldSetDefaultBackground) await this._page._delegate.setBackgroundColor();
      progress2.throwIfAborted();
      if (options.__testHookAfterScreenshot) await options.__testHookAfterScreenshot();
      return buffer2;
    }
  }
  screenshotter.Screenshotter = Screenshotter;
  class TaskQueue {
    constructor() {
      this._chain = void 0;
      this._chain = Promise.resolve();
    }
    postTask(task2) {
      const result = this._chain.then(task2);
      this._chain = result.catch(() => {
      });
      return result;
    }
  }
  function trimClipToSize(clip, size) {
    const p1 = {
      x: Math.max(0, Math.min(clip.x, size.width)),
      y: Math.max(0, Math.min(clip.y, size.height))
    };
    const p2 = {
      x: Math.max(0, Math.min(clip.x + clip.width, size.width)),
      y: Math.max(0, Math.min(clip.y + clip.height, size.height))
    };
    const result = {
      x: p1.x,
      y: p1.y,
      width: p2.x - p1.x,
      height: p2.y - p1.y
    };
    (0, _utils.assert)(result.width && result.height, "Clipped area is either empty or outside the resulting image");
    return result;
  }
  function validateScreenshotOptions(options) {
    let format2 = null;
    if (options.type) {
      (0, _utils.assert)(options.type === "png" || options.type === "jpeg", "Unknown options.type value: " + options.type);
      format2 = options.type;
    }
    if (!format2) format2 = "png";
    if (options.quality !== void 0) {
      (0, _utils.assert)(format2 === "jpeg", "options.quality is unsupported for the " + format2 + " screenshots");
      (0, _utils.assert)(typeof options.quality === "number", "Expected options.quality to be a number but found " + typeof options.quality);
      (0, _utils.assert)(Number.isInteger(options.quality), "Expected options.quality to be an integer");
      (0, _utils.assert)(options.quality >= 0 && options.quality <= 100, "Expected options.quality to be between 0 and 100 (inclusive), got " + options.quality);
    }
    if (options.clip) {
      (0, _utils.assert)(typeof options.clip.x === "number", "Expected options.clip.x to be a number but found " + typeof options.clip.x);
      (0, _utils.assert)(typeof options.clip.y === "number", "Expected options.clip.y to be a number but found " + typeof options.clip.y);
      (0, _utils.assert)(typeof options.clip.width === "number", "Expected options.clip.width to be a number but found " + typeof options.clip.width);
      (0, _utils.assert)(typeof options.clip.height === "number", "Expected options.clip.height to be a number but found " + typeof options.clip.height);
      (0, _utils.assert)(options.clip.width !== 0, "Expected options.clip.width not to be 0.");
      (0, _utils.assert)(options.clip.height !== 0, "Expected options.clip.height not to be 0.");
    }
    return format2;
  }
  return screenshotter;
}
var hasRequiredPage$1;
function requirePage$1() {
  if (hasRequiredPage$1) return page$1;
  hasRequiredPage$1 = 1;
  Object.defineProperty(page$1, "__esModule", {
    value: true
  });
  page$1.Worker = page$1.PageBinding = page$1.Page = page$1.InitScript = void 0;
  var accessibility2 = _interopRequireWildcard(requireAccessibility$1());
  var _browserContext = requireBrowserContext$1();
  var _console = requireConsole$1();
  var _errors = requireErrors$1();
  var _fileChooser = requireFileChooser$1();
  var frames2 = _interopRequireWildcard(requireFrames());
  var _helper = requireHelper();
  var input2 = _interopRequireWildcard(requireInput$1());
  var _instrumentation = requireInstrumentation();
  var _utilityScriptSerializers = requireUtilityScriptSerializers();
  var js = _interopRequireWildcard(requireJavascript$1());
  var _progress = requireProgress();
  var _screenshotter = requireScreenshotter();
  var _timeoutSettings = requireTimeoutSettings$1();
  var _utils = requireUtils();
  var _crypto = requireCrypto();
  var _comparators = requireComparators();
  var _debugLogger = requireDebugLogger();
  var _selectorParser = requireSelectorParser();
  var _manualPromise = requireManualPromise();
  var _callLog = requireCallLog();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  class Page extends _instrumentation.SdkObject {
    constructor(delegate, browserContext2) {
      super(browserContext2, "page");
      this._closedState = "open";
      this._closedPromise = new _manualPromise.ManualPromise();
      this._initialized = void 0;
      this._initializedPromise = new _manualPromise.ManualPromise();
      this._eventsToEmitAfterInitialized = [];
      this._crashed = false;
      this.openScope = new _utils.LongStandingScope();
      this._browserContext = void 0;
      this.keyboard = void 0;
      this.mouse = void 0;
      this.touchscreen = void 0;
      this._timeoutSettings = void 0;
      this._delegate = void 0;
      this._emulatedSize = void 0;
      this._extraHTTPHeaders = void 0;
      this._emulatedMedia = {};
      this._interceptFileChooser = false;
      this._pageBindings = /* @__PURE__ */ new Map();
      this.initScripts = [];
      this._screenshotter = void 0;
      this._frameManager = void 0;
      this.accessibility = void 0;
      this._workers = /* @__PURE__ */ new Map();
      this.pdf = void 0;
      this.coverage = void 0;
      this._clientRequestInterceptor = void 0;
      this._serverRequestInterceptor = void 0;
      this._ownedContext = void 0;
      this._video = null;
      this._opener = void 0;
      this._isServerSideOnly = false;
      this._locatorHandlers = /* @__PURE__ */ new Map();
      this._lastLocatorHandlerUid = 0;
      this._locatorHandlerRunningCounter = 0;
      this._frameThrottler = new FrameThrottler(10, 35, 200);
      this._closeReason = void 0;
      this.attribution.page = this;
      this._delegate = delegate;
      this._browserContext = browserContext2;
      this.accessibility = new accessibility2.Accessibility(delegate.getAccessibilityTree.bind(delegate));
      this.keyboard = new input2.Keyboard(delegate.rawKeyboard);
      this.mouse = new input2.Mouse(delegate.rawMouse, this);
      this.touchscreen = new input2.Touchscreen(delegate.rawTouchscreen, this);
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings(browserContext2._timeoutSettings);
      this._screenshotter = new _screenshotter.Screenshotter(this);
      this._frameManager = new frames2.FrameManager(this);
      if (delegate.pdf) this.pdf = delegate.pdf.bind(delegate);
      this.coverage = delegate.coverage ? delegate.coverage() : null;
    }
    async reportAsNew(opener, error = void 0, contextEvent = _browserContext.BrowserContext.Events.Page) {
      if (opener) {
        const openerPageOrError = await opener.waitForInitializedOrError();
        if (openerPageOrError instanceof Page && !openerPageOrError.isClosed()) this._opener = openerPageOrError;
      }
      this._markInitialized(error, contextEvent);
    }
    _markInitialized(error = void 0, contextEvent = _browserContext.BrowserContext.Events.Page) {
      if (error) {
        if (this._browserContext.isClosingOrClosed()) return;
        this._frameManager.createDummyMainFrameIfNeeded();
      }
      this._initialized = error || this;
      this.emitOnContext(contextEvent, this);
      for (const {
        event,
        args
      } of this._eventsToEmitAfterInitialized) this._browserContext.emit(event, ...args);
      this._eventsToEmitAfterInitialized = [];
      if (this.isClosed()) this.emit(Page.Events.Close);
      else this.instrumentation.onPageOpen(this);
      this._initializedPromise.resolve(this._initialized);
    }
    initializedOrUndefined() {
      return this._initialized ? this : void 0;
    }
    waitForInitializedOrError() {
      return this._initializedPromise;
    }
    emitOnContext(event, ...args) {
      if (this._isServerSideOnly) return;
      this._browserContext.emit(event, ...args);
    }
    emitOnContextOnceInitialized(event, ...args) {
      if (this._isServerSideOnly) return;
      if (this._initialized) this._browserContext.emit(event, ...args);
      else this._eventsToEmitAfterInitialized.push({
        event,
        args
      });
    }
    async resetForReuse(metadata) {
      this.setDefaultNavigationTimeout(void 0);
      this.setDefaultTimeout(void 0);
      this._locatorHandlers.clear();
      await this._removeExposedBindings();
      await this._removeInitScripts();
      await this.setClientRequestInterceptor(void 0);
      await this._setServerRequestInterceptor(void 0);
      await this.setFileChooserIntercepted(false);
      await this.mainFrame().goto(metadata, "about:blank");
      this._emulatedSize = void 0;
      this._emulatedMedia = {};
      this._extraHTTPHeaders = void 0;
      this._interceptFileChooser = false;
      await Promise.all([this._delegate.updateEmulatedViewportSize(), this._delegate.updateEmulateMedia(), this._delegate.updateFileChooserInterception()]);
      await this._delegate.resetForReuse();
    }
    _didClose() {
      this._frameManager.dispose();
      this._frameThrottler.dispose();
      (0, _utils.assert)(this._closedState !== "closed", "Page closed twice");
      this._closedState = "closed";
      this.emit(Page.Events.Close);
      this._closedPromise.resolve();
      this.instrumentation.onPageClose(this);
      this.openScope.close(new _errors.TargetClosedError());
    }
    _didCrash() {
      this._frameManager.dispose();
      this._frameThrottler.dispose();
      this.emit(Page.Events.Crash);
      this._crashed = true;
      this.instrumentation.onPageClose(this);
      this.openScope.close(new Error("Page crashed"));
    }
    async _onFileChooserOpened(handle) {
      let multiple;
      try {
        multiple = await handle.evaluate((element) => !!element.multiple);
      } catch (e2) {
        return;
      }
      if (!this.listenerCount(Page.Events.FileChooser)) {
        handle.dispose();
        return;
      }
      const fileChooser2 = new _fileChooser.FileChooser(this, handle, multiple);
      this.emit(Page.Events.FileChooser, fileChooser2);
    }
    context() {
      return this._browserContext;
    }
    opener() {
      return this._opener;
    }
    mainFrame() {
      return this._frameManager.mainFrame();
    }
    frames() {
      return this._frameManager.frames();
    }
    setDefaultNavigationTimeout(timeout) {
      this._timeoutSettings.setDefaultNavigationTimeout(timeout);
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
    }
    async exposeBinding(name, needsHandle, playwrightBinding) {
      if (this._pageBindings.has(name)) throw new Error(`Function "${name}" has been already registered`);
      if (this._browserContext._pageBindings.has(name)) throw new Error(`Function "${name}" has been already registered in the browser context`);
      const binding = new PageBinding(name, playwrightBinding, needsHandle);
      this._pageBindings.set(name, binding);
      await this._delegate.addInitScript(binding.initScript);
      await Promise.all(this.frames().map((frame2) => frame2.evaluateExpression(binding.initScript.source).catch((e2) => {
      })));
    }
    async _removeExposedBindings() {
      for (const [key, binding] of this._pageBindings) {
        if (!binding.internal) this._pageBindings.delete(key);
      }
    }
    setExtraHTTPHeaders(headers2) {
      this._extraHTTPHeaders = headers2;
      return this._delegate.updateExtraHTTPHeaders();
    }
    extraHTTPHeaders() {
      return this._extraHTTPHeaders;
    }
    async _onBindingCalled(payload, context) {
      if (this._closedState === "closed") return;
      await PageBinding.dispatch(this, payload, context);
    }
    _addConsoleMessage(type, args, location2, text) {
      const message = new _console.ConsoleMessage(this, type, text, args, location2);
      const intercepted = this._frameManager.interceptConsoleMessage(message);
      if (intercepted) {
        args.forEach((arg) => arg.dispose());
        return;
      }
      this.emitOnContextOnceInitialized(_browserContext.BrowserContext.Events.Console, message);
    }
    async reload(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this.mainFrame().raceNavigationAction(progress2, options, async () => {
        const [response] = await Promise.all([
          // Reload must be a new document, and should not be confused with a stray pushState.
          this.mainFrame()._waitForNavigation(progress2, true, options),
          this._delegate.reload()
        ]);
        return response;
      }), this._timeoutSettings.navigationTimeout(options));
    }
    async goBack(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this.mainFrame().raceNavigationAction(progress2, options, async () => {
        let error;
        const waitPromise = this.mainFrame()._waitForNavigation(progress2, false, options).catch((e2) => {
          error = e2;
          return null;
        });
        const result = await this._delegate.goBack();
        if (!result) return null;
        const response = await waitPromise;
        if (error) throw error;
        return response;
      }), this._timeoutSettings.navigationTimeout(options));
    }
    async goForward(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this.mainFrame().raceNavigationAction(progress2, options, async () => {
        let error;
        const waitPromise = this.mainFrame()._waitForNavigation(progress2, false, options).catch((e2) => {
          error = e2;
          return null;
        });
        const result = await this._delegate.goForward();
        if (!result) return null;
        const response = await waitPromise;
        if (error) throw error;
        return response;
      }), this._timeoutSettings.navigationTimeout(options));
    }
    requestGC() {
      return this._delegate.requestGC();
    }
    registerLocatorHandler(selector, noWaitAfter) {
      const uid = ++this._lastLocatorHandlerUid;
      this._locatorHandlers.set(uid, {
        selector,
        noWaitAfter
      });
      return uid;
    }
    resolveLocatorHandler(uid, remove2) {
      const handler = this._locatorHandlers.get(uid);
      if (remove2) this._locatorHandlers.delete(uid);
      if (handler) {
        var _handler$resolved;
        (_handler$resolved = handler.resolved) === null || _handler$resolved === void 0 || _handler$resolved.resolve();
        handler.resolved = void 0;
      }
    }
    unregisterLocatorHandler(uid) {
      this._locatorHandlers.delete(uid);
    }
    async performActionPreChecks(progress2) {
      await this._performWaitForNavigationCheck(progress2);
      progress2.throwIfAborted();
      await this._performLocatorHandlersCheckpoint(progress2);
      progress2.throwIfAborted();
      await this._performWaitForNavigationCheck(progress2);
    }
    async _performWaitForNavigationCheck(progress2) {
      var _mainFrame$pendingDoc;
      if (process.env.PLAYWRIGHT_SKIP_NAVIGATION_CHECK) return;
      const mainFrame = this._frameManager.mainFrame();
      if (!mainFrame || !mainFrame.pendingDocument()) return;
      const url = (_mainFrame$pendingDoc = mainFrame.pendingDocument()) === null || _mainFrame$pendingDoc === void 0 || (_mainFrame$pendingDoc = _mainFrame$pendingDoc.request) === null || _mainFrame$pendingDoc === void 0 ? void 0 : _mainFrame$pendingDoc.url();
      const toUrl = url ? `" ${(0, _utils.trimStringWithEllipsis)(url, 200)}"` : "";
      progress2.log(`  waiting for${toUrl} navigation to finish...`);
      await _helper.helper.waitForEvent(progress2, mainFrame, frames2.Frame.Events.InternalNavigation, (e2) => {
        if (!e2.isPublic) return false;
        if (!e2.error) progress2.log(`  navigated to "${(0, _utils.trimStringWithEllipsis)(mainFrame.url(), 200)}"`);
        return true;
      }).promise;
    }
    async _performLocatorHandlersCheckpoint(progress2) {
      if (this._locatorHandlerRunningCounter) return;
      for (const [uid, handler] of this._locatorHandlers) {
        if (!handler.resolved) {
          if (await this.mainFrame().isVisibleInternal(handler.selector, {
            strict: true
          })) {
            handler.resolved = new _manualPromise.ManualPromise();
            this.emit(Page.Events.LocatorHandlerTriggered, uid);
          }
        }
        if (handler.resolved) {
          ++this._locatorHandlerRunningCounter;
          progress2.log(`  found ${(0, _utils.asLocator)(this.attribution.playwright.options.sdkLanguage, handler.selector)}, intercepting action to run the handler`);
          const promise = handler.resolved.then(async () => {
            progress2.throwIfAborted();
            if (!handler.noWaitAfter) {
              progress2.log(`  locator handler has finished, waiting for ${(0, _utils.asLocator)(this.attribution.playwright.options.sdkLanguage, handler.selector)} to be hidden`);
              await this.mainFrame().waitForSelectorInternal(progress2, handler.selector, false, {
                state: "hidden"
              });
            } else {
              progress2.log(`  locator handler has finished`);
            }
          });
          await this.openScope.race(promise).finally(() => --this._locatorHandlerRunningCounter);
          progress2.throwIfAborted();
          progress2.log(`  interception handler has finished, continuing`);
        }
      }
    }
    async emulateMedia(options) {
      if (options.media !== void 0) this._emulatedMedia.media = options.media;
      if (options.colorScheme !== void 0) this._emulatedMedia.colorScheme = options.colorScheme;
      if (options.reducedMotion !== void 0) this._emulatedMedia.reducedMotion = options.reducedMotion;
      if (options.forcedColors !== void 0) this._emulatedMedia.forcedColors = options.forcedColors;
      if (options.contrast !== void 0) this._emulatedMedia.contrast = options.contrast;
      await this._delegate.updateEmulateMedia();
    }
    emulatedMedia() {
      var _contextOptions$color, _contextOptions$reduc, _contextOptions$force, _contextOptions$contr;
      const contextOptions = this._browserContext._options;
      return {
        media: this._emulatedMedia.media || "no-override",
        colorScheme: this._emulatedMedia.colorScheme !== void 0 ? this._emulatedMedia.colorScheme : (_contextOptions$color = contextOptions.colorScheme) !== null && _contextOptions$color !== void 0 ? _contextOptions$color : "light",
        reducedMotion: this._emulatedMedia.reducedMotion !== void 0 ? this._emulatedMedia.reducedMotion : (_contextOptions$reduc = contextOptions.reducedMotion) !== null && _contextOptions$reduc !== void 0 ? _contextOptions$reduc : "no-preference",
        forcedColors: this._emulatedMedia.forcedColors !== void 0 ? this._emulatedMedia.forcedColors : (_contextOptions$force = contextOptions.forcedColors) !== null && _contextOptions$force !== void 0 ? _contextOptions$force : "none",
        contrast: this._emulatedMedia.contrast !== void 0 ? this._emulatedMedia.contrast : (_contextOptions$contr = contextOptions.contrast) !== null && _contextOptions$contr !== void 0 ? _contextOptions$contr : "no-preference"
      };
    }
    async setViewportSize(viewportSize) {
      this._emulatedSize = {
        viewport: {
          ...viewportSize
        },
        screen: {
          ...viewportSize
        }
      };
      await this._delegate.updateEmulatedViewportSize();
    }
    viewportSize() {
      var _this$emulatedSize;
      return ((_this$emulatedSize = this.emulatedSize()) === null || _this$emulatedSize === void 0 ? void 0 : _this$emulatedSize.viewport) || null;
    }
    emulatedSize() {
      if (this._emulatedSize) return this._emulatedSize;
      const contextOptions = this._browserContext._options;
      return contextOptions.viewport ? {
        viewport: contextOptions.viewport,
        screen: contextOptions.screen || contextOptions.viewport
      } : null;
    }
    async bringToFront() {
      await this._delegate.bringToFront();
    }
    async addInitScript(source, name) {
      const initScript = new InitScript(source, false, name);
      this.initScripts.push(initScript);
      await this._delegate.addInitScript(initScript);
    }
    async _removeInitScripts() {
      this.initScripts = this.initScripts.filter((script) => script.internal);
      await this._delegate.removeNonInternalInitScripts();
    }
    needsRequestInterception() {
      return !!this._clientRequestInterceptor || !!this._serverRequestInterceptor || !!this._browserContext._requestInterceptor;
    }
    async setClientRequestInterceptor(handler) {
      this._clientRequestInterceptor = handler;
      await this._delegate.updateRequestInterception();
    }
    async _setServerRequestInterceptor(handler) {
      this._serverRequestInterceptor = handler;
      await this._delegate.updateRequestInterception();
    }
    async expectScreenshot(metadata, options = {}) {
      const locator2 = options.locator;
      const rafrafScreenshot = locator2 ? async (progress2, timeout) => {
        return await locator2.frame.rafrafTimeoutScreenshotElementWithProgress(progress2, locator2.selector, timeout, options || {});
      } : async (progress2, timeout) => {
        await this.performActionPreChecks(progress2);
        await this.mainFrame().rafrafTimeout(timeout);
        return await this._screenshotter.screenshotPage(progress2, options || {});
      };
      const comparator = (0, _comparators.getComparator)("image/png");
      const controller = new _progress.ProgressController(metadata, this);
      if (!options.expected && options.isNot) return {
        errorMessage: '"not" matcher requires expected result'
      };
      try {
        const format2 = (0, _screenshotter.validateScreenshotOptions)(options || {});
        if (format2 !== "png") throw new Error("Only PNG screenshots are supported");
      } catch (error) {
        return {
          errorMessage: error.message
        };
      }
      let intermediateResult = void 0;
      const areEqualScreenshots = (actual, expected, previous) => {
        const comparatorResult = actual && expected ? comparator(actual, expected, options) : void 0;
        if (comparatorResult !== void 0 && !!comparatorResult === !!options.isNot) return true;
        if (comparatorResult) intermediateResult = {
          errorMessage: comparatorResult.errorMessage,
          diff: comparatorResult.diff,
          actual,
          previous
        };
        return false;
      };
      const callTimeout = this._timeoutSettings.timeout(options);
      return controller.run(async (progress2) => {
        let actual;
        let previous;
        const pollIntervals = [0, 100, 250, 500];
        progress2.log(`${metadata.apiName}${callTimeout ? ` with timeout ${callTimeout}ms` : ""}`);
        if (options.expected) progress2.log(`  verifying given screenshot expectation`);
        else progress2.log(`  generating new stable screenshot expectation`);
        let isFirstIteration = true;
        while (true) {
          var _pollIntervals$shift;
          progress2.throwIfAborted();
          if (this.isClosed()) throw new Error("The page has closed");
          const screenshotTimeout = (_pollIntervals$shift = pollIntervals.shift()) !== null && _pollIntervals$shift !== void 0 ? _pollIntervals$shift : 1e3;
          if (screenshotTimeout) progress2.log(`waiting ${screenshotTimeout}ms before taking screenshot`);
          previous = actual;
          actual = await rafrafScreenshot(progress2, screenshotTimeout).catch((e2) => {
            progress2.log(`failed to take screenshot - ` + e2.message);
            return void 0;
          });
          if (!actual) continue;
          const expectation = options.expected && isFirstIteration ? options.expected : previous;
          if (areEqualScreenshots(actual, expectation, previous)) break;
          if (intermediateResult) progress2.log(intermediateResult.errorMessage);
          isFirstIteration = false;
        }
        if (!isFirstIteration) progress2.log(`captured a stable screenshot`);
        if (!options.expected) return {
          actual
        };
        if (isFirstIteration) {
          progress2.log(`screenshot matched expectation`);
          return {};
        }
        if (areEqualScreenshots(actual, options.expected, void 0)) {
          progress2.log(`screenshot matched expectation`);
          return {};
        }
        throw new Error(intermediateResult.errorMessage);
      }, callTimeout).catch((e2) => {
        var _intermediateResult;
        if (js.isJavaScriptErrorInEvaluate(e2) || (0, _selectorParser.isInvalidSelectorError)(e2)) throw e2;
        let errorMessage = e2.message;
        if (e2 instanceof _errors.TimeoutError && (_intermediateResult = intermediateResult) !== null && _intermediateResult !== void 0 && _intermediateResult.previous) errorMessage = `Failed to take two consecutive stable screenshots.`;
        return {
          log: (0, _callLog.compressCallLog)(e2.message ? [...metadata.log, e2.message] : metadata.log),
          ...intermediateResult,
          errorMessage,
          timedOut: e2 instanceof _errors.TimeoutError
        };
      });
    }
    async screenshot(metadata, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this._screenshotter.screenshotPage(progress2, options), this._timeoutSettings.timeout(options));
    }
    async close(metadata, options = {}) {
      if (this._closedState === "closed") return;
      if (options.reason) this._closeReason = options.reason;
      const runBeforeUnload = !!options.runBeforeUnload;
      if (this._closedState !== "closing") {
        this._closedState = "closing";
        await this._delegate.closePage(runBeforeUnload).catch((e2) => _debugLogger.debugLogger.log("error", e2));
      }
      if (!runBeforeUnload) await this._closedPromise;
      if (this._ownedContext) await this._ownedContext.close(options);
    }
    isClosed() {
      return this._closedState === "closed";
    }
    hasCrashed() {
      return this._crashed;
    }
    isClosedOrClosingOrCrashed() {
      return this._closedState !== "open" || this._crashed;
    }
    _addWorker(workerId, worker2) {
      this._workers.set(workerId, worker2);
      this.emit(Page.Events.Worker, worker2);
    }
    _removeWorker(workerId) {
      const worker2 = this._workers.get(workerId);
      if (!worker2) return;
      worker2.didClose();
      this._workers.delete(workerId);
    }
    _clearWorkers() {
      for (const [workerId, worker2] of this._workers) {
        worker2.didClose();
        this._workers.delete(workerId);
      }
    }
    async setFileChooserIntercepted(enabled) {
      this._interceptFileChooser = enabled;
      await this._delegate.updateFileChooserInterception();
    }
    fileChooserIntercepted() {
      return this._interceptFileChooser;
    }
    frameNavigatedToNewDocument(frame2) {
      this.emit(Page.Events.InternalFrameNavigatedToNewDocument, frame2);
      const origin = frame2.origin();
      if (origin) this._browserContext.addVisitedOrigin(origin);
    }
    allInitScripts() {
      const bindings = [...this._browserContext._pageBindings.values(), ...this._pageBindings.values()];
      return [...bindings.map((binding) => binding.initScript), ...this._browserContext.initScripts, ...this.initScripts];
    }
    getBinding(name) {
      return this._pageBindings.get(name) || this._browserContext._pageBindings.get(name);
    }
    setScreencastOptions(options) {
      this._delegate.setScreencastOptions(options).catch((e2) => _debugLogger.debugLogger.log("error", e2));
      this._frameThrottler.setThrottlingEnabled(!!options);
    }
    throttleScreencastFrameAck(ack) {
      this._frameThrottler.ack(ack);
    }
    temporarilyDisableTracingScreencastThrottling() {
      this._frameThrottler.recharge();
    }
    async safeNonStallingEvaluateInAllFrames(expression, world, options = {}) {
      await Promise.all(this.frames().map(async (frame2) => {
        try {
          await frame2.nonStallingEvaluateInExistingContext(expression, world);
        } catch (e2) {
          if (options.throwOnJSErrors && js.isJavaScriptErrorInEvaluate(e2)) throw e2;
        }
      }));
    }
    async hideHighlight() {
      await Promise.all(this.frames().map((frame2) => frame2.hideHighlight().catch(() => {
      })));
    }
    markAsServerSideOnly() {
      this._isServerSideOnly = true;
    }
  }
  page$1.Page = Page;
  Page.Events = {
    Close: "close",
    Crash: "crash",
    Download: "download",
    FileChooser: "filechooser",
    FrameAttached: "frameattached",
    FrameDetached: "framedetached",
    InternalFrameNavigatedToNewDocument: "internalframenavigatedtonewdocument",
    LocatorHandlerTriggered: "locatorhandlertriggered",
    ScreencastFrame: "screencastframe",
    Video: "video",
    WebSocket: "websocket",
    Worker: "worker"
  };
  class Worker extends _instrumentation.SdkObject {
    constructor(parent, url) {
      super(parent, "worker");
      this._url = void 0;
      this._executionContextPromise = void 0;
      this._executionContextCallback = void 0;
      this._existingExecutionContext = null;
      this.openScope = new _utils.LongStandingScope();
      this._url = url;
      this._executionContextCallback = () => {
      };
      this._executionContextPromise = new Promise((x2) => this._executionContextCallback = x2);
    }
    _createExecutionContext(delegate) {
      this._existingExecutionContext = new js.ExecutionContext(this, delegate, "worker");
      this._executionContextCallback(this._existingExecutionContext);
      return this._existingExecutionContext;
    }
    url() {
      return this._url;
    }
    didClose() {
      if (this._existingExecutionContext) this._existingExecutionContext.contextDestroyed("Worker was closed");
      this.emit(Worker.Events.Close, this);
      this.openScope.close(new Error("Worker closed"));
    }
    async evaluateExpression(expression, isFunction, arg) {
      return js.evaluateExpression(await this._executionContextPromise, expression, {
        returnByValue: true,
        isFunction
      }, arg);
    }
    async evaluateExpressionHandle(expression, isFunction, arg) {
      return js.evaluateExpression(await this._executionContextPromise, expression, {
        returnByValue: false,
        isFunction
      }, arg);
    }
  }
  page$1.Worker = Worker;
  Worker.Events = {
    Close: "close"
  };
  class PageBinding {
    constructor(name, playwrightFunction, needsHandle) {
      this.name = void 0;
      this.playwrightFunction = void 0;
      this.initScript = void 0;
      this.needsHandle = void 0;
      this.internal = void 0;
      this.name = name;
      this.playwrightFunction = playwrightFunction;
      this.initScript = new InitScript(
        `(${addPageBinding.toString()})(${JSON.stringify(PageBinding.kPlaywrightBinding)}, ${JSON.stringify(name)}, ${needsHandle}, (${_utilityScriptSerializers.source})())`,
        true
        /* internal */
      );
      this.needsHandle = needsHandle;
      this.internal = name.startsWith("__pw");
    }
    static async dispatch(page2, payload, context) {
      const {
        name,
        seq,
        serializedArgs
      } = JSON.parse(payload);
      try {
        (0, _utils.assert)(context.world);
        const binding = page2.getBinding(name);
        if (!binding) throw new Error(`Function "${name}" is not exposed`);
        let result;
        if (binding.needsHandle) {
          const handle = await context.evaluateHandle(takeHandle, {
            name,
            seq
          }).catch((e2) => null);
          result = await binding.playwrightFunction({
            frame: context.frame,
            page: page2,
            context: page2._browserContext
          }, handle);
        } else {
          if (!Array.isArray(serializedArgs)) throw new Error(`serializedArgs is not an array. This can happen when Array.prototype.toJSON is defined incorrectly`);
          const args = serializedArgs.map((a) => (0, _utilityScriptSerializers.parseEvaluationResultValue)(a));
          result = await binding.playwrightFunction({
            frame: context.frame,
            page: page2,
            context: page2._browserContext
          }, ...args);
        }
        context.evaluate(deliverResult, {
          name,
          seq,
          result
        }).catch((e2) => _debugLogger.debugLogger.log("error", e2));
      } catch (error) {
        context.evaluate(deliverResult, {
          name,
          seq,
          error
        }).catch((e2) => _debugLogger.debugLogger.log("error", e2));
      }
      function takeHandle(arg) {
        const handle = globalThis[arg.name]["handles"].get(arg.seq);
        globalThis[arg.name]["handles"].delete(arg.seq);
        return handle;
      }
      function deliverResult(arg) {
        const callbacks = globalThis[arg.name]["callbacks"];
        if ("error" in arg) callbacks.get(arg.seq).reject(arg.error);
        else callbacks.get(arg.seq).resolve(arg.result);
        callbacks.delete(arg.seq);
      }
    }
  }
  page$1.PageBinding = PageBinding;
  PageBinding.kPlaywrightBinding = "__playwright__binding__";
  function addPageBinding(playwrightBinding, bindingName, needsHandle, utilityScriptSerializers2) {
    const binding = globalThis[playwrightBinding];
    globalThis[bindingName] = (...args) => {
      const me = globalThis[bindingName];
      if (needsHandle && args.slice(1).some((arg) => arg !== void 0)) throw new Error(`exposeBindingHandle supports a single argument, ${args.length} received`);
      let callbacks = me["callbacks"];
      if (!callbacks) {
        callbacks = /* @__PURE__ */ new Map();
        me["callbacks"] = callbacks;
      }
      const seq = (me["lastSeq"] || 0) + 1;
      me["lastSeq"] = seq;
      let handles = me["handles"];
      if (!handles) {
        handles = /* @__PURE__ */ new Map();
        me["handles"] = handles;
      }
      const promise = new Promise((resolve2, reject) => callbacks.set(seq, {
        resolve: resolve2,
        reject
      }));
      let payload;
      if (needsHandle) {
        handles.set(seq, args[0]);
        payload = {
          name: bindingName,
          seq
        };
      } else {
        const serializedArgs = [];
        for (let i = 0; i < args.length; i++) {
          serializedArgs[i] = utilityScriptSerializers2.serializeAsCallArgument(args[i], (v2) => {
            return {
              fallThrough: v2
            };
          });
        }
        payload = {
          name: bindingName,
          seq,
          serializedArgs
        };
      }
      binding(JSON.stringify(payload));
      return promise;
    };
    globalThis[bindingName].__installed = true;
  }
  class InitScript {
    constructor(source, internal, name) {
      this.source = void 0;
      this.internal = void 0;
      this.name = void 0;
      const guid = (0, _crypto.createGuid)();
      this.source = `(() => {
      globalThis.__pwInitScripts = globalThis.__pwInitScripts || {};
      const hasInitScript = globalThis.__pwInitScripts[${JSON.stringify(guid)}];
      if (hasInitScript)
        return;
      globalThis.__pwInitScripts[${JSON.stringify(guid)}] = true;
      ${source}
    })();`;
      this.internal = !!internal;
      this.name = name;
    }
  }
  page$1.InitScript = InitScript;
  class FrameThrottler {
    constructor(nonThrottledFrames, defaultInterval, throttlingInterval) {
      this._acks = [];
      this._defaultInterval = void 0;
      this._throttlingInterval = void 0;
      this._nonThrottledFrames = void 0;
      this._budget = void 0;
      this._throttlingEnabled = false;
      this._timeoutId = void 0;
      this._nonThrottledFrames = nonThrottledFrames;
      this._budget = nonThrottledFrames;
      this._defaultInterval = defaultInterval;
      this._throttlingInterval = throttlingInterval;
      this._tick();
    }
    dispose() {
      if (this._timeoutId) {
        clearTimeout(this._timeoutId);
        this._timeoutId = void 0;
      }
    }
    setThrottlingEnabled(enabled) {
      this._throttlingEnabled = enabled;
    }
    recharge() {
      for (const ack of this._acks) ack();
      this._acks = [];
      this._budget = this._nonThrottledFrames;
      if (this._timeoutId) {
        clearTimeout(this._timeoutId);
        this._tick();
      }
    }
    ack(ack) {
      if (!this._timeoutId) {
        ack();
        return;
      }
      this._acks.push(ack);
    }
    _tick() {
      const ack = this._acks.shift();
      if (ack) {
        --this._budget;
        ack();
      }
      if (this._throttlingEnabled && this._budget <= 0) {
        this._timeoutId = setTimeout(() => this._tick(), this._throttlingInterval);
      } else {
        this._timeoutId = setTimeout(() => this._tick(), this._defaultInterval);
      }
    }
  }
  return page$1;
}
var types$1 = {};
var hasRequiredTypes$1;
function requireTypes$1() {
  if (hasRequiredTypes$1) return types$1;
  hasRequiredTypes$1 = 1;
  Object.defineProperty(types$1, "__esModule", {
    value: true
  });
  types$1.kLifecycleEvents = void 0;
  types$1.kLifecycleEvents = /* @__PURE__ */ new Set(["load", "domcontentloaded", "networkidle", "commit"]);
  return types$1;
}
var hasRequiredFrames;
function requireFrames() {
  if (hasRequiredFrames) return frames;
  hasRequiredFrames = 1;
  Object.defineProperty(frames, "__esModule", {
    value: true
  });
  frames.NavigationAbortedError = frames.FrameManager = frames.Frame = void 0;
  var _browserContext = requireBrowserContext$1();
  var dom2 = _interopRequireWildcard(requireDom());
  var _errors = requireErrors$1();
  var _fileUploadUtils = requireFileUploadUtils();
  var _frameSelectors = requireFrameSelectors();
  var _helper = requireHelper();
  var _instrumentation = requireInstrumentation();
  var js = _interopRequireWildcard(requireJavascript$1());
  var network2 = _interopRequireWildcard(requireNetwork$1());
  var _page = requirePage$1();
  var _progress = requireProgress();
  var types2 = _interopRequireWildcard(requireTypes$1());
  var _utils = requireUtils();
  var _protocolError = requireProtocolError();
  var _debugLogger = requireDebugLogger();
  var _eventsHelper = requireEventsHelper();
  var _selectorParser = requireSelectorParser();
  var _manualPromise = requireManualPromise();
  var _callLog = requireCallLog();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  class NavigationAbortedError extends Error {
    constructor(documentId, message) {
      super(message);
      this.documentId = void 0;
      this.documentId = documentId;
    }
  }
  frames.NavigationAbortedError = NavigationAbortedError;
  const kDummyFrameId = "<dummy>";
  class FrameManager {
    constructor(page2) {
      this._page = void 0;
      this._frames = /* @__PURE__ */ new Map();
      this._mainFrame = void 0;
      this._consoleMessageTags = /* @__PURE__ */ new Map();
      this._signalBarriers = /* @__PURE__ */ new Set();
      this._webSockets = /* @__PURE__ */ new Map();
      this._openedDialogs = /* @__PURE__ */ new Set();
      this._closeAllOpeningDialogs = false;
      this._page = page2;
      this._mainFrame = void 0;
    }
    createDummyMainFrameIfNeeded() {
      if (!this._mainFrame) this.frameAttached(kDummyFrameId, null);
    }
    dispose() {
      for (const frame2 of this._frames.values()) {
        frame2._stopNetworkIdleTimer();
        frame2._invalidateNonStallingEvaluations("Target crashed");
      }
    }
    mainFrame() {
      return this._mainFrame;
    }
    frames() {
      const frames2 = [];
      collect(this._mainFrame);
      return frames2;
      function collect(frame2) {
        frames2.push(frame2);
        for (const subframe of frame2.childFrames()) collect(subframe);
      }
    }
    frame(frameId) {
      return this._frames.get(frameId) || null;
    }
    frameAttached(frameId, parentFrameId) {
      const parentFrame = parentFrameId ? this._frames.get(parentFrameId) : null;
      if (!parentFrame) {
        if (this._mainFrame) {
          this._frames.delete(this._mainFrame._id);
          this._mainFrame._id = frameId;
        } else {
          (0, _utils.assert)(!this._frames.has(frameId));
          this._mainFrame = new Frame(this._page, frameId, parentFrame);
        }
        this._frames.set(frameId, this._mainFrame);
        return this._mainFrame;
      } else {
        (0, _utils.assert)(!this._frames.has(frameId));
        const frame2 = new Frame(this._page, frameId, parentFrame);
        this._frames.set(frameId, frame2);
        this._page.emit(_page.Page.Events.FrameAttached, frame2);
        return frame2;
      }
    }
    async waitForSignalsCreatedBy(progress2, waitAfter, action) {
      if (!waitAfter) return action();
      const barrier = new SignalBarrier(progress2);
      this._signalBarriers.add(barrier);
      if (progress2) progress2.cleanupWhenAborted(() => this._signalBarriers.delete(barrier));
      const result = await action();
      await this._page._delegate.inputActionEpilogue();
      await barrier.waitFor();
      this._signalBarriers.delete(barrier);
      await new Promise((0, _utils.makeWaitForNextTask)());
      return result;
    }
    frameWillPotentiallyRequestNavigation() {
      for (const barrier of this._signalBarriers) barrier.retain();
    }
    frameDidPotentiallyRequestNavigation() {
      for (const barrier of this._signalBarriers) barrier.release();
    }
    frameRequestedNavigation(frameId, documentId) {
      const frame2 = this._frames.get(frameId);
      if (!frame2) return;
      for (const barrier of this._signalBarriers) barrier.addFrameNavigation(frame2);
      if (frame2.pendingDocument() && frame2.pendingDocument().documentId === documentId) {
        return;
      }
      const request = documentId ? Array.from(frame2._inflightRequests).find((request2) => request2._documentId === documentId) : void 0;
      frame2.setPendingDocument({
        documentId,
        request
      });
    }
    frameCommittedNewDocumentNavigation(frameId, url, name, documentId, initial) {
      const frame2 = this._frames.get(frameId);
      this.removeChildFramesRecursively(frame2);
      this.clearWebSockets(frame2);
      frame2._url = url;
      frame2._name = name;
      let keepPending;
      const pendingDocument = frame2.pendingDocument();
      if (pendingDocument) {
        if (pendingDocument.documentId === void 0) {
          pendingDocument.documentId = documentId;
        }
        if (pendingDocument.documentId === documentId) {
          frame2._currentDocument = pendingDocument;
        } else {
          keepPending = pendingDocument;
          frame2._currentDocument = {
            documentId,
            request: void 0
          };
        }
        frame2.setPendingDocument(void 0);
      } else {
        frame2._currentDocument = {
          documentId,
          request: void 0
        };
      }
      frame2._onClearLifecycle();
      const navigationEvent = {
        url,
        name,
        newDocument: frame2._currentDocument,
        isPublic: true
      };
      this._fireInternalFrameNavigation(frame2, navigationEvent);
      if (!initial) {
        _debugLogger.debugLogger.log("api", `  navigated to "${url}"`);
        this._page.frameNavigatedToNewDocument(frame2);
      }
      frame2.setPendingDocument(keepPending);
    }
    frameCommittedSameDocumentNavigation(frameId, url) {
      const frame2 = this._frames.get(frameId);
      if (!frame2) return;
      const pending = frame2.pendingDocument();
      if (pending && pending.documentId === void 0 && pending.request === void 0) {
        frame2.setPendingDocument(void 0);
      }
      frame2._url = url;
      const navigationEvent = {
        url,
        name: frame2._name,
        isPublic: true
      };
      this._fireInternalFrameNavigation(frame2, navigationEvent);
      _debugLogger.debugLogger.log("api", `  navigated to "${url}"`);
    }
    frameAbortedNavigation(frameId, errorText, documentId) {
      const frame2 = this._frames.get(frameId);
      if (!frame2 || !frame2.pendingDocument()) return;
      if (documentId !== void 0 && frame2.pendingDocument().documentId !== documentId) return;
      const navigationEvent = {
        url: frame2._url,
        name: frame2._name,
        newDocument: frame2.pendingDocument(),
        error: new NavigationAbortedError(documentId, errorText),
        isPublic: !(documentId && frame2._redirectedNavigations.has(documentId))
      };
      frame2.setPendingDocument(void 0);
      this._fireInternalFrameNavigation(frame2, navigationEvent);
    }
    frameDetached(frameId) {
      const frame2 = this._frames.get(frameId);
      if (frame2) {
        this._removeFramesRecursively(frame2);
        this._page.mainFrame()._recalculateNetworkIdle();
      }
    }
    frameLifecycleEvent(frameId, event) {
      const frame2 = this._frames.get(frameId);
      if (frame2) frame2._onLifecycleEvent(event);
    }
    requestStarted(request, route) {
      const frame2 = request.frame();
      this._inflightRequestStarted(request);
      if (request._documentId) frame2.setPendingDocument({
        documentId: request._documentId,
        request
      });
      if (request._isFavicon) {
        route === null || route === void 0 || route.abort("aborted").catch(() => {
        });
        return;
      }
      this._page.emitOnContext(_browserContext.BrowserContext.Events.Request, request);
      if (route) {
        var _this$_page$_serverRe, _this$_page, _this$_page$_clientRe, _this$_page2, _this$_page$_browserC, _this$_page$_browserC2;
        const r2 = new network2.Route(request, route);
        if ((_this$_page$_serverRe = (_this$_page = this._page)._serverRequestInterceptor) !== null && _this$_page$_serverRe !== void 0 && _this$_page$_serverRe.call(_this$_page, r2, request)) return;
        if ((_this$_page$_clientRe = (_this$_page2 = this._page)._clientRequestInterceptor) !== null && _this$_page$_clientRe !== void 0 && _this$_page$_clientRe.call(_this$_page2, r2, request)) return;
        if ((_this$_page$_browserC = (_this$_page$_browserC2 = this._page._browserContext)._requestInterceptor) !== null && _this$_page$_browserC !== void 0 && _this$_page$_browserC.call(_this$_page$_browserC2, r2, request)) return;
        r2.continue({
          isFallback: true
        }).catch(() => {
        });
      }
    }
    requestReceivedResponse(response) {
      if (response.request()._isFavicon) return;
      this._page.emitOnContext(_browserContext.BrowserContext.Events.Response, response);
    }
    reportRequestFinished(request, response) {
      this._inflightRequestFinished(request);
      if (request._isFavicon) return;
      this._page.emitOnContext(_browserContext.BrowserContext.Events.RequestFinished, {
        request,
        response
      });
    }
    requestFailed(request, canceled) {
      const frame2 = request.frame();
      this._inflightRequestFinished(request);
      if (frame2.pendingDocument() && frame2.pendingDocument().request === request) {
        let errorText = request.failure().errorText;
        if (canceled) errorText += "; maybe frame was detached?";
        this.frameAbortedNavigation(frame2._id, errorText, frame2.pendingDocument().documentId);
      }
      if (request._isFavicon) return;
      this._page.emitOnContext(_browserContext.BrowserContext.Events.RequestFailed, request);
    }
    dialogDidOpen(dialog2) {
      for (const frame2 of this._frames.values()) frame2._invalidateNonStallingEvaluations("JavaScript dialog interrupted evaluation");
      if (this._closeAllOpeningDialogs) dialog2.close().then(() => {
      });
      else this._openedDialogs.add(dialog2);
    }
    dialogWillClose(dialog2) {
      this._openedDialogs.delete(dialog2);
    }
    async closeOpenDialogs() {
      await Promise.all([...this._openedDialogs].map((dialog2) => dialog2.close())).catch(() => {
      });
      this._openedDialogs.clear();
    }
    setCloseAllOpeningDialogs(closeDialogs) {
      this._closeAllOpeningDialogs = closeDialogs;
    }
    removeChildFramesRecursively(frame2) {
      for (const child of frame2.childFrames()) this._removeFramesRecursively(child);
    }
    _removeFramesRecursively(frame2) {
      this.removeChildFramesRecursively(frame2);
      frame2._onDetached();
      this._frames.delete(frame2._id);
      if (!this._page.isClosed()) this._page.emit(_page.Page.Events.FrameDetached, frame2);
    }
    _inflightRequestFinished(request) {
      const frame2 = request.frame();
      if (request._isFavicon) return;
      if (!frame2._inflightRequests.has(request)) return;
      frame2._inflightRequests.delete(request);
      if (frame2._inflightRequests.size === 0) frame2._startNetworkIdleTimer();
    }
    _inflightRequestStarted(request) {
      const frame2 = request.frame();
      if (request._isFavicon) return;
      frame2._inflightRequests.add(request);
      if (frame2._inflightRequests.size === 1) frame2._stopNetworkIdleTimer();
    }
    interceptConsoleMessage(message) {
      if (message.type() !== "debug") return false;
      const tag = message.text();
      const handler = this._consoleMessageTags.get(tag);
      if (!handler) return false;
      this._consoleMessageTags.delete(tag);
      handler();
      return true;
    }
    clearWebSockets(frame2) {
      if (frame2.parentFrame()) return;
      this._webSockets.clear();
    }
    onWebSocketCreated(requestId, url) {
      const ws = new network2.WebSocket(this._page, url);
      this._webSockets.set(requestId, ws);
    }
    onWebSocketRequest(requestId) {
      const ws = this._webSockets.get(requestId);
      if (ws && ws.markAsNotified()) this._page.emit(_page.Page.Events.WebSocket, ws);
    }
    onWebSocketResponse(requestId, status, statusText) {
      const ws = this._webSockets.get(requestId);
      if (status < 400) return;
      if (ws) ws.error(`${statusText}: ${status}`);
    }
    onWebSocketFrameSent(requestId, opcode, data) {
      const ws = this._webSockets.get(requestId);
      if (ws) ws.frameSent(opcode, data);
    }
    webSocketFrameReceived(requestId, opcode, data) {
      const ws = this._webSockets.get(requestId);
      if (ws) ws.frameReceived(opcode, data);
    }
    webSocketClosed(requestId) {
      const ws = this._webSockets.get(requestId);
      if (ws) ws.closed();
      this._webSockets.delete(requestId);
    }
    webSocketError(requestId, errorMessage) {
      const ws = this._webSockets.get(requestId);
      if (ws) ws.error(errorMessage);
    }
    _fireInternalFrameNavigation(frame2, event) {
      frame2.emit(Frame.Events.InternalNavigation, event);
    }
  }
  frames.FrameManager = FrameManager;
  class Frame extends _instrumentation.SdkObject {
    constructor(page2, id, parentFrame) {
      super(page2, "frame");
      this._id = void 0;
      this._firedLifecycleEvents = /* @__PURE__ */ new Set();
      this._firedNetworkIdleSelf = false;
      this._currentDocument = void 0;
      this._pendingDocument = void 0;
      this._page = void 0;
      this._parentFrame = void 0;
      this._url = "";
      this._contextData = /* @__PURE__ */ new Map();
      this._childFrames = /* @__PURE__ */ new Set();
      this._name = "";
      this._inflightRequests = /* @__PURE__ */ new Set();
      this._networkIdleTimer = void 0;
      this._setContentCounter = 0;
      this._detachedScope = new _utils.LongStandingScope();
      this._raceAgainstEvaluationStallingEventsPromises = /* @__PURE__ */ new Set();
      this._redirectedNavigations = /* @__PURE__ */ new Map();
      this.selectors = void 0;
      this.attribution.frame = this;
      this._id = id;
      this._page = page2;
      this._parentFrame = parentFrame;
      this._currentDocument = {
        documentId: void 0,
        request: void 0
      };
      this.selectors = new _frameSelectors.FrameSelectors(this);
      this._contextData.set("main", {
        contextPromise: new _manualPromise.ManualPromise(),
        context: null
      });
      this._contextData.set("utility", {
        contextPromise: new _manualPromise.ManualPromise(),
        context: null
      });
      this._setContext("main", null);
      this._setContext("utility", null);
      if (this._parentFrame) this._parentFrame._childFrames.add(this);
      this._firedLifecycleEvents.add("commit");
      if (id !== kDummyFrameId) this._startNetworkIdleTimer();
    }
    isDetached() {
      return this._detachedScope.isClosed();
    }
    _onLifecycleEvent(event) {
      if (this._firedLifecycleEvents.has(event)) return;
      this._firedLifecycleEvents.add(event);
      this.emit(Frame.Events.AddLifecycle, event);
      if (this === this._page.mainFrame() && this._url !== "about:blank") _debugLogger.debugLogger.log("api", `  "${event}" event fired`);
      this._page.mainFrame()._recalculateNetworkIdle();
    }
    _onClearLifecycle() {
      for (const event of this._firedLifecycleEvents) this.emit(Frame.Events.RemoveLifecycle, event);
      this._firedLifecycleEvents.clear();
      this._inflightRequests = new Set(Array.from(this._inflightRequests).filter((request) => request === this._currentDocument.request));
      this._stopNetworkIdleTimer();
      if (this._inflightRequests.size === 0) this._startNetworkIdleTimer();
      this._page.mainFrame()._recalculateNetworkIdle(this);
      this._onLifecycleEvent("commit");
    }
    setPendingDocument(documentInfo) {
      this._pendingDocument = documentInfo;
      if (documentInfo) this._invalidateNonStallingEvaluations("Navigation interrupted the evaluation");
    }
    pendingDocument() {
      return this._pendingDocument;
    }
    _invalidateNonStallingEvaluations(message) {
      if (!this._raceAgainstEvaluationStallingEventsPromises.size) return;
      const error = new Error(message);
      for (const promise of this._raceAgainstEvaluationStallingEventsPromises) promise.reject(error);
    }
    async raceAgainstEvaluationStallingEvents(cb) {
      if (this._pendingDocument) throw new Error("Frame is currently attempting a navigation");
      if (this._page._frameManager._openedDialogs.size) throw new Error("Open JavaScript dialog prevents evaluation");
      const promise = new _manualPromise.ManualPromise();
      this._raceAgainstEvaluationStallingEventsPromises.add(promise);
      try {
        return await Promise.race([cb(), promise]);
      } finally {
        this._raceAgainstEvaluationStallingEventsPromises.delete(promise);
      }
    }
    nonStallingRawEvaluateInExistingMainContext(expression) {
      return this.raceAgainstEvaluationStallingEvents(() => {
        const context = this._existingMainContext();
        if (!context) throw new Error("Frame does not yet have a main execution context");
        return context.rawEvaluateJSON(expression);
      });
    }
    nonStallingEvaluateInExistingContext(expression, world) {
      return this.raceAgainstEvaluationStallingEvents(() => {
        var _this$_contextData$ge;
        const context = (_this$_contextData$ge = this._contextData.get(world)) === null || _this$_contextData$ge === void 0 ? void 0 : _this$_contextData$ge.context;
        if (!context) throw new Error("Frame does not yet have the execution context");
        return context.evaluateExpression(expression, {
          isFunction: false
        });
      });
    }
    _recalculateNetworkIdle(frameThatAllowsRemovingNetworkIdle) {
      let isNetworkIdle = this._firedNetworkIdleSelf;
      for (const child of this._childFrames) {
        child._recalculateNetworkIdle(frameThatAllowsRemovingNetworkIdle);
        if (!child._firedLifecycleEvents.has("networkidle")) isNetworkIdle = false;
      }
      if (isNetworkIdle && !this._firedLifecycleEvents.has("networkidle")) {
        this._firedLifecycleEvents.add("networkidle");
        this.emit(Frame.Events.AddLifecycle, "networkidle");
        if (this === this._page.mainFrame() && this._url !== "about:blank") _debugLogger.debugLogger.log("api", `  "networkidle" event fired`);
      }
      if (frameThatAllowsRemovingNetworkIdle !== this && this._firedLifecycleEvents.has("networkidle") && !isNetworkIdle) {
        this._firedLifecycleEvents.delete("networkidle");
        this.emit(Frame.Events.RemoveLifecycle, "networkidle");
      }
    }
    async raceNavigationAction(progress2, options, action) {
      return _utils.LongStandingScope.raceMultiple([this._detachedScope, this._page.openScope], action().catch((e2) => {
        if (e2 instanceof NavigationAbortedError && e2.documentId) {
          const data = this._redirectedNavigations.get(e2.documentId);
          if (data) {
            progress2.log(`waiting for redirected navigation to "${data.url}"`);
            return data.gotoPromise;
          }
        }
        throw e2;
      }));
    }
    redirectNavigation(url, documentId, referer) {
      const controller = new _progress.ProgressController((0, _instrumentation.serverSideCallMetadata)(), this);
      const data = {
        url,
        gotoPromise: controller.run((progress2) => this._gotoAction(progress2, url, {
          referer
        }), 0)
      };
      this._redirectedNavigations.set(documentId, data);
      data.gotoPromise.finally(() => this._redirectedNavigations.delete(documentId));
    }
    async goto(metadata, url, options = {}) {
      const constructedNavigationURL = (0, _utils.constructURLBasedOnBaseURL)(this._page._browserContext._options.baseURL, url);
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this._goto(progress2, constructedNavigationURL, options), this._page._timeoutSettings.navigationTimeout(options));
    }
    async _goto(progress2, url, options) {
      return this.raceNavigationAction(progress2, options, async () => this._gotoAction(progress2, url, options));
    }
    async _gotoAction(progress2, url, options) {
      const waitUntil = verifyLifecycle("waitUntil", options.waitUntil === void 0 ? "load" : options.waitUntil);
      progress2.log(`navigating to "${url}", waiting until "${waitUntil}"`);
      const headers2 = this._page.extraHTTPHeaders() || [];
      const refererHeader = headers2.find((h2) => h2.name.toLowerCase() === "referer");
      let referer = refererHeader ? refererHeader.value : void 0;
      if (options.referer !== void 0) {
        if (referer !== void 0 && referer !== options.referer) throw new Error('"referer" is already specified as extra HTTP header');
        referer = options.referer;
      }
      url = _helper.helper.completeUserURL(url);
      const navigationEvents = [];
      const collectNavigations = (arg) => navigationEvents.push(arg);
      this.on(Frame.Events.InternalNavigation, collectNavigations);
      const navigateResult = await this._page._delegate.navigateFrame(this, url, referer).finally(() => this.off(Frame.Events.InternalNavigation, collectNavigations));
      let event;
      if (navigateResult.newDocumentId) {
        const predicate = (event2) => {
          return event2.newDocument && (event2.newDocument.documentId === navigateResult.newDocumentId || !event2.error);
        };
        const events2 = navigationEvents.filter(predicate);
        if (events2.length) event = events2[0];
        else event = await _helper.helper.waitForEvent(progress2, this, Frame.Events.InternalNavigation, predicate).promise;
        if (event.newDocument.documentId !== navigateResult.newDocumentId) {
          throw new NavigationAbortedError(navigateResult.newDocumentId, `Navigation to "${url}" is interrupted by another navigation to "${event.url}"`);
        }
        if (event.error) throw event.error;
      } else {
        const predicate = (e2) => !e2.newDocument;
        const events2 = navigationEvents.filter(predicate);
        if (events2.length) event = events2[0];
        else event = await _helper.helper.waitForEvent(progress2, this, Frame.Events.InternalNavigation, predicate).promise;
      }
      if (!this._firedLifecycleEvents.has(waitUntil)) await _helper.helper.waitForEvent(progress2, this, Frame.Events.AddLifecycle, (e2) => e2 === waitUntil).promise;
      const request = event.newDocument ? event.newDocument.request : void 0;
      const response = request ? request._finalRequest().response() : null;
      return response;
    }
    async _waitForNavigation(progress2, requiresNewDocument, options) {
      const waitUntil = verifyLifecycle("waitUntil", options.waitUntil === void 0 ? "load" : options.waitUntil);
      progress2.log(`waiting for navigation until "${waitUntil}"`);
      const navigationEvent = await _helper.helper.waitForEvent(progress2, this, Frame.Events.InternalNavigation, (event) => {
        if (event.error) return true;
        if (requiresNewDocument && !event.newDocument) return false;
        progress2.log(`  navigated to "${this._url}"`);
        return true;
      }).promise;
      if (navigationEvent.error) throw navigationEvent.error;
      if (!this._firedLifecycleEvents.has(waitUntil)) await _helper.helper.waitForEvent(progress2, this, Frame.Events.AddLifecycle, (e2) => e2 === waitUntil).promise;
      const request = navigationEvent.newDocument ? navigationEvent.newDocument.request : void 0;
      return request ? request._finalRequest().response() : null;
    }
    async _waitForLoadState(progress2, state) {
      const waitUntil = verifyLifecycle("state", state);
      if (!this._firedLifecycleEvents.has(waitUntil)) await _helper.helper.waitForEvent(progress2, this, Frame.Events.AddLifecycle, (e2) => e2 === waitUntil).promise;
    }
    async frameElement() {
      return this._page._delegate.getFrameElement(this);
    }
    _context(world) {
      return this._contextData.get(world).contextPromise.then((contextOrDestroyedReason) => {
        if (contextOrDestroyedReason instanceof js.ExecutionContext) return contextOrDestroyedReason;
        throw new Error(contextOrDestroyedReason.destroyedReason);
      });
    }
    _mainContext() {
      return this._context("main");
    }
    _existingMainContext() {
      var _this$_contextData$ge2;
      return ((_this$_contextData$ge2 = this._contextData.get("main")) === null || _this$_contextData$ge2 === void 0 ? void 0 : _this$_contextData$ge2.context) || null;
    }
    _utilityContext() {
      return this._context("utility");
    }
    async evaluateExpression(expression, options = {}, arg) {
      var _options$world;
      const context = await this._context((_options$world = options.world) !== null && _options$world !== void 0 ? _options$world : "main");
      const value = await context.evaluateExpression(expression, options, arg);
      return value;
    }
    async evaluateExpressionHandle(expression, options = {}, arg) {
      var _options$world2;
      const context = await this._context((_options$world2 = options.world) !== null && _options$world2 !== void 0 ? _options$world2 : "main");
      const value = await context.evaluateExpressionHandle(expression, options, arg);
      return value;
    }
    async querySelector(selector, options) {
      _debugLogger.debugLogger.log("api", `    finding element using the selector "${selector}"`);
      return this.selectors.query(selector, options);
    }
    async waitForSelector(metadata, selector, options, scope) {
      const controller = new _progress.ProgressController(metadata, this);
      if (options.visibility) throw new Error("options.visibility is not supported, did you mean options.state?");
      if (options.waitFor && options.waitFor !== "visible") throw new Error("options.waitFor is not supported, did you mean options.state?");
      const {
        state = "visible"
      } = options;
      if (!["attached", "detached", "visible", "hidden"].includes(state)) throw new Error(`state: expected one of (attached|detached|visible|hidden)`);
      return controller.run(async (progress2) => {
        progress2.log(`waiting for ${this._asLocator(selector)}${state === "attached" ? "" : " to be " + state}`);
        return await this.waitForSelectorInternal(progress2, selector, true, options, scope);
      }, this._page._timeoutSettings.timeout(options));
    }
    async waitForSelectorInternal(progress2, selector, performActionPreChecks, options, scope) {
      const {
        state = "visible"
      } = options;
      const promise = this.retryWithProgressAndTimeouts(progress2, [0, 20, 50, 100, 100, 500], async (continuePolling) => {
        if (performActionPreChecks) await this._page.performActionPreChecks(progress2);
        const resolved = await this.selectors.resolveInjectedForSelector(selector, options, scope);
        progress2.throwIfAborted();
        if (!resolved) {
          if (state === "hidden" || state === "detached") return null;
          return continuePolling;
        }
        const result = await resolved.injected.evaluateHandle((injected, {
          info,
          root
        }) => {
          if (root && !root.isConnected) throw injected.createStacklessError("Element is not attached to the DOM");
          const elements = injected.querySelectorAll(info.parsed, root || document);
          const element2 = elements[0];
          const visible2 = element2 ? injected.utils.isElementVisible(element2) : false;
          let log3 = "";
          if (elements.length > 1) {
            if (info.strict) throw injected.strictModeViolationError(info.parsed, elements);
            log3 = `  locator resolved to ${elements.length} elements. Proceeding with the first one: ${injected.previewNode(elements[0])}`;
          } else if (element2) {
            log3 = `  locator resolved to ${visible2 ? "visible" : "hidden"} ${injected.previewNode(element2)}`;
          }
          return {
            log: log3,
            element: element2,
            visible: visible2,
            attached: !!element2
          };
        }, {
          info: resolved.info,
          root: resolved.frame === this ? scope : void 0
        });
        const {
          log: log2,
          visible,
          attached
        } = await result.evaluate((r2) => ({
          log: r2.log,
          visible: r2.visible,
          attached: r2.attached
        }));
        if (log2) progress2.log(log2);
        const success = {
          attached,
          detached: !attached,
          visible,
          hidden: !visible
        }[state];
        if (!success) {
          result.dispose();
          return continuePolling;
        }
        if (options.omitReturnValue) {
          result.dispose();
          return null;
        }
        const element = state === "attached" || state === "visible" ? await result.evaluateHandle((r2) => r2.element) : null;
        result.dispose();
        if (!element) return null;
        if (options.__testHookBeforeAdoptNode) await options.__testHookBeforeAdoptNode();
        try {
          return await element._adoptTo(await resolved.frame._mainContext());
        } catch (e2) {
          return continuePolling;
        }
      });
      return scope ? scope._context._raceAgainstContextDestroyed(promise) : promise;
    }
    async dispatchEvent(metadata, selector, type, eventInit = {}, options = {}, scope) {
      await this._callOnElementOnceMatches(metadata, selector, (injectedScript, element, data) => {
        injectedScript.dispatchEvent(element, data.type, data.eventInit);
      }, {
        type,
        eventInit
      }, {
        mainWorld: true,
        ...options
      }, scope);
    }
    async evalOnSelector(selector, strict, expression, isFunction, arg, scope) {
      const handle = await this.selectors.query(selector, {
        strict
      }, scope);
      if (!handle) throw new Error(`Failed to find element matching selector "${selector}"`);
      const result = await handle.evaluateExpression(expression, {
        isFunction
      }, arg);
      handle.dispose();
      return result;
    }
    async evalOnSelectorAll(selector, expression, isFunction, arg, scope) {
      const arrayHandle = await this.selectors.queryArrayInMainWorld(selector, scope);
      const result = await arrayHandle.evaluateExpression(expression, {
        isFunction
      }, arg);
      arrayHandle.dispose();
      return result;
    }
    async maskSelectors(selectors2, color) {
      const context = await this._utilityContext();
      const injectedScript = await context.injectedScript();
      await injectedScript.evaluate((injected, {
        parsed,
        color: color2
      }) => {
        injected.maskSelectors(parsed, color2);
      }, {
        parsed: selectors2,
        color
      });
    }
    async querySelectorAll(selector) {
      return this.selectors.queryAll(selector);
    }
    async queryCount(selector) {
      return await this.selectors.queryCount(selector);
    }
    async content() {
      try {
        const context = await this._utilityContext();
        return await context.evaluate(() => {
          let retVal = "";
          if (document.doctype) retVal = new XMLSerializer().serializeToString(document.doctype);
          if (document.documentElement) retVal += document.documentElement.outerHTML;
          return retVal;
        });
      } catch (e2) {
        if (js.isJavaScriptErrorInEvaluate(e2) || (0, _protocolError.isSessionClosedError)(e2)) throw e2;
        throw new Error(`Unable to retrieve content because the page is navigating and changing the content.`);
      }
    }
    async setContent(metadata, html, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        await this.raceNavigationAction(progress2, options, async () => {
          const waitUntil = options.waitUntil === void 0 ? "load" : options.waitUntil;
          progress2.log(`setting frame content, waiting until "${waitUntil}"`);
          const tag = `--playwright--set--content--${this._id}--${++this._setContentCounter}--`;
          const context = await this._utilityContext();
          const lifecyclePromise = new Promise((resolve2, reject) => {
            this._page._frameManager._consoleMessageTags.set(tag, () => {
              this._onClearLifecycle();
              this._waitForLoadState(progress2, waitUntil).then(resolve2).catch(reject);
            });
          });
          const contentPromise = context.evaluate(({
            html: html2,
            tag: tag2
          }) => {
            document.open();
            console.debug(tag2);
            document.write(html2);
            document.close();
          }, {
            html,
            tag
          });
          await Promise.all([contentPromise, lifecyclePromise]);
          return null;
        });
      }, this._page._timeoutSettings.navigationTimeout(options));
    }
    name() {
      return this._name || "";
    }
    url() {
      return this._url;
    }
    origin() {
      var _network$parseURL;
      if (!this._url.startsWith("http")) return;
      return (_network$parseURL = network2.parseURL(this._url)) === null || _network$parseURL === void 0 ? void 0 : _network$parseURL.origin;
    }
    parentFrame() {
      return this._parentFrame;
    }
    childFrames() {
      return Array.from(this._childFrames);
    }
    async addScriptTag(params) {
      const {
        url = null,
        content = null,
        type = ""
      } = params;
      if (!url && !content) throw new Error("Provide an object with a `url`, `path` or `content` property");
      const context = await this._mainContext();
      return this._raceWithCSPError(async () => {
        if (url !== null) return (await context.evaluateHandle(addScriptUrl, {
          url,
          type
        })).asElement();
        const result = (await context.evaluateHandle(addScriptContent, {
          content,
          type
        })).asElement();
        if (this._page._delegate.cspErrorsAsynchronousForInlineScripts) await context.evaluate(() => true);
        return result;
      });
      async function addScriptUrl(params2) {
        const script = document.createElement("script");
        script.src = params2.url;
        if (params2.type) script.type = params2.type;
        const promise = new Promise((res, rej) => {
          script.onload = res;
          script.onerror = (e2) => rej(typeof e2 === "string" ? new Error(e2) : new Error(`Failed to load script at ${script.src}`));
        });
        document.head.appendChild(script);
        await promise;
        return script;
      }
      function addScriptContent(params2) {
        const script = document.createElement("script");
        script.type = params2.type || "text/javascript";
        script.text = params2.content;
        let error = null;
        script.onerror = (e2) => error = e2;
        document.head.appendChild(script);
        if (error) throw error;
        return script;
      }
    }
    async addStyleTag(params) {
      const {
        url = null,
        content = null
      } = params;
      if (!url && !content) throw new Error("Provide an object with a `url`, `path` or `content` property");
      const context = await this._mainContext();
      return this._raceWithCSPError(async () => {
        if (url !== null) return (await context.evaluateHandle(addStyleUrl, url)).asElement();
        return (await context.evaluateHandle(addStyleContent, content)).asElement();
      });
      async function addStyleUrl(url2) {
        const link2 = document.createElement("link");
        link2.rel = "stylesheet";
        link2.href = url2;
        const promise = new Promise((res, rej) => {
          link2.onload = res;
          link2.onerror = rej;
        });
        document.head.appendChild(link2);
        await promise;
        return link2;
      }
      async function addStyleContent(content2) {
        const style = document.createElement("style");
        style.type = "text/css";
        style.appendChild(document.createTextNode(content2));
        const promise = new Promise((res, rej) => {
          style.onload = res;
          style.onerror = rej;
        });
        document.head.appendChild(style);
        await promise;
        return style;
      }
    }
    async _raceWithCSPError(func) {
      const listeners = [];
      let result;
      let error;
      let cspMessage;
      const actionPromise = func().then((r2) => result = r2).catch((e2) => error = e2);
      const errorPromise = new Promise((resolve2) => {
        listeners.push(_eventsHelper.eventsHelper.addEventListener(this._page._browserContext, _browserContext.BrowserContext.Events.Console, (message) => {
          if (message.page() !== this._page || message.type() !== "error") return;
          if (message.text().includes("Content-Security-Policy") || message.text().includes("Content Security Policy")) {
            cspMessage = message;
            resolve2();
          }
        }));
      });
      await Promise.race([actionPromise, errorPromise]);
      _eventsHelper.eventsHelper.removeEventListeners(listeners);
      if (cspMessage) throw new Error(cspMessage.text());
      if (error) throw error;
      return result;
    }
    async retryWithProgressAndTimeouts(progress2, timeouts, action) {
      const continuePolling = Symbol("continuePolling");
      timeouts = [0, ...timeouts];
      let timeoutIndex = 0;
      while (progress2.isRunning()) {
        const timeout = timeouts[Math.min(timeoutIndex++, timeouts.length - 1)];
        if (timeout) {
          const actionPromise = new Promise((f2) => setTimeout(f2, timeout));
          await _utils.LongStandingScope.raceMultiple([this._page.openScope, this._detachedScope], actionPromise);
        }
        progress2.throwIfAborted();
        try {
          const result = await action(continuePolling);
          if (result === continuePolling) continue;
          return result;
        } catch (e2) {
          if (this._isErrorThatCannotBeRetried(e2)) throw e2;
          continue;
        }
      }
      progress2.throwIfAborted();
      return void 0;
    }
    _isErrorThatCannotBeRetried(e2) {
      if (js.isJavaScriptErrorInEvaluate(e2) || (0, _protocolError.isSessionClosedError)(e2)) return true;
      if (dom2.isNonRecoverableDOMError(e2) || (0, _selectorParser.isInvalidSelectorError)(e2)) return true;
      if (this.isDetached()) return true;
      return false;
    }
    async _retryWithProgressIfNotConnected(progress2, selector, strict, performActionPreChecks, action) {
      progress2.log(`waiting for ${this._asLocator(selector)}`);
      return this.retryWithProgressAndTimeouts(progress2, [0, 20, 50, 100, 100, 500], async (continuePolling) => {
        if (performActionPreChecks) await this._page.performActionPreChecks(progress2);
        const resolved = await this.selectors.resolveInjectedForSelector(selector, {
          strict
        });
        progress2.throwIfAborted();
        if (!resolved) return continuePolling;
        const result = await resolved.injected.evaluateHandle((injected, {
          info,
          callId
        }) => {
          const elements = injected.querySelectorAll(info.parsed, document);
          if (callId) injected.markTargetElements(new Set(elements), callId);
          const element2 = elements[0];
          let log3 = "";
          if (elements.length > 1) {
            if (info.strict) throw injected.strictModeViolationError(info.parsed, elements);
            log3 = `  locator resolved to ${elements.length} elements. Proceeding with the first one: ${injected.previewNode(elements[0])}`;
          } else if (element2) {
            log3 = `  locator resolved to ${injected.previewNode(element2)}`;
          }
          return {
            log: log3,
            success: !!element2,
            element: element2
          };
        }, {
          info: resolved.info,
          callId: progress2.metadata.id
        });
        const {
          log: log2,
          success
        } = await result.evaluate((r2) => ({
          log: r2.log,
          success: r2.success
        }));
        if (log2) progress2.log(log2);
        if (!success) {
          result.dispose();
          return continuePolling;
        }
        const element = await result.evaluateHandle((r2) => r2.element);
        result.dispose();
        try {
          const result2 = await action(element);
          if (result2 === "error:notconnected") {
            progress2.log("element was detached from the DOM, retrying");
            return continuePolling;
          }
          return result2;
        } finally {
          element === null || element === void 0 || element.dispose();
        }
      });
    }
    async rafrafTimeoutScreenshotElementWithProgress(progress2, selector, timeout, options) {
      return await this._retryWithProgressIfNotConnected(progress2, selector, true, true, async (handle) => {
        await handle._frame.rafrafTimeout(timeout);
        return await this._page._screenshotter.screenshotElement(progress2, handle, options);
      });
    }
    async click(metadata, selector, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom2.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._click(progress2, {
          ...options,
          waitAfter: !options.noWaitAfter
        })));
      }, this._page._timeoutSettings.timeout(options));
    }
    async dblclick(metadata, selector, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom2.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._dblclick(progress2, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async dragAndDrop(metadata, source, target, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      await controller.run(async (progress2) => {
        dom2.assertDone(await this._retryWithProgressIfNotConnected(progress2, source, options.strict, !options.force, async (handle) => {
          return handle._retryPointerAction(progress2, "move and down", false, async (point) => {
            await this._page.mouse.move(point.x, point.y);
            await this._page.mouse.down();
          }, {
            ...options,
            waitAfter: "disabled",
            position: options.sourcePosition,
            timeout: progress2.timeUntilDeadline()
          });
        }));
        dom2.assertDone(await this._retryWithProgressIfNotConnected(progress2, target, options.strict, false, async (handle) => {
          return handle._retryPointerAction(progress2, "move and up", false, async (point) => {
            await this._page.mouse.move(point.x, point.y);
            await this._page.mouse.up();
          }, {
            ...options,
            waitAfter: "disabled",
            position: options.targetPosition,
            timeout: progress2.timeUntilDeadline()
          });
        }));
      }, this._page._timeoutSettings.timeout(options));
    }
    async tap(metadata, selector, options) {
      if (!this._page._browserContext._options.hasTouch) throw new Error("The page does not support tap. Use hasTouch context option to enable touch support.");
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom2.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._tap(progress2, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async fill(metadata, selector, value, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom2.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._fill(progress2, value, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async focus(metadata, selector, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      await controller.run(async (progress2) => {
        dom2.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, true, (handle) => handle._focus(progress2)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async blur(metadata, selector, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      await controller.run(async (progress2) => {
        dom2.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, true, (handle) => handle._blur(progress2)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async textContent(metadata, selector, options = {}, scope) {
      return this._callOnElementOnceMatches(metadata, selector, (injected, element) => element.textContent, void 0, options, scope);
    }
    async innerText(metadata, selector, options = {}, scope) {
      return this._callOnElementOnceMatches(metadata, selector, (injectedScript, element) => {
        if (element.namespaceURI !== "http://www.w3.org/1999/xhtml") throw injectedScript.createStacklessError("Node is not an HTMLElement");
        return element.innerText;
      }, void 0, options, scope);
    }
    async innerHTML(metadata, selector, options = {}, scope) {
      return this._callOnElementOnceMatches(metadata, selector, (injected, element) => element.innerHTML, void 0, options, scope);
    }
    async getAttribute(metadata, selector, name, options = {}, scope) {
      return this._callOnElementOnceMatches(metadata, selector, (injected, element, data) => element.getAttribute(data.name), {
        name
      }, options, scope);
    }
    async inputValue(metadata, selector, options = {}, scope) {
      return this._callOnElementOnceMatches(metadata, selector, (injectedScript, node) => {
        const element = injectedScript.retarget(node, "follow-label");
        if (!element || element.nodeName !== "INPUT" && element.nodeName !== "TEXTAREA" && element.nodeName !== "SELECT") throw injectedScript.createStacklessError("Node is not an <input>, <textarea> or <select> element");
        return element.value;
      }, void 0, options, scope);
    }
    async highlight(selector) {
      const resolved = await this.selectors.resolveInjectedForSelector(selector);
      if (!resolved) return;
      return await resolved.injected.evaluate((injected, {
        info
      }) => {
        return injected.highlight(info.parsed);
      }, {
        info: resolved.info
      });
    }
    async hideHighlight() {
      return this.raceAgainstEvaluationStallingEvents(async () => {
        const context = await this._utilityContext();
        const injectedScript = await context.injectedScript();
        return await injectedScript.evaluate((injected) => {
          return injected.hideHighlight();
        });
      });
    }
    async _elementState(metadata, selector, state, options = {}, scope) {
      const result = await this._callOnElementOnceMatches(metadata, selector, (injected, element, data) => {
        return injected.elementState(element, data.state);
      }, {
        state
      }, options, scope);
      if (result.received === "error:notconnected") dom2.throwElementIsNotAttached();
      return result.matches;
    }
    async isVisible(metadata, selector, options = {}, scope) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        progress2.log(`  checking visibility of ${this._asLocator(selector)}`);
        return await this.isVisibleInternal(selector, options, scope);
      }, this._page._timeoutSettings.timeout({}));
    }
    async isVisibleInternal(selector, options = {}, scope) {
      try {
        const resolved = await this.selectors.resolveInjectedForSelector(selector, options, scope);
        if (!resolved) return false;
        return await resolved.injected.evaluate((injected, {
          info,
          root
        }) => {
          const element = injected.querySelector(info.parsed, root || document, info.strict);
          const state = element ? injected.elementState(element, "visible") : {
            matches: false,
            received: "error:notconnected"
          };
          return state.matches;
        }, {
          info: resolved.info,
          root: resolved.frame === this ? scope : void 0
        });
      } catch (e2) {
        if (js.isJavaScriptErrorInEvaluate(e2) || (0, _selectorParser.isInvalidSelectorError)(e2) || (0, _protocolError.isSessionClosedError)(e2)) throw e2;
        return false;
      }
    }
    async isHidden(metadata, selector, options = {}, scope) {
      return !await this.isVisible(metadata, selector, options, scope);
    }
    async isDisabled(metadata, selector, options = {}, scope) {
      return this._elementState(metadata, selector, "disabled", options, scope);
    }
    async isEnabled(metadata, selector, options = {}, scope) {
      return this._elementState(metadata, selector, "enabled", options, scope);
    }
    async isEditable(metadata, selector, options = {}, scope) {
      return this._elementState(metadata, selector, "editable", options, scope);
    }
    async isChecked(metadata, selector, options = {}, scope) {
      return this._elementState(metadata, selector, "checked", options, scope);
    }
    async hover(metadata, selector, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom2.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._hover(progress2, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async selectOption(metadata, selector, elements, values, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._selectOption(progress2, elements, values, options));
      }, this._page._timeoutSettings.timeout(options));
    }
    async setInputFiles(metadata, selector, params) {
      const inputFileItems = await (0, _fileUploadUtils.prepareFilesForUpload)(this, params);
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom2.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, params.strict, true, (handle) => handle._setInputFiles(progress2, inputFileItems)));
      }, this._page._timeoutSettings.timeout(params));
    }
    async type(metadata, selector, text, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom2.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, true, (handle) => handle._type(progress2, text, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async press(metadata, selector, key, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom2.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, true, (handle) => handle._press(progress2, key, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async check(metadata, selector, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom2.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._setChecked(progress2, true, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async uncheck(metadata, selector, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom2.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._setChecked(progress2, false, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async waitForTimeout(metadata, timeout) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async () => {
        await new Promise((resolve2) => setTimeout(resolve2, timeout));
      });
    }
    async ariaSnapshot(metadata, selector, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return await this._retryWithProgressIfNotConnected(progress2, selector, true, true, (handle) => handle.ariaSnapshot(options));
      }, this._page._timeoutSettings.timeout(options));
    }
    async expect(metadata, selector, options) {
      const result = await this._expectImpl(metadata, selector, options);
      if (result.matches === options.isNot) metadata.error = {
        error: {
          name: "Expect",
          message: "Expect failed"
        }
      };
      return result;
    }
    async _expectImpl(metadata, selector, options) {
      const lastIntermediateResult = {
        isSet: false
      };
      try {
        let timeout = this._page._timeoutSettings.timeout(options);
        const start = timeout > 0 ? (0, _utils.monotonicTime)() : 0;
        await new _progress.ProgressController(metadata, this).run(async (progress2) => {
          progress2.log(`${metadata.apiName}${timeout ? ` with timeout ${timeout}ms` : ""}`);
          progress2.log(`waiting for ${this._asLocator(selector)}`);
          await this._page.performActionPreChecks(progress2);
        }, timeout);
        try {
          const resultOneShot = await new _progress.ProgressController(metadata, this).run(async (progress2) => {
            return await this._expectInternal(progress2, selector, options, lastIntermediateResult);
          });
          if (resultOneShot.matches !== options.isNot) return resultOneShot;
        } catch (e2) {
          if (js.isJavaScriptErrorInEvaluate(e2) || (0, _selectorParser.isInvalidSelectorError)(e2)) throw e2;
        }
        if (timeout > 0) {
          const elapsed = (0, _utils.monotonicTime)() - start;
          timeout -= elapsed;
        }
        if (timeout < 0) return {
          matches: options.isNot,
          log: (0, _callLog.compressCallLog)(metadata.log),
          timedOut: true,
          received: lastIntermediateResult.received
        };
        return await new _progress.ProgressController(metadata, this).run(async (progress2) => {
          return await this.retryWithProgressAndTimeouts(progress2, [100, 250, 500, 1e3], async (continuePolling) => {
            await this._page.performActionPreChecks(progress2);
            const {
              matches,
              received
            } = await this._expectInternal(progress2, selector, options, lastIntermediateResult);
            if (matches === options.isNot) {
              return continuePolling;
            }
            return {
              matches,
              received
            };
          });
        }, timeout);
      } catch (e2) {
        if (js.isJavaScriptErrorInEvaluate(e2) || (0, _selectorParser.isInvalidSelectorError)(e2)) throw e2;
        const result = {
          matches: options.isNot,
          log: (0, _callLog.compressCallLog)(metadata.log)
        };
        if (lastIntermediateResult.isSet) result.received = lastIntermediateResult.received;
        if (e2 instanceof _errors.TimeoutError) result.timedOut = true;
        return result;
      }
    }
    async _expectInternal(progress2, selector, options, lastIntermediateResult) {
      var _info$world;
      const selectorInFrame = await this.selectors.resolveFrameForSelector(selector, {
        strict: true
      });
      progress2.throwIfAborted();
      const {
        frame: frame2,
        info
      } = selectorInFrame || {
        frame: this,
        info: void 0
      };
      const world = options.expression === "to.have.property" ? "main" : (_info$world = info === null || info === void 0 ? void 0 : info.world) !== null && _info$world !== void 0 ? _info$world : "utility";
      const context = await frame2._context(world);
      const injected = await context.injectedScript();
      progress2.throwIfAborted();
      const {
        log: log2,
        matches,
        received,
        missingReceived
      } = await injected.evaluate(async (injected2, {
        info: info2,
        options: options2,
        callId
      }) => {
        const elements = info2 ? injected2.querySelectorAll(info2.parsed, document) : [];
        if (callId) injected2.markTargetElements(new Set(elements), callId);
        const isArray = options2.expression === "to.have.count" || options2.expression.endsWith(".array");
        let log3 = "";
        if (isArray) log3 = `  locator resolved to ${elements.length} element${elements.length === 1 ? "" : "s"}`;
        else if (elements.length > 1) throw injected2.strictModeViolationError(info2.parsed, elements);
        else if (elements.length) log3 = `  locator resolved to ${injected2.previewNode(elements[0])}`;
        return {
          log: log3,
          ...await injected2.expect(elements[0], options2, elements)
        };
      }, {
        info,
        options,
        callId: progress2.metadata.id
      });
      if (log2) progress2.log(log2);
      if (matches === options.isNot) {
        lastIntermediateResult.received = missingReceived ? "<element(s) not found>" : received;
        lastIntermediateResult.isSet = true;
        if (!missingReceived && !Array.isArray(received)) progress2.log(`  unexpected value "${renderUnexpectedValue(options.expression, received)}"`);
      }
      return {
        matches,
        received
      };
    }
    async _waitForFunctionExpression(metadata, expression, isFunction, arg, options, world = "main") {
      const controller = new _progress.ProgressController(metadata, this);
      if (typeof options.pollingInterval === "number") (0, _utils.assert)(options.pollingInterval > 0, "Cannot poll with non-positive interval: " + options.pollingInterval);
      expression = js.normalizeEvaluationExpression(expression, isFunction);
      return controller.run(async (progress2) => {
        return this.retryWithProgressAndTimeouts(progress2, [100], async () => {
          const context = world === "main" ? await this._mainContext() : await this._utilityContext();
          const injectedScript = await context.injectedScript();
          const handle = await injectedScript.evaluateHandle((injected, {
            expression: expression2,
            isFunction: isFunction2,
            polling,
            arg: arg2
          }) => {
            const predicate = () => {
              let result2 = globalThis.eval(expression2);
              if (isFunction2 === true) {
                result2 = result2(arg2);
              } else if (isFunction2 === false) {
                result2 = result2;
              } else {
                if (typeof result2 === "function") result2 = result2(arg2);
              }
              return result2;
            };
            let fulfill;
            let reject;
            let aborted = false;
            const result = new Promise((f2, r2) => {
              fulfill = f2;
              reject = r2;
            });
            const next = () => {
              if (aborted) return;
              try {
                const success = predicate();
                if (success) {
                  fulfill(success);
                  return;
                }
                if (typeof polling !== "number") injected.builtinRequestAnimationFrame(next);
                else injected.builtinSetTimeout(next, polling);
              } catch (e2) {
                reject(e2);
              }
            };
            next();
            return {
              result,
              abort: () => aborted = true
            };
          }, {
            expression,
            isFunction,
            polling: options.pollingInterval,
            arg
          });
          progress2.cleanupWhenAborted(() => handle.evaluate((h2) => h2.abort()).catch(() => {
          }));
          return handle.evaluateHandle((h2) => h2.result);
        });
      }, this._page._timeoutSettings.timeout(options));
    }
    async waitForFunctionValueInUtility(progress2, pageFunction) {
      const expression = `() => {
      const result = (${pageFunction})();
      if (!result)
        return result;
      return JSON.stringify(result);
    }`;
      const handle = await this._waitForFunctionExpression((0, _instrumentation.serverSideCallMetadata)(), expression, true, void 0, {
        timeout: progress2.timeUntilDeadline()
      }, "utility");
      return JSON.parse(handle.rawValue());
    }
    async title() {
      const context = await this._utilityContext();
      return context.evaluate(() => document.title);
    }
    async rafrafTimeout(timeout) {
      if (timeout === 0) return;
      const context = await this._utilityContext();
      await Promise.all([
        // wait for double raf
        context.evaluate(() => new Promise((x2) => {
          requestAnimationFrame(() => {
            requestAnimationFrame(x2);
          });
        })),
        new Promise((fulfill) => setTimeout(fulfill, timeout))
      ]);
    }
    _onDetached() {
      this._stopNetworkIdleTimer();
      this._detachedScope.close(new Error("Frame was detached"));
      for (const data of this._contextData.values()) {
        if (data.context) data.context.contextDestroyed("Frame was detached");
        data.contextPromise.resolve({
          destroyedReason: "Frame was detached"
        });
      }
      if (this._parentFrame) this._parentFrame._childFrames.delete(this);
      this._parentFrame = null;
    }
    async _callOnElementOnceMatches(metadata, selector, body, taskData, options = {}, scope) {
      const callbackText = body.toString();
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        progress2.log(`waiting for ${this._asLocator(selector)}`);
        const promise = this.retryWithProgressAndTimeouts(progress2, [0, 20, 50, 100, 100, 500], async (continuePolling) => {
          const resolved = await this.selectors.resolveInjectedForSelector(selector, options, scope);
          progress2.throwIfAborted();
          if (!resolved) return continuePolling;
          const {
            log: log2,
            success,
            value
          } = await resolved.injected.evaluate((injected, {
            info,
            callbackText: callbackText2,
            taskData: taskData2,
            callId,
            root
          }) => {
            const callback = injected.eval(callbackText2);
            const element = injected.querySelector(info.parsed, root || document, info.strict);
            if (!element) return {
              success: false
            };
            const log3 = `  locator resolved to ${injected.previewNode(element)}`;
            if (callId) injected.markTargetElements(/* @__PURE__ */ new Set([element]), callId);
            return {
              log: log3,
              success: true,
              value: callback(injected, element, taskData2)
            };
          }, {
            info: resolved.info,
            callbackText,
            taskData,
            callId: progress2.metadata.id,
            root: resolved.frame === this ? scope : void 0
          });
          if (log2) progress2.log(log2);
          if (!success) return continuePolling;
          return value;
        });
        return scope ? scope._context._raceAgainstContextDestroyed(promise) : promise;
      }, this._page._timeoutSettings.timeout(options));
    }
    _setContext(world, context) {
      const data = this._contextData.get(world);
      data.context = context;
      if (context) data.contextPromise.resolve(context);
      else data.contextPromise = new _manualPromise.ManualPromise();
    }
    _contextCreated(world, context) {
      const data = this._contextData.get(world);
      if (data.context) {
        data.context.contextDestroyed("Execution context was destroyed, most likely because of a navigation");
        this._setContext(world, null);
      }
      this._setContext(world, context);
    }
    _contextDestroyed(context) {
      if (this._detachedScope.isClosed()) return;
      context.contextDestroyed("Execution context was destroyed, most likely because of a navigation");
      for (const [world, data] of this._contextData) {
        if (data.context === context) this._setContext(world, null);
      }
    }
    _startNetworkIdleTimer() {
      (0, _utils.assert)(!this._networkIdleTimer);
      if (this._firedLifecycleEvents.has("networkidle") || this._detachedScope.isClosed()) return;
      this._networkIdleTimer = setTimeout(() => {
        this._firedNetworkIdleSelf = true;
        this._page.mainFrame()._recalculateNetworkIdle();
      }, 500);
    }
    _stopNetworkIdleTimer() {
      if (this._networkIdleTimer) clearTimeout(this._networkIdleTimer);
      this._networkIdleTimer = void 0;
      this._firedNetworkIdleSelf = false;
    }
    async extendInjectedScript(source, arg) {
      const context = await this._context("main");
      const injectedScriptHandle = await context.injectedScript();
      return injectedScriptHandle.evaluateHandle((injectedScript, {
        source: source2,
        arg: arg2
      }) => {
        return injectedScript.extend(source2, arg2);
      }, {
        source,
        arg
      });
    }
    async resetStorageForCurrentOriginBestEffort(newStorage) {
      const context = await this._utilityContext();
      await context.evaluate(async ({
        ls
      }) => {
        sessionStorage.clear();
        localStorage.clear();
        for (const entry of ls || []) localStorage[entry.name] = entry.value;
        const registrations = navigator.serviceWorker ? await navigator.serviceWorker.getRegistrations() : [];
        await Promise.all(registrations.map(async (r2) => {
          if (!r2.installing && !r2.waiting && !r2.active) r2.unregister().catch(() => {
          });
          else await r2.unregister().catch(() => {
          });
        }));
        for (const db of await ((_indexedDB$databases = (_indexedDB = indexedDB).databases) === null || _indexedDB$databases === void 0 ? void 0 : _indexedDB$databases.call(_indexedDB)) || []) {
          var _indexedDB$databases, _indexedDB;
          if (db.name) indexedDB.deleteDatabase(db.name);
        }
      }, {
        ls: newStorage === null || newStorage === void 0 ? void 0 : newStorage.localStorage
      }).catch(() => {
      });
    }
    _asLocator(selector) {
      return (0, _utils.asLocator)(this._page.attribution.playwright.options.sdkLanguage, selector);
    }
  }
  frames.Frame = Frame;
  Frame.Events = {
    InternalNavigation: "internalnavigation",
    AddLifecycle: "addlifecycle",
    RemoveLifecycle: "removelifecycle"
  };
  class SignalBarrier {
    constructor(progress2) {
      this._progress = void 0;
      this._protectCount = 0;
      this._promise = new _manualPromise.ManualPromise();
      this._progress = progress2;
      this.retain();
    }
    waitFor() {
      this.release();
      return this._promise;
    }
    async addFrameNavigation(frame2) {
      if (frame2.parentFrame()) return;
      this.retain();
      const waiter2 = _helper.helper.waitForEvent(null, frame2, Frame.Events.InternalNavigation, (e2) => {
        if (!e2.isPublic) return false;
        if (!e2.error && this._progress) this._progress.log(`  navigated to "${frame2._url}"`);
        return true;
      });
      await _utils.LongStandingScope.raceMultiple([frame2._page.openScope, frame2._detachedScope], waiter2.promise).catch(() => {
      });
      waiter2.dispose();
      this.release();
    }
    retain() {
      ++this._protectCount;
    }
    release() {
      --this._protectCount;
      if (!this._protectCount) this._promise.resolve();
    }
  }
  function verifyLifecycle(name, waitUntil) {
    if (waitUntil === "networkidle0") waitUntil = "networkidle";
    if (!types2.kLifecycleEvents.has(waitUntil)) throw new Error(`${name}: expected one of (load|domcontentloaded|networkidle|commit)`);
    return waitUntil;
  }
  function renderUnexpectedValue(expression, received) {
    if (expression === "to.match.aria") return received ? received.raw : received;
    return received;
  }
  return frames;
}
var hasRequiredHarTracer;
function requireHarTracer() {
  if (hasRequiredHarTracer) return harTracer;
  hasRequiredHarTracer = 1;
  Object.defineProperty(harTracer, "__esModule", {
    value: true
  });
  harTracer.HarTracer = void 0;
  var _utils = requireUtils();
  var _eventsHelper = requireEventsHelper();
  var _manualPromise = requireManualPromise();
  var _utilsBundle = requireUtilsBundle();
  var _browserContext = requireBrowserContext$1();
  var _fetch = requireFetch$1();
  var _frames = requireFrames();
  var _helper = requireHelper();
  var network2 = _interopRequireWildcard(requireNetwork$1());
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  const FALLBACK_HTTP_VERSION = "HTTP/1.1";
  class HarTracer {
    constructor(context, page2, delegate, options) {
      this._context = void 0;
      this._barrierPromises = /* @__PURE__ */ new Set();
      this._delegate = void 0;
      this._options = void 0;
      this._pageEntries = /* @__PURE__ */ new Map();
      this._eventListeners = [];
      this._started = false;
      this._entrySymbol = void 0;
      this._baseURL = void 0;
      this._page = void 0;
      this._context = context;
      this._page = page2;
      this._delegate = delegate;
      this._options = options;
      if (options.slimMode) {
        options.omitSecurityDetails = true;
        options.omitCookies = true;
        options.omitTiming = true;
        options.omitServerIP = true;
        options.omitSizes = true;
        options.omitPages = true;
      }
      this._entrySymbol = Symbol("requestHarEntry");
      this._baseURL = context instanceof _fetch.APIRequestContext ? context._defaultOptions().baseURL : context._options.baseURL;
    }
    start(options) {
      if (this._started) return;
      this._options.omitScripts = options.omitScripts;
      this._started = true;
      const apiRequest = this._context instanceof _fetch.APIRequestContext ? this._context : this._context.fetchRequest;
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(apiRequest, _fetch.APIRequestContext.Events.Request, (event) => this._onAPIRequest(event)), _eventsHelper.eventsHelper.addEventListener(apiRequest, _fetch.APIRequestContext.Events.RequestFinished, (event) => this._onAPIRequestFinished(event))];
      if (this._context instanceof _browserContext.BrowserContext) {
        this._eventListeners.push(_eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.Page, (page2) => this._createPageEntryIfNeeded(page2)), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.Request, (request) => this._onRequest(request)), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.RequestFinished, ({
          request,
          response
        }) => this._onRequestFinished(request, response).catch(() => {
        })), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.RequestFailed, (request) => this._onRequestFailed(request)), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.Response, (response) => this._onResponse(response)), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.RequestAborted, (request) => this._onRequestAborted(request)), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.RequestFulfilled, (request) => this._onRequestFulfilled(request)), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.RequestContinued, (request) => this._onRequestContinued(request)));
      }
    }
    _shouldIncludeEntryWithUrl(urlString) {
      return !this._options.urlFilter || (0, _utils.urlMatches)(this._baseURL, urlString, this._options.urlFilter);
    }
    _entryForRequest(request) {
      return request[this._entrySymbol];
    }
    _createPageEntryIfNeeded(page2) {
      if (!page2) return;
      if (this._options.omitPages) return;
      if (this._page && page2 !== this._page) return;
      let pageEntry = this._pageEntries.get(page2);
      if (!pageEntry) {
        const date = /* @__PURE__ */ new Date();
        pageEntry = {
          startedDateTime: date.toISOString(),
          id: page2.guid,
          title: "",
          pageTimings: this._options.omitTiming ? {} : {
            onContentLoad: -1,
            onLoad: -1
          }
        };
        pageEntry[startedDateSymbol] = date;
        page2.mainFrame().on(_frames.Frame.Events.AddLifecycle, (event) => {
          if (event === "load") this._onLoad(page2, pageEntry);
          if (event === "domcontentloaded") this._onDOMContentLoaded(page2, pageEntry);
        });
        this._pageEntries.set(page2, pageEntry);
      }
      return pageEntry;
    }
    _onDOMContentLoaded(page2, pageEntry) {
      const promise = page2.mainFrame().evaluateExpression(String(() => {
        return {
          title: document.title,
          domContentLoaded: performance.timing.domContentLoadedEventStart
        };
      }), {
        isFunction: true,
        world: "utility"
      }).then((result) => {
        pageEntry.title = result.title;
        if (!this._options.omitTiming) pageEntry.pageTimings.onContentLoad = result.domContentLoaded;
      }).catch(() => {
      });
      this._addBarrier(page2, promise);
    }
    _onLoad(page2, pageEntry) {
      const promise = page2.mainFrame().evaluateExpression(String(() => {
        return {
          title: document.title,
          loaded: performance.timing.loadEventStart
        };
      }), {
        isFunction: true,
        world: "utility"
      }).then((result) => {
        pageEntry.title = result.title;
        if (!this._options.omitTiming) pageEntry.pageTimings.onLoad = result.loaded;
      }).catch(() => {
      });
      this._addBarrier(page2, promise);
    }
    _addBarrier(target, promise) {
      if (!target) return null;
      if (!this._options.waitForContentOnStop) return;
      const race = target.openScope.safeRace(promise);
      this._barrierPromises.add(race);
      race.then(() => this._barrierPromises.delete(race));
    }
    _onAPIRequest(event) {
      var _event$postData;
      if (!this._shouldIncludeEntryWithUrl(event.url.toString())) return;
      const harEntry = createHarEntry(event.method, event.url, void 0, this._options);
      harEntry._apiRequest = true;
      if (!this._options.omitCookies) harEntry.request.cookies = event.cookies;
      harEntry.request.headers = Object.entries(event.headers).map(([name, value]) => ({
        name,
        value
      }));
      harEntry.request.postData = this._postDataForBuffer(event.postData || null, event.headers["content-type"], this._options.content);
      if (!this._options.omitSizes) harEntry.request.bodySize = ((_event$postData = event.postData) === null || _event$postData === void 0 ? void 0 : _event$postData.length) || 0;
      event[this._entrySymbol] = harEntry;
      if (this._started) this._delegate.onEntryStarted(harEntry);
    }
    _onAPIRequestFinished(event) {
      var _event$body$length, _event$body;
      const harEntry = this._entryForRequest(event.requestEvent);
      if (!harEntry) return;
      harEntry.response.status = event.statusCode;
      harEntry.response.statusText = event.statusMessage;
      harEntry.response.httpVersion = event.httpVersion;
      harEntry.response.redirectURL = event.headers.location || "";
      if (!this._options.omitServerIP) {
        harEntry.serverIPAddress = event.serverIPAddress;
        harEntry._serverPort = event.serverPort;
      }
      if (!this._options.omitTiming) {
        harEntry.timings = event.timings;
        this._computeHarEntryTotalTime(harEntry);
      }
      if (!this._options.omitSecurityDetails) harEntry._securityDetails = event.securityDetails;
      for (let i = 0; i < event.rawHeaders.length; i += 2) {
        harEntry.response.headers.push({
          name: event.rawHeaders[i],
          value: event.rawHeaders[i + 1]
        });
      }
      harEntry.response.cookies = this._options.omitCookies ? [] : event.cookies.map((c2) => {
        return {
          ...c2,
          expires: c2.expires === -1 ? void 0 : safeDateToISOString(c2.expires)
        };
      });
      const content = harEntry.response.content;
      const contentType = event.headers["content-type"];
      if (contentType) content.mimeType = contentType;
      this._storeResponseContent(event.body, content, "other");
      if (!this._options.omitSizes) harEntry.response.bodySize = (_event$body$length = (_event$body = event.body) === null || _event$body === void 0 ? void 0 : _event$body.length) !== null && _event$body$length !== void 0 ? _event$body$length : 0;
      if (this._started) this._delegate.onEntryFinished(harEntry);
    }
    _onRequest(request) {
      var _request$frame, _request$frame2;
      if (!this._shouldIncludeEntryWithUrl(request.url())) return;
      const page2 = (_request$frame = request.frame()) === null || _request$frame === void 0 ? void 0 : _request$frame._page;
      if (this._page && page2 !== this._page) return;
      const url = network2.parseURL(request.url());
      if (!url) return;
      const pageEntry = this._createPageEntryIfNeeded(page2);
      const harEntry = createHarEntry(request.method(), url, (_request$frame2 = request.frame()) === null || _request$frame2 === void 0 ? void 0 : _request$frame2.guid, this._options);
      if (pageEntry) harEntry.pageref = pageEntry.id;
      this._recordRequestHeadersAndCookies(harEntry, request.headers());
      harEntry.request.postData = this._postDataForRequest(request, this._options.content);
      if (!this._options.omitSizes) harEntry.request.bodySize = request.bodySize();
      if (request.redirectedFrom()) {
        const fromEntry = this._entryForRequest(request.redirectedFrom());
        if (fromEntry) fromEntry.response.redirectURL = request.url();
      }
      request[this._entrySymbol] = harEntry;
      (0, _utils.assert)(this._started);
      this._delegate.onEntryStarted(harEntry);
    }
    _recordRequestHeadersAndCookies(harEntry, headers2) {
      if (!this._options.omitCookies) {
        harEntry.request.cookies = [];
        for (const header of headers2.filter((header2) => header2.name.toLowerCase() === "cookie")) harEntry.request.cookies.push(...header.value.split(";").map(parseCookie));
      }
      harEntry.request.headers = headers2;
    }
    _recordRequestOverrides(harEntry, request) {
      if (!request._hasOverrides() || !this._options.recordRequestOverrides) return;
      harEntry.request.method = request.method();
      harEntry.request.url = request.url();
      harEntry.request.postData = this._postDataForRequest(request, this._options.content);
      this._recordRequestHeadersAndCookies(harEntry, request.headers());
    }
    async _onRequestFinished(request, response) {
      var _request$frame3;
      if (!response) return;
      const harEntry = this._entryForRequest(request);
      if (!harEntry) return;
      const page2 = (_request$frame3 = request.frame()) === null || _request$frame3 === void 0 ? void 0 : _request$frame3._page;
      if (!this._options.omitServerIP) {
        this._addBarrier(page2 || request.serviceWorker(), response.serverAddr().then((server2) => {
          if (server2 !== null && server2 !== void 0 && server2.ipAddress) harEntry.serverIPAddress = server2.ipAddress;
          if (server2 !== null && server2 !== void 0 && server2.port) harEntry._serverPort = server2.port;
        }));
      }
      if (!this._options.omitSecurityDetails) {
        this._addBarrier(page2 || request.serviceWorker(), response.securityDetails().then((details) => {
          if (details) harEntry._securityDetails = details;
        }));
      }
      const httpVersion = response.httpVersion();
      harEntry.request.httpVersion = httpVersion;
      harEntry.response.httpVersion = httpVersion;
      const compressionCalculationBarrier = this._options.omitSizes ? void 0 : {
        _encodedBodySize: -1,
        _decodedBodySize: -1,
        barrier: new _manualPromise.ManualPromise(),
        _check: function() {
          if (this._encodedBodySize !== -1 && this._decodedBodySize !== -1) {
            harEntry.response.content.compression = Math.max(0, this._decodedBodySize - this._encodedBodySize);
            this.barrier.resolve();
          }
        },
        setEncodedBodySize: function(encodedBodySize) {
          this._encodedBodySize = encodedBodySize;
          this._check();
        },
        setDecodedBodySize: function(decodedBodySize) {
          this._decodedBodySize = decodedBodySize;
          this._check();
        }
      };
      if (compressionCalculationBarrier) this._addBarrier(page2 || request.serviceWorker(), compressionCalculationBarrier.barrier);
      const promise = response.body().then((buffer2) => {
        if (this._options.omitScripts && request.resourceType() === "script") {
          compressionCalculationBarrier === null || compressionCalculationBarrier === void 0 || compressionCalculationBarrier.setDecodedBodySize(0);
          return;
        }
        const content = harEntry.response.content;
        compressionCalculationBarrier === null || compressionCalculationBarrier === void 0 || compressionCalculationBarrier.setDecodedBodySize(buffer2.length);
        this._storeResponseContent(buffer2, content, request.resourceType());
      }).catch(() => {
        compressionCalculationBarrier === null || compressionCalculationBarrier === void 0 || compressionCalculationBarrier.setDecodedBodySize(0);
      }).then(() => {
        if (this._started) this._delegate.onEntryFinished(harEntry);
      });
      this._addBarrier(page2 || request.serviceWorker(), promise);
      const timing = response.timing();
      harEntry.timings.receive = response.request()._responseEndTiming !== -1 ? _helper.helper.millisToRoundishMillis(response.request()._responseEndTiming - timing.responseStart) : -1;
      this._computeHarEntryTotalTime(harEntry);
      if (!this._options.omitSizes) {
        this._addBarrier(page2 || request.serviceWorker(), response.sizes().then((sizes) => {
          harEntry.response.bodySize = sizes.responseBodySize;
          harEntry.response.headersSize = sizes.responseHeadersSize;
          harEntry.response._transferSize = sizes.transferSize;
          harEntry.request.headersSize = sizes.requestHeadersSize;
          compressionCalculationBarrier === null || compressionCalculationBarrier === void 0 || compressionCalculationBarrier.setEncodedBodySize(sizes.responseBodySize);
        }));
      }
    }
    async _onRequestFailed(request) {
      const harEntry = this._entryForRequest(request);
      if (!harEntry) return;
      if (request._failureText !== null) harEntry.response._failureText = request._failureText;
      this._recordRequestOverrides(harEntry, request);
      if (this._started) this._delegate.onEntryFinished(harEntry);
    }
    _onRequestAborted(request) {
      const harEntry = this._entryForRequest(request);
      if (harEntry) harEntry._wasAborted = true;
    }
    _onRequestFulfilled(request) {
      const harEntry = this._entryForRequest(request);
      if (harEntry) harEntry._wasFulfilled = true;
    }
    _onRequestContinued(request) {
      const harEntry = this._entryForRequest(request);
      if (harEntry) harEntry._wasContinued = true;
    }
    _storeResponseContent(buffer2, content, resourceType) {
      if (!buffer2) {
        content.size = 0;
        return;
      }
      if (!this._options.omitSizes) content.size = buffer2.length;
      if (this._options.content === "embed") {
        if ((0, _utils.isTextualMimeType)(content.mimeType) && resourceType !== "font") {
          content.text = buffer2.toString();
        } else {
          content.text = buffer2.toString("base64");
          content.encoding = "base64";
        }
      } else if (this._options.content === "attach") {
        const sha1 = (0, _utils.calculateSha1)(buffer2) + "." + (_utilsBundle.mime.getExtension(content.mimeType) || "dat");
        if (this._options.includeTraceInfo) content._sha1 = sha1;
        else content._file = sha1;
        if (this._started) this._delegate.onContentBlob(sha1, buffer2);
      }
    }
    _onResponse(response) {
      var _response$frame;
      const harEntry = this._entryForRequest(response.request());
      if (!harEntry) return;
      const page2 = (_response$frame = response.frame()) === null || _response$frame === void 0 ? void 0 : _response$frame._page;
      const pageEntry = this._createPageEntryIfNeeded(page2);
      const request = response.request();
      harEntry.response = {
        status: response.status(),
        statusText: response.statusText(),
        httpVersion: response.httpVersion(),
        // These are bad values that will be overwritten bellow.
        cookies: [],
        headers: [],
        content: {
          size: -1,
          mimeType: "x-unknown"
        },
        headersSize: -1,
        bodySize: -1,
        redirectURL: "",
        _transferSize: this._options.omitSizes ? void 0 : -1
      };
      if (!this._options.omitTiming) {
        const startDateTime = pageEntry ? pageEntry[startedDateSymbol].valueOf() : 0;
        const timing = response.timing();
        if (pageEntry && startDateTime > timing.startTime) pageEntry.startedDateTime = new Date(timing.startTime).toISOString();
        const dns = timing.domainLookupEnd !== -1 ? _helper.helper.millisToRoundishMillis(timing.domainLookupEnd - timing.domainLookupStart) : -1;
        const connect = timing.connectEnd !== -1 ? _helper.helper.millisToRoundishMillis(timing.connectEnd - timing.connectStart) : -1;
        const ssl = timing.connectEnd !== -1 ? _helper.helper.millisToRoundishMillis(timing.connectEnd - timing.secureConnectionStart) : -1;
        const wait = timing.responseStart !== -1 ? _helper.helper.millisToRoundishMillis(timing.responseStart - timing.requestStart) : -1;
        const receive = -1;
        harEntry.timings = {
          dns,
          connect,
          ssl,
          send: 0,
          wait,
          receive
        };
        this._computeHarEntryTotalTime(harEntry);
      }
      this._recordRequestOverrides(harEntry, request);
      this._addBarrier(page2 || request.serviceWorker(), request.rawRequestHeaders().then((headers2) => {
        this._recordRequestHeadersAndCookies(harEntry, headers2);
      }));
      this._recordResponseHeaders(harEntry, response.headers());
      this._addBarrier(page2 || request.serviceWorker(), response.rawResponseHeaders().then((headers2) => {
        this._recordResponseHeaders(harEntry, headers2);
      }));
    }
    _recordResponseHeaders(harEntry, headers2) {
      if (!this._options.omitCookies) {
        harEntry.response.cookies = headers2.filter((header) => header.name.toLowerCase() === "set-cookie").map((header) => parseCookie(header.value));
      }
      harEntry.response.headers = headers2;
      const contentType = headers2.find((header) => header.name.toLowerCase() === "content-type");
      if (contentType) harEntry.response.content.mimeType = contentType.value;
    }
    _computeHarEntryTotalTime(harEntry) {
      harEntry.time = [harEntry.timings.dns, harEntry.timings.connect, harEntry.timings.ssl, harEntry.timings.wait, harEntry.timings.receive].reduce((pre, cur) => (cur || -1) > 0 ? cur + pre : pre, 0);
    }
    async flush() {
      await Promise.all(this._barrierPromises);
    }
    stop() {
      this._started = false;
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      this._barrierPromises.clear();
      const context = this._context instanceof _browserContext.BrowserContext ? this._context : void 0;
      const log2 = {
        version: "1.2",
        creator: {
          name: "Playwright",
          version: (0, _utils.getPlaywrightVersion)()
        },
        browser: {
          name: (context === null || context === void 0 ? void 0 : context._browser.options.name) || "",
          version: (context === null || context === void 0 ? void 0 : context._browser.version()) || ""
        },
        pages: this._pageEntries.size ? Array.from(this._pageEntries.values()) : void 0,
        entries: []
      };
      if (!this._options.omitTiming) {
        for (const pageEntry of log2.pages || []) {
          const startDateTime = pageEntry[startedDateSymbol].valueOf();
          if (typeof pageEntry.pageTimings.onContentLoad === "number" && pageEntry.pageTimings.onContentLoad >= 0) pageEntry.pageTimings.onContentLoad -= startDateTime;
          else pageEntry.pageTimings.onContentLoad = -1;
          if (typeof pageEntry.pageTimings.onLoad === "number" && pageEntry.pageTimings.onLoad >= 0) pageEntry.pageTimings.onLoad -= startDateTime;
          else pageEntry.pageTimings.onLoad = -1;
        }
      }
      this._pageEntries.clear();
      return log2;
    }
    _postDataForRequest(request, content) {
      const postData = request.postDataBuffer();
      if (!postData) return;
      const contentType = request.headerValue("content-type");
      return this._postDataForBuffer(postData, contentType, content);
    }
    _postDataForBuffer(postData, contentType, content) {
      if (!postData) return;
      contentType !== null && contentType !== void 0 ? contentType : contentType = "application/octet-stream";
      const result = {
        mimeType: contentType,
        text: "",
        params: []
      };
      if (content === "embed" && contentType !== "application/octet-stream") result.text = postData.toString();
      if (content === "attach") {
        const sha1 = (0, _utils.calculateSha1)(postData) + "." + (_utilsBundle.mime.getExtension(contentType) || "dat");
        if (this._options.includeTraceInfo) result._sha1 = sha1;
        else result._file = sha1;
        this._delegate.onContentBlob(sha1, postData);
      }
      if (contentType === "application/x-www-form-urlencoded") {
        const parsed = new URLSearchParams(postData.toString());
        for (const [name, value] of parsed.entries()) result.params.push({
          name,
          value
        });
      }
      return result;
    }
  }
  harTracer.HarTracer = HarTracer;
  function createHarEntry(method, url, frameref, options) {
    const harEntry = {
      _frameref: options.includeTraceInfo ? frameref : void 0,
      _monotonicTime: options.includeTraceInfo ? (0, _utils.monotonicTime)() : void 0,
      startedDateTime: (/* @__PURE__ */ new Date()).toISOString(),
      time: -1,
      request: {
        method,
        url: url.toString(),
        httpVersion: FALLBACK_HTTP_VERSION,
        cookies: [],
        headers: [],
        queryString: [...url.searchParams].map((e2) => ({
          name: e2[0],
          value: e2[1]
        })),
        headersSize: -1,
        bodySize: -1
      },
      response: {
        status: -1,
        statusText: "",
        httpVersion: FALLBACK_HTTP_VERSION,
        cookies: [],
        headers: [],
        content: {
          size: -1,
          mimeType: "x-unknown"
        },
        headersSize: -1,
        bodySize: -1,
        redirectURL: "",
        _transferSize: options.omitSizes ? void 0 : -1
      },
      cache: {},
      timings: {
        send: -1,
        wait: -1,
        receive: -1
      }
    };
    return harEntry;
  }
  function parseCookie(c2) {
    const cookie = {
      name: "",
      value: ""
    };
    let first = true;
    for (const pair of c2.split(/; */)) {
      const indexOfEquals = pair.indexOf("=");
      const name = indexOfEquals !== -1 ? pair.substr(0, indexOfEquals).trim() : pair.trim();
      const value = indexOfEquals !== -1 ? pair.substr(indexOfEquals + 1, pair.length).trim() : "";
      if (first) {
        first = false;
        cookie.name = name;
        cookie.value = value;
        continue;
      }
      if (name === "Domain") cookie.domain = value;
      if (name === "Expires") cookie.expires = safeDateToISOString(value);
      if (name === "HttpOnly") cookie.httpOnly = true;
      if (name === "Max-Age") cookie.expires = safeDateToISOString(Date.now() + +value * 1e3);
      if (name === "Path") cookie.path = value;
      if (name === "SameSite") cookie.sameSite = value;
      if (name === "Secure") cookie.secure = true;
    }
    return cookie;
  }
  function safeDateToISOString(value) {
    try {
      return new Date(value).toISOString();
    } catch (e2) {
    }
  }
  const startedDateSymbol = Symbol("startedDate");
  return harTracer;
}
var hasRequiredHarRecorder;
function requireHarRecorder() {
  if (hasRequiredHarRecorder) return harRecorder;
  hasRequiredHarRecorder = 1;
  Object.defineProperty(harRecorder, "__esModule", {
    value: true
  });
  harRecorder.HarRecorder = void 0;
  var _fs = _interopRequireDefault(require$$0$2);
  var _path2 = _interopRequireDefault(require$$1$1);
  var _artifact = requireArtifact$1();
  var _harTracer = requireHarTracer();
  var _crypto = requireCrypto();
  var _manualPromise = requireManualPromise();
  var _zipBundle = requireZipBundle();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  class HarRecorder {
    constructor(context, page2, options) {
      this._artifact = void 0;
      this._isFlushed = false;
      this._tracer = void 0;
      this._entries = [];
      this._zipFile = null;
      this._writtenZipEntries = /* @__PURE__ */ new Set();
      this._artifact = new _artifact.Artifact(context, _path2.default.join(context._browser.options.artifactsDir, `${(0, _crypto.createGuid)()}.har`));
      const urlFilterRe = options.urlRegexSource !== void 0 && options.urlRegexFlags !== void 0 ? new RegExp(options.urlRegexSource, options.urlRegexFlags) : void 0;
      const expectsZip = options.path.endsWith(".zip");
      const content = options.content || (expectsZip ? "attach" : "embed");
      this._tracer = new _harTracer.HarTracer(context, page2, this, {
        content,
        slimMode: options.mode === "minimal",
        includeTraceInfo: false,
        recordRequestOverrides: true,
        waitForContentOnStop: true,
        urlFilter: urlFilterRe !== null && urlFilterRe !== void 0 ? urlFilterRe : options.urlGlob
      });
      this._zipFile = content === "attach" || expectsZip ? new _zipBundle.yazl.ZipFile() : null;
      this._tracer.start({
        omitScripts: false
      });
    }
    onEntryStarted(entry) {
      this._entries.push(entry);
    }
    onEntryFinished(entry) {
    }
    onContentBlob(sha1, buffer2) {
      if (!this._zipFile || this._writtenZipEntries.has(sha1)) return;
      this._writtenZipEntries.add(sha1);
      this._zipFile.addBuffer(buffer2, sha1);
    }
    async flush() {
      if (this._isFlushed) return;
      this._isFlushed = true;
      await this._tracer.flush();
      const log2 = this._tracer.stop();
      log2.entries = this._entries;
      const harFileContent = jsonStringify({
        log: log2
      });
      if (this._zipFile) {
        const result = new _manualPromise.ManualPromise();
        this._zipFile.on("error", (error) => result.reject(error));
        this._zipFile.addBuffer(Buffer.from(harFileContent, "utf-8"), "har.har");
        this._zipFile.end();
        this._zipFile.outputStream.pipe(_fs.default.createWriteStream(this._artifact.localPath())).on("close", () => {
          result.resolve();
        });
        await result;
      } else {
        await _fs.default.promises.writeFile(this._artifact.localPath(), harFileContent);
      }
    }
    async export() {
      await this.flush();
      this._artifact.reportFinished();
      return this._artifact;
    }
  }
  harRecorder.HarRecorder = HarRecorder;
  function jsonStringify(object) {
    const tokens = [];
    innerJsonStringify(object, tokens, "", false, void 0);
    return tokens.join("");
  }
  function innerJsonStringify(object, tokens, indent, flat, parentKey) {
    if (typeof object !== "object" || object === null) {
      tokens.push(JSON.stringify(object));
      return;
    }
    const isArray = Array.isArray(object);
    if (!isArray && object.constructor.name !== "Object") {
      tokens.push(JSON.stringify(object));
      return;
    }
    const entries = isArray ? object : Object.entries(object).filter((e2) => e2[1] !== void 0);
    if (!entries.length) {
      tokens.push(isArray ? `[]` : `{}`);
      return;
    }
    const childIndent = `${indent}  `;
    let brackets;
    if (isArray) brackets = flat ? {
      open: "[",
      close: "]"
    } : {
      open: `[
${childIndent}`,
      close: `
${indent}]`
    };
    else brackets = flat ? {
      open: "{ ",
      close: " }"
    } : {
      open: `{
${childIndent}`,
      close: `
${indent}}`
    };
    tokens.push(brackets.open);
    for (let i = 0; i < entries.length; ++i) {
      const entry = entries[i];
      if (i) tokens.push(flat ? `, ` : `,
${childIndent}`);
      if (!isArray) tokens.push(`${JSON.stringify(entry[0])}: `);
      const key = isArray ? void 0 : entry[0];
      const flatten = flat || key === "timings" || parentKey === "headers";
      innerJsonStringify(isArray ? entry : entry[1], tokens, childIndent, flatten, key);
    }
    tokens.push(brackets.close);
  }
  return harRecorder;
}
var recorder = {};
var consoleApiSource = {};
var hasRequiredConsoleApiSource;
function requireConsoleApiSource() {
  if (hasRequiredConsoleApiSource) return consoleApiSource;
  hasRequiredConsoleApiSource = 1;
  Object.defineProperty(consoleApiSource, "__esModule", {
    value: true
  });
  consoleApiSource.source = void 0;
  consoleApiSource.source = '\nvar __commonJS = obj => {\n  let required = false;\n  let result;\n  return function __require() {\n    if (!required) {\n      required = true;\n      let fn;\n      for (const name in obj) { fn = obj[name]; break; }\n      const module = { exports: {} };\n      fn(module.exports, module);\n      result = module.exports;\n    }\n    return result;\n  }\n};\nvar __export = (target, all) => {for (var name in all) target[name] = all[name];};\nvar __toESM = mod => ({ ...mod, \'default\': mod });\nvar __toCommonJS = mod => ({ ...mod, __esModule: true });\n\n\n// packages/playwright-core/src/server/injected/consoleApi.ts\nvar consoleApi_exports = {};\n__export(consoleApi_exports, {\n  default: () => consoleApi_default\n});\nmodule.exports = __toCommonJS(consoleApi_exports);\n\n// packages/playwright-core/src/utils/isomorphic/cssTokenizer.ts\nvar between = function(num, first, last) {\n  return num >= first && num <= last;\n};\nfunction digit(code) {\n  return between(code, 48, 57);\n}\nfunction hexdigit(code) {\n  return digit(code) || between(code, 65, 70) || between(code, 97, 102);\n}\nfunction uppercaseletter(code) {\n  return between(code, 65, 90);\n}\nfunction lowercaseletter(code) {\n  return between(code, 97, 122);\n}\nfunction letter(code) {\n  return uppercaseletter(code) || lowercaseletter(code);\n}\nfunction nonascii(code) {\n  return code >= 128;\n}\nfunction namestartchar(code) {\n  return letter(code) || nonascii(code) || code === 95;\n}\nfunction namechar(code) {\n  return namestartchar(code) || digit(code) || code === 45;\n}\nfunction nonprintable(code) {\n  return between(code, 0, 8) || code === 11 || between(code, 14, 31) || code === 127;\n}\nfunction newline(code) {\n  return code === 10;\n}\nfunction whitespace(code) {\n  return newline(code) || code === 9 || code === 32;\n}\nvar maximumallowedcodepoint = 1114111;\nvar InvalidCharacterError = class extends Error {\n  constructor(message) {\n    super(message);\n    this.name = "InvalidCharacterError";\n  }\n};\nfunction preprocess(str) {\n  const codepoints = [];\n  for (let i = 0; i < str.length; i++) {\n    let code = str.charCodeAt(i);\n    if (code === 13 && str.charCodeAt(i + 1) === 10) {\n      code = 10;\n      i++;\n    }\n    if (code === 13 || code === 12)\n      code = 10;\n    if (code === 0)\n      code = 65533;\n    if (between(code, 55296, 56319) && between(str.charCodeAt(i + 1), 56320, 57343)) {\n      const lead = code - 55296;\n      const trail = str.charCodeAt(i + 1) - 56320;\n      code = Math.pow(2, 16) + lead * Math.pow(2, 10) + trail;\n      i++;\n    }\n    codepoints.push(code);\n  }\n  return codepoints;\n}\nfunction stringFromCode(code) {\n  if (code <= 65535)\n    return String.fromCharCode(code);\n  code -= Math.pow(2, 16);\n  const lead = Math.floor(code / Math.pow(2, 10)) + 55296;\n  const trail = code % Math.pow(2, 10) + 56320;\n  return String.fromCharCode(lead) + String.fromCharCode(trail);\n}\nfunction tokenize(str1) {\n  const str = preprocess(str1);\n  let i = -1;\n  const tokens = [];\n  let code;\n  let line = 0;\n  let column = 0;\n  let lastLineLength = 0;\n  const incrLineno = function() {\n    line += 1;\n    lastLineLength = column;\n    column = 0;\n  };\n  const locStart = { line, column };\n  const codepoint = function(i2) {\n    if (i2 >= str.length)\n      return -1;\n    return str[i2];\n  };\n  const next = function(num) {\n    if (num === void 0)\n      num = 1;\n    if (num > 3)\n      throw "Spec Error: no more than three codepoints of lookahead.";\n    return codepoint(i + num);\n  };\n  const consume = function(num) {\n    if (num === void 0)\n      num = 1;\n    i += num;\n    code = codepoint(i);\n    if (newline(code))\n      incrLineno();\n    else\n      column += num;\n    return true;\n  };\n  const reconsume = function() {\n    i -= 1;\n    if (newline(code)) {\n      line -= 1;\n      column = lastLineLength;\n    } else {\n      column -= 1;\n    }\n    locStart.line = line;\n    locStart.column = column;\n    return true;\n  };\n  const eof = function(codepoint2) {\n    if (codepoint2 === void 0)\n      codepoint2 = code;\n    return codepoint2 === -1;\n  };\n  const donothing = function() {\n  };\n  const parseerror = function() {\n  };\n  const consumeAToken = function() {\n    consumeComments();\n    consume();\n    if (whitespace(code)) {\n      while (whitespace(next()))\n        consume();\n      return new WhitespaceToken();\n    } else if (code === 34) {\n      return consumeAStringToken();\n    } else if (code === 35) {\n      if (namechar(next()) || areAValidEscape(next(1), next(2))) {\n        const token = new HashToken("");\n        if (wouldStartAnIdentifier(next(1), next(2), next(3)))\n          token.type = "id";\n        token.value = consumeAName();\n        return token;\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 36) {\n      if (next() === 61) {\n        consume();\n        return new SuffixMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 39) {\n      return consumeAStringToken();\n    } else if (code === 40) {\n      return new OpenParenToken();\n    } else if (code === 41) {\n      return new CloseParenToken();\n    } else if (code === 42) {\n      if (next() === 61) {\n        consume();\n        return new SubstringMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 43) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 44) {\n      return new CommaToken();\n    } else if (code === 45) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else if (next(1) === 45 && next(2) === 62) {\n        consume(2);\n        return new CDCToken();\n      } else if (startsWithAnIdentifier()) {\n        reconsume();\n        return consumeAnIdentlikeToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 46) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 58) {\n      return new ColonToken();\n    } else if (code === 59) {\n      return new SemicolonToken();\n    } else if (code === 60) {\n      if (next(1) === 33 && next(2) === 45 && next(3) === 45) {\n        consume(3);\n        return new CDOToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 64) {\n      if (wouldStartAnIdentifier(next(1), next(2), next(3)))\n        return new AtKeywordToken(consumeAName());\n      else\n        return new DelimToken(code);\n    } else if (code === 91) {\n      return new OpenSquareToken();\n    } else if (code === 92) {\n      if (startsWithAValidEscape()) {\n        reconsume();\n        return consumeAnIdentlikeToken();\n      } else {\n        parseerror();\n        return new DelimToken(code);\n      }\n    } else if (code === 93) {\n      return new CloseSquareToken();\n    } else if (code === 94) {\n      if (next() === 61) {\n        consume();\n        return new PrefixMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 123) {\n      return new OpenCurlyToken();\n    } else if (code === 124) {\n      if (next() === 61) {\n        consume();\n        return new DashMatchToken();\n      } else if (next() === 124) {\n        consume();\n        return new ColumnToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 125) {\n      return new CloseCurlyToken();\n    } else if (code === 126) {\n      if (next() === 61) {\n        consume();\n        return new IncludeMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (digit(code)) {\n      reconsume();\n      return consumeANumericToken();\n    } else if (namestartchar(code)) {\n      reconsume();\n      return consumeAnIdentlikeToken();\n    } else if (eof()) {\n      return new EOFToken();\n    } else {\n      return new DelimToken(code);\n    }\n  };\n  const consumeComments = function() {\n    while (next(1) === 47 && next(2) === 42) {\n      consume(2);\n      while (true) {\n        consume();\n        if (code === 42 && next() === 47) {\n          consume();\n          break;\n        } else if (eof()) {\n          parseerror();\n          return;\n        }\n      }\n    }\n  };\n  const consumeANumericToken = function() {\n    const num = consumeANumber();\n    if (wouldStartAnIdentifier(next(1), next(2), next(3))) {\n      const token = new DimensionToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      token.type = num.type;\n      token.unit = consumeAName();\n      return token;\n    } else if (next() === 37) {\n      consume();\n      const token = new PercentageToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      return token;\n    } else {\n      const token = new NumberToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      token.type = num.type;\n      return token;\n    }\n  };\n  const consumeAnIdentlikeToken = function() {\n    const str2 = consumeAName();\n    if (str2.toLowerCase() === "url" && next() === 40) {\n      consume();\n      while (whitespace(next(1)) && whitespace(next(2)))\n        consume();\n      if (next() === 34 || next() === 39)\n        return new FunctionToken(str2);\n      else if (whitespace(next()) && (next(2) === 34 || next(2) === 39))\n        return new FunctionToken(str2);\n      else\n        return consumeAURLToken();\n    } else if (next() === 40) {\n      consume();\n      return new FunctionToken(str2);\n    } else {\n      return new IdentToken(str2);\n    }\n  };\n  const consumeAStringToken = function(endingCodePoint) {\n    if (endingCodePoint === void 0)\n      endingCodePoint = code;\n    let string = "";\n    while (consume()) {\n      if (code === endingCodePoint || eof()) {\n        return new StringToken(string);\n      } else if (newline(code)) {\n        parseerror();\n        reconsume();\n        return new BadStringToken();\n      } else if (code === 92) {\n        if (eof(next()))\n          donothing();\n        else if (newline(next()))\n          consume();\n        else\n          string += stringFromCode(consumeEscape());\n      } else {\n        string += stringFromCode(code);\n      }\n    }\n    throw new Error("Internal error");\n  };\n  const consumeAURLToken = function() {\n    const token = new URLToken("");\n    while (whitespace(next()))\n      consume();\n    if (eof(next()))\n      return token;\n    while (consume()) {\n      if (code === 41 || eof()) {\n        return token;\n      } else if (whitespace(code)) {\n        while (whitespace(next()))\n          consume();\n        if (next() === 41 || eof(next())) {\n          consume();\n          return token;\n        } else {\n          consumeTheRemnantsOfABadURL();\n          return new BadURLToken();\n        }\n      } else if (code === 34 || code === 39 || code === 40 || nonprintable(code)) {\n        parseerror();\n        consumeTheRemnantsOfABadURL();\n        return new BadURLToken();\n      } else if (code === 92) {\n        if (startsWithAValidEscape()) {\n          token.value += stringFromCode(consumeEscape());\n        } else {\n          parseerror();\n          consumeTheRemnantsOfABadURL();\n          return new BadURLToken();\n        }\n      } else {\n        token.value += stringFromCode(code);\n      }\n    }\n    throw new Error("Internal error");\n  };\n  const consumeEscape = function() {\n    consume();\n    if (hexdigit(code)) {\n      const digits = [code];\n      for (let total = 0; total < 5; total++) {\n        if (hexdigit(next())) {\n          consume();\n          digits.push(code);\n        } else {\n          break;\n        }\n      }\n      if (whitespace(next()))\n        consume();\n      let value = parseInt(digits.map(function(x) {\n        return String.fromCharCode(x);\n      }).join(""), 16);\n      if (value > maximumallowedcodepoint)\n        value = 65533;\n      return value;\n    } else if (eof()) {\n      return 65533;\n    } else {\n      return code;\n    }\n  };\n  const areAValidEscape = function(c1, c2) {\n    if (c1 !== 92)\n      return false;\n    if (newline(c2))\n      return false;\n    return true;\n  };\n  const startsWithAValidEscape = function() {\n    return areAValidEscape(code, next());\n  };\n  const wouldStartAnIdentifier = function(c1, c2, c3) {\n    if (c1 === 45)\n      return namestartchar(c2) || c2 === 45 || areAValidEscape(c2, c3);\n    else if (namestartchar(c1))\n      return true;\n    else if (c1 === 92)\n      return areAValidEscape(c1, c2);\n    else\n      return false;\n  };\n  const startsWithAnIdentifier = function() {\n    return wouldStartAnIdentifier(code, next(1), next(2));\n  };\n  const wouldStartANumber = function(c1, c2, c3) {\n    if (c1 === 43 || c1 === 45) {\n      if (digit(c2))\n        return true;\n      if (c2 === 46 && digit(c3))\n        return true;\n      return false;\n    } else if (c1 === 46) {\n      if (digit(c2))\n        return true;\n      return false;\n    } else if (digit(c1)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  const startsWithANumber = function() {\n    return wouldStartANumber(code, next(1), next(2));\n  };\n  const consumeAName = function() {\n    let result = "";\n    while (consume()) {\n      if (namechar(code)) {\n        result += stringFromCode(code);\n      } else if (startsWithAValidEscape()) {\n        result += stringFromCode(consumeEscape());\n      } else {\n        reconsume();\n        return result;\n      }\n    }\n    throw new Error("Internal parse error");\n  };\n  const consumeANumber = function() {\n    let repr = "";\n    let type = "integer";\n    if (next() === 43 || next() === 45) {\n      consume();\n      repr += stringFromCode(code);\n    }\n    while (digit(next())) {\n      consume();\n      repr += stringFromCode(code);\n    }\n    if (next(1) === 46 && digit(next(2))) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = "number";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    }\n    const c1 = next(1), c2 = next(2), c3 = next(3);\n    if ((c1 === 69 || c1 === 101) && digit(c2)) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = "number";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    } else if ((c1 === 69 || c1 === 101) && (c2 === 43 || c2 === 45) && digit(c3)) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = "number";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    }\n    const value = convertAStringToANumber(repr);\n    return { type, value, repr };\n  };\n  const convertAStringToANumber = function(string) {\n    return +string;\n  };\n  const consumeTheRemnantsOfABadURL = function() {\n    while (consume()) {\n      if (code === 41 || eof()) {\n        return;\n      } else if (startsWithAValidEscape()) {\n        consumeEscape();\n        donothing();\n      } else {\n        donothing();\n      }\n    }\n  };\n  let iterationCount = 0;\n  while (!eof(next())) {\n    tokens.push(consumeAToken());\n    iterationCount++;\n    if (iterationCount > str.length * 2)\n      throw new Error("I\'m infinite-looping!");\n  }\n  return tokens;\n}\nvar CSSParserToken = class {\n  constructor() {\n    this.tokenType = "";\n  }\n  toJSON() {\n    return { token: this.tokenType };\n  }\n  toString() {\n    return this.tokenType;\n  }\n  toSource() {\n    return "" + this;\n  }\n};\nvar BadStringToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "BADSTRING";\n  }\n};\nvar BadURLToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "BADURL";\n  }\n};\nvar WhitespaceToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "WHITESPACE";\n  }\n  toString() {\n    return "WS";\n  }\n  toSource() {\n    return " ";\n  }\n};\nvar CDOToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "CDO";\n  }\n  toSource() {\n    return "<!--";\n  }\n};\nvar CDCToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "CDC";\n  }\n  toSource() {\n    return "-->";\n  }\n};\nvar ColonToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = ":";\n  }\n};\nvar SemicolonToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = ";";\n  }\n};\nvar CommaToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = ",";\n  }\n};\nvar GroupingToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.value = "";\n    this.mirror = "";\n  }\n};\nvar OpenCurlyToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "{";\n    this.value = "{";\n    this.mirror = "}";\n  }\n};\nvar CloseCurlyToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "}";\n    this.value = "}";\n    this.mirror = "{";\n  }\n};\nvar OpenSquareToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "[";\n    this.value = "[";\n    this.mirror = "]";\n  }\n};\nvar CloseSquareToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "]";\n    this.value = "]";\n    this.mirror = "[";\n  }\n};\nvar OpenParenToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "(";\n    this.value = "(";\n    this.mirror = ")";\n  }\n};\nvar CloseParenToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = ")";\n    this.value = ")";\n    this.mirror = "(";\n  }\n};\nvar IncludeMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "~=";\n  }\n};\nvar DashMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "|=";\n  }\n};\nvar PrefixMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "^=";\n  }\n};\nvar SuffixMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "$=";\n  }\n};\nvar SubstringMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "*=";\n  }\n};\nvar ColumnToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "||";\n  }\n};\nvar EOFToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "EOF";\n  }\n  toSource() {\n    return "";\n  }\n};\nvar DelimToken = class extends CSSParserToken {\n  constructor(code) {\n    super();\n    this.tokenType = "DELIM";\n    this.value = "";\n    this.value = stringFromCode(code);\n  }\n  toString() {\n    return "DELIM(" + this.value + ")";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    return json;\n  }\n  toSource() {\n    if (this.value === "\\\\")\n      return "\\\\\\n";\n    else\n      return this.value;\n  }\n};\nvar StringValuedToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.value = "";\n  }\n  ASCIIMatch(str) {\n    return this.value.toLowerCase() === str.toLowerCase();\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    return json;\n  }\n};\nvar IdentToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "IDENT";\n    this.value = val;\n  }\n  toString() {\n    return "IDENT(" + this.value + ")";\n  }\n  toSource() {\n    return escapeIdent(this.value);\n  }\n};\nvar FunctionToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "FUNCTION";\n    this.value = val;\n    this.mirror = ")";\n  }\n  toString() {\n    return "FUNCTION(" + this.value + ")";\n  }\n  toSource() {\n    return escapeIdent(this.value) + "(";\n  }\n};\nvar AtKeywordToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "AT-KEYWORD";\n    this.value = val;\n  }\n  toString() {\n    return "AT(" + this.value + ")";\n  }\n  toSource() {\n    return "@" + escapeIdent(this.value);\n  }\n};\nvar HashToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "HASH";\n    this.value = val;\n    this.type = "unrestricted";\n  }\n  toString() {\n    return "HASH(" + this.value + ")";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.type = this.type;\n    return json;\n  }\n  toSource() {\n    if (this.type === "id")\n      return "#" + escapeIdent(this.value);\n    else\n      return "#" + escapeHash(this.value);\n  }\n};\nvar StringToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "STRING";\n    this.value = val;\n  }\n  toString() {\n    return \'"\' + escapeString(this.value) + \'"\';\n  }\n};\nvar URLToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "URL";\n    this.value = val;\n  }\n  toString() {\n    return "URL(" + this.value + ")";\n  }\n  toSource() {\n    return \'url("\' + escapeString(this.value) + \'")\';\n  }\n};\nvar NumberToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = "NUMBER";\n    this.type = "integer";\n    this.repr = "";\n  }\n  toString() {\n    if (this.type === "integer")\n      return "INT(" + this.value + ")";\n    return "NUMBER(" + this.value + ")";\n  }\n  toJSON() {\n    const json = super.toJSON();\n    json.value = this.value;\n    json.type = this.type;\n    json.repr = this.repr;\n    return json;\n  }\n  toSource() {\n    return this.repr;\n  }\n};\nvar PercentageToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = "PERCENTAGE";\n    this.repr = "";\n  }\n  toString() {\n    return "PERCENTAGE(" + this.value + ")";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.repr = this.repr;\n    return json;\n  }\n  toSource() {\n    return this.repr + "%";\n  }\n};\nvar DimensionToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = "DIMENSION";\n    this.type = "integer";\n    this.repr = "";\n    this.unit = "";\n  }\n  toString() {\n    return "DIM(" + this.value + "," + this.unit + ")";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.type = this.type;\n    json.repr = this.repr;\n    json.unit = this.unit;\n    return json;\n  }\n  toSource() {\n    const source = this.repr;\n    let unit = escapeIdent(this.unit);\n    if (unit[0].toLowerCase() === "e" && (unit[1] === "-" || between(unit.charCodeAt(1), 48, 57))) {\n      unit = "\\\\65 " + unit.slice(1, unit.length);\n    }\n    return source + unit;\n  }\n};\nfunction escapeIdent(string) {\n  string = "" + string;\n  let result = "";\n  const firstcode = string.charCodeAt(0);\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");\n    if (between(code, 1, 31) || code === 127 || i === 0 && between(code, 48, 57) || i === 1 && between(code, 48, 57) && firstcode === 45)\n      result += "\\\\" + code.toString(16) + " ";\n    else if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))\n      result += string[i];\n    else\n      result += "\\\\" + string[i];\n  }\n  return result;\n}\nfunction escapeHash(string) {\n  string = "" + string;\n  let result = "";\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");\n    if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))\n      result += string[i];\n    else\n      result += "\\\\" + code.toString(16) + " ";\n  }\n  return result;\n}\nfunction escapeString(string) {\n  string = "" + string;\n  let result = "";\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");\n    if (between(code, 1, 31) || code === 127)\n      result += "\\\\" + code.toString(16) + " ";\n    else if (code === 34 || code === 92)\n      result += "\\\\" + string[i];\n    else\n      result += string[i];\n  }\n  return result;\n}\n\n// packages/playwright-core/src/utils/isomorphic/cssParser.ts\nvar InvalidSelectorError = class extends Error {\n};\nfunction parseCSS(selector, customNames) {\n  let tokens;\n  try {\n    tokens = tokenize(selector);\n    if (!(tokens[tokens.length - 1] instanceof EOFToken))\n      tokens.push(new EOFToken());\n  } catch (e) {\n    const newMessage = e.message + ` while parsing css selector "${selector}". Did you mean to CSS.escape it?`;\n    const index = (e.stack || "").indexOf(e.message);\n    if (index !== -1)\n      e.stack = e.stack.substring(0, index) + newMessage + e.stack.substring(index + e.message.length);\n    e.message = newMessage;\n    throw e;\n  }\n  const unsupportedToken = tokens.find((token) => {\n    return token instanceof AtKeywordToken || token instanceof BadStringToken || token instanceof BadURLToken || token instanceof ColumnToken || token instanceof CDOToken || token instanceof CDCToken || token instanceof SemicolonToken || // TODO: Consider using these for something, e.g. to escape complex strings.\n    // For example :xpath{ (//div/bar[@attr="foo"])[2]/baz }\n    // Or this way :xpath( {complex-xpath-goes-here("hello")} )\n    token instanceof OpenCurlyToken || token instanceof CloseCurlyToken || // TODO: Consider treating these as strings?\n    token instanceof URLToken || token instanceof PercentageToken;\n  });\n  if (unsupportedToken)\n    throw new InvalidSelectorError(`Unsupported token "${unsupportedToken.toSource()}" while parsing css selector "${selector}". Did you mean to CSS.escape it?`);\n  let pos = 0;\n  const names = /* @__PURE__ */ new Set();\n  function unexpected() {\n    return new InvalidSelectorError(`Unexpected token "${tokens[pos].toSource()}" while parsing css selector "${selector}". Did you mean to CSS.escape it?`);\n  }\n  function skipWhitespace() {\n    while (tokens[pos] instanceof WhitespaceToken)\n      pos++;\n  }\n  function isIdent(p = pos) {\n    return tokens[p] instanceof IdentToken;\n  }\n  function isString(p = pos) {\n    return tokens[p] instanceof StringToken;\n  }\n  function isNumber(p = pos) {\n    return tokens[p] instanceof NumberToken;\n  }\n  function isComma(p = pos) {\n    return tokens[p] instanceof CommaToken;\n  }\n  function isOpenParen(p = pos) {\n    return tokens[p] instanceof OpenParenToken;\n  }\n  function isCloseParen(p = pos) {\n    return tokens[p] instanceof CloseParenToken;\n  }\n  function isFunction(p = pos) {\n    return tokens[p] instanceof FunctionToken;\n  }\n  function isStar(p = pos) {\n    return tokens[p] instanceof DelimToken && tokens[p].value === "*";\n  }\n  function isEOF(p = pos) {\n    return tokens[p] instanceof EOFToken;\n  }\n  function isClauseCombinator(p = pos) {\n    return tokens[p] instanceof DelimToken && [">", "+", "~"].includes(tokens[p].value);\n  }\n  function isSelectorClauseEnd(p = pos) {\n    return isComma(p) || isCloseParen(p) || isEOF(p) || isClauseCombinator(p) || tokens[p] instanceof WhitespaceToken;\n  }\n  function consumeFunctionArguments() {\n    const result2 = [consumeArgument()];\n    while (true) {\n      skipWhitespace();\n      if (!isComma())\n        break;\n      pos++;\n      result2.push(consumeArgument());\n    }\n    return result2;\n  }\n  function consumeArgument() {\n    skipWhitespace();\n    if (isNumber())\n      return tokens[pos++].value;\n    if (isString())\n      return tokens[pos++].value;\n    return consumeComplexSelector();\n  }\n  function consumeComplexSelector() {\n    const result2 = { simples: [] };\n    skipWhitespace();\n    if (isClauseCombinator()) {\n      result2.simples.push({ selector: { functions: [{ name: "scope", args: [] }] }, combinator: "" });\n    } else {\n      result2.simples.push({ selector: consumeSimpleSelector(), combinator: "" });\n    }\n    while (true) {\n      skipWhitespace();\n      if (isClauseCombinator()) {\n        result2.simples[result2.simples.length - 1].combinator = tokens[pos++].value;\n        skipWhitespace();\n      } else if (isSelectorClauseEnd()) {\n        break;\n      }\n      result2.simples.push({ combinator: "", selector: consumeSimpleSelector() });\n    }\n    return result2;\n  }\n  function consumeSimpleSelector() {\n    let rawCSSString = "";\n    const functions = [];\n    while (!isSelectorClauseEnd()) {\n      if (isIdent() || isStar()) {\n        rawCSSString += tokens[pos++].toSource();\n      } else if (tokens[pos] instanceof HashToken) {\n        rawCSSString += tokens[pos++].toSource();\n      } else if (tokens[pos] instanceof DelimToken && tokens[pos].value === ".") {\n        pos++;\n        if (isIdent())\n          rawCSSString += "." + tokens[pos++].toSource();\n        else\n          throw unexpected();\n      } else if (tokens[pos] instanceof ColonToken) {\n        pos++;\n        if (isIdent()) {\n          if (!customNames.has(tokens[pos].value.toLowerCase())) {\n            rawCSSString += ":" + tokens[pos++].toSource();\n          } else {\n            const name = tokens[pos++].value.toLowerCase();\n            functions.push({ name, args: [] });\n            names.add(name);\n          }\n        } else if (isFunction()) {\n          const name = tokens[pos++].value.toLowerCase();\n          if (!customNames.has(name)) {\n            rawCSSString += `:${name}(${consumeBuiltinFunctionArguments()})`;\n          } else {\n            functions.push({ name, args: consumeFunctionArguments() });\n            names.add(name);\n          }\n          skipWhitespace();\n          if (!isCloseParen())\n            throw unexpected();\n          pos++;\n        } else {\n          throw unexpected();\n        }\n      } else if (tokens[pos] instanceof OpenSquareToken) {\n        rawCSSString += "[";\n        pos++;\n        while (!(tokens[pos] instanceof CloseSquareToken) && !isEOF())\n          rawCSSString += tokens[pos++].toSource();\n        if (!(tokens[pos] instanceof CloseSquareToken))\n          throw unexpected();\n        rawCSSString += "]";\n        pos++;\n      } else {\n        throw unexpected();\n      }\n    }\n    if (!rawCSSString && !functions.length)\n      throw unexpected();\n    return { css: rawCSSString || void 0, functions };\n  }\n  function consumeBuiltinFunctionArguments() {\n    let s = "";\n    let balance = 1;\n    while (!isEOF()) {\n      if (isOpenParen() || isFunction())\n        balance++;\n      if (isCloseParen())\n        balance--;\n      if (!balance)\n        break;\n      s += tokens[pos++].toSource();\n    }\n    return s;\n  }\n  const result = consumeFunctionArguments();\n  if (!isEOF())\n    throw unexpected();\n  if (result.some((arg) => typeof arg !== "object" || !("simples" in arg)))\n    throw new InvalidSelectorError(`Error while parsing css selector "${selector}". Did you mean to CSS.escape it?`);\n  return { selector: result, names: Array.from(names) };\n}\n\n// packages/playwright-core/src/utils/isomorphic/selectorParser.ts\nvar kNestedSelectorNames = /* @__PURE__ */ new Set(["internal:has", "internal:has-not", "internal:and", "internal:or", "internal:chain", "left-of", "right-of", "above", "below", "near"]);\nvar kNestedSelectorNamesWithDistance = /* @__PURE__ */ new Set(["left-of", "right-of", "above", "below", "near"]);\nvar customCSSNames = /* @__PURE__ */ new Set(["not", "is", "where", "has", "scope", "light", "visible", "text", "text-matches", "text-is", "has-text", "above", "below", "right-of", "left-of", "near", "nth-match"]);\nfunction parseSelector(selector) {\n  const parsedStrings = parseSelectorString(selector);\n  const parts = [];\n  for (const part of parsedStrings.parts) {\n    if (part.name === "css" || part.name === "css:light") {\n      if (part.name === "css:light")\n        part.body = ":light(" + part.body + ")";\n      const parsedCSS = parseCSS(part.body, customCSSNames);\n      parts.push({\n        name: "css",\n        body: parsedCSS.selector,\n        source: part.body\n      });\n      continue;\n    }\n    if (kNestedSelectorNames.has(part.name)) {\n      let innerSelector;\n      let distance;\n      try {\n        const unescaped = JSON.parse("[" + part.body + "]");\n        if (!Array.isArray(unescaped) || unescaped.length < 1 || unescaped.length > 2 || typeof unescaped[0] !== "string")\n          throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n        innerSelector = unescaped[0];\n        if (unescaped.length === 2) {\n          if (typeof unescaped[1] !== "number" || !kNestedSelectorNamesWithDistance.has(part.name))\n            throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n          distance = unescaped[1];\n        }\n      } catch (e) {\n        throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n      }\n      const nested = { name: part.name, source: part.body, body: { parsed: parseSelector(innerSelector), distance } };\n      const lastFrame = [...nested.body.parsed.parts].reverse().find((part2) => part2.name === "internal:control" && part2.body === "enter-frame");\n      const lastFrameIndex = lastFrame ? nested.body.parsed.parts.indexOf(lastFrame) : -1;\n      if (lastFrameIndex !== -1 && selectorPartsEqual(nested.body.parsed.parts.slice(0, lastFrameIndex + 1), parts.slice(0, lastFrameIndex + 1)))\n        nested.body.parsed.parts.splice(0, lastFrameIndex + 1);\n      parts.push(nested);\n      continue;\n    }\n    parts.push({ ...part, source: part.body });\n  }\n  if (kNestedSelectorNames.has(parts[0].name))\n    throw new InvalidSelectorError(`"${parts[0].name}" selector cannot be first`);\n  return {\n    capture: parsedStrings.capture,\n    parts\n  };\n}\nfunction selectorPartsEqual(list1, list2) {\n  return stringifySelector({ parts: list1 }) === stringifySelector({ parts: list2 });\n}\nfunction stringifySelector(selector, forceEngineName) {\n  if (typeof selector === "string")\n    return selector;\n  return selector.parts.map((p, i) => {\n    let includeEngine = true;\n    if (!forceEngineName && i !== selector.capture) {\n      if (p.name === "css")\n        includeEngine = false;\n      else if (p.name === "xpath" && p.source.startsWith("//") || p.source.startsWith(".."))\n        includeEngine = false;\n    }\n    const prefix = includeEngine ? p.name + "=" : "";\n    return `${i === selector.capture ? "*" : ""}${prefix}${p.source}`;\n  }).join(" >> ");\n}\nfunction parseSelectorString(selector) {\n  let index = 0;\n  let quote;\n  let start = 0;\n  const result = { parts: [] };\n  const append = () => {\n    const part = selector.substring(start, index).trim();\n    const eqIndex = part.indexOf("=");\n    let name;\n    let body;\n    if (eqIndex !== -1 && part.substring(0, eqIndex).trim().match(/^[a-zA-Z_0-9-+:*]+$/)) {\n      name = part.substring(0, eqIndex).trim();\n      body = part.substring(eqIndex + 1);\n    } else if (part.length > 1 && part[0] === \'"\' && part[part.length - 1] === \'"\') {\n      name = "text";\n      body = part;\n    } else if (part.length > 1 && part[0] === "\'" && part[part.length - 1] === "\'") {\n      name = "text";\n      body = part;\n    } else if (/^\\(*\\/\\//.test(part) || part.startsWith("..")) {\n      name = "xpath";\n      body = part;\n    } else {\n      name = "css";\n      body = part;\n    }\n    let capture = false;\n    if (name[0] === "*") {\n      capture = true;\n      name = name.substring(1);\n    }\n    result.parts.push({ name, body });\n    if (capture) {\n      if (result.capture !== void 0)\n        throw new InvalidSelectorError(`Only one of the selectors can capture using * modifier`);\n      result.capture = result.parts.length - 1;\n    }\n  };\n  if (!selector.includes(">>")) {\n    index = selector.length;\n    append();\n    return result;\n  }\n  const shouldIgnoreTextSelectorQuote = () => {\n    const prefix = selector.substring(start, index);\n    const match = prefix.match(/^\\s*text\\s*=(.*)$/);\n    return !!match && !!match[1];\n  };\n  while (index < selector.length) {\n    const c = selector[index];\n    if (c === "\\\\" && index + 1 < selector.length) {\n      index += 2;\n    } else if (c === quote) {\n      quote = void 0;\n      index++;\n    } else if (!quote && (c === \'"\' || c === "\'" || c === "`") && !shouldIgnoreTextSelectorQuote()) {\n      quote = c;\n      index++;\n    } else if (!quote && c === ">" && selector[index + 1] === ">") {\n      append();\n      index += 2;\n      start = index;\n    } else {\n      index++;\n    }\n  }\n  append();\n  return result;\n}\nfunction parseAttributeSelector(selector, allowUnquotedStrings) {\n  let wp = 0;\n  let EOL = selector.length === 0;\n  const next = () => selector[wp] || "";\n  const eat1 = () => {\n    const result2 = next();\n    ++wp;\n    EOL = wp >= selector.length;\n    return result2;\n  };\n  const syntaxError = (stage) => {\n    if (EOL)\n      throw new InvalidSelectorError(`Unexpected end of selector while parsing selector \\`${selector}\\``);\n    throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - unexpected symbol "${next()}" at position ${wp}` + (stage ? " during " + stage : ""));\n  };\n  function skipSpaces() {\n    while (!EOL && /\\s/.test(next()))\n      eat1();\n  }\n  function isCSSNameChar(char) {\n    return char >= "\\x80" || char >= "0" && char <= "9" || char >= "A" && char <= "Z" || char >= "a" && char <= "z" || char >= "0" && char <= "9" || char === "_" || char === "-";\n  }\n  function readIdentifier() {\n    let result2 = "";\n    skipSpaces();\n    while (!EOL && isCSSNameChar(next()))\n      result2 += eat1();\n    return result2;\n  }\n  function readQuotedString(quote) {\n    let result2 = eat1();\n    if (result2 !== quote)\n      syntaxError("parsing quoted string");\n    while (!EOL && next() !== quote) {\n      if (next() === "\\\\")\n        eat1();\n      result2 += eat1();\n    }\n    if (next() !== quote)\n      syntaxError("parsing quoted string");\n    result2 += eat1();\n    return result2;\n  }\n  function readRegularExpression() {\n    if (eat1() !== "/")\n      syntaxError("parsing regular expression");\n    let source = "";\n    let inClass = false;\n    while (!EOL) {\n      if (next() === "\\\\") {\n        source += eat1();\n        if (EOL)\n          syntaxError("parsing regular expression");\n      } else if (inClass && next() === "]") {\n        inClass = false;\n      } else if (!inClass && next() === "[") {\n        inClass = true;\n      } else if (!inClass && next() === "/") {\n        break;\n      }\n      source += eat1();\n    }\n    if (eat1() !== "/")\n      syntaxError("parsing regular expression");\n    let flags = "";\n    while (!EOL && next().match(/[dgimsuy]/))\n      flags += eat1();\n    try {\n      return new RegExp(source, flags);\n    } catch (e) {\n      throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\`: ${e.message}`);\n    }\n  }\n  function readAttributeToken() {\n    let token = "";\n    skipSpaces();\n    if (next() === `\'` || next() === `"`)\n      token = readQuotedString(next()).slice(1, -1);\n    else\n      token = readIdentifier();\n    if (!token)\n      syntaxError("parsing property path");\n    return token;\n  }\n  function readOperator() {\n    skipSpaces();\n    let op = "";\n    if (!EOL)\n      op += eat1();\n    if (!EOL && op !== "=")\n      op += eat1();\n    if (!["=", "*=", "^=", "$=", "|=", "~="].includes(op))\n      syntaxError("parsing operator");\n    return op;\n  }\n  function readAttribute() {\n    eat1();\n    const jsonPath = [];\n    jsonPath.push(readAttributeToken());\n    skipSpaces();\n    while (next() === ".") {\n      eat1();\n      jsonPath.push(readAttributeToken());\n      skipSpaces();\n    }\n    if (next() === "]") {\n      eat1();\n      return { name: jsonPath.join("."), jsonPath, op: "<truthy>", value: null, caseSensitive: false };\n    }\n    const operator = readOperator();\n    let value = void 0;\n    let caseSensitive = true;\n    skipSpaces();\n    if (next() === "/") {\n      if (operator !== "=")\n        throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - cannot use ${operator} in attribute with regular expression`);\n      value = readRegularExpression();\n    } else if (next() === `\'` || next() === `"`) {\n      value = readQuotedString(next()).slice(1, -1);\n      skipSpaces();\n      if (next() === "i" || next() === "I") {\n        caseSensitive = false;\n        eat1();\n      } else if (next() === "s" || next() === "S") {\n        caseSensitive = true;\n        eat1();\n      }\n    } else {\n      value = "";\n      while (!EOL && (isCSSNameChar(next()) || next() === "+" || next() === "."))\n        value += eat1();\n      if (value === "true") {\n        value = true;\n      } else if (value === "false") {\n        value = false;\n      } else {\n        if (!allowUnquotedStrings) {\n          value = +value;\n          if (Number.isNaN(value))\n            syntaxError("parsing attribute value");\n        }\n      }\n    }\n    skipSpaces();\n    if (next() !== "]")\n      syntaxError("parsing attribute value");\n    eat1();\n    if (operator !== "=" && typeof value !== "string")\n      throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - cannot use ${operator} in attribute with non-string matching value - ${value}`);\n    return { name: jsonPath.join("."), jsonPath, op: operator, value, caseSensitive };\n  }\n  const result = {\n    name: "",\n    attributes: []\n  };\n  result.name = readIdentifier();\n  skipSpaces();\n  while (next() === "[") {\n    result.attributes.push(readAttribute());\n    skipSpaces();\n  }\n  if (!EOL)\n    syntaxError(void 0);\n  if (!result.name && !result.attributes.length)\n    throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - selector cannot be empty`);\n  return result;\n}\n\n// packages/playwright-core/src/utils/isomorphic/stringUtils.ts\nfunction escapeWithQuotes(text, char = "\'") {\n  const stringified = JSON.stringify(text);\n  const escapedText = stringified.substring(1, stringified.length - 1).replace(/\\\\"/g, \'"\');\n  if (char === "\'")\n    return char + escapedText.replace(/[\']/g, "\\\\\'") + char;\n  if (char === \'"\')\n    return char + escapedText.replace(/["]/g, \'\\\\"\') + char;\n  if (char === "`")\n    return char + escapedText.replace(/[`]/g, "`") + char;\n  throw new Error("Invalid escape char");\n}\nfunction toTitleCase(name) {\n  return name.charAt(0).toUpperCase() + name.substring(1);\n}\nfunction toSnakeCase(name) {\n  return name.replace(/([a-z0-9])([A-Z])/g, "$1_$2").replace(/([A-Z])([A-Z][a-z])/g, "$1_$2").toLowerCase();\n}\nfunction normalizeEscapedRegexQuotes(source) {\n  return source.replace(/(^|[^\\\\])(\\\\\\\\)*\\\\([\'"`])/g, "$1$2$3");\n}\nfunction escapeRegexForSelector(re) {\n  if (re.unicode || re.unicodeSets)\n    return String(re);\n  return String(re).replace(/(^|[^\\\\])(\\\\\\\\)*(["\'`])/g, "$1$2\\\\$3").replace(/>>/g, "\\\\>\\\\>");\n}\nfunction escapeForTextSelector(text, exact) {\n  if (typeof text !== "string")\n    return escapeRegexForSelector(text);\n  return `${JSON.stringify(text)}${exact ? "s" : "i"}`;\n}\nfunction escapeForAttributeSelector(value, exact) {\n  if (typeof value !== "string")\n    return escapeRegexForSelector(value);\n  return `"${value.replace(/\\\\/g, "\\\\\\\\").replace(/["]/g, \'\\\\"\')}"${exact ? "s" : "i"}`;\n}\n\n// packages/playwright-core/src/utils/isomorphic/locatorGenerators.ts\nfunction asLocator(lang, selector, isFrameLocator = false) {\n  return asLocators(lang, selector, isFrameLocator, 1)[0];\n}\nfunction asLocators(lang, selector, isFrameLocator = false, maxOutputSize = 20, preferredQuote) {\n  try {\n    return innerAsLocators(new generators[lang](preferredQuote), parseSelector(selector), isFrameLocator, maxOutputSize);\n  } catch (e) {\n    return [selector];\n  }\n}\nfunction innerAsLocators(factory, parsed, isFrameLocator = false, maxOutputSize = 20) {\n  const parts = [...parsed.parts];\n  const tokens = [];\n  let nextBase = isFrameLocator ? "frame-locator" : "page";\n  for (let index = 0; index < parts.length; index++) {\n    const part = parts[index];\n    const base = nextBase;\n    nextBase = "locator";\n    if (part.name === "nth") {\n      if (part.body === "0")\n        tokens.push([factory.generateLocator(base, "first", ""), factory.generateLocator(base, "nth", "0")]);\n      else if (part.body === "-1")\n        tokens.push([factory.generateLocator(base, "last", ""), factory.generateLocator(base, "nth", "-1")]);\n      else\n        tokens.push([factory.generateLocator(base, "nth", part.body)]);\n      continue;\n    }\n    if (part.name === "visible") {\n      tokens.push([factory.generateLocator(base, "visible", part.body), factory.generateLocator(base, "default", `visible=${part.body}`)]);\n      continue;\n    }\n    if (part.name === "internal:text") {\n      const { exact, text } = detectExact(part.body);\n      tokens.push([factory.generateLocator(base, "text", text, { exact })]);\n      continue;\n    }\n    if (part.name === "internal:has-text") {\n      const { exact, text } = detectExact(part.body);\n      if (!exact) {\n        tokens.push([factory.generateLocator(base, "has-text", text, { exact })]);\n        continue;\n      }\n    }\n    if (part.name === "internal:has-not-text") {\n      const { exact, text } = detectExact(part.body);\n      if (!exact) {\n        tokens.push([factory.generateLocator(base, "has-not-text", text, { exact })]);\n        continue;\n      }\n    }\n    if (part.name === "internal:has") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "has", inner)));\n      continue;\n    }\n    if (part.name === "internal:has-not") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "hasNot", inner)));\n      continue;\n    }\n    if (part.name === "internal:and") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "and", inner)));\n      continue;\n    }\n    if (part.name === "internal:or") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "or", inner)));\n      continue;\n    }\n    if (part.name === "internal:chain") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "chain", inner)));\n      continue;\n    }\n    if (part.name === "internal:label") {\n      const { exact, text } = detectExact(part.body);\n      tokens.push([factory.generateLocator(base, "label", text, { exact })]);\n      continue;\n    }\n    if (part.name === "internal:role") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const options = { attrs: [] };\n      for (const attr of attrSelector.attributes) {\n        if (attr.name === "name") {\n          options.exact = attr.caseSensitive;\n          options.name = attr.value;\n        } else {\n          if (attr.name === "level" && typeof attr.value === "string")\n            attr.value = +attr.value;\n          options.attrs.push({ name: attr.name === "include-hidden" ? "includeHidden" : attr.name, value: attr.value });\n        }\n      }\n      tokens.push([factory.generateLocator(base, "role", attrSelector.name, options)]);\n      continue;\n    }\n    if (part.name === "internal:testid") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const { value } = attrSelector.attributes[0];\n      tokens.push([factory.generateLocator(base, "test-id", value)]);\n      continue;\n    }\n    if (part.name === "internal:attr") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const { name, value, caseSensitive } = attrSelector.attributes[0];\n      const text = value;\n      const exact = !!caseSensitive;\n      if (name === "placeholder") {\n        tokens.push([factory.generateLocator(base, "placeholder", text, { exact })]);\n        continue;\n      }\n      if (name === "alt") {\n        tokens.push([factory.generateLocator(base, "alt", text, { exact })]);\n        continue;\n      }\n      if (name === "title") {\n        tokens.push([factory.generateLocator(base, "title", text, { exact })]);\n        continue;\n      }\n    }\n    if (part.name === "internal:control" && part.body === "enter-frame") {\n      const lastTokens = tokens[tokens.length - 1];\n      const lastPart = parts[index - 1];\n      const transformed = lastTokens.map((token) => factory.chainLocators([token, factory.generateLocator(base, "frame", "")]));\n      if (["xpath", "css"].includes(lastPart.name)) {\n        transformed.push(\n          factory.generateLocator(base, "frame-locator", stringifySelector({ parts: [lastPart] })),\n          factory.generateLocator(base, "frame-locator", stringifySelector({ parts: [lastPart] }, true))\n        );\n      }\n      lastTokens.splice(0, lastTokens.length, ...transformed);\n      nextBase = "frame-locator";\n      continue;\n    }\n    const nextPart = parts[index + 1];\n    const selectorPart = stringifySelector({ parts: [part] });\n    const locatorPart = factory.generateLocator(base, "default", selectorPart);\n    if (nextPart && ["internal:has-text", "internal:has-not-text"].includes(nextPart.name)) {\n      const { exact, text } = detectExact(nextPart.body);\n      if (!exact) {\n        const nextLocatorPart = factory.generateLocator("locator", nextPart.name === "internal:has-text" ? "has-text" : "has-not-text", text, { exact });\n        const options = {};\n        if (nextPart.name === "internal:has-text")\n          options.hasText = text;\n        else\n          options.hasNotText = text;\n        const combinedPart = factory.generateLocator(base, "default", selectorPart, options);\n        tokens.push([factory.chainLocators([locatorPart, nextLocatorPart]), combinedPart]);\n        index++;\n        continue;\n      }\n    }\n    let locatorPartWithEngine;\n    if (["xpath", "css"].includes(part.name)) {\n      const selectorPart2 = stringifySelector(\n        { parts: [part] },\n        /* forceEngineName */\n        true\n      );\n      locatorPartWithEngine = factory.generateLocator(base, "default", selectorPart2);\n    }\n    tokens.push([locatorPart, locatorPartWithEngine].filter(Boolean));\n  }\n  return combineTokens(factory, tokens, maxOutputSize);\n}\nfunction combineTokens(factory, tokens, maxOutputSize) {\n  const currentTokens = tokens.map(() => "");\n  const result = [];\n  const visit = (index) => {\n    if (index === tokens.length) {\n      result.push(factory.chainLocators(currentTokens));\n      return result.length < maxOutputSize;\n    }\n    for (const taken of tokens[index]) {\n      currentTokens[index] = taken;\n      if (!visit(index + 1))\n        return false;\n    }\n    return true;\n  };\n  visit(0);\n  return result;\n}\nfunction detectExact(text) {\n  let exact = false;\n  const match = text.match(/^\\/(.*)\\/([igm]*)$/);\n  if (match)\n    return { text: new RegExp(match[1], match[2]) };\n  if (text.endsWith(\'"\')) {\n    text = JSON.parse(text);\n    exact = true;\n  } else if (text.endsWith(\'"s\')) {\n    text = JSON.parse(text.substring(0, text.length - 1));\n    exact = true;\n  } else if (text.endsWith(\'"i\')) {\n    text = JSON.parse(text.substring(0, text.length - 1));\n    exact = false;\n  }\n  return { exact, text };\n}\nvar JavaScriptLocatorFactory = class {\n  constructor(preferredQuote) {\n    this.preferredQuote = preferredQuote;\n  }\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case "default":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, { hasText: ${this.toHasText(options.hasText)} })`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, { hasNotText: ${this.toHasText(options.hasNotText)} })`;\n        return `locator(${this.quote(body)})`;\n      case "frame-locator":\n        return `frameLocator(${this.quote(body)})`;\n      case "frame":\n        return `contentFrame()`;\n      case "nth":\n        return `nth(${body})`;\n      case "first":\n        return `first()`;\n      case "last":\n        return `last()`;\n      case "visible":\n        return `filter({ visible: ${body === "true" ? "true" : "false"} })`;\n      case "role":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`name: ${this.regexToSourceString(options.name)}`);\n        } else if (typeof options.name === "string") {\n          attrs.push(`name: ${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`exact: true`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`${name}: ${typeof value === "string" ? this.quote(value) : value}`);\n        const attrString = attrs.length ? `, { ${attrs.join(", ")} }` : "";\n        return `getByRole(${this.quote(body)}${attrString})`;\n      case "has-text":\n        return `filter({ hasText: ${this.toHasText(body)} })`;\n      case "has-not-text":\n        return `filter({ hasNotText: ${this.toHasText(body)} })`;\n      case "has":\n        return `filter({ has: ${body} })`;\n      case "hasNot":\n        return `filter({ hasNot: ${body} })`;\n      case "and":\n        return `and(${body})`;\n      case "or":\n        return `or(${body})`;\n      case "chain":\n        return `locator(${body})`;\n      case "test-id":\n        return `getByTestId(${this.toTestIdValue(body)})`;\n      case "text":\n        return this.toCallWithExact("getByText", body, !!options.exact);\n      case "alt":\n        return this.toCallWithExact("getByAltText", body, !!options.exact);\n      case "placeholder":\n        return this.toCallWithExact("getByPlaceholder", body, !!options.exact);\n      case "label":\n        return this.toCallWithExact("getByLabel", body, !!options.exact);\n      case "title":\n        return this.toCallWithExact("getByTitle", body, !!options.exact);\n      default:\n        throw new Error("Unknown selector kind " + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(".");\n  }\n  regexToSourceString(re) {\n    return normalizeEscapedRegexQuotes(String(re));\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToSourceString(body)})`;\n    return exact ? `${method}(${this.quote(body)}, { exact: true })` : `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToSourceString(body);\n    return this.quote(body);\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToSourceString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    var _a;\n    return escapeWithQuotes(text, (_a = this.preferredQuote) != null ? _a : "\'");\n  }\n};\nvar PythonLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case "default":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, has_text=${this.toHasText(options.hasText)})`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, has_not_text=${this.toHasText(options.hasNotText)})`;\n        return `locator(${this.quote(body)})`;\n      case "frame-locator":\n        return `frame_locator(${this.quote(body)})`;\n      case "frame":\n        return `content_frame`;\n      case "nth":\n        return `nth(${body})`;\n      case "first":\n        return `first`;\n      case "last":\n        return `last`;\n      case "visible":\n        return `filter(visible=${body === "true" ? "True" : "False"})`;\n      case "role":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`name=${this.regexToString(options.name)}`);\n        } else if (typeof options.name === "string") {\n          attrs.push(`name=${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`exact=True`);\n        }\n        for (const { name, value } of options.attrs) {\n          let valueString = typeof value === "string" ? this.quote(value) : value;\n          if (typeof value === "boolean")\n            valueString = value ? "True" : "False";\n          attrs.push(`${toSnakeCase(name)}=${valueString}`);\n        }\n        const attrString = attrs.length ? `, ${attrs.join(", ")}` : "";\n        return `get_by_role(${this.quote(body)}${attrString})`;\n      case "has-text":\n        return `filter(has_text=${this.toHasText(body)})`;\n      case "has-not-text":\n        return `filter(has_not_text=${this.toHasText(body)})`;\n      case "has":\n        return `filter(has=${body})`;\n      case "hasNot":\n        return `filter(has_not=${body})`;\n      case "and":\n        return `and_(${body})`;\n      case "or":\n        return `or_(${body})`;\n      case "chain":\n        return `locator(${body})`;\n      case "test-id":\n        return `get_by_test_id(${this.toTestIdValue(body)})`;\n      case "text":\n        return this.toCallWithExact("get_by_text", body, !!options.exact);\n      case "alt":\n        return this.toCallWithExact("get_by_alt_text", body, !!options.exact);\n      case "placeholder":\n        return this.toCallWithExact("get_by_placeholder", body, !!options.exact);\n      case "label":\n        return this.toCallWithExact("get_by_label", body, !!options.exact);\n      case "title":\n        return this.toCallWithExact("get_by_title", body, !!options.exact);\n      default:\n        throw new Error("Unknown selector kind " + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(".");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes("i") ? ", re.IGNORECASE" : "";\n    return `re.compile(r"${normalizeEscapedRegexQuotes(body.source).replace(/\\\\\\//, "/").replace(/"/g, \'\\\\"\')}"${suffix})`;\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, exact=True)`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToString(body);\n    return `${this.quote(body)}`;\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    return escapeWithQuotes(text, \'"\');\n  }\n};\nvar JavaLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    let clazz;\n    switch (base) {\n      case "page":\n        clazz = "Page";\n        break;\n      case "frame-locator":\n        clazz = "FrameLocator";\n        break;\n      case "locator":\n        clazz = "Locator";\n        break;\n    }\n    switch (kind) {\n      case "default":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasText(${this.toHasText(options.hasText)}))`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasNotText(${this.toHasText(options.hasNotText)}))`;\n        return `locator(${this.quote(body)})`;\n      case "frame-locator":\n        return `frameLocator(${this.quote(body)})`;\n      case "frame":\n        return `contentFrame()`;\n      case "nth":\n        return `nth(${body})`;\n      case "first":\n        return `first()`;\n      case "last":\n        return `last()`;\n      case "visible":\n        return `filter(new ${clazz}.FilterOptions().setVisible(${body === "true" ? "true" : "false"}))`;\n      case "role":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`.setName(${this.regexToString(options.name)})`);\n        } else if (typeof options.name === "string") {\n          attrs.push(`.setName(${this.quote(options.name)})`);\n          if (options.exact)\n            attrs.push(`.setExact(true)`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`.set${toTitleCase(name)}(${typeof value === "string" ? this.quote(value) : value})`);\n        const attrString = attrs.length ? `, new ${clazz}.GetByRoleOptions()${attrs.join("")}` : "";\n        return `getByRole(AriaRole.${toSnakeCase(body).toUpperCase()}${attrString})`;\n      case "has-text":\n        return `filter(new ${clazz}.FilterOptions().setHasText(${this.toHasText(body)}))`;\n      case "has-not-text":\n        return `filter(new ${clazz}.FilterOptions().setHasNotText(${this.toHasText(body)}))`;\n      case "has":\n        return `filter(new ${clazz}.FilterOptions().setHas(${body}))`;\n      case "hasNot":\n        return `filter(new ${clazz}.FilterOptions().setHasNot(${body}))`;\n      case "and":\n        return `and(${body})`;\n      case "or":\n        return `or(${body})`;\n      case "chain":\n        return `locator(${body})`;\n      case "test-id":\n        return `getByTestId(${this.toTestIdValue(body)})`;\n      case "text":\n        return this.toCallWithExact(clazz, "getByText", body, !!options.exact);\n      case "alt":\n        return this.toCallWithExact(clazz, "getByAltText", body, !!options.exact);\n      case "placeholder":\n        return this.toCallWithExact(clazz, "getByPlaceholder", body, !!options.exact);\n      case "label":\n        return this.toCallWithExact(clazz, "getByLabel", body, !!options.exact);\n      case "title":\n        return this.toCallWithExact(clazz, "getByTitle", body, !!options.exact);\n      default:\n        throw new Error("Unknown selector kind " + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(".");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes("i") ? ", Pattern.CASE_INSENSITIVE" : "";\n    return `Pattern.compile(${this.quote(normalizeEscapedRegexQuotes(body.source))}${suffix})`;\n  }\n  toCallWithExact(clazz, method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, new ${clazz}.${toTitleCase(method)}Options().setExact(true))`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToString(body);\n    return this.quote(body);\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    return escapeWithQuotes(text, \'"\');\n  }\n};\nvar CSharpLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case "default":\n        if (options.hasText !== void 0)\n          return `Locator(${this.quote(body)}, new() { ${this.toHasText(options.hasText)} })`;\n        if (options.hasNotText !== void 0)\n          return `Locator(${this.quote(body)}, new() { ${this.toHasNotText(options.hasNotText)} })`;\n        return `Locator(${this.quote(body)})`;\n      case "frame-locator":\n        return `FrameLocator(${this.quote(body)})`;\n      case "frame":\n        return `ContentFrame`;\n      case "nth":\n        return `Nth(${body})`;\n      case "first":\n        return `First`;\n      case "last":\n        return `Last`;\n      case "visible":\n        return `Filter(new() { Visible = ${body === "true" ? "true" : "false"} })`;\n      case "role":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`NameRegex = ${this.regexToString(options.name)}`);\n        } else if (typeof options.name === "string") {\n          attrs.push(`Name = ${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`Exact = true`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`${toTitleCase(name)} = ${typeof value === "string" ? this.quote(value) : value}`);\n        const attrString = attrs.length ? `, new() { ${attrs.join(", ")} }` : "";\n        return `GetByRole(AriaRole.${toTitleCase(body)}${attrString})`;\n      case "has-text":\n        return `Filter(new() { ${this.toHasText(body)} })`;\n      case "has-not-text":\n        return `Filter(new() { ${this.toHasNotText(body)} })`;\n      case "has":\n        return `Filter(new() { Has = ${body} })`;\n      case "hasNot":\n        return `Filter(new() { HasNot = ${body} })`;\n      case "and":\n        return `And(${body})`;\n      case "or":\n        return `Or(${body})`;\n      case "chain":\n        return `Locator(${body})`;\n      case "test-id":\n        return `GetByTestId(${this.toTestIdValue(body)})`;\n      case "text":\n        return this.toCallWithExact("GetByText", body, !!options.exact);\n      case "alt":\n        return this.toCallWithExact("GetByAltText", body, !!options.exact);\n      case "placeholder":\n        return this.toCallWithExact("GetByPlaceholder", body, !!options.exact);\n      case "label":\n        return this.toCallWithExact("GetByLabel", body, !!options.exact);\n      case "title":\n        return this.toCallWithExact("GetByTitle", body, !!options.exact);\n      default:\n        throw new Error("Unknown selector kind " + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(".");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes("i") ? ", RegexOptions.IgnoreCase" : "";\n    return `new Regex(${this.quote(normalizeEscapedRegexQuotes(body.source))}${suffix})`;\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, new() { Exact = true })`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return `HasTextRegex = ${this.regexToString(body)}`;\n    return `HasText = ${this.quote(body)}`;\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  toHasNotText(body) {\n    if (isRegExp(body))\n      return `HasNotTextRegex = ${this.regexToString(body)}`;\n    return `HasNotText = ${this.quote(body)}`;\n  }\n  quote(text) {\n    return escapeWithQuotes(text, \'"\');\n  }\n};\nvar JsonlLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    return JSON.stringify({\n      kind,\n      body,\n      options\n    });\n  }\n  chainLocators(locators) {\n    const objects = locators.map((l) => JSON.parse(l));\n    for (let i = 0; i < objects.length - 1; ++i)\n      objects[i].next = objects[i + 1];\n    return JSON.stringify(objects[0]);\n  }\n};\nvar generators = {\n  javascript: JavaScriptLocatorFactory,\n  python: PythonLocatorFactory,\n  java: JavaLocatorFactory,\n  csharp: CSharpLocatorFactory,\n  jsonl: JsonlLocatorFactory\n};\nfunction isRegExp(obj) {\n  return obj instanceof RegExp;\n}\n\n// packages/playwright-core/src/utils/isomorphic/locatorUtils.ts\nfunction getByAttributeTextSelector(attrName, text, options) {\n  return `internal:attr=[${attrName}=${escapeForAttributeSelector(text, (options == null ? void 0 : options.exact) || false)}]`;\n}\nfunction getByTestIdSelector(testIdAttributeName, testId) {\n  return `internal:testid=[${testIdAttributeName}=${escapeForAttributeSelector(testId, true)}]`;\n}\nfunction getByLabelSelector(text, options) {\n  return "internal:label=" + escapeForTextSelector(text, !!(options == null ? void 0 : options.exact));\n}\nfunction getByAltTextSelector(text, options) {\n  return getByAttributeTextSelector("alt", text, options);\n}\nfunction getByTitleSelector(text, options) {\n  return getByAttributeTextSelector("title", text, options);\n}\nfunction getByPlaceholderSelector(text, options) {\n  return getByAttributeTextSelector("placeholder", text, options);\n}\nfunction getByTextSelector(text, options) {\n  return "internal:text=" + escapeForTextSelector(text, !!(options == null ? void 0 : options.exact));\n}\nfunction getByRoleSelector(role, options = {}) {\n  const props = [];\n  if (options.checked !== void 0)\n    props.push(["checked", String(options.checked)]);\n  if (options.disabled !== void 0)\n    props.push(["disabled", String(options.disabled)]);\n  if (options.selected !== void 0)\n    props.push(["selected", String(options.selected)]);\n  if (options.expanded !== void 0)\n    props.push(["expanded", String(options.expanded)]);\n  if (options.includeHidden !== void 0)\n    props.push(["include-hidden", String(options.includeHidden)]);\n  if (options.level !== void 0)\n    props.push(["level", String(options.level)]);\n  if (options.name !== void 0)\n    props.push(["name", escapeForAttributeSelector(options.name, !!options.exact)]);\n  if (options.pressed !== void 0)\n    props.push(["pressed", String(options.pressed)]);\n  return `internal:role=${role}${props.map(([n, v]) => `[${n}=${v}]`).join("")}`;\n}\n\n// packages/playwright-core/src/server/injected/consoleApi.ts\nvar selectorSymbol = Symbol("selector");\nselectorSymbol;\nvar _Locator = class _Locator {\n  constructor(injectedScript, selector, options) {\n    if (options == null ? void 0 : options.hasText)\n      selector += ` >> internal:has-text=${escapeForTextSelector(options.hasText, false)}`;\n    if (options == null ? void 0 : options.hasNotText)\n      selector += ` >> internal:has-not-text=${escapeForTextSelector(options.hasNotText, false)}`;\n    if (options == null ? void 0 : options.has)\n      selector += ` >> internal:has=` + JSON.stringify(options.has[selectorSymbol]);\n    if (options == null ? void 0 : options.hasNot)\n      selector += ` >> internal:has-not=` + JSON.stringify(options.hasNot[selectorSymbol]);\n    if ((options == null ? void 0 : options.visible) !== void 0)\n      selector += ` >> visible=${options.visible ? "true" : "false"}`;\n    this[selectorSymbol] = selector;\n    if (selector) {\n      const parsed = injectedScript.parseSelector(selector);\n      this.element = injectedScript.querySelector(parsed, injectedScript.document, false);\n      this.elements = injectedScript.querySelectorAll(parsed, injectedScript.document);\n    }\n    const selectorBase = selector;\n    const self = this;\n    self.locator = (selector2, options2) => {\n      return new _Locator(injectedScript, selectorBase ? selectorBase + " >> " + selector2 : selector2, options2);\n    };\n    self.getByTestId = (testId) => self.locator(getByTestIdSelector(injectedScript.testIdAttributeNameForStrictErrorAndConsoleCodegen(), testId));\n    self.getByAltText = (text, options2) => self.locator(getByAltTextSelector(text, options2));\n    self.getByLabel = (text, options2) => self.locator(getByLabelSelector(text, options2));\n    self.getByPlaceholder = (text, options2) => self.locator(getByPlaceholderSelector(text, options2));\n    self.getByText = (text, options2) => self.locator(getByTextSelector(text, options2));\n    self.getByTitle = (text, options2) => self.locator(getByTitleSelector(text, options2));\n    self.getByRole = (role, options2 = {}) => self.locator(getByRoleSelector(role, options2));\n    self.filter = (options2) => new _Locator(injectedScript, selector, options2);\n    self.first = () => self.locator("nth=0");\n    self.last = () => self.locator("nth=-1");\n    self.nth = (index) => self.locator(`nth=${index}`);\n    self.and = (locator) => new _Locator(injectedScript, selectorBase + ` >> internal:and=` + JSON.stringify(locator[selectorSymbol]));\n    self.or = (locator) => new _Locator(injectedScript, selectorBase + ` >> internal:or=` + JSON.stringify(locator[selectorSymbol]));\n  }\n};\nvar Locator = _Locator;\nvar ConsoleAPI = class {\n  constructor(injectedScript) {\n    this._injectedScript = injectedScript;\n    if (this._injectedScript.window.playwright)\n      return;\n    this._injectedScript.window.playwright = {\n      $: (selector, strict) => this._querySelector(selector, !!strict),\n      $$: (selector) => this._querySelectorAll(selector),\n      inspect: (selector) => this._inspect(selector),\n      selector: (element) => this._selector(element),\n      generateLocator: (element, language) => this._generateLocator(element, language),\n      ariaSnapshot: (element, options) => {\n        return this._injectedScript.ariaSnapshot(element || this._injectedScript.document.body, options);\n      },\n      resume: () => this._resume(),\n      ...new Locator(injectedScript, "")\n    };\n    delete this._injectedScript.window.playwright.filter;\n    delete this._injectedScript.window.playwright.first;\n    delete this._injectedScript.window.playwright.last;\n    delete this._injectedScript.window.playwright.nth;\n    delete this._injectedScript.window.playwright.and;\n    delete this._injectedScript.window.playwright.or;\n  }\n  _querySelector(selector, strict) {\n    if (typeof selector !== "string")\n      throw new Error(`Usage: playwright.query(\'Playwright >> selector\').`);\n    const parsed = this._injectedScript.parseSelector(selector);\n    return this._injectedScript.querySelector(parsed, this._injectedScript.document, strict);\n  }\n  _querySelectorAll(selector) {\n    if (typeof selector !== "string")\n      throw new Error(`Usage: playwright.$$(\'Playwright >> selector\').`);\n    const parsed = this._injectedScript.parseSelector(selector);\n    return this._injectedScript.querySelectorAll(parsed, this._injectedScript.document);\n  }\n  _inspect(selector) {\n    if (typeof selector !== "string")\n      throw new Error(`Usage: playwright.inspect(\'Playwright >> selector\').`);\n    this._injectedScript.window.inspect(this._querySelector(selector, false));\n  }\n  _selector(element) {\n    if (!(element instanceof Element))\n      throw new Error(`Usage: playwright.selector(element).`);\n    return this._injectedScript.generateSelectorSimple(element);\n  }\n  _generateLocator(element, language) {\n    if (!(element instanceof Element))\n      throw new Error(`Usage: playwright.locator(element).`);\n    const selector = this._injectedScript.generateSelectorSimple(element);\n    return asLocator(language || "javascript", selector);\n  }\n  _resume() {\n    this._injectedScript.window.__pw_resume().catch(() => {\n    });\n  }\n};\nvar consoleApi_default = ConsoleAPI;\n';
  return consoleApiSource;
}
var contextRecorder = {};
var recorderCollection = {};
var recorderRunner = {};
var language = {};
var hasRequiredLanguage;
function requireLanguage() {
  if (hasRequiredLanguage) return language;
  hasRequiredLanguage = 1;
  Object.defineProperty(language, "__esModule", {
    value: true
  });
  language.fromKeyboardModifiers = fromKeyboardModifiers;
  language.generateCode = generateCode;
  language.sanitizeDeviceOptions = sanitizeDeviceOptions;
  language.toClickOptionsForSourceCode = toClickOptionsForSourceCode;
  language.toKeyboardModifiers = toKeyboardModifiers;
  language.toSignalMap = toSignalMap;
  function generateCode(actions, languageGenerator, options) {
    const header = languageGenerator.generateHeader(options);
    const footer = languageGenerator.generateFooter(options.saveStorage);
    const actionTexts = actions.map((a) => languageGenerator.generateAction(a)).filter(Boolean);
    const text = [header, ...actionTexts, footer].join("\n");
    return {
      header,
      footer,
      actionTexts,
      text
    };
  }
  function sanitizeDeviceOptions(device, options) {
    const cleanedOptions = {};
    for (const property in options) {
      if (JSON.stringify(device[property]) !== JSON.stringify(options[property])) cleanedOptions[property] = options[property];
    }
    return cleanedOptions;
  }
  function toSignalMap(action) {
    let popup;
    let download2;
    let dialog2;
    for (const signal of action.signals) {
      if (signal.name === "popup") popup = signal;
      else if (signal.name === "download") download2 = signal;
      else if (signal.name === "dialog") dialog2 = signal;
    }
    return {
      popup,
      download: download2,
      dialog: dialog2
    };
  }
  function toKeyboardModifiers(modifiers) {
    const result = [];
    if (modifiers & 1) result.push("Alt");
    if (modifiers & 2) result.push("ControlOrMeta");
    if (modifiers & 4) result.push("ControlOrMeta");
    if (modifiers & 8) result.push("Shift");
    return result;
  }
  function fromKeyboardModifiers(modifiers) {
    let result = 0;
    if (!modifiers) return result;
    if (modifiers.includes("Alt")) result |= 1;
    if (modifiers.includes("Control")) result |= 2;
    if (modifiers.includes("ControlOrMeta")) result |= 2;
    if (modifiers.includes("Meta")) result |= 4;
    if (modifiers.includes("Shift")) result |= 8;
    return result;
  }
  function toClickOptionsForSourceCode(action) {
    const modifiers = toKeyboardModifiers(action.modifiers);
    const options = {};
    if (action.button !== "left") options.button = action.button;
    if (modifiers.length) options.modifiers = modifiers;
    if (action.clickCount > 2) options.clickCount = action.clickCount;
    if (action.position) options.position = action.position;
    return options;
  }
  return language;
}
var recorderUtils = {};
var hasRequiredRecorderUtils;
function requireRecorderUtils() {
  if (hasRequiredRecorderUtils) return recorderUtils;
  hasRequiredRecorderUtils = 1;
  Object.defineProperty(recorderUtils, "__esModule", {
    value: true
  });
  recorderUtils.buildFullSelector = buildFullSelector;
  recorderUtils.collapseActions = collapseActions;
  recorderUtils.frameForAction = frameForAction;
  recorderUtils.mainFrameForAction = mainFrameForAction;
  recorderUtils.metadataToCallLog = metadataToCallLog;
  function buildFullSelector(framePath, selector) {
    return [...framePath, selector].join(" >> internal:control=enter-frame >> ");
  }
  function metadataToCallLog(metadata, status) {
    var _metadata$params, _metadata$params2, _metadata$error;
    let title = metadata.apiName || metadata.method;
    if (metadata.method === "waitForEventInfo") title += `(${metadata.params.info.event})`;
    title = title.replace("object.expect", "expect");
    if (metadata.error) status = "error";
    const params = {
      url: (_metadata$params = metadata.params) === null || _metadata$params === void 0 ? void 0 : _metadata$params.url,
      selector: (_metadata$params2 = metadata.params) === null || _metadata$params2 === void 0 ? void 0 : _metadata$params2.selector
    };
    let duration = metadata.endTime ? metadata.endTime - metadata.startTime : void 0;
    if (typeof duration === "number" && metadata.pauseStartTime && metadata.pauseEndTime) {
      duration -= metadata.pauseEndTime - metadata.pauseStartTime;
      duration = Math.max(duration, 0);
    }
    const callLog2 = {
      id: metadata.id,
      messages: metadata.log,
      title,
      status,
      error: (_metadata$error = metadata.error) === null || _metadata$error === void 0 || (_metadata$error = _metadata$error.error) === null || _metadata$error === void 0 ? void 0 : _metadata$error.message,
      params,
      duration
    };
    return callLog2;
  }
  function mainFrameForAction(pageAliases, actionInContext) {
    var _find;
    const pageAlias = actionInContext.frame.pageAlias;
    const page2 = (_find = [...pageAliases.entries()].find(([, alias]) => pageAlias === alias)) === null || _find === void 0 ? void 0 : _find[0];
    if (!page2) throw new Error(`Internal error: page ${pageAlias} not found in [${[...pageAliases.values()]}]`);
    return page2.mainFrame();
  }
  async function frameForAction(pageAliases, actionInContext, action) {
    var _find2;
    const pageAlias = actionInContext.frame.pageAlias;
    const page2 = (_find2 = [...pageAliases.entries()].find(([, alias]) => pageAlias === alias)) === null || _find2 === void 0 ? void 0 : _find2[0];
    if (!page2) throw new Error("Internal error: page not found");
    const fullSelector = buildFullSelector(actionInContext.frame.framePath, action.selector);
    const result = await page2.mainFrame().selectors.resolveFrameForSelector(fullSelector);
    if (!result) throw new Error("Internal error: frame not found");
    return result.frame;
  }
  function collapseActions(actions) {
    const result = [];
    for (const action of actions) {
      const lastAction = result[result.length - 1];
      const isSameAction = lastAction && lastAction.action.name === action.action.name && lastAction.frame.pageAlias === action.frame.pageAlias && lastAction.frame.framePath.join("|") === action.frame.framePath.join("|");
      const isSameSelector = lastAction && "selector" in lastAction.action && "selector" in action.action && action.action.selector === lastAction.action.selector;
      const shouldMerge = isSameAction && (action.action.name === "navigate" || action.action.name === "fill" && isSameSelector);
      if (!shouldMerge) {
        result.push(action);
        continue;
      }
      const startTime = result[result.length - 1].startTime;
      result[result.length - 1] = action;
      result[result.length - 1].startTime = startTime;
    }
    return result;
  }
  return recorderUtils;
}
var hasRequiredRecorderRunner;
function requireRecorderRunner() {
  if (hasRequiredRecorderRunner) return recorderRunner;
  hasRequiredRecorderRunner = 1;
  Object.defineProperty(recorderRunner, "__esModule", {
    value: true
  });
  recorderRunner.performAction = performAction;
  recorderRunner.toClickOptions = toClickOptions;
  var _utils = requireUtils();
  var _language = requireLanguage();
  var _instrumentation = requireInstrumentation();
  var _recorderUtils = requireRecorderUtils();
  async function performAction(pageAliases, actionInContext) {
    const callMetadata = (0, _instrumentation.serverSideCallMetadata)();
    const mainFrame = (0, _recorderUtils.mainFrameForAction)(pageAliases, actionInContext);
    const {
      action
    } = actionInContext;
    const kActionTimeout = 5e3;
    if (action.name === "navigate") {
      await mainFrame.goto(callMetadata, action.url, {
        timeout: kActionTimeout
      });
      return;
    }
    if (action.name === "openPage") throw Error("Not reached");
    if (action.name === "closePage") {
      await mainFrame._page.close(callMetadata);
      return;
    }
    const selector = (0, _recorderUtils.buildFullSelector)(actionInContext.frame.framePath, action.selector);
    if (action.name === "click") {
      const options = toClickOptions(action);
      await mainFrame.click(callMetadata, selector, {
        ...options,
        timeout: kActionTimeout,
        strict: true
      });
      return;
    }
    if (action.name === "press") {
      const modifiers = (0, _language.toKeyboardModifiers)(action.modifiers);
      const shortcut = [...modifiers, action.key].join("+");
      await mainFrame.press(callMetadata, selector, shortcut, {
        timeout: kActionTimeout,
        strict: true
      });
      return;
    }
    if (action.name === "fill") {
      await mainFrame.fill(callMetadata, selector, action.text, {
        timeout: kActionTimeout,
        strict: true
      });
      return;
    }
    if (action.name === "setInputFiles") {
      await mainFrame.setInputFiles(callMetadata, selector, {
        selector,
        payloads: [],
        timeout: kActionTimeout,
        strict: true
      });
      return;
    }
    if (action.name === "check") {
      await mainFrame.check(callMetadata, selector, {
        timeout: kActionTimeout,
        strict: true
      });
      return;
    }
    if (action.name === "uncheck") {
      await mainFrame.uncheck(callMetadata, selector, {
        timeout: kActionTimeout,
        strict: true
      });
      return;
    }
    if (action.name === "select") {
      const values = action.options.map((value) => ({
        value
      }));
      await mainFrame.selectOption(callMetadata, selector, [], values, {
        timeout: kActionTimeout,
        strict: true
      });
      return;
    }
    if (action.name === "assertChecked") {
      await mainFrame.expect(callMetadata, selector, {
        selector,
        expression: "to.be.checked",
        expectedValue: {
          checked: action.checked
        },
        isNot: !action.checked,
        timeout: kActionTimeout
      });
      return;
    }
    if (action.name === "assertText") {
      await mainFrame.expect(callMetadata, selector, {
        selector,
        expression: "to.have.text",
        expectedText: (0, _utils.serializeExpectedTextValues)([action.text], {
          matchSubstring: true,
          normalizeWhiteSpace: true
        }),
        isNot: false,
        timeout: kActionTimeout
      });
      return;
    }
    if (action.name === "assertValue") {
      await mainFrame.expect(callMetadata, selector, {
        selector,
        expression: "to.have.value",
        expectedValue: action.value,
        isNot: false,
        timeout: kActionTimeout
      });
      return;
    }
    if (action.name === "assertVisible") {
      await mainFrame.expect(callMetadata, selector, {
        selector,
        expression: "to.be.visible",
        isNot: false,
        timeout: kActionTimeout
      });
      return;
    }
    throw new Error("Internal error: unexpected action " + action.name);
  }
  function toClickOptions(action) {
    const modifiers = (0, _language.toKeyboardModifiers)(action.modifiers);
    const options = {};
    if (action.button !== "left") options.button = action.button;
    if (modifiers.length) options.modifiers = modifiers;
    if (action.clickCount > 1) options.clickCount = action.clickCount;
    if (action.position) options.position = action.position;
    return options;
  }
  return recorderRunner;
}
var hasRequiredRecorderCollection;
function requireRecorderCollection() {
  if (hasRequiredRecorderCollection) return recorderCollection;
  hasRequiredRecorderCollection = 1;
  Object.defineProperty(recorderCollection, "__esModule", {
    value: true
  });
  recorderCollection.RecorderCollection = void 0;
  var _events = require$$0$4;
  var _recorderRunner = requireRecorderRunner();
  var _recorderUtils = requireRecorderUtils();
  var _debug = requireDebug$1();
  var _time = requireTime$1();
  class RecorderCollection extends _events.EventEmitter {
    constructor(pageAliases) {
      super();
      this._actions = [];
      this._enabled = false;
      this._pageAliases = void 0;
      this._pageAliases = pageAliases;
    }
    restart() {
      this._actions = [];
      this.emit("change", []);
    }
    setEnabled(enabled) {
      this._enabled = enabled;
    }
    async performAction(actionInContext) {
      await this._addAction(actionInContext, async () => {
        await (0, _recorderRunner.performAction)(this._pageAliases, actionInContext);
      });
    }
    addRecordedAction(actionInContext) {
      if (["openPage", "closePage"].includes(actionInContext.action.name)) {
        this._actions.push(actionInContext);
        this._fireChange();
        return;
      }
      this._addAction(actionInContext).catch(() => {
      });
    }
    async _addAction(actionInContext, callback) {
      if (!this._enabled) return;
      if (actionInContext.action.name === "openPage" || actionInContext.action.name === "closePage") {
        this._actions.push(actionInContext);
        this._fireChange();
        return;
      }
      this._actions.push(actionInContext);
      this._fireChange();
      await (callback === null || callback === void 0 ? void 0 : callback().catch());
      actionInContext.endTime = (0, _time.monotonicTime)();
    }
    signal(pageAlias, frame2, signal) {
      if (!this._enabled) return;
      if (signal.name === "navigation" && frame2._page.mainFrame() === frame2) {
        const timestamp = (0, _time.monotonicTime)();
        const lastAction = this._actions[this._actions.length - 1];
        const signalThreshold = (0, _debug.isUnderTest)() ? 500 : 5e3;
        let generateGoto = false;
        if (!lastAction) generateGoto = true;
        else if (lastAction.action.name !== "click" && lastAction.action.name !== "press" && lastAction.action.name !== "fill") generateGoto = true;
        else if (timestamp - lastAction.startTime > signalThreshold) generateGoto = true;
        if (generateGoto) {
          this.addRecordedAction({
            frame: {
              pageAlias,
              framePath: []
            },
            action: {
              name: "navigate",
              url: frame2.url(),
              signals: []
            },
            startTime: timestamp,
            endTime: timestamp
          });
        }
        return;
      }
      if (this._actions.length) {
        this._actions[this._actions.length - 1].action.signals.push(signal);
        this._fireChange();
        return;
      }
    }
    _fireChange() {
      if (!this._enabled) return;
      this.emit("change", (0, _recorderUtils.collapseActions)(this._actions));
    }
  }
  recorderCollection.RecorderCollection = RecorderCollection;
  return recorderCollection;
}
var pollingRecorderSource = {};
var hasRequiredPollingRecorderSource;
function requirePollingRecorderSource() {
  if (hasRequiredPollingRecorderSource) return pollingRecorderSource;
  hasRequiredPollingRecorderSource = 1;
  Object.defineProperty(pollingRecorderSource, "__esModule", {
    value: true
  });
  pollingRecorderSource.source = void 0;
  pollingRecorderSource.source = '\nvar __commonJS = obj => {\n  let required = false;\n  let result;\n  return function __require() {\n    if (!required) {\n      required = true;\n      let fn;\n      for (const name in obj) { fn = obj[name]; break; }\n      const module = { exports: {} };\n      fn(module.exports, module);\n      result = module.exports;\n    }\n    return result;\n  }\n};\nvar __export = (target, all) => {for (var name in all) target[name] = all[name];};\nvar __toESM = mod => ({ ...mod, \'default\': mod });\nvar __toCommonJS = mod => ({ ...mod, __esModule: true });\n\n\n// packages/playwright-core/src/server/injected/recorder/pollingRecorder.ts\nvar pollingRecorder_exports = {};\n__export(pollingRecorder_exports, {\n  PollingRecorder: () => PollingRecorder,\n  default: () => pollingRecorder_default\n});\nmodule.exports = __toCommonJS(pollingRecorder_exports);\n\n// packages/playwright-core/src/server/injected/recorder/clipPaths.ts\nvar svgJson = { "tagName": "svg", "children": [{ "tagName": "defs", "children": [{ "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-gripper" }, "children": [{ "tagName": "path", "attrs": { "d": "M5 3h2v2H5zm0 4h2v2H5zm0 4h2v2H5zm4-8h2v2H9zm0 4h2v2H9zm0 4h2v2H9z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-circle-large-filled" }, "children": [{ "tagName": "path", "attrs": { "d": "M8 1a6.8 6.8 0 0 1 1.86.253 6.899 6.899 0 0 1 3.083 1.805 6.903 6.903 0 0 1 1.804 3.083C14.916 6.738 15 7.357 15 8s-.084 1.262-.253 1.86a6.9 6.9 0 0 1-.704 1.674 7.157 7.157 0 0 1-2.516 2.509 6.966 6.966 0 0 1-1.668.71A6.984 6.984 0 0 1 8 15a6.984 6.984 0 0 1-1.86-.246 7.098 7.098 0 0 1-1.674-.711 7.3 7.3 0 0 1-1.415-1.094 7.295 7.295 0 0 1-1.094-1.415 7.098 7.098 0 0 1-.71-1.675A6.985 6.985 0 0 1 1 8c0-.643.082-1.262.246-1.86a6.968 6.968 0 0 1 .711-1.667 7.156 7.156 0 0 1 2.509-2.516 6.895 6.895 0 0 1 1.675-.704A6.808 6.808 0 0 1 8 1z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-inspect" }, "children": [{ "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M1 3l1-1h12l1 1v6h-1V3H2v8h5v1H2l-1-1V3zm14.707 9.707L9 6v9.414l2.707-2.707h4zM10 13V8.414l3.293 3.293h-2L10 13z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-whole-word" }, "children": [{ "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M0 11H1V13H15V11H16V14H15H1H0V11Z" } }, { "tagName": "path", "attrs": { "d": "M6.84048 11H5.95963V10.1406H5.93814C5.555 10.7995 4.99104 11.1289 4.24625 11.1289C3.69839 11.1289 3.26871 10.9839 2.95718 10.6938C2.64924 10.4038 2.49527 10.0189 2.49527 9.53906C2.49527 8.51139 3.10041 7.91341 4.3107 7.74512L5.95963 7.51416C5.95963 6.57959 5.58186 6.1123 4.82632 6.1123C4.16389 6.1123 3.56591 6.33789 3.03238 6.78906V5.88672C3.57307 5.54297 4.19612 5.37109 4.90152 5.37109C6.19416 5.37109 6.84048 6.05501 6.84048 7.42285V11ZM5.95963 8.21777L4.63297 8.40039C4.22476 8.45768 3.91682 8.55973 3.70914 8.70654C3.50145 8.84977 3.39761 9.10579 3.39761 9.47461C3.39761 9.74316 3.4925 9.96338 3.68228 10.1353C3.87564 10.3035 4.13166 10.3877 4.45035 10.3877C4.8872 10.3877 5.24706 10.2355 5.52994 9.93115C5.8164 9.62321 5.95963 9.2347 5.95963 8.76562V8.21777Z" } }, { "tagName": "path", "attrs": { "d": "M9.3475 10.2051H9.32601V11H8.44515V2.85742H9.32601V6.4668H9.3475C9.78076 5.73633 10.4146 5.37109 11.2489 5.37109C11.9543 5.37109 12.5057 5.61816 12.9032 6.1123C13.3042 6.60286 13.5047 7.26172 13.5047 8.08887C13.5047 9.00911 13.2809 9.74674 12.8333 10.3018C12.3857 10.8532 11.7734 11.1289 10.9964 11.1289C10.2695 11.1289 9.71989 10.821 9.3475 10.2051ZM9.32601 7.98682V8.75488C9.32601 9.20964 9.47282 9.59635 9.76644 9.91504C10.0636 10.2301 10.4396 10.3877 10.8944 10.3877C11.4279 10.3877 11.8451 10.1836 12.1458 9.77539C12.4502 9.36719 12.6024 8.79964 12.6024 8.07275C12.6024 7.46045 12.4609 6.98063 12.1781 6.6333C11.8952 6.28597 11.512 6.1123 11.0286 6.1123C10.5166 6.1123 10.1048 6.29134 9.7933 6.64941C9.48177 7.00391 9.32601 7.44971 9.32601 7.98682Z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-eye" }, "children": [{ "tagName": "path", "attrs": { "d": "M7.99993 6.00316C9.47266 6.00316 10.6666 7.19708 10.6666 8.66981C10.6666 10.1426 9.47266 11.3365 7.99993 11.3365C6.52715 11.3365 5.33324 10.1426 5.33324 8.66981C5.33324 7.19708 6.52715 6.00316 7.99993 6.00316ZM7.99993 7.00315C7.07946 7.00315 6.33324 7.74935 6.33324 8.66981C6.33324 9.59028 7.07946 10.3365 7.99993 10.3365C8.9204 10.3365 9.6666 9.59028 9.6666 8.66981C9.6666 7.74935 8.9204 7.00315 7.99993 7.00315ZM7.99993 3.66675C11.0756 3.66675 13.7307 5.76675 14.4673 8.70968C14.5344 8.97755 14.3716 9.24908 14.1037 9.31615C13.8358 9.38315 13.5643 9.22041 13.4973 8.95248C12.8713 6.45205 10.6141 4.66675 7.99993 4.66675C5.38454 4.66675 3.12664 6.45359 2.50182 8.95555C2.43491 9.22341 2.16348 9.38635 1.89557 9.31948C1.62766 9.25255 1.46471 8.98115 1.53162 8.71321C2.26701 5.76856 4.9229 3.66675 7.99993 3.66675Z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-symbol-constant" }, "children": [{ "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M4 6h8v1H4V6zm8 3H4v1h8V9z" } }, { "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M1 4l1-1h12l1 1v8l-1 1H2l-1-1V4zm1 0v8h12V4H2z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-check" }, "children": [{ "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M14.431 3.323l-8.47 10-.79-.036-3.35-4.77.818-.574 2.978 4.24 8.051-9.506.764.646z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-close" }, "children": [{ "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M8 8.707l3.646 3.647.708-.707L8.707 8l3.647-3.646-.707-.708L8 7.293 4.354 3.646l-.707.708L7.293 8l-3.646 3.646.707.708L8 8.707z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-pass" }, "children": [{ "tagName": "path", "attrs": { "d": "M6.27 10.87h.71l4.56-4.56-.71-.71-4.2 4.21-1.92-1.92L4 8.6l2.27 2.27z" } }, { "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M8.6 1c1.6.1 3.1.9 4.2 2 1.3 1.4 2 3.1 2 5.1 0 1.6-.6 3.1-1.6 4.4-1 1.2-2.4 2.1-4 2.4-1.6.3-3.2.1-4.6-.7-1.4-.8-2.5-2-3.1-3.5C.9 9.2.8 7.5 1.3 6c.5-1.6 1.4-2.9 2.8-3.8C5.4 1.3 7 .9 8.6 1zm.5 12.9c1.3-.3 2.5-1 3.4-2.1.8-1.1 1.3-2.4 1.2-3.8 0-1.6-.6-3.2-1.7-4.3-1-1-2.2-1.6-3.6-1.7-1.3-.1-2.7.2-3.8 1-1.1.8-1.9 1.9-2.3 3.3-.4 1.3-.4 2.7.2 4 .6 1.3 1.5 2.3 2.7 3 1.2.7 2.6.9 3.9.6z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-gist" }, "children": [{ "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M10.57 1.14l3.28 3.3.15.36v9.7l-.5.5h-11l-.5-.5v-13l.5-.5h7.72l.35.14zM10 5h3l-3-3v3zM3 2v12h10V6H9.5L9 5.5V2H3zm2.062 7.533l1.817-1.828L6.17 7 4 9.179v.707l2.171 2.174.707-.707-1.816-1.82zM8.8 7.714l.7-.709 2.189 2.175v.709L9.5 12.062l-.705-.709 1.831-1.82L8.8 7.714z" } }] }] }] };\nvar clipPaths_default = svgJson;\n\n// packages/playwright-core/src/server/injected/recorder/recorder.ts\nvar NoneTool = class {\n  cursor() {\n    return "default";\n  }\n};\nvar InspectTool = class {\n  constructor(recorder, assertVisibility) {\n    this._hoveredModel = null;\n    this._hoveredElement = null;\n    this._hoveredSelectors = null;\n    this._recorder = recorder;\n    this._assertVisibility = assertVisibility;\n  }\n  cursor() {\n    return "pointer";\n  }\n  cleanup() {\n    this._hoveredModel = null;\n    this._hoveredElement = null;\n    this._hoveredSelectors = null;\n  }\n  onClick(event) {\n    var _a;\n    consumeEvent(event);\n    if (event.button !== 0)\n      return;\n    if ((_a = this._hoveredModel) == null ? void 0 : _a.selector)\n      this._commit(this._hoveredModel.selector, this._hoveredModel);\n  }\n  onContextMenu(event) {\n    if (this._hoveredModel && !this._hoveredModel.tooltipListItemSelected && this._hoveredSelectors && this._hoveredSelectors.length > 1) {\n      consumeEvent(event);\n      const selectors = this._hoveredSelectors;\n      const hoveredModel = this._hoveredModel;\n      this._hoveredModel.tooltipFooter = void 0;\n      this._hoveredModel.tooltipList = selectors.map((selector) => this._recorder.injectedScript.utils.asLocator(this._recorder.state.language, selector));\n      this._hoveredModel.tooltipListItemSelected = (index) => {\n        if (index === void 0)\n          this._reset(true);\n        else\n          this._commit(selectors[index], hoveredModel);\n      };\n      this._recorder.updateHighlight(this._hoveredModel, true);\n    }\n  }\n  onPointerDown(event) {\n    consumeEvent(event);\n  }\n  onPointerUp(event) {\n    consumeEvent(event);\n  }\n  onMouseDown(event) {\n    consumeEvent(event);\n  }\n  onMouseUp(event) {\n    consumeEvent(event);\n  }\n  onMouseMove(event) {\n    var _a;\n    consumeEvent(event);\n    let target = this._recorder.deepEventTarget(event);\n    if (!target.isConnected)\n      target = null;\n    if (this._hoveredElement === target)\n      return;\n    this._hoveredElement = target;\n    let model = null;\n    let selectors = [];\n    if (this._hoveredElement) {\n      const generated = this._recorder.injectedScript.generateSelector(this._hoveredElement, { testIdAttributeName: this._recorder.state.testIdAttributeName, multiple: false });\n      selectors = generated.selectors;\n      model = {\n        selector: generated.selector,\n        elements: generated.elements,\n        tooltipText: this._recorder.injectedScript.utils.asLocator(this._recorder.state.language, generated.selector),\n        tooltipFooter: selectors.length > 1 ? `Click to select, right-click for more options` : void 0,\n        color: this._assertVisibility ? "#8acae480" : void 0\n      };\n    }\n    if (((_a = this._hoveredModel) == null ? void 0 : _a.selector) === (model == null ? void 0 : model.selector))\n      return;\n    this._hoveredModel = model;\n    this._hoveredSelectors = selectors;\n    this._recorder.updateHighlight(model, true);\n  }\n  onMouseEnter(event) {\n    consumeEvent(event);\n  }\n  onMouseLeave(event) {\n    consumeEvent(event);\n    const window = this._recorder.injectedScript.window;\n    if (window.top !== window && this._recorder.deepEventTarget(event).nodeType === Node.DOCUMENT_NODE)\n      this._reset(true);\n  }\n  onKeyDown(event) {\n    var _a;\n    consumeEvent(event);\n    if (event.key === "Escape") {\n      if ((_a = this._hoveredModel) == null ? void 0 : _a.tooltipListItemSelected)\n        this._reset(true);\n      else if (this._assertVisibility)\n        this._recorder.setMode("recording");\n    }\n  }\n  onKeyUp(event) {\n    consumeEvent(event);\n  }\n  onScroll(event) {\n    this._reset(false);\n  }\n  _commit(selector, model) {\n    var _a;\n    if (this._assertVisibility) {\n      this._recorder.recordAction({\n        name: "assertVisible",\n        selector,\n        signals: []\n      });\n      this._recorder.setMode("recording");\n      (_a = this._recorder.overlay) == null ? void 0 : _a.flashToolSucceeded("assertingVisibility");\n    } else {\n      this._recorder.elementPicked(selector, model);\n    }\n  }\n  _reset(userGesture) {\n    this._hoveredElement = null;\n    this._hoveredModel = null;\n    this._hoveredSelectors = null;\n    this._recorder.updateHighlight(null, userGesture);\n  }\n};\nvar RecordActionTool = class {\n  constructor(recorder) {\n    this._performingActions = /* @__PURE__ */ new Set();\n    this._hoveredModel = null;\n    this._hoveredElement = null;\n    this._activeModel = null;\n    this._expectProgrammaticKeyUp = false;\n    this._recorder = recorder;\n  }\n  cursor() {\n    return "pointer";\n  }\n  cleanup() {\n    this._hoveredModel = null;\n    this._hoveredElement = null;\n    this._activeModel = null;\n    this._expectProgrammaticKeyUp = false;\n  }\n  onClick(event) {\n    if (isRangeInput(this._hoveredElement))\n      return;\n    if (event.button === 2 && event.type === "auxclick")\n      return;\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (this._actionInProgress(event))\n      return;\n    if (this._consumedDueToNoModel(event, this._hoveredModel))\n      return;\n    const checkbox = asCheckbox(this._recorder.deepEventTarget(event));\n    if (checkbox) {\n      this._performAction({\n        name: checkbox.checked ? "check" : "uncheck",\n        selector: this._hoveredModel.selector,\n        signals: []\n      });\n      return;\n    }\n    this._cancelPendingClickAction();\n    if (event.detail === 1) {\n      this._pendingClickAction = {\n        action: {\n          name: "click",\n          selector: this._hoveredModel.selector,\n          position: positionForEvent(event),\n          signals: [],\n          button: buttonForEvent(event),\n          modifiers: modifiersForEvent(event),\n          clickCount: event.detail\n        },\n        timeout: this._recorder.injectedScript.builtinSetTimeout(() => this._commitPendingClickAction(), 200)\n      };\n    }\n  }\n  onDblClick(event) {\n    if (isRangeInput(this._hoveredElement))\n      return;\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (this._actionInProgress(event))\n      return;\n    if (this._consumedDueToNoModel(event, this._hoveredModel))\n      return;\n    this._cancelPendingClickAction();\n    this._performAction({\n      name: "click",\n      selector: this._hoveredModel.selector,\n      position: positionForEvent(event),\n      signals: [],\n      button: buttonForEvent(event),\n      modifiers: modifiersForEvent(event),\n      clickCount: event.detail\n    });\n  }\n  _commitPendingClickAction() {\n    if (this._pendingClickAction)\n      this._performAction(this._pendingClickAction.action);\n    this._cancelPendingClickAction();\n  }\n  _cancelPendingClickAction() {\n    if (this._pendingClickAction)\n      clearTimeout(this._pendingClickAction.timeout);\n    this._pendingClickAction = void 0;\n  }\n  onContextMenu(event) {\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (this._actionInProgress(event))\n      return;\n    if (this._consumedDueToNoModel(event, this._hoveredModel))\n      return;\n    this._performAction({\n      name: "click",\n      selector: this._hoveredModel.selector,\n      position: positionForEvent(event),\n      signals: [],\n      button: "right",\n      modifiers: 0,\n      clickCount: 0\n    });\n  }\n  onPointerDown(event) {\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (!this._performingActions.size)\n      consumeEvent(event);\n  }\n  onPointerUp(event) {\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (!this._performingActions.size)\n      consumeEvent(event);\n  }\n  onMouseDown(event) {\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (!this._performingActions.size)\n      consumeEvent(event);\n    this._activeModel = this._hoveredModel;\n  }\n  onMouseUp(event) {\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (!this._performingActions.size)\n      consumeEvent(event);\n  }\n  onMouseMove(event) {\n    const target = this._recorder.deepEventTarget(event);\n    if (this._hoveredElement === target)\n      return;\n    this._hoveredElement = target;\n    this._updateModelForHoveredElement();\n  }\n  onMouseLeave(event) {\n    const window = this._recorder.injectedScript.window;\n    if (window.top !== window && this._recorder.deepEventTarget(event).nodeType === Node.DOCUMENT_NODE) {\n      this._hoveredElement = null;\n      this._updateModelForHoveredElement();\n    }\n  }\n  onFocus(event) {\n    this._onFocus(true);\n  }\n  onInput(event) {\n    const target = this._recorder.deepEventTarget(event);\n    if (target.nodeName === "INPUT" && target.type.toLowerCase() === "file") {\n      this._recorder.recordAction({\n        name: "setInputFiles",\n        selector: this._activeModel.selector,\n        signals: [],\n        files: [...target.files || []].map((file) => file.name)\n      });\n      return;\n    }\n    if (isRangeInput(target)) {\n      this._recorder.recordAction({\n        name: "fill",\n        // must use hoveredModel instead of activeModel for it to work in webkit\n        selector: this._hoveredModel.selector,\n        signals: [],\n        text: target.value\n      });\n      return;\n    }\n    if (["INPUT", "TEXTAREA"].includes(target.nodeName) || target.isContentEditable) {\n      if (target.nodeName === "INPUT" && ["checkbox", "radio"].includes(target.type.toLowerCase())) {\n        return;\n      }\n      if (this._consumedDueWrongTarget(event))\n        return;\n      this._recorder.recordAction({\n        name: "fill",\n        selector: this._activeModel.selector,\n        signals: [],\n        text: target.isContentEditable ? target.innerText : target.value\n      });\n    }\n    if (target.nodeName === "SELECT") {\n      const selectElement = target;\n      if (this._actionInProgress(event))\n        return;\n      this._performAction({\n        name: "select",\n        selector: this._activeModel.selector,\n        options: [...selectElement.selectedOptions].map((option) => option.value),\n        signals: []\n      });\n    }\n  }\n  onKeyDown(event) {\n    if (!this._shouldGenerateKeyPressFor(event))\n      return;\n    if (this._actionInProgress(event)) {\n      this._expectProgrammaticKeyUp = true;\n      return;\n    }\n    if (this._consumedDueWrongTarget(event))\n      return;\n    if (event.key === " ") {\n      const checkbox = asCheckbox(this._recorder.deepEventTarget(event));\n      if (checkbox) {\n        this._performAction({\n          name: checkbox.checked ? "uncheck" : "check",\n          selector: this._activeModel.selector,\n          signals: []\n        });\n        return;\n      }\n    }\n    this._performAction({\n      name: "press",\n      selector: this._activeModel.selector,\n      signals: [],\n      key: event.key,\n      modifiers: modifiersForEvent(event)\n    });\n  }\n  onKeyUp(event) {\n    if (!this._shouldGenerateKeyPressFor(event))\n      return;\n    if (!this._expectProgrammaticKeyUp) {\n      consumeEvent(event);\n      return;\n    }\n    this._expectProgrammaticKeyUp = false;\n  }\n  onScroll(event) {\n    this._hoveredModel = null;\n    this._hoveredElement = null;\n    this._recorder.updateHighlight(null, false);\n  }\n  _onFocus(userGesture) {\n    const activeElement = deepActiveElement(this._recorder.document);\n    if (userGesture && activeElement === this._recorder.document.body)\n      return;\n    const result = activeElement ? this._recorder.injectedScript.generateSelector(activeElement, { testIdAttributeName: this._recorder.state.testIdAttributeName }) : null;\n    this._activeModel = result && result.selector ? result : null;\n    if (userGesture) {\n      this._hoveredElement = activeElement;\n      this._updateModelForHoveredElement();\n    }\n  }\n  _shouldIgnoreMouseEvent(event) {\n    const target = this._recorder.deepEventTarget(event);\n    const nodeName = target.nodeName;\n    if (nodeName === "SELECT" || nodeName === "OPTION")\n      return true;\n    if (nodeName === "INPUT" && ["date", "range"].includes(target.type))\n      return true;\n    return false;\n  }\n  _actionInProgress(event) {\n    const isKeyEvent = event instanceof KeyboardEvent;\n    const isMouseOrPointerEvent = event instanceof MouseEvent || event instanceof PointerEvent;\n    for (const action of this._performingActions) {\n      if (isKeyEvent && action.name === "press" && event.key === action.key)\n        return true;\n      if (isMouseOrPointerEvent && (action.name === "click" || action.name === "check" || action.name === "uncheck"))\n        return true;\n    }\n    consumeEvent(event);\n    return false;\n  }\n  _consumedDueToNoModel(event, model) {\n    if (model)\n      return false;\n    consumeEvent(event);\n    return true;\n  }\n  _consumedDueWrongTarget(event) {\n    if (this._activeModel && this._activeModel.elements[0] === this._recorder.deepEventTarget(event))\n      return false;\n    consumeEvent(event);\n    return true;\n  }\n  _performAction(action) {\n    this._hoveredElement = null;\n    this._hoveredModel = null;\n    this._activeModel = null;\n    this._recorder.updateHighlight(null, false);\n    this._performingActions.add(action);\n    void this._recorder.performAction(action).then(() => {\n      this._performingActions.delete(action);\n      this._onFocus(false);\n      if (this._recorder.injectedScript.isUnderTest) {\n        console.error("Action performed for test: " + JSON.stringify({\n          // eslint-disable-line no-console\n          hovered: this._hoveredModel ? this._hoveredModel.selector : null,\n          active: this._activeModel ? this._activeModel.selector : null\n        }));\n      }\n    });\n  }\n  _shouldGenerateKeyPressFor(event) {\n    if (event.key === "Enter" && (this._recorder.deepEventTarget(event).nodeName === "TEXTAREA" || this._recorder.deepEventTarget(event).isContentEditable))\n      return false;\n    if (["Backspace", "Delete", "AltGraph"].includes(event.key))\n      return false;\n    if (event.key === "@" && event.code === "KeyL")\n      return false;\n    if (navigator.platform.includes("Mac")) {\n      if (event.key === "v" && event.metaKey)\n        return false;\n    } else {\n      if (event.key === "v" && event.ctrlKey)\n        return false;\n      if (event.key === "Insert" && event.shiftKey)\n        return false;\n    }\n    if (["Shift", "Control", "Meta", "Alt", "Process"].includes(event.key))\n      return false;\n    const hasModifier = event.ctrlKey || event.altKey || event.metaKey;\n    if (event.key.length === 1 && !hasModifier)\n      return !!asCheckbox(this._recorder.deepEventTarget(event));\n    return true;\n  }\n  _updateModelForHoveredElement() {\n    if (this._performingActions.size)\n      return;\n    if (!this._hoveredElement || !this._hoveredElement.isConnected) {\n      this._hoveredModel = null;\n      this._hoveredElement = null;\n      this._recorder.updateHighlight(null, true);\n      return;\n    }\n    const { selector, elements } = this._recorder.injectedScript.generateSelector(this._hoveredElement, { testIdAttributeName: this._recorder.state.testIdAttributeName });\n    if (this._hoveredModel && this._hoveredModel.selector === selector)\n      return;\n    this._hoveredModel = selector ? { selector, elements, color: "#dc6f6f7f" } : null;\n    this._recorder.updateHighlight(this._hoveredModel, true);\n  }\n};\nvar TextAssertionTool = class {\n  constructor(recorder, kind) {\n    this._hoverHighlight = null;\n    this._action = null;\n    this._textCache = /* @__PURE__ */ new Map();\n    this._recorder = recorder;\n    this._kind = kind;\n    this._dialog = new Dialog(recorder);\n  }\n  cursor() {\n    return "pointer";\n  }\n  cleanup() {\n    this._dialog.close();\n    this._hoverHighlight = null;\n  }\n  onClick(event) {\n    consumeEvent(event);\n    if (this._kind === "value") {\n      this._commitAssertValue();\n    } else {\n      if (!this._dialog.isShowing())\n        this._showDialog();\n    }\n  }\n  onMouseDown(event) {\n    const target = this._recorder.deepEventTarget(event);\n    if (this._elementHasValue(target))\n      event.preventDefault();\n  }\n  onPointerUp(event) {\n    var _a;\n    const target = (_a = this._hoverHighlight) == null ? void 0 : _a.elements[0];\n    if (this._kind === "value" && target && (target.nodeName === "INPUT" || target.nodeName === "SELECT") && target.disabled) {\n      this._commitAssertValue();\n    }\n  }\n  onMouseMove(event) {\n    var _a;\n    if (this._dialog.isShowing())\n      return;\n    const target = this._recorder.deepEventTarget(event);\n    if (((_a = this._hoverHighlight) == null ? void 0 : _a.elements[0]) === target)\n      return;\n    if (this._kind === "text" || this._kind === "snapshot")\n      this._hoverHighlight = this._recorder.injectedScript.utils.elementText(this._textCache, target).full ? { elements: [target], selector: "" } : null;\n    else\n      this._hoverHighlight = this._elementHasValue(target) ? this._recorder.injectedScript.generateSelector(target, { testIdAttributeName: this._recorder.state.testIdAttributeName }) : null;\n    if (this._hoverHighlight)\n      this._hoverHighlight.color = "#8acae480";\n    this._recorder.updateHighlight(this._hoverHighlight, true);\n  }\n  onKeyDown(event) {\n    if (event.key === "Escape")\n      this._recorder.setMode("recording");\n    consumeEvent(event);\n  }\n  onScroll(event) {\n    this._recorder.updateHighlight(this._hoverHighlight, false);\n  }\n  _elementHasValue(element) {\n    return element.nodeName === "TEXTAREA" || element.nodeName === "SELECT" || element.nodeName === "INPUT" && !["button", "image", "reset", "submit"].includes(element.type);\n  }\n  _generateAction() {\n    var _a;\n    this._textCache.clear();\n    const target = (_a = this._hoverHighlight) == null ? void 0 : _a.elements[0];\n    if (!target)\n      return null;\n    if (this._kind === "value") {\n      if (!this._elementHasValue(target))\n        return null;\n      const { selector } = this._recorder.injectedScript.generateSelector(target, { testIdAttributeName: this._recorder.state.testIdAttributeName });\n      if (target.nodeName === "INPUT" && ["checkbox", "radio"].includes(target.type.toLowerCase())) {\n        return {\n          name: "assertChecked",\n          selector,\n          signals: [],\n          // Interestingly, inputElement.checked is reversed inside this event handler.\n          checked: !target.checked\n        };\n      } else {\n        return {\n          name: "assertValue",\n          selector,\n          signals: [],\n          value: target.value\n        };\n      }\n    } else if (this._kind === "snapshot") {\n      this._hoverHighlight = this._recorder.injectedScript.generateSelector(target, { testIdAttributeName: this._recorder.state.testIdAttributeName, forTextExpect: true });\n      this._hoverHighlight.color = "#8acae480";\n      this._recorder.updateHighlight(this._hoverHighlight, true);\n      return {\n        name: "assertSnapshot",\n        selector: this._hoverHighlight.selector,\n        signals: [],\n        snapshot: this._recorder.injectedScript.ariaSnapshot(target, { mode: "regex" })\n      };\n    } else {\n      this._hoverHighlight = this._recorder.injectedScript.generateSelector(target, { testIdAttributeName: this._recorder.state.testIdAttributeName, forTextExpect: true });\n      this._hoverHighlight.color = "#8acae480";\n      this._recorder.updateHighlight(this._hoverHighlight, true);\n      return {\n        name: "assertText",\n        selector: this._hoverHighlight.selector,\n        signals: [],\n        text: this._recorder.injectedScript.utils.elementText(this._textCache, target).normalized,\n        substring: true\n      };\n    }\n  }\n  _renderValue(action) {\n    if ((action == null ? void 0 : action.name) === "assertText")\n      return this._recorder.injectedScript.utils.normalizeWhiteSpace(action.text);\n    if ((action == null ? void 0 : action.name) === "assertChecked")\n      return String(action.checked);\n    if ((action == null ? void 0 : action.name) === "assertValue")\n      return action.value;\n    if ((action == null ? void 0 : action.name) === "assertSnapshot")\n      return action.snapshot;\n    return "";\n  }\n  _commit() {\n    if (!this._action || !this._dialog.isShowing())\n      return;\n    this._dialog.close();\n    this._recorder.recordAction(this._action);\n    this._recorder.setMode("recording");\n  }\n  _showDialog() {\n    var _a, _b, _c, _d;\n    if (!((_a = this._hoverHighlight) == null ? void 0 : _a.elements[0]))\n      return;\n    this._action = this._generateAction();\n    if (((_b = this._action) == null ? void 0 : _b.name) === "assertText") {\n      this._showTextDialog(this._action);\n    } else if (((_c = this._action) == null ? void 0 : _c.name) === "assertSnapshot") {\n      this._recorder.recordAction(this._action);\n      this._recorder.setMode("recording");\n      (_d = this._recorder.overlay) == null ? void 0 : _d.flashToolSucceeded("assertingSnapshot");\n    }\n  }\n  _showTextDialog(action) {\n    const textElement = this._recorder.document.createElement("textarea");\n    textElement.setAttribute("spellcheck", "false");\n    textElement.value = this._renderValue(action);\n    textElement.classList.add("text-editor");\n    const updateAndValidate = () => {\n      var _a;\n      const newValue = this._recorder.injectedScript.utils.normalizeWhiteSpace(textElement.value);\n      const target = (_a = this._hoverHighlight) == null ? void 0 : _a.elements[0];\n      if (!target)\n        return;\n      action.text = newValue;\n      const targetText = this._recorder.injectedScript.utils.elementText(this._textCache, target).normalized;\n      const matches = newValue && targetText.includes(newValue);\n      textElement.classList.toggle("does-not-match", !matches);\n    };\n    textElement.addEventListener("input", updateAndValidate);\n    const label = "Assert that element contains text";\n    const dialogElement = this._dialog.show({\n      label,\n      body: textElement,\n      onCommit: () => this._commit()\n    });\n    const position = this._recorder.highlight.tooltipPosition(this._recorder.highlight.firstBox(), dialogElement);\n    this._dialog.moveTo(position.anchorTop, position.anchorLeft);\n    textElement.focus();\n  }\n  _commitAssertValue() {\n    var _a;\n    if (this._kind !== "value")\n      return;\n    const action = this._generateAction();\n    if (!action)\n      return;\n    this._recorder.recordAction(action);\n    this._recorder.setMode("recording");\n    (_a = this._recorder.overlay) == null ? void 0 : _a.flashToolSucceeded("assertingValue");\n  }\n};\nvar Overlay = class {\n  constructor(recorder) {\n    this._listeners = [];\n    this._offsetX = 0;\n    this._measure = { width: 0, height: 0 };\n    this._recorder = recorder;\n    const document = this._recorder.document;\n    this._overlayElement = document.createElement("x-pw-overlay");\n    const toolsListElement = document.createElement("x-pw-tools-list");\n    this._overlayElement.appendChild(toolsListElement);\n    this._dragHandle = document.createElement("x-pw-tool-gripper");\n    this._dragHandle.appendChild(document.createElement("x-div"));\n    toolsListElement.appendChild(this._dragHandle);\n    this._recordToggle = this._recorder.document.createElement("x-pw-tool-item");\n    this._recordToggle.title = "Record";\n    this._recordToggle.classList.add("record");\n    this._recordToggle.appendChild(this._recorder.document.createElement("x-div"));\n    toolsListElement.appendChild(this._recordToggle);\n    this._pickLocatorToggle = this._recorder.document.createElement("x-pw-tool-item");\n    this._pickLocatorToggle.title = "Pick locator";\n    this._pickLocatorToggle.classList.add("pick-locator");\n    this._pickLocatorToggle.appendChild(this._recorder.document.createElement("x-div"));\n    toolsListElement.appendChild(this._pickLocatorToggle);\n    this._assertVisibilityToggle = this._recorder.document.createElement("x-pw-tool-item");\n    this._assertVisibilityToggle.title = "Assert visibility";\n    this._assertVisibilityToggle.classList.add("visibility");\n    this._assertVisibilityToggle.appendChild(this._recorder.document.createElement("x-div"));\n    toolsListElement.appendChild(this._assertVisibilityToggle);\n    this._assertTextToggle = this._recorder.document.createElement("x-pw-tool-item");\n    this._assertTextToggle.title = "Assert text";\n    this._assertTextToggle.classList.add("text");\n    this._assertTextToggle.appendChild(this._recorder.document.createElement("x-div"));\n    toolsListElement.appendChild(this._assertTextToggle);\n    this._assertValuesToggle = this._recorder.document.createElement("x-pw-tool-item");\n    this._assertValuesToggle.title = "Assert value";\n    this._assertValuesToggle.classList.add("value");\n    this._assertValuesToggle.appendChild(this._recorder.document.createElement("x-div"));\n    toolsListElement.appendChild(this._assertValuesToggle);\n    this._assertSnapshotToggle = this._recorder.document.createElement("x-pw-tool-item");\n    this._assertSnapshotToggle.title = "Assert snapshot";\n    this._assertSnapshotToggle.classList.add("snapshot");\n    this._assertSnapshotToggle.appendChild(this._recorder.document.createElement("x-div"));\n    toolsListElement.appendChild(this._assertSnapshotToggle);\n    this._updateVisualPosition();\n    this._refreshListeners();\n  }\n  _refreshListeners() {\n    removeEventListeners(this._listeners);\n    this._listeners = [\n      addEventListener(this._dragHandle, "mousedown", (event) => {\n        this._dragState = { offsetX: this._offsetX, dragStart: { x: event.clientX, y: 0 } };\n      }),\n      addEventListener(this._recordToggle, "click", () => {\n        if (this._recordToggle.classList.contains("disabled"))\n          return;\n        this._recorder.setMode(this._recorder.state.mode === "none" || this._recorder.state.mode === "standby" || this._recorder.state.mode === "inspecting" ? "recording" : "standby");\n      }),\n      addEventListener(this._pickLocatorToggle, "click", () => {\n        if (this._pickLocatorToggle.classList.contains("disabled"))\n          return;\n        const newMode = {\n          "inspecting": "standby",\n          "none": "inspecting",\n          "standby": "inspecting",\n          "recording": "recording-inspecting",\n          "recording-inspecting": "recording",\n          "assertingText": "recording-inspecting",\n          "assertingVisibility": "recording-inspecting",\n          "assertingValue": "recording-inspecting",\n          "assertingSnapshot": "recording-inspecting"\n        };\n        this._recorder.setMode(newMode[this._recorder.state.mode]);\n      }),\n      addEventListener(this._assertVisibilityToggle, "click", () => {\n        if (!this._assertVisibilityToggle.classList.contains("disabled"))\n          this._recorder.setMode(this._recorder.state.mode === "assertingVisibility" ? "recording" : "assertingVisibility");\n      }),\n      addEventListener(this._assertTextToggle, "click", () => {\n        if (!this._assertTextToggle.classList.contains("disabled"))\n          this._recorder.setMode(this._recorder.state.mode === "assertingText" ? "recording" : "assertingText");\n      }),\n      addEventListener(this._assertValuesToggle, "click", () => {\n        if (!this._assertValuesToggle.classList.contains("disabled"))\n          this._recorder.setMode(this._recorder.state.mode === "assertingValue" ? "recording" : "assertingValue");\n      }),\n      addEventListener(this._assertSnapshotToggle, "click", () => {\n        if (!this._assertSnapshotToggle.classList.contains("disabled"))\n          this._recorder.setMode(this._recorder.state.mode === "assertingSnapshot" ? "recording" : "assertingSnapshot");\n      })\n    ];\n  }\n  install() {\n    this._recorder.highlight.appendChild(this._overlayElement);\n    this._refreshListeners();\n    this._updateVisualPosition();\n  }\n  contains(element) {\n    return this._recorder.injectedScript.utils.isInsideScope(this._overlayElement, element);\n  }\n  setUIState(state) {\n    this._recordToggle.classList.toggle("toggled", state.mode === "recording" || state.mode === "assertingText" || state.mode === "assertingVisibility" || state.mode === "assertingValue" || state.mode === "assertingSnapshot" || state.mode === "recording-inspecting");\n    this._pickLocatorToggle.classList.toggle("toggled", state.mode === "inspecting" || state.mode === "recording-inspecting");\n    this._assertVisibilityToggle.classList.toggle("toggled", state.mode === "assertingVisibility");\n    this._assertVisibilityToggle.classList.toggle("disabled", state.mode === "none" || state.mode === "standby" || state.mode === "inspecting");\n    this._assertTextToggle.classList.toggle("toggled", state.mode === "assertingText");\n    this._assertTextToggle.classList.toggle("disabled", state.mode === "none" || state.mode === "standby" || state.mode === "inspecting");\n    this._assertValuesToggle.classList.toggle("toggled", state.mode === "assertingValue");\n    this._assertValuesToggle.classList.toggle("disabled", state.mode === "none" || state.mode === "standby" || state.mode === "inspecting");\n    this._assertSnapshotToggle.classList.toggle("toggled", state.mode === "assertingSnapshot");\n    this._assertSnapshotToggle.classList.toggle("disabled", state.mode === "none" || state.mode === "standby" || state.mode === "inspecting");\n    if (this._offsetX !== state.overlay.offsetX) {\n      this._offsetX = state.overlay.offsetX;\n      this._updateVisualPosition();\n    }\n    if (state.mode === "none")\n      this._hideOverlay();\n    else\n      this._showOverlay();\n  }\n  flashToolSucceeded(tool) {\n    let element;\n    if (tool === "assertingVisibility")\n      element = this._assertVisibilityToggle;\n    else if (tool === "assertingSnapshot")\n      element = this._assertSnapshotToggle;\n    else\n      element = this._assertValuesToggle;\n    element.classList.add("succeeded");\n    this._recorder.injectedScript.builtinSetTimeout(() => element.classList.remove("succeeded"), 2e3);\n  }\n  _hideOverlay() {\n    this._overlayElement.setAttribute("hidden", "true");\n  }\n  _showOverlay() {\n    if (!this._overlayElement.hasAttribute("hidden"))\n      return;\n    this._overlayElement.removeAttribute("hidden");\n    this._updateVisualPosition();\n  }\n  _updateVisualPosition() {\n    this._measure = this._overlayElement.getBoundingClientRect();\n    this._overlayElement.style.left = (this._recorder.injectedScript.window.innerWidth - this._measure.width) / 2 + this._offsetX + "px";\n  }\n  onMouseMove(event) {\n    if (!event.buttons) {\n      this._dragState = void 0;\n      return false;\n    }\n    if (this._dragState) {\n      this._offsetX = this._dragState.offsetX + event.clientX - this._dragState.dragStart.x;\n      const halfGapSize = (this._recorder.injectedScript.window.innerWidth - this._measure.width) / 2 - 10;\n      this._offsetX = Math.max(-halfGapSize, Math.min(halfGapSize, this._offsetX));\n      this._updateVisualPosition();\n      this._recorder.setOverlayState({ offsetX: this._offsetX });\n      consumeEvent(event);\n      return true;\n    }\n    return false;\n  }\n  onMouseUp(event) {\n    if (this._dragState) {\n      consumeEvent(event);\n      return true;\n    }\n    return false;\n  }\n  onClick(event) {\n    if (this._dragState) {\n      this._dragState = void 0;\n      consumeEvent(event);\n      return true;\n    }\n    return false;\n  }\n  onDblClick(event) {\n    return false;\n  }\n};\nvar Recorder = class {\n  constructor(injectedScript) {\n    this._listeners = [];\n    this._lastHighlightedSelector = void 0;\n    this._lastHighlightedAriaTemplateJSON = "undefined";\n    this.state = {\n      mode: "none",\n      testIdAttributeName: "data-testid",\n      language: "javascript",\n      overlay: { offsetX: 0 }\n    };\n    this._delegate = {};\n    this.document = injectedScript.document;\n    this.injectedScript = injectedScript;\n    this.highlight = injectedScript.createHighlight();\n    this._tools = {\n      "none": new NoneTool(),\n      "standby": new NoneTool(),\n      "inspecting": new InspectTool(this, false),\n      "recording": new RecordActionTool(this),\n      "recording-inspecting": new InspectTool(this, false),\n      "assertingText": new TextAssertionTool(this, "text"),\n      "assertingVisibility": new InspectTool(this, true),\n      "assertingValue": new TextAssertionTool(this, "value"),\n      "assertingSnapshot": new TextAssertionTool(this, "snapshot")\n    };\n    this._currentTool = this._tools.none;\n    if (injectedScript.window.top === injectedScript.window) {\n      this.overlay = new Overlay(this);\n      this.overlay.setUIState(this.state);\n    }\n    this._stylesheet = new injectedScript.window.CSSStyleSheet();\n    this._stylesheet.replaceSync(`\n      body[data-pw-cursor=pointer] *, body[data-pw-cursor=pointer] *::after { cursor: pointer !important; }\n      body[data-pw-cursor=text] *, body[data-pw-cursor=text] *::after { cursor: text !important; }\n    `);\n    this.installListeners();\n    injectedScript.utils.cacheNormalizedWhitespaces();\n    if (injectedScript.isUnderTest)\n      console.error("Recorder script ready for test");\n  }\n  installListeners() {\n    var _a;\n    removeEventListeners(this._listeners);\n    this._listeners = [\n      addEventListener(this.document, "click", (event) => this._onClick(event), true),\n      addEventListener(this.document, "auxclick", (event) => this._onClick(event), true),\n      addEventListener(this.document, "dblclick", (event) => this._onDblClick(event), true),\n      addEventListener(this.document, "contextmenu", (event) => this._onContextMenu(event), true),\n      addEventListener(this.document, "dragstart", (event) => this._onDragStart(event), true),\n      addEventListener(this.document, "input", (event) => this._onInput(event), true),\n      addEventListener(this.document, "keydown", (event) => this._onKeyDown(event), true),\n      addEventListener(this.document, "keyup", (event) => this._onKeyUp(event), true),\n      addEventListener(this.document, "pointerdown", (event) => this._onPointerDown(event), true),\n      addEventListener(this.document, "pointerup", (event) => this._onPointerUp(event), true),\n      addEventListener(this.document, "mousedown", (event) => this._onMouseDown(event), true),\n      addEventListener(this.document, "mouseup", (event) => this._onMouseUp(event), true),\n      addEventListener(this.document, "mousemove", (event) => this._onMouseMove(event), true),\n      addEventListener(this.document, "mouseleave", (event) => this._onMouseLeave(event), true),\n      addEventListener(this.document, "mouseenter", (event) => this._onMouseEnter(event), true),\n      addEventListener(this.document, "focus", (event) => this._onFocus(event), true),\n      addEventListener(this.document, "scroll", (event) => this._onScroll(event), true)\n    ];\n    this.highlight.install();\n    let recreationInterval;\n    const recreate = () => {\n      this.highlight.install();\n      recreationInterval = this.injectedScript.builtinSetTimeout(recreate, 500);\n    };\n    recreationInterval = this.injectedScript.builtinSetTimeout(recreate, 500);\n    this._listeners.push(() => this.injectedScript.builtinClearTimeout(recreationInterval));\n    this.highlight.appendChild(createSvgElement(this.document, clipPaths_default));\n    (_a = this.overlay) == null ? void 0 : _a.install();\n    this.document.adoptedStyleSheets.push(this._stylesheet);\n  }\n  _switchCurrentTool() {\n    var _a, _b, _c;\n    const newTool = this._tools[this.state.mode];\n    if (newTool === this._currentTool)\n      return;\n    (_b = (_a = this._currentTool).cleanup) == null ? void 0 : _b.call(_a);\n    this.clearHighlight();\n    this._currentTool = newTool;\n    (_c = this.injectedScript.document.body) == null ? void 0 : _c.setAttribute("data-pw-cursor", newTool.cursor());\n  }\n  setUIState(state, delegate) {\n    var _a;\n    this._delegate = delegate;\n    if (state.actionPoint && this.state.actionPoint && state.actionPoint.x === this.state.actionPoint.x && state.actionPoint.y === this.state.actionPoint.y) {\n    } else if (!state.actionPoint && !this.state.actionPoint) {\n    } else {\n      if (state.actionPoint)\n        this.highlight.showActionPoint(state.actionPoint.x, state.actionPoint.y);\n      else\n        this.highlight.hideActionPoint();\n    }\n    this.state = state;\n    this.highlight.setLanguage(state.language);\n    this._switchCurrentTool();\n    (_a = this.overlay) == null ? void 0 : _a.setUIState(state);\n    let highlight = "noop";\n    if (state.actionSelector !== this._lastHighlightedSelector) {\n      const model = state.actionSelector ? querySelector(this.injectedScript, state.actionSelector, this.document) : null;\n      highlight = (model == null ? void 0 : model.elements.length) ? model : "clear";\n      this._lastHighlightedSelector = (model == null ? void 0 : model.elements.length) ? state.actionSelector : void 0;\n    }\n    const ariaTemplateJSON = JSON.stringify(state.ariaTemplate);\n    if (this._lastHighlightedAriaTemplateJSON !== ariaTemplateJSON) {\n      const elements = state.ariaTemplate ? this.injectedScript.getAllByAria(this.document, state.ariaTemplate) : [];\n      if (elements.length) {\n        highlight = { elements };\n        this._lastHighlightedAriaTemplateJSON = ariaTemplateJSON;\n      } else {\n        if (!this._lastHighlightedSelector)\n          highlight = "clear";\n        this._lastHighlightedAriaTemplateJSON = "undefined";\n      }\n    }\n    if (highlight === "clear")\n      this.clearHighlight();\n    else if (highlight !== "noop")\n      this._updateHighlight(highlight, false);\n  }\n  clearHighlight() {\n    this.updateHighlight(null, false);\n  }\n  _onClick(event) {\n    var _a, _b, _c;\n    if (!event.isTrusted)\n      return;\n    if ((_a = this.overlay) == null ? void 0 : _a.onClick(event))\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_c = (_b = this._currentTool).onClick) == null ? void 0 : _c.call(_b, event);\n  }\n  _onDblClick(event) {\n    var _a, _b, _c;\n    if (!event.isTrusted)\n      return;\n    if ((_a = this.overlay) == null ? void 0 : _a.onDblClick(event))\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_c = (_b = this._currentTool).onDblClick) == null ? void 0 : _c.call(_b, event);\n  }\n  _onContextMenu(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onContextMenu) == null ? void 0 : _b.call(_a, event);\n  }\n  _onDragStart(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onDragStart) == null ? void 0 : _b.call(_a, event);\n  }\n  _onPointerDown(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onPointerDown) == null ? void 0 : _b.call(_a, event);\n  }\n  _onPointerUp(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onPointerUp) == null ? void 0 : _b.call(_a, event);\n  }\n  _onMouseDown(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onMouseDown) == null ? void 0 : _b.call(_a, event);\n  }\n  _onMouseUp(event) {\n    var _a, _b, _c;\n    if (!event.isTrusted)\n      return;\n    if ((_a = this.overlay) == null ? void 0 : _a.onMouseUp(event))\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_c = (_b = this._currentTool).onMouseUp) == null ? void 0 : _c.call(_b, event);\n  }\n  _onMouseMove(event) {\n    var _a, _b, _c;\n    if (!event.isTrusted)\n      return;\n    if ((_a = this.overlay) == null ? void 0 : _a.onMouseMove(event))\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_c = (_b = this._currentTool).onMouseMove) == null ? void 0 : _c.call(_b, event);\n  }\n  _onMouseEnter(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onMouseEnter) == null ? void 0 : _b.call(_a, event);\n  }\n  _onMouseLeave(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onMouseLeave) == null ? void 0 : _b.call(_a, event);\n  }\n  _onFocus(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onFocus) == null ? void 0 : _b.call(_a, event);\n  }\n  _onScroll(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    this._lastHighlightedSelector = void 0;\n    this._lastHighlightedAriaTemplateJSON = "undefined";\n    this.highlight.hideActionPoint();\n    (_b = (_a = this._currentTool).onScroll) == null ? void 0 : _b.call(_a, event);\n  }\n  _onInput(event) {\n    var _a, _b;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onInput) == null ? void 0 : _b.call(_a, event);\n  }\n  _onKeyDown(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onKeyDown) == null ? void 0 : _b.call(_a, event);\n  }\n  _onKeyUp(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onKeyUp) == null ? void 0 : _b.call(_a, event);\n  }\n  updateHighlight(model, userGesture) {\n    this._lastHighlightedSelector = void 0;\n    this._lastHighlightedAriaTemplateJSON = "undefined";\n    this._updateHighlight(model, userGesture);\n  }\n  _updateHighlight(model, userGesture) {\n    var _a, _b;\n    let tooltipText = model == null ? void 0 : model.tooltipText;\n    if (tooltipText === void 0 && !(model == null ? void 0 : model.tooltipList) && (model == null ? void 0 : model.selector))\n      tooltipText = this.injectedScript.utils.asLocator(this.state.language, model.selector);\n    this.highlight.updateHighlight((model == null ? void 0 : model.elements) || [], { ...model, tooltipText });\n    if (userGesture)\n      (_b = (_a = this._delegate).highlightUpdated) == null ? void 0 : _b.call(_a);\n  }\n  _ignoreOverlayEvent(event) {\n    return event.composedPath().some((e) => {\n      const nodeName = e.nodeName || "";\n      return nodeName.toLowerCase() === "x-pw-glass";\n    });\n  }\n  deepEventTarget(event) {\n    var _a;\n    for (const element of event.composedPath()) {\n      if (!((_a = this.overlay) == null ? void 0 : _a.contains(element)))\n        return element;\n    }\n    return event.composedPath()[0];\n  }\n  setMode(mode) {\n    var _a, _b;\n    void ((_b = (_a = this._delegate).setMode) == null ? void 0 : _b.call(_a, mode));\n  }\n  async performAction(action) {\n    var _a, _b;\n    await ((_b = (_a = this._delegate).performAction) == null ? void 0 : _b.call(_a, action).catch(() => {\n    }));\n  }\n  recordAction(action) {\n    var _a, _b;\n    void ((_b = (_a = this._delegate).recordAction) == null ? void 0 : _b.call(_a, action));\n  }\n  setOverlayState(state) {\n    var _a, _b;\n    void ((_b = (_a = this._delegate).setOverlayState) == null ? void 0 : _b.call(_a, state));\n  }\n  elementPicked(selector, model) {\n    var _a, _b;\n    const ariaSnapshot = this.injectedScript.ariaSnapshot(model.elements[0]);\n    void ((_b = (_a = this._delegate).elementPicked) == null ? void 0 : _b.call(_a, { selector, ariaSnapshot }));\n  }\n};\nvar Dialog = class {\n  constructor(recorder) {\n    this._dialogElement = null;\n    this._recorder = recorder;\n  }\n  isShowing() {\n    return !!this._dialogElement;\n  }\n  show(options) {\n    const acceptButton = this._recorder.document.createElement("x-pw-tool-item");\n    acceptButton.title = "Accept";\n    acceptButton.classList.add("accept");\n    acceptButton.appendChild(this._recorder.document.createElement("x-div"));\n    acceptButton.addEventListener("click", () => options.onCommit());\n    const cancelButton = this._recorder.document.createElement("x-pw-tool-item");\n    cancelButton.title = "Close";\n    cancelButton.classList.add("cancel");\n    cancelButton.appendChild(this._recorder.document.createElement("x-div"));\n    cancelButton.addEventListener("click", () => {\n      var _a;\n      this.close();\n      (_a = options.onCancel) == null ? void 0 : _a.call(options);\n    });\n    this._dialogElement = this._recorder.document.createElement("x-pw-dialog");\n    this._keyboardListener = (event) => {\n      var _a;\n      if (event.key === "Escape") {\n        this.close();\n        (_a = options.onCancel) == null ? void 0 : _a.call(options);\n        return;\n      }\n      if (event.key === "Enter" && (event.ctrlKey || event.metaKey)) {\n        if (this._dialogElement)\n          options.onCommit();\n        return;\n      }\n    };\n    this._recorder.document.addEventListener("keydown", this._keyboardListener, true);\n    const toolbarElement = this._recorder.document.createElement("x-pw-tools-list");\n    const labelElement = this._recorder.document.createElement("label");\n    labelElement.textContent = options.label;\n    toolbarElement.appendChild(labelElement);\n    toolbarElement.appendChild(this._recorder.document.createElement("x-spacer"));\n    toolbarElement.appendChild(acceptButton);\n    toolbarElement.appendChild(cancelButton);\n    this._dialogElement.appendChild(toolbarElement);\n    const bodyElement = this._recorder.document.createElement("x-pw-dialog-body");\n    bodyElement.appendChild(options.body);\n    this._dialogElement.appendChild(bodyElement);\n    this._recorder.highlight.appendChild(this._dialogElement);\n    return this._dialogElement;\n  }\n  moveTo(top, left) {\n    if (!this._dialogElement)\n      return;\n    this._dialogElement.style.top = top + "px";\n    this._dialogElement.style.left = left + "px";\n  }\n  close() {\n    if (!this._dialogElement)\n      return;\n    this._dialogElement.remove();\n    this._recorder.document.removeEventListener("keydown", this._keyboardListener);\n    this._dialogElement = null;\n  }\n};\nfunction deepActiveElement(document) {\n  let activeElement = document.activeElement;\n  while (activeElement && activeElement.shadowRoot && activeElement.shadowRoot.activeElement)\n    activeElement = activeElement.shadowRoot.activeElement;\n  return activeElement;\n}\nfunction modifiersForEvent(event) {\n  return (event.altKey ? 1 : 0) | (event.ctrlKey ? 2 : 0) | (event.metaKey ? 4 : 0) | (event.shiftKey ? 8 : 0);\n}\nfunction buttonForEvent(event) {\n  switch (event.which) {\n    case 1:\n      return "left";\n    case 2:\n      return "middle";\n    case 3:\n      return "right";\n  }\n  return "left";\n}\nfunction positionForEvent(event) {\n  const targetElement = event.target;\n  if (targetElement.nodeName !== "CANVAS")\n    return;\n  return {\n    x: event.offsetX,\n    y: event.offsetY\n  };\n}\nfunction consumeEvent(e) {\n  e.preventDefault();\n  e.stopPropagation();\n  e.stopImmediatePropagation();\n}\nfunction asCheckbox(node) {\n  if (!node || node.nodeName !== "INPUT")\n    return null;\n  const inputElement = node;\n  return ["checkbox", "radio"].includes(inputElement.type) ? inputElement : null;\n}\nfunction isRangeInput(node) {\n  if (!node || node.nodeName !== "INPUT")\n    return false;\n  const inputElement = node;\n  return inputElement.type.toLowerCase() === "range";\n}\nfunction addEventListener(target, eventName, listener, useCapture) {\n  target.addEventListener(eventName, listener, useCapture);\n  const remove = () => {\n    target.removeEventListener(eventName, listener, useCapture);\n  };\n  return remove;\n}\nfunction removeEventListeners(listeners) {\n  for (const listener of listeners)\n    listener();\n  listeners.splice(0, listeners.length);\n}\nfunction querySelector(injectedScript, selector, ownerDocument) {\n  try {\n    const parsedSelector = injectedScript.parseSelector(selector);\n    return {\n      selector,\n      elements: injectedScript.querySelectorAll(parsedSelector, ownerDocument)\n    };\n  } catch (e) {\n    return {\n      selector,\n      elements: []\n    };\n  }\n}\nfunction createSvgElement(doc, { tagName, attrs, children }) {\n  const elem = doc.createElementNS("http://www.w3.org/2000/svg", tagName);\n  if (attrs) {\n    for (const [k, v] of Object.entries(attrs))\n      elem.setAttribute(k, v);\n  }\n  if (children) {\n    for (const c of children)\n      elem.appendChild(createSvgElement(doc, c));\n  }\n  return elem;\n}\n\n// packages/playwright-core/src/server/injected/recorder/pollingRecorder.ts\nvar PollingRecorder = class {\n  constructor(injectedScript) {\n    this._recorder = new Recorder(injectedScript);\n    this._embedder = injectedScript.window;\n    injectedScript.onGlobalListenersRemoved.add(() => this._recorder.installListeners());\n    const refreshOverlay = () => {\n      this._lastStateJSON = void 0;\n      this._pollRecorderMode().catch((e) => console.log(e));\n    };\n    this._embedder.__pw_refreshOverlay = refreshOverlay;\n    refreshOverlay();\n  }\n  async _pollRecorderMode() {\n    const pollPeriod = 1e3;\n    if (this._pollRecorderModeTimer)\n      clearTimeout(this._pollRecorderModeTimer);\n    const state = await this._embedder.__pw_recorderState().catch(() => null);\n    if (!state) {\n      this._pollRecorderModeTimer = this._recorder.injectedScript.builtinSetTimeout(() => this._pollRecorderMode(), pollPeriod);\n      return;\n    }\n    const stringifiedState = JSON.stringify(state);\n    if (this._lastStateJSON !== stringifiedState) {\n      this._lastStateJSON = stringifiedState;\n      const win = this._recorder.document.defaultView;\n      if (win.top !== win) {\n        state.actionPoint = void 0;\n      }\n      this._recorder.setUIState(state, this);\n    }\n    this._pollRecorderModeTimer = this._recorder.injectedScript.builtinSetTimeout(() => this._pollRecorderMode(), pollPeriod);\n  }\n  async performAction(action) {\n    await this._embedder.__pw_recorderPerformAction(action);\n  }\n  async recordAction(action) {\n    await this._embedder.__pw_recorderRecordAction(action);\n  }\n  async elementPicked(elementInfo) {\n    await this._embedder.__pw_recorderElementPicked(elementInfo);\n  }\n  async setMode(mode) {\n    await this._embedder.__pw_recorderSetMode(mode);\n  }\n  async setOverlayState(state) {\n    await this._embedder.__pw_recorderSetOverlayState(state);\n  }\n};\nvar pollingRecorder_default = PollingRecorder;\n';
  return pollingRecorderSource;
}
var languages = {};
var csharp = {};
var deviceDescriptors = {};
const require$$0$1 = {
  "Blackberry PlayBook": { "userAgent": "Mozilla/5.0 (PlayBook; U; RIM Tablet OS 2.1.0; en-US) AppleWebKit/536.2+ (KHTML like Gecko) Version/18.4 Safari/536.2+", "viewport": { "width": 600, "height": 1024 }, "deviceScaleFactor": 1, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "Blackberry PlayBook landscape": { "userAgent": "Mozilla/5.0 (PlayBook; U; RIM Tablet OS 2.1.0; en-US) AppleWebKit/536.2+ (KHTML like Gecko) Version/18.4 Safari/536.2+", "viewport": { "width": 1024, "height": 600 }, "deviceScaleFactor": 1, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "BlackBerry Z30": { "userAgent": "Mozilla/5.0 (BB10; Touch) AppleWebKit/537.10+ (KHTML, like Gecko) Version/18.4 Mobile Safari/537.10+", "viewport": { "width": 360, "height": 640 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "BlackBerry Z30 landscape": { "userAgent": "Mozilla/5.0 (BB10; Touch) AppleWebKit/537.10+ (KHTML, like Gecko) Version/18.4 Mobile Safari/537.10+", "viewport": { "width": 640, "height": 360 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "Galaxy Note 3": { "userAgent": "Mozilla/5.0 (Linux; U; Android 4.3; en-us; SM-N900T Build/JSS15J) AppleWebKit/534.30 (KHTML, like Gecko) Version/18.4 Mobile Safari/534.30", "viewport": { "width": 360, "height": 640 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "Galaxy Note 3 landscape": { "userAgent": "Mozilla/5.0 (Linux; U; Android 4.3; en-us; SM-N900T Build/JSS15J) AppleWebKit/534.30 (KHTML, like Gecko) Version/18.4 Mobile Safari/534.30", "viewport": { "width": 640, "height": 360 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "Galaxy Note II": { "userAgent": "Mozilla/5.0 (Linux; U; Android 4.1; en-us; GT-N7100 Build/JRO03C) AppleWebKit/534.30 (KHTML, like Gecko) Version/18.4 Mobile Safari/534.30", "viewport": { "width": 360, "height": 640 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "Galaxy Note II landscape": { "userAgent": "Mozilla/5.0 (Linux; U; Android 4.1; en-us; GT-N7100 Build/JRO03C) AppleWebKit/534.30 (KHTML, like Gecko) Version/18.4 Mobile Safari/534.30", "viewport": { "width": 640, "height": 360 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "Galaxy S III": { "userAgent": "Mozilla/5.0 (Linux; U; Android 4.0; en-us; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/18.4 Mobile Safari/534.30", "viewport": { "width": 360, "height": 640 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "Galaxy S III landscape": { "userAgent": "Mozilla/5.0 (Linux; U; Android 4.0; en-us; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/18.4 Mobile Safari/534.30", "viewport": { "width": 640, "height": 360 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "Galaxy S5": { "userAgent": "Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 360, "height": 640 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Galaxy S5 landscape": { "userAgent": "Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 640, "height": 360 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Galaxy S8": { "userAgent": "Mozilla/5.0 (Linux; Android 7.0; SM-G950U Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 360, "height": 740 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Galaxy S8 landscape": { "userAgent": "Mozilla/5.0 (Linux; Android 7.0; SM-G950U Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 740, "height": 360 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Galaxy S9+": { "userAgent": "Mozilla/5.0 (Linux; Android 8.0.0; SM-G965U Build/R16NW) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 320, "height": 658 }, "deviceScaleFactor": 4.5, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Galaxy S9+ landscape": { "userAgent": "Mozilla/5.0 (Linux; Android 8.0.0; SM-G965U Build/R16NW) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 658, "height": 320 }, "deviceScaleFactor": 4.5, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Galaxy Tab S4": { "userAgent": "Mozilla/5.0 (Linux; Android 8.1.0; SM-T837A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Safari/537.36", "viewport": { "width": 712, "height": 1138 }, "deviceScaleFactor": 2.25, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Galaxy Tab S4 landscape": { "userAgent": "Mozilla/5.0 (Linux; Android 8.1.0; SM-T837A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Safari/537.36", "viewport": { "width": 1138, "height": 712 }, "deviceScaleFactor": 2.25, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "iPad (gen 5)": { "userAgent": "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "viewport": { "width": 768, "height": 1024 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPad (gen 5) landscape": { "userAgent": "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "viewport": { "width": 1024, "height": 768 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPad (gen 6)": { "userAgent": "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "viewport": { "width": 768, "height": 1024 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPad (gen 6) landscape": { "userAgent": "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "viewport": { "width": 1024, "height": 768 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPad (gen 7)": { "userAgent": "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "viewport": { "width": 810, "height": 1080 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPad (gen 7) landscape": { "userAgent": "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "viewport": { "width": 1080, "height": 810 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPad Mini": { "userAgent": "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "viewport": { "width": 768, "height": 1024 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPad Mini landscape": { "userAgent": "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "viewport": { "width": 1024, "height": 768 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPad Pro 11": { "userAgent": "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "viewport": { "width": 834, "height": 1194 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPad Pro 11 landscape": { "userAgent": "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "viewport": { "width": 1194, "height": 834 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 6": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1", "viewport": { "width": 375, "height": 667 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 6 landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1", "viewport": { "width": 667, "height": 375 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 6 Plus": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1", "viewport": { "width": 414, "height": 736 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 6 Plus landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1", "viewport": { "width": 736, "height": 414 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 7": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1", "viewport": { "width": 375, "height": 667 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 7 landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1", "viewport": { "width": 667, "height": 375 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 7 Plus": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1", "viewport": { "width": 414, "height": 736 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 7 Plus landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1", "viewport": { "width": 736, "height": 414 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 8": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1", "viewport": { "width": 375, "height": 667 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 8 landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1", "viewport": { "width": 667, "height": 375 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 8 Plus": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1", "viewport": { "width": 414, "height": 736 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 8 Plus landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1", "viewport": { "width": 736, "height": 414 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone SE": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/18.4 Mobile/14E304 Safari/602.1", "viewport": { "width": 320, "height": 568 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone SE landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/18.4 Mobile/14E304 Safari/602.1", "viewport": { "width": 568, "height": 320 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone X": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1", "viewport": { "width": 375, "height": 812 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone X landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1", "viewport": { "width": 812, "height": 375 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone XR": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 12_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "viewport": { "width": 414, "height": 896 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone XR landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 12_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "viewport": { "width": 896, "height": 414 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 11": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 414, "height": 896 }, "viewport": { "width": 414, "height": 715 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 11 landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 414, "height": 896 }, "viewport": { "width": 800, "height": 364 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 11 Pro": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 375, "height": 812 }, "viewport": { "width": 375, "height": 635 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 11 Pro landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 375, "height": 812 }, "viewport": { "width": 724, "height": 325 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 11 Pro Max": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 414, "height": 896 }, "viewport": { "width": 414, "height": 715 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 11 Pro Max landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 414, "height": 896 }, "viewport": { "width": 808, "height": 364 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 12": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 390, "height": 844 }, "viewport": { "width": 390, "height": 664 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 12 landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 390, "height": 844 }, "viewport": { "width": 750, "height": 340 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 12 Pro": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 390, "height": 844 }, "viewport": { "width": 390, "height": 664 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 12 Pro landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 390, "height": 844 }, "viewport": { "width": 750, "height": 340 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 12 Pro Max": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 428, "height": 926 }, "viewport": { "width": 428, "height": 746 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 12 Pro Max landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 428, "height": 926 }, "viewport": { "width": 832, "height": 378 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 12 Mini": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 375, "height": 812 }, "viewport": { "width": 375, "height": 629 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 12 Mini landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 375, "height": 812 }, "viewport": { "width": 712, "height": 325 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 13": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 390, "height": 844 }, "viewport": { "width": 390, "height": 664 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 13 landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 390, "height": 844 }, "viewport": { "width": 750, "height": 342 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 13 Pro": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 390, "height": 844 }, "viewport": { "width": 390, "height": 664 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 13 Pro landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 390, "height": 844 }, "viewport": { "width": 750, "height": 342 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 13 Pro Max": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 428, "height": 926 }, "viewport": { "width": 428, "height": 746 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 13 Pro Max landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 428, "height": 926 }, "viewport": { "width": 832, "height": 380 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 13 Mini": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 375, "height": 812 }, "viewport": { "width": 375, "height": 629 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 13 Mini landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 375, "height": 812 }, "viewport": { "width": 712, "height": 327 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 14": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 390, "height": 844 }, "viewport": { "width": 390, "height": 664 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 14 landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 390, "height": 844 }, "viewport": { "width": 750, "height": 340 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 14 Plus": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 428, "height": 926 }, "viewport": { "width": 428, "height": 746 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 14 Plus landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 428, "height": 926 }, "viewport": { "width": 832, "height": 378 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 14 Pro": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 393, "height": 852 }, "viewport": { "width": 393, "height": 660 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 14 Pro landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 393, "height": 852 }, "viewport": { "width": 734, "height": 343 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 14 Pro Max": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 430, "height": 932 }, "viewport": { "width": 430, "height": 740 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 14 Pro Max landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 430, "height": 932 }, "viewport": { "width": 814, "height": 380 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 15": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 393, "height": 852 }, "viewport": { "width": 393, "height": 659 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 15 landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 393, "height": 852 }, "viewport": { "width": 734, "height": 343 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 15 Plus": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 430, "height": 932 }, "viewport": { "width": 430, "height": 739 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 15 Plus landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 430, "height": 932 }, "viewport": { "width": 814, "height": 380 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 15 Pro": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 393, "height": 852 }, "viewport": { "width": 393, "height": 659 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 15 Pro landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 393, "height": 852 }, "viewport": { "width": 734, "height": 343 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 15 Pro Max": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 430, "height": 932 }, "viewport": { "width": 430, "height": 739 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "iPhone 15 Pro Max landscape": { "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1", "screen": { "width": 430, "height": 932 }, "viewport": { "width": 814, "height": 380 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "Kindle Fire HDX": { "userAgent": "Mozilla/5.0 (Linux; U; en-us; KFAPWI Build/JDQ39) AppleWebKit/535.19 (KHTML, like Gecko) Silk/3.13 Safari/535.19 Silk-Accelerated=true", "viewport": { "width": 800, "height": 1280 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "Kindle Fire HDX landscape": { "userAgent": "Mozilla/5.0 (Linux; U; en-us; KFAPWI Build/JDQ39) AppleWebKit/535.19 (KHTML, like Gecko) Silk/3.13 Safari/535.19 Silk-Accelerated=true", "viewport": { "width": 1280, "height": 800 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "LG Optimus L70": { "userAgent": "Mozilla/5.0 (Linux; U; Android 4.4.2; en-us; LGMS323 Build/KOT49I.MS32310c) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 384, "height": 640 }, "deviceScaleFactor": 1.25, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "LG Optimus L70 landscape": { "userAgent": "Mozilla/5.0 (Linux; U; Android 4.4.2; en-us; LGMS323 Build/KOT49I.MS32310c) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 640, "height": 384 }, "deviceScaleFactor": 1.25, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Microsoft Lumia 550": { "userAgent": "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 550) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36 Edge/14.14263", "viewport": { "width": 360, "height": 640 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Microsoft Lumia 550 landscape": { "userAgent": "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 550) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36 Edge/14.14263", "viewport": { "width": 640, "height": 360 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Microsoft Lumia 950": { "userAgent": "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 950) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36 Edge/14.14263", "viewport": { "width": 360, "height": 640 }, "deviceScaleFactor": 4, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Microsoft Lumia 950 landscape": { "userAgent": "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 950) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36 Edge/14.14263", "viewport": { "width": 640, "height": 360 }, "deviceScaleFactor": 4, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Nexus 10": { "userAgent": "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 10 Build/MOB31T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Safari/537.36", "viewport": { "width": 800, "height": 1280 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Nexus 10 landscape": { "userAgent": "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 10 Build/MOB31T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Safari/537.36", "viewport": { "width": 1280, "height": 800 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Nexus 4": { "userAgent": "Mozilla/5.0 (Linux; Android 4.4.2; Nexus 4 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 384, "height": 640 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Nexus 4 landscape": { "userAgent": "Mozilla/5.0 (Linux; Android 4.4.2; Nexus 4 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 640, "height": 384 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Nexus 5": { "userAgent": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 360, "height": 640 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Nexus 5 landscape": { "userAgent": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 640, "height": 360 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Nexus 5X": { "userAgent": "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 5X Build/OPR4.170623.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 412, "height": 732 }, "deviceScaleFactor": 2.625, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Nexus 5X landscape": { "userAgent": "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 5X Build/OPR4.170623.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 732, "height": 412 }, "deviceScaleFactor": 2.625, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Nexus 6": { "userAgent": "Mozilla/5.0 (Linux; Android 7.1.1; Nexus 6 Build/N6F26U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 412, "height": 732 }, "deviceScaleFactor": 3.5, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Nexus 6 landscape": { "userAgent": "Mozilla/5.0 (Linux; Android 7.1.1; Nexus 6 Build/N6F26U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 732, "height": 412 }, "deviceScaleFactor": 3.5, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Nexus 6P": { "userAgent": "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 6P Build/OPP3.170518.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 412, "height": 732 }, "deviceScaleFactor": 3.5, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Nexus 6P landscape": { "userAgent": "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 6P Build/OPP3.170518.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 732, "height": 412 }, "deviceScaleFactor": 3.5, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Nexus 7": { "userAgent": "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 7 Build/MOB30X) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Safari/537.36", "viewport": { "width": 600, "height": 960 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Nexus 7 landscape": { "userAgent": "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 7 Build/MOB30X) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Safari/537.36", "viewport": { "width": 960, "height": 600 }, "deviceScaleFactor": 2, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Nokia Lumia 520": { "userAgent": "Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 520)", "viewport": { "width": 320, "height": 533 }, "deviceScaleFactor": 1.5, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Nokia Lumia 520 landscape": { "userAgent": "Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 520)", "viewport": { "width": 533, "height": 320 }, "deviceScaleFactor": 1.5, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Nokia N9": { "userAgent": "Mozilla/5.0 (MeeGo; NokiaN9) AppleWebKit/534.13 (KHTML, like Gecko) NokiaBrowser/8.5.0 Mobile Safari/534.13", "viewport": { "width": 480, "height": 854 }, "deviceScaleFactor": 1, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "Nokia N9 landscape": { "userAgent": "Mozilla/5.0 (MeeGo; NokiaN9) AppleWebKit/534.13 (KHTML, like Gecko) NokiaBrowser/8.5.0 Mobile Safari/534.13", "viewport": { "width": 854, "height": 480 }, "deviceScaleFactor": 1, "isMobile": true, "hasTouch": true, "defaultBrowserType": "webkit" },
  "Pixel 2": { "userAgent": "Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 411, "height": 731 }, "deviceScaleFactor": 2.625, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Pixel 2 landscape": { "userAgent": "Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 731, "height": 411 }, "deviceScaleFactor": 2.625, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Pixel 2 XL": { "userAgent": "Mozilla/5.0 (Linux; Android 8.0.0; Pixel 2 XL Build/OPD1.170816.004) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 411, "height": 823 }, "deviceScaleFactor": 3.5, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Pixel 2 XL landscape": { "userAgent": "Mozilla/5.0 (Linux; Android 8.0.0; Pixel 2 XL Build/OPD1.170816.004) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 823, "height": 411 }, "deviceScaleFactor": 3.5, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Pixel 3": { "userAgent": "Mozilla/5.0 (Linux; Android 9; Pixel 3 Build/PQ1A.181105.017.A1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 393, "height": 786 }, "deviceScaleFactor": 2.75, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Pixel 3 landscape": { "userAgent": "Mozilla/5.0 (Linux; Android 9; Pixel 3 Build/PQ1A.181105.017.A1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 786, "height": 393 }, "deviceScaleFactor": 2.75, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Pixel 4": { "userAgent": "Mozilla/5.0 (Linux; Android 10; Pixel 4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 353, "height": 745 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Pixel 4 landscape": { "userAgent": "Mozilla/5.0 (Linux; Android 10; Pixel 4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 745, "height": 353 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Pixel 4a (5G)": { "userAgent": "Mozilla/5.0 (Linux; Android 11; Pixel 4a (5G)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "screen": { "width": 412, "height": 892 }, "viewport": { "width": 412, "height": 765 }, "deviceScaleFactor": 2.63, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Pixel 4a (5G) landscape": { "userAgent": "Mozilla/5.0 (Linux; Android 11; Pixel 4a (5G)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "screen": { "height": 892, "width": 412 }, "viewport": { "width": 840, "height": 312 }, "deviceScaleFactor": 2.63, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Pixel 5": { "userAgent": "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "screen": { "width": 393, "height": 851 }, "viewport": { "width": 393, "height": 727 }, "deviceScaleFactor": 2.75, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Pixel 5 landscape": { "userAgent": "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "screen": { "width": 851, "height": 393 }, "viewport": { "width": 802, "height": 293 }, "deviceScaleFactor": 2.75, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Pixel 7": { "userAgent": "Mozilla/5.0 (Linux; Android 14; Pixel 7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "screen": { "width": 412, "height": 915 }, "viewport": { "width": 412, "height": 839 }, "deviceScaleFactor": 2.625, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Pixel 7 landscape": { "userAgent": "Mozilla/5.0 (Linux; Android 14; Pixel 7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "screen": { "width": 915, "height": 412 }, "viewport": { "width": 863, "height": 360 }, "deviceScaleFactor": 2.625, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Moto G4": { "userAgent": "Mozilla/5.0 (Linux; Android 7.0; Moto G (4)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 360, "height": 640 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Moto G4 landscape": { "userAgent": "Mozilla/5.0 (Linux; Android 7.0; Moto G (4)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Mobile Safari/537.36", "viewport": { "width": 640, "height": 360 }, "deviceScaleFactor": 3, "isMobile": true, "hasTouch": true, "defaultBrowserType": "chromium" },
  "Desktop Chrome HiDPI": { "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Safari/537.36", "screen": { "width": 1792, "height": 1120 }, "viewport": { "width": 1280, "height": 720 }, "deviceScaleFactor": 2, "isMobile": false, "hasTouch": false, "defaultBrowserType": "chromium" },
  "Desktop Edge HiDPI": { "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Safari/537.36 Edg/134.0.6998.35", "screen": { "width": 1792, "height": 1120 }, "viewport": { "width": 1280, "height": 720 }, "deviceScaleFactor": 2, "isMobile": false, "hasTouch": false, "defaultBrowserType": "chromium" },
  "Desktop Firefox HiDPI": { "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:135.0) Gecko/20100101 Firefox/135.0", "screen": { "width": 1792, "height": 1120 }, "viewport": { "width": 1280, "height": 720 }, "deviceScaleFactor": 2, "isMobile": false, "hasTouch": false, "defaultBrowserType": "firefox" },
  "Desktop Safari": { "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Safari/605.1.15", "screen": { "width": 1792, "height": 1120 }, "viewport": { "width": 1280, "height": 720 }, "deviceScaleFactor": 2, "isMobile": false, "hasTouch": false, "defaultBrowserType": "webkit" },
  "Desktop Chrome": { "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Safari/537.36", "screen": { "width": 1920, "height": 1080 }, "viewport": { "width": 1280, "height": 720 }, "deviceScaleFactor": 1, "isMobile": false, "hasTouch": false, "defaultBrowserType": "chromium" },
  "Desktop Edge": { "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.35 Safari/537.36 Edg/134.0.6998.35", "screen": { "width": 1920, "height": 1080 }, "viewport": { "width": 1280, "height": 720 }, "deviceScaleFactor": 1, "isMobile": false, "hasTouch": false, "defaultBrowserType": "chromium" },
  "Desktop Firefox": { "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:135.0) Gecko/20100101 Firefox/135.0", "screen": { "width": 1920, "height": 1080 }, "viewport": { "width": 1280, "height": 720 }, "deviceScaleFactor": 1, "isMobile": false, "hasTouch": false, "defaultBrowserType": "firefox" }
};
var hasRequiredDeviceDescriptors;
function requireDeviceDescriptors() {
  if (hasRequiredDeviceDescriptors) return deviceDescriptors;
  hasRequiredDeviceDescriptors = 1;
  Object.defineProperty(deviceDescriptors, "__esModule", {
    value: true
  });
  deviceDescriptors.deviceDescriptors = void 0;
  var _deviceDescriptorsSource = _interopRequireDefault(require$$0$1);
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  deviceDescriptors.deviceDescriptors = _deviceDescriptorsSource.default;
  return deviceDescriptors;
}
var hasRequiredCsharp;
function requireCsharp() {
  if (hasRequiredCsharp) return csharp;
  hasRequiredCsharp = 1;
  Object.defineProperty(csharp, "__esModule", {
    value: true
  });
  csharp.CSharpLanguageGenerator = void 0;
  var _language = requireLanguage();
  var _utils = requireUtils();
  var _deviceDescriptors = requireDeviceDescriptors();
  class CSharpLanguageGenerator {
    constructor(mode) {
      this.id = void 0;
      this.groupName = ".NET C#";
      this.name = void 0;
      this.highlighter = "csharp";
      this._mode = void 0;
      if (mode === "library") {
        this.name = "Library";
        this.id = "csharp";
      } else if (mode === "mstest") {
        this.name = "MSTest";
        this.id = "csharp-mstest";
      } else if (mode === "nunit") {
        this.name = "NUnit";
        this.id = "csharp-nunit";
      } else {
        throw new Error(`Unknown C# language mode: ${mode}`);
      }
      this._mode = mode;
    }
    generateAction(actionInContext) {
      const action = this._generateActionInner(actionInContext);
      if (action) return action;
      return "";
    }
    _generateActionInner(actionInContext) {
      const action = actionInContext.action;
      if (this._mode !== "library" && (action.name === "openPage" || action.name === "closePage")) return "";
      let pageAlias = actionInContext.frame.pageAlias;
      if (this._mode !== "library") pageAlias = pageAlias.replace("page", "Page");
      const formatter = new CSharpFormatter(this._mode === "library" ? 0 : 8);
      if (action.name === "openPage") {
        formatter.add(`var ${pageAlias} = await context.NewPageAsync();`);
        if (action.url && action.url !== "about:blank" && action.url !== "chrome://newtab/") formatter.add(`await ${pageAlias}.GotoAsync(${quote(action.url)});`);
        return formatter.format();
      }
      const locators = actionInContext.frame.framePath.map((selector) => `.${this._asLocator(selector)}.ContentFrame`);
      const subject = `${pageAlias}${locators.join("")}`;
      const signals = (0, _language.toSignalMap)(action);
      if (signals.dialog) {
        formatter.add(`    void ${pageAlias}_Dialog${signals.dialog.dialogAlias}_EventHandler(object sender, IDialog dialog)
      {
          Console.WriteLine($"Dialog message: {dialog.Message}");
          dialog.DismissAsync();
          ${pageAlias}.Dialog -= ${pageAlias}_Dialog${signals.dialog.dialogAlias}_EventHandler;
      }
      ${pageAlias}.Dialog += ${pageAlias}_Dialog${signals.dialog.dialogAlias}_EventHandler;`);
      }
      const lines = [];
      lines.push(this._generateActionCall(subject, actionInContext));
      if (signals.download) {
        lines.unshift(`var download${signals.download.downloadAlias} = await ${pageAlias}.RunAndWaitForDownloadAsync(async () =>
{`);
        lines.push(`});`);
      }
      if (signals.popup) {
        lines.unshift(`var ${signals.popup.popupAlias} = await ${pageAlias}.RunAndWaitForPopupAsync(async () =>
{`);
        lines.push(`});`);
      }
      for (const line of lines) formatter.add(line);
      return formatter.format();
    }
    _generateActionCall(subject, actionInContext) {
      const action = actionInContext.action;
      switch (action.name) {
        case "openPage":
          throw Error("Not reached");
        case "closePage":
          return `await ${subject}.CloseAsync();`;
        case "click": {
          let method = "Click";
          if (action.clickCount === 2) method = "DblClick";
          const options = (0, _language.toClickOptionsForSourceCode)(action);
          if (!Object.entries(options).length) return `await ${subject}.${this._asLocator(action.selector)}.${method}Async();`;
          const optionsString = formatObject(options, "    ", "Locator" + method + "Options");
          return `await ${subject}.${this._asLocator(action.selector)}.${method}Async(${optionsString});`;
        }
        case "check":
          return `await ${subject}.${this._asLocator(action.selector)}.CheckAsync();`;
        case "uncheck":
          return `await ${subject}.${this._asLocator(action.selector)}.UncheckAsync();`;
        case "fill":
          return `await ${subject}.${this._asLocator(action.selector)}.FillAsync(${quote(action.text)});`;
        case "setInputFiles":
          return `await ${subject}.${this._asLocator(action.selector)}.SetInputFilesAsync(${formatObject(action.files)});`;
        case "press": {
          const modifiers = (0, _language.toKeyboardModifiers)(action.modifiers);
          const shortcut = [...modifiers, action.key].join("+");
          return `await ${subject}.${this._asLocator(action.selector)}.PressAsync(${quote(shortcut)});`;
        }
        case "navigate":
          return `await ${subject}.GotoAsync(${quote(action.url)});`;
        case "select":
          return `await ${subject}.${this._asLocator(action.selector)}.SelectOptionAsync(${formatObject(action.options)});`;
        case "assertText":
          return `await Expect(${subject}.${this._asLocator(action.selector)}).${action.substring ? "ToContainTextAsync" : "ToHaveTextAsync"}(${quote(action.text)});`;
        case "assertChecked":
          return `await Expect(${subject}.${this._asLocator(action.selector)})${action.checked ? "" : ".Not"}.ToBeCheckedAsync();`;
        case "assertVisible":
          return `await Expect(${subject}.${this._asLocator(action.selector)}).ToBeVisibleAsync();`;
        case "assertValue": {
          const assertion = action.value ? `ToHaveValueAsync(${quote(action.value)})` : `ToBeEmptyAsync()`;
          return `await Expect(${subject}.${this._asLocator(action.selector)}).${assertion};`;
        }
        case "assertSnapshot":
          return `await Expect(${subject}.${this._asLocator(action.selector)}).ToMatchAriaSnapshotAsync(${quote(action.snapshot)});`;
      }
    }
    _asLocator(selector) {
      return (0, _utils.asLocator)("csharp", selector);
    }
    generateHeader(options) {
      if (this._mode === "library") return this.generateStandaloneHeader(options);
      return this.generateTestRunnerHeader(options);
    }
    generateStandaloneHeader(options) {
      const formatter = new CSharpFormatter(0);
      formatter.add(`
      using Microsoft.Playwright;
      using System;
      using System.Threading.Tasks;

      using var playwright = await Playwright.CreateAsync();
      await using var browser = await playwright.${toPascal(options.browserName)}.LaunchAsync(${formatObject(options.launchOptions, "    ", "BrowserTypeLaunchOptions")});
      var context = await browser.NewContextAsync(${formatContextOptions(options.contextOptions, options.deviceName)});`);
      if (options.contextOptions.recordHar) {
        const url = options.contextOptions.recordHar.urlFilter;
        formatter.add(`      await context.RouteFromHARAsync(${quote(options.contextOptions.recordHar.path)}${url ? `, ${formatObject({
          url
        }, "    ", "BrowserContextRouteFromHAROptions")}` : ""});`);
      }
      formatter.newLine();
      return formatter.format();
    }
    generateTestRunnerHeader(options) {
      const formatter = new CSharpFormatter(0);
      formatter.add(`
      using Microsoft.Playwright.${this._mode === "nunit" ? "NUnit" : "MSTest"};
      using Microsoft.Playwright;

      ${this._mode === "nunit" ? `[Parallelizable(ParallelScope.Self)]
      [TestFixture]` : "[TestClass]"}
      public class Tests : PageTest
      {`);
      const formattedContextOptions = formatContextOptions(options.contextOptions, options.deviceName);
      if (formattedContextOptions) {
        formatter.add(`public override BrowserNewContextOptions ContextOptions()
      {
          return ${formattedContextOptions};
      }`);
        formatter.newLine();
      }
      formatter.add(`    [${this._mode === "nunit" ? "Test" : "TestMethod"}]
    public async Task MyTest()
    {`);
      if (options.contextOptions.recordHar) {
        const url = options.contextOptions.recordHar.urlFilter;
        formatter.add(`    await Context.RouteFromHARAsync(${quote(options.contextOptions.recordHar.path)}${url ? `, ${formatObject({
          url
        }, "    ", "BrowserContextRouteFromHAROptions")}` : ""});`);
      }
      return formatter.format();
    }
    generateFooter(saveStorage) {
      const offset = this._mode === "library" ? "" : "        ";
      let storageStateLine = saveStorage ? `
${offset}await context.StorageStateAsync(new BrowserContextStorageStateOptions
${offset}{
${offset}    Path = ${quote(saveStorage)}
${offset}});
` : "";
      if (this._mode !== "library") storageStateLine += `    }
}
`;
      return storageStateLine;
    }
  }
  csharp.CSharpLanguageGenerator = CSharpLanguageGenerator;
  function formatObject(value, indent = "    ", name = "") {
    if (typeof value === "string") {
      if (["permissions", "colorScheme", "modifiers", "button", "recordHarContent", "recordHarMode", "serviceWorkers"].includes(name)) return `${getClassName(name)}.${toPascal(value)}`;
      return quote(value);
    }
    if (Array.isArray(value)) return `new[] { ${value.map((o2) => formatObject(o2, indent, name)).join(", ")} }`;
    if (typeof value === "object") {
      const keys = Object.keys(value).filter((key) => value[key] !== void 0).sort();
      if (!keys.length) return name ? `new ${getClassName(name)}` : "";
      const tokens = [];
      for (const key of keys) {
        const property = getPropertyName(key);
        tokens.push(`${property} = ${formatObject(value[key], indent, key)},`);
      }
      if (name) return `new ${getClassName(name)}
{
${indent}${tokens.join(`
${indent}`)}
${indent}}`;
      return `{
${indent}${tokens.join(`
${indent}`)}
${indent}}`;
    }
    if (name === "latitude" || name === "longitude") return String(value) + "m";
    return String(value);
  }
  function getClassName(value) {
    switch (value) {
      case "viewport":
        return "ViewportSize";
      case "proxy":
        return "ProxySettings";
      case "permissions":
        return "ContextPermission";
      case "modifiers":
        return "KeyboardModifier";
      case "button":
        return "MouseButton";
      case "recordHarMode":
        return "HarMode";
      case "recordHarContent":
        return "HarContentPolicy";
      case "serviceWorkers":
        return "ServiceWorkerPolicy";
      default:
        return toPascal(value);
    }
  }
  function getPropertyName(key) {
    switch (key) {
      case "storageState":
        return "StorageStatePath";
      case "viewport":
        return "ViewportSize";
      default:
        return toPascal(key);
    }
  }
  function toPascal(value) {
    return value[0].toUpperCase() + value.slice(1);
  }
  function formatContextOptions(contextOptions, deviceName) {
    let options = {
      ...contextOptions
    };
    delete options.recordHar;
    const device = deviceName && _deviceDescriptors.deviceDescriptors[deviceName];
    if (!device) {
      if (!Object.entries(options).length) return "";
      return formatObject(options, "    ", "BrowserNewContextOptions");
    }
    options = (0, _language.sanitizeDeviceOptions)(device, options);
    if (!Object.entries(options).length) return `playwright.Devices[${quote(deviceName)}]`;
    return formatObject(options, "    ", `BrowserNewContextOptions(playwright.Devices[${quote(deviceName)}])`);
  }
  class CSharpFormatter {
    constructor(offset = 0) {
      this._baseIndent = void 0;
      this._baseOffset = void 0;
      this._lines = [];
      this._baseIndent = " ".repeat(4);
      this._baseOffset = " ".repeat(offset);
    }
    prepend(text) {
      this._lines = text.trim().split("\n").map((line) => line.trim()).concat(this._lines);
    }
    add(text) {
      this._lines.push(...text.trim().split("\n").map((line) => line.trim()));
    }
    newLine() {
      this._lines.push("");
    }
    format() {
      let spaces = "";
      let previousLine = "";
      return this._lines.map((line) => {
        if (line === "") return line;
        if (line.startsWith("}") || line.startsWith("]") || line.includes("});") || line === ");") spaces = spaces.substring(this._baseIndent.length);
        const extraSpaces = /^(for|while|if).*\(.*\)$/.test(previousLine) ? this._baseIndent : "";
        previousLine = line;
        line = spaces + extraSpaces + line;
        if (line.endsWith("{") || line.endsWith("[") || line.endsWith("(")) spaces += this._baseIndent;
        if (line.endsWith("));")) spaces = spaces.substring(this._baseIndent.length);
        return this._baseOffset + line;
      }).join("\n");
    }
  }
  function quote(text) {
    return (0, _utils.escapeWithQuotes)(text, '"');
  }
  return csharp;
}
var java = {};
var javascript = {};
var hasRequiredJavascript;
function requireJavascript() {
  if (hasRequiredJavascript) return javascript;
  hasRequiredJavascript = 1;
  Object.defineProperty(javascript, "__esModule", {
    value: true
  });
  javascript.JavaScriptLanguageGenerator = javascript.JavaScriptFormatter = void 0;
  javascript.quoteMultiline = quoteMultiline;
  var _language = requireLanguage();
  var _utils = requireUtils();
  var _deviceDescriptors = requireDeviceDescriptors();
  class JavaScriptLanguageGenerator {
    constructor(isTest) {
      this.id = void 0;
      this.groupName = "Node.js";
      this.name = void 0;
      this.highlighter = "javascript";
      this._isTest = void 0;
      this.id = isTest ? "playwright-test" : "javascript";
      this.name = isTest ? "Test Runner" : "Library";
      this._isTest = isTest;
    }
    generateAction(actionInContext) {
      const action = actionInContext.action;
      if (this._isTest && (action.name === "openPage" || action.name === "closePage")) return "";
      const pageAlias = actionInContext.frame.pageAlias;
      const formatter = new JavaScriptFormatter(2);
      if (action.name === "openPage") {
        formatter.add(`const ${pageAlias} = await context.newPage();`);
        if (action.url && action.url !== "about:blank" && action.url !== "chrome://newtab/") formatter.add(`await ${pageAlias}.goto(${quote(action.url)});`);
        return formatter.format();
      }
      const locators = actionInContext.frame.framePath.map((selector) => `.${this._asLocator(selector)}.contentFrame()`);
      const subject = `${pageAlias}${locators.join("")}`;
      const signals = (0, _language.toSignalMap)(action);
      if (signals.dialog) {
        formatter.add(`  ${pageAlias}.once('dialog', dialog => {
    console.log(\`Dialog message: \${dialog.message()}\`);
    dialog.dismiss().catch(() => {});
  });`);
      }
      if (signals.popup) formatter.add(`const ${signals.popup.popupAlias}Promise = ${pageAlias}.waitForEvent('popup');`);
      if (signals.download) formatter.add(`const download${signals.download.downloadAlias}Promise = ${pageAlias}.waitForEvent('download');`);
      formatter.add(wrapWithStep(actionInContext.description, this._generateActionCall(subject, actionInContext)));
      if (signals.popup) formatter.add(`const ${signals.popup.popupAlias} = await ${signals.popup.popupAlias}Promise;`);
      if (signals.download) formatter.add(`const download${signals.download.downloadAlias} = await download${signals.download.downloadAlias}Promise;`);
      return formatter.format();
    }
    _generateActionCall(subject, actionInContext) {
      const action = actionInContext.action;
      switch (action.name) {
        case "openPage":
          throw Error("Not reached");
        case "closePage":
          return `await ${subject}.close();`;
        case "click": {
          let method = "click";
          if (action.clickCount === 2) method = "dblclick";
          const options = (0, _language.toClickOptionsForSourceCode)(action);
          const optionsString = formatOptions(options);
          return `await ${subject}.${this._asLocator(action.selector)}.${method}(${optionsString});`;
        }
        case "check":
          return `await ${subject}.${this._asLocator(action.selector)}.check();`;
        case "uncheck":
          return `await ${subject}.${this._asLocator(action.selector)}.uncheck();`;
        case "fill":
          return `await ${subject}.${this._asLocator(action.selector)}.fill(${quote(action.text)});`;
        case "setInputFiles":
          return `await ${subject}.${this._asLocator(action.selector)}.setInputFiles(${formatObject(action.files.length === 1 ? action.files[0] : action.files)});`;
        case "press": {
          const modifiers = (0, _language.toKeyboardModifiers)(action.modifiers);
          const shortcut = [...modifiers, action.key].join("+");
          return `await ${subject}.${this._asLocator(action.selector)}.press(${quote(shortcut)});`;
        }
        case "navigate":
          return `await ${subject}.goto(${quote(action.url)});`;
        case "select":
          return `await ${subject}.${this._asLocator(action.selector)}.selectOption(${formatObject(action.options.length === 1 ? action.options[0] : action.options)});`;
        case "assertText":
          return `${this._isTest ? "" : "// "}await expect(${subject}.${this._asLocator(action.selector)}).${action.substring ? "toContainText" : "toHaveText"}(${quote(action.text)});`;
        case "assertChecked":
          return `${this._isTest ? "" : "// "}await expect(${subject}.${this._asLocator(action.selector)})${action.checked ? "" : ".not"}.toBeChecked();`;
        case "assertVisible":
          return `${this._isTest ? "" : "// "}await expect(${subject}.${this._asLocator(action.selector)}).toBeVisible();`;
        case "assertValue": {
          const assertion = action.value ? `toHaveValue(${quote(action.value)})` : `toBeEmpty()`;
          return `${this._isTest ? "" : "// "}await expect(${subject}.${this._asLocator(action.selector)}).${assertion};`;
        }
        case "assertSnapshot": {
          const commentIfNeeded = this._isTest ? "" : "// ";
          return `${commentIfNeeded}await expect(${subject}.${this._asLocator(action.selector)}).toMatchAriaSnapshot(${quoteMultiline(action.snapshot, `${commentIfNeeded}  `)});`;
        }
      }
    }
    _asLocator(selector) {
      return (0, _utils.asLocator)("javascript", selector);
    }
    generateHeader(options) {
      if (this._isTest) return this.generateTestHeader(options);
      return this.generateStandaloneHeader(options);
    }
    generateFooter(saveStorage) {
      if (this._isTest) return this.generateTestFooter(saveStorage);
      return this.generateStandaloneFooter(saveStorage);
    }
    generateTestHeader(options) {
      const formatter = new JavaScriptFormatter();
      const useText = formatContextOptions(options.contextOptions, options.deviceName, this._isTest);
      formatter.add(`
      import { test, expect${options.deviceName ? ", devices" : ""} } from '@playwright/test';
${useText ? "\ntest.use(" + useText + ");\n" : ""}
      test('test', async ({ page }) => {`);
      if (options.contextOptions.recordHar) {
        const url = options.contextOptions.recordHar.urlFilter;
        formatter.add(`  await page.routeFromHAR(${quote(options.contextOptions.recordHar.path)}${url ? `, ${formatOptions({
          url
        })}` : ""});`);
      }
      return formatter.format();
    }
    generateTestFooter(saveStorage) {
      return `});`;
    }
    generateStandaloneHeader(options) {
      const formatter = new JavaScriptFormatter();
      formatter.add(`
      const { ${options.browserName}${options.deviceName ? ", devices" : ""} } = require('playwright');

      (async () => {
        const browser = await ${options.browserName}.launch(${formatObjectOrVoid(options.launchOptions)});
        const context = await browser.newContext(${formatContextOptions(options.contextOptions, options.deviceName)});`);
      if (options.contextOptions.recordHar) formatter.add(`        await context.routeFromHAR(${quote(options.contextOptions.recordHar.path)});`);
      return formatter.format();
    }
    generateStandaloneFooter(saveStorage) {
      const storageStateLine = saveStorage ? `
  await context.storageState({ path: ${quote(saveStorage)} });` : "";
      return `
  // ---------------------${storageStateLine}
  await context.close();
  await browser.close();
})();`;
    }
  }
  javascript.JavaScriptLanguageGenerator = JavaScriptLanguageGenerator;
  function formatOptions(value, hasArguments) {
    const keys = Object.keys(value);
    if (!keys.length) return "";
    return "" + formatObject(value);
  }
  function formatObject(value, indent = "  ") {
    if (typeof value === "string") return quote(value);
    if (Array.isArray(value)) return `[${value.map((o2) => formatObject(o2)).join(", ")}]`;
    if (typeof value === "object") {
      const keys = Object.keys(value).filter((key) => value[key] !== void 0).sort();
      if (!keys.length) return "{}";
      const tokens = [];
      for (const key of keys) tokens.push(`${key}: ${formatObject(value[key])}`);
      return `{
${indent}${tokens.join(`,
${indent}`)}
}`;
    }
    return String(value);
  }
  function formatObjectOrVoid(value, indent = "  ") {
    const result = formatObject(value, indent);
    return result === "{}" ? "" : result;
  }
  function formatContextOptions(options, deviceName, isTest) {
    const device = deviceName && _deviceDescriptors.deviceDescriptors[deviceName];
    options = {
      ...options,
      recordHar: void 0
    };
    if (!device) return formatObjectOrVoid(options);
    let serializedObject = formatObjectOrVoid((0, _language.sanitizeDeviceOptions)(device, options));
    if (!serializedObject) serializedObject = "{\n}";
    const lines = serializedObject.split("\n");
    lines.splice(1, 0, `...devices[${quote(deviceName)}],`);
    return lines.join("\n");
  }
  class JavaScriptFormatter {
    constructor(offset = 0) {
      this._baseIndent = void 0;
      this._baseOffset = void 0;
      this._lines = [];
      this._baseIndent = " ".repeat(2);
      this._baseOffset = " ".repeat(offset);
    }
    prepend(text) {
      const trim = isMultilineString(text) ? (line) => line : (line) => line.trim();
      this._lines = text.trim().split("\n").map(trim).concat(this._lines);
    }
    add(text) {
      const trim = isMultilineString(text) ? (line) => line : (line) => line.trim();
      this._lines.push(...text.trim().split("\n").map(trim));
    }
    newLine() {
      this._lines.push("");
    }
    format() {
      let spaces = "";
      let previousLine = "";
      return this._lines.map((line) => {
        if (line === "") return line;
        if (line.startsWith("}") || line.startsWith("]")) spaces = spaces.substring(this._baseIndent.length);
        const extraSpaces = /^(for|while|if|try).*\(.*\)$/.test(previousLine) ? this._baseIndent : "";
        previousLine = line;
        const callCarryOver = line.startsWith(".set");
        line = spaces + extraSpaces + (callCarryOver ? this._baseIndent : "") + line;
        if (line.endsWith("{") || line.endsWith("[")) spaces += this._baseIndent;
        return this._baseOffset + line;
      }).join("\n");
    }
  }
  javascript.JavaScriptFormatter = JavaScriptFormatter;
  function quote(text) {
    return (0, _utils.escapeWithQuotes)(text, "'");
  }
  function wrapWithStep(description, body) {
    return description ? `await test.step(\`${description}\`, async () => {
${body}
});` : body;
  }
  function quoteMultiline(text, indent = "  ") {
    const escape = (text2) => text2.replace(/\\/g, "\\\\").replace(/`/g, "\\`").replace(/\$\{/g, "\\${");
    const lines = text.split("\n");
    if (lines.length === 1) return "`" + escape(text) + "`";
    return "`\n" + lines.map((line) => indent + escape(line).replace(/\${/g, "\\${")).join("\n") + `
${indent}\``;
  }
  function isMultilineString(text) {
    var _text$match;
    return (_text$match = text.match(/`[\S\s]*`/)) === null || _text$match === void 0 ? void 0 : _text$match[0].includes("\n");
  }
  return javascript;
}
var hasRequiredJava;
function requireJava() {
  if (hasRequiredJava) return java;
  hasRequiredJava = 1;
  Object.defineProperty(java, "__esModule", {
    value: true
  });
  java.JavaLanguageGenerator = void 0;
  var _language = requireLanguage();
  var _deviceDescriptors = requireDeviceDescriptors();
  var _javascript = requireJavascript();
  var _utils = requireUtils();
  class JavaLanguageGenerator {
    constructor(mode) {
      this.id = void 0;
      this.groupName = "Java";
      this.name = void 0;
      this.highlighter = "java";
      this._mode = void 0;
      if (mode === "library") {
        this.name = "Library";
        this.id = "java";
      } else if (mode === "junit") {
        this.name = "JUnit";
        this.id = "java-junit";
      } else {
        throw new Error(`Unknown Java language mode: ${mode}`);
      }
      this._mode = mode;
    }
    generateAction(actionInContext) {
      const action = actionInContext.action;
      const pageAlias = actionInContext.frame.pageAlias;
      const offset = this._mode === "junit" ? 4 : 6;
      const formatter = new _javascript.JavaScriptFormatter(offset);
      if (this._mode !== "library" && (action.name === "openPage" || action.name === "closePage")) return "";
      if (action.name === "openPage") {
        formatter.add(`Page ${pageAlias} = context.newPage();`);
        if (action.url && action.url !== "about:blank" && action.url !== "chrome://newtab/") formatter.add(`${pageAlias}.navigate(${quote(action.url)});`);
        return formatter.format();
      }
      const locators = actionInContext.frame.framePath.map((selector) => `.${this._asLocator(selector, false)}.contentFrame()`);
      const subject = `${pageAlias}${locators.join("")}`;
      const signals = (0, _language.toSignalMap)(action);
      if (signals.dialog) {
        formatter.add(`  ${pageAlias}.onceDialog(dialog -> {
        System.out.println(String.format("Dialog message: %s", dialog.message()));
        dialog.dismiss();
      });`);
      }
      let code = this._generateActionCall(subject, actionInContext, !!actionInContext.frame.framePath.length);
      if (signals.popup) {
        code = `Page ${signals.popup.popupAlias} = ${pageAlias}.waitForPopup(() -> {
        ${code}
      });`;
      }
      if (signals.download) {
        code = `Download download${signals.download.downloadAlias} = ${pageAlias}.waitForDownload(() -> {
        ${code}
      });`;
      }
      formatter.add(code);
      return formatter.format();
    }
    _generateActionCall(subject, actionInContext, inFrameLocator) {
      const action = actionInContext.action;
      switch (action.name) {
        case "openPage":
          throw Error("Not reached");
        case "closePage":
          return `${subject}.close();`;
        case "click": {
          let method = "click";
          if (action.clickCount === 2) method = "dblclick";
          const options = (0, _language.toClickOptionsForSourceCode)(action);
          const optionsText = formatClickOptions(options);
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.${method}(${optionsText});`;
        }
        case "check":
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.check();`;
        case "uncheck":
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.uncheck();`;
        case "fill":
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.fill(${quote(action.text)});`;
        case "setInputFiles":
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.setInputFiles(${formatPath(action.files.length === 1 ? action.files[0] : action.files)});`;
        case "press": {
          const modifiers = (0, _language.toKeyboardModifiers)(action.modifiers);
          const shortcut = [...modifiers, action.key].join("+");
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.press(${quote(shortcut)});`;
        }
        case "navigate":
          return `${subject}.navigate(${quote(action.url)});`;
        case "select":
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.selectOption(${formatSelectOption(action.options.length === 1 ? action.options[0] : action.options)});`;
        case "assertText":
          return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)}).${action.substring ? "containsText" : "hasText"}(${quote(action.text)});`;
        case "assertChecked":
          return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)})${action.checked ? "" : ".not()"}.isChecked();`;
        case "assertVisible":
          return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)}).isVisible();`;
        case "assertValue": {
          const assertion = action.value ? `hasValue(${quote(action.value)})` : `isEmpty()`;
          return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)}).${assertion};`;
        }
        case "assertSnapshot":
          return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)}).matchesAriaSnapshot(${quote(action.snapshot)});`;
      }
    }
    _asLocator(selector, inFrameLocator) {
      return (0, _utils.asLocator)("java", selector, inFrameLocator);
    }
    generateHeader(options) {
      const formatter = new _javascript.JavaScriptFormatter();
      if (this._mode === "junit") {
        formatter.add(`
      import com.microsoft.playwright.junit.UsePlaywright;
      import com.microsoft.playwright.Page;
      import com.microsoft.playwright.options.*;

      ${options.contextOptions.recordHar ? `import java.nio.file.Paths;
` : ""}import org.junit.jupiter.api.*;
      import static com.microsoft.playwright.assertions.PlaywrightAssertions.*;

      @UsePlaywright
      public class TestExample {
        @Test
        void test(Page page) {`);
        if (options.contextOptions.recordHar) {
          const url = options.contextOptions.recordHar.urlFilter;
          const recordHarOptions = typeof url === "string" ? `, new Page.RouteFromHAROptions()
            .setUrl(${quote(url)})` : "";
          formatter.add(`          page.routeFromHAR(Paths.get(${quote(options.contextOptions.recordHar.path)})${recordHarOptions});`);
        }
        return formatter.format();
      }
      formatter.add(`
    import com.microsoft.playwright.*;
    import com.microsoft.playwright.options.*;
    import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;
    ${options.contextOptions.recordHar ? `import java.nio.file.Paths;
` : ""}import java.util.*;

    public class Example {
      public static void main(String[] args) {
        try (Playwright playwright = Playwright.create()) {
          Browser browser = playwright.${options.browserName}().launch(${formatLaunchOptions(options.launchOptions)});
          BrowserContext context = browser.newContext(${formatContextOptions(options.contextOptions, options.deviceName)});`);
      if (options.contextOptions.recordHar) {
        const url = options.contextOptions.recordHar.urlFilter;
        const recordHarOptions = typeof url === "string" ? `, new BrowserContext.RouteFromHAROptions()
          .setUrl(${quote(url)})` : "";
        formatter.add(`          context.routeFromHAR(Paths.get(${quote(options.contextOptions.recordHar.path)})${recordHarOptions});`);
      }
      return formatter.format();
    }
    generateFooter(saveStorage) {
      const storageStateLine = saveStorage ? `
      context.storageState(new BrowserContext.StorageStateOptions().setPath(${quote(saveStorage)}));
` : "";
      if (this._mode === "junit") {
        return `${storageStateLine}  }
}`;
      }
      return `${storageStateLine}    }
  }
}`;
    }
  }
  java.JavaLanguageGenerator = JavaLanguageGenerator;
  function formatPath(files) {
    if (Array.isArray(files)) {
      if (files.length === 0) return "new Path[0]";
      return `new Path[] {${files.map((s2) => "Paths.get(" + quote(s2) + ")").join(", ")}}`;
    }
    return `Paths.get(${quote(files)})`;
  }
  function formatSelectOption(options) {
    if (Array.isArray(options)) {
      if (options.length === 0) return "new String[0]";
      return `new String[] {${options.map((s2) => quote(s2)).join(", ")}}`;
    }
    return quote(options);
  }
  function formatLaunchOptions(options) {
    const lines = [];
    if (!Object.keys(options).filter((key) => options[key] !== void 0).length) return "";
    lines.push("new BrowserType.LaunchOptions()");
    if (options.channel) lines.push(`  .setChannel(${quote(options.channel)})`);
    if (typeof options.headless === "boolean") lines.push(`  .setHeadless(false)`);
    return lines.join("\n");
  }
  function formatContextOptions(contextOptions, deviceName) {
    const lines = [];
    if (!Object.keys(contextOptions).length && !deviceName) return "";
    const device = deviceName ? _deviceDescriptors.deviceDescriptors[deviceName] : {};
    const options = {
      ...device,
      ...contextOptions
    };
    lines.push("new Browser.NewContextOptions()");
    if (options.acceptDownloads) lines.push(`  .setAcceptDownloads(true)`);
    if (options.bypassCSP) lines.push(`  .setBypassCSP(true)`);
    if (options.colorScheme) lines.push(`  .setColorScheme(ColorScheme.${options.colorScheme.toUpperCase()})`);
    if (options.deviceScaleFactor) lines.push(`  .setDeviceScaleFactor(${options.deviceScaleFactor})`);
    if (options.geolocation) lines.push(`  .setGeolocation(${options.geolocation.latitude}, ${options.geolocation.longitude})`);
    if (options.hasTouch) lines.push(`  .setHasTouch(${options.hasTouch})`);
    if (options.isMobile) lines.push(`  .setIsMobile(${options.isMobile})`);
    if (options.locale) lines.push(`  .setLocale(${quote(options.locale)})`);
    if (options.proxy) lines.push(`  .setProxy(new Proxy(${quote(options.proxy.server)}))`);
    if (options.serviceWorkers) lines.push(`  .setServiceWorkers(ServiceWorkerPolicy.${options.serviceWorkers.toUpperCase()})`);
    if (options.storageState) lines.push(`  .setStorageStatePath(Paths.get(${quote(options.storageState)}))`);
    if (options.timezoneId) lines.push(`  .setTimezoneId(${quote(options.timezoneId)})`);
    if (options.userAgent) lines.push(`  .setUserAgent(${quote(options.userAgent)})`);
    if (options.viewport) lines.push(`  .setViewportSize(${options.viewport.width}, ${options.viewport.height})`);
    return lines.join("\n");
  }
  function formatClickOptions(options) {
    const lines = [];
    if (options.button) lines.push(`  .setButton(MouseButton.${options.button.toUpperCase()})`);
    if (options.modifiers) lines.push(`  .setModifiers(Arrays.asList(${options.modifiers.map((m2) => `KeyboardModifier.${m2.toUpperCase()}`).join(", ")}))`);
    if (options.clickCount) lines.push(`  .setClickCount(${options.clickCount})`);
    if (options.position) lines.push(`  .setPosition(${options.position.x}, ${options.position.y})`);
    if (!lines.length) return "";
    lines.unshift(`new Locator.ClickOptions()`);
    return lines.join("\n");
  }
  function quote(text) {
    return (0, _utils.escapeWithQuotes)(text, '"');
  }
  return java;
}
var jsonl = {};
var hasRequiredJsonl;
function requireJsonl() {
  if (hasRequiredJsonl) return jsonl;
  hasRequiredJsonl = 1;
  Object.defineProperty(jsonl, "__esModule", {
    value: true
  });
  jsonl.JsonlLanguageGenerator = void 0;
  var _utils = requireUtils();
  class JsonlLanguageGenerator {
    constructor() {
      this.id = "jsonl";
      this.groupName = "";
      this.name = "JSONL";
      this.highlighter = "javascript";
    }
    generateAction(actionInContext) {
      const locator2 = actionInContext.action.selector ? JSON.parse((0, _utils.asLocator)("jsonl", actionInContext.action.selector)) : void 0;
      const entry = {
        ...actionInContext.action,
        ...actionInContext.frame,
        locator: locator2
      };
      return JSON.stringify(entry);
    }
    generateHeader(options) {
      return JSON.stringify(options);
    }
    generateFooter(saveStorage) {
      return "";
    }
  }
  jsonl.JsonlLanguageGenerator = JsonlLanguageGenerator;
  return jsonl;
}
var python = {};
var hasRequiredPython;
function requirePython() {
  if (hasRequiredPython) return python;
  hasRequiredPython = 1;
  Object.defineProperty(python, "__esModule", {
    value: true
  });
  python.PythonLanguageGenerator = void 0;
  var _language = requireLanguage();
  var _utils = requireUtils();
  var _deviceDescriptors = requireDeviceDescriptors();
  class PythonLanguageGenerator {
    constructor(isAsync, isPyTest) {
      this.id = void 0;
      this.groupName = "Python";
      this.name = void 0;
      this.highlighter = "python";
      this._awaitPrefix = void 0;
      this._asyncPrefix = void 0;
      this._isAsync = void 0;
      this._isPyTest = void 0;
      this.id = isPyTest ? "python-pytest" : isAsync ? "python-async" : "python";
      this.name = isPyTest ? "Pytest" : isAsync ? "Library Async" : "Library";
      this._isAsync = isAsync;
      this._isPyTest = isPyTest;
      this._awaitPrefix = isAsync ? "await " : "";
      this._asyncPrefix = isAsync ? "async " : "";
    }
    generateAction(actionInContext) {
      const action = actionInContext.action;
      if (this._isPyTest && (action.name === "openPage" || action.name === "closePage")) return "";
      const pageAlias = actionInContext.frame.pageAlias;
      const formatter = new PythonFormatter(4);
      if (action.name === "openPage") {
        formatter.add(`${pageAlias} = ${this._awaitPrefix}context.new_page()`);
        if (action.url && action.url !== "about:blank" && action.url !== "chrome://newtab/") formatter.add(`${this._awaitPrefix}${pageAlias}.goto(${quote(action.url)})`);
        return formatter.format();
      }
      const locators = actionInContext.frame.framePath.map((selector) => `.${this._asLocator(selector)}.content_frame`);
      const subject = `${pageAlias}${locators.join("")}`;
      const signals = (0, _language.toSignalMap)(action);
      if (signals.dialog) formatter.add(`  ${pageAlias}.once("dialog", lambda dialog: dialog.dismiss())`);
      let code = `${this._awaitPrefix}${this._generateActionCall(subject, actionInContext)}`;
      if (signals.popup) {
        code = `${this._asyncPrefix}with ${pageAlias}.expect_popup() as ${signals.popup.popupAlias}_info {
        ${code}
      }
      ${signals.popup.popupAlias} = ${this._awaitPrefix}${signals.popup.popupAlias}_info.value`;
      }
      if (signals.download) {
        code = `${this._asyncPrefix}with ${pageAlias}.expect_download() as download${signals.download.downloadAlias}_info {
        ${code}
      }
      download${signals.download.downloadAlias} = ${this._awaitPrefix}download${signals.download.downloadAlias}_info.value`;
      }
      formatter.add(code);
      return formatter.format();
    }
    _generateActionCall(subject, actionInContext) {
      const action = actionInContext.action;
      switch (action.name) {
        case "openPage":
          throw Error("Not reached");
        case "closePage":
          return `${subject}.close()`;
        case "click": {
          let method = "click";
          if (action.clickCount === 2) method = "dblclick";
          const options = (0, _language.toClickOptionsForSourceCode)(action);
          const optionsString = formatOptions(options, false);
          return `${subject}.${this._asLocator(action.selector)}.${method}(${optionsString})`;
        }
        case "check":
          return `${subject}.${this._asLocator(action.selector)}.check()`;
        case "uncheck":
          return `${subject}.${this._asLocator(action.selector)}.uncheck()`;
        case "fill":
          return `${subject}.${this._asLocator(action.selector)}.fill(${quote(action.text)})`;
        case "setInputFiles":
          return `${subject}.${this._asLocator(action.selector)}.set_input_files(${formatValue(action.files.length === 1 ? action.files[0] : action.files)})`;
        case "press": {
          const modifiers = (0, _language.toKeyboardModifiers)(action.modifiers);
          const shortcut = [...modifiers, action.key].join("+");
          return `${subject}.${this._asLocator(action.selector)}.press(${quote(shortcut)})`;
        }
        case "navigate":
          return `${subject}.goto(${quote(action.url)})`;
        case "select":
          return `${subject}.${this._asLocator(action.selector)}.select_option(${formatValue(action.options.length === 1 ? action.options[0] : action.options)})`;
        case "assertText":
          return `expect(${subject}.${this._asLocator(action.selector)}).${action.substring ? "to_contain_text" : "to_have_text"}(${quote(action.text)})`;
        case "assertChecked":
          return `expect(${subject}.${this._asLocator(action.selector)}).${action.checked ? "to_be_checked()" : "not_to_be_checked()"}`;
        case "assertVisible":
          return `expect(${subject}.${this._asLocator(action.selector)}).to_be_visible()`;
        case "assertValue": {
          const assertion = action.value ? `to_have_value(${quote(action.value)})` : `to_be_empty()`;
          return `expect(${subject}.${this._asLocator(action.selector)}).${assertion};`;
        }
        case "assertSnapshot":
          return `expect(${subject}.${this._asLocator(action.selector)}).to_match_aria_snapshot(${quote(action.snapshot)})`;
      }
    }
    _asLocator(selector) {
      return (0, _utils.asLocator)("python", selector);
    }
    generateHeader(options) {
      const formatter = new PythonFormatter();
      const recordHar = options.contextOptions.recordHar;
      if (this._isPyTest) {
        const contextOptions = formatContextOptions(
          options.contextOptions,
          options.deviceName,
          true
          /* asDict */
        );
        const fixture = contextOptions ? `

@pytest.fixture(scope="session")
def browser_context_args(browser_context_args, playwright) {
    return {${contextOptions}}
}
` : "";
        formatter.add(`${options.deviceName || contextOptions ? "import pytest\n" : ""}import re
from playwright.sync_api import Page, expect
${fixture}

def test_example(page: Page) -> None {`);
        if (recordHar) formatter.add(`    page.route_from_har(${quote(recordHar.path)}${typeof recordHar.urlFilter === "string" ? `, url=${quote(recordHar.urlFilter)}` : ""})`);
      } else if (this._isAsync) {
        formatter.add(`
import asyncio
import re
from playwright.async_api import Playwright, async_playwright, expect


async def run(playwright: Playwright) -> None {
    browser = await playwright.${options.browserName}.launch(${formatOptions(options.launchOptions, false)})
    context = await browser.new_context(${formatContextOptions(options.contextOptions, options.deviceName)})`);
        if (recordHar) formatter.add(`    await context.route_from_har(${quote(recordHar.path)}${typeof recordHar.urlFilter === "string" ? `, url=${quote(recordHar.urlFilter)}` : ""})`);
      } else {
        formatter.add(`
import re
from playwright.sync_api import Playwright, sync_playwright, expect


def run(playwright: Playwright) -> None {
    browser = playwright.${options.browserName}.launch(${formatOptions(options.launchOptions, false)})
    context = browser.new_context(${formatContextOptions(options.contextOptions, options.deviceName)})`);
        if (recordHar) formatter.add(`    context.route_from_har(${quote(recordHar.path)}${typeof recordHar.urlFilter === "string" ? `, url=${quote(recordHar.urlFilter)}` : ""})`);
      }
      return formatter.format();
    }
    generateFooter(saveStorage) {
      if (this._isPyTest) {
        return "";
      } else if (this._isAsync) {
        const storageStateLine = saveStorage ? `
    await context.storage_state(path=${quote(saveStorage)})` : "";
        return `
    # ---------------------${storageStateLine}
    await context.close()
    await browser.close()


async def main() -> None:
    async with async_playwright() as playwright:
        await run(playwright)


asyncio.run(main())
`;
      } else {
        const storageStateLine = saveStorage ? `
    context.storage_state(path=${quote(saveStorage)})` : "";
        return `
    # ---------------------${storageStateLine}
    context.close()
    browser.close()


with sync_playwright() as playwright:
    run(playwright)
`;
      }
    }
  }
  python.PythonLanguageGenerator = PythonLanguageGenerator;
  function formatValue(value) {
    if (value === false) return "False";
    if (value === true) return "True";
    if (value === void 0) return "None";
    if (Array.isArray(value)) return `[${value.map(formatValue).join(", ")}]`;
    if (typeof value === "string") return quote(value);
    if (typeof value === "object") return JSON.stringify(value);
    return String(value);
  }
  function formatOptions(value, hasArguments, asDict) {
    const keys = Object.keys(value).filter((key) => value[key] !== void 0).sort();
    if (!keys.length) return "";
    return (hasArguments ? ", " : "") + keys.map((key) => {
      if (asDict) return `"${(0, _utils.toSnakeCase)(key)}": ${formatValue(value[key])}`;
      return `${(0, _utils.toSnakeCase)(key)}=${formatValue(value[key])}`;
    }).join(", ");
  }
  function formatContextOptions(options, deviceName, asDict) {
    options = {
      ...options,
      recordHar: void 0
    };
    const device = deviceName && _deviceDescriptors.deviceDescriptors[deviceName];
    if (!device) return formatOptions(options, false, asDict);
    return `**playwright.devices[${quote(deviceName)}]` + formatOptions((0, _language.sanitizeDeviceOptions)(device, options), true, asDict);
  }
  class PythonFormatter {
    constructor(offset = 0) {
      this._baseIndent = void 0;
      this._baseOffset = void 0;
      this._lines = [];
      this._baseIndent = " ".repeat(4);
      this._baseOffset = " ".repeat(offset);
    }
    prepend(text) {
      this._lines = text.trim().split("\n").map((line) => line.trim()).concat(this._lines);
    }
    add(text) {
      this._lines.push(...text.trim().split("\n").map((line) => line.trim()));
    }
    newLine() {
      this._lines.push("");
    }
    format() {
      let spaces = "";
      const lines = [];
      this._lines.forEach((line) => {
        if (line === "") return lines.push(line);
        if (line === "}") {
          spaces = spaces.substring(this._baseIndent.length);
          return;
        }
        line = spaces + line;
        if (line.endsWith("{")) {
          spaces += this._baseIndent;
          line = line.substring(0, line.length - 1).trimEnd() + ":";
        }
        return lines.push(this._baseOffset + line);
      });
      return lines.join("\n");
    }
  }
  function quote(text) {
    return (0, _utils.escapeWithQuotes)(text, '"');
  }
  return python;
}
var hasRequiredLanguages;
function requireLanguages() {
  if (hasRequiredLanguages) return languages;
  hasRequiredLanguages = 1;
  Object.defineProperty(languages, "__esModule", {
    value: true
  });
  languages.languageSet = languageSet;
  var _csharp = requireCsharp();
  var _java = requireJava();
  var _javascript = requireJavascript();
  var _jsonl = requireJsonl();
  var _python = requirePython();
  function languageSet() {
    return /* @__PURE__ */ new Set([new _java.JavaLanguageGenerator("junit"), new _java.JavaLanguageGenerator("library"), new _javascript.JavaScriptLanguageGenerator(
      /* isPlaywrightTest */
      false
    ), new _javascript.JavaScriptLanguageGenerator(
      /* isPlaywrightTest */
      true
    ), new _python.PythonLanguageGenerator(
      /* isAsync */
      false,
      /* isPytest */
      true
    ), new _python.PythonLanguageGenerator(
      /* isAsync */
      false,
      /* isPytest */
      false
    ), new _python.PythonLanguageGenerator(
      /* isAsync */
      true,
      /* isPytest */
      false
    ), new _csharp.CSharpLanguageGenerator("mstest"), new _csharp.CSharpLanguageGenerator("nunit"), new _csharp.CSharpLanguageGenerator("library"), new _jsonl.JsonlLanguageGenerator()]);
  }
  return languages;
}
var throttledFile = {};
var hasRequiredThrottledFile;
function requireThrottledFile() {
  if (hasRequiredThrottledFile) return throttledFile;
  hasRequiredThrottledFile = 1;
  Object.defineProperty(throttledFile, "__esModule", {
    value: true
  });
  throttledFile.ThrottledFile = void 0;
  var _fs = _interopRequireDefault(require$$0$2);
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  class ThrottledFile {
    constructor(file2) {
      this._file = void 0;
      this._timer = void 0;
      this._text = void 0;
      this._file = file2;
    }
    setContent(text) {
      this._text = text;
      if (!this._timer) this._timer = setTimeout(() => this.flush(), 250);
    }
    flush() {
      if (this._timer) {
        clearTimeout(this._timer);
        this._timer = void 0;
      }
      if (this._text) _fs.default.writeFileSync(this._file, this._text);
      this._text = void 0;
    }
  }
  throttledFile.ThrottledFile = ThrottledFile;
  return throttledFile;
}
var hasRequiredContextRecorder;
function requireContextRecorder() {
  if (hasRequiredContextRecorder) return contextRecorder;
  hasRequiredContextRecorder = 1;
  Object.defineProperty(contextRecorder, "__esModule", {
    value: true
  });
  contextRecorder.ContextRecorder = void 0;
  contextRecorder.generateFrameSelector = generateFrameSelector;
  var _events = require$$0$4;
  var _recorderCollection = requireRecorderCollection();
  var recorderSource = _interopRequireWildcard(requirePollingRecorderSource());
  var _utils = requireUtils();
  var _timeoutRunner = requireTimeoutRunner();
  var _browserContext = requireBrowserContext$1();
  var _languages = requireLanguages();
  var _frames = requireFrames();
  var _page = requirePage$1();
  var _throttledFile = requireThrottledFile();
  var _language = requireLanguage();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  class ContextRecorder extends _events.EventEmitter {
    constructor(context, params, delegate) {
      super();
      this._collection = void 0;
      this._pageAliases = /* @__PURE__ */ new Map();
      this._lastPopupOrdinal = 0;
      this._lastDialogOrdinal = -1;
      this._lastDownloadOrdinal = -1;
      this._context = void 0;
      this._params = void 0;
      this._delegate = void 0;
      this._recorderSources = void 0;
      this._throttledOutputFile = null;
      this._orderedLanguages = [];
      this._listeners = [];
      this._context = context;
      this._params = params;
      this._delegate = delegate;
      this._recorderSources = [];
      const language2 = params.language || context.attribution.playwright.options.sdkLanguage;
      this.setOutput(language2, params.outputFile);
      const languageGeneratorOptions = {
        browserName: context._browser.options.name,
        launchOptions: {
          headless: false,
          ...params.launchOptions,
          tracesDir: void 0
        },
        contextOptions: {
          ...params.contextOptions
        },
        deviceName: params.device,
        saveStorage: params.saveStorage
      };
      this._collection = new _recorderCollection.RecorderCollection(this._pageAliases);
      this._collection.on("change", (actions) => {
        this._recorderSources = [];
        for (const languageGenerator of this._orderedLanguages) {
          var _this$_throttledOutpu;
          const {
            header,
            footer,
            actionTexts,
            text
          } = (0, _language.generateCode)(actions, languageGenerator, languageGeneratorOptions);
          const source = {
            isRecorded: true,
            label: languageGenerator.name,
            group: languageGenerator.groupName,
            id: languageGenerator.id,
            text,
            header,
            footer,
            actions: actionTexts,
            language: languageGenerator.highlighter,
            highlight: []
          };
          source.revealLine = text.split("\n").length - 1;
          this._recorderSources.push(source);
          if (languageGenerator === this._orderedLanguages[0]) (_this$_throttledOutpu = this._throttledOutputFile) === null || _this$_throttledOutpu === void 0 || _this$_throttledOutpu.setContent(source.text);
        }
        this.emit(ContextRecorder.Events.Change, {
          sources: this._recorderSources,
          actions
        });
      });
      context.on(_browserContext.BrowserContext.Events.BeforeClose, () => {
        var _this$_throttledOutpu2;
        (_this$_throttledOutpu2 = this._throttledOutputFile) === null || _this$_throttledOutpu2 === void 0 || _this$_throttledOutpu2.flush();
      });
      this._listeners.push(_utils.eventsHelper.addEventListener(process, "exit", () => {
        var _this$_throttledOutpu3;
        (_this$_throttledOutpu3 = this._throttledOutputFile) === null || _this$_throttledOutpu3 === void 0 || _this$_throttledOutpu3.flush();
      }));
      this.setEnabled(params.mode === "recording");
    }
    setOutput(codegenId, outputFile) {
      var _this$_collection;
      const languages2 = (0, _languages.languageSet)();
      const primaryLanguage = [...languages2].find((l) => l.id === codegenId);
      if (!primaryLanguage) throw new Error(`
===============================
Unsupported language: '${codegenId}'
===============================
`);
      languages2.delete(primaryLanguage);
      this._orderedLanguages = [primaryLanguage, ...languages2];
      this._throttledOutputFile = outputFile ? new _throttledFile.ThrottledFile(outputFile) : null;
      (_this$_collection = this._collection) === null || _this$_collection === void 0 || _this$_collection.restart();
    }
    languageName(id) {
      for (const lang of this._orderedLanguages) {
        if (!id || lang.id === id) return lang.highlighter;
      }
      return "javascript";
    }
    async install() {
      this._context.on(_browserContext.BrowserContext.Events.Page, (page2) => this._onPage(page2));
      for (const page2 of this._context.pages()) this._onPage(page2);
      this._context.on(_browserContext.BrowserContext.Events.Dialog, (dialog2) => this._onDialog(dialog2.page()));
      await this._context.exposeBinding("__pw_recorderPerformAction", false, (source, action) => this._performAction(source.frame, action));
      await this._context.exposeBinding("__pw_recorderRecordAction", false, (source, action) => this._recordAction(source.frame, action));
      await this._context.extendInjectedScript(recorderSource.source);
    }
    setEnabled(enabled) {
      this._collection.setEnabled(enabled);
    }
    dispose() {
      _utils.eventsHelper.removeEventListeners(this._listeners);
    }
    async _onPage(page2) {
      const frame2 = page2.mainFrame();
      page2.on("close", () => {
        this._collection.addRecordedAction({
          frame: this._describeMainFrame(page2),
          action: {
            name: "closePage",
            signals: []
          },
          startTime: (0, _utils.monotonicTime)()
        });
        this._pageAliases.delete(page2);
      });
      frame2.on(_frames.Frame.Events.InternalNavigation, (event) => {
        if (event.isPublic) this._onFrameNavigated(frame2, page2);
      });
      page2.on(_page.Page.Events.Download, () => this._onDownload(page2));
      const suffix = this._pageAliases.size ? String(++this._lastPopupOrdinal) : "";
      const pageAlias = "page" + suffix;
      this._pageAliases.set(page2, pageAlias);
      if (page2.opener()) {
        this._onPopup(page2.opener(), page2);
      } else {
        this._collection.addRecordedAction({
          frame: this._describeMainFrame(page2),
          action: {
            name: "openPage",
            url: page2.mainFrame().url(),
            signals: []
          },
          startTime: (0, _utils.monotonicTime)()
        });
      }
    }
    clearScript() {
      this._collection.restart();
      if (this._params.mode === "recording") {
        for (const page2 of this._context.pages()) this._onFrameNavigated(page2.mainFrame(), page2);
      }
    }
    runTask(task2) {
    }
    _describeMainFrame(page2) {
      return {
        pageAlias: this._pageAliases.get(page2),
        framePath: []
      };
    }
    async _describeFrame(frame2) {
      return {
        pageAlias: this._pageAliases.get(frame2._page),
        framePath: await generateFrameSelector(frame2)
      };
    }
    testIdAttributeName() {
      return this._params.testIdAttributeName || this._context.selectors().testIdAttributeName() || "data-testid";
    }
    async _createActionInContext(frame2, action) {
      var _this$_delegate$rewri, _this$_delegate;
      const frameDescription = await this._describeFrame(frame2);
      const actionInContext = {
        frame: frameDescription,
        action,
        description: void 0,
        startTime: (0, _utils.monotonicTime)()
      };
      await ((_this$_delegate$rewri = (_this$_delegate = this._delegate).rewriteActionInContext) === null || _this$_delegate$rewri === void 0 ? void 0 : _this$_delegate$rewri.call(_this$_delegate, this._pageAliases, actionInContext));
      return actionInContext;
    }
    async _performAction(frame2, action) {
      await this._collection.performAction(await this._createActionInContext(frame2, action));
    }
    async _recordAction(frame2, action) {
      this._collection.addRecordedAction(await this._createActionInContext(frame2, action));
    }
    _onFrameNavigated(frame2, page2) {
      const pageAlias = this._pageAliases.get(page2);
      this._collection.signal(pageAlias, frame2, {
        name: "navigation",
        url: frame2.url()
      });
    }
    _onPopup(page2, popup) {
      const pageAlias = this._pageAliases.get(page2);
      const popupAlias = this._pageAliases.get(popup);
      this._collection.signal(pageAlias, page2.mainFrame(), {
        name: "popup",
        popupAlias
      });
    }
    _onDownload(page2) {
      const pageAlias = this._pageAliases.get(page2);
      ++this._lastDownloadOrdinal;
      this._collection.signal(pageAlias, page2.mainFrame(), {
        name: "download",
        downloadAlias: this._lastDownloadOrdinal ? String(this._lastDownloadOrdinal) : ""
      });
    }
    _onDialog(page2) {
      const pageAlias = this._pageAliases.get(page2);
      ++this._lastDialogOrdinal;
      this._collection.signal(pageAlias, page2.mainFrame(), {
        name: "dialog",
        dialogAlias: this._lastDialogOrdinal ? String(this._lastDialogOrdinal) : ""
      });
    }
  }
  contextRecorder.ContextRecorder = ContextRecorder;
  ContextRecorder.Events = {
    Change: "change"
  };
  async function generateFrameSelector(frame2) {
    const selectorPromises = [];
    while (frame2) {
      const parent = frame2.parentFrame();
      if (!parent) break;
      selectorPromises.push(generateFrameSelectorInParent(parent, frame2));
      frame2 = parent;
    }
    const result = await Promise.all(selectorPromises);
    return result.reverse();
  }
  async function generateFrameSelectorInParent(parent, frame2) {
    const result = await (0, _timeoutRunner.raceAgainstDeadline)(async () => {
      try {
        const frameElement = await frame2.frameElement();
        if (!frameElement || !parent) return;
        const utility = await parent._utilityContext();
        const injected = await utility.injectedScript();
        const selector = await injected.evaluate((injected2, element) => {
          return injected2.generateSelectorSimple(element);
        }, frameElement);
        return selector;
      } catch (e2) {
      }
    }, (0, _utils.monotonicTime)() + 2e3);
    if (!result.timedOut && result.result) return result.result;
    if (frame2.name()) return `iframe[name=${(0, _utils.quoteCSSAttributeValue)(frame2.name())}]`;
    return `iframe[src=${(0, _utils.quoteCSSAttributeValue)(frame2.url())}]`;
  }
  return contextRecorder;
}
var locatorParser = {};
var hasRequiredLocatorParser;
function requireLocatorParser() {
  if (hasRequiredLocatorParser) return locatorParser;
  hasRequiredLocatorParser = 1;
  Object.defineProperty(locatorParser, "__esModule", {
    value: true
  });
  locatorParser.locatorOrSelectorAsSelector = locatorOrSelectorAsSelector;
  locatorParser.unsafeLocatorOrSelectorAsSelector = unsafeLocatorOrSelectorAsSelector;
  var _locatorGenerators = requireLocatorGenerators();
  var _selectorParser = requireSelectorParser();
  var _stringUtils = requireStringUtils();
  function parseLocator(locator2, testIdAttributeName) {
    locator2 = locator2.replace(/AriaRole\s*\.\s*([\w]+)/g, (_2, group) => group.toLowerCase()).replace(/(get_by_role|getByRole)\s*\(\s*(?:["'`])([^'"`]+)['"`]/g, (_2, group1, group2) => `${group1}(${group2.toLowerCase()}`);
    const params = [];
    let template = "";
    for (let i = 0; i < locator2.length; ++i) {
      const quote = locator2[i];
      if (quote !== '"' && quote !== "'" && quote !== "`" && quote !== "/") {
        template += quote;
        continue;
      }
      const isRegexEscaping = locator2[i - 1] === "r" || locator2[i] === "/";
      ++i;
      let text = "";
      while (i < locator2.length) {
        if (locator2[i] === "\\") {
          if (isRegexEscaping) {
            if (locator2[i + 1] !== quote) text += locator2[i];
            ++i;
            text += locator2[i];
          } else {
            ++i;
            if (locator2[i] === "n") text += "\n";
            else if (locator2[i] === "r") text += "\r";
            else if (locator2[i] === "t") text += "	";
            else text += locator2[i];
          }
          ++i;
          continue;
        }
        if (locator2[i] !== quote) {
          text += locator2[i++];
          continue;
        }
        break;
      }
      params.push({
        quote,
        text
      });
      template += (quote === "/" ? "r" : "") + "$" + params.length;
    }
    template = template.toLowerCase().replace(/get_by_alt_text/g, "getbyalttext").replace(/get_by_test_id/g, "getbytestid").replace(/get_by_([\w]+)/g, "getby$1").replace(/has_not_text/g, "hasnottext").replace(/has_text/g, "hastext").replace(/has_not/g, "hasnot").replace(/frame_locator/g, "framelocator").replace(/content_frame/g, "contentframe").replace(/[{}\s]/g, "").replace(/new\(\)/g, "").replace(/new[\w]+\.[\w]+options\(\)/g, "").replace(/\.set/g, ",set").replace(/\.or_\(/g, "or(").replace(/\.and_\(/g, "and(").replace(/:/g, "=").replace(/,re\.ignorecase/g, "i").replace(/,pattern.case_insensitive/g, "i").replace(/,regexoptions.ignorecase/g, "i").replace(/re.compile\(([^)]+)\)/g, "$1").replace(/pattern.compile\(([^)]+)\)/g, "r$1").replace(/newregex\(([^)]+)\)/g, "r$1").replace(/string=/g, "=").replace(/regex=/g, "=").replace(/,,/g, ",").replace(/,\)/g, ")");
    const preferredQuote = params.map((p) => p.quote).filter((quote) => "'\"`".includes(quote))[0];
    return {
      selector: transform(template, params, testIdAttributeName),
      preferredQuote
    };
  }
  function countParams(template) {
    return [...template.matchAll(/\$\d+/g)].length;
  }
  function shiftParams(template, sub) {
    return template.replace(/\$(\d+)/g, (_2, ordinal) => `$${ordinal - sub}`);
  }
  function transform(template, params, testIdAttributeName) {
    while (true) {
      const hasMatch = template.match(/filter\(,?(has=|hasnot=|sethas\(|sethasnot\()/);
      if (!hasMatch) break;
      const start = hasMatch.index + hasMatch[0].length;
      let balance = 0;
      let end = start;
      for (; end < template.length; end++) {
        if (template[end] === "(") balance++;
        else if (template[end] === ")") balance--;
        if (balance < 0) break;
      }
      let prefix = template.substring(0, start);
      let extraSymbol = 0;
      if (["sethas(", "sethasnot("].includes(hasMatch[1])) {
        extraSymbol = 1;
        prefix = prefix.replace(/sethas\($/, "has=").replace(/sethasnot\($/, "hasnot=");
      }
      const paramsCountBeforeHas = countParams(template.substring(0, start));
      const hasTemplate = shiftParams(template.substring(start, end), paramsCountBeforeHas);
      const paramsCountInHas = countParams(hasTemplate);
      const hasParams = params.slice(paramsCountBeforeHas, paramsCountBeforeHas + paramsCountInHas);
      const hasSelector = JSON.stringify(transform(hasTemplate, hasParams, testIdAttributeName));
      template = prefix.replace(/=$/, "2=") + `$${paramsCountBeforeHas + 1}` + shiftParams(template.substring(end + extraSymbol), paramsCountInHas - 1);
      const paramsBeforeHas = params.slice(0, paramsCountBeforeHas);
      const paramsAfterHas = params.slice(paramsCountBeforeHas + paramsCountInHas);
      params = paramsBeforeHas.concat([{
        quote: '"',
        text: hasSelector
      }]).concat(paramsAfterHas);
    }
    template = template.replace(/\,set([\w]+)\(([^)]+)\)/g, (_2, group1, group2) => "," + group1.toLowerCase() + "=" + group2.toLowerCase()).replace(/framelocator\(([^)]+)\)/g, "$1.internal:control=enter-frame").replace(/contentframe(\(\))?/g, "internal:control=enter-frame").replace(/locator\(([^)]+),hastext=([^),]+)\)/g, "locator($1).internal:has-text=$2").replace(/locator\(([^)]+),hasnottext=([^),]+)\)/g, "locator($1).internal:has-not-text=$2").replace(/locator\(([^)]+),hastext=([^),]+)\)/g, "locator($1).internal:has-text=$2").replace(/locator\(([^)]+)\)/g, "$1").replace(/getbyrole\(([^)]+)\)/g, "internal:role=$1").replace(/getbytext\(([^)]+)\)/g, "internal:text=$1").replace(/getbylabel\(([^)]+)\)/g, "internal:label=$1").replace(/getbytestid\(([^)]+)\)/g, `internal:testid=[${testIdAttributeName}=$1]`).replace(/getby(placeholder|alt|title)(?:text)?\(([^)]+)\)/g, "internal:attr=[$1=$2]").replace(/first(\(\))?/g, "nth=0").replace(/last(\(\))?/g, "nth=-1").replace(/nth\(([^)]+)\)/g, "nth=$1").replace(/filter\(,?visible=true\)/g, "visible=true").replace(/filter\(,?visible=false\)/g, "visible=false").replace(/filter\(,?hastext=([^)]+)\)/g, "internal:has-text=$1").replace(/filter\(,?hasnottext=([^)]+)\)/g, "internal:has-not-text=$1").replace(/filter\(,?has2=([^)]+)\)/g, "internal:has=$1").replace(/filter\(,?hasnot2=([^)]+)\)/g, "internal:has-not=$1").replace(/,exact=false/g, "").replace(/,exact=true/g, "s").replace(/,includehidden=/g, ",include-hidden=").replace(/\,/g, "][");
    const parts = template.split(".");
    for (let index = 0; index < parts.length - 1; index++) {
      if (parts[index] === "internal:control=enter-frame" && parts[index + 1].startsWith("nth=")) {
        const [nth] = parts.splice(index, 1);
        parts.splice(index + 1, 0, nth);
      }
    }
    return parts.map((t) => {
      if (!t.startsWith("internal:") || t === "internal:control") return t.replace(/\$(\d+)/g, (_2, ordinal) => {
        const param = params[+ordinal - 1];
        return param.text;
      });
      t = t.includes("[") ? t.replace(/\]/, "") + "]" : t;
      t = t.replace(/(?:r)\$(\d+)(i)?/g, (_2, ordinal, suffix) => {
        const param = params[+ordinal - 1];
        if (t.startsWith("internal:attr") || t.startsWith("internal:testid") || t.startsWith("internal:role")) return (0, _stringUtils.escapeForAttributeSelector)(new RegExp(param.text), false) + (suffix || "");
        return (0, _stringUtils.escapeForTextSelector)(new RegExp(param.text, suffix), false);
      }).replace(/\$(\d+)(i|s)?/g, (_2, ordinal, suffix) => {
        const param = params[+ordinal - 1];
        if (t.startsWith("internal:has=") || t.startsWith("internal:has-not=")) return param.text;
        if (t.startsWith("internal:testid")) return (0, _stringUtils.escapeForAttributeSelector)(param.text, true);
        if (t.startsWith("internal:attr") || t.startsWith("internal:role")) return (0, _stringUtils.escapeForAttributeSelector)(param.text, suffix === "s");
        return (0, _stringUtils.escapeForTextSelector)(param.text, suffix === "s");
      });
      return t;
    }).join(" >> ");
  }
  function locatorOrSelectorAsSelector(language2, locator2, testIdAttributeName) {
    try {
      return unsafeLocatorOrSelectorAsSelector(language2, locator2, testIdAttributeName);
    } catch (e2) {
      return "";
    }
  }
  function unsafeLocatorOrSelectorAsSelector(language2, locator2, testIdAttributeName) {
    try {
      (0, _selectorParser.parseSelector)(locator2);
      return locator2;
    } catch (e2) {
    }
    const {
      selector,
      preferredQuote
    } = parseLocator(locator2, testIdAttributeName);
    const locators = (0, _locatorGenerators.asLocators)(language2, selector, void 0, void 0, preferredQuote);
    const digest = digestForComparison(language2, locator2);
    if (locators.some((candidate) => digestForComparison(language2, candidate) === digest)) return selector;
    return "";
  }
  function digestForComparison(language2, locator2) {
    locator2 = locator2.replace(/\s/g, "");
    if (language2 === "javascript") locator2 = locator2.replace(/\\?["`]/g, "'").replace(/,{}/g, "");
    return locator2;
  }
  return locatorParser;
}
var hasRequiredRecorder;
function requireRecorder() {
  if (hasRequiredRecorder) return recorder;
  hasRequiredRecorder = 1;
  Object.defineProperty(recorder, "__esModule", {
    value: true
  });
  recorder.Recorder = void 0;
  var _fs = _interopRequireDefault(require$$0$2);
  var consoleApiSource2 = _interopRequireWildcard(requireConsoleApiSource());
  var _utils = requireUtils();
  var _browserContext = requireBrowserContext$1();
  var _debugger2 = require_debugger();
  var _contextRecorder = requireContextRecorder();
  var _recorderUtils = requireRecorderUtils();
  var _locatorParser = requireLocatorParser();
  var _selectorParser = requireSelectorParser();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  const recorderSymbol = Symbol("recorderSymbol");
  class Recorder {
    static async showInspector(context, params, recorderAppFactory) {
      if ((0, _utils.isUnderTest)()) params.language = process.env.TEST_INSPECTOR_LANGUAGE;
      return await Recorder.show(context, recorderAppFactory, params);
    }
    static showInspectorNoReply(context, recorderAppFactory) {
      Recorder.showInspector(context, {}, recorderAppFactory).catch(() => {
      });
    }
    static show(context, recorderAppFactory, params) {
      let recorderPromise = context[recorderSymbol];
      if (!recorderPromise) {
        recorderPromise = Recorder._create(context, recorderAppFactory, params);
        context[recorderSymbol] = recorderPromise;
      }
      return recorderPromise;
    }
    static async _create(context, recorderAppFactory, params = {}) {
      const recorder2 = new Recorder(context, params);
      const recorderApp2 = await recorderAppFactory(recorder2);
      await recorder2._install(recorderApp2);
      return recorder2;
    }
    constructor(context, params) {
      this.handleSIGINT = void 0;
      this._context = void 0;
      this._mode = void 0;
      this._highlightedElement = {};
      this._overlayState = {
        offsetX: 0
      };
      this._recorderApp = null;
      this._currentCallsMetadata = /* @__PURE__ */ new Map();
      this._recorderSources = [];
      this._userSources = /* @__PURE__ */ new Map();
      this._debugger = void 0;
      this._contextRecorder = void 0;
      this._omitCallTracking = false;
      this._currentLanguage = void 0;
      this._mode = params.mode || "none";
      this.handleSIGINT = params.handleSIGINT;
      this._contextRecorder = new _contextRecorder.ContextRecorder(context, params, {});
      this._context = context;
      this._omitCallTracking = !!params.omitCallTracking;
      this._debugger = context.debugger();
      context.instrumentation.addListener(this, context);
      this._currentLanguage = this._contextRecorder.languageName();
      if ((0, _utils.isUnderTest)()) {
        this._overlayState.offsetX = 200;
      }
    }
    async _install(recorderApp2) {
      this._recorderApp = recorderApp2;
      recorderApp2.once("close", () => {
        this._debugger.resume(false);
        this._recorderApp = null;
      });
      recorderApp2.on("event", (data) => {
        if (data.event === "setMode") {
          this.setMode(data.params.mode);
          return;
        }
        if (data.event === "highlightRequested") {
          if (data.params.selector) this.setHighlightedSelector(this._currentLanguage, data.params.selector);
          if (data.params.ariaTemplate) this.setHighlightedAriaTemplate(data.params.ariaTemplate);
          return;
        }
        if (data.event === "step") {
          this._debugger.resume(true);
          return;
        }
        if (data.event === "fileChanged") {
          this._currentLanguage = this._contextRecorder.languageName(data.params.file);
          this._refreshOverlay();
          return;
        }
        if (data.event === "resume") {
          this._debugger.resume(false);
          return;
        }
        if (data.event === "pause") {
          this._debugger.pauseOnNextStatement();
          return;
        }
        if (data.event === "clear") {
          this._contextRecorder.clearScript();
          return;
        }
        if (data.event === "runTask") {
          this._contextRecorder.runTask(data.params.task);
          return;
        }
      });
      await Promise.all([recorderApp2.setMode(this._mode), recorderApp2.setPaused(this._debugger.isPaused()), this._pushAllSources()]);
      this._context.once(_browserContext.BrowserContext.Events.Close, () => {
        var _this$_recorderApp;
        this._contextRecorder.dispose();
        this._context.instrumentation.removeListener(this);
        (_this$_recorderApp = this._recorderApp) === null || _this$_recorderApp === void 0 || _this$_recorderApp.close().catch(() => {
        });
      });
      this._contextRecorder.on(_contextRecorder.ContextRecorder.Events.Change, (data) => {
        this._recorderSources = data.sources;
        recorderApp2.setActions(data.actions, data.sources);
        recorderApp2.setRunningFile(void 0);
        this._pushAllSources();
      });
      await this._context.exposeBinding("__pw_recorderState", false, async (source) => {
        let actionSelector;
        let actionPoint;
        const hasActiveScreenshotCommand = [...this._currentCallsMetadata.keys()].some(isScreenshotCommand);
        if (!hasActiveScreenshotCommand) {
          actionSelector = await this._scopeHighlightedSelectorToFrame(source.frame);
          for (const [metadata, sdkObject] of this._currentCallsMetadata) {
            if (source.page === sdkObject.attribution.page) {
              actionPoint = metadata.point || actionPoint;
              actionSelector = actionSelector || metadata.params.selector;
            }
          }
        }
        const uiState = {
          mode: this._mode,
          actionPoint,
          actionSelector,
          ariaTemplate: this._highlightedElement.ariaTemplate,
          language: this._currentLanguage,
          testIdAttributeName: this._contextRecorder.testIdAttributeName(),
          overlay: this._overlayState
        };
        return uiState;
      });
      await this._context.exposeBinding("__pw_recorderElementPicked", false, async ({
        frame: frame2
      }, elementInfo) => {
        var _this$_recorderApp2;
        const selectorChain = await (0, _contextRecorder.generateFrameSelector)(frame2);
        await ((_this$_recorderApp2 = this._recorderApp) === null || _this$_recorderApp2 === void 0 ? void 0 : _this$_recorderApp2.elementPicked({
          selector: (0, _recorderUtils.buildFullSelector)(selectorChain, elementInfo.selector),
          ariaSnapshot: elementInfo.ariaSnapshot
        }, true));
      });
      await this._context.exposeBinding("__pw_recorderSetMode", false, async ({
        frame: frame2
      }, mode) => {
        if (frame2.parentFrame()) return;
        this.setMode(mode);
      });
      await this._context.exposeBinding("__pw_recorderSetOverlayState", false, async ({
        frame: frame2
      }, state) => {
        if (frame2.parentFrame()) return;
        this._overlayState = state;
      });
      await this._context.exposeBinding("__pw_resume", false, () => {
        this._debugger.resume(false);
      });
      await this._context.extendInjectedScript(consoleApiSource2.source);
      await this._contextRecorder.install();
      if (this._debugger.isPaused()) this._pausedStateChanged();
      this._debugger.on(_debugger2.Debugger.Events.PausedStateChanged, () => this._pausedStateChanged());
      this._context.recorderAppForTest = this._recorderApp;
    }
    _pausedStateChanged() {
      var _this$_recorderApp3;
      for (const {
        metadata,
        sdkObject
      } of this._debugger.pausedDetails()) {
        if (!this._currentCallsMetadata.has(metadata)) this.onBeforeCall(sdkObject, metadata);
      }
      (_this$_recorderApp3 = this._recorderApp) === null || _this$_recorderApp3 === void 0 || _this$_recorderApp3.setPaused(this._debugger.isPaused());
      this._updateUserSources();
      this.updateCallLog([...this._currentCallsMetadata.keys()]);
    }
    setMode(mode) {
      var _this$_recorderApp4;
      if (this._mode === mode) return;
      this._highlightedElement = {};
      this._mode = mode;
      (_this$_recorderApp4 = this._recorderApp) === null || _this$_recorderApp4 === void 0 || _this$_recorderApp4.setMode(this._mode);
      this._contextRecorder.setEnabled(this._isRecording());
      this._debugger.setMuted(this._isRecording());
      if (this._mode !== "none" && this._mode !== "standby" && this._context.pages().length === 1) this._context.pages()[0].bringToFront().catch(() => {
      });
      this._refreshOverlay();
    }
    resume() {
      this._debugger.resume(false);
    }
    mode() {
      return this._mode;
    }
    setHighlightedSelector(language2, selector) {
      this._highlightedElement = {
        selector: (0, _locatorParser.locatorOrSelectorAsSelector)(language2, selector, this._context.selectors().testIdAttributeName())
      };
      this._refreshOverlay();
    }
    setHighlightedAriaTemplate(ariaTemplate) {
      this._highlightedElement = {
        ariaTemplate
      };
      this._refreshOverlay();
    }
    hideHighlightedSelector() {
      this._highlightedElement = {};
      this._refreshOverlay();
    }
    async _scopeHighlightedSelectorToFrame(frame2) {
      if (!this._highlightedElement.selector) return;
      try {
        const mainFrame = frame2._page.mainFrame();
        const resolved = await mainFrame.selectors.resolveFrameForSelector(this._highlightedElement.selector);
        if (!resolved) return "";
        if ((resolved === null || resolved === void 0 ? void 0 : resolved.frame) === mainFrame) return (0, _selectorParser.stringifySelector)(resolved.info.parsed);
        if ((resolved === null || resolved === void 0 ? void 0 : resolved.frame) === frame2) return (0, _selectorParser.stringifySelector)(resolved.info.parsed);
        return "";
      } catch {
        return "";
      }
    }
    setOutput(codegenId, outputFile) {
      this._contextRecorder.setOutput(codegenId, outputFile);
    }
    _refreshOverlay() {
      for (const page2 of this._context.pages()) {
        for (const frame2 of page2.frames()) frame2.evaluateExpression("window.__pw_refreshOverlay()").catch(() => {
        });
      }
    }
    async onBeforeCall(sdkObject, metadata) {
      if (this._omitCallTracking || this._isRecording()) return;
      this._currentCallsMetadata.set(metadata, sdkObject);
      this._updateUserSources();
      this.updateCallLog([metadata]);
      if (isScreenshotCommand(metadata)) this.hideHighlightedSelector();
      else if (metadata.params && metadata.params.selector) this._highlightedElement = {
        selector: metadata.params.selector
      };
    }
    async onAfterCall(sdkObject, metadata) {
      if (this._omitCallTracking || this._isRecording()) return;
      if (!metadata.error) this._currentCallsMetadata.delete(metadata);
      this._updateUserSources();
      this.updateCallLog([metadata]);
    }
    _updateUserSources() {
      var _this$_recorderApp5;
      for (const source of this._userSources.values()) {
        source.highlight = [];
        source.revealLine = void 0;
      }
      let fileToSelect = void 0;
      for (const metadata of this._currentCallsMetadata.keys()) {
        if (!metadata.location) continue;
        const {
          file: file2,
          line
        } = metadata.location;
        let source = this._userSources.get(file2);
        if (!source) {
          source = {
            isRecorded: false,
            label: file2,
            id: file2,
            text: this._readSource(file2),
            highlight: [],
            language: languageForFile(file2)
          };
          this._userSources.set(file2, source);
        }
        if (line) {
          const paused = this._debugger.isPaused(metadata);
          source.highlight.push({
            line,
            type: metadata.error ? "error" : paused ? "paused" : "running"
          });
          source.revealLine = line;
          fileToSelect = source.id;
        }
      }
      this._pushAllSources();
      if (fileToSelect) (_this$_recorderApp5 = this._recorderApp) === null || _this$_recorderApp5 === void 0 || _this$_recorderApp5.setRunningFile(fileToSelect);
    }
    _pushAllSources() {
      var _this$_recorderApp6;
      const primaryPage = this._context.pages()[0];
      (_this$_recorderApp6 = this._recorderApp) === null || _this$_recorderApp6 === void 0 || _this$_recorderApp6.setSources([...this._recorderSources, ...this._userSources.values()], primaryPage === null || primaryPage === void 0 ? void 0 : primaryPage.mainFrame().url());
    }
    async onBeforeInputAction(sdkObject, metadata) {
    }
    async onCallLog(sdkObject, metadata, logName, message) {
      this.updateCallLog([metadata]);
    }
    updateCallLog(metadatas) {
      var _this$_recorderApp7;
      if (this._isRecording()) return;
      const logs = [];
      for (const metadata of metadatas) {
        if (!metadata.method || metadata.internal) continue;
        let status = "done";
        if (this._currentCallsMetadata.has(metadata)) status = "in-progress";
        if (this._debugger.isPaused(metadata)) status = "paused";
        logs.push((0, _recorderUtils.metadataToCallLog)(metadata, status));
      }
      (_this$_recorderApp7 = this._recorderApp) === null || _this$_recorderApp7 === void 0 || _this$_recorderApp7.updateCallLogs(logs);
    }
    _isRecording() {
      return ["recording", "assertingText", "assertingVisibility", "assertingValue", "assertingSnapshot"].includes(this._mode);
    }
    _readSource(fileName) {
      try {
        return _fs.default.readFileSync(fileName, "utf-8");
      } catch (e2) {
        return "// No source available";
      }
    }
  }
  recorder.Recorder = Recorder;
  function isScreenshotCommand(metadata) {
    return metadata.method.toLowerCase().includes("screenshot");
  }
  function languageForFile(file2) {
    if (file2.endsWith(".py")) return "python";
    if (file2.endsWith(".java")) return "java";
    if (file2.endsWith(".cs")) return "csharp";
    return "javascript";
  }
  return recorder;
}
var recorderApp = {};
var launchApp = {};
var hasRequiredLaunchApp;
function requireLaunchApp() {
  if (hasRequiredLaunchApp) return launchApp;
  hasRequiredLaunchApp = 1;
  Object.defineProperty(launchApp, "__esModule", {
    value: true
  });
  launchApp.launchApp = launchApp$1;
  launchApp.syncLocalStorageWithSettings = syncLocalStorageWithSettings;
  var _fs = _interopRequireDefault(require$$0$2);
  var _path2 = _interopRequireDefault(require$$1$1);
  var _utils = requireUtils();
  var _instrumentation = requireInstrumentation();
  var _registry = requireRegistry();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  async function launchApp$1(browserType2, options) {
    var _options$persistentCo, _options$persistentCo2, _options$persistentCo3, _options$persistentCo4, _options$persistentCo5, _options$persistentCo6, _options$persistentCo7, _options$persistentCo8, _options$persistentCo9, _options$persistentCo10, _options$persistentCo11;
    const args = [...(_options$persistentCo = (_options$persistentCo2 = options.persistentContextOptions) === null || _options$persistentCo2 === void 0 ? void 0 : _options$persistentCo2.args) !== null && _options$persistentCo !== void 0 ? _options$persistentCo : []];
    if (browserType2.name() === "chromium") {
      args.push("--app=data:text/html,", `--window-size=${options.windowSize.width},${options.windowSize.height}`, ...options.windowPosition ? [`--window-position=${options.windowPosition.x},${options.windowPosition.y}`] : [], "--test-type=");
    }
    const context = await browserType2.launchPersistentContext((0, _instrumentation.serverSideCallMetadata)(), "", {
      ignoreDefaultArgs: ["--enable-automation"],
      ...options === null || options === void 0 ? void 0 : options.persistentContextOptions,
      channel: (_options$persistentCo3 = (_options$persistentCo4 = options.persistentContextOptions) === null || _options$persistentCo4 === void 0 ? void 0 : _options$persistentCo4.channel) !== null && _options$persistentCo3 !== void 0 ? _options$persistentCo3 : !((_options$persistentCo5 = options.persistentContextOptions) !== null && _options$persistentCo5 !== void 0 && _options$persistentCo5.executablePath) ? (0, _registry.findChromiumChannel)(options.sdkLanguage) : void 0,
      noDefaultViewport: (_options$persistentCo6 = (_options$persistentCo7 = options.persistentContextOptions) === null || _options$persistentCo7 === void 0 ? void 0 : _options$persistentCo7.noDefaultViewport) !== null && _options$persistentCo6 !== void 0 ? _options$persistentCo6 : true,
      acceptDownloads: (_options$persistentCo8 = options === null || options === void 0 || (_options$persistentCo9 = options.persistentContextOptions) === null || _options$persistentCo9 === void 0 ? void 0 : _options$persistentCo9.acceptDownloads) !== null && _options$persistentCo8 !== void 0 ? _options$persistentCo8 : (0, _utils.isUnderTest)() ? "accept" : "internal-browser-default",
      colorScheme: (_options$persistentCo10 = options === null || options === void 0 || (_options$persistentCo11 = options.persistentContextOptions) === null || _options$persistentCo11 === void 0 ? void 0 : _options$persistentCo11.colorScheme) !== null && _options$persistentCo10 !== void 0 ? _options$persistentCo10 : "no-override",
      args
    });
    const [page2] = context.pages();
    if (browserType2.name() === "chromium" && process.platform === "darwin") {
      context.on("page", async (newPage) => {
        if (newPage.mainFrame().url() === "chrome://new-tab-page/") {
          await page2.bringToFront();
          await newPage.close((0, _instrumentation.serverSideCallMetadata)());
        }
      });
    }
    if (browserType2.name() === "chromium") await installAppIcon(page2);
    return {
      context,
      page: page2
    };
  }
  async function installAppIcon(page2) {
    const icon = await _fs.default.promises.readFile(new URL("./chromium/appIcon.png", import.meta.url).pathname);
    const crPage2 = page2._delegate;
    await crPage2._mainFrameSession._client.send("Browser.setDockTile", {
      image: icon.toString("base64")
    });
  }
  async function syncLocalStorageWithSettings(page2, appName) {
    if ((0, _utils.isUnderTest)()) return;
    const settingsFile = _path2.default.join(_registry.registryDirectory, ".settings", `${appName}.json`);
    await page2.exposeBinding("_saveSerializedSettings", false, (_2, settings2) => {
      _fs.default.mkdirSync(_path2.default.dirname(settingsFile), {
        recursive: true
      });
      _fs.default.writeFileSync(settingsFile, settings2);
    });
    const settings = await _fs.default.promises.readFile(settingsFile, "utf-8").catch(() => "{}");
    await page2.addInitScript(`(${String((settings2) => {
      if (location && location.protocol === "data:") return;
      if (window.top !== window) return;
      Object.entries(settings2).map(([k2, v2]) => localStorage[k2] = v2);
      window.saveSettings = () => {
        window._saveSerializedSettings(JSON.stringify({
          ...localStorage
        }));
      };
    })})(${settings});
  `);
  }
  return launchApp;
}
var playwright$2 = {};
var android$1 = {};
var pipeTransport$1 = {};
var hasRequiredPipeTransport$1;
function requirePipeTransport$1() {
  if (hasRequiredPipeTransport$1) return pipeTransport$1;
  hasRequiredPipeTransport$1 = 1;
  Object.defineProperty(pipeTransport$1, "__esModule", {
    value: true
  });
  pipeTransport$1.PipeTransport = void 0;
  var _task = requireTask();
  class PipeTransport {
    constructor(pipeWrite, pipeRead, closeable, endian = "le") {
      this._pipeWrite = void 0;
      this._data = Buffer.from([]);
      this._waitForNextTask = (0, _task.makeWaitForNextTask)();
      this._closed = false;
      this._bytesLeft = 0;
      this.onmessage = void 0;
      this.onclose = void 0;
      this._endian = void 0;
      this._closeableStream = void 0;
      this._pipeWrite = pipeWrite;
      this._endian = endian;
      this._closeableStream = closeable;
      pipeRead.on("data", (buffer2) => this._dispatch(buffer2));
      pipeRead.on("close", () => {
        this._closed = true;
        if (this.onclose) this.onclose();
      });
      this.onmessage = void 0;
      this.onclose = void 0;
    }
    send(message) {
      if (this._closed) throw new Error("Pipe has been closed");
      const data = Buffer.from(message, "utf-8");
      const dataLength = Buffer.alloc(4);
      if (this._endian === "be") dataLength.writeUInt32BE(data.length, 0);
      else dataLength.writeUInt32LE(data.length, 0);
      this._pipeWrite.write(dataLength);
      this._pipeWrite.write(data);
    }
    close() {
      this._closeableStream.close();
    }
    _dispatch(buffer2) {
      this._data = Buffer.concat([this._data, buffer2]);
      while (true) {
        if (!this._bytesLeft && this._data.length < 4) {
          break;
        }
        if (!this._bytesLeft) {
          this._bytesLeft = this._endian === "be" ? this._data.readUInt32BE(0) : this._data.readUInt32LE(0);
          this._data = this._data.slice(4);
        }
        if (!this._bytesLeft || this._data.length < this._bytesLeft) {
          break;
        }
        const message = this._data.slice(0, this._bytesLeft);
        this._data = this._data.slice(this._bytesLeft);
        this._bytesLeft = 0;
        this._waitForNextTask(() => {
          if (this.onmessage) this.onmessage(message.toString("utf-8"));
        });
      }
    }
  }
  pipeTransport$1.PipeTransport = PipeTransport;
  return pipeTransport$1;
}
var chromiumSwitches = {};
var hasRequiredChromiumSwitches;
function requireChromiumSwitches() {
  if (hasRequiredChromiumSwitches) return chromiumSwitches;
  hasRequiredChromiumSwitches = 1;
  Object.defineProperty(chromiumSwitches, "__esModule", {
    value: true
  });
  chromiumSwitches.chromiumSwitches = void 0;
  const disabledFeatures = [
    // See https://github.com/microsoft/playwright/pull/10380
    "AcceptCHFrame",
    // See https://github.com/microsoft/playwright/pull/10679
    "AutoExpandDetailsElement",
    // See https://github.com/microsoft/playwright/issues/14047
    "AvoidUnnecessaryBeforeUnloadCheckSync",
    // See https://github.com/microsoft/playwright/pull/12992
    "CertificateTransparencyComponentUpdater",
    // This makes Page.frameScheduledNavigation arrive much later after a click,
    // making our navigation auto-wait after click not working.
    // Can be removed once we deperecate noWaitAfter.
    // See https://github.com/microsoft/playwright/pull/34372.
    "DeferRendererTasksAfterInput",
    "DestroyProfileOnBrowserClose",
    // See https://github.com/microsoft/playwright/pull/13854
    "DialMediaRouteProvider",
    // Chromium is disabling manifest version 2. Allow testing it as long as Chromium can actually run it.
    // Disabled in https://chromium-review.googlesource.com/c/chromium/src/+/6265903.
    "ExtensionManifestV2Disabled",
    "GlobalMediaControls",
    // See https://github.com/microsoft/playwright/pull/27605
    "HttpsUpgrades",
    "ImprovedCookieControls",
    "LazyFrameLoading",
    // Hides the Lens feature in the URL address bar. Its not working in unofficial builds.
    "LensOverlay",
    // See https://github.com/microsoft/playwright/pull/8162
    "MediaRouter",
    // See https://github.com/microsoft/playwright/issues/28023
    "PaintHolding",
    // See https://github.com/microsoft/playwright/issues/32230
    "ThirdPartyStoragePartitioning",
    // See https://github.com/microsoft/playwright/issues/16126
    "Translate"
  ];
  chromiumSwitches.chromiumSwitches = [
    "--disable-field-trial-config",
    // https://source.chromium.org/chromium/chromium/src/+/main:testing/variations/README.md
    "--disable-background-networking",
    "--disable-background-timer-throttling",
    "--disable-backgrounding-occluded-windows",
    "--disable-back-forward-cache",
    // Avoids surprises like main request not being intercepted during page.goBack().
    "--disable-breakpad",
    "--disable-client-side-phishing-detection",
    "--disable-component-extensions-with-background-pages",
    "--disable-component-update",
    // Avoids unneeded network activity after startup.
    "--no-default-browser-check",
    "--disable-default-apps",
    "--disable-dev-shm-usage",
    "--disable-extensions",
    "--disable-features=" + disabledFeatures.join(","),
    "--allow-pre-commit-input",
    "--disable-hang-monitor",
    "--disable-ipc-flooding-protection",
    "--disable-popup-blocking",
    "--disable-prompt-on-repost",
    "--disable-renderer-backgrounding",
    "--force-color-profile=srgb",
    "--metrics-recording-only",
    "--no-first-run",
    "--enable-automation",
    "--password-store=basic",
    "--use-mock-keychain",
    // See https://chromium-review.googlesource.com/c/chromium/src/+/2436773
    "--no-service-autorun",
    "--export-tagged-pdf",
    // https://chromium-review.googlesource.com/c/chromium/src/+/4853540
    "--disable-search-engine-choice-screen",
    // https://issues.chromium.org/41491762
    "--unsafely-disable-devtools-self-xss-warnings"
  ];
  return chromiumSwitches;
}
var crBrowser = {};
var browser$3 = {};
var download$1 = {};
var hasRequiredDownload$1;
function requireDownload$1() {
  if (hasRequiredDownload$1) return download$1;
  hasRequiredDownload$1 = 1;
  Object.defineProperty(download$1, "__esModule", {
    value: true
  });
  download$1.Download = void 0;
  var _path2 = _interopRequireDefault(require$$1$1);
  var _page = requirePage$1();
  var _utils = requireUtils();
  var _artifact = requireArtifact$1();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  class Download {
    constructor(page2, downloadsPath, uuid2, url, suggestedFilename) {
      this.artifact = void 0;
      this.url = void 0;
      this._page = void 0;
      this._suggestedFilename = void 0;
      const unaccessibleErrorMessage = page2._browserContext._options.acceptDownloads === "deny" ? "Pass { acceptDownloads: true } when you are creating your browser context." : void 0;
      this.artifact = new _artifact.Artifact(page2, _path2.default.join(downloadsPath, uuid2), unaccessibleErrorMessage, () => {
        return this._page._browserContext.cancelDownload(uuid2);
      });
      this._page = page2;
      this.url = url;
      this._suggestedFilename = suggestedFilename;
      page2._browserContext._downloads.add(this);
      if (suggestedFilename !== void 0) this._fireDownloadEvent();
    }
    page() {
      return this._page;
    }
    _filenameSuggested(suggestedFilename) {
      (0, _utils.assert)(this._suggestedFilename === void 0);
      this._suggestedFilename = suggestedFilename;
      this._fireDownloadEvent();
    }
    suggestedFilename() {
      return this._suggestedFilename;
    }
    _fireDownloadEvent() {
      this._page.instrumentation.onDownload(this._page, this);
      this._page.emit(_page.Page.Events.Download, this);
    }
  }
  download$1.Download = Download;
  return download$1;
}
var socksClientCertificatesInterceptor = {};
var hasRequiredSocksClientCertificatesInterceptor;
function requireSocksClientCertificatesInterceptor() {
  if (hasRequiredSocksClientCertificatesInterceptor) return socksClientCertificatesInterceptor;
  hasRequiredSocksClientCertificatesInterceptor = 1;
  Object.defineProperty(socksClientCertificatesInterceptor, "__esModule", {
    value: true
  });
  socksClientCertificatesInterceptor.ClientCertificatesProxy = void 0;
  socksClientCertificatesInterceptor.getMatchingTLSOptionsForOrigin = getMatchingTLSOptionsForOrigin;
  socksClientCertificatesInterceptor.rewriteOpenSSLErrorIfNeeded = rewriteOpenSSLErrorIfNeeded;
  var _events = require$$0$4;
  var _http = _interopRequireDefault(require$$1);
  var _net = _interopRequireDefault(require$$8);
  var _stream = _interopRequireDefault(require$$12);
  var _tls = _interopRequireDefault(require$$9);
  var _socksProxy = requireSocksProxy();
  var _utils = requireUtils();
  var _browserContext = requireBrowserContext$1();
  var _fetch = requireFetch$1();
  var _debugLogger = requireDebugLogger();
  var _happyEyeballs = requireHappyEyeballs();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  let dummyServerTlsOptions = void 0;
  function loadDummyServerCertsIfNeeded() {
    if (dummyServerTlsOptions) return;
    const {
      cert,
      key
    } = (0, _utils.generateSelfSignedCertificate)();
    dummyServerTlsOptions = {
      key,
      cert
    };
  }
  class ALPNCache {
    constructor() {
      this._cache = /* @__PURE__ */ new Map();
    }
    get(host, port, success) {
      const cacheKey = `${host}:${port}`;
      {
        const result2 = this._cache.get(cacheKey);
        if (result2) {
          result2.then(success);
          return;
        }
      }
      const result = new _utils.ManualPromise();
      this._cache.set(cacheKey, result);
      result.then(success);
      (0, _happyEyeballs.createTLSSocket)({
        host,
        port,
        servername: _net.default.isIP(host) ? void 0 : host,
        ALPNProtocols: ["h2", "http/1.1"],
        rejectUnauthorized: false
      }).then((socket) => {
        result.resolve(socket.alpnProtocol || "http/1.1");
        socket.end();
      }).catch((error) => {
        _debugLogger.debugLogger.log("client-certificates", `ALPN error: ${error.message}`);
        result.resolve("http/1.1");
      });
    }
  }
  class SocksProxyConnection {
    constructor(socksProxy2, uid, host, port) {
      this.socksProxy = void 0;
      this.uid = void 0;
      this.host = void 0;
      this.port = void 0;
      this.firstPackageReceived = false;
      this.target = void 0;
      this.internal = void 0;
      this.internalTLS = void 0;
      this._targetCloseEventListener = void 0;
      this._dummyServer = void 0;
      this._closed = false;
      this.socksProxy = socksProxy2;
      this.uid = uid;
      this.host = host;
      this.port = port;
      this._targetCloseEventListener = () => {
        var _this$internalTLS, _this$_dummyServer;
        this.socksProxy._socksProxy.sendSocketEnd({
          uid: this.uid
        });
        (_this$internalTLS = this.internalTLS) === null || _this$internalTLS === void 0 || _this$internalTLS.destroy();
        (_this$_dummyServer = this._dummyServer) === null || _this$_dummyServer === void 0 || _this$_dummyServer.close();
      };
    }
    async connect() {
      if (this.socksProxy.proxyAgentFromOptions) this.target = await this.socksProxy.proxyAgentFromOptions.callback(new _events.EventEmitter(), {
        host: rewriteToLocalhostIfNeeded(this.host),
        port: this.port,
        secureEndpoint: false
      });
      else this.target = await (0, _happyEyeballs.createSocket)(rewriteToLocalhostIfNeeded(this.host), this.port);
      this.target.once("close", this._targetCloseEventListener);
      this.target.once("error", (error) => this.socksProxy._socksProxy.sendSocketError({
        uid: this.uid,
        error: error.message
      }));
      if (this._closed) {
        this.target.destroy();
        return;
      }
      this.socksProxy._socksProxy.socketConnected({
        uid: this.uid,
        host: this.target.localAddress,
        port: this.target.localPort
      });
    }
    onClose() {
      var _this$internalTLS2, _this$_dummyServer2;
      this.target.destroy();
      (_this$internalTLS2 = this.internalTLS) === null || _this$internalTLS2 === void 0 || _this$internalTLS2.destroy();
      (_this$_dummyServer2 = this._dummyServer) === null || _this$_dummyServer2 === void 0 || _this$_dummyServer2.close();
      this._closed = true;
    }
    onData(data) {
      if (!this.firstPackageReceived) {
        this.firstPackageReceived = true;
        if (data[0] === 22) this._attachTLSListeners();
        else this.target.on("data", (data2) => this.socksProxy._socksProxy.sendSocketData({
          uid: this.uid,
          data: data2
        }));
      }
      if (this.internal) this.internal.push(data);
      else this.target.write(data);
    }
    _attachTLSListeners() {
      this.internal = new _stream.default.Duplex({
        read: () => {
        },
        write: (data, encoding, callback) => {
          this.socksProxy._socksProxy.sendSocketData({
            uid: this.uid,
            data
          });
          callback();
        }
      });
      this.socksProxy.alpnCache.get(rewriteToLocalhostIfNeeded(this.host), this.port, (alpnProtocolChosenByServer) => {
        _debugLogger.debugLogger.log("client-certificates", `Proxy->Target ${this.host}:${this.port} chooses ALPN ${alpnProtocolChosenByServer}`);
        if (this._closed) return;
        this._dummyServer = _tls.default.createServer({
          ...dummyServerTlsOptions,
          ALPNProtocols: alpnProtocolChosenByServer === "h2" ? ["h2", "http/1.1"] : ["http/1.1"]
        });
        this._dummyServer.emit("connection", this.internal);
        this._dummyServer.once("secureConnection", (internalTLS) => {
          this.internalTLS = internalTLS;
          _debugLogger.debugLogger.log("client-certificates", `Browser->Proxy ${this.host}:${this.port} chooses ALPN ${internalTLS.alpnProtocol}`);
          let targetTLS = void 0;
          const handleError = (error) => {
            _debugLogger.debugLogger.log("client-certificates", `error when connecting to target: ${error.message.replaceAll("\n", " ")}`);
            const responseBody = (0, _utils.escapeHTML)("Playwright client-certificate error: " + error.message).replaceAll("\n", " <br>");
            if ((internalTLS === null || internalTLS === void 0 ? void 0 : internalTLS.alpnProtocol) === "h2") {
              if ("performServerHandshake" in _http.default) {
                this.target.removeListener("close", this._targetCloseEventListener);
                const session = _http.default.performServerHandshake(internalTLS);
                session.on("error", () => {
                  this.target.destroy();
                  this._targetCloseEventListener();
                });
                session.once("stream", (stream2) => {
                  stream2.respond({
                    "content-type": "text/html",
                    [_http.default.constants.HTTP2_HEADER_STATUS]: 503
                  });
                  const cleanup = () => {
                    session.close();
                    this.target.destroy();
                    this._targetCloseEventListener();
                  };
                  stream2.end(responseBody, cleanup);
                  stream2.once("error", cleanup);
                });
              } else {
                this.target.destroy();
              }
            } else {
              internalTLS.end(["HTTP/1.1 503 Internal Server Error", "Content-Type: text/html; charset=utf-8", "Content-Length: " + Buffer.byteLength(responseBody), "", responseBody].join("\r\n"));
              this.target.destroy();
            }
          };
          if (this._closed) {
            internalTLS.destroy();
            return;
          }
          targetTLS = _tls.default.connect({
            socket: this.target,
            host: this.host,
            port: this.port,
            rejectUnauthorized: !this.socksProxy.ignoreHTTPSErrors,
            ALPNProtocols: [internalTLS.alpnProtocol || "http/1.1"],
            servername: !_net.default.isIP(this.host) ? this.host : void 0,
            secureContext: this.socksProxy.secureContextMap.get(new URL(`https://${this.host}:${this.port}`).origin)
          });
          targetTLS.once("secureConnect", () => {
            internalTLS.pipe(targetTLS);
            targetTLS.pipe(internalTLS);
          });
          internalTLS.once("error", () => this.target.destroy());
          targetTLS.once("error", handleError);
        });
      });
    }
  }
  class ClientCertificatesProxy {
    constructor(contextOptions) {
      this._socksProxy = void 0;
      this._connections = /* @__PURE__ */ new Map();
      this.ignoreHTTPSErrors = void 0;
      this.secureContextMap = /* @__PURE__ */ new Map();
      this.alpnCache = void 0;
      this.proxyAgentFromOptions = void 0;
      (0, _browserContext.verifyClientCertificates)(contextOptions.clientCertificates);
      this.alpnCache = new ALPNCache();
      this.ignoreHTTPSErrors = contextOptions.ignoreHTTPSErrors;
      this.proxyAgentFromOptions = contextOptions.proxy ? (0, _fetch.createProxyAgent)(contextOptions.proxy) : void 0;
      this._initSecureContexts(contextOptions.clientCertificates);
      this._socksProxy = new _socksProxy.SocksProxy();
      this._socksProxy.setPattern("*");
      this._socksProxy.addListener(_socksProxy.SocksProxy.Events.SocksRequested, async (payload) => {
        try {
          const connection2 = new SocksProxyConnection(this, payload.uid, payload.host, payload.port);
          await connection2.connect();
          this._connections.set(payload.uid, connection2);
        } catch (error) {
          this._socksProxy.socketFailed({
            uid: payload.uid,
            errorCode: error.code
          });
        }
      });
      this._socksProxy.addListener(_socksProxy.SocksProxy.Events.SocksData, async (payload) => {
        var _this$_connections$ge;
        (_this$_connections$ge = this._connections.get(payload.uid)) === null || _this$_connections$ge === void 0 || _this$_connections$ge.onData(payload.data);
      });
      this._socksProxy.addListener(_socksProxy.SocksProxy.Events.SocksClosed, (payload) => {
        var _this$_connections$ge2;
        (_this$_connections$ge2 = this._connections.get(payload.uid)) === null || _this$_connections$ge2 === void 0 || _this$_connections$ge2.onClose();
        this._connections.delete(payload.uid);
      });
      loadDummyServerCertsIfNeeded();
    }
    _initSecureContexts(clientCertificates) {
      const origin2certs = /* @__PURE__ */ new Map();
      for (const cert of clientCertificates || []) {
        const origin = normalizeOrigin(cert.origin);
        const certs = origin2certs.get(origin) || [];
        certs.push(cert);
        origin2certs.set(origin, certs);
      }
      for (const [origin, certs] of origin2certs) {
        try {
          this.secureContextMap.set(origin, _tls.default.createSecureContext(convertClientCertificatesToTLSOptions(certs)));
        } catch (error) {
          error = rewriteOpenSSLErrorIfNeeded(error);
          throw (0, _utils.rewriteErrorMessage)(error, `Failed to load client certificate: ${error.message}`);
        }
      }
    }
    async listen() {
      const port = await this._socksProxy.listen(0, "127.0.0.1");
      return {
        server: `socks5://127.0.0.1:${port}`
      };
    }
    async close() {
      await this._socksProxy.close();
    }
  }
  socksClientCertificatesInterceptor.ClientCertificatesProxy = ClientCertificatesProxy;
  function normalizeOrigin(origin) {
    try {
      return new URL(origin).origin;
    } catch (error) {
      return origin;
    }
  }
  function convertClientCertificatesToTLSOptions(clientCertificates) {
    if (!clientCertificates || !clientCertificates.length) return;
    const tlsOptions = {
      pfx: [],
      key: [],
      cert: []
    };
    for (const cert of clientCertificates) {
      if (cert.cert) tlsOptions.cert.push(cert.cert);
      if (cert.key) tlsOptions.key.push({
        pem: cert.key,
        passphrase: cert.passphrase
      });
      if (cert.pfx) tlsOptions.pfx.push({
        buf: cert.pfx,
        passphrase: cert.passphrase
      });
    }
    return tlsOptions;
  }
  function getMatchingTLSOptionsForOrigin(clientCertificates, origin) {
    const matchingCerts = clientCertificates === null || clientCertificates === void 0 ? void 0 : clientCertificates.filter((c2) => normalizeOrigin(c2.origin) === origin);
    return convertClientCertificatesToTLSOptions(matchingCerts);
  }
  function rewriteToLocalhostIfNeeded(host) {
    return host === "local.playwright" ? "localhost" : host;
  }
  function rewriteOpenSSLErrorIfNeeded(error) {
    if (error.message !== "unsupported" && error.code !== "ERR_CRYPTO_UNSUPPORTED_OPERATION") return error;
    return (0, _utils.rewriteErrorMessage)(error, ["Unsupported TLS certificate.", "Most likely, the security algorithm of the given certificate was deprecated by OpenSSL.", "For more details, see https://github.com/openssl/openssl/blob/master/README-PROVIDERS.md#the-legacy-provider", "You could probably modernize the certificate by following the steps at https://github.com/nodejs/node/issues/40672#issuecomment-1243648223"].join("\n"));
  }
  return socksClientCertificatesInterceptor;
}
var hasRequiredBrowser$2;
function requireBrowser$2() {
  if (hasRequiredBrowser$2) return browser$3;
  hasRequiredBrowser$2 = 1;
  Object.defineProperty(browser$3, "__esModule", {
    value: true
  });
  browser$3.Browser = void 0;
  var _artifact = requireArtifact$1();
  var _browserContext = requireBrowserContext$1();
  var _download = requireDownload$1();
  var _instrumentation = requireInstrumentation();
  var _page = requirePage$1();
  var _socksClientCertificatesInterceptor = requireSocksClientCertificatesInterceptor();
  class Browser extends _instrumentation.SdkObject {
    constructor(parent, options) {
      super(parent, "browser");
      this.options = void 0;
      this._downloads = /* @__PURE__ */ new Map();
      this._defaultContext = null;
      this._startedClosing = false;
      this._idToVideo = /* @__PURE__ */ new Map();
      this._contextForReuse = void 0;
      this._closeReason = void 0;
      this._isCollocatedWithServer = true;
      this.attribution.browser = this;
      this.options = options;
      this.instrumentation.onBrowserOpen(this);
    }
    async newContext(metadata, options) {
      var _options$clientCertif;
      (0, _browserContext.validateBrowserContextOptions)(options, this.options);
      let clientCertificatesProxy;
      if ((_options$clientCertif = options.clientCertificates) !== null && _options$clientCertif !== void 0 && _options$clientCertif.length) {
        clientCertificatesProxy = new _socksClientCertificatesInterceptor.ClientCertificatesProxy(options);
        options = {
          ...options
        };
        options.proxyOverride = await clientCertificatesProxy.listen();
        options.internalIgnoreHTTPSErrors = true;
      }
      let context;
      try {
        context = await this.doCreateNewContext(options);
      } catch (error) {
        var _clientCertificatesPr;
        await ((_clientCertificatesPr = clientCertificatesProxy) === null || _clientCertificatesPr === void 0 ? void 0 : _clientCertificatesPr.close());
        throw error;
      }
      context._clientCertificatesProxy = clientCertificatesProxy;
      if (options.storageState) await context.setStorageState(metadata, options.storageState);
      return context;
    }
    async newContextForReuse(params, metadata) {
      const hash = _browserContext.BrowserContext.reusableContextHash(params);
      if (!this._contextForReuse || hash !== this._contextForReuse.hash || !this._contextForReuse.context.canResetForReuse()) {
        if (this._contextForReuse) await this._contextForReuse.context.close({
          reason: "Context reused"
        });
        this._contextForReuse = {
          context: await this.newContext(metadata, params),
          hash
        };
        return {
          context: this._contextForReuse.context,
          needsReset: false
        };
      }
      await this._contextForReuse.context.stopPendingOperations("Context recreated");
      return {
        context: this._contextForReuse.context,
        needsReset: true
      };
    }
    async stopPendingOperations(reason) {
      var _this$_contextForReus;
      await ((_this$_contextForReus = this._contextForReuse) === null || _this$_contextForReus === void 0 || (_this$_contextForReus = _this$_contextForReus.context) === null || _this$_contextForReus === void 0 ? void 0 : _this$_contextForReus.stopPendingOperations(reason));
    }
    _downloadCreated(page2, uuid2, url, suggestedFilename) {
      const download2 = new _download.Download(page2, this.options.downloadsPath || "", uuid2, url, suggestedFilename);
      this._downloads.set(uuid2, download2);
    }
    _downloadFilenameSuggested(uuid2, suggestedFilename) {
      const download2 = this._downloads.get(uuid2);
      if (!download2) return;
      download2._filenameSuggested(suggestedFilename);
    }
    _downloadFinished(uuid2, error) {
      const download2 = this._downloads.get(uuid2);
      if (!download2) return;
      download2.artifact.reportFinished(error ? new Error(error) : void 0);
      this._downloads.delete(uuid2);
    }
    _videoStarted(context, videoId, path, pageOrError) {
      const artifact2 = new _artifact.Artifact(context, path);
      this._idToVideo.set(videoId, {
        context,
        artifact: artifact2
      });
      pageOrError.then((page2) => {
        if (page2 instanceof _page.Page) {
          page2._video = artifact2;
          page2.emitOnContext(_browserContext.BrowserContext.Events.VideoStarted, artifact2);
          page2.emit(_page.Page.Events.Video, artifact2);
        }
      });
    }
    _takeVideo(videoId) {
      const video2 = this._idToVideo.get(videoId);
      this._idToVideo.delete(videoId);
      return video2 === null || video2 === void 0 ? void 0 : video2.artifact;
    }
    _didClose() {
      for (const context of this.contexts()) context._browserClosed();
      if (this._defaultContext) this._defaultContext._browserClosed();
      this.emit(Browser.Events.Disconnected);
      this.instrumentation.onBrowserClose(this);
    }
    async close(options) {
      if (!this._startedClosing) {
        if (options.reason) this._closeReason = options.reason;
        this._startedClosing = true;
        await this.options.browserProcess.close();
      }
      if (this.isConnected()) await new Promise((x2) => this.once(Browser.Events.Disconnected, x2));
    }
    async killForTests() {
      await this.options.browserProcess.kill();
    }
  }
  browser$3.Browser = Browser;
  Browser.Events = {
    Disconnected: "disconnected"
  };
  return browser$3;
}
var crConnection = {};
var hasRequiredCrConnection;
function requireCrConnection() {
  if (hasRequiredCrConnection) return crConnection;
  hasRequiredCrConnection = 1;
  Object.defineProperty(crConnection, "__esModule", {
    value: true
  });
  crConnection.kBrowserCloseMessageId = crConnection.ConnectionEvents = crConnection.CRSession = crConnection.CRConnection = crConnection.CDPSession = void 0;
  var _events = require$$0$4;
  var _utils = requireUtils();
  var _debugLogger = requireDebugLogger();
  var _helper = requireHelper();
  var _protocolError = requireProtocolError();
  const ConnectionEvents = crConnection.ConnectionEvents = {
    Disconnected: Symbol("ConnectionEvents.Disconnected")
  };
  const kBrowserCloseMessageId = crConnection.kBrowserCloseMessageId = -9999;
  class CRConnection extends _events.EventEmitter {
    constructor(transport2, protocolLogger, browserLogsCollector) {
      super();
      this._lastId = 0;
      this._transport = void 0;
      this._sessions = /* @__PURE__ */ new Map();
      this._protocolLogger = void 0;
      this._browserLogsCollector = void 0;
      this._browserDisconnectedLogs = void 0;
      this.rootSession = void 0;
      this._closed = false;
      this.setMaxListeners(0);
      this._transport = transport2;
      this._protocolLogger = protocolLogger;
      this._browserLogsCollector = browserLogsCollector;
      this.rootSession = new CRSession(this, null, "");
      this._sessions.set("", this.rootSession);
      this._transport.onmessage = this._onMessage.bind(this);
      this._transport.onclose = this._onClose.bind(this);
    }
    _rawSend(sessionId, method, params) {
      const id = ++this._lastId;
      const message = {
        id,
        method,
        params
      };
      if (sessionId) message.sessionId = sessionId;
      this._protocolLogger("send", message);
      this._transport.send(message);
      return id;
    }
    async _onMessage(message) {
      this._protocolLogger("receive", message);
      if (message.id === kBrowserCloseMessageId) return;
      const session = this._sessions.get(message.sessionId || "");
      if (session) session._onMessage(message);
    }
    _onClose(reason) {
      this._closed = true;
      this._transport.onmessage = void 0;
      this._transport.onclose = void 0;
      this._browserDisconnectedLogs = _helper.helper.formatBrowserLogs(this._browserLogsCollector.recentLogs(), reason);
      this.rootSession.dispose();
      Promise.resolve().then(() => this.emit(ConnectionEvents.Disconnected));
    }
    close() {
      if (!this._closed) this._transport.close();
    }
    async createBrowserSession() {
      const {
        sessionId
      } = await this.rootSession.send("Target.attachToBrowserTarget");
      return new CDPSession(this.rootSession, sessionId);
    }
  }
  crConnection.CRConnection = CRConnection;
  class CRSession extends _events.EventEmitter {
    constructor(connection2, parentSession, sessionId, eventListener) {
      super();
      this._connection = void 0;
      this._eventListener = void 0;
      this._callbacks = /* @__PURE__ */ new Map();
      this._sessionId = void 0;
      this._parentSession = void 0;
      this._crashed = false;
      this._closed = false;
      this.on = void 0;
      this.addListener = void 0;
      this.off = void 0;
      this.removeListener = void 0;
      this.once = void 0;
      this.setMaxListeners(0);
      this._connection = connection2;
      this._parentSession = parentSession;
      this._sessionId = sessionId;
      this._eventListener = eventListener;
      this.on = super.on;
      this.addListener = super.addListener;
      this.off = super.removeListener;
      this.removeListener = super.removeListener;
      this.once = super.once;
    }
    _markAsCrashed() {
      this._crashed = true;
    }
    createChildSession(sessionId, eventListener) {
      const session = new CRSession(this._connection, this, sessionId, eventListener);
      this._connection._sessions.set(sessionId, session);
      return session;
    }
    async send(method, params) {
      if (this._crashed || this._closed || this._connection._closed || this._connection._browserDisconnectedLogs) throw new _protocolError.ProtocolError(this._crashed ? "crashed" : "closed", void 0, this._connection._browserDisconnectedLogs);
      const id = this._connection._rawSend(this._sessionId, method, params);
      return new Promise((resolve2, reject) => {
        this._callbacks.set(id, {
          resolve: resolve2,
          reject,
          error: new _protocolError.ProtocolError("error", method)
        });
      });
    }
    _sendMayFail(method, params) {
      return this.send(method, params).catch((error) => _debugLogger.debugLogger.log("error", error));
    }
    _onMessage(object) {
      var _object$error;
      if (object.id && this._callbacks.has(object.id)) {
        const callback = this._callbacks.get(object.id);
        this._callbacks.delete(object.id);
        if (object.error) {
          callback.error.setMessage(object.error.message);
          callback.reject(callback.error);
        } else {
          callback.resolve(object.result);
        }
      } else if (object.id && ((_object$error = object.error) === null || _object$error === void 0 ? void 0 : _object$error.code) === -32001) ;
      else {
        var _object$error2;
        (0, _utils.assert)(!object.id, (object === null || object === void 0 || (_object$error2 = object.error) === null || _object$error2 === void 0 ? void 0 : _object$error2.message) || void 0);
        Promise.resolve().then(() => {
          if (this._eventListener) this._eventListener(object.method, object.params);
          this.emit(object.method, object.params);
        });
      }
    }
    async detach() {
      if (this._closed) throw new Error(`Session already detached. Most likely the page has been closed.`);
      if (!this._parentSession) throw new Error("Root session cannot be closed");
      await this._sendMayFail("Runtime.runIfWaitingForDebugger");
      await this._parentSession.send("Target.detachFromTarget", {
        sessionId: this._sessionId
      });
      this.dispose();
    }
    dispose() {
      this._closed = true;
      this._connection._sessions.delete(this._sessionId);
      for (const callback of this._callbacks.values()) {
        callback.error.setMessage(`Internal server error, session closed.`);
        callback.error.type = this._crashed ? "crashed" : "closed";
        callback.error.logs = this._connection._browserDisconnectedLogs;
        callback.reject(callback.error);
      }
      this._callbacks.clear();
    }
  }
  crConnection.CRSession = CRSession;
  class CDPSession extends _events.EventEmitter {
    constructor(parentSession, sessionId) {
      super();
      this.guid = void 0;
      this._session = void 0;
      this._listeners = [];
      this.guid = `cdp-session@${sessionId}`;
      this._session = parentSession.createChildSession(sessionId, (method, params) => this.emit(CDPSession.Events.Event, {
        method,
        params
      }));
      this._listeners = [_utils.eventsHelper.addEventListener(parentSession, "Target.detachedFromTarget", (event) => {
        if (event.sessionId === sessionId) this._onClose();
      })];
    }
    async send(method, params) {
      return await this._session.send(method, params);
    }
    async detach() {
      return await this._session.detach();
    }
    async attachToTarget(targetId) {
      const {
        sessionId
      } = await this.send("Target.attachToTarget", {
        targetId,
        flatten: true
      });
      return new CDPSession(this._session, sessionId);
    }
    _onClose() {
      _utils.eventsHelper.removeEventListeners(this._listeners);
      this._session.dispose();
      this.emit(CDPSession.Events.Closed);
    }
  }
  crConnection.CDPSession = CDPSession;
  CDPSession.Events = {
    Event: "event",
    Closed: "close"
  };
  return crConnection;
}
var crPage = {};
var dialog$1 = {};
var hasRequiredDialog$1;
function requireDialog$1() {
  if (hasRequiredDialog$1) return dialog$1;
  hasRequiredDialog$1 = 1;
  Object.defineProperty(dialog$1, "__esModule", {
    value: true
  });
  dialog$1.Dialog = void 0;
  var _utils = requireUtils();
  var _instrumentation = requireInstrumentation();
  class Dialog extends _instrumentation.SdkObject {
    constructor(page2, type, message, onHandle, defaultValue) {
      super(page2, "dialog");
      this._page = void 0;
      this._type = void 0;
      this._message = void 0;
      this._onHandle = void 0;
      this._handled = false;
      this._defaultValue = void 0;
      this._page = page2;
      this._type = type;
      this._message = message;
      this._onHandle = onHandle;
      this._defaultValue = defaultValue || "";
      this._page._frameManager.dialogDidOpen(this);
      this.instrumentation.onDialog(this);
    }
    page() {
      return this._page;
    }
    type() {
      return this._type;
    }
    message() {
      return this._message;
    }
    defaultValue() {
      return this._defaultValue;
    }
    async accept(promptText) {
      (0, _utils.assert)(!this._handled, "Cannot accept dialog which is already handled!");
      this._handled = true;
      this._page._frameManager.dialogWillClose(this);
      await this._onHandle(true, promptText);
    }
    async dismiss() {
      (0, _utils.assert)(!this._handled, "Cannot dismiss dialog which is already handled!");
      this._handled = true;
      this._page._frameManager.dialogWillClose(this);
      await this._onHandle(false);
    }
    async close() {
      if (this._type === "beforeunload") await this.accept();
      else await this.dismiss();
    }
  }
  dialog$1.Dialog = Dialog;
  return dialog$1;
}
var crAccessibility = {};
var hasRequiredCrAccessibility;
function requireCrAccessibility() {
  if (hasRequiredCrAccessibility) return crAccessibility;
  hasRequiredCrAccessibility = 1;
  Object.defineProperty(crAccessibility, "__esModule", {
    value: true
  });
  crAccessibility.getAccessibilityTree = getAccessibilityTree;
  async function getAccessibilityTree(client, needle) {
    const {
      nodes
    } = await client.send("Accessibility.getFullAXTree");
    const tree = CRAXNode.createTree(client, nodes);
    return {
      tree,
      needle: needle ? await tree._findElement(needle) : null
    };
  }
  class CRAXNode {
    constructor(client, payload) {
      this._payload = void 0;
      this._children = [];
      this._richlyEditable = false;
      this._editable = false;
      this._focusable = false;
      this._expanded = false;
      this._hidden = false;
      this._name = void 0;
      this._role = void 0;
      this._cachedHasFocusableChild = void 0;
      this._client = void 0;
      this._client = client;
      this._payload = payload;
      this._name = this._payload.name ? this._payload.name.value : "";
      this._role = this._payload.role ? this._payload.role.value : "Unknown";
      for (const property of this._payload.properties || []) {
        if (property.name === "editable") {
          this._richlyEditable = property.value.value === "richtext";
          this._editable = true;
        }
        if (property.name === "focusable") this._focusable = property.value.value;
        if (property.name === "expanded") this._expanded = property.value.value;
        if (property.name === "hidden") this._hidden = property.value.value;
      }
    }
    _isPlainTextField() {
      if (this._richlyEditable) return false;
      if (this._editable) return true;
      return this._role === "textbox" || this._role === "ComboBox" || this._role === "searchbox";
    }
    _isTextOnlyObject() {
      const role = this._role;
      return role === "LineBreak" || role === "text" || role === "InlineTextBox" || role === "StaticText";
    }
    _hasFocusableChild() {
      if (this._cachedHasFocusableChild === void 0) {
        this._cachedHasFocusableChild = false;
        for (const child of this._children) {
          if (child._focusable || child._hasFocusableChild()) {
            this._cachedHasFocusableChild = true;
            break;
          }
        }
      }
      return this._cachedHasFocusableChild;
    }
    children() {
      return this._children;
    }
    async _findElement(element) {
      const objectId = element._objectId;
      const {
        node: {
          backendNodeId
        }
      } = await this._client.send("DOM.describeNode", {
        objectId
      });
      const needle = this.find((node) => node._payload.backendDOMNodeId === backendNodeId);
      return needle || null;
    }
    find(predicate) {
      if (predicate(this)) return this;
      for (const child of this._children) {
        const result = child.find(predicate);
        if (result) return result;
      }
      return null;
    }
    isLeafNode() {
      if (!this._children.length) return true;
      if (this._isPlainTextField() || this._isTextOnlyObject()) return true;
      switch (this._role) {
        case "doc-cover":
        case "graphics-symbol":
        case "img":
        case "Meter":
        case "scrollbar":
        case "slider":
        case "separator":
        case "progressbar":
          return true;
      }
      if (this._hasFocusableChild()) return false;
      if (this._focusable && this._role !== "WebArea" && this._role !== "RootWebArea" && this._name) return true;
      if (this._role === "heading" && this._name) return true;
      return false;
    }
    isControl() {
      switch (this._role) {
        case "button":
        case "checkbox":
        case "ColorWell":
        case "combobox":
        case "DisclosureTriangle":
        case "listbox":
        case "menu":
        case "menubar":
        case "menuitem":
        case "menuitemcheckbox":
        case "menuitemradio":
        case "radio":
        case "scrollbar":
        case "searchbox":
        case "slider":
        case "spinbutton":
        case "switch":
        case "tab":
        case "textbox":
        case "tree":
          return true;
        default:
          return false;
      }
    }
    isInteresting(insideControl) {
      const role = this._role;
      if (role === "Ignored" || this._hidden) return false;
      if (this._focusable || this._richlyEditable) return true;
      if (this.isControl()) return true;
      if (insideControl) return false;
      return this.isLeafNode() && !!this._name;
    }
    normalizedRole() {
      switch (this._role) {
        case "RootWebArea":
          return "WebArea";
        case "StaticText":
          return "text";
        default:
          return this._role;
      }
    }
    serialize() {
      const properties = /* @__PURE__ */ new Map();
      for (const property of this._payload.properties || []) properties.set(property.name.toLowerCase(), property.value.value);
      if (this._payload.description) properties.set("description", this._payload.description.value);
      const node = {
        role: this.normalizedRole(),
        name: this._payload.name ? this._payload.name.value || "" : ""
      };
      const userStringProperties = ["description", "keyshortcuts", "roledescription", "valuetext"];
      for (const userStringProperty of userStringProperties) {
        if (!properties.has(userStringProperty)) continue;
        node[userStringProperty] = properties.get(userStringProperty);
      }
      const booleanProperties = ["disabled", "expanded", "focused", "modal", "multiline", "multiselectable", "readonly", "required", "selected"];
      for (const booleanProperty of booleanProperties) {
        if (booleanProperty === "focused" && (this._role === "WebArea" || this._role === "RootWebArea")) continue;
        const value = properties.get(booleanProperty);
        if (!value) continue;
        node[booleanProperty] = value;
      }
      const numericalProperties = ["level", "valuemax", "valuemin"];
      for (const numericalProperty of numericalProperties) {
        if (!properties.has(numericalProperty)) continue;
        node[numericalProperty] = properties.get(numericalProperty);
      }
      const tokenProperties = ["autocomplete", "haspopup", "invalid", "orientation"];
      for (const tokenProperty of tokenProperties) {
        const value = properties.get(tokenProperty);
        if (!value || value === "false") continue;
        node[tokenProperty] = value;
      }
      const axNode = node;
      if (this._payload.value) {
        if (typeof this._payload.value.value === "string") axNode.valueString = this._payload.value.value;
        if (typeof this._payload.value.value === "number") axNode.valueNumber = this._payload.value.value;
      }
      if (properties.has("checked")) axNode.checked = properties.get("checked") === "true" ? "checked" : properties.get("checked") === "false" ? "unchecked" : "mixed";
      if (properties.has("pressed")) axNode.pressed = properties.get("pressed") === "true" ? "pressed" : properties.get("pressed") === "false" ? "released" : "mixed";
      return axNode;
    }
    static createTree(client, payloads) {
      const nodeById = /* @__PURE__ */ new Map();
      for (const payload of payloads) nodeById.set(payload.nodeId, new CRAXNode(client, payload));
      for (const node of nodeById.values()) {
        for (const childId of node._payload.childIds || []) node._children.push(nodeById.get(childId));
      }
      return nodeById.values().next().value;
    }
  }
  return crAccessibility;
}
var crCoverage = {};
var hasRequiredCrCoverage;
function requireCrCoverage() {
  if (hasRequiredCrCoverage) return crCoverage;
  hasRequiredCrCoverage = 1;
  Object.defineProperty(crCoverage, "__esModule", {
    value: true
  });
  crCoverage.CRCoverage = void 0;
  var _utils = requireUtils();
  var _eventsHelper = requireEventsHelper();
  class CRCoverage {
    constructor(client) {
      this._jsCoverage = void 0;
      this._cssCoverage = void 0;
      this._jsCoverage = new JSCoverage(client);
      this._cssCoverage = new CSSCoverage(client);
    }
    async startJSCoverage(options) {
      return await this._jsCoverage.start(options);
    }
    async stopJSCoverage() {
      return await this._jsCoverage.stop();
    }
    async startCSSCoverage(options) {
      return await this._cssCoverage.start(options);
    }
    async stopCSSCoverage() {
      return await this._cssCoverage.stop();
    }
  }
  crCoverage.CRCoverage = CRCoverage;
  class JSCoverage {
    constructor(client) {
      this._client = void 0;
      this._enabled = void 0;
      this._scriptIds = void 0;
      this._scriptSources = void 0;
      this._eventListeners = void 0;
      this._resetOnNavigation = void 0;
      this._reportAnonymousScripts = false;
      this._client = client;
      this._enabled = false;
      this._scriptIds = /* @__PURE__ */ new Set();
      this._scriptSources = /* @__PURE__ */ new Map();
      this._eventListeners = [];
      this._resetOnNavigation = false;
    }
    async start(options) {
      (0, _utils.assert)(!this._enabled, "JSCoverage is already enabled");
      const {
        resetOnNavigation = true,
        reportAnonymousScripts = false
      } = options;
      this._resetOnNavigation = resetOnNavigation;
      this._reportAnonymousScripts = reportAnonymousScripts;
      this._enabled = true;
      this._scriptIds.clear();
      this._scriptSources.clear();
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(this._client, "Debugger.scriptParsed", this._onScriptParsed.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.executionContextsCleared", this._onExecutionContextsCleared.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._client, "Debugger.paused", this._onDebuggerPaused.bind(this))];
      await Promise.all([this._client.send("Profiler.enable"), this._client.send("Profiler.startPreciseCoverage", {
        callCount: true,
        detailed: true
      }), this._client.send("Debugger.enable"), this._client.send("Debugger.setSkipAllPauses", {
        skip: true
      })]);
    }
    _onDebuggerPaused() {
      this._client.send("Debugger.resume");
    }
    _onExecutionContextsCleared() {
      if (!this._resetOnNavigation) return;
      this._scriptIds.clear();
      this._scriptSources.clear();
    }
    async _onScriptParsed(event) {
      this._scriptIds.add(event.scriptId);
      if (!event.url && !this._reportAnonymousScripts) return;
      const response = await this._client._sendMayFail("Debugger.getScriptSource", {
        scriptId: event.scriptId
      });
      if (response) this._scriptSources.set(event.scriptId, response.scriptSource);
    }
    async stop() {
      (0, _utils.assert)(this._enabled, "JSCoverage is not enabled");
      this._enabled = false;
      const [profileResponse] = await Promise.all([this._client.send("Profiler.takePreciseCoverage"), this._client.send("Profiler.stopPreciseCoverage"), this._client.send("Profiler.disable"), this._client.send("Debugger.disable")]);
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      const coverage2 = {
        entries: []
      };
      for (const entry of profileResponse.result) {
        if (!this._scriptIds.has(entry.scriptId)) continue;
        if (!entry.url && !this._reportAnonymousScripts) continue;
        const source = this._scriptSources.get(entry.scriptId);
        if (source) coverage2.entries.push({
          ...entry,
          source
        });
        else coverage2.entries.push(entry);
      }
      return coverage2;
    }
  }
  class CSSCoverage {
    constructor(client) {
      this._client = void 0;
      this._enabled = void 0;
      this._stylesheetURLs = void 0;
      this._stylesheetSources = void 0;
      this._eventListeners = void 0;
      this._resetOnNavigation = void 0;
      this._client = client;
      this._enabled = false;
      this._stylesheetURLs = /* @__PURE__ */ new Map();
      this._stylesheetSources = /* @__PURE__ */ new Map();
      this._eventListeners = [];
      this._resetOnNavigation = false;
    }
    async start(options) {
      (0, _utils.assert)(!this._enabled, "CSSCoverage is already enabled");
      const {
        resetOnNavigation = true
      } = options;
      this._resetOnNavigation = resetOnNavigation;
      this._enabled = true;
      this._stylesheetURLs.clear();
      this._stylesheetSources.clear();
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(this._client, "CSS.styleSheetAdded", this._onStyleSheet.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.executionContextsCleared", this._onExecutionContextsCleared.bind(this))];
      await Promise.all([this._client.send("DOM.enable"), this._client.send("CSS.enable"), this._client.send("CSS.startRuleUsageTracking")]);
    }
    _onExecutionContextsCleared() {
      if (!this._resetOnNavigation) return;
      this._stylesheetURLs.clear();
      this._stylesheetSources.clear();
    }
    async _onStyleSheet(event) {
      const header = event.header;
      if (!header.sourceURL) return;
      const response = await this._client._sendMayFail("CSS.getStyleSheetText", {
        styleSheetId: header.styleSheetId
      });
      if (response) {
        this._stylesheetURLs.set(header.styleSheetId, header.sourceURL);
        this._stylesheetSources.set(header.styleSheetId, response.text);
      }
    }
    async stop() {
      (0, _utils.assert)(this._enabled, "CSSCoverage is not enabled");
      this._enabled = false;
      const ruleTrackingResponse = await this._client.send("CSS.stopRuleUsageTracking");
      await Promise.all([this._client.send("CSS.disable"), this._client.send("DOM.disable")]);
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      const styleSheetIdToCoverage = /* @__PURE__ */ new Map();
      for (const entry of ruleTrackingResponse.ruleUsage) {
        let ranges = styleSheetIdToCoverage.get(entry.styleSheetId);
        if (!ranges) {
          ranges = [];
          styleSheetIdToCoverage.set(entry.styleSheetId, ranges);
        }
        ranges.push({
          startOffset: entry.startOffset,
          endOffset: entry.endOffset,
          count: entry.used ? 1 : 0
        });
      }
      const coverage2 = {
        entries: []
      };
      for (const styleSheetId of this._stylesheetURLs.keys()) {
        const url = this._stylesheetURLs.get(styleSheetId);
        const text = this._stylesheetSources.get(styleSheetId);
        const ranges = convertToDisjointRanges(styleSheetIdToCoverage.get(styleSheetId) || []);
        coverage2.entries.push({
          url,
          ranges,
          text
        });
      }
      return coverage2;
    }
  }
  function convertToDisjointRanges(nestedRanges) {
    const points = [];
    for (const range of nestedRanges) {
      points.push({
        offset: range.startOffset,
        type: 0,
        range
      });
      points.push({
        offset: range.endOffset,
        type: 1,
        range
      });
    }
    points.sort((a, b) => {
      if (a.offset !== b.offset) return a.offset - b.offset;
      if (a.type !== b.type) return b.type - a.type;
      const aLength = a.range.endOffset - a.range.startOffset;
      const bLength = b.range.endOffset - b.range.startOffset;
      if (a.type === 0) return bLength - aLength;
      return aLength - bLength;
    });
    const hitCountStack = [];
    const results = [];
    let lastOffset = 0;
    for (const point of points) {
      if (hitCountStack.length && lastOffset < point.offset && hitCountStack[hitCountStack.length - 1] > 0) {
        const lastResult = results.length ? results[results.length - 1] : null;
        if (lastResult && lastResult.end === lastOffset) lastResult.end = point.offset;
        else results.push({
          start: lastOffset,
          end: point.offset
        });
      }
      lastOffset = point.offset;
      if (point.type === 0) hitCountStack.push(point.range.count);
      else hitCountStack.pop();
    }
    return results.filter((range) => range.end - range.start > 1);
  }
  return crCoverage;
}
var crDragDrop = {};
var crProtocolHelper = {};
var hasRequiredCrProtocolHelper;
function requireCrProtocolHelper() {
  if (hasRequiredCrProtocolHelper) return crProtocolHelper;
  hasRequiredCrProtocolHelper = 1;
  Object.defineProperty(crProtocolHelper, "__esModule", {
    value: true
  });
  crProtocolHelper.exceptionToError = exceptionToError;
  crProtocolHelper.getExceptionMessage = getExceptionMessage;
  crProtocolHelper.readProtocolStream = readProtocolStream;
  crProtocolHelper.releaseObject = releaseObject;
  crProtocolHelper.saveProtocolStream = saveProtocolStream;
  crProtocolHelper.toButtonsMask = toButtonsMask;
  crProtocolHelper.toConsoleMessageLocation = toConsoleMessageLocation;
  crProtocolHelper.toModifiersMask = toModifiersMask;
  var _fs = _interopRequireDefault(require$$0$2);
  var _stackTrace = requireStackTrace();
  var _fileUtils = requireFileUtils$1();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  function getExceptionMessage(exceptionDetails) {
    if (exceptionDetails.exception) return exceptionDetails.exception.description || String(exceptionDetails.exception.value);
    let message = exceptionDetails.text;
    if (exceptionDetails.stackTrace) {
      for (const callframe of exceptionDetails.stackTrace.callFrames) {
        const location2 = callframe.url + ":" + callframe.lineNumber + ":" + callframe.columnNumber;
        const functionName = callframe.functionName || "<anonymous>";
        message += `
    at ${functionName} (${location2})`;
      }
    }
    return message;
  }
  async function releaseObject(client, objectId) {
    await client.send("Runtime.releaseObject", {
      objectId
    }).catch((error) => {
    });
  }
  async function saveProtocolStream(client, handle, path) {
    let eof = false;
    await (0, _fileUtils.mkdirIfNeeded)(path);
    const fd = await _fs.default.promises.open(path, "w");
    while (!eof) {
      const response = await client.send("IO.read", {
        handle
      });
      eof = response.eof;
      const buf = Buffer.from(response.data, response.base64Encoded ? "base64" : void 0);
      await fd.write(buf);
    }
    await fd.close();
    await client.send("IO.close", {
      handle
    });
  }
  async function readProtocolStream(client, handle) {
    let eof = false;
    const chunks = [];
    while (!eof) {
      const response = await client.send("IO.read", {
        handle
      });
      eof = response.eof;
      const buf = Buffer.from(response.data, response.base64Encoded ? "base64" : void 0);
      chunks.push(buf);
    }
    await client.send("IO.close", {
      handle
    });
    return Buffer.concat(chunks);
  }
  function toConsoleMessageLocation(stackTrace2) {
    return stackTrace2 && stackTrace2.callFrames.length ? {
      url: stackTrace2.callFrames[0].url,
      lineNumber: stackTrace2.callFrames[0].lineNumber,
      columnNumber: stackTrace2.callFrames[0].columnNumber
    } : {
      url: "",
      lineNumber: 0,
      columnNumber: 0
    };
  }
  function exceptionToError(exceptionDetails) {
    var _exceptionDetails$exc, _nameOverride$value;
    const messageWithStack = getExceptionMessage(exceptionDetails);
    const lines = messageWithStack.split("\n");
    const firstStackTraceLine = lines.findIndex((line) => line.startsWith("    at"));
    let messageWithName = "";
    let stack = "";
    if (firstStackTraceLine === -1) {
      messageWithName = messageWithStack;
    } else {
      messageWithName = lines.slice(0, firstStackTraceLine).join("\n");
      stack = messageWithStack;
    }
    const {
      name,
      message
    } = (0, _stackTrace.splitErrorMessage)(messageWithName);
    const err = new Error(message);
    err.stack = stack;
    const nameOverride = (_exceptionDetails$exc = exceptionDetails.exception) === null || _exceptionDetails$exc === void 0 || (_exceptionDetails$exc = _exceptionDetails$exc.preview) === null || _exceptionDetails$exc === void 0 ? void 0 : _exceptionDetails$exc.properties.find((o2) => o2.name === "name");
    err.name = nameOverride ? (_nameOverride$value = nameOverride.value) !== null && _nameOverride$value !== void 0 ? _nameOverride$value : "Error" : name;
    return err;
  }
  function toModifiersMask(modifiers) {
    let mask = 0;
    if (modifiers.has("Alt")) mask |= 1;
    if (modifiers.has("Control")) mask |= 2;
    if (modifiers.has("Meta")) mask |= 4;
    if (modifiers.has("Shift")) mask |= 8;
    return mask;
  }
  function toButtonsMask(buttons) {
    let mask = 0;
    if (buttons.has("left")) mask |= 1;
    if (buttons.has("right")) mask |= 2;
    if (buttons.has("middle")) mask |= 4;
    return mask;
  }
  return crProtocolHelper;
}
var hasRequiredCrDragDrop;
function requireCrDragDrop() {
  if (hasRequiredCrDragDrop) return crDragDrop;
  hasRequiredCrDragDrop = 1;
  Object.defineProperty(crDragDrop, "__esModule", {
    value: true
  });
  crDragDrop.DragManager = void 0;
  var _crProtocolHelper = requireCrProtocolHelper();
  var _utils = requireUtils();
  class DragManager {
    constructor(page2) {
      this._crPage = void 0;
      this._dragState = null;
      this._lastPosition = {
        x: 0,
        y: 0
      };
      this._crPage = page2;
    }
    async cancelDrag() {
      if (!this._dragState) return false;
      await this._crPage._mainFrameSession._client.send("Input.dispatchDragEvent", {
        type: "dragCancel",
        x: this._lastPosition.x,
        y: this._lastPosition.y,
        data: {
          items: [],
          dragOperationsMask: 65535
        }
      });
      this._dragState = null;
      return true;
    }
    async interceptDragCausedByMove(x2, y2, button, buttons, modifiers, moveCallback) {
      this._lastPosition = {
        x: x2,
        y: y2
      };
      if (this._dragState) {
        await this._crPage._mainFrameSession._client.send("Input.dispatchDragEvent", {
          type: "dragOver",
          x: x2,
          y: y2,
          data: this._dragState,
          modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers)
        });
        return;
      }
      if (button !== "left") return moveCallback();
      const client = this._crPage._mainFrameSession._client;
      let onDragIntercepted;
      const dragInterceptedPromise = new Promise((x3) => onDragIntercepted = x3);
      function setupDragListeners() {
        let didStartDrag = Promise.resolve(false);
        let dragEvent = null;
        const dragListener = (event) => dragEvent = event;
        const mouseListener = () => {
          didStartDrag = new Promise((callback) => {
            window.addEventListener("dragstart", dragListener, {
              once: true,
              capture: true
            });
            setTimeout(() => callback(dragEvent ? !dragEvent.defaultPrevented : false), 0);
          });
        };
        window.addEventListener("mousemove", mouseListener, {
          once: true,
          capture: true
        });
        window.__cleanupDrag = async () => {
          const val = await didStartDrag;
          window.removeEventListener("mousemove", mouseListener, {
            capture: true
          });
          window.removeEventListener("dragstart", dragListener, {
            capture: true
          });
          delete window.__cleanupDrag;
          return val;
        };
      }
      await this._crPage._page.safeNonStallingEvaluateInAllFrames(`(${setupDragListeners.toString()})()`, "utility");
      client.on("Input.dragIntercepted", onDragIntercepted);
      try {
        await client.send("Input.setInterceptDrags", {
          enabled: true
        });
      } catch {
        client.off("Input.dragIntercepted", onDragIntercepted);
        return moveCallback();
      }
      await moveCallback();
      const expectingDrag = (await Promise.all(this._crPage._page.frames().map(async (frame2) => {
        return frame2.nonStallingEvaluateInExistingContext("window.__cleanupDrag && window.__cleanupDrag()", "utility").catch(() => false);
      }))).some((x3) => x3);
      this._dragState = expectingDrag ? (await dragInterceptedPromise).data : null;
      client.off("Input.dragIntercepted", onDragIntercepted);
      await client.send("Input.setInterceptDrags", {
        enabled: false
      });
      if (this._dragState) {
        await this._crPage._mainFrameSession._client.send("Input.dispatchDragEvent", {
          type: "dragEnter",
          x: x2,
          y: y2,
          data: this._dragState,
          modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers)
        });
      }
    }
    isDragging() {
      return !!this._dragState;
    }
    async drop(x2, y2, modifiers) {
      (0, _utils.assert)(this._dragState, "missing drag state");
      await this._crPage._mainFrameSession._client.send("Input.dispatchDragEvent", {
        type: "drop",
        x: x2,
        y: y2,
        data: this._dragState,
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers)
      });
      this._dragState = null;
    }
  }
  crDragDrop.DragManager = DragManager;
  return crDragDrop;
}
var crExecutionContext = {};
var hasRequiredCrExecutionContext;
function requireCrExecutionContext() {
  if (hasRequiredCrExecutionContext) return crExecutionContext;
  hasRequiredCrExecutionContext = 1;
  Object.defineProperty(crExecutionContext, "__esModule", {
    value: true
  });
  crExecutionContext.CRExecutionContext = void 0;
  crExecutionContext.createHandle = createHandle;
  var _assert = requireAssert$1();
  var _crProtocolHelper = requireCrProtocolHelper();
  var _stackTrace = requireStackTrace();
  var _utilityScriptSerializers = requireUtilityScriptSerializers();
  var js = _interopRequireWildcard(requireJavascript$1());
  var dom2 = _interopRequireWildcard(requireDom());
  var _protocolError = requireProtocolError();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  class CRExecutionContext {
    constructor(client, contextPayload) {
      this._client = void 0;
      this._contextId = void 0;
      this._client = client;
      this._contextId = contextPayload.id;
    }
    async rawEvaluateJSON(expression) {
      const {
        exceptionDetails,
        result: remoteObject
      } = await this._client.send("Runtime.evaluate", {
        expression,
        contextId: this._contextId,
        returnByValue: true
      }).catch(rewriteError);
      if (exceptionDetails) throw new js.JavaScriptErrorInEvaluate((0, _crProtocolHelper.getExceptionMessage)(exceptionDetails));
      return remoteObject.value;
    }
    async rawEvaluateHandle(context, expression) {
      const {
        exceptionDetails,
        result: remoteObject
      } = await this._client.send("Runtime.evaluate", {
        expression,
        contextId: this._contextId
      }).catch(rewriteError);
      if (exceptionDetails) throw new js.JavaScriptErrorInEvaluate((0, _crProtocolHelper.getExceptionMessage)(exceptionDetails));
      return createHandle(context, remoteObject);
    }
    async evaluateWithArguments(expression, returnByValue, utilityScript, values, handles) {
      const {
        exceptionDetails,
        result: remoteObject
      } = await this._client.send("Runtime.callFunctionOn", {
        functionDeclaration: expression,
        objectId: utilityScript._objectId,
        arguments: [{
          objectId: utilityScript._objectId
        }, ...values.map((value) => ({
          value
        })), ...handles.map((handle) => ({
          objectId: handle._objectId
        }))],
        returnByValue,
        awaitPromise: true,
        userGesture: true
      }).catch(rewriteError);
      if (exceptionDetails) throw new js.JavaScriptErrorInEvaluate((0, _crProtocolHelper.getExceptionMessage)(exceptionDetails));
      return returnByValue ? (0, _utilityScriptSerializers.parseEvaluationResultValue)(remoteObject.value) : createHandle(utilityScript._context, remoteObject);
    }
    async getProperties(object) {
      const response = await this._client.send("Runtime.getProperties", {
        objectId: object._objectId,
        ownProperties: true
      });
      const result = /* @__PURE__ */ new Map();
      for (const property of response.result) {
        if (!property.enumerable || !property.value) continue;
        result.set(property.name, createHandle(object._context, property.value));
      }
      return result;
    }
    async releaseHandle(handle) {
      if (!handle._objectId) return;
      await (0, _crProtocolHelper.releaseObject)(this._client, handle._objectId);
    }
  }
  crExecutionContext.CRExecutionContext = CRExecutionContext;
  function rewriteError(error) {
    if (error.message.includes("Object reference chain is too long")) throw new Error("Cannot serialize result: object reference chain is too long.");
    if (error.message.includes("Object couldn't be returned by value")) return {
      result: {
        type: "undefined"
      }
    };
    if (error instanceof TypeError && error.message.startsWith("Converting circular structure to JSON")) (0, _stackTrace.rewriteErrorMessage)(error, error.message + " Are you passing a nested JSHandle?");
    if (!js.isJavaScriptErrorInEvaluate(error) && !(0, _protocolError.isSessionClosedError)(error)) throw new Error("Execution context was destroyed, most likely because of a navigation.");
    throw error;
  }
  function potentiallyUnserializableValue(remoteObject) {
    const value = remoteObject.value;
    const unserializableValue = remoteObject.unserializableValue;
    return unserializableValue ? js.parseUnserializableValue(unserializableValue) : value;
  }
  function renderPreview(object) {
    if (object.type === "undefined") return "undefined";
    if ("value" in object) return String(object.value);
    if (object.unserializableValue) return String(object.unserializableValue);
    if (object.description === "Object" && object.preview) {
      const tokens = [];
      for (const {
        name,
        value
      } of object.preview.properties) tokens.push(`${name}: ${value}`);
      return `{${tokens.join(", ")}}`;
    }
    if (object.subtype === "array" && object.preview) return js.sparseArrayToString(object.preview.properties);
    return object.description;
  }
  function createHandle(context, remoteObject) {
    if (remoteObject.subtype === "node") {
      (0, _assert.assert)(context instanceof dom2.FrameExecutionContext);
      return new dom2.ElementHandle(context, remoteObject.objectId);
    }
    return new js.JSHandle(context, remoteObject.subtype || remoteObject.type, renderPreview(remoteObject), remoteObject.objectId, potentiallyUnserializableValue(remoteObject));
  }
  return crExecutionContext;
}
var crInput = {};
var macEditingCommands = {};
var hasRequiredMacEditingCommands;
function requireMacEditingCommands() {
  if (hasRequiredMacEditingCommands) return macEditingCommands;
  hasRequiredMacEditingCommands = 1;
  Object.defineProperty(macEditingCommands, "__esModule", {
    value: true
  });
  macEditingCommands.macEditingCommands = void 0;
  macEditingCommands.macEditingCommands = {
    "Backspace": "deleteBackward:",
    "Enter": "insertNewline:",
    "NumpadEnter": "insertNewline:",
    "Escape": "cancelOperation:",
    "ArrowUp": "moveUp:",
    "ArrowDown": "moveDown:",
    "ArrowLeft": "moveLeft:",
    "ArrowRight": "moveRight:",
    "F5": "complete:",
    "Delete": "deleteForward:",
    "Home": "scrollToBeginningOfDocument:",
    "End": "scrollToEndOfDocument:",
    "PageUp": "scrollPageUp:",
    "PageDown": "scrollPageDown:",
    "Shift+Backspace": "deleteBackward:",
    "Shift+Enter": "insertNewline:",
    "Shift+NumpadEnter": "insertNewline:",
    "Shift+Escape": "cancelOperation:",
    "Shift+ArrowUp": "moveUpAndModifySelection:",
    "Shift+ArrowDown": "moveDownAndModifySelection:",
    "Shift+ArrowLeft": "moveLeftAndModifySelection:",
    "Shift+ArrowRight": "moveRightAndModifySelection:",
    "Shift+F5": "complete:",
    "Shift+Delete": "deleteForward:",
    "Shift+Home": "moveToBeginningOfDocumentAndModifySelection:",
    "Shift+End": "moveToEndOfDocumentAndModifySelection:",
    "Shift+PageUp": "pageUpAndModifySelection:",
    "Shift+PageDown": "pageDownAndModifySelection:",
    "Shift+Numpad5": "delete:",
    "Control+Tab": "selectNextKeyView:",
    "Control+Enter": "insertLineBreak:",
    "Control+NumpadEnter": "insertLineBreak:",
    "Control+Quote": "insertSingleQuoteIgnoringSubstitution:",
    "Control+KeyA": "moveToBeginningOfParagraph:",
    "Control+KeyB": "moveBackward:",
    "Control+KeyD": "deleteForward:",
    "Control+KeyE": "moveToEndOfParagraph:",
    "Control+KeyF": "moveForward:",
    "Control+KeyH": "deleteBackward:",
    "Control+KeyK": "deleteToEndOfParagraph:",
    "Control+KeyL": "centerSelectionInVisibleArea:",
    "Control+KeyN": "moveDown:",
    "Control+KeyO": ["insertNewlineIgnoringFieldEditor:", "moveBackward:"],
    "Control+KeyP": "moveUp:",
    "Control+KeyT": "transpose:",
    "Control+KeyV": "pageDown:",
    "Control+KeyY": "yank:",
    "Control+Backspace": "deleteBackwardByDecomposingPreviousCharacter:",
    "Control+ArrowUp": "scrollPageUp:",
    "Control+ArrowDown": "scrollPageDown:",
    "Control+ArrowLeft": "moveToLeftEndOfLine:",
    "Control+ArrowRight": "moveToRightEndOfLine:",
    "Shift+Control+Enter": "insertLineBreak:",
    "Shift+Control+NumpadEnter": "insertLineBreak:",
    "Shift+Control+Tab": "selectPreviousKeyView:",
    "Shift+Control+Quote": "insertDoubleQuoteIgnoringSubstitution:",
    "Shift+Control+KeyA": "moveToBeginningOfParagraphAndModifySelection:",
    "Shift+Control+KeyB": "moveBackwardAndModifySelection:",
    "Shift+Control+KeyE": "moveToEndOfParagraphAndModifySelection:",
    "Shift+Control+KeyF": "moveForwardAndModifySelection:",
    "Shift+Control+KeyN": "moveDownAndModifySelection:",
    "Shift+Control+KeyP": "moveUpAndModifySelection:",
    "Shift+Control+KeyV": "pageDownAndModifySelection:",
    "Shift+Control+Backspace": "deleteBackwardByDecomposingPreviousCharacter:",
    "Shift+Control+ArrowUp": "scrollPageUp:",
    "Shift+Control+ArrowDown": "scrollPageDown:",
    "Shift+Control+ArrowLeft": "moveToLeftEndOfLineAndModifySelection:",
    "Shift+Control+ArrowRight": "moveToRightEndOfLineAndModifySelection:",
    "Alt+Backspace": "deleteWordBackward:",
    "Alt+Enter": "insertNewlineIgnoringFieldEditor:",
    "Alt+NumpadEnter": "insertNewlineIgnoringFieldEditor:",
    "Alt+Escape": "complete:",
    "Alt+ArrowUp": ["moveBackward:", "moveToBeginningOfParagraph:"],
    "Alt+ArrowDown": ["moveForward:", "moveToEndOfParagraph:"],
    "Alt+ArrowLeft": "moveWordLeft:",
    "Alt+ArrowRight": "moveWordRight:",
    "Alt+Delete": "deleteWordForward:",
    "Alt+PageUp": "pageUp:",
    "Alt+PageDown": "pageDown:",
    "Shift+Alt+Backspace": "deleteWordBackward:",
    "Shift+Alt+Enter": "insertNewlineIgnoringFieldEditor:",
    "Shift+Alt+NumpadEnter": "insertNewlineIgnoringFieldEditor:",
    "Shift+Alt+Escape": "complete:",
    "Shift+Alt+ArrowUp": "moveParagraphBackwardAndModifySelection:",
    "Shift+Alt+ArrowDown": "moveParagraphForwardAndModifySelection:",
    "Shift+Alt+ArrowLeft": "moveWordLeftAndModifySelection:",
    "Shift+Alt+ArrowRight": "moveWordRightAndModifySelection:",
    "Shift+Alt+Delete": "deleteWordForward:",
    "Shift+Alt+PageUp": "pageUp:",
    "Shift+Alt+PageDown": "pageDown:",
    "Control+Alt+KeyB": "moveWordBackward:",
    "Control+Alt+KeyF": "moveWordForward:",
    "Control+Alt+Backspace": "deleteWordBackward:",
    "Shift+Control+Alt+KeyB": "moveWordBackwardAndModifySelection:",
    "Shift+Control+Alt+KeyF": "moveWordForwardAndModifySelection:",
    "Shift+Control+Alt+Backspace": "deleteWordBackward:",
    "Meta+NumpadSubtract": "cancel:",
    "Meta+Backspace": "deleteToBeginningOfLine:",
    "Meta+ArrowUp": "moveToBeginningOfDocument:",
    "Meta+ArrowDown": "moveToEndOfDocument:",
    "Meta+ArrowLeft": "moveToLeftEndOfLine:",
    "Meta+ArrowRight": "moveToRightEndOfLine:",
    "Shift+Meta+NumpadSubtract": "cancel:",
    "Shift+Meta+Backspace": "deleteToBeginningOfLine:",
    "Shift+Meta+ArrowUp": "moveToBeginningOfDocumentAndModifySelection:",
    "Shift+Meta+ArrowDown": "moveToEndOfDocumentAndModifySelection:",
    "Shift+Meta+ArrowLeft": "moveToLeftEndOfLineAndModifySelection:",
    "Shift+Meta+ArrowRight": "moveToRightEndOfLineAndModifySelection:",
    "Meta+KeyA": "selectAll:",
    "Meta+KeyC": "copy:",
    "Meta+KeyX": "cut:",
    "Meta+KeyV": "paste:",
    "Meta+KeyZ": "undo:",
    "Shift+Meta+KeyZ": "redo:"
  };
  return macEditingCommands;
}
var hasRequiredCrInput;
function requireCrInput() {
  if (hasRequiredCrInput) return crInput;
  hasRequiredCrInput = 1;
  Object.defineProperty(crInput, "__esModule", {
    value: true
  });
  crInput.RawTouchscreenImpl = crInput.RawMouseImpl = crInput.RawKeyboardImpl = void 0;
  var _utils = requireUtils();
  var input2 = _interopRequireWildcard(requireInput$1());
  var _macEditingCommands = requireMacEditingCommands();
  var _crProtocolHelper = requireCrProtocolHelper();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  class RawKeyboardImpl {
    constructor(_client, _isMac, _dragManger) {
      this._client = _client;
      this._isMac = _isMac;
      this._dragManger = _dragManger;
    }
    _commandsForCode(code, modifiers) {
      if (!this._isMac) return [];
      const parts = [];
      for (const modifier of ["Shift", "Control", "Alt", "Meta"]) {
        if (modifiers.has(modifier)) parts.push(modifier);
      }
      parts.push(code);
      const shortcut = parts.join("+");
      let commands = _macEditingCommands.macEditingCommands[shortcut] || [];
      if ((0, _utils.isString)(commands)) commands = [commands];
      commands = commands.filter((x2) => !x2.startsWith("insert"));
      return commands.map((c2) => c2.substring(0, c2.length - 1));
    }
    async keydown(modifiers, keyName, description, autoRepeat) {
      const {
        code,
        key,
        location: location2,
        text
      } = description;
      if (code === "Escape" && await this._dragManger.cancelDrag()) return;
      const commands = this._commandsForCode(code, modifiers);
      await this._client.send("Input.dispatchKeyEvent", {
        type: text ? "keyDown" : "rawKeyDown",
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        windowsVirtualKeyCode: description.keyCodeWithoutLocation,
        code,
        commands,
        key,
        text,
        unmodifiedText: text,
        autoRepeat,
        location: location2,
        isKeypad: location2 === input2.keypadLocation
      });
    }
    async keyup(modifiers, keyName, description) {
      const {
        code,
        key,
        location: location2
      } = description;
      await this._client.send("Input.dispatchKeyEvent", {
        type: "keyUp",
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        key,
        windowsVirtualKeyCode: description.keyCodeWithoutLocation,
        code,
        location: location2
      });
    }
    async sendText(text) {
      await this._client.send("Input.insertText", {
        text
      });
    }
  }
  crInput.RawKeyboardImpl = RawKeyboardImpl;
  class RawMouseImpl {
    constructor(page2, client, dragManager) {
      this._client = void 0;
      this._page = void 0;
      this._dragManager = void 0;
      this._page = page2;
      this._client = client;
      this._dragManager = dragManager;
    }
    async move(x2, y2, button, buttons, modifiers, forClick) {
      const actualMove = async () => {
        await this._client.send("Input.dispatchMouseEvent", {
          type: "mouseMoved",
          button,
          buttons: (0, _crProtocolHelper.toButtonsMask)(buttons),
          x: x2,
          y: y2,
          modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers)
        });
      };
      if (forClick) {
        return actualMove();
      }
      await this._dragManager.interceptDragCausedByMove(x2, y2, button, buttons, modifiers, actualMove);
    }
    async down(x2, y2, button, buttons, modifiers, clickCount) {
      if (this._dragManager.isDragging()) return;
      await this._client.send("Input.dispatchMouseEvent", {
        type: "mousePressed",
        button,
        buttons: (0, _crProtocolHelper.toButtonsMask)(buttons),
        x: x2,
        y: y2,
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        clickCount
      });
    }
    async up(x2, y2, button, buttons, modifiers, clickCount) {
      if (this._dragManager.isDragging()) {
        await this._dragManager.drop(x2, y2, modifiers);
        return;
      }
      await this._client.send("Input.dispatchMouseEvent", {
        type: "mouseReleased",
        button,
        buttons: (0, _crProtocolHelper.toButtonsMask)(buttons),
        x: x2,
        y: y2,
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        clickCount
      });
    }
    async wheel(x2, y2, buttons, modifiers, deltaX, deltaY) {
      await this._client.send("Input.dispatchMouseEvent", {
        type: "mouseWheel",
        x: x2,
        y: y2,
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        deltaX,
        deltaY
      });
    }
  }
  crInput.RawMouseImpl = RawMouseImpl;
  class RawTouchscreenImpl {
    constructor(client) {
      this._client = void 0;
      this._client = client;
    }
    async tap(x2, y2, modifiers) {
      await Promise.all([this._client.send("Input.dispatchTouchEvent", {
        type: "touchStart",
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        touchPoints: [{
          x: x2,
          y: y2
        }]
      }), this._client.send("Input.dispatchTouchEvent", {
        type: "touchEnd",
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        touchPoints: []
      })]);
    }
  }
  crInput.RawTouchscreenImpl = RawTouchscreenImpl;
  return crInput;
}
var crNetworkManager = {};
var hasRequiredCrNetworkManager;
function requireCrNetworkManager() {
  if (hasRequiredCrNetworkManager) return crNetworkManager;
  hasRequiredCrNetworkManager = 1;
  Object.defineProperty(crNetworkManager, "__esModule", {
    value: true
  });
  crNetworkManager.CRNetworkManager = void 0;
  var _utils = requireUtils();
  var _eventsHelper = requireEventsHelper();
  var _helper = requireHelper();
  var network2 = _interopRequireWildcard(requireNetwork$1());
  var _protocolError = requireProtocolError();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  class CRNetworkManager {
    constructor(page2, serviceWorker) {
      this._page = void 0;
      this._serviceWorker = void 0;
      this._requestIdToRequest = /* @__PURE__ */ new Map();
      this._requestIdToRequestWillBeSentEvent = /* @__PURE__ */ new Map();
      this._credentials = null;
      this._attemptedAuthentications = /* @__PURE__ */ new Set();
      this._userRequestInterceptionEnabled = false;
      this._protocolRequestInterceptionEnabled = false;
      this._offline = false;
      this._extraHTTPHeaders = [];
      this._requestIdToRequestPausedEvent = /* @__PURE__ */ new Map();
      this._responseExtraInfoTracker = new ResponseExtraInfoTracker();
      this._sessions = /* @__PURE__ */ new Map();
      this._page = page2;
      this._serviceWorker = serviceWorker;
    }
    async addSession(session, workerFrame, isMain) {
      const sessionInfo = {
        session,
        isMain,
        workerFrame,
        eventListeners: []
      };
      sessionInfo.eventListeners = [_eventsHelper.eventsHelper.addEventListener(session, "Fetch.requestPaused", this._onRequestPaused.bind(this, sessionInfo)), _eventsHelper.eventsHelper.addEventListener(session, "Fetch.authRequired", this._onAuthRequired.bind(this, sessionInfo)), _eventsHelper.eventsHelper.addEventListener(session, "Network.requestWillBeSent", this._onRequestWillBeSent.bind(this, sessionInfo)), _eventsHelper.eventsHelper.addEventListener(session, "Network.requestWillBeSentExtraInfo", this._onRequestWillBeSentExtraInfo.bind(this)), _eventsHelper.eventsHelper.addEventListener(session, "Network.requestServedFromCache", this._onRequestServedFromCache.bind(this)), _eventsHelper.eventsHelper.addEventListener(session, "Network.responseReceived", this._onResponseReceived.bind(this, sessionInfo)), _eventsHelper.eventsHelper.addEventListener(session, "Network.responseReceivedExtraInfo", this._onResponseReceivedExtraInfo.bind(this)), _eventsHelper.eventsHelper.addEventListener(session, "Network.loadingFinished", this._onLoadingFinished.bind(this, sessionInfo)), _eventsHelper.eventsHelper.addEventListener(session, "Network.loadingFailed", this._onLoadingFailed.bind(this, sessionInfo))];
      if (this._page) {
        sessionInfo.eventListeners.push(...[_eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketCreated", (e2) => this._page._frameManager.onWebSocketCreated(e2.requestId, e2.url)), _eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketWillSendHandshakeRequest", (e2) => this._page._frameManager.onWebSocketRequest(e2.requestId)), _eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketHandshakeResponseReceived", (e2) => this._page._frameManager.onWebSocketResponse(e2.requestId, e2.response.status, e2.response.statusText)), _eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketFrameSent", (e2) => e2.response.payloadData && this._page._frameManager.onWebSocketFrameSent(e2.requestId, e2.response.opcode, e2.response.payloadData)), _eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketFrameReceived", (e2) => e2.response.payloadData && this._page._frameManager.webSocketFrameReceived(e2.requestId, e2.response.opcode, e2.response.payloadData)), _eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketClosed", (e2) => this._page._frameManager.webSocketClosed(e2.requestId)), _eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketFrameError", (e2) => this._page._frameManager.webSocketError(e2.requestId, e2.errorMessage))]);
      }
      this._sessions.set(session, sessionInfo);
      await Promise.all([session.send("Network.enable"), this._updateProtocolRequestInterceptionForSession(
        sessionInfo,
        true
        /* initial */
      ), this._setOfflineForSession(
        sessionInfo,
        true
        /* initial */
      ), this._setExtraHTTPHeadersForSession(
        sessionInfo,
        true
        /* initial */
      )]);
    }
    removeSession(session) {
      const info = this._sessions.get(session);
      if (info) _eventsHelper.eventsHelper.removeEventListeners(info.eventListeners);
      this._sessions.delete(session);
    }
    async _forEachSession(cb) {
      await Promise.all([...this._sessions.values()].map((info) => {
        if (info.isMain) return cb(info);
        return cb(info).catch((e2) => {
          if ((0, _protocolError.isSessionClosedError)(e2)) return;
          throw e2;
        });
      }));
    }
    async authenticate(credentials) {
      this._credentials = credentials;
      await this._updateProtocolRequestInterception();
    }
    async setOffline(offline) {
      if (offline === this._offline) return;
      this._offline = offline;
      await this._forEachSession((info) => this._setOfflineForSession(info));
    }
    async _setOfflineForSession(info, initial) {
      if (initial && !this._offline) return;
      if (info.workerFrame) return;
      await info.session.send("Network.emulateNetworkConditions", {
        offline: this._offline,
        // values of 0 remove any active throttling. crbug.com/456324#c9
        latency: 0,
        downloadThroughput: -1,
        uploadThroughput: -1
      });
    }
    async setRequestInterception(value) {
      this._userRequestInterceptionEnabled = value;
      await this._updateProtocolRequestInterception();
    }
    async _updateProtocolRequestInterception() {
      const enabled = this._userRequestInterceptionEnabled || !!this._credentials;
      if (enabled === this._protocolRequestInterceptionEnabled) return;
      this._protocolRequestInterceptionEnabled = enabled;
      await this._forEachSession((info) => this._updateProtocolRequestInterceptionForSession(info));
    }
    async _updateProtocolRequestInterceptionForSession(info, initial) {
      const enabled = this._protocolRequestInterceptionEnabled;
      if (initial && !enabled) return;
      const cachePromise = info.session.send("Network.setCacheDisabled", {
        cacheDisabled: enabled
      });
      let fetchPromise = Promise.resolve(void 0);
      if (!info.workerFrame) {
        if (enabled) fetchPromise = info.session.send("Fetch.enable", {
          handleAuthRequests: true,
          patterns: [{
            urlPattern: "*",
            requestStage: "Request"
          }]
        });
        else fetchPromise = info.session.send("Fetch.disable");
      }
      await Promise.all([cachePromise, fetchPromise]);
    }
    async setExtraHTTPHeaders(extraHTTPHeaders) {
      if (!this._extraHTTPHeaders.length && !extraHTTPHeaders.length) return;
      this._extraHTTPHeaders = extraHTTPHeaders;
      await this._forEachSession((info) => this._setExtraHTTPHeadersForSession(info));
    }
    async _setExtraHTTPHeadersForSession(info, initial) {
      if (initial && !this._extraHTTPHeaders.length) return;
      await info.session.send("Network.setExtraHTTPHeaders", {
        headers: (0, _utils.headersArrayToObject)(
          this._extraHTTPHeaders,
          false
          /* lowerCase */
        )
      });
    }
    async clearCache() {
      await this._forEachSession(async (info) => {
        await info.session.send("Network.setCacheDisabled", {
          cacheDisabled: true
        });
        if (!this._protocolRequestInterceptionEnabled) await info.session.send("Network.setCacheDisabled", {
          cacheDisabled: false
        });
        if (!info.workerFrame) await info.session.send("Network.clearBrowserCache");
      });
    }
    _onRequestWillBeSent(sessionInfo, event) {
      if (this._protocolRequestInterceptionEnabled && !event.request.url.startsWith("data:")) {
        const requestId = event.requestId;
        const requestPausedEvent = this._requestIdToRequestPausedEvent.get(requestId);
        if (requestPausedEvent) {
          this._onRequest(sessionInfo, event, requestPausedEvent.sessionInfo, requestPausedEvent.event);
          this._requestIdToRequestPausedEvent.delete(requestId);
        } else {
          this._requestIdToRequestWillBeSentEvent.set(event.requestId, {
            sessionInfo,
            event
          });
        }
      } else {
        this._onRequest(sessionInfo, event, void 0, void 0);
      }
    }
    _onRequestServedFromCache(event) {
      this._responseExtraInfoTracker.requestServedFromCache(event);
    }
    _onRequestWillBeSentExtraInfo(event) {
      this._responseExtraInfoTracker.requestWillBeSentExtraInfo(event);
    }
    _onAuthRequired(sessionInfo, event) {
      let response = "Default";
      const shouldProvideCredentials = this._shouldProvideCredentials(event.request.url);
      if (this._attemptedAuthentications.has(event.requestId)) {
        response = "CancelAuth";
      } else if (shouldProvideCredentials) {
        response = "ProvideCredentials";
        this._attemptedAuthentications.add(event.requestId);
      }
      const {
        username,
        password
      } = shouldProvideCredentials && this._credentials ? this._credentials : {
        username: void 0,
        password: void 0
      };
      sessionInfo.session._sendMayFail("Fetch.continueWithAuth", {
        requestId: event.requestId,
        authChallengeResponse: {
          response,
          username,
          password
        }
      });
    }
    _shouldProvideCredentials(url) {
      if (!this._credentials) return false;
      return !this._credentials.origin || new URL(url).origin.toLowerCase() === this._credentials.origin.toLowerCase();
    }
    _onRequestPaused(sessionInfo, event) {
      if (!event.networkId) {
        sessionInfo.session._sendMayFail("Fetch.continueRequest", {
          requestId: event.requestId
        });
        return;
      }
      if (event.request.url.startsWith("data:")) return;
      const requestId = event.networkId;
      const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(requestId);
      if (requestWillBeSentEvent) {
        this._onRequest(requestWillBeSentEvent.sessionInfo, requestWillBeSentEvent.event, sessionInfo, event);
        this._requestIdToRequestWillBeSentEvent.delete(requestId);
      } else {
        var _existingRequest$_rou;
        const existingRequest = this._requestIdToRequest.get(requestId);
        const alreadyContinuedParams = existingRequest === null || existingRequest === void 0 || (_existingRequest$_rou = existingRequest._route) === null || _existingRequest$_rou === void 0 ? void 0 : _existingRequest$_rou._alreadyContinuedParams;
        if (alreadyContinuedParams && !event.redirectedRequestId) {
          sessionInfo.session._sendMayFail("Fetch.continueRequest", {
            ...alreadyContinuedParams,
            requestId: event.requestId
          });
          return;
        }
        this._requestIdToRequestPausedEvent.set(requestId, {
          sessionInfo,
          event
        });
      }
    }
    _onRequest(requestWillBeSentSessionInfo, requestWillBeSentEvent, requestPausedSessionInfo, requestPausedEvent) {
      var _this$_page, _this$_page2, _this$_page3;
      if (requestWillBeSentEvent.request.url.startsWith("data:")) return;
      let redirectedFrom = null;
      if (requestWillBeSentEvent.redirectResponse) {
        const request2 = this._requestIdToRequest.get(requestWillBeSentEvent.requestId);
        if (request2) {
          this._handleRequestRedirect(request2, requestWillBeSentEvent.redirectResponse, requestWillBeSentEvent.timestamp, requestWillBeSentEvent.redirectHasExtraInfo);
          redirectedFrom = request2;
        }
      }
      let frame2 = requestWillBeSentEvent.frameId ? (_this$_page = this._page) === null || _this$_page === void 0 ? void 0 : _this$_page._frameManager.frame(requestWillBeSentEvent.frameId) : requestWillBeSentSessionInfo.workerFrame;
      if (!frame2 && this._page && requestPausedEvent && requestPausedEvent.frameId) frame2 = this._page._frameManager.frame(requestPausedEvent.frameId);
      if (!frame2 && this._page && requestWillBeSentEvent.frameId === ((_this$_page2 = this._page) === null || _this$_page2 === void 0 ? void 0 : _this$_page2._delegate)._targetId) {
        frame2 = this._page._frameManager.frameAttached(requestWillBeSentEvent.frameId, null);
      }
      const isInterceptedOptionsPreflight = !!requestPausedEvent && requestPausedEvent.request.method === "OPTIONS" && requestWillBeSentEvent.initiator.type === "preflight";
      if (isInterceptedOptionsPreflight && (this._page || this._serviceWorker).needsRequestInterception()) {
        const requestHeaders = requestPausedEvent.request.headers;
        const responseHeaders = [{
          name: "Access-Control-Allow-Origin",
          value: requestHeaders["Origin"] || "*"
        }, {
          name: "Access-Control-Allow-Methods",
          value: requestHeaders["Access-Control-Request-Method"] || "GET, POST, OPTIONS, DELETE"
        }, {
          name: "Access-Control-Allow-Credentials",
          value: "true"
        }];
        if (requestHeaders["Access-Control-Request-Headers"]) responseHeaders.push({
          name: "Access-Control-Allow-Headers",
          value: requestHeaders["Access-Control-Request-Headers"]
        });
        requestPausedSessionInfo.session._sendMayFail("Fetch.fulfillRequest", {
          requestId: requestPausedEvent.requestId,
          responseCode: 204,
          responsePhrase: network2.statusText(204),
          responseHeaders,
          body: ""
        });
        return;
      }
      if (!frame2 && !this._serviceWorker) {
        if (requestPausedEvent) requestPausedSessionInfo.session._sendMayFail("Fetch.continueRequest", {
          requestId: requestPausedEvent.requestId
        });
        return;
      }
      let route = null;
      let headersOverride;
      if (requestPausedEvent) {
        if (redirectedFrom || !this._userRequestInterceptionEnabled && this._protocolRequestInterceptionEnabled) {
          var _redirectedFrom;
          headersOverride = (_redirectedFrom = redirectedFrom) === null || _redirectedFrom === void 0 || (_redirectedFrom = _redirectedFrom._originalRequestRoute) === null || _redirectedFrom === void 0 || (_redirectedFrom = _redirectedFrom._alreadyContinuedParams) === null || _redirectedFrom === void 0 ? void 0 : _redirectedFrom.headers;
          requestPausedSessionInfo.session._sendMayFail("Fetch.continueRequest", {
            requestId: requestPausedEvent.requestId,
            headers: headersOverride
          });
        } else {
          route = new RouteImpl(requestPausedSessionInfo.session, requestPausedEvent.requestId);
        }
      }
      const isNavigationRequest = requestWillBeSentEvent.requestId === requestWillBeSentEvent.loaderId && requestWillBeSentEvent.type === "Document";
      const documentId = isNavigationRequest ? requestWillBeSentEvent.loaderId : void 0;
      const request = new InterceptableRequest({
        session: requestWillBeSentSessionInfo.session,
        context: (this._page || this._serviceWorker)._browserContext,
        frame: frame2 || null,
        serviceWorker: this._serviceWorker || null,
        documentId,
        route,
        requestWillBeSentEvent,
        requestPausedEvent,
        redirectedFrom,
        headersOverride: headersOverride || null
      });
      this._requestIdToRequest.set(requestWillBeSentEvent.requestId, request);
      if (route) {
        request.request.setRawRequestHeaders((0, _utils.headersObjectToArray)(requestPausedEvent.request.headers, "\n"));
      }
      (((_this$_page3 = this._page) === null || _this$_page3 === void 0 ? void 0 : _this$_page3._frameManager) || this._serviceWorker).requestStarted(request.request, route || void 0);
    }
    _createResponse(request, responsePayload, hasExtraInfo) {
      var _responsePayload$secu, _responsePayload$secu2, _responsePayload$secu3, _responsePayload$secu4, _responsePayload$secu5;
      const getResponseBody = async () => {
        var _request$_route;
        const contentLengthHeader = Object.entries(responsePayload.headers).find((header) => header[0].toLowerCase() === "content-length");
        const expectedLength = contentLengthHeader ? +contentLengthHeader[1] : void 0;
        const session = request.session;
        const response2 = await session.send("Network.getResponseBody", {
          requestId: request._requestId
        });
        if (response2.body || !expectedLength) return Buffer.from(response2.body, response2.base64Encoded ? "base64" : "utf8");
        if ((_request$_route = request._route) !== null && _request$_route !== void 0 && _request$_route._fulfilled) return Buffer.from("");
        const resource = await session.send("Network.loadNetworkResource", {
          url: request.request.url(),
          frameId: this._serviceWorker ? void 0 : request.request.frame()._id,
          options: {
            disableCache: false,
            includeCredentials: true
          }
        });
        const chunks = [];
        while (resource.resource.stream) {
          const chunk = await session.send("IO.read", {
            handle: resource.resource.stream
          });
          chunks.push(Buffer.from(chunk.data, chunk.base64Encoded ? "base64" : "utf-8"));
          if (chunk.eof) {
            await session.send("IO.close", {
              handle: resource.resource.stream
            });
            break;
          }
        }
        return Buffer.concat(chunks);
      };
      const timingPayload = responsePayload.timing;
      let timing;
      if (timingPayload && !this._responseExtraInfoTracker.servedFromCache(request._requestId)) {
        timing = {
          startTime: (timingPayload.requestTime - request._timestamp + request._wallTime) * 1e3,
          domainLookupStart: timingPayload.dnsStart,
          domainLookupEnd: timingPayload.dnsEnd,
          connectStart: timingPayload.connectStart,
          secureConnectionStart: timingPayload.sslStart,
          connectEnd: timingPayload.connectEnd,
          requestStart: timingPayload.sendStart,
          responseStart: timingPayload.receiveHeadersEnd
        };
      } else {
        timing = {
          startTime: request._wallTime * 1e3,
          domainLookupStart: -1,
          domainLookupEnd: -1,
          connectStart: -1,
          secureConnectionStart: -1,
          connectEnd: -1,
          requestStart: -1,
          responseStart: -1
        };
      }
      const response = new network2.Response(request.request, responsePayload.status, responsePayload.statusText, (0, _utils.headersObjectToArray)(responsePayload.headers), timing, getResponseBody, !!responsePayload.fromServiceWorker, responsePayload.protocol);
      if (responsePayload !== null && responsePayload !== void 0 && responsePayload.remoteIPAddress && typeof (responsePayload === null || responsePayload === void 0 ? void 0 : responsePayload.remotePort) === "number") {
        response._serverAddrFinished({
          ipAddress: responsePayload.remoteIPAddress,
          port: responsePayload.remotePort
        });
      } else {
        response._serverAddrFinished();
      }
      response._securityDetailsFinished({
        protocol: responsePayload === null || responsePayload === void 0 || (_responsePayload$secu = responsePayload.securityDetails) === null || _responsePayload$secu === void 0 ? void 0 : _responsePayload$secu.protocol,
        subjectName: responsePayload === null || responsePayload === void 0 || (_responsePayload$secu2 = responsePayload.securityDetails) === null || _responsePayload$secu2 === void 0 ? void 0 : _responsePayload$secu2.subjectName,
        issuer: responsePayload === null || responsePayload === void 0 || (_responsePayload$secu3 = responsePayload.securityDetails) === null || _responsePayload$secu3 === void 0 ? void 0 : _responsePayload$secu3.issuer,
        validFrom: responsePayload === null || responsePayload === void 0 || (_responsePayload$secu4 = responsePayload.securityDetails) === null || _responsePayload$secu4 === void 0 ? void 0 : _responsePayload$secu4.validFrom,
        validTo: responsePayload === null || responsePayload === void 0 || (_responsePayload$secu5 = responsePayload.securityDetails) === null || _responsePayload$secu5 === void 0 ? void 0 : _responsePayload$secu5.validTo
      });
      this._responseExtraInfoTracker.processResponse(request._requestId, response, hasExtraInfo);
      return response;
    }
    _deleteRequest(request) {
      this._requestIdToRequest.delete(request._requestId);
      if (request._interceptionId) this._attemptedAuthentications.delete(request._interceptionId);
    }
    _handleRequestRedirect(request, responsePayload, timestamp, hasExtraInfo) {
      var _this$_page4, _this$_page5;
      const response = this._createResponse(request, responsePayload, hasExtraInfo);
      response.setTransferSize(null);
      response.setEncodedBodySize(null);
      response._requestFinished((timestamp - request._timestamp) * 1e3);
      this._deleteRequest(request);
      (((_this$_page4 = this._page) === null || _this$_page4 === void 0 ? void 0 : _this$_page4._frameManager) || this._serviceWorker).requestReceivedResponse(response);
      (((_this$_page5 = this._page) === null || _this$_page5 === void 0 ? void 0 : _this$_page5._frameManager) || this._serviceWorker).reportRequestFinished(request.request, response);
    }
    _onResponseReceivedExtraInfo(event) {
      this._responseExtraInfoTracker.responseReceivedExtraInfo(event);
    }
    _onResponseReceived(sessionInfo, event) {
      var _this$_page6;
      let request = this._requestIdToRequest.get(event.requestId);
      if (!request && event.response.fromServiceWorker) {
        const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
        if (requestWillBeSentEvent) {
          this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
          this._onRequest(sessionInfo, requestWillBeSentEvent.event, void 0, void 0);
          request = this._requestIdToRequest.get(event.requestId);
        }
      }
      if (!request) return;
      const response = this._createResponse(request, event.response, event.hasExtraInfo);
      (((_this$_page6 = this._page) === null || _this$_page6 === void 0 ? void 0 : _this$_page6._frameManager) || this._serviceWorker).requestReceivedResponse(response);
    }
    _onLoadingFinished(sessionInfo, event) {
      var _this$_page7;
      this._responseExtraInfoTracker.loadingFinished(event);
      const request = this._requestIdToRequest.get(event.requestId);
      if (!request) return;
      this._maybeUpdateOOPIFMainRequest(sessionInfo, request);
      const response = request.request._existingResponse();
      if (response) {
        response.setTransferSize(event.encodedDataLength);
        response.responseHeadersSize().then((size) => response.setEncodedBodySize(event.encodedDataLength - size));
        response._requestFinished(_helper.helper.secondsToRoundishMillis(event.timestamp - request._timestamp));
      }
      this._deleteRequest(request);
      (((_this$_page7 = this._page) === null || _this$_page7 === void 0 ? void 0 : _this$_page7._frameManager) || this._serviceWorker).reportRequestFinished(request.request, response);
    }
    _onLoadingFailed(sessionInfo, event) {
      var _this$_page8;
      this._responseExtraInfoTracker.loadingFailed(event);
      let request = this._requestIdToRequest.get(event.requestId);
      if (!request) {
        const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
        if (requestWillBeSentEvent) {
          this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
          this._onRequest(sessionInfo, requestWillBeSentEvent.event, void 0, void 0);
          request = this._requestIdToRequest.get(event.requestId);
        }
      }
      if (!request) return;
      this._maybeUpdateOOPIFMainRequest(sessionInfo, request);
      const response = request.request._existingResponse();
      if (response) {
        response.setTransferSize(null);
        response.setEncodedBodySize(null);
        response._requestFinished(_helper.helper.secondsToRoundishMillis(event.timestamp - request._timestamp));
      } else {
        request.request.setRawRequestHeaders(null);
      }
      this._deleteRequest(request);
      request.request._setFailureText(event.errorText || event.blockedReason || "");
      (((_this$_page8 = this._page) === null || _this$_page8 === void 0 ? void 0 : _this$_page8._frameManager) || this._serviceWorker).requestFailed(request.request, !!event.canceled);
    }
    _maybeUpdateOOPIFMainRequest(sessionInfo, request) {
      if (request.session !== sessionInfo.session && !sessionInfo.isMain && request._documentId === request._requestId) request.session = sessionInfo.session;
    }
  }
  crNetworkManager.CRNetworkManager = CRNetworkManager;
  class InterceptableRequest {
    constructor(options) {
      this.request = void 0;
      this._requestId = void 0;
      this._interceptionId = void 0;
      this._documentId = void 0;
      this._timestamp = void 0;
      this._wallTime = void 0;
      this._route = void 0;
      this._originalRequestRoute = void 0;
      this.session = void 0;
      const {
        session,
        context,
        frame: frame2,
        documentId,
        route,
        requestWillBeSentEvent,
        requestPausedEvent,
        redirectedFrom,
        serviceWorker,
        headersOverride
      } = options;
      this.session = session;
      this._timestamp = requestWillBeSentEvent.timestamp;
      this._wallTime = requestWillBeSentEvent.wallTime;
      this._requestId = requestWillBeSentEvent.requestId;
      this._interceptionId = requestPausedEvent && requestPausedEvent.requestId;
      this._documentId = documentId;
      this._route = route;
      this._originalRequestRoute = route !== null && route !== void 0 ? route : redirectedFrom === null || redirectedFrom === void 0 ? void 0 : redirectedFrom._originalRequestRoute;
      const {
        headers: headers2,
        method,
        url,
        postDataEntries = null
      } = requestPausedEvent ? requestPausedEvent.request : requestWillBeSentEvent.request;
      const type = (requestWillBeSentEvent.type || "").toLowerCase();
      let postDataBuffer = null;
      const entries = postDataEntries === null || postDataEntries === void 0 ? void 0 : postDataEntries.filter((entry) => entry.bytes);
      if (entries && entries.length) postDataBuffer = Buffer.concat(entries.map((entry) => Buffer.from(entry.bytes, "base64")));
      this.request = new network2.Request(context, frame2, serviceWorker, (redirectedFrom === null || redirectedFrom === void 0 ? void 0 : redirectedFrom.request) || null, documentId, url, type, method, postDataBuffer, headersOverride || (0, _utils.headersObjectToArray)(headers2));
    }
  }
  class RouteImpl {
    constructor(session, interceptionId) {
      this._session = void 0;
      this._interceptionId = void 0;
      this._alreadyContinuedParams = void 0;
      this._fulfilled = false;
      this._session = session;
      this._interceptionId = interceptionId;
    }
    async continue(overrides) {
      this._alreadyContinuedParams = {
        requestId: this._interceptionId,
        url: overrides.url,
        headers: overrides.headers,
        method: overrides.method,
        postData: overrides.postData ? overrides.postData.toString("base64") : void 0
      };
      await catchDisallowedErrors(async () => {
        await this._session.send("Fetch.continueRequest", this._alreadyContinuedParams);
      });
    }
    async fulfill(response) {
      this._fulfilled = true;
      const body = response.isBase64 ? response.body : Buffer.from(response.body).toString("base64");
      const responseHeaders = splitSetCookieHeader(response.headers);
      await catchDisallowedErrors(async () => {
        await this._session.send("Fetch.fulfillRequest", {
          requestId: this._interceptionId,
          responseCode: response.status,
          responsePhrase: network2.statusText(response.status),
          responseHeaders,
          body
        });
      });
    }
    async abort(errorCode = "failed") {
      const errorReason = errorReasons[errorCode];
      (0, _utils.assert)(errorReason, "Unknown error code: " + errorCode);
      await catchDisallowedErrors(async () => {
        await this._session.send("Fetch.failRequest", {
          requestId: this._interceptionId,
          errorReason
        });
      });
    }
  }
  async function catchDisallowedErrors(callback) {
    try {
      return await callback();
    } catch (e2) {
      if ((0, _protocolError.isProtocolError)(e2) && e2.message.includes("Invalid http status code or phrase")) throw e2;
    }
  }
  function splitSetCookieHeader(headers2) {
    const index = headers2.findIndex(({
      name
    }) => name.toLowerCase() === "set-cookie");
    if (index === -1) return headers2;
    const header = headers2[index];
    const values = header.value.split("\n");
    if (values.length === 1) return headers2;
    const result = headers2.slice();
    result.splice(index, 1, ...values.map((value) => ({
      name: header.name,
      value
    })));
    return result;
  }
  const errorReasons = {
    "aborted": "Aborted",
    "accessdenied": "AccessDenied",
    "addressunreachable": "AddressUnreachable",
    "blockedbyclient": "BlockedByClient",
    "blockedbyresponse": "BlockedByResponse",
    "connectionaborted": "ConnectionAborted",
    "connectionclosed": "ConnectionClosed",
    "connectionfailed": "ConnectionFailed",
    "connectionrefused": "ConnectionRefused",
    "connectionreset": "ConnectionReset",
    "internetdisconnected": "InternetDisconnected",
    "namenotresolved": "NameNotResolved",
    "timedout": "TimedOut",
    "failed": "Failed"
  };
  class ResponseExtraInfoTracker {
    constructor() {
      this._requests = /* @__PURE__ */ new Map();
    }
    requestWillBeSentExtraInfo(event) {
      const info = this._getOrCreateEntry(event.requestId);
      info.requestWillBeSentExtraInfo.push(event);
      this._patchHeaders(info, info.requestWillBeSentExtraInfo.length - 1);
      this._checkFinished(info);
    }
    requestServedFromCache(event) {
      const info = this._getOrCreateEntry(event.requestId);
      info.servedFromCache = true;
    }
    servedFromCache(requestId) {
      const info = this._requests.get(requestId);
      return !!(info !== null && info !== void 0 && info.servedFromCache);
    }
    responseReceivedExtraInfo(event) {
      const info = this._getOrCreateEntry(event.requestId);
      info.responseReceivedExtraInfo.push(event);
      this._patchHeaders(info, info.responseReceivedExtraInfo.length - 1);
      this._checkFinished(info);
    }
    processResponse(requestId, response, hasExtraInfo) {
      var _info;
      let info = this._requests.get(requestId);
      if (!hasExtraInfo || (_info = info) !== null && _info !== void 0 && _info.servedFromCache) {
        response.request().setRawRequestHeaders(null);
        response.setResponseHeadersSize(null);
        response.setRawResponseHeaders(null);
        return;
      }
      info = this._getOrCreateEntry(requestId);
      info.responses.push(response);
      this._patchHeaders(info, info.responses.length - 1);
    }
    loadingFinished(event) {
      const info = this._requests.get(event.requestId);
      if (!info) return;
      info.loadingFinished = event;
      this._checkFinished(info);
    }
    loadingFailed(event) {
      const info = this._requests.get(event.requestId);
      if (!info) return;
      info.loadingFailed = event;
      this._checkFinished(info);
    }
    _getOrCreateEntry(requestId) {
      let info = this._requests.get(requestId);
      if (!info) {
        info = {
          requestId,
          requestWillBeSentExtraInfo: [],
          responseReceivedExtraInfo: [],
          responses: []
        };
        this._requests.set(requestId, info);
      }
      return info;
    }
    _patchHeaders(info, index) {
      const response = info.responses[index];
      const requestExtraInfo = info.requestWillBeSentExtraInfo[index];
      if (response && requestExtraInfo) {
        response.request().setRawRequestHeaders((0, _utils.headersObjectToArray)(requestExtraInfo.headers, "\n"));
        info.requestWillBeSentExtraInfo[index] = void 0;
      }
      const responseExtraInfo = info.responseReceivedExtraInfo[index];
      if (response && responseExtraInfo) {
        var _responseExtraInfo$he;
        response.setResponseHeadersSize(((_responseExtraInfo$he = responseExtraInfo.headersText) === null || _responseExtraInfo$he === void 0 ? void 0 : _responseExtraInfo$he.length) || 0);
        response.setRawResponseHeaders((0, _utils.headersObjectToArray)(responseExtraInfo.headers, "\n"));
        info.responseReceivedExtraInfo[index] = void 0;
      }
    }
    _checkFinished(info) {
      if (!info.loadingFinished && !info.loadingFailed) return;
      if (info.responses.length <= info.responseReceivedExtraInfo.length) {
        this._stopTracking(info.requestId);
        return;
      }
    }
    _stopTracking(requestId) {
      this._requests.delete(requestId);
    }
  }
  return crNetworkManager;
}
var crPdf = {};
var hasRequiredCrPdf;
function requireCrPdf() {
  if (hasRequiredCrPdf) return crPdf;
  hasRequiredCrPdf = 1;
  Object.defineProperty(crPdf, "__esModule", {
    value: true
  });
  crPdf.CRPDF = void 0;
  var _crProtocolHelper = requireCrProtocolHelper();
  var _utils = requireUtils();
  const PagePaperFormats = {
    letter: {
      width: 8.5,
      height: 11
    },
    legal: {
      width: 8.5,
      height: 14
    },
    tabloid: {
      width: 11,
      height: 17
    },
    ledger: {
      width: 17,
      height: 11
    },
    a0: {
      width: 33.1,
      height: 46.8
    },
    a1: {
      width: 23.4,
      height: 33.1
    },
    a2: {
      width: 16.54,
      height: 23.4
    },
    a3: {
      width: 11.7,
      height: 16.54
    },
    a4: {
      width: 8.27,
      height: 11.7
    },
    a5: {
      width: 5.83,
      height: 8.27
    },
    a6: {
      width: 4.13,
      height: 5.83
    }
  };
  const unitToPixels = {
    "px": 1,
    "in": 96,
    "cm": 37.8,
    "mm": 3.78
  };
  function convertPrintParameterToInches(text) {
    if (text === void 0) return void 0;
    let unit = text.substring(text.length - 2).toLowerCase();
    let valueText = "";
    if (unitToPixels.hasOwnProperty(unit)) {
      valueText = text.substring(0, text.length - 2);
    } else {
      unit = "px";
      valueText = text;
    }
    const value = Number(valueText);
    (0, _utils.assert)(!isNaN(value), "Failed to parse parameter value: " + text);
    const pixels = value * unitToPixels[unit];
    return pixels / 96;
  }
  class CRPDF {
    constructor(client) {
      this._client = void 0;
      this._client = client;
    }
    async generate(options) {
      const {
        scale = 1,
        displayHeaderFooter = false,
        headerTemplate = "",
        footerTemplate = "",
        printBackground = false,
        landscape = false,
        pageRanges = "",
        preferCSSPageSize = false,
        margin = {},
        tagged = false,
        outline = false
      } = options;
      let paperWidth = 8.5;
      let paperHeight = 11;
      if (options.format) {
        const format2 = PagePaperFormats[options.format.toLowerCase()];
        (0, _utils.assert)(format2, "Unknown paper format: " + options.format);
        paperWidth = format2.width;
        paperHeight = format2.height;
      } else {
        paperWidth = convertPrintParameterToInches(options.width) || paperWidth;
        paperHeight = convertPrintParameterToInches(options.height) || paperHeight;
      }
      const marginTop = convertPrintParameterToInches(margin.top) || 0;
      const marginLeft = convertPrintParameterToInches(margin.left) || 0;
      const marginBottom = convertPrintParameterToInches(margin.bottom) || 0;
      const marginRight = convertPrintParameterToInches(margin.right) || 0;
      const generateDocumentOutline = outline;
      const generateTaggedPDF = tagged;
      const result = await this._client.send("Page.printToPDF", {
        transferMode: "ReturnAsStream",
        landscape,
        displayHeaderFooter,
        headerTemplate,
        footerTemplate,
        printBackground,
        scale,
        paperWidth,
        paperHeight,
        marginTop,
        marginBottom,
        marginLeft,
        marginRight,
        pageRanges,
        preferCSSPageSize,
        generateTaggedPDF,
        generateDocumentOutline
      });
      return await (0, _crProtocolHelper.readProtocolStream)(this._client, result.stream);
    }
  }
  crPdf.CRPDF = CRPDF;
  return crPdf;
}
var defaultFontFamilies = {};
var hasRequiredDefaultFontFamilies;
function requireDefaultFontFamilies() {
  if (hasRequiredDefaultFontFamilies) return defaultFontFamilies;
  hasRequiredDefaultFontFamilies = 1;
  Object.defineProperty(defaultFontFamilies, "__esModule", {
    value: true
  });
  defaultFontFamilies.platformToFontFamilies = void 0;
  defaultFontFamilies.platformToFontFamilies = {
    "linux": {
      "fontFamilies": {
        "standard": "Times New Roman",
        "fixed": "Monospace",
        "serif": "Times New Roman",
        "sansSerif": "Arial",
        "cursive": "Comic Sans MS",
        "fantasy": "Impact"
      }
    },
    "mac": {
      "fontFamilies": {
        "standard": "Times",
        "fixed": "Courier",
        "serif": "Times",
        "sansSerif": "Helvetica",
        "cursive": "Apple Chancery",
        "fantasy": "Papyrus"
      },
      "forScripts": [{
        "script": "jpan",
        "fontFamilies": {
          "standard": "Hiragino Kaku Gothic ProN",
          "fixed": "Osaka-Mono",
          "serif": "Hiragino Mincho ProN",
          "sansSerif": "Hiragino Kaku Gothic ProN"
        }
      }, {
        "script": "hang",
        "fontFamilies": {
          "standard": "Apple SD Gothic Neo",
          "serif": "AppleMyungjo",
          "sansSerif": "Apple SD Gothic Neo"
        }
      }, {
        "script": "hans",
        "fontFamilies": {
          "standard": ",PingFang SC,STHeiti",
          "serif": "Songti SC",
          "sansSerif": ",PingFang SC,STHeiti",
          "cursive": "Kaiti SC"
        }
      }, {
        "script": "hant",
        "fontFamilies": {
          "standard": ",PingFang TC,Heiti TC",
          "serif": "Songti TC",
          "sansSerif": ",PingFang TC,Heiti TC",
          "cursive": "Kaiti TC"
        }
      }]
    },
    "win": {
      "fontFamilies": {
        "standard": "Times New Roman",
        "fixed": "Consolas",
        "serif": "Times New Roman",
        "sansSerif": "Arial",
        "cursive": "Comic Sans MS",
        "fantasy": "Impact"
      },
      "forScripts": [{
        "script": "cyrl",
        "fontFamilies": {
          "standard": "Times New Roman",
          "fixed": "Courier New",
          "serif": "Times New Roman",
          "sansSerif": "Arial"
        }
      }, {
        "script": "arab",
        "fontFamilies": {
          "fixed": "Courier New",
          "sansSerif": "Segoe UI"
        }
      }, {
        "script": "grek",
        "fontFamilies": {
          "standard": "Times New Roman",
          "fixed": "Courier New",
          "serif": "Times New Roman",
          "sansSerif": "Arial"
        }
      }, {
        "script": "jpan",
        "fontFamilies": {
          "standard": ",Meiryo,Yu Gothic",
          "fixed": "MS Gothic",
          "serif": ",Yu Mincho,MS PMincho",
          "sansSerif": ",Meiryo,Yu Gothic"
        }
      }, {
        "script": "hang",
        "fontFamilies": {
          "standard": "Malgun Gothic",
          "fixed": "Gulimche",
          "serif": "Batang",
          "sansSerif": "Malgun Gothic",
          "cursive": "Gungsuh"
        }
      }, {
        "script": "hans",
        "fontFamilies": {
          "standard": "Microsoft YaHei",
          "fixed": "NSimsun",
          "serif": "Simsun",
          "sansSerif": "Microsoft YaHei",
          "cursive": "KaiTi"
        }
      }, {
        "script": "hant",
        "fontFamilies": {
          "standard": "Microsoft JhengHei",
          "fixed": "MingLiU",
          "serif": "PMingLiU",
          "sansSerif": "Microsoft JhengHei",
          "cursive": "DFKai-SB"
        }
      }]
    }
  };
  return defaultFontFamilies;
}
var videoRecorder = {};
var hasRequiredVideoRecorder;
function requireVideoRecorder() {
  if (hasRequiredVideoRecorder) return videoRecorder;
  hasRequiredVideoRecorder = 1;
  Object.defineProperty(videoRecorder, "__esModule", {
    value: true
  });
  videoRecorder.VideoRecorder = void 0;
  var _utils = requireUtils();
  var _instrumentation = requireInstrumentation();
  var _page = requirePage$1();
  var _processLauncher = requireProcessLauncher();
  var _progress = requireProgress();
  const fps = 25;
  class VideoRecorder {
    static async launch(page2, ffmpegPath, options) {
      if (!options.outputFile.endsWith(".webm")) throw new Error("File must have .webm extension");
      const controller = new _progress.ProgressController((0, _instrumentation.serverSideCallMetadata)(), page2);
      controller.setLogName("browser");
      return await controller.run(async (progress2) => {
        const recorder2 = new VideoRecorder(page2, ffmpegPath, progress2);
        await recorder2._launch(options);
        return recorder2;
      });
    }
    constructor(page2, ffmpegPath, progress2) {
      this._process = null;
      this._gracefullyClose = null;
      this._lastWritePromise = Promise.resolve();
      this._lastFrameTimestamp = 0;
      this._lastFrameBuffer = null;
      this._lastWriteTimestamp = 0;
      this._progress = void 0;
      this._frameQueue = [];
      this._isStopped = false;
      this._ffmpegPath = void 0;
      this._progress = progress2;
      this._ffmpegPath = ffmpegPath;
      page2.on(_page.Page.Events.ScreencastFrame, (frame2) => this.writeFrame(frame2.buffer, frame2.frameSwapWallTime / 1e3));
    }
    async _launch(options) {
      const w2 = options.width;
      const h2 = options.height;
      const args = `-loglevel error -f image2pipe -avioflags direct -fpsprobesize 0 -probesize 32 -analyzeduration 0 -c:v mjpeg -i pipe:0 -y -an -r ${fps} -c:v vp8 -qmin 0 -qmax 50 -crf 8 -deadline realtime -speed 8 -b:v 1M -threads 1 -vf pad=${w2}:${h2}:0:0:gray,crop=${w2}:${h2}:0:0`.split(" ");
      args.push(options.outputFile);
      const progress2 = this._progress;
      const {
        launchedProcess,
        gracefullyClose
      } = await (0, _processLauncher.launchProcess)({
        command: this._ffmpegPath,
        args,
        stdio: "stdin",
        log: (message) => progress2.log(message),
        tempDirectories: [],
        attemptToGracefullyClose: async () => {
          progress2.log("Closing stdin...");
          launchedProcess.stdin.end();
        },
        onExit: (exitCode, signal) => {
          progress2.log(`ffmpeg onkill exitCode=${exitCode} signal=${signal}`);
        }
      });
      launchedProcess.stdin.on("finish", () => {
        progress2.log("ffmpeg finished input.");
      });
      launchedProcess.stdin.on("error", () => {
        progress2.log("ffmpeg error.");
      });
      this._process = launchedProcess;
      this._gracefullyClose = gracefullyClose;
    }
    writeFrame(frame2, timestamp) {
      (0, _utils.assert)(this._process);
      if (this._isStopped) return;
      if (this._lastFrameBuffer) {
        const durationSec = timestamp - this._lastFrameTimestamp;
        const repeatCount = Math.max(1, Math.round(fps * durationSec));
        for (let i = 0; i < repeatCount; ++i) this._frameQueue.push(this._lastFrameBuffer);
        this._lastWritePromise = this._lastWritePromise.then(() => this._sendFrames());
      }
      this._lastFrameBuffer = frame2;
      this._lastFrameTimestamp = timestamp;
      this._lastWriteTimestamp = (0, _utils.monotonicTime)();
    }
    async _sendFrames() {
      while (this._frameQueue.length) await this._sendFrame(this._frameQueue.shift());
    }
    async _sendFrame(frame2) {
      return new Promise((f2) => this._process.stdin.write(frame2, f2)).then((error) => {
        if (error) this._progress.log(`ffmpeg failed to write: ${String(error)}`);
      });
    }
    async stop() {
      if (this._isStopped) return;
      this.writeFrame(Buffer.from([]), this._lastFrameTimestamp + ((0, _utils.monotonicTime)() - this._lastWriteTimestamp) / 1e3);
      this._isStopped = true;
      await this._lastWritePromise;
      await this._gracefullyClose();
    }
  }
  videoRecorder.VideoRecorder = VideoRecorder;
  return videoRecorder;
}
var hasRequiredCrPage;
function requireCrPage() {
  if (hasRequiredCrPage) return crPage;
  hasRequiredCrPage = 1;
  Object.defineProperty(crPage, "__esModule", {
    value: true
  });
  crPage.CRPage = void 0;
  var _path2 = _interopRequireDefault(require$$1$1);
  var _assert = requireAssert$1();
  var _crypto = requireCrypto();
  var _eventsHelper = requireEventsHelper();
  var _stackTrace = requireStackTrace();
  var dialog2 = _interopRequireWildcard(requireDialog$1());
  var dom2 = _interopRequireWildcard(requireDom());
  var frames2 = _interopRequireWildcard(requireFrames());
  var _helper = requireHelper();
  var network2 = _interopRequireWildcard(requireNetwork$1());
  var _page = requirePage$1();
  var _registry = requireRegistry();
  var _crAccessibility = requireCrAccessibility();
  var _crBrowser = requireCrBrowser();
  var _crCoverage = requireCrCoverage();
  var _crDragDrop = requireCrDragDrop();
  var _crExecutionContext = requireCrExecutionContext();
  var _crInput = requireCrInput();
  var _crNetworkManager = requireCrNetworkManager();
  var _crPdf = requireCrPdf();
  var _crProtocolHelper = requireCrProtocolHelper();
  var _defaultFontFamilies = requireDefaultFontFamilies();
  var _videoRecorder = requireVideoRecorder();
  var _browserContext = requireBrowserContext$1();
  var _errors = requireErrors$1();
  var _protocolError = requireProtocolError();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  const UTILITY_WORLD_NAME = "__playwright_utility_world__";
  class CRPage {
    static mainFrameSession(page2) {
      const crPage2 = page2._delegate;
      return crPage2._mainFrameSession;
    }
    constructor(client, targetId, browserContext2, opener, bits) {
      this._mainFrameSession = void 0;
      this._sessions = /* @__PURE__ */ new Map();
      this._page = void 0;
      this.rawMouse = void 0;
      this.rawKeyboard = void 0;
      this.rawTouchscreen = void 0;
      this._targetId = void 0;
      this._opener = void 0;
      this._networkManager = void 0;
      this._pdf = void 0;
      this._coverage = void 0;
      this._browserContext = void 0;
      this._isBackgroundPage = void 0;
      this._nextWindowOpenPopupFeatures = [];
      this._targetId = targetId;
      this._opener = opener;
      this._isBackgroundPage = bits.isBackgroundPage;
      const dragManager = new _crDragDrop.DragManager(this);
      this.rawKeyboard = new _crInput.RawKeyboardImpl(client, browserContext2._browser._platform() === "mac", dragManager);
      this.rawMouse = new _crInput.RawMouseImpl(this, client, dragManager);
      this.rawTouchscreen = new _crInput.RawTouchscreenImpl(client);
      this._pdf = new _crPdf.CRPDF(client);
      this._coverage = new _crCoverage.CRCoverage(client);
      this._browserContext = browserContext2;
      this._page = new _page.Page(this, browserContext2);
      this._networkManager = new _crNetworkManager.CRNetworkManager(this._page, null);
      this.updateOffline();
      this.updateExtraHTTPHeaders();
      this.updateHttpCredentials();
      this.updateRequestInterception();
      this._mainFrameSession = new FrameSession(this, client, targetId, null);
      this._sessions.set(targetId, this._mainFrameSession);
      if (opener && !browserContext2._options.noDefaultViewport) {
        const features = opener._nextWindowOpenPopupFeatures.shift() || [];
        const viewportSize = _helper.helper.getViewportSizeFromWindowFeatures(features);
        if (viewportSize) this._page._emulatedSize = {
          viewport: viewportSize,
          screen: viewportSize
        };
      }
      const createdEvent = this._isBackgroundPage ? _crBrowser.CRBrowserContext.CREvents.BackgroundPage : _browserContext.BrowserContext.Events.Page;
      this._mainFrameSession._initialize(bits.hasUIWindow).then(() => {
        var _this$_opener;
        return this._page.reportAsNew((_this$_opener = this._opener) === null || _this$_opener === void 0 ? void 0 : _this$_opener._page, void 0, createdEvent);
      }, (error) => {
        var _this$_opener2;
        return this._page.reportAsNew((_this$_opener2 = this._opener) === null || _this$_opener2 === void 0 ? void 0 : _this$_opener2._page, error, createdEvent);
      });
    }
    async _forAllFrameSessions(cb) {
      const frameSessions = Array.from(this._sessions.values());
      await Promise.all(frameSessions.map((frameSession) => {
        if (frameSession._isMainFrame()) return cb(frameSession);
        return cb(frameSession).catch((e2) => {
          if ((0, _protocolError.isSessionClosedError)(e2)) return;
          throw e2;
        });
      }));
    }
    _sessionForFrame(frame2) {
      while (!this._sessions.has(frame2._id)) {
        const parent = frame2.parentFrame();
        if (!parent) throw new Error(`Frame has been detached.`);
        frame2 = parent;
      }
      return this._sessions.get(frame2._id);
    }
    _sessionForHandle(handle) {
      const frame2 = handle._context.frame;
      return this._sessionForFrame(frame2);
    }
    willBeginDownload() {
      this._mainFrameSession._willBeginDownload();
    }
    didClose() {
      for (const session of this._sessions.values()) session.dispose();
      this._page._didClose();
    }
    async navigateFrame(frame2, url, referrer) {
      return this._sessionForFrame(frame2)._navigate(frame2, url, referrer);
    }
    async updateExtraHTTPHeaders() {
      const headers2 = network2.mergeHeaders([this._browserContext._options.extraHTTPHeaders, this._page.extraHTTPHeaders()]);
      await this._networkManager.setExtraHTTPHeaders(headers2);
    }
    async updateGeolocation() {
      await this._forAllFrameSessions((frame2) => frame2._updateGeolocation(false));
    }
    async updateOffline() {
      await this._networkManager.setOffline(!!this._browserContext._options.offline);
    }
    async updateHttpCredentials() {
      await this._networkManager.authenticate(this._browserContext._options.httpCredentials || null);
    }
    async updateEmulatedViewportSize(preserveWindowBoundaries) {
      await this._mainFrameSession._updateViewport(preserveWindowBoundaries);
    }
    async bringToFront() {
      await this._mainFrameSession._client.send("Page.bringToFront");
    }
    async updateEmulateMedia() {
      await this._forAllFrameSessions((frame2) => frame2._updateEmulateMedia());
    }
    async updateUserAgent() {
      await this._forAllFrameSessions((frame2) => frame2._updateUserAgent());
    }
    async updateRequestInterception() {
      await this._networkManager.setRequestInterception(this._page.needsRequestInterception());
    }
    async updateFileChooserInterception() {
      await this._forAllFrameSessions((frame2) => frame2._updateFileChooserInterception(false));
    }
    async reload() {
      await this._mainFrameSession._client.send("Page.reload");
    }
    async _go(delta) {
      const history = await this._mainFrameSession._client.send("Page.getNavigationHistory");
      const entry = history.entries[history.currentIndex + delta];
      if (!entry) return false;
      await this._mainFrameSession._client.send("Page.navigateToHistoryEntry", {
        entryId: entry.id
      });
      return true;
    }
    goBack() {
      return this._go(-1);
    }
    goForward() {
      return this._go(1);
    }
    async requestGC() {
      await this._mainFrameSession._client.send("HeapProfiler.collectGarbage");
    }
    async addInitScript(initScript, world = "main") {
      await this._forAllFrameSessions((frame2) => frame2._evaluateOnNewDocument(initScript, world));
    }
    async removeNonInternalInitScripts() {
      await this._forAllFrameSessions((frame2) => frame2._removeEvaluatesOnNewDocument());
    }
    async closePage(runBeforeUnload) {
      if (runBeforeUnload) await this._mainFrameSession._client.send("Page.close");
      else await this._browserContext._browser._closePage(this);
    }
    async setBackgroundColor(color) {
      await this._mainFrameSession._client.send("Emulation.setDefaultBackgroundColorOverride", {
        color
      });
    }
    async takeScreenshot(progress2, format2, documentRect, viewportRect, quality, fitsViewport, scale) {
      const {
        visualViewport
      } = await this._mainFrameSession._client.send("Page.getLayoutMetrics");
      if (!documentRect) {
        documentRect = {
          x: visualViewport.pageX + viewportRect.x,
          y: visualViewport.pageY + viewportRect.y,
          ..._helper.helper.enclosingIntSize({
            width: viewportRect.width / visualViewport.scale,
            height: viewportRect.height / visualViewport.scale
          })
        };
      }
      const clip = {
        ...documentRect,
        scale: viewportRect ? visualViewport.scale : 1
      };
      if (scale === "css") {
        const deviceScaleFactor = this._browserContext._options.deviceScaleFactor || 1;
        clip.scale /= deviceScaleFactor;
      }
      progress2.throwIfAborted();
      const result = await this._mainFrameSession._client.send("Page.captureScreenshot", {
        format: format2,
        quality,
        clip,
        captureBeyondViewport: !fitsViewport
      });
      return Buffer.from(result.data, "base64");
    }
    async getContentFrame(handle) {
      return this._sessionForHandle(handle)._getContentFrame(handle);
    }
    async getOwnerFrame(handle) {
      return this._sessionForHandle(handle)._getOwnerFrame(handle);
    }
    async getBoundingBox(handle) {
      return this._sessionForHandle(handle)._getBoundingBox(handle);
    }
    async scrollRectIntoViewIfNeeded(handle, rect) {
      return this._sessionForHandle(handle)._scrollRectIntoViewIfNeeded(handle, rect);
    }
    async setScreencastOptions(options) {
      if (options) {
        await this._mainFrameSession._startScreencast(this, {
          format: "jpeg",
          quality: options.quality,
          maxWidth: options.width,
          maxHeight: options.height
        });
      } else {
        await this._mainFrameSession._stopScreencast(this);
      }
    }
    rafCountForStablePosition() {
      return 1;
    }
    async getContentQuads(handle) {
      return this._sessionForHandle(handle)._getContentQuads(handle);
    }
    async setInputFilePaths(handle, files) {
      const frame2 = await handle.ownerFrame();
      if (!frame2) throw new Error("Cannot set input files to detached input element");
      const parentSession = this._sessionForFrame(frame2);
      await parentSession._client.send("DOM.setFileInputFiles", {
        objectId: handle._objectId,
        files
      });
    }
    async adoptElementHandle(handle, to) {
      return this._sessionForHandle(handle)._adoptElementHandle(handle, to);
    }
    async getAccessibilityTree(needle) {
      return (0, _crAccessibility.getAccessibilityTree)(this._mainFrameSession._client, needle);
    }
    async inputActionEpilogue() {
      await this._mainFrameSession._client.send("Page.enable").catch((e2) => {
      });
    }
    async resetForReuse() {
      await this.rawMouse.move(-1, -1, "none", /* @__PURE__ */ new Set(), /* @__PURE__ */ new Set(), true);
    }
    async pdf(options) {
      return this._pdf.generate(options);
    }
    coverage() {
      return this._coverage;
    }
    async getFrameElement(frame2) {
      let parent = frame2.parentFrame();
      if (!parent) throw new Error("Frame has been detached.");
      const parentSession = this._sessionForFrame(parent);
      const {
        backendNodeId
      } = await parentSession._client.send("DOM.getFrameOwner", {
        frameId: frame2._id
      }).catch((e2) => {
        if (e2 instanceof Error && e2.message.includes("Frame with the given id was not found.")) (0, _stackTrace.rewriteErrorMessage)(e2, "Frame has been detached.");
        throw e2;
      });
      parent = frame2.parentFrame();
      if (!parent) throw new Error("Frame has been detached.");
      return parentSession._adoptBackendNodeId(backendNodeId, await parent._mainContext());
    }
    shouldToggleStyleSheetToSyncAnimations() {
      return false;
    }
  }
  crPage.CRPage = CRPage;
  class FrameSession {
    constructor(crPage2, client, targetId, parentSession) {
      this._client = void 0;
      this._crPage = void 0;
      this._page = void 0;
      this._parentSession = void 0;
      this._childSessions = /* @__PURE__ */ new Set();
      this._contextIdToContext = /* @__PURE__ */ new Map();
      this._eventListeners = [];
      this._targetId = void 0;
      this._firstNonInitialNavigationCommittedPromise = void 0;
      this._firstNonInitialNavigationCommittedFulfill = () => {
      };
      this._firstNonInitialNavigationCommittedReject = (e2) => {
      };
      this._windowId = void 0;
      this._swappedIn = false;
      this._videoRecorder = null;
      this._screencastId = null;
      this._screencastClients = /* @__PURE__ */ new Set();
      this._evaluateOnNewDocumentIdentifiers = [];
      this._metricsOverride = void 0;
      this._workerSessions = /* @__PURE__ */ new Map();
      this._client = client;
      this._crPage = crPage2;
      this._page = crPage2._page;
      this._targetId = targetId;
      this._parentSession = parentSession;
      if (parentSession) parentSession._childSessions.add(this);
      this._firstNonInitialNavigationCommittedPromise = new Promise((f2, r2) => {
        this._firstNonInitialNavigationCommittedFulfill = f2;
        this._firstNonInitialNavigationCommittedReject = r2;
      });
      this._firstNonInitialNavigationCommittedPromise.catch(() => {
      });
    }
    _isMainFrame() {
      return this._targetId === this._crPage._targetId;
    }
    _addRendererListeners() {
      this._eventListeners.push(...[_eventsHelper.eventsHelper.addEventListener(this._client, "Log.entryAdded", (event) => this._onLogEntryAdded(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.fileChooserOpened", (event) => this._onFileChooserOpened(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.frameAttached", (event) => this._onFrameAttached(event.frameId, event.parentFrameId)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.frameDetached", (event) => this._onFrameDetached(event.frameId, event.reason)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.frameNavigated", (event) => this._onFrameNavigated(event.frame, false)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.frameRequestedNavigation", (event) => this._onFrameRequestedNavigation(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.javascriptDialogOpening", (event) => this._onDialog(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.navigatedWithinDocument", (event) => this._onFrameNavigatedWithinDocument(event.frameId, event.url)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.bindingCalled", (event) => this._onBindingCalled(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.consoleAPICalled", (event) => this._onConsoleAPI(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.exceptionThrown", (exception) => this._handleException(exception.exceptionDetails)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.executionContextCreated", (event) => this._onExecutionContextCreated(event.context)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.executionContextDestroyed", (event) => this._onExecutionContextDestroyed(event.executionContextId)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.executionContextsCleared", (event) => this._onExecutionContextsCleared()), _eventsHelper.eventsHelper.addEventListener(this._client, "Target.attachedToTarget", (event) => this._onAttachedToTarget(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Target.detachedFromTarget", (event) => this._onDetachedFromTarget(event))]);
    }
    _addBrowserListeners() {
      this._eventListeners.push(...[_eventsHelper.eventsHelper.addEventListener(this._client, "Inspector.targetCrashed", (event) => this._onTargetCrashed()), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.screencastFrame", (event) => this._onScreencastFrame(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.windowOpen", (event) => this._onWindowOpen(event))]);
    }
    async _initialize(hasUIWindow) {
      const isSettingStorageState = this._page._browserContext.isSettingStorageState();
      if (!isSettingStorageState && hasUIWindow && !this._crPage._browserContext._browser.isClank() && !this._crPage._browserContext._options.noDefaultViewport) {
        const {
          windowId
        } = await this._client.send("Browser.getWindowForTarget");
        this._windowId = windowId;
      }
      let screencastOptions;
      if (!isSettingStorageState && this._isMainFrame() && this._crPage._browserContext._options.recordVideo && hasUIWindow) {
        const screencastId = (0, _crypto.createGuid)();
        const outputFile = _path2.default.join(this._crPage._browserContext._options.recordVideo.dir, screencastId + ".webm");
        screencastOptions = {
          // validateBrowserContextOptions ensures correct video size.
          ...this._crPage._browserContext._options.recordVideo.size,
          outputFile
        };
        await this._crPage._browserContext._ensureVideosPath();
        await this._createVideoRecorder(screencastId, screencastOptions);
        this._crPage._page.waitForInitializedOrError().then((p) => {
          if (p instanceof Error) this._stopVideoRecording().catch(() => {
          });
        });
      }
      let lifecycleEventsEnabled;
      if (!this._isMainFrame()) this._addRendererListeners();
      this._addBrowserListeners();
      const promises = [this._client.send("Page.enable"), this._client.send("Page.getFrameTree").then(({
        frameTree
      }) => {
        if (this._isMainFrame()) {
          this._handleFrameTree(frameTree);
          this._addRendererListeners();
        }
        const localFrames = this._isMainFrame() ? this._page.frames() : [this._page._frameManager.frame(this._targetId)];
        for (const frame2 of localFrames) {
          this._client._sendMayFail("Page.createIsolatedWorld", {
            frameId: frame2._id,
            grantUniveralAccess: true,
            worldName: UTILITY_WORLD_NAME
          });
          for (const initScript of this._crPage._page.allInitScripts()) frame2.evaluateExpression(initScript.source).catch((e2) => {
          });
        }
        const isInitialEmptyPage = this._isMainFrame() && this._page.mainFrame().url() === ":";
        if (isInitialEmptyPage) {
          lifecycleEventsEnabled.catch((e2) => {
          }).then(() => {
            this._eventListeners.push(_eventsHelper.eventsHelper.addEventListener(this._client, "Page.lifecycleEvent", (event) => this._onLifecycleEvent(event)));
          });
        } else {
          this._firstNonInitialNavigationCommittedFulfill();
          this._eventListeners.push(_eventsHelper.eventsHelper.addEventListener(this._client, "Page.lifecycleEvent", (event) => this._onLifecycleEvent(event)));
        }
      }), this._client.send("Log.enable", {}), lifecycleEventsEnabled = this._client.send("Page.setLifecycleEventsEnabled", {
        enabled: true
      }), this._client.send("Runtime.enable", {}), this._client.send("Runtime.addBinding", {
        name: _page.PageBinding.kPlaywrightBinding
      }), this._client.send("Page.addScriptToEvaluateOnNewDocument", {
        source: "",
        worldName: UTILITY_WORLD_NAME
      }), this._crPage._networkManager.addSession(this._client, void 0, this._isMainFrame()), this._client.send("Target.setAutoAttach", {
        autoAttach: true,
        waitForDebuggerOnStart: true,
        flatten: true
      })];
      if (!isSettingStorageState) {
        if (this._isMainFrame()) promises.push(this._client.send("Emulation.setFocusEmulationEnabled", {
          enabled: true
        }));
        const options = this._crPage._browserContext._options;
        if (options.bypassCSP) promises.push(this._client.send("Page.setBypassCSP", {
          enabled: true
        }));
        if (options.ignoreHTTPSErrors || options.internalIgnoreHTTPSErrors) promises.push(this._client.send("Security.setIgnoreCertificateErrors", {
          ignore: true
        }));
        if (this._isMainFrame()) promises.push(this._updateViewport());
        if (options.hasTouch) promises.push(this._client.send("Emulation.setTouchEmulationEnabled", {
          enabled: true
        }));
        if (options.javaScriptEnabled === false) promises.push(this._client.send("Emulation.setScriptExecutionDisabled", {
          value: true
        }));
        if (options.userAgent || options.locale) promises.push(this._updateUserAgent());
        if (options.locale) promises.push(emulateLocale(this._client, options.locale));
        if (options.timezoneId) promises.push(emulateTimezone(this._client, options.timezoneId));
        if (!this._crPage._browserContext._browser.options.headful) promises.push(this._setDefaultFontFamilies(this._client));
        promises.push(this._updateGeolocation(true));
        promises.push(this._updateEmulateMedia());
        promises.push(this._updateFileChooserInterception(true));
        for (const initScript of this._crPage._page.allInitScripts()) promises.push(this._evaluateOnNewDocument(initScript, "main"));
        if (screencastOptions) promises.push(this._startVideoRecording(screencastOptions));
      }
      promises.push(this._client.send("Runtime.runIfWaitingForDebugger"));
      promises.push(this._firstNonInitialNavigationCommittedPromise);
      await Promise.all(promises);
    }
    dispose() {
      this._firstNonInitialNavigationCommittedReject(new _errors.TargetClosedError());
      for (const childSession of this._childSessions) childSession.dispose();
      if (this._parentSession) this._parentSession._childSessions.delete(this);
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      this._crPage._networkManager.removeSession(this._client);
      this._crPage._sessions.delete(this._targetId);
      this._client.dispose();
    }
    async _navigate(frame2, url, referrer) {
      const response = await this._client.send("Page.navigate", {
        url,
        referrer,
        frameId: frame2._id,
        referrerPolicy: "unsafeUrl"
      });
      if (response.errorText) throw new frames2.NavigationAbortedError(response.loaderId, `${response.errorText} at ${url}`);
      return {
        newDocumentId: response.loaderId
      };
    }
    _onLifecycleEvent(event) {
      if (this._eventBelongsToStaleFrame(event.frameId)) return;
      if (event.name === "load") this._page._frameManager.frameLifecycleEvent(event.frameId, "load");
      else if (event.name === "DOMContentLoaded") this._page._frameManager.frameLifecycleEvent(event.frameId, "domcontentloaded");
    }
    _handleFrameTree(frameTree) {
      this._onFrameAttached(frameTree.frame.id, frameTree.frame.parentId || null);
      this._onFrameNavigated(frameTree.frame, true);
      if (!frameTree.childFrames) return;
      for (const child of frameTree.childFrames) this._handleFrameTree(child);
    }
    _eventBelongsToStaleFrame(frameId) {
      const frame2 = this._page._frameManager.frame(frameId);
      if (!frame2) return true;
      const session = this._crPage._sessionForFrame(frame2);
      return session && session !== this && !session._swappedIn;
    }
    _onFrameAttached(frameId, parentFrameId) {
      const frameSession = this._crPage._sessions.get(frameId);
      if (frameSession && frameId !== this._targetId) {
        frameSession._swappedIn = true;
        const frame2 = this._page._frameManager.frame(frameId);
        if (frame2) this._page._frameManager.removeChildFramesRecursively(frame2);
        return;
      }
      if (parentFrameId && !this._page._frameManager.frame(parentFrameId)) {
        return;
      }
      this._page._frameManager.frameAttached(frameId, parentFrameId);
    }
    _onFrameNavigated(framePayload, initial) {
      if (this._eventBelongsToStaleFrame(framePayload.id)) return;
      this._page._frameManager.frameCommittedNewDocumentNavigation(framePayload.id, framePayload.url + (framePayload.urlFragment || ""), framePayload.name || "", framePayload.loaderId, initial);
      if (!initial) this._firstNonInitialNavigationCommittedFulfill();
    }
    _onFrameRequestedNavigation(payload) {
      if (this._eventBelongsToStaleFrame(payload.frameId)) return;
      if (payload.disposition === "currentTab") this._page._frameManager.frameRequestedNavigation(payload.frameId);
    }
    _onFrameNavigatedWithinDocument(frameId, url) {
      if (this._eventBelongsToStaleFrame(frameId)) return;
      this._page._frameManager.frameCommittedSameDocumentNavigation(frameId, url);
    }
    _onFrameDetached(frameId, reason) {
      if (this._crPage._sessions.has(frameId)) {
        return;
      }
      if (reason === "swap") {
        const frame2 = this._page._frameManager.frame(frameId);
        if (frame2) this._page._frameManager.removeChildFramesRecursively(frame2);
        return;
      }
      this._page._frameManager.frameDetached(frameId);
    }
    _onExecutionContextCreated(contextPayload) {
      const frame2 = contextPayload.auxData ? this._page._frameManager.frame(contextPayload.auxData.frameId) : null;
      if (!frame2 || this._eventBelongsToStaleFrame(frame2._id)) return;
      const delegate = new _crExecutionContext.CRExecutionContext(this._client, contextPayload);
      let worldName = null;
      if (contextPayload.auxData && !!contextPayload.auxData.isDefault) worldName = "main";
      else if (contextPayload.name === UTILITY_WORLD_NAME) worldName = "utility";
      const context = new dom2.FrameExecutionContext(delegate, frame2, worldName);
      if (worldName) frame2._contextCreated(worldName, context);
      this._contextIdToContext.set(contextPayload.id, context);
    }
    _onExecutionContextDestroyed(executionContextId) {
      const context = this._contextIdToContext.get(executionContextId);
      if (!context) return;
      this._contextIdToContext.delete(executionContextId);
      context.frame._contextDestroyed(context);
    }
    _onExecutionContextsCleared() {
      for (const contextId of Array.from(this._contextIdToContext.keys())) this._onExecutionContextDestroyed(contextId);
    }
    _onAttachedToTarget(event) {
      var _this$_page$_frameMan;
      const session = this._client.createChildSession(event.sessionId);
      if (event.targetInfo.type === "iframe") {
        const targetId = event.targetInfo.targetId;
        const frame2 = this._page._frameManager.frame(targetId);
        if (!frame2) return;
        this._page._frameManager.removeChildFramesRecursively(frame2);
        for (const [contextId, context] of this._contextIdToContext) {
          if (context.frame === frame2) this._onExecutionContextDestroyed(contextId);
        }
        const frameSession = new FrameSession(this._crPage, session, targetId, this);
        this._crPage._sessions.set(targetId, frameSession);
        frameSession._initialize(false).catch((e2) => e2);
        return;
      }
      if (event.targetInfo.type !== "worker") {
        session.detach().catch(() => {
        });
        return;
      }
      const url = event.targetInfo.url;
      const worker2 = new _page.Worker(this._page, url);
      this._page._addWorker(event.sessionId, worker2);
      this._workerSessions.set(event.sessionId, session);
      session.once("Runtime.executionContextCreated", async (event2) => {
        worker2._createExecutionContext(new _crExecutionContext.CRExecutionContext(session, event2.context));
      });
      session._sendMayFail("Runtime.enable");
      this._crPage._networkManager.addSession(session, (_this$_page$_frameMan = this._page._frameManager.frame(this._targetId)) !== null && _this$_page$_frameMan !== void 0 ? _this$_page$_frameMan : void 0).catch(() => {
      });
      session._sendMayFail("Runtime.runIfWaitingForDebugger");
      session._sendMayFail("Target.setAutoAttach", {
        autoAttach: true,
        waitForDebuggerOnStart: true,
        flatten: true
      });
      session.on("Target.attachedToTarget", (event2) => this._onAttachedToTarget(event2));
      session.on("Target.detachedFromTarget", (event2) => this._onDetachedFromTarget(event2));
      session.on("Runtime.consoleAPICalled", (event2) => {
        const args = event2.args.map((o2) => (0, _crExecutionContext.createHandle)(worker2._existingExecutionContext, o2));
        this._page._addConsoleMessage(event2.type, args, (0, _crProtocolHelper.toConsoleMessageLocation)(event2.stackTrace));
      });
      session.on("Runtime.exceptionThrown", (exception) => this._page.emitOnContextOnceInitialized(_browserContext.BrowserContext.Events.PageError, (0, _crProtocolHelper.exceptionToError)(exception.exceptionDetails), this._page));
    }
    _onDetachedFromTarget(event) {
      const workerSession = this._workerSessions.get(event.sessionId);
      if (workerSession) {
        workerSession.dispose();
        this._page._removeWorker(event.sessionId);
        return;
      }
      const childFrameSession = this._crPage._sessions.get(event.targetId);
      if (!childFrameSession) return;
      if (childFrameSession._swappedIn) {
        childFrameSession.dispose();
        return;
      }
      this._client.send("Page.enable").catch((e2) => null).then(() => {
        if (!childFrameSession._swappedIn) this._page._frameManager.frameDetached(event.targetId);
        childFrameSession.dispose();
      });
    }
    _onWindowOpen(event) {
      this._crPage._nextWindowOpenPopupFeatures.push(event.windowFeatures);
    }
    async _onConsoleAPI(event) {
      if (event.executionContextId === 0) {
        return;
      }
      const context = this._contextIdToContext.get(event.executionContextId);
      if (!context) return;
      const values = event.args.map((arg) => (0, _crExecutionContext.createHandle)(context, arg));
      this._page._addConsoleMessage(event.type, values, (0, _crProtocolHelper.toConsoleMessageLocation)(event.stackTrace));
    }
    async _onBindingCalled(event) {
      const pageOrError = await this._crPage._page.waitForInitializedOrError();
      if (!(pageOrError instanceof Error)) {
        const context = this._contextIdToContext.get(event.executionContextId);
        if (context) await this._page._onBindingCalled(event.payload, context);
      }
    }
    _onDialog(event) {
      if (!this._page._frameManager.frame(this._targetId)) return;
      this._page.emitOnContext(_browserContext.BrowserContext.Events.Dialog, new dialog2.Dialog(this._page, event.type, event.message, async (accept, promptText) => {
        if (this._isMainFrame() && event.type === "beforeunload" && !accept) this._page._frameManager.frameAbortedNavigation(this._page.mainFrame()._id, "navigation cancelled by beforeunload dialog");
        await this._client.send("Page.handleJavaScriptDialog", {
          accept,
          promptText
        });
      }, event.defaultPrompt));
    }
    _handleException(exceptionDetails) {
      this._page.emitOnContextOnceInitialized(_browserContext.BrowserContext.Events.PageError, (0, _crProtocolHelper.exceptionToError)(exceptionDetails), this._page);
    }
    async _onTargetCrashed() {
      this._client._markAsCrashed();
      this._page._didCrash();
    }
    _onLogEntryAdded(event) {
      const {
        level,
        text,
        args,
        source,
        url,
        lineNumber
      } = event.entry;
      if (args) args.map((arg) => (0, _crProtocolHelper.releaseObject)(this._client, arg.objectId));
      if (source !== "worker") {
        const location2 = {
          url: url || "",
          lineNumber: lineNumber || 0,
          columnNumber: 0
        };
        this._page._addConsoleMessage(level, [], location2, text);
      }
    }
    async _onFileChooserOpened(event) {
      if (!event.backendNodeId) return;
      const frame2 = this._page._frameManager.frame(event.frameId);
      if (!frame2) return;
      let handle;
      try {
        const utilityContext = await frame2._utilityContext();
        handle = await this._adoptBackendNodeId(event.backendNodeId, utilityContext);
      } catch (e2) {
        return;
      }
      await this._page._onFileChooserOpened(handle);
    }
    _willBeginDownload() {
      if (!this._crPage._page.initializedOrUndefined()) {
        this._firstNonInitialNavigationCommittedReject(new Error("Starting new page download"));
      }
    }
    _onScreencastFrame(payload) {
      this._page.throttleScreencastFrameAck(() => {
        this._client.send("Page.screencastFrameAck", {
          sessionId: payload.sessionId
        }).catch(() => {
        });
      });
      const buffer2 = Buffer.from(payload.data, "base64");
      this._page.emit(_page.Page.Events.ScreencastFrame, {
        buffer: buffer2,
        frameSwapWallTime: payload.metadata.timestamp ? payload.metadata.timestamp * 1e3 : void 0,
        width: payload.metadata.deviceWidth,
        height: payload.metadata.deviceHeight
      });
    }
    async _createVideoRecorder(screencastId, options) {
      (0, _assert.assert)(!this._screencastId);
      const ffmpegPath = _registry.registry.findExecutable("ffmpeg").executablePathOrDie(this._page.attribution.playwright.options.sdkLanguage);
      this._videoRecorder = await _videoRecorder.VideoRecorder.launch(this._crPage._page, ffmpegPath, options);
      this._screencastId = screencastId;
    }
    async _startVideoRecording(options) {
      const screencastId = this._screencastId;
      (0, _assert.assert)(screencastId);
      this._page.once(_page.Page.Events.Close, () => this._stopVideoRecording().catch(() => {
      }));
      const gotFirstFrame = new Promise((f2) => this._client.once("Page.screencastFrame", f2));
      await this._startScreencast(this._videoRecorder, {
        format: "jpeg",
        quality: 90,
        maxWidth: options.width,
        maxHeight: options.height
      });
      gotFirstFrame.then(() => {
        this._crPage._browserContext._browser._videoStarted(this._crPage._browserContext, screencastId, options.outputFile, this._crPage._page.waitForInitializedOrError());
      });
    }
    async _stopVideoRecording() {
      if (!this._screencastId) return;
      const screencastId = this._screencastId;
      this._screencastId = null;
      const recorder2 = this._videoRecorder;
      this._videoRecorder = null;
      await this._stopScreencast(recorder2);
      await recorder2.stop().catch(() => {
      });
      const video2 = this._crPage._browserContext._browser._takeVideo(screencastId);
      video2 === null || video2 === void 0 || video2.reportFinished();
    }
    async _startScreencast(client, options = {}) {
      this._screencastClients.add(client);
      if (this._screencastClients.size === 1) await this._client.send("Page.startScreencast", options);
    }
    async _stopScreencast(client) {
      this._screencastClients.delete(client);
      if (!this._screencastClients.size) await this._client._sendMayFail("Page.stopScreencast");
    }
    async _updateGeolocation(initial) {
      const geolocation = this._crPage._browserContext._options.geolocation;
      if (!initial || geolocation) await this._client.send("Emulation.setGeolocationOverride", geolocation || {});
    }
    async _updateViewport(preserveWindowBoundaries) {
      if (this._crPage._browserContext._browser.isClank()) return;
      (0, _assert.assert)(this._isMainFrame());
      const options = this._crPage._browserContext._options;
      const emulatedSize = this._page.emulatedSize();
      if (emulatedSize === null) return;
      const viewportSize = emulatedSize.viewport;
      const screenSize = emulatedSize.screen;
      const isLandscape = screenSize.width > screenSize.height;
      const metricsOverride = {
        mobile: !!options.isMobile,
        width: viewportSize.width,
        height: viewportSize.height,
        screenWidth: screenSize.width,
        screenHeight: screenSize.height,
        deviceScaleFactor: options.deviceScaleFactor || 1,
        screenOrientation: !!options.isMobile ? isLandscape ? {
          angle: 90,
          type: "landscapePrimary"
        } : {
          angle: 0,
          type: "portraitPrimary"
        } : {
          angle: 0,
          type: "landscapePrimary"
        },
        dontSetVisibleSize: preserveWindowBoundaries
      };
      if (JSON.stringify(this._metricsOverride) === JSON.stringify(metricsOverride)) return;
      const promises = [this._client.send("Emulation.setDeviceMetricsOverride", metricsOverride)];
      if (!preserveWindowBoundaries && this._windowId) {
        let insets = {
          width: 0,
          height: 0
        };
        if (this._crPage._browserContext._browser.options.headful) {
          insets = {
            width: 24,
            height: 88
          };
          if (process.platform === "win32") insets = {
            width: 16,
            height: 88
          };
          else if (process.platform === "linux") insets = {
            width: 8,
            height: 85
          };
          else if (process.platform === "darwin") insets = {
            width: 2,
            height: 80
          };
          if (this._crPage._browserContext.isPersistentContext()) {
            insets.height += 46;
          }
        }
        promises.push(this.setWindowBounds({
          width: viewportSize.width + insets.width,
          height: viewportSize.height + insets.height
        }));
      }
      await Promise.all(promises);
      this._metricsOverride = metricsOverride;
    }
    async windowBounds() {
      const {
        bounds
      } = await this._client.send("Browser.getWindowBounds", {
        windowId: this._windowId
      });
      return bounds;
    }
    async setWindowBounds(bounds) {
      return await this._client.send("Browser.setWindowBounds", {
        windowId: this._windowId,
        bounds
      });
    }
    async _updateEmulateMedia() {
      const emulatedMedia = this._page.emulatedMedia();
      const media = emulatedMedia.media === "no-override" ? "" : emulatedMedia.media;
      const colorScheme = emulatedMedia.colorScheme === "no-override" ? "" : emulatedMedia.colorScheme;
      const reducedMotion = emulatedMedia.reducedMotion === "no-override" ? "" : emulatedMedia.reducedMotion;
      const forcedColors = emulatedMedia.forcedColors === "no-override" ? "" : emulatedMedia.forcedColors;
      const contrast = emulatedMedia.contrast === "no-override" ? "" : emulatedMedia.contrast;
      const features = [{
        name: "prefers-color-scheme",
        value: colorScheme
      }, {
        name: "prefers-reduced-motion",
        value: reducedMotion
      }, {
        name: "forced-colors",
        value: forcedColors
      }, {
        name: "prefers-contrast",
        value: contrast
      }];
      await this._client.send("Emulation.setEmulatedMedia", {
        media,
        features
      });
    }
    async _updateUserAgent() {
      const options = this._crPage._browserContext._options;
      await this._client.send("Emulation.setUserAgentOverride", {
        userAgent: options.userAgent || "",
        acceptLanguage: options.locale,
        userAgentMetadata: calculateUserAgentMetadata(options)
      });
    }
    async _setDefaultFontFamilies(session) {
      const fontFamilies = _defaultFontFamilies.platformToFontFamilies[this._crPage._browserContext._browser._platform()];
      await session.send("Page.setFontFamilies", fontFamilies);
    }
    async _updateFileChooserInterception(initial) {
      const enabled = this._page.fileChooserIntercepted();
      if (initial && !enabled) return;
      await this._client.send("Page.setInterceptFileChooserDialog", {
        enabled
      }).catch(() => {
      });
    }
    async _evaluateOnNewDocument(initScript, world) {
      const worldName = world === "utility" ? UTILITY_WORLD_NAME : void 0;
      const {
        identifier
      } = await this._client.send("Page.addScriptToEvaluateOnNewDocument", {
        source: initScript.source,
        worldName
      });
      if (!initScript.internal) this._evaluateOnNewDocumentIdentifiers.push(identifier);
    }
    async _removeEvaluatesOnNewDocument() {
      const identifiers = this._evaluateOnNewDocumentIdentifiers;
      this._evaluateOnNewDocumentIdentifiers = [];
      await Promise.all(identifiers.map((identifier) => this._client.send("Page.removeScriptToEvaluateOnNewDocument", {
        identifier
      })));
    }
    async _getContentFrame(handle) {
      const nodeInfo = await this._client.send("DOM.describeNode", {
        objectId: handle._objectId
      });
      if (!nodeInfo || typeof nodeInfo.node.frameId !== "string") return null;
      return this._page._frameManager.frame(nodeInfo.node.frameId);
    }
    async _getOwnerFrame(handle) {
      const documentElement = await handle.evaluateHandle((node) => {
        const doc = node;
        if (doc.documentElement && doc.documentElement.ownerDocument === doc) return doc.documentElement;
        return node.ownerDocument ? node.ownerDocument.documentElement : null;
      });
      if (!documentElement) return null;
      if (!documentElement._objectId) return null;
      const nodeInfo = await this._client.send("DOM.describeNode", {
        objectId: documentElement._objectId
      });
      const frameId = nodeInfo && typeof nodeInfo.node.frameId === "string" ? nodeInfo.node.frameId : null;
      documentElement.dispose();
      return frameId;
    }
    async _getBoundingBox(handle) {
      const result = await this._client._sendMayFail("DOM.getBoxModel", {
        objectId: handle._objectId
      });
      if (!result) return null;
      const quad = result.model.border;
      const x2 = Math.min(quad[0], quad[2], quad[4], quad[6]);
      const y2 = Math.min(quad[1], quad[3], quad[5], quad[7]);
      const width = Math.max(quad[0], quad[2], quad[4], quad[6]) - x2;
      const height = Math.max(quad[1], quad[3], quad[5], quad[7]) - y2;
      const position = await this._framePosition();
      if (!position) return null;
      return {
        x: x2 + position.x,
        y: y2 + position.y,
        width,
        height
      };
    }
    async _framePosition() {
      const frame2 = this._page._frameManager.frame(this._targetId);
      if (!frame2) return null;
      if (frame2 === this._page.mainFrame()) return {
        x: 0,
        y: 0
      };
      const element = await frame2.frameElement();
      const box = await element.boundingBox();
      return box;
    }
    async _scrollRectIntoViewIfNeeded(handle, rect) {
      return await this._client.send("DOM.scrollIntoViewIfNeeded", {
        objectId: handle._objectId,
        rect
      }).then(() => "done").catch((e2) => {
        if (e2 instanceof Error && e2.message.includes("Node does not have a layout object")) return "error:notvisible";
        if (e2 instanceof Error && e2.message.includes("Node is detached from document")) return "error:notconnected";
        throw e2;
      });
    }
    async _getContentQuads(handle) {
      const result = await this._client._sendMayFail("DOM.getContentQuads", {
        objectId: handle._objectId
      });
      if (!result) return null;
      const position = await this._framePosition();
      if (!position) return null;
      return result.quads.map((quad) => [{
        x: quad[0] + position.x,
        y: quad[1] + position.y
      }, {
        x: quad[2] + position.x,
        y: quad[3] + position.y
      }, {
        x: quad[4] + position.x,
        y: quad[5] + position.y
      }, {
        x: quad[6] + position.x,
        y: quad[7] + position.y
      }]);
    }
    async _adoptElementHandle(handle, to) {
      const nodeInfo = await this._client.send("DOM.describeNode", {
        objectId: handle._objectId
      });
      return this._adoptBackendNodeId(nodeInfo.node.backendNodeId, to);
    }
    async _adoptBackendNodeId(backendNodeId, to) {
      const result = await this._client._sendMayFail("DOM.resolveNode", {
        backendNodeId,
        executionContextId: to.delegate._contextId
      });
      if (!result || result.object.subtype === "null") throw new Error(dom2.kUnableToAdoptErrorMessage);
      return (0, _crExecutionContext.createHandle)(to, result.object).asElement();
    }
  }
  async function emulateLocale(session, locale) {
    try {
      await session.send("Emulation.setLocaleOverride", {
        locale
      });
    } catch (exception) {
      if (exception.message.includes("Another locale override is already in effect")) return;
      throw exception;
    }
  }
  async function emulateTimezone(session, timezoneId) {
    try {
      await session.send("Emulation.setTimezoneOverride", {
        timezoneId
      });
    } catch (exception) {
      if (exception.message.includes("Timezone override is already in effect")) return;
      if (exception.message.includes("Invalid timezone")) throw new Error(`Invalid timezone ID: ${timezoneId}`);
      throw exception;
    }
  }
  function calculateUserAgentMetadata(options) {
    const ua = options.userAgent;
    if (!ua) return void 0;
    const metadata = {
      mobile: !!options.isMobile,
      model: "",
      architecture: "x64",
      platform: "Windows",
      platformVersion: ""
    };
    const androidMatch = ua.match(/Android (\d+(\.\d+)?(\.\d+)?)/);
    const iPhoneMatch = ua.match(/iPhone OS (\d+(_\d+)?)/);
    const iPadMatch = ua.match(/iPad; CPU OS (\d+(_\d+)?)/);
    const macOSMatch = ua.match(/Mac OS X (\d+(_\d+)?(_\d+)?)/);
    const windowsMatch = ua.match(/Windows\D+(\d+(\.\d+)?(\.\d+)?)/);
    if (androidMatch) {
      metadata.platform = "Android";
      metadata.platformVersion = androidMatch[1];
      metadata.architecture = "arm";
    } else if (iPhoneMatch) {
      metadata.platform = "iOS";
      metadata.platformVersion = iPhoneMatch[1];
      metadata.architecture = "arm";
    } else if (iPadMatch) {
      metadata.platform = "iOS";
      metadata.platformVersion = iPadMatch[1];
      metadata.architecture = "arm";
    } else if (macOSMatch) {
      metadata.platform = "macOS";
      metadata.platformVersion = macOSMatch[1];
      if (!ua.includes("Intel")) metadata.architecture = "arm";
    } else if (windowsMatch) {
      metadata.platform = "Windows";
      metadata.platformVersion = windowsMatch[1];
    } else if (ua.toLowerCase().includes("linux")) {
      metadata.platform = "Linux";
    }
    if (ua.includes("ARM")) metadata.architecture = "arm";
    return metadata;
  }
  return crPage;
}
var crServiceWorker = {};
var hasRequiredCrServiceWorker;
function requireCrServiceWorker() {
  if (hasRequiredCrServiceWorker) return crServiceWorker;
  hasRequiredCrServiceWorker = 1;
  Object.defineProperty(crServiceWorker, "__esModule", {
    value: true
  });
  crServiceWorker.CRServiceWorker = void 0;
  var _page = requirePage$1();
  var _crExecutionContext = requireCrExecutionContext();
  var _crNetworkManager = requireCrNetworkManager();
  var _browserContext = requireBrowserContext$1();
  var network2 = _interopRequireWildcard(requireNetwork$1());
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  class CRServiceWorker extends _page.Worker {
    constructor(browserContext2, session, url) {
      super(browserContext2, url);
      this._browserContext = void 0;
      this._networkManager = void 0;
      this._session = void 0;
      this._session = session;
      this._browserContext = browserContext2;
      if (!!process.env.PW_EXPERIMENTAL_SERVICE_WORKER_NETWORK_EVENTS) this._networkManager = new _crNetworkManager.CRNetworkManager(null, this);
      session.once("Runtime.executionContextCreated", (event) => {
        this._createExecutionContext(new _crExecutionContext.CRExecutionContext(session, event.context));
      });
      if (this._networkManager && this._isNetworkInspectionEnabled()) {
        this.updateRequestInterception();
        this.updateExtraHTTPHeaders();
        this.updateHttpCredentials();
        this.updateOffline();
        this._networkManager.addSession(
          session,
          void 0,
          true
          /* isMain */
        ).catch(() => {
        });
      }
      session.send("Runtime.enable", {}).catch((e2) => {
      });
      session.send("Runtime.runIfWaitingForDebugger").catch((e2) => {
      });
      session.on("Inspector.targetReloadedAfterCrash", () => {
        session._sendMayFail("Runtime.runIfWaitingForDebugger", {});
      });
    }
    didClose() {
      var _this$_networkManager;
      (_this$_networkManager = this._networkManager) === null || _this$_networkManager === void 0 || _this$_networkManager.removeSession(this._session);
      this._session.dispose();
      super.didClose();
    }
    async updateOffline() {
      var _this$_networkManager2;
      if (!this._isNetworkInspectionEnabled()) return;
      await ((_this$_networkManager2 = this._networkManager) === null || _this$_networkManager2 === void 0 ? void 0 : _this$_networkManager2.setOffline(!!this._browserContext._options.offline).catch(() => {
      }));
    }
    async updateHttpCredentials() {
      var _this$_networkManager3;
      if (!this._isNetworkInspectionEnabled()) return;
      await ((_this$_networkManager3 = this._networkManager) === null || _this$_networkManager3 === void 0 ? void 0 : _this$_networkManager3.authenticate(this._browserContext._options.httpCredentials || null).catch(() => {
      }));
    }
    async updateExtraHTTPHeaders() {
      var _this$_networkManager4;
      if (!this._isNetworkInspectionEnabled()) return;
      await ((_this$_networkManager4 = this._networkManager) === null || _this$_networkManager4 === void 0 ? void 0 : _this$_networkManager4.setExtraHTTPHeaders(this._browserContext._options.extraHTTPHeaders || []).catch(() => {
      }));
    }
    async updateRequestInterception() {
      var _this$_networkManager5;
      if (!this._isNetworkInspectionEnabled()) return;
      await ((_this$_networkManager5 = this._networkManager) === null || _this$_networkManager5 === void 0 ? void 0 : _this$_networkManager5.setRequestInterception(this.needsRequestInterception()).catch(() => {
      }));
    }
    needsRequestInterception() {
      return this._isNetworkInspectionEnabled() && !!this._browserContext._requestInterceptor;
    }
    reportRequestFinished(request, response) {
      this._browserContext.emit(_browserContext.BrowserContext.Events.RequestFinished, {
        request,
        response
      });
    }
    requestFailed(request, _canceled) {
      this._browserContext.emit(_browserContext.BrowserContext.Events.RequestFailed, request);
    }
    requestReceivedResponse(response) {
      this._browserContext.emit(_browserContext.BrowserContext.Events.Response, response);
    }
    requestStarted(request, route) {
      this._browserContext.emit(_browserContext.BrowserContext.Events.Request, request);
      if (route) {
        var _this$_browserContext, _this$_browserContext2;
        const r2 = new network2.Route(request, route);
        if ((_this$_browserContext = (_this$_browserContext2 = this._browserContext)._requestInterceptor) !== null && _this$_browserContext !== void 0 && _this$_browserContext.call(_this$_browserContext2, r2, request)) return;
        r2.continue({
          isFallback: true
        }).catch(() => {
        });
      }
    }
    _isNetworkInspectionEnabled() {
      return this._browserContext._options.serviceWorkers !== "block";
    }
  }
  crServiceWorker.CRServiceWorker = CRServiceWorker;
  return crServiceWorker;
}
var hasRequiredCrBrowser;
function requireCrBrowser() {
  if (hasRequiredCrBrowser) return crBrowser;
  hasRequiredCrBrowser = 1;
  Object.defineProperty(crBrowser, "__esModule", {
    value: true
  });
  crBrowser.CRBrowserContext = crBrowser.CRBrowser = void 0;
  var _path2 = _interopRequireDefault(require$$1$1);
  var _assert = requireAssert$1();
  var _crypto = requireCrypto();
  var _artifact = requireArtifact$1();
  var _browser = requireBrowser$2();
  var _browserContext = requireBrowserContext$1();
  var _frames = requireFrames();
  var network2 = _interopRequireWildcard(requireNetwork$1());
  var _page = requirePage$1();
  var _crConnection = requireCrConnection();
  var _crPage = requireCrPage();
  var _crProtocolHelper = requireCrProtocolHelper();
  var _crServiceWorker = requireCrServiceWorker();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  class CRBrowser extends _browser.Browser {
    static async connect(parent, transport2, options, devtools) {
      options = {
        ...options
      };
      const connection2 = new _crConnection.CRConnection(transport2, options.protocolLogger, options.browserLogsCollector);
      const browser2 = new CRBrowser(parent, connection2, options);
      browser2._devtools = devtools;
      if (browser2.isClank()) browser2._isCollocatedWithServer = false;
      const session = connection2.rootSession;
      if (options.__testHookOnConnectToBrowser) await options.__testHookOnConnectToBrowser();
      const version2 = await session.send("Browser.getVersion");
      browser2._version = version2.product.substring(version2.product.indexOf("/") + 1);
      browser2._userAgent = version2.userAgent;
      browser2.options.headful = !version2.userAgent.includes("Headless");
      if (!options.persistent) {
        await session.send("Target.setAutoAttach", {
          autoAttach: true,
          waitForDebuggerOnStart: true,
          flatten: true
        });
        return browser2;
      }
      browser2._defaultContext = new CRBrowserContext(browser2, void 0, options.persistent);
      await Promise.all([session.send("Target.setAutoAttach", {
        autoAttach: true,
        waitForDebuggerOnStart: true,
        flatten: true
      }).then(async () => {
        await session.send("Target.getTargetInfo");
      }), browser2._defaultContext._initialize()]);
      await browser2._waitForAllPagesToBeInitialized();
      return browser2;
    }
    constructor(parent, connection2, options) {
      super(parent, options);
      this._connection = void 0;
      this._session = void 0;
      this._clientRootSessionPromise = null;
      this._contexts = /* @__PURE__ */ new Map();
      this._crPages = /* @__PURE__ */ new Map();
      this._backgroundPages = /* @__PURE__ */ new Map();
      this._serviceWorkers = /* @__PURE__ */ new Map();
      this._devtools = void 0;
      this._version = "";
      this._tracingRecording = false;
      this._tracingClient = void 0;
      this._userAgent = "";
      this._connection = connection2;
      this._session = this._connection.rootSession;
      this._connection.on(_crConnection.ConnectionEvents.Disconnected, () => this._didDisconnect());
      this._session.on("Target.attachedToTarget", this._onAttachedToTarget.bind(this));
      this._session.on("Target.detachedFromTarget", this._onDetachedFromTarget.bind(this));
      this._session.on("Browser.downloadWillBegin", this._onDownloadWillBegin.bind(this));
      this._session.on("Browser.downloadProgress", this._onDownloadProgress.bind(this));
    }
    async doCreateNewContext(options) {
      const proxy = options.proxyOverride || options.proxy;
      let proxyBypassList = void 0;
      if (proxy) {
        if (process.env.PLAYWRIGHT_DISABLE_FORCED_CHROMIUM_PROXIED_LOOPBACK) proxyBypassList = proxy.bypass;
        else proxyBypassList = "<-loopback>" + (proxy.bypass ? `,${proxy.bypass}` : "");
      }
      const {
        browserContextId
      } = await this._session.send("Target.createBrowserContext", {
        disposeOnDetach: true,
        proxyServer: proxy ? proxy.server : void 0,
        proxyBypassList
      });
      const context = new CRBrowserContext(this, browserContextId, options);
      await context._initialize();
      this._contexts.set(browserContextId, context);
      return context;
    }
    contexts() {
      return Array.from(this._contexts.values());
    }
    version() {
      return this._version;
    }
    userAgent() {
      return this._userAgent;
    }
    _platform() {
      if (this._userAgent.includes("Windows")) return "win";
      if (this._userAgent.includes("Macintosh")) return "mac";
      return "linux";
    }
    isClank() {
      return this.options.name === "clank";
    }
    async _waitForAllPagesToBeInitialized() {
      await Promise.all([...this._crPages.values()].map((crPage2) => crPage2._page.waitForInitializedOrError()));
    }
    _onAttachedToTarget({
      targetInfo,
      sessionId,
      waitingForDebugger
    }) {
      if (targetInfo.type === "browser") return;
      const session = this._session.createChildSession(sessionId);
      (0, _assert.assert)(targetInfo.browserContextId, "targetInfo: " + JSON.stringify(targetInfo, null, 2));
      let context = this._contexts.get(targetInfo.browserContextId) || null;
      if (!context) {
        context = this._defaultContext;
      }
      if (targetInfo.type === "other" && targetInfo.url.startsWith("devtools://devtools") && this._devtools) {
        this._devtools.install(session);
        return;
      }
      const treatOtherAsPage = targetInfo.type === "other" && process.env.PW_CHROMIUM_ATTACH_TO_OTHER;
      if (!context || targetInfo.type === "other" && !treatOtherAsPage) {
        session.detach().catch(() => {
        });
        return;
      }
      (0, _assert.assert)(!this._crPages.has(targetInfo.targetId), "Duplicate target " + targetInfo.targetId);
      (0, _assert.assert)(!this._backgroundPages.has(targetInfo.targetId), "Duplicate target " + targetInfo.targetId);
      (0, _assert.assert)(!this._serviceWorkers.has(targetInfo.targetId), "Duplicate target " + targetInfo.targetId);
      if (targetInfo.type === "background_page") {
        const backgroundPage = new _crPage.CRPage(session, targetInfo.targetId, context, null, {
          hasUIWindow: false,
          isBackgroundPage: true
        });
        this._backgroundPages.set(targetInfo.targetId, backgroundPage);
        return;
      }
      if (targetInfo.type === "page" || treatOtherAsPage) {
        const opener = targetInfo.openerId ? this._crPages.get(targetInfo.openerId) || null : null;
        const crPage2 = new _crPage.CRPage(session, targetInfo.targetId, context, opener, {
          hasUIWindow: targetInfo.type === "page",
          isBackgroundPage: false
        });
        this._crPages.set(targetInfo.targetId, crPage2);
        return;
      }
      if (targetInfo.type === "service_worker") {
        const serviceWorker = new _crServiceWorker.CRServiceWorker(context, session, targetInfo.url);
        this._serviceWorkers.set(targetInfo.targetId, serviceWorker);
        context.emit(CRBrowserContext.CREvents.ServiceWorker, serviceWorker);
        return;
      }
      session.detach().catch(() => {
      });
    }
    _onDetachedFromTarget(payload) {
      const targetId = payload.targetId;
      const crPage2 = this._crPages.get(targetId);
      if (crPage2) {
        this._crPages.delete(targetId);
        crPage2.didClose();
        return;
      }
      const backgroundPage = this._backgroundPages.get(targetId);
      if (backgroundPage) {
        this._backgroundPages.delete(targetId);
        backgroundPage.didClose();
        return;
      }
      const serviceWorker = this._serviceWorkers.get(targetId);
      if (serviceWorker) {
        this._serviceWorkers.delete(targetId);
        serviceWorker.didClose();
        return;
      }
    }
    _didDisconnect() {
      for (const crPage2 of this._crPages.values()) crPage2.didClose();
      this._crPages.clear();
      for (const backgroundPage of this._backgroundPages.values()) backgroundPage.didClose();
      this._backgroundPages.clear();
      for (const serviceWorker of this._serviceWorkers.values()) serviceWorker.didClose();
      this._serviceWorkers.clear();
      this._didClose();
    }
    _findOwningPage(frameId) {
      for (const crPage2 of this._crPages.values()) {
        const frame2 = crPage2._page._frameManager.frame(frameId);
        if (frame2) return crPage2;
      }
      return null;
    }
    _onDownloadWillBegin(payload) {
      const page2 = this._findOwningPage(payload.frameId);
      if (!page2) {
        return;
      }
      page2.willBeginDownload();
      let originPage = page2._page.initializedOrUndefined();
      if (!originPage && page2._opener) originPage = page2._opener._page.initializedOrUndefined();
      if (!originPage) return;
      this._downloadCreated(originPage, payload.guid, payload.url, payload.suggestedFilename);
    }
    _onDownloadProgress(payload) {
      if (payload.state === "completed") this._downloadFinished(payload.guid, "");
      if (payload.state === "canceled") this._downloadFinished(payload.guid, this._closeReason || "canceled");
    }
    async _closePage(crPage2) {
      await this._session.send("Target.closeTarget", {
        targetId: crPage2._targetId
      });
    }
    async newBrowserCDPSession() {
      return await this._connection.createBrowserSession();
    }
    async startTracing(page2, options = {}) {
      (0, _assert.assert)(!this._tracingRecording, "Cannot start recording trace while already recording trace.");
      this._tracingClient = page2 ? page2._delegate._mainFrameSession._client : this._session;
      const defaultCategories = ["-*", "devtools.timeline", "v8.execute", "disabled-by-default-devtools.timeline", "disabled-by-default-devtools.timeline.frame", "toplevel", "blink.console", "blink.user_timing", "latencyInfo", "disabled-by-default-devtools.timeline.stack", "disabled-by-default-v8.cpu_profiler", "disabled-by-default-v8.cpu_profiler.hires"];
      const {
        screenshots = false,
        categories: categories2 = defaultCategories
      } = options;
      if (screenshots) categories2.push("disabled-by-default-devtools.screenshot");
      this._tracingRecording = true;
      await this._tracingClient.send("Tracing.start", {
        transferMode: "ReturnAsStream",
        categories: categories2.join(",")
      });
    }
    async stopTracing() {
      (0, _assert.assert)(this._tracingClient, "Tracing was not started.");
      const [event] = await Promise.all([new Promise((f2) => this._tracingClient.once("Tracing.tracingComplete", f2)), this._tracingClient.send("Tracing.end")]);
      const tracingPath = _path2.default.join(this.options.artifactsDir, (0, _crypto.createGuid)() + ".crtrace");
      await (0, _crProtocolHelper.saveProtocolStream)(this._tracingClient, event.stream, tracingPath);
      this._tracingRecording = false;
      const artifact2 = new _artifact.Artifact(this, tracingPath);
      artifact2.reportFinished();
      return artifact2;
    }
    isConnected() {
      return !this._connection._closed;
    }
    async _clientRootSession() {
      if (!this._clientRootSessionPromise) this._clientRootSessionPromise = this._connection.createBrowserSession();
      return this._clientRootSessionPromise;
    }
  }
  crBrowser.CRBrowser = CRBrowser;
  class CRBrowserContext extends _browserContext.BrowserContext {
    constructor(browser2, browserContextId, options) {
      super(browser2, options, browserContextId);
      this._authenticateProxyViaCredentials();
    }
    async _initialize() {
      (0, _assert.assert)(!Array.from(this._browser._crPages.values()).some((page2) => page2._browserContext === this));
      const promises = [super._initialize()];
      if (this._browser.options.name !== "clank" && this._options.acceptDownloads !== "internal-browser-default") {
        promises.push(this._browser._session.send("Browser.setDownloadBehavior", {
          behavior: this._options.acceptDownloads === "accept" ? "allowAndName" : "deny",
          browserContextId: this._browserContextId,
          downloadPath: this._browser.options.downloadsPath,
          eventsEnabled: true
        }));
      }
      await Promise.all(promises);
    }
    _crPages() {
      return [...this._browser._crPages.values()].filter((crPage2) => crPage2._browserContext === this);
    }
    possiblyUninitializedPages() {
      return this._crPages().map((crPage2) => crPage2._page);
    }
    async doCreateNewPage() {
      (0, _browserContext.assertBrowserContextIsNotOwned)(this);
      const oldKeys = this._browser.isClank() ? new Set(this._browser._crPages.keys()) : void 0;
      let {
        targetId
      } = await this._browser._session.send("Target.createTarget", {
        url: "about:blank",
        browserContextId: this._browserContextId
      });
      if (oldKeys) {
        const newKeys = new Set(this._browser._crPages.keys());
        for (const key of oldKeys) newKeys.delete(key);
        for (const key of newKeys) {
          const page2 = this._browser._crPages.get(key);
          if (page2._opener) newKeys.delete(key);
        }
        (0, _assert.assert)(newKeys.size === 1);
        [targetId] = [...newKeys];
      }
      return this._browser._crPages.get(targetId)._page;
    }
    async doGetCookies(urls) {
      const {
        cookies
      } = await this._browser._session.send("Storage.getCookies", {
        browserContextId: this._browserContextId
      });
      return network2.filterCookies(cookies.map((c2) => {
        const copy2 = {
          sameSite: "Lax",
          ...c2
        };
        delete copy2.size;
        delete copy2.priority;
        delete copy2.session;
        delete copy2.sameParty;
        delete copy2.sourceScheme;
        delete copy2.sourcePort;
        return copy2;
      }), urls);
    }
    async addCookies(cookies) {
      await this._browser._session.send("Storage.setCookies", {
        cookies: network2.rewriteCookies(cookies),
        browserContextId: this._browserContextId
      });
    }
    async doClearCookies() {
      await this._browser._session.send("Storage.clearCookies", {
        browserContextId: this._browserContextId
      });
    }
    async doGrantPermissions(origin, permissions) {
      const webPermissionToProtocol = /* @__PURE__ */ new Map([
        ["geolocation", "geolocation"],
        ["midi", "midi"],
        ["notifications", "notifications"],
        ["camera", "videoCapture"],
        ["microphone", "audioCapture"],
        ["background-sync", "backgroundSync"],
        ["ambient-light-sensor", "sensors"],
        ["accelerometer", "sensors"],
        ["gyroscope", "sensors"],
        ["magnetometer", "sensors"],
        ["clipboard-read", "clipboardReadWrite"],
        ["clipboard-write", "clipboardSanitizedWrite"],
        ["payment-handler", "paymentHandler"],
        // chrome-specific permissions we have.
        ["midi-sysex", "midiSysex"],
        ["storage-access", "storageAccess"]
      ]);
      const filtered = permissions.map((permission) => {
        const protocolPermission = webPermissionToProtocol.get(permission);
        if (!protocolPermission) throw new Error("Unknown permission: " + permission);
        return protocolPermission;
      });
      await this._browser._session.send("Browser.grantPermissions", {
        origin: origin === "*" ? void 0 : origin,
        browserContextId: this._browserContextId,
        permissions: filtered
      });
    }
    async doClearPermissions() {
      await this._browser._session.send("Browser.resetPermissions", {
        browserContextId: this._browserContextId
      });
    }
    async setGeolocation(geolocation) {
      (0, _browserContext.verifyGeolocation)(geolocation);
      this._options.geolocation = geolocation;
      for (const page2 of this.pages()) await page2._delegate.updateGeolocation();
    }
    async setExtraHTTPHeaders(headers2) {
      this._options.extraHTTPHeaders = headers2;
      for (const page2 of this.pages()) await page2._delegate.updateExtraHTTPHeaders();
      for (const sw of this.serviceWorkers()) await sw.updateExtraHTTPHeaders();
    }
    async setUserAgent(userAgent2) {
      this._options.userAgent = userAgent2;
      for (const page2 of this.pages()) await page2._delegate.updateUserAgent();
    }
    async setOffline(offline) {
      this._options.offline = offline;
      for (const page2 of this.pages()) await page2._delegate.updateOffline();
      for (const sw of this.serviceWorkers()) await sw.updateOffline();
    }
    async doSetHTTPCredentials(httpCredentials) {
      this._options.httpCredentials = httpCredentials;
      for (const page2 of this.pages()) await page2._delegate.updateHttpCredentials();
      for (const sw of this.serviceWorkers()) await sw.updateHttpCredentials();
    }
    async doAddInitScript(initScript) {
      for (const page2 of this.pages()) await page2._delegate.addInitScript(initScript);
    }
    async doRemoveNonInternalInitScripts() {
      for (const page2 of this.pages()) await page2._delegate.removeNonInternalInitScripts();
    }
    async doUpdateRequestInterception() {
      for (const page2 of this.pages()) await page2._delegate.updateRequestInterception();
      for (const sw of this.serviceWorkers()) await sw.updateRequestInterception();
    }
    async doClose(reason) {
      const openedBeforeUnloadDialogs = [];
      for (const crPage2 of this._crPages()) {
        const dialogs = [...crPage2._page._frameManager._openedDialogs].filter((dialog2) => dialog2.type() === "beforeunload");
        openedBeforeUnloadDialogs.push(...dialogs);
      }
      await Promise.all(openedBeforeUnloadDialogs.map((dialog2) => dialog2.dismiss()));
      if (!this._browserContextId) {
        await this.stopVideoRecording();
        await this._browser.close({
          reason
        });
        return;
      }
      await this._browser._session.send("Target.disposeBrowserContext", {
        browserContextId: this._browserContextId
      });
      this._browser._contexts.delete(this._browserContextId);
      for (const [targetId, serviceWorker] of this._browser._serviceWorkers) {
        if (serviceWorker._browserContext !== this) continue;
        serviceWorker.didClose();
        this._browser._serviceWorkers.delete(targetId);
      }
    }
    async stopVideoRecording() {
      await Promise.all(this._crPages().map((crPage2) => crPage2._mainFrameSession._stopVideoRecording()));
    }
    onClosePersistent() {
      for (const [targetId, backgroundPage] of this._browser._backgroundPages.entries()) {
        if (backgroundPage._browserContext === this && backgroundPage._page.initializedOrUndefined()) {
          backgroundPage.didClose();
          this._browser._backgroundPages.delete(targetId);
        }
      }
    }
    async clearCache() {
      for (const page2 of this._crPages()) await page2._networkManager.clearCache();
    }
    async cancelDownload(guid) {
      await this._browser._session.send("Browser.cancelDownload", {
        guid,
        browserContextId: this._browserContextId
      });
    }
    backgroundPages() {
      const result = [];
      for (const backgroundPage of this._browser._backgroundPages.values()) {
        if (backgroundPage._browserContext === this && backgroundPage._page.initializedOrUndefined()) result.push(backgroundPage._page);
      }
      return result;
    }
    serviceWorkers() {
      return Array.from(this._browser._serviceWorkers.values()).filter((serviceWorker) => serviceWorker._browserContext === this);
    }
    async newCDPSession(page2) {
      let targetId = null;
      if (page2 instanceof _page.Page) {
        targetId = page2._delegate._targetId;
      } else if (page2 instanceof _frames.Frame) {
        const session = page2._page._delegate._sessions.get(page2._id);
        if (!session) throw new Error(`This frame does not have a separate CDP session, it is a part of the parent frame's session`);
        targetId = session._targetId;
      } else {
        throw new Error("page: expected Page or Frame");
      }
      const rootSession = await this._browser._clientRootSession();
      return rootSession.attachToTarget(targetId);
    }
  }
  crBrowser.CRBrowserContext = CRBrowserContext;
  CRBrowserContext.CREvents = {
    BackgroundPage: "backgroundpage",
    ServiceWorker: "serviceworker"
  };
  return crBrowser;
}
var hasRequiredAndroid$1;
function requireAndroid$1() {
  if (hasRequiredAndroid$1) return android$1;
  hasRequiredAndroid$1 = 1;
  Object.defineProperty(android$1, "__esModule", {
    value: true
  });
  android$1.AndroidDevice = android$1.Android = void 0;
  var _events = require$$0$4;
  var _fs = _interopRequireDefault(require$$0$2);
  var _os = _interopRequireDefault(require$$1$3);
  var _path2 = _interopRequireDefault(require$$1$1);
  var _timeoutSettings = requireTimeoutSettings$1();
  var _pipeTransport = requirePipeTransport$1();
  var _crypto = requireCrypto();
  var _debug = requireDebug$1();
  var _env = requireEnv();
  var _task = requireTask();
  var _debugLogger = requireDebugLogger();
  var _utilsBundle = requireUtilsBundle();
  var _browserContext = requireBrowserContext$1();
  var _chromiumSwitches = requireChromiumSwitches();
  var _crBrowser = requireCrBrowser();
  var _fileUtils = requireFileUtils$1();
  var _helper = requireHelper();
  var _instrumentation = requireInstrumentation();
  var _processLauncher = requireProcessLauncher();
  var _progress = requireProgress();
  var _registry = requireRegistry();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  const ARTIFACTS_FOLDER = _path2.default.join(_os.default.tmpdir(), "playwright-artifacts-");
  class Android extends _instrumentation.SdkObject {
    constructor(parent, backend) {
      super(parent, "android");
      this._backend = void 0;
      this._devices = /* @__PURE__ */ new Map();
      this._timeoutSettings = void 0;
      this._backend = backend;
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings();
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
    }
    async devices(options) {
      const devices = (await this._backend.devices(options)).filter((d2) => d2.status === "device");
      const newSerials = /* @__PURE__ */ new Set();
      for (const d2 of devices) {
        newSerials.add(d2.serial);
        if (this._devices.has(d2.serial)) continue;
        const device = await AndroidDevice.create(this, d2, options);
        this._devices.set(d2.serial, device);
      }
      for (const d2 of this._devices.keys()) {
        if (!newSerials.has(d2)) this._devices.delete(d2);
      }
      return [...this._devices.values()];
    }
    _deviceClosed(device) {
      this._devices.delete(device.serial);
    }
  }
  android$1.Android = Android;
  class AndroidDevice extends _instrumentation.SdkObject {
    constructor(android2, backend, model, options) {
      super(android2, "android-device");
      this._backend = void 0;
      this.model = void 0;
      this.serial = void 0;
      this._options = void 0;
      this._driverPromise = void 0;
      this._lastId = 0;
      this._callbacks = /* @__PURE__ */ new Map();
      this._pollingWebViews = void 0;
      this._timeoutSettings = void 0;
      this._webViews = /* @__PURE__ */ new Map();
      this._browserConnections = /* @__PURE__ */ new Set();
      this._android = void 0;
      this._isClosed = false;
      this._android = android2;
      this._backend = backend;
      this.model = model;
      this.serial = backend.serial;
      this._options = options;
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings(android2._timeoutSettings);
    }
    static async create(android2, backend, options) {
      await backend.init();
      const model = await backend.runCommand("shell:getprop ro.product.model");
      const device = new AndroidDevice(android2, backend, model.toString().trim(), options);
      await device._init();
      return device;
    }
    async _init() {
      await this._refreshWebViews();
      const poll = () => {
        this._pollingWebViews = setTimeout(() => this._refreshWebViews().then(poll).catch(() => {
          this.close().catch(() => {
          });
        }), 500);
      };
      poll();
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
    }
    async shell(command) {
      const result = await this._backend.runCommand(`shell:${command}`);
      await this._refreshWebViews();
      return result;
    }
    async open(command) {
      return await this._backend.open(`${command}`);
    }
    async screenshot() {
      return await this._backend.runCommand(`shell:screencap -p`);
    }
    async _driver() {
      if (this._isClosed) return;
      if (!this._driverPromise) this._driverPromise = this._installDriver();
      return this._driverPromise;
    }
    async _installDriver() {
      (0, _utilsBundle.debug)("pw:android")("Stopping the old driver");
      await this.shell(`am force-stop com.microsoft.playwright.androiddriver`);
      if (!this._options.omitDriverInstall) {
        (0, _utilsBundle.debug)("pw:android")("Uninstalling the old driver");
        await this.shell(`cmd package uninstall com.microsoft.playwright.androiddriver`);
        await this.shell(`cmd package uninstall com.microsoft.playwright.androiddriver.test`);
        (0, _utilsBundle.debug)("pw:android")("Installing the new driver");
        const executable = _registry.registry.findExecutable("android");
        const packageManagerCommand = (0, _env.getPackageManagerExecCommand)();
        for (const file2 of ["android-driver.apk", "android-driver-target.apk"]) {
          const fullName = _path2.default.join(executable.directory, file2);
          if (!_fs.default.existsSync(fullName)) throw new Error(`Please install Android driver apk using '${packageManagerCommand} playwright install android'`);
          await this.installApk(await _fs.default.promises.readFile(fullName));
        }
      } else {
        (0, _utilsBundle.debug)("pw:android")("Skipping the driver installation");
      }
      (0, _utilsBundle.debug)("pw:android")("Starting the new driver");
      this.shell("am instrument -w com.microsoft.playwright.androiddriver.test/androidx.test.runner.AndroidJUnitRunner").catch((e2) => (0, _utilsBundle.debug)("pw:android")(e2));
      const socket = await this._waitForLocalAbstract("playwright_android_driver_socket");
      const transport2 = new _pipeTransport.PipeTransport(socket, socket, socket, "be");
      transport2.onmessage = (message) => {
        const response = JSON.parse(message);
        const {
          id,
          result,
          error
        } = response;
        const callback = this._callbacks.get(id);
        if (!callback) return;
        if (error) callback.reject(new Error(error));
        else callback.fulfill(result);
        this._callbacks.delete(id);
      };
      return transport2;
    }
    async _waitForLocalAbstract(socketName) {
      let socket;
      (0, _utilsBundle.debug)("pw:android")(`Polling the socket localabstract:${socketName}`);
      while (!socket) {
        try {
          socket = await this._backend.open(`localabstract:${socketName}`);
        } catch (e2) {
          await new Promise((f2) => setTimeout(f2, 250));
        }
      }
      (0, _utilsBundle.debug)("pw:android")(`Connected to localabstract:${socketName}`);
      return socket;
    }
    async send(method, params = {}) {
      params.timeout = this._timeoutSettings.timeout(params);
      const driver = await this._driver();
      if (!driver) throw new Error("Device is closed");
      const id = ++this._lastId;
      const result = new Promise((fulfill, reject) => this._callbacks.set(id, {
        fulfill,
        reject
      }));
      driver.send(JSON.stringify({
        id,
        method,
        params
      }));
      return result;
    }
    async close() {
      if (this._isClosed) return;
      this._isClosed = true;
      if (this._pollingWebViews) clearTimeout(this._pollingWebViews);
      for (const connection2 of this._browserConnections) await connection2.close();
      if (this._driverPromise) {
        const driver = await this._driver();
        driver === null || driver === void 0 || driver.close();
      }
      await this._backend.close();
      this._android._deviceClosed(this);
      this.emit(AndroidDevice.Events.Close);
    }
    async launchBrowser(pkg = "com.android.chrome", options) {
      (0, _utilsBundle.debug)("pw:android")("Force-stopping", pkg);
      await this._backend.runCommand(`shell:am force-stop ${pkg}`);
      const socketName = (0, _debug.isUnderTest)() ? "webview_devtools_remote_playwright_test" : "playwright_" + (0, _crypto.createGuid)() + "_devtools_remote";
      const commandLine = this._defaultArgs(options, socketName).join(" ");
      (0, _utilsBundle.debug)("pw:android")("Starting", pkg, commandLine);
      await this._backend.runCommand(`shell:echo "${Buffer.from(commandLine).toString("base64")}" | base64 -d > /data/local/tmp/chrome-command-line`);
      await this._backend.runCommand(`shell:am start -a android.intent.action.VIEW -d about:blank ${pkg}`);
      const browserContext2 = await this._connectToBrowser(socketName, options);
      await this._backend.runCommand(`shell:rm /data/local/tmp/chrome-command-line`);
      return browserContext2;
    }
    _defaultArgs(options, socketName) {
      const chromeArguments = ["_", "--disable-fre", "--no-default-browser-check", `--remote-debugging-socket-name=${socketName}`, ..._chromiumSwitches.chromiumSwitches, ...this._innerDefaultArgs(options)];
      return chromeArguments;
    }
    _innerDefaultArgs(options) {
      const {
        args = [],
        proxy
      } = options;
      const chromeArguments = [];
      if (proxy) {
        chromeArguments.push(`--proxy-server=${proxy.server}`);
        const proxyBypassRules = [];
        if (proxy.bypass) proxyBypassRules.push(...proxy.bypass.split(",").map((t) => t.trim()).map((t) => t.startsWith(".") ? "*" + t : t));
        if (!process.env.PLAYWRIGHT_DISABLE_FORCED_CHROMIUM_PROXIED_LOOPBACK && !proxyBypassRules.includes("<-loopback>")) proxyBypassRules.push("<-loopback>");
        if (proxyBypassRules.length > 0) chromeArguments.push(`--proxy-bypass-list=${proxyBypassRules.join(";")}`);
      }
      chromeArguments.push(...args);
      return chromeArguments;
    }
    async connectToWebView(socketName) {
      const webView = this._webViews.get(socketName);
      if (!webView) throw new Error("WebView has been closed");
      return await this._connectToBrowser(socketName);
    }
    async _connectToBrowser(socketName, options = {}) {
      const socket = await this._waitForLocalAbstract(socketName);
      const androidBrowser = new AndroidBrowser(this, socket);
      await androidBrowser._init();
      this._browserConnections.add(androidBrowser);
      const artifactsDir = await _fs.default.promises.mkdtemp(ARTIFACTS_FOLDER);
      const cleanupArtifactsDir = async () => {
        const errors2 = await (0, _fileUtils.removeFolders)([artifactsDir]);
        for (let i = 0; i < (errors2 || []).length; ++i) (0, _utilsBundle.debug)("pw:android")(`exception while removing ${artifactsDir}: ${errors2[i]}`);
      };
      _processLauncher.gracefullyCloseSet.add(cleanupArtifactsDir);
      socket.on("close", async () => {
        _processLauncher.gracefullyCloseSet.delete(cleanupArtifactsDir);
        cleanupArtifactsDir().catch((e2) => (0, _utilsBundle.debug)("pw:android")(`could not cleanup artifacts dir: ${e2}`));
      });
      const browserOptions = {
        name: "clank",
        isChromium: true,
        slowMo: 0,
        persistent: {
          ...options,
          noDefaultViewport: true
        },
        artifactsDir,
        downloadsPath: artifactsDir,
        tracesDir: artifactsDir,
        browserProcess: new ClankBrowserProcess(androidBrowser),
        proxy: options.proxy,
        protocolLogger: _helper.helper.debugProtocolLogger(),
        browserLogsCollector: new _debugLogger.RecentLogsCollector(),
        originalLaunchOptions: {}
      };
      (0, _browserContext.validateBrowserContextOptions)(options, browserOptions);
      const browser2 = await _crBrowser.CRBrowser.connect(this.attribution.playwright, androidBrowser, browserOptions);
      const controller = new _progress.ProgressController((0, _instrumentation.serverSideCallMetadata)(), this);
      const defaultContext = browser2._defaultContext;
      await controller.run(async (progress2) => {
        await defaultContext._loadDefaultContextAsIs(progress2);
      });
      return defaultContext;
    }
    webViews() {
      return [...this._webViews.values()];
    }
    async installApk(content, options) {
      const args = options && options.args ? options.args : ["-r", "-t", "-S"];
      (0, _utilsBundle.debug)("pw:android")("Opening install socket");
      const installSocket = await this._backend.open(`shell:cmd package install ${args.join(" ")} ${content.length}`);
      (0, _utilsBundle.debug)("pw:android")("Writing driver bytes: " + content.length);
      await installSocket.write(content);
      const success = await new Promise((f2) => installSocket.on("data", f2));
      (0, _utilsBundle.debug)("pw:android")("Written driver bytes: " + success);
      installSocket.close();
    }
    async push(content, path, mode = 420) {
      const socket = await this._backend.open(`sync:`);
      const sendHeader = async (command, length) => {
        const buffer2 = Buffer.alloc(command.length + 4);
        buffer2.write(command, 0);
        buffer2.writeUInt32LE(length, command.length);
        await socket.write(buffer2);
      };
      const send = async (command, data) => {
        await sendHeader(command, data.length);
        await socket.write(data);
      };
      await send("SEND", Buffer.from(`${path},${mode}`));
      const maxChunk = 65535;
      for (let i = 0; i < content.length; i += maxChunk) await send("DATA", content.slice(i, i + maxChunk));
      await sendHeader("DONE", Date.now() / 1e3 | 0);
      const result = await new Promise((f2) => socket.once("data", f2));
      const code = result.slice(0, 4).toString();
      if (code !== "OKAY") throw new Error("Could not push: " + code);
      socket.close();
    }
    async _refreshWebViews() {
      const sockets = (await this._backend.runCommand(`shell:cat /proc/net/unix | grep webview_devtools_remote`)).toString().split("\n");
      if (this._isClosed) return;
      const socketNames = /* @__PURE__ */ new Set();
      for (const line of sockets) {
        const matchSocketName = line.match(/[^@]+@(.*?webview_devtools_remote_?.*)/);
        if (!matchSocketName) continue;
        const socketName = matchSocketName[1];
        socketNames.add(socketName);
        if (this._webViews.has(socketName)) continue;
        const match = line.match(/[^@]+@.*?webview_devtools_remote_?(\d*)/);
        let pid = -1;
        if (match && match[1]) pid = +match[1];
        const pkg = await this._extractPkg(pid);
        if (this._isClosed) return;
        const webView = {
          pid,
          pkg,
          socketName
        };
        this._webViews.set(socketName, webView);
        this.emit(AndroidDevice.Events.WebViewAdded, webView);
      }
      for (const p of this._webViews.keys()) {
        if (!socketNames.has(p)) {
          this._webViews.delete(p);
          this.emit(AndroidDevice.Events.WebViewRemoved, p);
        }
      }
    }
    async _extractPkg(pid) {
      let pkg = "";
      if (pid === -1) return pkg;
      const procs = (await this._backend.runCommand(`shell:ps -A | grep ${pid}`)).toString().split("\n");
      for (const proc of procs) {
        const match = proc.match(/[^\s]+\s+(\d+).*$/);
        if (!match) continue;
        pkg = proc.substring(proc.lastIndexOf(" ") + 1);
      }
      return pkg;
    }
  }
  android$1.AndroidDevice = AndroidDevice;
  AndroidDevice.Events = {
    WebViewAdded: "webViewAdded",
    WebViewRemoved: "webViewRemoved",
    Close: "close"
  };
  class AndroidBrowser extends _events.EventEmitter {
    constructor(device, socket) {
      super();
      this.device = void 0;
      this._socket = void 0;
      this._receiver = void 0;
      this._waitForNextTask = (0, _task.makeWaitForNextTask)();
      this.onmessage = void 0;
      this.onclose = void 0;
      this.setMaxListeners(0);
      this.device = device;
      this._socket = socket;
      this._socket.on("close", () => {
        this._waitForNextTask(() => {
          if (this.onclose) this.onclose();
        });
      });
      this._receiver = new _utilsBundle.wsReceiver();
      this._receiver.on("message", (message) => {
        this._waitForNextTask(() => {
          if (this.onmessage) this.onmessage(JSON.parse(message));
        });
      });
    }
    async _init() {
      await this._socket.write(Buffer.from(`GET /devtools/browser HTTP/1.1\r
Upgrade: WebSocket\r
Connection: Upgrade\r
Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\r
Sec-WebSocket-Version: 13\r
\r
`));
      await new Promise((f2) => this._socket.once("data", f2));
      this._socket.on("data", (data) => this._receiver._write(data, "binary", () => {
      }));
    }
    async send(s2) {
      await this._socket.write(encodeWebFrame(JSON.stringify(s2)));
    }
    async close() {
      this._socket.close();
    }
  }
  function encodeWebFrame(data) {
    return _utilsBundle.wsSender.frame(Buffer.from(data), {
      opcode: 1,
      mask: true,
      fin: true,
      readOnly: true
    })[0];
  }
  class ClankBrowserProcess {
    constructor(browser2) {
      this._browser = void 0;
      this.onclose = void 0;
      this._browser = browser2;
    }
    async kill() {
    }
    async close() {
      await this._browser.close();
    }
  }
  return android$1;
}
var backendAdb = {};
var hasRequiredBackendAdb;
function requireBackendAdb() {
  if (hasRequiredBackendAdb) return backendAdb;
  hasRequiredBackendAdb = 1;
  Object.defineProperty(backendAdb, "__esModule", {
    value: true
  });
  backendAdb.AdbBackend = void 0;
  var _events = require$$0$4;
  var _net = _interopRequireDefault(require$$8);
  var _assert = requireAssert$1();
  var _crypto = requireCrypto();
  var _utilsBundle = requireUtilsBundle();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  class AdbBackend {
    async devices(options = {}) {
      const result = await runCommand("host:devices", options.host, options.port);
      const lines = result.toString().trim().split("\n");
      return lines.map((line) => {
        const [serial, status] = line.trim().split("	");
        return new AdbDevice(serial, status, options.host, options.port);
      });
    }
  }
  backendAdb.AdbBackend = AdbBackend;
  class AdbDevice {
    constructor(serial, status, host, port) {
      this.serial = void 0;
      this.status = void 0;
      this.host = void 0;
      this.port = void 0;
      this._closed = false;
      this.serial = serial;
      this.status = status;
      this.host = host;
      this.port = port;
    }
    async init() {
    }
    async close() {
      this._closed = true;
    }
    runCommand(command) {
      if (this._closed) throw new Error("Device is closed");
      return runCommand(command, this.host, this.port, this.serial);
    }
    async open(command) {
      if (this._closed) throw new Error("Device is closed");
      const result = await open(command, this.host, this.port, this.serial);
      result.becomeSocket();
      return result;
    }
  }
  async function runCommand(command, host = "127.0.0.1", port = 5037, serial) {
    (0, _utilsBundle.debug)("pw:adb:runCommand")(command, serial);
    const socket = new BufferedSocketWrapper(command, _net.default.createConnection({
      host,
      port
    }));
    try {
      if (serial) {
        await socket.write(encodeMessage(`host:transport:${serial}`));
        const status2 = await socket.read(4);
        (0, _assert.assert)(status2.toString() === "OKAY", status2.toString());
      }
      await socket.write(encodeMessage(command));
      const status = await socket.read(4);
      (0, _assert.assert)(status.toString() === "OKAY", status.toString());
      let commandOutput;
      if (!command.startsWith("shell:")) {
        const remainingLength = parseInt((await socket.read(4)).toString(), 16);
        commandOutput = await socket.read(remainingLength);
      } else {
        commandOutput = await socket.readAll();
      }
      return commandOutput;
    } finally {
      socket.close();
    }
  }
  async function open(command, host = "127.0.0.1", port = 5037, serial) {
    const socket = new BufferedSocketWrapper(command, _net.default.createConnection({
      host,
      port
    }));
    if (serial) {
      await socket.write(encodeMessage(`host:transport:${serial}`));
      const status2 = await socket.read(4);
      (0, _assert.assert)(status2.toString() === "OKAY", status2.toString());
    }
    await socket.write(encodeMessage(command));
    const status = await socket.read(4);
    (0, _assert.assert)(status.toString() === "OKAY", status.toString());
    return socket;
  }
  function encodeMessage(message) {
    let lenHex = message.length.toString(16);
    lenHex = "0".repeat(4 - lenHex.length) + lenHex;
    return Buffer.from(lenHex + message);
  }
  class BufferedSocketWrapper extends _events.EventEmitter {
    constructor(command, socket) {
      super();
      this.guid = (0, _crypto.createGuid)();
      this._socket = void 0;
      this._buffer = Buffer.from([]);
      this._isSocket = false;
      this._notifyReader = void 0;
      this._connectPromise = void 0;
      this._isClosed = false;
      this._command = void 0;
      this._command = command;
      this._socket = socket;
      this._connectPromise = new Promise((f2) => this._socket.on("connect", f2));
      this._socket.on("data", (data) => {
        (0, _utilsBundle.debug)("pw:adb:data")(data.toString());
        if (this._isSocket) {
          this.emit("data", data);
          return;
        }
        this._buffer = Buffer.concat([this._buffer, data]);
        if (this._notifyReader) this._notifyReader();
      });
      this._socket.on("close", () => {
        this._isClosed = true;
        if (this._notifyReader) this._notifyReader();
        this.close();
        this.emit("close");
      });
      this._socket.on("error", (error) => this.emit("error", error));
    }
    async write(data) {
      (0, _utilsBundle.debug)("pw:adb:send")(data.toString().substring(0, 100) + "...");
      await this._connectPromise;
      await new Promise((f2) => this._socket.write(data, f2));
    }
    close() {
      if (this._isClosed) return;
      (0, _utilsBundle.debug)("pw:adb")("Close " + this._command);
      this._socket.destroy();
    }
    async read(length) {
      await this._connectPromise;
      (0, _assert.assert)(!this._isSocket, "Can not read by length in socket mode");
      while (this._buffer.length < length) await new Promise((f2) => this._notifyReader = f2);
      const result = this._buffer.slice(0, length);
      this._buffer = this._buffer.slice(length);
      (0, _utilsBundle.debug)("pw:adb:recv")(result.toString().substring(0, 100) + "...");
      return result;
    }
    async readAll() {
      while (!this._isClosed) await new Promise((f2) => this._notifyReader = f2);
      return this._buffer;
    }
    becomeSocket() {
      (0, _assert.assert)(!this._buffer.length);
      this._isSocket = true;
    }
  }
  return backendAdb;
}
var bidiChromium = {};
var browserType$1 = {};
var pipeTransport = {};
var hasRequiredPipeTransport;
function requirePipeTransport() {
  if (hasRequiredPipeTransport) return pipeTransport;
  hasRequiredPipeTransport = 1;
  Object.defineProperty(pipeTransport, "__esModule", {
    value: true
  });
  pipeTransport.PipeTransport = void 0;
  var _utils = requireUtils();
  var _debugLogger = requireDebugLogger();
  class PipeTransport {
    constructor(pipeWrite, pipeRead) {
      this._pipeRead = void 0;
      this._pipeWrite = void 0;
      this._pendingBuffers = [];
      this._waitForNextTask = (0, _utils.makeWaitForNextTask)();
      this._closed = false;
      this._onclose = void 0;
      this.onmessage = void 0;
      this._pipeRead = pipeRead;
      this._pipeWrite = pipeWrite;
      pipeRead.on("data", (buffer2) => this._dispatch(buffer2));
      pipeRead.on("close", () => {
        this._closed = true;
        if (this._onclose) this._onclose.call(null);
      });
      pipeRead.on("error", (e2) => _debugLogger.debugLogger.log("error", e2));
      pipeWrite.on("error", (e2) => _debugLogger.debugLogger.log("error", e2));
      this.onmessage = void 0;
    }
    get onclose() {
      return this._onclose;
    }
    set onclose(onclose) {
      this._onclose = onclose;
      if (onclose && !this._pipeRead.readable) onclose();
    }
    send(message) {
      if (this._closed) throw new Error("Pipe has been closed");
      this._pipeWrite.write(JSON.stringify(message));
      this._pipeWrite.write("\0");
    }
    close() {
      throw new Error("unimplemented");
    }
    _dispatch(buffer2) {
      let end = buffer2.indexOf("\0");
      if (end === -1) {
        this._pendingBuffers.push(buffer2);
        return;
      }
      this._pendingBuffers.push(buffer2.slice(0, end));
      const message = Buffer.concat(this._pendingBuffers).toString();
      this._waitForNextTask(() => {
        if (this.onmessage) this.onmessage.call(null, JSON.parse(message));
      });
      let start = end + 1;
      end = buffer2.indexOf("\0", start);
      while (end !== -1) {
        const message2 = buffer2.toString(void 0, start, end);
        this._waitForNextTask(() => {
          if (this.onmessage) this.onmessage.call(null, JSON.parse(message2));
        });
        start = end + 1;
        end = buffer2.indexOf("\0", start);
      }
      this._pendingBuffers = [buffer2.slice(start)];
    }
  }
  pipeTransport.PipeTransport = PipeTransport;
  return pipeTransport;
}
var transport = {};
var hasRequiredTransport;
function requireTransport() {
  if (hasRequiredTransport) return transport;
  hasRequiredTransport = 1;
  Object.defineProperty(transport, "__esModule", {
    value: true
  });
  transport.perMessageDeflate = transport.WebSocketTransport = void 0;
  var _utils = requireUtils();
  var _happyEyeballs = requireHappyEyeballs();
  var _utilsBundle = requireUtilsBundle();
  const perMessageDeflate = transport.perMessageDeflate = {
    clientNoContextTakeover: true,
    zlibDeflateOptions: {
      level: 3
    },
    zlibInflateOptions: {
      chunkSize: 10 * 1024
    },
    threshold: 10 * 1024
  };
  class WebSocketTransport {
    static async connect(progress2, url, headers2, followRedirects, debugLogHeader) {
      return await WebSocketTransport._connect(progress2, url, headers2 || {}, {
        follow: !!followRedirects,
        hadRedirects: false
      }, debugLogHeader);
    }
    static async _connect(progress2, url, headers2, redirect, debugLogHeader) {
      const logUrl = stripQueryParams(url);
      progress2 === null || progress2 === void 0 || progress2.log(`<ws connecting> ${logUrl}`);
      const transport2 = new WebSocketTransport(progress2, url, logUrl, headers2, redirect.follow && redirect.hadRedirects, debugLogHeader);
      let success = false;
      progress2 === null || progress2 === void 0 || progress2.cleanupWhenAborted(async () => {
        if (!success) await transport2.closeAndWait().catch((e2) => null);
      });
      const result = await new Promise((fulfill, reject) => {
        transport2._ws.on("open", async () => {
          progress2 === null || progress2 === void 0 || progress2.log(`<ws connected> ${logUrl}`);
          fulfill({
            transport: transport2
          });
        });
        transport2._ws.on("error", (event) => {
          progress2 === null || progress2 === void 0 || progress2.log(`<ws connect error> ${logUrl} ${event.message}`);
          reject(new Error("WebSocket error: " + event.message));
          transport2._ws.close();
        });
        transport2._ws.on("unexpected-response", (request, response) => {
          if (redirect.follow && !redirect.hadRedirects && (response.statusCode === 301 || response.statusCode === 302 || response.statusCode === 307 || response.statusCode === 308)) {
            fulfill({
              redirect: response
            });
            transport2._ws.close();
            return;
          }
          for (let i = 0; i < response.rawHeaders.length; i += 2) {
            if (debugLogHeader && response.rawHeaders[i] === debugLogHeader) progress2 === null || progress2 === void 0 || progress2.log(response.rawHeaders[i + 1]);
          }
          const chunks = [];
          const errorPrefix = `${logUrl} ${response.statusCode} ${response.statusMessage}`;
          response.on("data", (chunk) => chunks.push(chunk));
          response.on("close", () => {
            const error = chunks.length ? `${errorPrefix}
${Buffer.concat(chunks)}` : errorPrefix;
            progress2 === null || progress2 === void 0 || progress2.log(`<ws unexpected response> ${error}`);
            reject(new Error("WebSocket error: " + error));
            transport2._ws.close();
          });
        });
      });
      if (result.redirect) {
        const newHeaders = Object.fromEntries(Object.entries(headers2 || {}).filter(([name]) => {
          return !name.includes("access-key") && name.toLowerCase() !== "authorization";
        }));
        return WebSocketTransport._connect(progress2, result.redirect.headers.location, newHeaders, {
          follow: true,
          hadRedirects: true
        }, debugLogHeader);
      }
      success = true;
      return transport2;
    }
    constructor(progress2, url, logUrl, headers2, followRedirects, debugLogHeader) {
      var _progress$timeUntilDe;
      this._ws = void 0;
      this._progress = void 0;
      this._logUrl = void 0;
      this.onmessage = void 0;
      this.onclose = void 0;
      this.wsEndpoint = void 0;
      this.headers = [];
      this.wsEndpoint = url;
      this._logUrl = logUrl;
      this._ws = new _utilsBundle.ws(url, [], {
        maxPayload: 256 * 1024 * 1024,
        // 256Mb,
        // Prevent internal http client error when passing negative timeout.
        handshakeTimeout: Math.max((_progress$timeUntilDe = progress2 === null || progress2 === void 0 ? void 0 : progress2.timeUntilDeadline()) !== null && _progress$timeUntilDe !== void 0 ? _progress$timeUntilDe : 3e4, 1),
        headers: headers2,
        followRedirects,
        agent: /^(https|wss):\/\//.test(url) ? _happyEyeballs.httpsHappyEyeballsAgent : _happyEyeballs.httpHappyEyeballsAgent,
        perMessageDeflate
      });
      this._ws.on("upgrade", (response) => {
        for (let i = 0; i < response.rawHeaders.length; i += 2) {
          this.headers.push({
            name: response.rawHeaders[i],
            value: response.rawHeaders[i + 1]
          });
          if (debugLogHeader && response.rawHeaders[i] === debugLogHeader) progress2 === null || progress2 === void 0 || progress2.log(response.rawHeaders[i + 1]);
        }
      });
      this._progress = progress2;
      const messageWrap = (0, _utils.makeWaitForNextTask)();
      this._ws.addEventListener("message", (event) => {
        messageWrap(() => {
          const eventData = event.data;
          let parsedJson;
          try {
            parsedJson = JSON.parse(eventData);
          } catch (e2) {
            var _this$_progress;
            (_this$_progress = this._progress) === null || _this$_progress === void 0 || _this$_progress.log(`<closing ws> Closing websocket due to malformed JSON. eventData=${eventData} e=${e2 === null || e2 === void 0 ? void 0 : e2.message}`);
            this._ws.close();
            return;
          }
          try {
            if (this.onmessage) this.onmessage.call(null, parsedJson);
          } catch (e2) {
            var _this$_progress2;
            (_this$_progress2 = this._progress) === null || _this$_progress2 === void 0 || _this$_progress2.log(`<closing ws> Closing websocket due to failed onmessage callback. eventData=${eventData} e=${e2 === null || e2 === void 0 ? void 0 : e2.message}`);
            this._ws.close();
          }
        });
      });
      this._ws.addEventListener("close", (event) => {
        var _this$_progress3;
        (_this$_progress3 = this._progress) === null || _this$_progress3 === void 0 || _this$_progress3.log(`<ws disconnected> ${logUrl} code=${event.code} reason=${event.reason}`);
        if (this.onclose) this.onclose.call(null, event.reason);
      });
      this._ws.addEventListener("error", (error) => {
        var _this$_progress4;
        return (_this$_progress4 = this._progress) === null || _this$_progress4 === void 0 ? void 0 : _this$_progress4.log(`<ws error> ${logUrl} ${error.type} ${error.message}`);
      });
    }
    send(message) {
      this._ws.send(JSON.stringify(message));
    }
    close() {
      var _this$_progress5;
      (_this$_progress5 = this._progress) === null || _this$_progress5 === void 0 || _this$_progress5.log(`<ws disconnecting> ${this._logUrl}`);
      this._ws.close();
    }
    async closeAndWait() {
      if (this._ws.readyState === _utilsBundle.ws.CLOSED) return;
      const promise = new Promise((f2) => this._ws.once("close", f2));
      this.close();
      await promise;
    }
  }
  transport.WebSocketTransport = WebSocketTransport;
  function stripQueryParams(url) {
    try {
      const u2 = new URL(url);
      u2.search = "";
      u2.hash = "";
      return u2.toString();
    } catch {
      return url;
    }
  }
  return transport;
}
var hasRequiredBrowserType$1;
function requireBrowserType$1() {
  if (hasRequiredBrowserType$1) return browserType$1;
  hasRequiredBrowserType$1 = 1;
  Object.defineProperty(browserType$1, "__esModule", {
    value: true
  });
  browserType$1.kNoXServerRunningError = browserType$1.BrowserType = browserType$1.BrowserReadyState = void 0;
  var _fs = _interopRequireDefault(require$$0$2);
  var _os = _interopRequireDefault(require$$1$3);
  var _path2 = _interopRequireDefault(require$$1$1);
  var _browserContext = requireBrowserContext$1();
  var _timeoutSettings = requireTimeoutSettings$1();
  var _debug = requireDebug$1();
  var _assert = requireAssert$1();
  var _manualPromise = requireManualPromise();
  var _fileUtils = requireFileUtils$1();
  var _helper = requireHelper();
  var _instrumentation = requireInstrumentation();
  var _pipeTransport = requirePipeTransport();
  var _processLauncher = requireProcessLauncher();
  var _progress = requireProgress();
  var _protocolError = requireProtocolError();
  var _registry = requireRegistry();
  var _socksClientCertificatesInterceptor = requireSocksClientCertificatesInterceptor();
  var _transport = requireTransport();
  var _debugLogger = requireDebugLogger();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  browserType$1.kNoXServerRunningError = "Looks like you launched a headed browser without having a XServer running.\nSet either 'headless: true' or use 'xvfb-run <your-playwright-app>' before running Playwright.\n\n<3 Playwright Team";
  class BrowserReadyState {
    constructor() {
      this._wsEndpoint = new _manualPromise.ManualPromise();
    }
    onBrowserExit() {
      this._wsEndpoint.resolve(void 0);
    }
    async waitUntilReady() {
      const wsEndpoint = await this._wsEndpoint;
      return {
        wsEndpoint
      };
    }
  }
  browserType$1.BrowserReadyState = BrowserReadyState;
  class BrowserType extends _instrumentation.SdkObject {
    constructor(parent, browserName) {
      super(parent, "browser-type");
      this._name = void 0;
      this._useBidi = false;
      this.attribution.browserType = this;
      this._name = browserName;
    }
    executablePath() {
      return _registry.registry.findExecutable(this._name).executablePath(this.attribution.playwright.options.sdkLanguage) || "";
    }
    name() {
      return this._name;
    }
    async launch(metadata, options, protocolLogger) {
      options = this._validateLaunchOptions(options);
      if (this._useBidi) options.useWebSocket = true;
      const controller = new _progress.ProgressController(metadata, this);
      controller.setLogName("browser");
      const browser2 = await controller.run((progress2) => {
        const seleniumHubUrl = options.__testHookSeleniumRemoteURL || process.env.SELENIUM_REMOTE_URL;
        if (seleniumHubUrl) return this._launchWithSeleniumHub(progress2, seleniumHubUrl, options);
        return this._innerLaunchWithRetries(progress2, options, void 0, _helper.helper.debugProtocolLogger(protocolLogger)).catch((e2) => {
          throw this._rewriteStartupLog(e2);
        });
      }, _timeoutSettings.TimeoutSettings.launchTimeout(options));
      return browser2;
    }
    async launchPersistentContext(metadata, userDataDir, options) {
      const launchOptions = this._validateLaunchOptions(options);
      if (this._useBidi) launchOptions.useWebSocket = true;
      const controller = new _progress.ProgressController(metadata, this);
      controller.setLogName("browser");
      const browser2 = await controller.run(async (progress2) => {
        var _options$clientCertif;
        let clientCertificatesProxy;
        if ((_options$clientCertif = options.clientCertificates) !== null && _options$clientCertif !== void 0 && _options$clientCertif.length) {
          var _clientCertificatesPr;
          clientCertificatesProxy = new _socksClientCertificatesInterceptor.ClientCertificatesProxy(options);
          launchOptions.proxyOverride = await ((_clientCertificatesPr = clientCertificatesProxy) === null || _clientCertificatesPr === void 0 ? void 0 : _clientCertificatesPr.listen());
          options = {
            ...options
          };
          options.internalIgnoreHTTPSErrors = true;
        }
        progress2.cleanupWhenAborted(() => {
          var _clientCertificatesPr2;
          return (_clientCertificatesPr2 = clientCertificatesProxy) === null || _clientCertificatesPr2 === void 0 ? void 0 : _clientCertificatesPr2.close();
        });
        const browser3 = await this._innerLaunchWithRetries(progress2, launchOptions, options, _helper.helper.debugProtocolLogger(), userDataDir).catch((e2) => {
          throw this._rewriteStartupLog(e2);
        });
        browser3._defaultContext._clientCertificatesProxy = clientCertificatesProxy;
        return browser3;
      }, _timeoutSettings.TimeoutSettings.launchTimeout(launchOptions));
      return browser2._defaultContext;
    }
    async _innerLaunchWithRetries(progress2, options, persistent, protocolLogger, userDataDir) {
      try {
        return await this._innerLaunch(progress2, options, persistent, protocolLogger, userDataDir);
      } catch (error) {
        const errorMessage = typeof error === "object" && typeof error.message === "string" ? error.message : "";
        if (errorMessage.includes("Inconsistency detected by ld.so")) {
          progress2.log(`<restarting browser due to hitting race condition in glibc>`);
          return this._innerLaunch(progress2, options, persistent, protocolLogger, userDataDir);
        }
        throw error;
      }
    }
    async _innerLaunch(progress2, options, persistent, protocolLogger, maybeUserDataDir) {
      options.proxy = options.proxy ? (0, _browserContext.normalizeProxySettings)(options.proxy) : void 0;
      const browserLogsCollector = new _debugLogger.RecentLogsCollector();
      const {
        browserProcess,
        userDataDir,
        artifactsDir,
        transport: transport2
      } = await this._launchProcess(progress2, options, !!persistent, browserLogsCollector, maybeUserDataDir);
      if (options.__testHookBeforeCreateBrowser) await options.__testHookBeforeCreateBrowser();
      const browserOptions = {
        name: this._name,
        isChromium: this._name === "chromium",
        channel: options.channel,
        slowMo: options.slowMo,
        persistent,
        headful: !options.headless,
        artifactsDir,
        downloadsPath: options.downloadsPath || artifactsDir,
        tracesDir: options.tracesDir || artifactsDir,
        browserProcess,
        customExecutablePath: options.executablePath,
        proxy: options.proxy,
        protocolLogger,
        browserLogsCollector,
        wsEndpoint: options.useWebSocket ? transport2.wsEndpoint : void 0,
        originalLaunchOptions: options
      };
      if (persistent) (0, _browserContext.validateBrowserContextOptions)(persistent, browserOptions);
      copyTestHooks(options, browserOptions);
      const browser2 = await this.connectToTransport(transport2, browserOptions);
      browser2._userDataDirForTest = userDataDir;
      if (persistent && !options.ignoreAllDefaultArgs) await browser2._defaultContext._loadDefaultContext(progress2);
      return browser2;
    }
    async _launchProcess(progress2, options, isPersistent, browserLogsCollector, userDataDir) {
      var _await$readyState$wai;
      const {
        ignoreDefaultArgs,
        ignoreAllDefaultArgs,
        args = [],
        executablePath = null,
        handleSIGINT = true,
        handleSIGTERM = true,
        handleSIGHUP = true
      } = options;
      const env2 = options.env ? (0, _processLauncher.envArrayToObject)(options.env) : process.env;
      await this._createArtifactDirs(options);
      const tempDirectories = [];
      const artifactsDir = await _fs.default.promises.mkdtemp(_path2.default.join(_os.default.tmpdir(), "playwright-artifacts-"));
      tempDirectories.push(artifactsDir);
      if (userDataDir) {
        (0, _assert.assert)(_path2.default.isAbsolute(userDataDir), "userDataDir must be an absolute path");
        if (!await (0, _fileUtils.existsAsync)(userDataDir)) await _fs.default.promises.mkdir(userDataDir, {
          recursive: true,
          mode: 448
        });
      } else {
        userDataDir = await _fs.default.promises.mkdtemp(_path2.default.join(_os.default.tmpdir(), `playwright_${this._name}dev_profile-`));
        tempDirectories.push(userDataDir);
      }
      await this.prepareUserDataDir(options, userDataDir);
      const browserArguments = [];
      if (ignoreAllDefaultArgs) browserArguments.push(...args);
      else if (ignoreDefaultArgs) browserArguments.push(...this.defaultArgs(options, isPersistent, userDataDir).filter((arg) => ignoreDefaultArgs.indexOf(arg) === -1));
      else browserArguments.push(...this.defaultArgs(options, isPersistent, userDataDir));
      let executable;
      if (executablePath) {
        if (!await (0, _fileUtils.existsAsync)(executablePath)) throw new Error(`Failed to launch ${this._name} because executable doesn't exist at ${executablePath}`);
        executable = executablePath;
      } else {
        const registryExecutable = _registry.registry.findExecutable(this.getExecutableName(options));
        if (!registryExecutable || registryExecutable.browserName !== this._name) throw new Error(`Unsupported ${this._name} channel "${options.channel}"`);
        executable = registryExecutable.executablePathOrDie(this.attribution.playwright.options.sdkLanguage);
        await _registry.registry.validateHostRequirementsForExecutablesIfNeeded([registryExecutable], this.attribution.playwright.options.sdkLanguage);
      }
      const readyState = this.readyState(options);
      let transport2 = void 0;
      let browserProcess = void 0;
      const {
        launchedProcess,
        gracefullyClose,
        kill
      } = await (0, _processLauncher.launchProcess)({
        command: executable,
        args: browserArguments,
        env: this.amendEnvironment(env2, userDataDir, executable, browserArguments),
        handleSIGINT,
        handleSIGTERM,
        handleSIGHUP,
        log: (message) => {
          readyState === null || readyState === void 0 || readyState.onBrowserOutput(message);
          progress2.log(message);
          browserLogsCollector.log(message);
        },
        stdio: "pipe",
        tempDirectories,
        attemptToGracefullyClose: async () => {
          if (options.__testHookGracefullyClose) await options.__testHookGracefullyClose();
          this.attemptToGracefullyCloseBrowser(transport2);
        },
        onExit: (exitCode, signal) => {
          readyState === null || readyState === void 0 || readyState.onBrowserExit();
          if (browserProcess && browserProcess.onclose) browserProcess.onclose(exitCode, signal);
        }
      });
      async function closeOrKill(timeout) {
        let timer;
        try {
          await Promise.race([gracefullyClose(), new Promise((resolve2, reject) => timer = setTimeout(reject, timeout))]);
        } catch (ignored) {
          await kill().catch((ignored2) => {
          });
        } finally {
          clearTimeout(timer);
        }
      }
      browserProcess = {
        onclose: void 0,
        process: launchedProcess,
        close: () => closeOrKill(options.__testHookBrowserCloseTimeout || _timeoutSettings.DEFAULT_TIMEOUT),
        kill
      };
      progress2.cleanupWhenAborted(() => closeOrKill(progress2.timeUntilDeadline()));
      const wsEndpoint = (_await$readyState$wai = await (readyState === null || readyState === void 0 ? void 0 : readyState.waitUntilReady())) === null || _await$readyState$wai === void 0 ? void 0 : _await$readyState$wai.wsEndpoint;
      if (options.useWebSocket) {
        transport2 = await _transport.WebSocketTransport.connect(progress2, wsEndpoint);
      } else {
        const stdio = launchedProcess.stdio;
        transport2 = new _pipeTransport.PipeTransport(stdio[3], stdio[4]);
      }
      return {
        browserProcess,
        artifactsDir,
        userDataDir,
        transport: transport2
      };
    }
    async _createArtifactDirs(options) {
      if (options.downloadsPath) await _fs.default.promises.mkdir(options.downloadsPath, {
        recursive: true
      });
      if (options.tracesDir) await _fs.default.promises.mkdir(options.tracesDir, {
        recursive: true
      });
    }
    async connectOverCDP(metadata, endpointURL, options, timeout) {
      throw new Error("CDP connections are only supported by Chromium");
    }
    async _launchWithSeleniumHub(progress2, hubUrl, options) {
      throw new Error("Connecting to SELENIUM_REMOTE_URL is only supported by Chromium");
    }
    _validateLaunchOptions(options) {
      const {
        devtools = false
      } = options;
      let {
        headless = !devtools,
        downloadsPath,
        proxy
      } = options;
      if ((0, _debug.debugMode)()) headless = false;
      if (downloadsPath && !_path2.default.isAbsolute(downloadsPath)) downloadsPath = _path2.default.join(process.cwd(), downloadsPath);
      if (this.attribution.playwright.options.socksProxyPort) proxy = {
        server: `socks5://127.0.0.1:${this.attribution.playwright.options.socksProxyPort}`
      };
      return {
        ...options,
        devtools,
        headless,
        downloadsPath,
        proxy
      };
    }
    _createUserDataDirArgMisuseError(userDataDirArg) {
      switch (this.attribution.playwright.options.sdkLanguage) {
        case "java":
          return new Error(`Pass userDataDir parameter to 'BrowserType.launchPersistentContext(userDataDir, options)' instead of specifying '${userDataDirArg}' argument`);
        case "python":
          return new Error(`Pass user_data_dir parameter to 'browser_type.launch_persistent_context(user_data_dir, **kwargs)' instead of specifying '${userDataDirArg}' argument`);
        case "csharp":
          return new Error(`Pass userDataDir parameter to 'BrowserType.LaunchPersistentContextAsync(userDataDir, options)' instead of specifying '${userDataDirArg}' argument`);
        default:
          return new Error(`Pass userDataDir parameter to 'browserType.launchPersistentContext(userDataDir, options)' instead of specifying '${userDataDirArg}' argument`);
      }
    }
    _rewriteStartupLog(error) {
      if (!(0, _protocolError.isProtocolError)(error)) return error;
      return this.doRewriteStartupLog(error);
    }
    readyState(options) {
      return void 0;
    }
    async prepareUserDataDir(options, userDataDir) {
    }
    getExecutableName(options) {
      return options.channel || this._name;
    }
  }
  browserType$1.BrowserType = BrowserType;
  function copyTestHooks(from, to) {
    for (const [key, value] of Object.entries(from)) {
      if (key.startsWith("__testHook")) to[key] = value;
    }
  }
  return browserType$1;
}
var bidiBrowser = {};
var bidiConnection = {};
var hasRequiredBidiConnection;
function requireBidiConnection() {
  if (hasRequiredBidiConnection) return bidiConnection;
  hasRequiredBidiConnection = 1;
  Object.defineProperty(bidiConnection, "__esModule", {
    value: true
  });
  bidiConnection.kBrowserCloseMessageId = bidiConnection.BidiSession = bidiConnection.BidiConnection = void 0;
  var _events = require$$0$4;
  var _debugLogger = requireDebugLogger();
  var _helper = requireHelper();
  var _protocolError = requireProtocolError();
  const kBrowserCloseMessageId = bidiConnection.kBrowserCloseMessageId = 0;
  class BidiConnection {
    constructor(transport2, onDisconnect, protocolLogger, browserLogsCollector) {
      this._transport = void 0;
      this._onDisconnect = void 0;
      this._protocolLogger = void 0;
      this._browserLogsCollector = void 0;
      this._browserDisconnectedLogs = void 0;
      this._lastId = 0;
      this._closed = false;
      this.browserSession = void 0;
      this._browsingContextToSession = /* @__PURE__ */ new Map();
      this._transport = transport2;
      this._onDisconnect = onDisconnect;
      this._protocolLogger = protocolLogger;
      this._browserLogsCollector = browserLogsCollector;
      this.browserSession = new BidiSession(this, "", (message) => {
        this.rawSend(message);
      });
      this._transport.onmessage = this._dispatchMessage.bind(this);
      this._transport.onclose = this._onClose.bind(this);
    }
    nextMessageId() {
      return ++this._lastId;
    }
    rawSend(message) {
      this._protocolLogger("send", message);
      this._transport.send(message);
    }
    _dispatchMessage(message) {
      this._protocolLogger("receive", message);
      const object = message;
      if (object.type === "event") {
        var _object$params$source;
        let context;
        if ("context" in object.params) context = object.params.context;
        else if (object.method === "log.entryAdded" || object.method === "script.message") context = (_object$params$source = object.params.source) === null || _object$params$source === void 0 ? void 0 : _object$params$source.context;
        if (context) {
          const session = this._browsingContextToSession.get(context);
          if (session) {
            session.dispatchMessage(message);
            return;
          }
        }
      } else if (message.id) {
        for (const session of this._browsingContextToSession.values()) {
          if (session.hasCallback(message.id)) {
            session.dispatchMessage(message);
            return;
          }
        }
      }
      this.browserSession.dispatchMessage(message);
    }
    _onClose(reason) {
      this._closed = true;
      this._transport.onmessage = void 0;
      this._transport.onclose = void 0;
      this._browserDisconnectedLogs = _helper.helper.formatBrowserLogs(this._browserLogsCollector.recentLogs(), reason);
      this.browserSession.dispose();
      this._onDisconnect();
    }
    isClosed() {
      return this._closed;
    }
    close() {
      if (!this._closed) this._transport.close();
    }
    createMainFrameBrowsingContextSession(bowsingContextId) {
      const result = new BidiSession(this, bowsingContextId, (message) => this.rawSend(message));
      this._browsingContextToSession.set(bowsingContextId, result);
      return result;
    }
  }
  bidiConnection.BidiConnection = BidiConnection;
  class BidiSession extends _events.EventEmitter {
    constructor(connection2, sessionId, rawSend) {
      super();
      this.connection = void 0;
      this.sessionId = void 0;
      this._disposed = false;
      this._rawSend = void 0;
      this._callbacks = /* @__PURE__ */ new Map();
      this._crashed = false;
      this._browsingContexts = /* @__PURE__ */ new Set();
      this.on = void 0;
      this.addListener = void 0;
      this.off = void 0;
      this.removeListener = void 0;
      this.once = void 0;
      this.setMaxListeners(0);
      this.connection = connection2;
      this.sessionId = sessionId;
      this._rawSend = rawSend;
      this.on = super.on;
      this.off = super.removeListener;
      this.addListener = super.addListener;
      this.removeListener = super.removeListener;
      this.once = super.once;
    }
    addFrameBrowsingContext(context) {
      this._browsingContexts.add(context);
      this.connection._browsingContextToSession.set(context, this);
    }
    removeFrameBrowsingContext(context) {
      this._browsingContexts.delete(context);
      this.connection._browsingContextToSession.delete(context);
    }
    async send(method, params) {
      if (this._crashed || this._disposed || this.connection._browserDisconnectedLogs) throw new _protocolError.ProtocolError(this._crashed ? "crashed" : "closed", void 0, this.connection._browserDisconnectedLogs);
      const id = this.connection.nextMessageId();
      const messageObj = {
        id,
        method,
        params
      };
      this._rawSend(messageObj);
      return new Promise((resolve2, reject) => {
        this._callbacks.set(id, {
          resolve: resolve2,
          reject,
          error: new _protocolError.ProtocolError("error", method)
        });
      });
    }
    sendMayFail(method, params) {
      return this.send(method, params).catch((error) => _debugLogger.debugLogger.log("error", error));
    }
    markAsCrashed() {
      this._crashed = true;
    }
    isDisposed() {
      return this._disposed;
    }
    dispose() {
      this._disposed = true;
      this.connection._browsingContextToSession.delete(this.sessionId);
      for (const context of this._browsingContexts) this.connection._browsingContextToSession.delete(context);
      this._browsingContexts.clear();
      for (const callback of this._callbacks.values()) {
        callback.error.type = this._crashed ? "crashed" : "closed";
        callback.error.logs = this.connection._browserDisconnectedLogs;
        callback.reject(callback.error);
      }
      this._callbacks.clear();
    }
    hasCallback(id) {
      return this._callbacks.has(id);
    }
    dispatchMessage(message) {
      const object = message;
      if (object.id === kBrowserCloseMessageId) return;
      if (object.id && this._callbacks.has(object.id)) {
        const callback = this._callbacks.get(object.id);
        this._callbacks.delete(object.id);
        if (object.type === "error") {
          callback.error.setMessage(object.error + "\nMessage: " + object.message);
          callback.reject(callback.error);
        } else if (object.type === "success") {
          callback.resolve(object.result);
        } else {
          callback.error.setMessage("Internal error, unexpected response type: " + JSON.stringify(object));
          callback.reject(callback.error);
        }
      } else if (object.id) ;
      else {
        Promise.resolve().then(() => this.emit(object.method, object.params));
      }
    }
  }
  bidiConnection.BidiSession = BidiSession;
  return bidiConnection;
}
var bidiNetworkManager = {};
var cookieStore = {};
var hasRequiredCookieStore;
function requireCookieStore() {
  if (hasRequiredCookieStore) return cookieStore;
  hasRequiredCookieStore = 1;
  Object.defineProperty(cookieStore, "__esModule", {
    value: true
  });
  cookieStore.CookieStore = void 0;
  cookieStore.domainMatches = domainMatches;
  cookieStore.parseRawCookie = parseRawCookie;
  var _network = requireNetwork$1();
  class Cookie {
    constructor(data) {
      this._raw = void 0;
      this._raw = data;
    }
    name() {
      return this._raw.name;
    }
    // https://datatracker.ietf.org/doc/html/rfc6265#section-5.4
    matches(url) {
      if (this._raw.secure && url.protocol !== "https:" && url.hostname !== "localhost") return false;
      if (!domainMatches(url.hostname, this._raw.domain)) return false;
      if (!pathMatches(url.pathname, this._raw.path)) return false;
      return true;
    }
    equals(other) {
      return this._raw.name === other._raw.name && this._raw.domain === other._raw.domain && this._raw.path === other._raw.path;
    }
    networkCookie() {
      return this._raw;
    }
    updateExpiresFrom(other) {
      this._raw.expires = other._raw.expires;
    }
    expired() {
      if (this._raw.expires === -1) return false;
      return this._raw.expires * 1e3 < Date.now();
    }
  }
  class CookieStore {
    constructor() {
      this._nameToCookies = /* @__PURE__ */ new Map();
    }
    addCookies(cookies) {
      for (const cookie of cookies) this._addCookie(new Cookie(cookie));
    }
    cookies(url) {
      const result = [];
      for (const cookie of this._cookiesIterator()) {
        if (cookie.matches(url)) result.push(cookie.networkCookie());
      }
      return result;
    }
    allCookies() {
      const result = [];
      for (const cookie of this._cookiesIterator()) result.push(cookie.networkCookie());
      return result;
    }
    _addCookie(cookie) {
      let set = this._nameToCookies.get(cookie.name());
      if (!set) {
        set = /* @__PURE__ */ new Set();
        this._nameToCookies.set(cookie.name(), set);
      }
      for (const other of set) {
        if (other.equals(cookie)) set.delete(other);
      }
      set.add(cookie);
      CookieStore.pruneExpired(set);
    }
    *_cookiesIterator() {
      for (const [name, cookies] of this._nameToCookies) {
        CookieStore.pruneExpired(cookies);
        for (const cookie of cookies) yield cookie;
        if (cookies.size === 0) this._nameToCookies.delete(name);
      }
    }
    static pruneExpired(cookies) {
      for (const cookie of cookies) {
        if (cookie.expired()) cookies.delete(cookie);
      }
    }
  }
  cookieStore.CookieStore = CookieStore;
  function parseRawCookie(header) {
    const pairs = header.split(";").filter((s2) => s2.trim().length > 0).map((p) => {
      let key = "";
      let value2 = "";
      const separatorPos = p.indexOf("=");
      if (separatorPos === -1) {
        key = p.trim();
      } else {
        key = p.slice(0, separatorPos).trim();
        value2 = p.slice(separatorPos + 1).trim();
      }
      return [key, value2];
    });
    if (!pairs.length) return null;
    const [name, value] = pairs[0];
    const cookie = {
      name,
      value
    };
    for (let i = 1; i < pairs.length; i++) {
      const [name2, value2] = pairs[i];
      switch (name2.toLowerCase()) {
        case "expires":
          const expiresMs = +new Date(value2);
          if (isFinite(expiresMs)) {
            if (expiresMs <= 0) cookie.expires = 0;
            else cookie.expires = Math.min(expiresMs / 1e3, _network.kMaxCookieExpiresDateInSeconds);
          }
          break;
        case "max-age":
          const maxAgeSec = parseInt(value2, 10);
          if (isFinite(maxAgeSec)) {
            if (maxAgeSec <= 0) cookie.expires = 0;
            else cookie.expires = Math.min(Date.now() / 1e3 + maxAgeSec, _network.kMaxCookieExpiresDateInSeconds);
          }
          break;
        case "domain":
          cookie.domain = value2.toLocaleLowerCase() || "";
          if (cookie.domain && !cookie.domain.startsWith(".") && cookie.domain.includes(".")) cookie.domain = "." + cookie.domain;
          break;
        case "path":
          cookie.path = value2 || "";
          break;
        case "secure":
          cookie.secure = true;
          break;
        case "httponly":
          cookie.httpOnly = true;
          break;
        case "samesite":
          switch (value2.toLowerCase()) {
            case "none":
              cookie.sameSite = "None";
              break;
            case "lax":
              cookie.sameSite = "Lax";
              break;
            case "strict":
              cookie.sameSite = "Strict";
              break;
          }
          break;
      }
    }
    return cookie;
  }
  function domainMatches(value, domain) {
    if (value === domain) return true;
    if (!domain.startsWith(".")) return false;
    value = "." + value;
    return value.endsWith(domain);
  }
  function pathMatches(value, path) {
    if (value === path) return true;
    if (!value.endsWith("/")) value = value + "/";
    if (!path.endsWith("/")) path = path + "/";
    return value.startsWith(path);
  }
  return cookieStore;
}
var bidiProtocol = {};
var hasRequiredBidiProtocol;
function requireBidiProtocol() {
  if (hasRequiredBidiProtocol) return bidiProtocol;
  hasRequiredBidiProtocol = 1;
  Object.defineProperty(bidiProtocol, "__esModule", {
    value: true
  });
  bidiProtocol.Storage = bidiProtocol.Session = bidiProtocol.Script = bidiProtocol.Network = bidiProtocol.Log = bidiProtocol.Input = bidiProtocol.ErrorCode = bidiProtocol.BrowsingContext = bidiProtocol.Browser = void 0;
  /**
   * @license
   * Copyright 2024 Google Inc.
   * Modifications copyright (c) Microsoft Corporation.
   * SPDX-License-Identifier: Apache-2.0
   */
  bidiProtocol.ErrorCode = /* @__PURE__ */ function(ErrorCode) {
    ErrorCode["InvalidArgument"] = "invalid argument";
    ErrorCode["InvalidSelector"] = "invalid selector";
    ErrorCode["InvalidSessionId"] = "invalid session id";
    ErrorCode["MoveTargetOutOfBounds"] = "move target out of bounds";
    ErrorCode["NoSuchAlert"] = "no such alert";
    ErrorCode["NoSuchElement"] = "no such element";
    ErrorCode["NoSuchFrame"] = "no such frame";
    ErrorCode["NoSuchHandle"] = "no such handle";
    ErrorCode["NoSuchHistoryEntry"] = "no such history entry";
    ErrorCode["NoSuchIntercept"] = "no such intercept";
    ErrorCode["NoSuchNode"] = "no such node";
    ErrorCode["NoSuchRequest"] = "no such request";
    ErrorCode["NoSuchScript"] = "no such script";
    ErrorCode["NoSuchStoragePartition"] = "no such storage partition";
    ErrorCode["NoSuchUserContext"] = "no such user context";
    ErrorCode["SessionNotCreated"] = "session not created";
    ErrorCode["UnableToCaptureScreen"] = "unable to capture screen";
    ErrorCode["UnableToCloseBrowser"] = "unable to close browser";
    ErrorCode["UnableToSetCookie"] = "unable to set cookie";
    ErrorCode["UnableToSetFileInput"] = "unable to set file input";
    ErrorCode["UnderspecifiedStoragePartition"] = "underspecified storage partition";
    ErrorCode["UnknownCommand"] = "unknown command";
    ErrorCode["UnknownError"] = "unknown error";
    ErrorCode["UnsupportedOperation"] = "unsupported operation";
    return ErrorCode;
  }({});
  let Session = bidiProtocol.Session = void 0;
  (function(_Session10) {
    let UserPromptHandlerType = /* @__PURE__ */ function(UserPromptHandlerType2) {
      UserPromptHandlerType2["Accept"] = "accept";
      UserPromptHandlerType2["Dismiss"] = "dismiss";
      UserPromptHandlerType2["Ignore"] = "ignore";
      return UserPromptHandlerType2;
    }({});
    _Session10.UserPromptHandlerType = UserPromptHandlerType;
  })(Session || (bidiProtocol.Session = Session = {}));
  bidiProtocol.Browser = void 0;
  let BrowsingContext = bidiProtocol.BrowsingContext = void 0;
  (function(_BrowsingContext10) {
    let ReadinessState = /* @__PURE__ */ function(ReadinessState2) {
      ReadinessState2["None"] = "none";
      ReadinessState2["Interactive"] = "interactive";
      ReadinessState2["Complete"] = "complete";
      return ReadinessState2;
    }({});
    _BrowsingContext10.ReadinessState = ReadinessState;
  })(BrowsingContext || (bidiProtocol.BrowsingContext = BrowsingContext = {}));
  (function(_BrowsingContext11) {
    let UserPromptType = /* @__PURE__ */ function(UserPromptType2) {
      UserPromptType2["Alert"] = "alert";
      UserPromptType2["Beforeunload"] = "beforeunload";
      UserPromptType2["Confirm"] = "confirm";
      UserPromptType2["Prompt"] = "prompt";
      return UserPromptType2;
    }({});
    _BrowsingContext11.UserPromptType = UserPromptType;
  })(BrowsingContext || (bidiProtocol.BrowsingContext = BrowsingContext = {}));
  (function(_BrowsingContext24) {
    let CreateType = /* @__PURE__ */ function(CreateType2) {
      CreateType2["Tab"] = "tab";
      CreateType2["Window"] = "window";
      return CreateType2;
    }({});
    _BrowsingContext24.CreateType = CreateType;
  })(BrowsingContext || (bidiProtocol.BrowsingContext = BrowsingContext = {}));
  let Network = bidiProtocol.Network = void 0;
  (function(_Network6) {
    let SameSite = /* @__PURE__ */ function(SameSite2) {
      SameSite2["Strict"] = "strict";
      SameSite2["Lax"] = "lax";
      SameSite2["None"] = "none";
      return SameSite2;
    }({});
    _Network6.SameSite = SameSite;
  })(Network || (bidiProtocol.Network = Network = {}));
  (function(_Network23) {
    let InterceptPhase = /* @__PURE__ */ function(InterceptPhase2) {
      InterceptPhase2["BeforeRequestSent"] = "beforeRequestSent";
      InterceptPhase2["ResponseStarted"] = "responseStarted";
      InterceptPhase2["AuthRequired"] = "authRequired";
      return InterceptPhase2;
    }({});
    _Network23.InterceptPhase = InterceptPhase;
  })(Network || (bidiProtocol.Network = Network = {}));
  let Script = bidiProtocol.Script = void 0;
  (function(_Script68) {
    let ResultOwnership = /* @__PURE__ */ function(ResultOwnership2) {
      ResultOwnership2["Root"] = "root";
      ResultOwnership2["None"] = "none";
      return ResultOwnership2;
    }({});
    _Script68.ResultOwnership = ResultOwnership;
  })(Script || (bidiProtocol.Script = Script = {}));
  bidiProtocol.Storage = void 0;
  let Log = bidiProtocol.Log = void 0;
  (function(_Log7) {
    let Level = /* @__PURE__ */ function(Level2) {
      Level2["Debug"] = "debug";
      Level2["Info"] = "info";
      Level2["Warn"] = "warn";
      Level2["Error"] = "error";
      return Level2;
    }({});
    _Log7.Level = Level;
  })(Log || (bidiProtocol.Log = Log = {}));
  let Input = bidiProtocol.Input = void 0;
  (function(_Input9) {
    let PointerType = /* @__PURE__ */ function(PointerType2) {
      PointerType2["Mouse"] = "mouse";
      PointerType2["Pen"] = "pen";
      PointerType2["Touch"] = "touch";
      return PointerType2;
    }({});
    _Input9.PointerType = PointerType;
  })(Input || (bidiProtocol.Input = Input = {}));
  return bidiProtocol;
}
var hasRequiredBidiNetworkManager;
function requireBidiNetworkManager() {
  if (hasRequiredBidiNetworkManager) return bidiNetworkManager;
  hasRequiredBidiNetworkManager = 1;
  Object.defineProperty(bidiNetworkManager, "__esModule", {
    value: true
  });
  bidiNetworkManager.BidiNetworkManager = void 0;
  bidiNetworkManager.bidiBytesValueToString = bidiBytesValueToString;
  var _eventsHelper = requireEventsHelper();
  var _cookieStore = requireCookieStore();
  var network2 = _interopRequireWildcard(requireNetwork$1());
  var bidi = _interopRequireWildcard(requireBidiProtocol());
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  class BidiNetworkManager {
    constructor(bidiSession, page2, onNavigationResponseStarted) {
      this._session = void 0;
      this._requests = void 0;
      this._page = void 0;
      this._eventListeners = void 0;
      this._onNavigationResponseStarted = void 0;
      this._userRequestInterceptionEnabled = false;
      this._protocolRequestInterceptionEnabled = false;
      this._credentials = void 0;
      this._intercepId = void 0;
      this._session = bidiSession;
      this._requests = /* @__PURE__ */ new Map();
      this._page = page2;
      this._onNavigationResponseStarted = onNavigationResponseStarted;
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(bidiSession, "network.beforeRequestSent", this._onBeforeRequestSent.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "network.responseStarted", this._onResponseStarted.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "network.responseCompleted", this._onResponseCompleted.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "network.fetchError", this._onFetchError.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "network.authRequired", this._onAuthRequired.bind(this))];
    }
    dispose() {
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
    }
    _onBeforeRequestSent(param) {
      if (param.request.url.startsWith("data:")) return;
      const redirectedFrom = param.redirectCount ? this._requests.get(param.request.request) || null : null;
      const frame2 = redirectedFrom ? redirectedFrom.request.frame() : param.context ? this._page._frameManager.frame(param.context) : null;
      if (!frame2) return;
      if (redirectedFrom) this._requests.delete(redirectedFrom._id);
      let route;
      if (param.intercepts) {
        if (redirectedFrom) {
          var _redirectedFrom$_orig, _redirectedFrom$_orig2;
          let params = {};
          if ((_redirectedFrom$_orig = redirectedFrom._originalRequestRoute) !== null && _redirectedFrom$_orig !== void 0 && _redirectedFrom$_orig._alreadyContinuedHeaders) params = toBidiRequestHeaders((_redirectedFrom$_orig2 = redirectedFrom._originalRequestRoute._alreadyContinuedHeaders) !== null && _redirectedFrom$_orig2 !== void 0 ? _redirectedFrom$_orig2 : []);
          this._session.sendMayFail("network.continueRequest", {
            request: param.request.request,
            ...params
          });
        } else {
          route = new BidiRouteImpl(this._session, param.request.request);
        }
      }
      const request = new BidiRequest(frame2, redirectedFrom, param, route);
      this._requests.set(request._id, request);
      this._page._frameManager.requestStarted(request.request, route);
    }
    _onResponseStarted(params) {
      const request = this._requests.get(params.request.request);
      if (!request) return;
      const getResponseBody = async () => {
        throw new Error(`Response body is not available for requests in Bidi`);
      };
      const timings = params.request.timings;
      const startTime = timings.requestTime;
      function relativeToStart(time2) {
        if (!time2) return -1;
        return time2 - startTime;
      }
      const timing = {
        startTime,
        requestStart: relativeToStart(timings.requestStart),
        responseStart: relativeToStart(timings.responseStart),
        domainLookupStart: relativeToStart(timings.dnsStart),
        domainLookupEnd: relativeToStart(timings.dnsEnd),
        connectStart: relativeToStart(timings.connectStart),
        secureConnectionStart: relativeToStart(timings.tlsStart),
        connectEnd: relativeToStart(timings.connectEnd)
      };
      const response = new network2.Response(request.request, params.response.status, params.response.statusText, fromBidiHeaders(params.response.headers), timing, getResponseBody, false);
      response._serverAddrFinished();
      response._securityDetailsFinished();
      response.setRawResponseHeaders(null);
      response.setResponseHeadersSize(params.response.headersSize);
      this._page._frameManager.requestReceivedResponse(response);
      if (params.navigation) this._onNavigationResponseStarted(params);
    }
    _onResponseCompleted(params) {
      const request = this._requests.get(params.request.request);
      if (!request) return;
      const response = request.request._existingResponse();
      response.setTransferSize(params.response.bodySize);
      response.setEncodedBodySize(params.response.bodySize);
      const isRedirected = response.status() >= 300 && response.status() <= 399;
      const responseEndTime = params.request.timings.responseEnd - response.timing().startTime;
      if (isRedirected) {
        response._requestFinished(responseEndTime);
      } else {
        this._requests.delete(request._id);
        response._requestFinished(responseEndTime);
      }
      response._setHttpVersion(params.response.protocol);
      this._page._frameManager.reportRequestFinished(request.request, response);
    }
    _onFetchError(params) {
      const request = this._requests.get(params.request.request);
      if (!request) return;
      this._requests.delete(request._id);
      const response = request.request._existingResponse();
      if (response) {
        response.setTransferSize(null);
        response.setEncodedBodySize(null);
        response._requestFinished(-1);
      }
      request.request._setFailureText(params.errorText);
      this._page._frameManager.requestFailed(request.request, params.errorText === "NS_BINDING_ABORTED");
    }
    _onAuthRequired(params) {
      var _params$response$auth;
      const isBasic = (_params$response$auth = params.response.authChallenges) === null || _params$response$auth === void 0 ? void 0 : _params$response$auth.some((challenge) => challenge.scheme.startsWith("Basic"));
      const credentials = this._page._browserContext._options.httpCredentials;
      if (isBasic && credentials) {
        this._session.sendMayFail("network.continueWithAuth", {
          request: params.request.request,
          action: "provideCredentials",
          credentials: {
            type: "password",
            username: credentials.username,
            password: credentials.password
          }
        });
      } else {
        this._session.sendMayFail("network.continueWithAuth", {
          request: params.request.request,
          action: "default"
        });
      }
    }
    async setRequestInterception(value) {
      this._userRequestInterceptionEnabled = value;
      await this._updateProtocolRequestInterception();
    }
    async setCredentials(credentials) {
      this._credentials = credentials;
      await this._updateProtocolRequestInterception();
    }
    async _updateProtocolRequestInterception(initial) {
      const enabled = this._userRequestInterceptionEnabled || !!this._credentials;
      if (enabled === this._protocolRequestInterceptionEnabled) return;
      this._protocolRequestInterceptionEnabled = enabled;
      if (initial && !enabled) return;
      const cachePromise = this._session.send("network.setCacheBehavior", {
        cacheBehavior: enabled ? "bypass" : "default"
      });
      let interceptPromise = Promise.resolve(void 0);
      if (enabled) {
        interceptPromise = this._session.send("network.addIntercept", {
          phases: [bidi.Network.InterceptPhase.AuthRequired, bidi.Network.InterceptPhase.BeforeRequestSent],
          urlPatterns: [{
            type: "pattern"
          }]
          // urlPatterns: [{ type: 'string', pattern: '*' }],
        }).then((r2) => {
          this._intercepId = r2.intercept;
        });
      } else if (this._intercepId) {
        interceptPromise = this._session.send("network.removeIntercept", {
          intercept: this._intercepId
        });
        this._intercepId = void 0;
      }
      await Promise.all([cachePromise, interceptPromise]);
    }
  }
  bidiNetworkManager.BidiNetworkManager = BidiNetworkManager;
  class BidiRequest {
    constructor(frame2, redirectedFrom, payload, route) {
      var _payload$navigation;
      this.request = void 0;
      this._id = void 0;
      this._redirectedTo = void 0;
      this._originalRequestRoute = void 0;
      this._id = payload.request.request;
      if (redirectedFrom) redirectedFrom._redirectedTo = this;
      const postDataBuffer = null;
      this.request = new network2.Request(frame2._page._browserContext, frame2, null, redirectedFrom ? redirectedFrom.request : null, (_payload$navigation = payload.navigation) !== null && _payload$navigation !== void 0 ? _payload$navigation : void 0, payload.request.url, "other", payload.request.method, postDataBuffer, fromBidiHeaders(payload.request.headers));
      this.request.setRawRequestHeaders(null);
      this.request._setBodySize(payload.request.bodySize || 0);
      this._originalRequestRoute = route !== null && route !== void 0 ? route : redirectedFrom === null || redirectedFrom === void 0 ? void 0 : redirectedFrom._originalRequestRoute;
      route === null || route === void 0 || route._setRequest(this.request);
    }
    _finalRequest() {
      let request = this;
      while (request._redirectedTo) request = request._redirectedTo;
      return request;
    }
  }
  class BidiRouteImpl {
    constructor(session, requestId) {
      this._requestId = void 0;
      this._session = void 0;
      this._request = void 0;
      this._alreadyContinuedHeaders = void 0;
      this._session = session;
      this._requestId = requestId;
    }
    _setRequest(request) {
      this._request = request;
    }
    async continue(overrides) {
      let headers2 = overrides.headers || this._request.headers();
      if (overrides.postData && headers2) {
        headers2 = headers2.map((header) => {
          if (header.name.toLowerCase() === "content-length") return {
            name: header.name,
            value: overrides.postData.byteLength.toString()
          };
          return header;
        });
      }
      this._alreadyContinuedHeaders = headers2;
      await this._session.sendMayFail("network.continueRequest", {
        request: this._requestId,
        url: overrides.url,
        method: overrides.method,
        ...toBidiRequestHeaders(this._alreadyContinuedHeaders),
        body: overrides.postData ? {
          type: "base64",
          value: Buffer.from(overrides.postData).toString("base64")
        } : void 0
      });
    }
    async fulfill(response) {
      const base64body = response.isBase64 ? response.body : Buffer.from(response.body).toString("base64");
      await this._session.sendMayFail("network.provideResponse", {
        request: this._requestId,
        statusCode: response.status,
        reasonPhrase: network2.statusText(response.status),
        ...toBidiResponseHeaders(response.headers),
        body: {
          type: "base64",
          value: base64body
        }
      });
    }
    async abort(errorCode) {
      await this._session.sendMayFail("network.failRequest", {
        request: this._requestId
      });
    }
  }
  function fromBidiHeaders(bidiHeaders) {
    const result = [];
    for (const {
      name,
      value
    } of bidiHeaders) result.push({
      name,
      value: bidiBytesValueToString(value)
    });
    return result;
  }
  function toBidiRequestHeaders(allHeaders) {
    const bidiHeaders = toBidiHeaders(allHeaders);
    return {
      headers: bidiHeaders
    };
  }
  function toBidiResponseHeaders(headers2) {
    const setCookieHeaders = headers2.filter((h2) => h2.name.toLowerCase() === "set-cookie");
    const otherHeaders = headers2.filter((h2) => h2.name.toLowerCase() !== "set-cookie");
    const rawCookies = setCookieHeaders.map((h2) => (0, _cookieStore.parseRawCookie)(h2.value));
    const cookies = rawCookies.filter(Boolean).map((c2) => {
      return {
        ...c2,
        value: {
          type: "string",
          value: c2.value
        },
        sameSite: toBidiSameSite(c2.sameSite)
      };
    });
    return {
      cookies,
      headers: toBidiHeaders(otherHeaders)
    };
  }
  function toBidiHeaders(headers2) {
    return headers2.map(({
      name,
      value
    }) => ({
      name,
      value: {
        type: "string",
        value
      }
    }));
  }
  function bidiBytesValueToString(value) {
    if (value.type === "string") return value.value;
    if (value.type === "base64") return Buffer.from(value.type, "base64").toString("binary");
    return "unknown value type: " + value.type;
  }
  function toBidiSameSite(sameSite) {
    if (!sameSite) return void 0;
    if (sameSite === "Strict") return bidi.Network.SameSite.Strict;
    if (sameSite === "Lax") return bidi.Network.SameSite.Lax;
    return bidi.Network.SameSite.None;
  }
  return bidiNetworkManager;
}
var bidiPage = {};
var bidiExecutionContext = {};
var bidiDeserializer = {};
var hasRequiredBidiDeserializer;
function requireBidiDeserializer() {
  if (hasRequiredBidiDeserializer) return bidiDeserializer;
  hasRequiredBidiDeserializer = 1;
  Object.defineProperty(bidiDeserializer, "__esModule", {
    value: true
  });
  bidiDeserializer.BidiDeserializer = void 0;
  /**
   * @license
   * Copyright 2024 Google Inc.
   * Modifications copyright (c) Microsoft Corporation.
   * SPDX-License-Identifier: Apache-2.0
   */
  class BidiDeserializer {
    static deserialize(result) {
      var _result$value, _result$value2, _result$value3, _result$value4;
      if (!result) return void 0;
      switch (result.type) {
        case "array":
          return (_result$value = result.value) === null || _result$value === void 0 ? void 0 : _result$value.map((value) => {
            return BidiDeserializer.deserialize(value);
          });
        case "set":
          return (_result$value2 = result.value) === null || _result$value2 === void 0 ? void 0 : _result$value2.reduce((acc, value) => {
            return acc.add(BidiDeserializer.deserialize(value));
          }, /* @__PURE__ */ new Set());
        case "object":
          return (_result$value3 = result.value) === null || _result$value3 === void 0 ? void 0 : _result$value3.reduce((acc, tuple) => {
            const {
              key,
              value
            } = BidiDeserializer._deserializeTuple(tuple);
            acc[key] = value;
            return acc;
          }, {});
        case "map":
          return (_result$value4 = result.value) === null || _result$value4 === void 0 ? void 0 : _result$value4.reduce((acc, tuple) => {
            const {
              key,
              value
            } = BidiDeserializer._deserializeTuple(tuple);
            return acc.set(key, value);
          }, /* @__PURE__ */ new Map());
        case "promise":
          return {};
        case "regexp":
          return new RegExp(result.value.pattern, result.value.flags);
        case "date":
          return new Date(result.value);
        case "undefined":
          return void 0;
        case "null":
          return null;
        case "number":
          return BidiDeserializer._deserializeNumber(result.value);
        case "bigint":
          return BigInt(result.value);
        case "boolean":
          return Boolean(result.value);
        case "string":
          return result.value;
      }
      throw new Error(`Deserialization of type ${result.type} not supported.`);
    }
    static _deserializeNumber(value) {
      switch (value) {
        case "-0":
          return -0;
        case "NaN":
          return NaN;
        case "Infinity":
          return Infinity;
        case "-Infinity":
          return -Infinity;
        default:
          return value;
      }
    }
    static _deserializeTuple([serializedKey, serializedValue]) {
      const key = typeof serializedKey === "string" ? serializedKey : BidiDeserializer.deserialize(serializedKey);
      const value = BidiDeserializer.deserialize(serializedValue);
      return {
        key,
        value
      };
    }
  }
  bidiDeserializer.BidiDeserializer = BidiDeserializer;
  return bidiDeserializer;
}
var bidiSerializer = {};
var hasRequiredBidiSerializer;
function requireBidiSerializer() {
  if (hasRequiredBidiSerializer) return bidiSerializer;
  hasRequiredBidiSerializer = 1;
  Object.defineProperty(bidiSerializer, "__esModule", {
    value: true
  });
  bidiSerializer.isRegExp = bidiSerializer.isPlainObject = bidiSerializer.isDate = bidiSerializer.BidiSerializer = void 0;
  /**
   * @license
   * Copyright 2024 Google Inc.
   * Modifications copyright (c) Microsoft Corporation.
   * SPDX-License-Identifier: Apache-2.0
   */
  class UnserializableError extends Error {
  }
  class BidiSerializer {
    static serialize(arg) {
      switch (typeof arg) {
        case "symbol":
        case "function":
          throw new UnserializableError(`Unable to serializable ${typeof arg}`);
        case "object":
          return BidiSerializer._serializeObject(arg);
        case "undefined":
          return {
            type: "undefined"
          };
        case "number":
          return BidiSerializer._serializeNumber(arg);
        case "bigint":
          return {
            type: "bigint",
            value: arg.toString()
          };
        case "string":
          return {
            type: "string",
            value: arg
          };
        case "boolean":
          return {
            type: "boolean",
            value: arg
          };
      }
    }
    static _serializeNumber(arg) {
      let value;
      if (Object.is(arg, -0)) {
        value = "-0";
      } else if (Object.is(arg, Infinity)) {
        value = "Infinity";
      } else if (Object.is(arg, -Infinity)) {
        value = "-Infinity";
      } else if (Object.is(arg, NaN)) {
        value = "NaN";
      } else {
        value = arg;
      }
      return {
        type: "number",
        value
      };
    }
    static _serializeObject(arg) {
      if (arg === null) {
        return {
          type: "null"
        };
      } else if (Array.isArray(arg)) {
        const parsedArray = arg.map((subArg) => {
          return BidiSerializer.serialize(subArg);
        });
        return {
          type: "array",
          value: parsedArray
        };
      } else if (isPlainObject(arg)) {
        try {
          JSON.stringify(arg);
        } catch (error) {
          if (error instanceof TypeError && error.message.startsWith("Converting circular structure to JSON")) {
            error.message += " Recursive objects are not allowed.";
          }
          throw error;
        }
        const parsedObject = [];
        for (const key in arg) {
          parsedObject.push([BidiSerializer.serialize(key), BidiSerializer.serialize(arg[key])]);
        }
        return {
          type: "object",
          value: parsedObject
        };
      } else if (isRegExp(arg)) {
        return {
          type: "regexp",
          value: {
            pattern: arg.source,
            flags: arg.flags
          }
        };
      } else if (isDate(arg)) {
        return {
          type: "date",
          value: arg.toISOString()
        };
      }
      throw new UnserializableError("Custom object serialization not possible. Use plain objects instead.");
    }
  }
  bidiSerializer.BidiSerializer = BidiSerializer;
  const isPlainObject = (obj) => {
    return typeof obj === "object" && (obj === null || obj === void 0 ? void 0 : obj.constructor) === Object;
  };
  bidiSerializer.isPlainObject = isPlainObject;
  const isRegExp = (obj) => {
    return typeof obj === "object" && (obj === null || obj === void 0 ? void 0 : obj.constructor) === RegExp;
  };
  bidiSerializer.isRegExp = isRegExp;
  const isDate = (obj) => {
    return typeof obj === "object" && (obj === null || obj === void 0 ? void 0 : obj.constructor) === Date;
  };
  bidiSerializer.isDate = isDate;
  return bidiSerializer;
}
var hasRequiredBidiExecutionContext;
function requireBidiExecutionContext() {
  if (hasRequiredBidiExecutionContext) return bidiExecutionContext;
  hasRequiredBidiExecutionContext = 1;
  Object.defineProperty(bidiExecutionContext, "__esModule", {
    value: true
  });
  bidiExecutionContext.BidiExecutionContext = void 0;
  bidiExecutionContext.createHandle = createHandle;
  var _utils = requireUtils();
  var _utilityScriptSerializers = requireUtilityScriptSerializers();
  var js = _interopRequireWildcard(requireJavascript$1());
  var dom2 = _interopRequireWildcard(requireDom());
  var _bidiDeserializer = requireBidiDeserializer();
  var bidi = _interopRequireWildcard(requireBidiProtocol());
  var _bidiSerializer = requireBidiSerializer();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  class BidiExecutionContext {
    constructor(session, realmInfo) {
      this._session = void 0;
      this._target = void 0;
      this._session = session;
      if (realmInfo.type === "window") {
        this._target = {
          context: realmInfo.context,
          sandbox: realmInfo.sandbox
        };
      } else {
        this._target = {
          realm: realmInfo.realm
        };
      }
    }
    async rawEvaluateJSON(expression) {
      const response = await this._session.send("script.evaluate", {
        expression,
        target: this._target,
        serializationOptions: {
          maxObjectDepth: 10,
          maxDomDepth: 10
        },
        awaitPromise: true,
        userActivation: true
      });
      if (response.type === "success") return _bidiDeserializer.BidiDeserializer.deserialize(response.result);
      if (response.type === "exception") throw new js.JavaScriptErrorInEvaluate(response.exceptionDetails.text + "\nFull val: " + JSON.stringify(response.exceptionDetails));
      throw new js.JavaScriptErrorInEvaluate("Unexpected response type: " + JSON.stringify(response));
    }
    async rawEvaluateHandle(context, expression) {
      const response = await this._session.send("script.evaluate", {
        expression,
        target: this._target,
        resultOwnership: bidi.Script.ResultOwnership.Root,
        // Necessary for the handle to be returned.
        serializationOptions: {
          maxObjectDepth: 0,
          maxDomDepth: 0
        },
        awaitPromise: true,
        userActivation: true
      });
      if (response.type === "success") {
        if ("handle" in response.result) return createHandle(context, response.result);
        throw new js.JavaScriptErrorInEvaluate("Cannot get handle: " + JSON.stringify(response.result));
      }
      if (response.type === "exception") throw new js.JavaScriptErrorInEvaluate(response.exceptionDetails.text + "\nFull val: " + JSON.stringify(response.exceptionDetails));
      throw new js.JavaScriptErrorInEvaluate("Unexpected response type: " + JSON.stringify(response));
    }
    async evaluateWithArguments(functionDeclaration, returnByValue, utilityScript, values, handles) {
      const response = await this._session.send("script.callFunction", {
        functionDeclaration,
        target: this._target,
        arguments: [{
          handle: utilityScript._objectId
        }, ...values.map(_bidiSerializer.BidiSerializer.serialize), ...handles.map((handle) => ({
          handle: handle._objectId
        }))],
        resultOwnership: returnByValue ? void 0 : bidi.Script.ResultOwnership.Root,
        // Necessary for the handle to be returned.
        serializationOptions: returnByValue ? {} : {
          maxObjectDepth: 0,
          maxDomDepth: 0
        },
        awaitPromise: true,
        userActivation: true
      });
      if (response.type === "exception") throw new js.JavaScriptErrorInEvaluate(response.exceptionDetails.text + "\nFull val: " + JSON.stringify(response.exceptionDetails));
      if (response.type === "success") {
        if (returnByValue) return (0, _utilityScriptSerializers.parseEvaluationResultValue)(_bidiDeserializer.BidiDeserializer.deserialize(response.result));
        return createHandle(utilityScript._context, response.result);
      }
      throw new js.JavaScriptErrorInEvaluate("Unexpected response type: " + JSON.stringify(response));
    }
    async getProperties(handle) {
      const names = await handle.evaluate((object) => {
        const names2 = [];
        const descriptors = Object.getOwnPropertyDescriptors(object);
        for (const name in descriptors) {
          var _descriptors$name;
          if ((_descriptors$name = descriptors[name]) !== null && _descriptors$name !== void 0 && _descriptors$name.enumerable) names2.push(name);
        }
        return names2;
      });
      const values = await Promise.all(names.map((name) => handle.evaluateHandle((object, name2) => object[name2], name)));
      const map = /* @__PURE__ */ new Map();
      for (let i = 0; i < names.length; i++) map.set(names[i], values[i]);
      return map;
    }
    async releaseHandle(handle) {
      if (!handle._objectId) return;
      await this._session.send("script.disown", {
        target: this._target,
        handles: [handle._objectId]
      });
    }
    async nodeIdForElementHandle(handle) {
      const shared = await this._remoteValueForReference({
        handle: handle._objectId
      });
      if (!("sharedId" in shared)) throw new Error("Element is not a node");
      return {
        sharedId: shared.sharedId
      };
    }
    async remoteObjectForNodeId(context, nodeId) {
      const result = await this._remoteValueForReference(nodeId, true);
      if (!("handle" in result)) throw new Error("Can't get remote object for nodeId");
      return createHandle(context, result);
    }
    async contentFrameIdForFrame(handle) {
      const contentWindow = await this._rawCallFunction("e => e.contentWindow", {
        handle: handle._objectId
      });
      if ((contentWindow === null || contentWindow === void 0 ? void 0 : contentWindow.type) === "window") return contentWindow.value.context;
      return null;
    }
    async frameIdForWindowHandle(handle) {
      if (!handle._objectId) throw new Error("JSHandle is not a DOM node handle");
      const contentWindow = await this._remoteValueForReference({
        handle: handle._objectId
      });
      if (contentWindow.type === "window") return contentWindow.value.context;
      return null;
    }
    async _remoteValueForReference(reference, createHandle2) {
      return await this._rawCallFunction("e => e", reference, createHandle2);
    }
    async _rawCallFunction(functionDeclaration, arg, createHandle2) {
      const response = await this._session.send("script.callFunction", {
        functionDeclaration,
        target: this._target,
        arguments: [arg],
        // "Root" is necessary for the handle to be returned.
        resultOwnership: createHandle2 ? bidi.Script.ResultOwnership.Root : bidi.Script.ResultOwnership.None,
        serializationOptions: {
          maxObjectDepth: 0,
          maxDomDepth: 0
        },
        awaitPromise: true,
        userActivation: true
      });
      if (response.type === "exception") throw new js.JavaScriptErrorInEvaluate(response.exceptionDetails.text + "\nFull val: " + JSON.stringify(response.exceptionDetails));
      if (response.type === "success") return response.result;
      throw new js.JavaScriptErrorInEvaluate("Unexpected response type: " + JSON.stringify(response));
    }
  }
  bidiExecutionContext.BidiExecutionContext = BidiExecutionContext;
  function renderPreview(remoteObject) {
    if (remoteObject.type === "undefined") return "undefined";
    if (remoteObject.type === "null") return "null";
    if ("value" in remoteObject) return String(remoteObject.value);
    return `<${remoteObject.type}>`;
  }
  function remoteObjectValue(remoteObject) {
    if (remoteObject.type === "undefined") return void 0;
    if (remoteObject.type === "null") return null;
    if (remoteObject.type === "number" && typeof remoteObject.value === "string") return js.parseUnserializableValue(remoteObject.value);
    if ("value" in remoteObject) return remoteObject.value;
    return void 0;
  }
  function createHandle(context, remoteObject) {
    if (remoteObject.type === "node") {
      (0, _utils.assert)(context instanceof dom2.FrameExecutionContext);
      return new dom2.ElementHandle(context, remoteObject.handle);
    }
    const objectId = "handle" in remoteObject ? remoteObject.handle : void 0;
    return new js.JSHandle(context, remoteObject.type, renderPreview(remoteObject), objectId, remoteObjectValue(remoteObject));
  }
  return bidiExecutionContext;
}
var bidiInput = {};
var bidiKeyboard = {};
var hasRequiredBidiKeyboard;
function requireBidiKeyboard() {
  if (hasRequiredBidiKeyboard) return bidiKeyboard;
  hasRequiredBidiKeyboard = 1;
  Object.defineProperty(bidiKeyboard, "__esModule", {
    value: true
  });
  bidiKeyboard.getBidiKeyValue = void 0;
  /**
   * @license
   * Copyright 2024 Google Inc.
   * Modifications copyright (c) Microsoft Corporation.
   * SPDX-License-Identifier: Apache-2.0
   */
  const getBidiKeyValue = (keyName) => {
    switch (keyName) {
      case "\r":
      case "\n":
        keyName = "Enter";
        break;
    }
    if ([...keyName].length === 1) {
      return keyName;
    }
    switch (keyName) {
      case "Cancel":
        return "";
      case "Help":
        return "";
      case "Backspace":
        return "";
      case "Tab":
        return "";
      case "Clear":
        return "";
      case "Enter":
        return "";
      case "Shift":
      case "ShiftLeft":
        return "";
      case "Control":
      case "ControlLeft":
        return "";
      case "Alt":
      case "AltLeft":
        return "";
      case "Pause":
        return "";
      case "Escape":
        return "";
      case "PageUp":
        return "";
      case "PageDown":
        return "";
      case "End":
        return "";
      case "Home":
        return "";
      case "ArrowLeft":
        return "";
      case "ArrowUp":
        return "";
      case "ArrowRight":
        return "";
      case "ArrowDown":
        return "";
      case "Insert":
        return "";
      case "Delete":
        return "";
      case "NumpadEqual":
        return "";
      case "Numpad0":
        return "";
      case "Numpad1":
        return "";
      case "Numpad2":
        return "";
      case "Numpad3":
        return "";
      case "Numpad4":
        return "";
      case "Numpad5":
        return "";
      case "Numpad6":
        return "";
      case "Numpad7":
        return "";
      case "Numpad8":
        return "";
      case "Numpad9":
        return "";
      case "NumpadMultiply":
        return "";
      case "NumpadAdd":
        return "";
      case "NumpadSubtract":
        return "";
      case "NumpadDecimal":
        return "";
      case "NumpadDivide":
        return "";
      case "F1":
        return "";
      case "F2":
        return "";
      case "F3":
        return "";
      case "F4":
        return "";
      case "F5":
        return "";
      case "F6":
        return "";
      case "F7":
        return "";
      case "F8":
        return "";
      case "F9":
        return "";
      case "F10":
        return "";
      case "F11":
        return "";
      case "F12":
        return "";
      case "Meta":
      case "MetaLeft":
        return "";
      case "ShiftRight":
        return "";
      case "ControlRight":
        return "";
      case "AltRight":
        return "";
      case "MetaRight":
        return "";
      case "Space":
        return " ";
      case "Digit0":
        return "0";
      case "Digit1":
        return "1";
      case "Digit2":
        return "2";
      case "Digit3":
        return "3";
      case "Digit4":
        return "4";
      case "Digit5":
        return "5";
      case "Digit6":
        return "6";
      case "Digit7":
        return "7";
      case "Digit8":
        return "8";
      case "Digit9":
        return "9";
      case "KeyA":
        return "a";
      case "KeyB":
        return "b";
      case "KeyC":
        return "c";
      case "KeyD":
        return "d";
      case "KeyE":
        return "e";
      case "KeyF":
        return "f";
      case "KeyG":
        return "g";
      case "KeyH":
        return "h";
      case "KeyI":
        return "i";
      case "KeyJ":
        return "j";
      case "KeyK":
        return "k";
      case "KeyL":
        return "l";
      case "KeyM":
        return "m";
      case "KeyN":
        return "n";
      case "KeyO":
        return "o";
      case "KeyP":
        return "p";
      case "KeyQ":
        return "q";
      case "KeyR":
        return "r";
      case "KeyS":
        return "s";
      case "KeyT":
        return "t";
      case "KeyU":
        return "u";
      case "KeyV":
        return "v";
      case "KeyW":
        return "w";
      case "KeyX":
        return "x";
      case "KeyY":
        return "y";
      case "KeyZ":
        return "z";
      case "Semicolon":
        return ";";
      case "Equal":
        return "=";
      case "Comma":
        return ",";
      case "Minus":
        return "-";
      case "Period":
        return ".";
      case "Slash":
        return "/";
      case "Backquote":
        return "`";
      case "BracketLeft":
        return "[";
      case "Backslash":
        return "\\";
      case "BracketRight":
        return "]";
      case "Quote":
        return '"';
      default:
        throw new Error(`Unknown key: "${keyName}"`);
    }
  };
  bidiKeyboard.getBidiKeyValue = getBidiKeyValue;
  return bidiKeyboard;
}
var hasRequiredBidiInput;
function requireBidiInput() {
  if (hasRequiredBidiInput) return bidiInput;
  hasRequiredBidiInput = 1;
  Object.defineProperty(bidiInput, "__esModule", {
    value: true
  });
  bidiInput.RawTouchscreenImpl = bidiInput.RawMouseImpl = bidiInput.RawKeyboardImpl = void 0;
  var _input = requireInput$1();
  var _bidiKeyboard = requireBidiKeyboard();
  var bidi = _interopRequireWildcard(requireBidiProtocol());
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  class RawKeyboardImpl {
    constructor(session) {
      this._session = void 0;
      this._session = session;
    }
    setSession(session) {
      this._session = session;
    }
    async keydown(modifiers, keyName, description, autoRepeat) {
      keyName = (0, _input.resolveSmartModifierString)(keyName);
      const actions = [];
      actions.push({
        type: "keyDown",
        value: (0, _bidiKeyboard.getBidiKeyValue)(keyName)
      });
      await this._performActions(actions);
    }
    async keyup(modifiers, keyName, description) {
      keyName = (0, _input.resolveSmartModifierString)(keyName);
      const actions = [];
      actions.push({
        type: "keyUp",
        value: (0, _bidiKeyboard.getBidiKeyValue)(keyName)
      });
      await this._performActions(actions);
    }
    async sendText(text) {
      const actions = [];
      for (const char of text) {
        const value = (0, _bidiKeyboard.getBidiKeyValue)(char);
        actions.push({
          type: "keyDown",
          value
        });
        actions.push({
          type: "keyUp",
          value
        });
      }
      await this._performActions(actions);
    }
    async _performActions(actions) {
      await this._session.send("input.performActions", {
        context: this._session.sessionId,
        actions: [{
          type: "key",
          id: "pw_keyboard",
          actions
        }]
      });
    }
  }
  bidiInput.RawKeyboardImpl = RawKeyboardImpl;
  class RawMouseImpl {
    constructor(session) {
      this._session = void 0;
      this._session = session;
    }
    async move(x2, y2, button, buttons, modifiers, forClick) {
      await this._performActions([{
        type: "pointerMove",
        x: x2,
        y: y2
      }]);
    }
    async down(x2, y2, button, buttons, modifiers, clickCount) {
      await this._performActions([{
        type: "pointerDown",
        button: toBidiButton(button)
      }]);
    }
    async up(x2, y2, button, buttons, modifiers, clickCount) {
      await this._performActions([{
        type: "pointerUp",
        button: toBidiButton(button)
      }]);
    }
    async wheel(x2, y2, buttons, modifiers, deltaX, deltaY) {
      x2 = Math.floor(x2);
      y2 = Math.floor(y2);
      await this._session.send("input.performActions", {
        context: this._session.sessionId,
        actions: [{
          type: "wheel",
          id: "pw_mouse_wheel",
          actions: [{
            type: "scroll",
            x: x2,
            y: y2,
            deltaX,
            deltaY
          }]
        }]
      });
    }
    async _performActions(actions) {
      await this._session.send("input.performActions", {
        context: this._session.sessionId,
        actions: [{
          type: "pointer",
          id: "pw_mouse",
          parameters: {
            pointerType: bidi.Input.PointerType.Mouse
          },
          actions
        }]
      });
    }
  }
  bidiInput.RawMouseImpl = RawMouseImpl;
  class RawTouchscreenImpl {
    constructor(session) {
      this._session = void 0;
      this._session = session;
    }
    async tap(x2, y2, modifiers) {
    }
  }
  bidiInput.RawTouchscreenImpl = RawTouchscreenImpl;
  function toBidiButton(button) {
    switch (button) {
      case "left":
        return 0;
      case "right":
        return 2;
      case "middle":
        return 1;
    }
    throw new Error("Unknown button: " + button);
  }
  return bidiInput;
}
var bidiPdf = {};
var hasRequiredBidiPdf;
function requireBidiPdf() {
  if (hasRequiredBidiPdf) return bidiPdf;
  hasRequiredBidiPdf = 1;
  Object.defineProperty(bidiPdf, "__esModule", {
    value: true
  });
  bidiPdf.BidiPDF = void 0;
  var _utils = requireUtils();
  const PagePaperFormats = {
    letter: {
      width: 8.5,
      height: 11
    },
    legal: {
      width: 8.5,
      height: 14
    },
    tabloid: {
      width: 11,
      height: 17
    },
    ledger: {
      width: 17,
      height: 11
    },
    a0: {
      width: 33.1,
      height: 46.8
    },
    a1: {
      width: 23.4,
      height: 33.1
    },
    a2: {
      width: 16.54,
      height: 23.4
    },
    a3: {
      width: 11.7,
      height: 16.54
    },
    a4: {
      width: 8.27,
      height: 11.7
    },
    a5: {
      width: 5.83,
      height: 8.27
    },
    a6: {
      width: 4.13,
      height: 5.83
    }
  };
  const unitToPixels = {
    "px": 1,
    "in": 96,
    "cm": 37.8,
    "mm": 3.78
  };
  function convertPrintParameterToInches(text) {
    if (text === void 0) return void 0;
    let unit = text.substring(text.length - 2).toLowerCase();
    let valueText = "";
    if (unitToPixels.hasOwnProperty(unit)) {
      valueText = text.substring(0, text.length - 2);
    } else {
      unit = "px";
      valueText = text;
    }
    const value = Number(valueText);
    (0, _utils.assert)(!isNaN(value), "Failed to parse parameter value: " + text);
    const pixels = value * unitToPixels[unit];
    return pixels / 96;
  }
  class BidiPDF {
    constructor(session) {
      this._session = void 0;
      this._session = session;
    }
    async generate(options) {
      const {
        scale = 1,
        printBackground = false,
        landscape = false,
        pageRanges = "",
        margin = {}
      } = options;
      let paperWidth = 8.5;
      let paperHeight = 11;
      if (options.format) {
        const format2 = PagePaperFormats[options.format.toLowerCase()];
        (0, _utils.assert)(format2, "Unknown paper format: " + options.format);
        paperWidth = format2.width;
        paperHeight = format2.height;
      } else {
        paperWidth = convertPrintParameterToInches(options.width) || paperWidth;
        paperHeight = convertPrintParameterToInches(options.height) || paperHeight;
      }
      const {
        data
      } = await this._session.send("browsingContext.print", {
        context: this._session.sessionId,
        background: printBackground,
        margin: {
          bottom: convertPrintParameterToInches(margin.bottom) || 0,
          left: convertPrintParameterToInches(margin.left) || 0,
          right: convertPrintParameterToInches(margin.right) || 0,
          top: convertPrintParameterToInches(margin.top) || 0
        },
        orientation: landscape ? "landscape" : "portrait",
        page: {
          width: paperWidth,
          height: paperHeight
        },
        pageRanges: pageRanges ? pageRanges.split(",").map((r2) => r2.trim()) : void 0,
        scale
      });
      return Buffer.from(data, "base64");
    }
  }
  bidiPdf.BidiPDF = BidiPDF;
  return bidiPdf;
}
var hasRequiredBidiPage;
function requireBidiPage() {
  if (hasRequiredBidiPage) return bidiPage;
  hasRequiredBidiPage = 1;
  Object.defineProperty(bidiPage, "__esModule", {
    value: true
  });
  bidiPage.BidiPage = void 0;
  var _utils = requireUtils();
  var _eventsHelper = requireEventsHelper();
  var _browserContext = requireBrowserContext$1();
  var dialog2 = _interopRequireWildcard(requireDialog$1());
  var dom2 = _interopRequireWildcard(requireDom());
  var _page = requirePage$1();
  var _bidiExecutionContext = requireBidiExecutionContext();
  var _bidiInput = requireBidiInput();
  var _bidiNetworkManager = requireBidiNetworkManager();
  var _bidiPdf = requireBidiPdf();
  var bidi = _interopRequireWildcard(requireBidiProtocol());
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  const UTILITY_WORLD_NAME = "__playwright_utility_world__";
  const kPlaywrightBindingChannel = "playwrightChannel";
  class BidiPage {
    constructor(browserContext2, bidiSession, opener) {
      this.rawMouse = void 0;
      this.rawKeyboard = void 0;
      this.rawTouchscreen = void 0;
      this._page = void 0;
      this._session = void 0;
      this._opener = void 0;
      this._realmToContext = void 0;
      this._sessionListeners = [];
      this._browserContext = void 0;
      this._networkManager = void 0;
      this._pdf = void 0;
      this._initScriptIds = [];
      this._session = bidiSession;
      this._opener = opener;
      this.rawKeyboard = new _bidiInput.RawKeyboardImpl(bidiSession);
      this.rawMouse = new _bidiInput.RawMouseImpl(bidiSession);
      this.rawTouchscreen = new _bidiInput.RawTouchscreenImpl(bidiSession);
      this._realmToContext = /* @__PURE__ */ new Map();
      this._page = new _page.Page(this, browserContext2);
      this._browserContext = browserContext2;
      this._networkManager = new _bidiNetworkManager.BidiNetworkManager(this._session, this._page, this._onNavigationResponseStarted.bind(this));
      this._pdf = new _bidiPdf.BidiPDF(this._session);
      this._page.on(_page.Page.Events.FrameDetached, (frame2) => this._removeContextsForFrame(frame2, false));
      this._sessionListeners = [_eventsHelper.eventsHelper.addEventListener(bidiSession, "script.realmCreated", this._onRealmCreated.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "script.message", this._onScriptMessage.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "browsingContext.contextDestroyed", this._onBrowsingContextDestroyed.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "browsingContext.navigationStarted", this._onNavigationStarted.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "browsingContext.navigationAborted", this._onNavigationAborted.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "browsingContext.navigationFailed", this._onNavigationFailed.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "browsingContext.fragmentNavigated", this._onFragmentNavigated.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "browsingContext.domContentLoaded", this._onDomContentLoaded.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "browsingContext.load", this._onLoad.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "browsingContext.userPromptOpened", this._onUserPromptOpened.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "log.entryAdded", this._onLogEntryAdded.bind(this))];
      this._initialize().then(() => {
        var _this$_opener;
        return this._page.reportAsNew((_this$_opener = this._opener) === null || _this$_opener === void 0 ? void 0 : _this$_opener._page);
      }, (error) => {
        var _this$_opener2;
        return this._page.reportAsNew((_this$_opener2 = this._opener) === null || _this$_opener2 === void 0 ? void 0 : _this$_opener2._page, error);
      });
    }
    async _initialize() {
      this._onFrameAttached(this._session.sessionId, null);
      await Promise.all([this.updateHttpCredentials(), this.updateRequestInterception(), this._updateViewport(), this._installMainBinding(), this._addAllInitScripts()]);
    }
    async _addAllInitScripts() {
      return Promise.all(this._page.allInitScripts().map((initScript) => this.addInitScript(initScript)));
    }
    didClose() {
      this._session.dispose();
      _eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
      this._page._didClose();
    }
    _onFrameAttached(frameId, parentFrameId) {
      return this._page._frameManager.frameAttached(frameId, parentFrameId);
    }
    _removeContextsForFrame(frame2, notifyFrame) {
      for (const [contextId, context] of this._realmToContext) {
        if (context.frame === frame2) {
          this._realmToContext.delete(contextId);
          if (notifyFrame) frame2._contextDestroyed(context);
        }
      }
    }
    _onRealmCreated(realmInfo) {
      if (this._realmToContext.has(realmInfo.realm)) return;
      if (realmInfo.type !== "window") return;
      const frame2 = this._page._frameManager.frame(realmInfo.context);
      if (!frame2) return;
      let worldName;
      if (!realmInfo.sandbox) {
        worldName = "main";
        this._touchUtilityWorld(realmInfo.context);
      } else if (realmInfo.sandbox === UTILITY_WORLD_NAME) {
        worldName = "utility";
      } else {
        return;
      }
      const delegate = new _bidiExecutionContext.BidiExecutionContext(this._session, realmInfo);
      const context = new dom2.FrameExecutionContext(delegate, frame2, worldName);
      frame2._contextCreated(worldName, context);
      this._realmToContext.set(realmInfo.realm, context);
    }
    async _touchUtilityWorld(context) {
      await this._session.sendMayFail("script.evaluate", {
        expression: "1 + 1",
        target: {
          context,
          sandbox: UTILITY_WORLD_NAME
        },
        serializationOptions: {
          maxObjectDepth: 10,
          maxDomDepth: 10
        },
        awaitPromise: true,
        userActivation: true
      });
    }
    _onRealmDestroyed(params) {
      const context = this._realmToContext.get(params.realm);
      if (!context) return false;
      this._realmToContext.delete(params.realm);
      context.frame._contextDestroyed(context);
      return true;
    }
    // TODO: route the message directly to the browser
    _onBrowsingContextDestroyed(params) {
      this._browserContext._browser._onBrowsingContextDestroyed(params);
    }
    _onNavigationStarted(params) {
      const frameId = params.context;
      this._page._frameManager.frameRequestedNavigation(frameId, params.navigation);
      const url = params.url.toLowerCase();
      if (url.startsWith("file:") || url.startsWith("data:") || url === "about:blank") {
        const frame2 = this._page._frameManager.frame(frameId);
        if (frame2) this._page._frameManager.frameCommittedNewDocumentNavigation(
          frameId,
          params.url,
          "",
          params.navigation,
          /* initial */
          false
        );
      }
    }
    // TODO: there is no separate event for committed navigation, so we approximate it with responseStarted.
    _onNavigationResponseStarted(params) {
      const frameId = params.context;
      const frame2 = this._page._frameManager.frame(frameId);
      (0, _utils.assert)(frame2);
      this._page._frameManager.frameCommittedNewDocumentNavigation(
        frameId,
        params.response.url,
        "",
        params.navigation,
        /* initial */
        false
      );
    }
    _onDomContentLoaded(params) {
      const frameId = params.context;
      this._page._frameManager.frameLifecycleEvent(frameId, "domcontentloaded");
    }
    _onLoad(params) {
      this._page._frameManager.frameLifecycleEvent(params.context, "load");
    }
    _onNavigationAborted(params) {
      this._page._frameManager.frameAbortedNavigation(params.context, "Navigation aborted", params.navigation || void 0);
    }
    _onNavigationFailed(params) {
      this._page._frameManager.frameAbortedNavigation(params.context, "Navigation failed", params.navigation || void 0);
    }
    _onFragmentNavigated(params) {
      this._page._frameManager.frameCommittedSameDocumentNavigation(params.context, params.url);
    }
    _onUserPromptOpened(event) {
      this._page.emitOnContext(_browserContext.BrowserContext.Events.Dialog, new dialog2.Dialog(this._page, event.type, event.message, async (accept, userText) => {
        await this._session.send("browsingContext.handleUserPrompt", {
          context: event.context,
          accept,
          userText
        });
      }, event.defaultValue));
    }
    _onLogEntryAdded(params) {
      var _params$stackTrace;
      if (params.type !== "console") return;
      const entry = params;
      const context = this._realmToContext.get(params.source.realm);
      if (!context) return;
      const callFrame = (_params$stackTrace = params.stackTrace) === null || _params$stackTrace === void 0 ? void 0 : _params$stackTrace.callFrames[0];
      const location2 = callFrame !== null && callFrame !== void 0 ? callFrame : {
        url: "",
        lineNumber: 1,
        columnNumber: 1
      };
      this._page._addConsoleMessage(entry.method, entry.args.map((arg) => (0, _bidiExecutionContext.createHandle)(context, arg)), location2, params.text || void 0);
    }
    async navigateFrame(frame2, url, referrer) {
      const {
        navigation
      } = await this._session.send("browsingContext.navigate", {
        context: frame2._id,
        url
      });
      return {
        newDocumentId: navigation || void 0
      };
    }
    async updateExtraHTTPHeaders() {
    }
    async updateEmulateMedia() {
    }
    async updateEmulatedViewportSize() {
      await this._updateViewport();
    }
    async updateUserAgent() {
    }
    async bringToFront() {
      await this._session.send("browsingContext.activate", {
        context: this._session.sessionId
      });
    }
    async _updateViewport() {
      const options = this._browserContext._options;
      const deviceSize = this._page.emulatedSize();
      if (deviceSize === null) return;
      const viewportSize = deviceSize.viewport;
      await this._session.send("browsingContext.setViewport", {
        context: this._session.sessionId,
        viewport: {
          width: viewportSize.width,
          height: viewportSize.height
        },
        devicePixelRatio: options.deviceScaleFactor || 1
      });
    }
    async updateRequestInterception() {
      await this._networkManager.setRequestInterception(this._page.needsRequestInterception());
    }
    async updateOffline() {
    }
    async updateHttpCredentials() {
      await this._networkManager.setCredentials(this._browserContext._options.httpCredentials);
    }
    async updateFileChooserInterception() {
    }
    async reload() {
      await this._session.send("browsingContext.reload", {
        context: this._session.sessionId,
        // ignoreCache: true,
        wait: bidi.BrowsingContext.ReadinessState.Interactive
      });
    }
    async goBack() {
      return await this._session.send("browsingContext.traverseHistory", {
        context: this._session.sessionId,
        delta: -1
      }).then(() => true).catch(() => false);
    }
    async goForward() {
      return await this._session.send("browsingContext.traverseHistory", {
        context: this._session.sessionId,
        delta: 1
      }).then(() => true).catch(() => false);
    }
    async requestGC() {
      throw new Error("Method not implemented.");
    }
    // TODO: consider calling this only when bindings are added.
    async _installMainBinding() {
      const functionDeclaration = addMainBinding.toString();
      const args = [{
        type: "channel",
        value: {
          channel: kPlaywrightBindingChannel,
          ownership: bidi.Script.ResultOwnership.Root
        }
      }];
      const promises = [];
      promises.push(this._session.send("script.addPreloadScript", {
        functionDeclaration,
        arguments: args
      }));
      promises.push(this._session.send("script.callFunction", {
        functionDeclaration,
        arguments: args,
        target: toBidiExecutionContext(await this._page.mainFrame()._mainContext())._target,
        awaitPromise: false,
        userActivation: false
      }));
      await Promise.all(promises);
    }
    async _onScriptMessage(event) {
      if (event.channel !== kPlaywrightBindingChannel) return;
      const pageOrError = await this._page.waitForInitializedOrError();
      if (pageOrError instanceof Error) return;
      const context = this._realmToContext.get(event.source.realm);
      if (!context) return;
      if (event.data.type !== "string") return;
      await this._page._onBindingCalled(event.data.value, context);
    }
    async addInitScript(initScript) {
      const {
        script
      } = await this._session.send("script.addPreloadScript", {
        // TODO: remove function call from the source.
        functionDeclaration: `() => { return ${initScript.source} }`,
        // TODO: push to iframes?
        contexts: [this._session.sessionId]
      });
      if (!initScript.internal) this._initScriptIds.push(script);
    }
    async removeNonInternalInitScripts() {
      const promises = this._initScriptIds.map((script) => this._session.send("script.removePreloadScript", {
        script
      }));
      this._initScriptIds = [];
      await Promise.all(promises);
    }
    async closePage(runBeforeUnload) {
      await this._session.send("browsingContext.close", {
        context: this._session.sessionId,
        promptUnload: runBeforeUnload
      });
    }
    async setBackgroundColor(color) {
    }
    async takeScreenshot(progress2, format2, documentRect, viewportRect, quality, fitsViewport, scale) {
      const rect = documentRect || viewportRect;
      const {
        data
      } = await this._session.send("browsingContext.captureScreenshot", {
        context: this._session.sessionId,
        format: {
          type: `image/${format2 === "png" ? "png" : "jpeg"}`,
          quality: quality ? quality / 100 : 0.8
        },
        origin: documentRect ? "document" : "viewport",
        clip: {
          type: "box",
          ...rect
        }
      });
      return Buffer.from(data, "base64");
    }
    async getContentFrame(handle) {
      const executionContext = toBidiExecutionContext(handle._context);
      const frameId = await executionContext.contentFrameIdForFrame(handle);
      if (!frameId) return null;
      return this._page._frameManager.frame(frameId);
    }
    async getOwnerFrame(handle) {
      const windowHandle = await handle.evaluateHandle((node) => {
        var _node$ownerDocument;
        const doc = (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 ? _node$ownerDocument : node;
        return doc.defaultView;
      });
      if (!windowHandle) return null;
      const executionContext = toBidiExecutionContext(handle._context);
      return executionContext.frameIdForWindowHandle(windowHandle);
    }
    async getBoundingBox(handle) {
      const box = await handle.evaluate((element) => {
        if (!(element instanceof Element)) return null;
        const rect = element.getBoundingClientRect();
        return {
          x: rect.x,
          y: rect.y,
          width: rect.width,
          height: rect.height
        };
      });
      if (!box) return null;
      const position = await this._framePosition(handle._frame);
      if (!position) return null;
      box.x += position.x;
      box.y += position.y;
      return box;
    }
    // TODO: move to Frame.
    async _framePosition(frame2) {
      if (frame2 === this._page.mainFrame()) return {
        x: 0,
        y: 0
      };
      const element = await frame2.frameElement();
      const box = await element.boundingBox();
      if (!box) return null;
      const style = await element.evaluateInUtility(([injected, iframe]) => injected.describeIFrameStyle(iframe), {}).catch((e2) => "error:notconnected");
      if (style === "error:notconnected" || style === "transformed") return null;
      box.x += style.left;
      box.y += style.top;
      return box;
    }
    async scrollRectIntoViewIfNeeded(handle, rect) {
      return await handle.evaluateInUtility(([injected, node]) => {
        node.scrollIntoView({
          block: "center",
          inline: "center",
          behavior: "instant"
        });
      }, null).then(() => "done").catch((e2) => {
        if (e2 instanceof Error && e2.message.includes("Node is detached from document")) return "error:notconnected";
        if (e2 instanceof Error && e2.message.includes("Node does not have a layout object")) return "error:notvisible";
        throw e2;
      });
    }
    async setScreencastOptions(options) {
    }
    rafCountForStablePosition() {
      return 1;
    }
    async getContentQuads(handle) {
      const quads = await handle.evaluateInUtility(([injected, node]) => {
        if (!node.isConnected) return "error:notconnected";
        const rects = node.getClientRects();
        if (!rects) return null;
        return [...rects].map((rect) => [{
          x: rect.left,
          y: rect.top
        }, {
          x: rect.right,
          y: rect.top
        }, {
          x: rect.right,
          y: rect.bottom
        }, {
          x: rect.left,
          y: rect.bottom
        }]);
      }, null);
      if (!quads || quads === "error:notconnected") return quads;
      const position = await this._framePosition(handle._frame);
      if (!position) return null;
      quads.forEach((quad) => quad.forEach((point) => {
        point.x += position.x;
        point.y += position.y;
      }));
      return quads;
    }
    async setInputFilePaths(handle, paths) {
      const fromContext = toBidiExecutionContext(handle._context);
      await this._session.send("input.setFiles", {
        context: this._session.sessionId,
        element: await fromContext.nodeIdForElementHandle(handle),
        files: paths
      });
    }
    async adoptElementHandle(handle, to) {
      const fromContext = toBidiExecutionContext(handle._context);
      const nodeId = await fromContext.nodeIdForElementHandle(handle);
      const executionContext = toBidiExecutionContext(to);
      return await executionContext.remoteObjectForNodeId(to, nodeId);
    }
    async getAccessibilityTree(needle) {
      throw new Error("Method not implemented.");
    }
    async inputActionEpilogue() {
    }
    async resetForReuse() {
    }
    async pdf(options) {
      return this._pdf.generate(options);
    }
    async getFrameElement(frame2) {
      const parent = frame2.parentFrame();
      if (!parent) throw new Error("Frame has been detached.");
      const parentContext = await parent._mainContext();
      const list = await parentContext.evaluateHandle(() => {
        return [...document.querySelectorAll("iframe,frame")];
      });
      const length = await list.evaluate((list2) => list2.length);
      let foundElement = null;
      for (let i = 0; i < length; i++) {
        const element = await list.evaluateHandle((list2, i2) => list2[i2], i);
        const candidate = await element.contentFrame();
        if (frame2 === candidate) {
          foundElement = element;
          break;
        } else {
          element.dispose();
        }
      }
      list.dispose();
      if (!foundElement) throw new Error("Frame has been detached.");
      return foundElement;
    }
    shouldToggleStyleSheetToSyncAnimations() {
      return true;
    }
  }
  bidiPage.BidiPage = BidiPage;
  function addMainBinding(callback) {
    globalThis["__playwright__binding__"] = callback;
  }
  function toBidiExecutionContext(executionContext) {
    return executionContext.delegate;
  }
  return bidiPage;
}
var hasRequiredBidiBrowser;
function requireBidiBrowser() {
  if (hasRequiredBidiBrowser) return bidiBrowser;
  hasRequiredBidiBrowser = 1;
  Object.defineProperty(bidiBrowser, "__esModule", {
    value: true
  });
  bidiBrowser.Network = bidiBrowser.BidiBrowserContext = bidiBrowser.BidiBrowser = void 0;
  var _eventsHelper = requireEventsHelper();
  var _browser = requireBrowser$2();
  var _browserContext = requireBrowserContext$1();
  var network2 = _interopRequireWildcard(requireNetwork$1());
  var _bidiConnection = requireBidiConnection();
  var _bidiNetworkManager = requireBidiNetworkManager();
  var _bidiPage = requireBidiPage();
  var bidi = _interopRequireWildcard(requireBidiProtocol());
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  class BidiBrowser extends _browser.Browser {
    static async connect(parent, transport2, options) {
      const browser2 = new BidiBrowser(parent, transport2, options);
      if (options.__testHookOnConnectToBrowser) await options.__testHookOnConnectToBrowser();
      let proxy;
      if (options.proxy) {
        proxy = {
          proxyType: "manual"
        };
        const url = new URL(options.proxy.server);
        switch (url.protocol) {
          case "http:":
            proxy.httpProxy = url.host;
            break;
          case "https:":
            proxy.httpsProxy = url.host;
            break;
          case "socks4:":
            proxy.socksProxy = url.host;
            proxy.socksVersion = 4;
            break;
          case "socks5:":
            proxy.socksProxy = url.host;
            proxy.socksVersion = 5;
            break;
          default:
            throw new Error("Invalid proxy server protocol: " + options.proxy.server);
        }
        if (options.proxy.bypass) proxy.noProxy = options.proxy.bypass.split(",");
      }
      browser2._bidiSessionInfo = await browser2._browserSession.send("session.new", {
        capabilities: {
          alwaysMatch: {
            acceptInsecureCerts: false,
            proxy,
            unhandledPromptBehavior: {
              default: bidi.Session.UserPromptHandlerType.Ignore
            },
            webSocketUrl: true
          }
        }
      });
      await browser2._browserSession.send("session.subscribe", {
        events: ["browsingContext", "network", "log", "script"]
      });
      if (options.persistent) {
        browser2._defaultContext = new BidiBrowserContext(browser2, void 0, options.persistent);
        await browser2._defaultContext._initialize();
        const page2 = await browser2._defaultContext.doCreateNewPage();
        await page2.waitForInitializedOrError();
      }
      return browser2;
    }
    constructor(parent, transport2, options) {
      super(parent, options);
      this._connection = void 0;
      this._browserSession = void 0;
      this._bidiSessionInfo = void 0;
      this._contexts = /* @__PURE__ */ new Map();
      this._bidiPages = /* @__PURE__ */ new Map();
      this._eventListeners = void 0;
      this._connection = new _bidiConnection.BidiConnection(transport2, this._onDisconnect.bind(this), options.protocolLogger, options.browserLogsCollector);
      this._browserSession = this._connection.browserSession;
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(this._browserSession, "browsingContext.contextCreated", this._onBrowsingContextCreated.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._browserSession, "script.realmDestroyed", this._onScriptRealmDestroyed.bind(this))];
    }
    _onDisconnect() {
      this._didClose();
    }
    async doCreateNewContext(options) {
      const {
        userContext
      } = await this._browserSession.send("browser.createUserContext", {});
      const context = new BidiBrowserContext(this, userContext, options);
      await context._initialize();
      this._contexts.set(userContext, context);
      return context;
    }
    contexts() {
      return Array.from(this._contexts.values());
    }
    version() {
      return this._bidiSessionInfo.capabilities.browserVersion;
    }
    userAgent() {
      return this._bidiSessionInfo.capabilities.userAgent;
    }
    isConnected() {
      return !this._connection.isClosed();
    }
    _onBrowsingContextCreated(event) {
      if (event.parent) {
        const parentFrameId = event.parent;
        for (const page3 of this._bidiPages.values()) {
          const parentFrame = page3._page._frameManager.frame(parentFrameId);
          if (!parentFrame) continue;
          page3._session.addFrameBrowsingContext(event.context);
          page3._page._frameManager.frameAttached(event.context, parentFrameId);
          const frame2 = page3._page._frameManager.frame(event.context);
          if (frame2) frame2._url = event.url;
          return;
        }
        return;
      }
      let context = this._contexts.get(event.userContext);
      if (!context) context = this._defaultContext;
      if (!context) return;
      const session = this._connection.createMainFrameBrowsingContextSession(event.context);
      const opener = event.originalOpener && this._bidiPages.get(event.originalOpener);
      const page2 = new _bidiPage.BidiPage(context, session, opener || null);
      page2._page.mainFrame()._url = event.url;
      this._bidiPages.set(event.context, page2);
    }
    _onBrowsingContextDestroyed(event) {
      if (event.parent) {
        this._browserSession.removeFrameBrowsingContext(event.context);
        const parentFrameId = event.parent;
        for (const page2 of this._bidiPages.values()) {
          const parentFrame = page2._page._frameManager.frame(parentFrameId);
          if (!parentFrame) continue;
          page2._page._frameManager.frameDetached(event.context);
          return;
        }
        return;
      }
      const bidiPage2 = this._bidiPages.get(event.context);
      if (!bidiPage2) return;
      bidiPage2.didClose();
      this._bidiPages.delete(event.context);
    }
    _onScriptRealmDestroyed(event) {
      for (const page2 of this._bidiPages.values()) {
        if (page2._onRealmDestroyed(event)) return;
      }
    }
  }
  bidiBrowser.BidiBrowser = BidiBrowser;
  class BidiBrowserContext extends _browserContext.BrowserContext {
    constructor(browser2, browserContextId, options) {
      super(browser2, options, browserContextId);
      this._authenticateProxyViaHeader();
    }
    _bidiPages() {
      return [...this._browser._bidiPages.values()].filter((bidiPage2) => bidiPage2._browserContext === this);
    }
    possiblyUninitializedPages() {
      return this._bidiPages().map((bidiPage2) => bidiPage2._page);
    }
    async doCreateNewPage() {
      (0, _browserContext.assertBrowserContextIsNotOwned)(this);
      const {
        context
      } = await this._browser._browserSession.send("browsingContext.create", {
        type: bidi.BrowsingContext.CreateType.Window,
        userContext: this._browserContextId
      });
      return this._browser._bidiPages.get(context)._page;
    }
    async doGetCookies(urls) {
      const {
        cookies
      } = await this._browser._browserSession.send("storage.getCookies", {
        partition: {
          type: "storageKey",
          userContext: this._browserContextId
        }
      });
      return network2.filterCookies(cookies.map((c2) => {
        var _c$expiry;
        const copy2 = {
          name: c2.name,
          value: (0, _bidiNetworkManager.bidiBytesValueToString)(c2.value),
          domain: c2.domain,
          path: c2.path,
          httpOnly: c2.httpOnly,
          secure: c2.secure,
          expires: (_c$expiry = c2.expiry) !== null && _c$expiry !== void 0 ? _c$expiry : -1,
          sameSite: c2.sameSite ? fromBidiSameSite(c2.sameSite) : "None"
        };
        return copy2;
      }), urls);
    }
    async addCookies(cookies) {
      cookies = network2.rewriteCookies(cookies);
      const promises = cookies.map((c2) => {
        const cookie = {
          name: c2.name,
          value: {
            type: "string",
            value: c2.value
          },
          domain: c2.domain,
          path: c2.path,
          httpOnly: c2.httpOnly,
          secure: c2.secure,
          sameSite: c2.sameSite && toBidiSameSite(c2.sameSite),
          expiry: c2.expires === -1 || c2.expires === void 0 ? void 0 : Math.round(c2.expires)
        };
        return this._browser._browserSession.send("storage.setCookie", {
          cookie,
          partition: {
            type: "storageKey",
            userContext: this._browserContextId
          }
        });
      });
      await Promise.all(promises);
    }
    async doClearCookies() {
      await this._browser._browserSession.send("storage.deleteCookies", {
        partition: {
          type: "storageKey",
          userContext: this._browserContextId
        }
      });
    }
    async doGrantPermissions(origin, permissions) {
    }
    async doClearPermissions() {
    }
    async setGeolocation(geolocation) {
    }
    async setExtraHTTPHeaders(headers2) {
    }
    async setUserAgent(userAgent2) {
    }
    async setOffline(offline) {
    }
    async doSetHTTPCredentials(httpCredentials) {
      this._options.httpCredentials = httpCredentials;
      for (const page2 of this.pages()) await page2._delegate.updateHttpCredentials();
    }
    async doAddInitScript(initScript) {
      await Promise.all(this.pages().map((page2) => page2._delegate.addInitScript(initScript)));
    }
    async doRemoveNonInternalInitScripts() {
    }
    async doUpdateRequestInterception() {
    }
    onClosePersistent() {
    }
    async clearCache() {
    }
    async doClose(reason) {
      if (!this._browserContextId) {
        await this._browser.close({
          reason
        });
        return;
      }
      await this._browser._browserSession.send("browser.removeUserContext", {
        userContext: this._browserContextId
      });
      this._browser._contexts.delete(this._browserContextId);
    }
    async cancelDownload(uuid2) {
    }
  }
  bidiBrowser.BidiBrowserContext = BidiBrowserContext;
  function fromBidiSameSite(sameSite) {
    switch (sameSite) {
      case "strict":
        return "Strict";
      case "lax":
        return "Lax";
      case "none":
        return "None";
    }
    return "None";
  }
  function toBidiSameSite(sameSite) {
    switch (sameSite) {
      case "Strict":
        return bidi.Network.SameSite.Strict;
      case "Lax":
        return bidi.Network.SameSite.Lax;
      case "None":
        return bidi.Network.SameSite.None;
    }
    return bidi.Network.SameSite.None;
  }
  let Network = bidiBrowser.Network = void 0;
  (function(_Network) {
    let SameSite = /* @__PURE__ */ function(SameSite2) {
      SameSite2["Strict"] = "strict";
      SameSite2["Lax"] = "lax";
      SameSite2["None"] = "none";
      return SameSite2;
    }({});
    _Network.SameSite = SameSite;
  })(Network || (bidiBrowser.Network = Network = {}));
  return bidiBrowser;
}
var bidiOverCdp = {};
var BidiMapper = {};
var BidiServer = {};
var EventEmitter = {};
function mitt(n) {
  return { all: n = n || /* @__PURE__ */ new Map(), on: function(t, e2) {
    var i = n.get(t);
    i ? i.push(e2) : n.set(t, [e2]);
  }, off: function(t, e2) {
    var i = n.get(t);
    i && (e2 ? i.splice(i.indexOf(e2) >>> 0, 1) : n.set(t, []));
  }, emit: function(t, e2) {
    var i = n.get(t);
    i && i.slice().map(function(n2) {
      n2(e2);
    }), (i = n.get("*")) && i.slice().map(function(n2) {
      n2(t, e2);
    });
  } };
}
const mitt$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({ __proto__: null, default: mitt }, Symbol.toStringTag, { value: "Module" }));
const require$$0 = /* @__PURE__ */ getAugmentedNamespace(mitt$1);
var hasRequiredEventEmitter$1;
function requireEventEmitter$1() {
  if (hasRequiredEventEmitter$1) return EventEmitter;
  hasRequiredEventEmitter$1 = 1;
  var __importDefault = EventEmitter && EventEmitter.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(EventEmitter, "__esModule", { value: true });
  EventEmitter.EventEmitter = void 0;
  const mitt_1 = __importDefault(require$$0);
  let EventEmitter$1 = class EventEmitter {
    #emitter = (0, mitt_1.default)();
    on(type, handler) {
      this.#emitter.on(type, handler);
      return this;
    }
    /**
     * Like `on` but the listener will only be fired once and then it will be removed.
     * @param event The event you'd like to listen to
     * @param handler The handler function to run when the event occurs
     * @return `this` to enable chaining method calls.
     */
    once(event, handler) {
      const onceHandler = (eventData) => {
        handler(eventData);
        this.off(event, onceHandler);
      };
      return this.on(event, onceHandler);
    }
    off(type, handler) {
      this.#emitter.off(type, handler);
      return this;
    }
    /**
     * Emits an event and call any associated listeners.
     *
     * @param event The event to emit.
     * @param eventData Any data to emit with the event.
     * @return `true` if there are any listeners, `false` otherwise.
     */
    emit(event, eventData) {
      this.#emitter.emit(event, eventData);
    }
    /**
     * Removes all listeners. If given an event argument, it will remove only
     * listeners for that event.
     * @param event - the event to remove listeners for.
     * @returns `this` to enable you to chain method calls.
     */
    removeAllListeners(event) {
      if (event) {
        this.#emitter.all.delete(event);
      } else {
        this.#emitter.all.clear();
      }
      return this;
    }
  };
  EventEmitter.EventEmitter = EventEmitter$1;
  return EventEmitter;
}
var log = {};
var hasRequiredLog;
function requireLog() {
  if (hasRequiredLog) return log;
  hasRequiredLog = 1;
  Object.defineProperty(log, "__esModule", { value: true });
  log.LogType = void 0;
  var LogType;
  (function(LogType2) {
    LogType2["bidi"] = "bidi";
    LogType2["cdp"] = "cdp";
    LogType2["debug"] = "debug";
    LogType2["debugError"] = "debug:error";
    LogType2["debugInfo"] = "debug:info";
    LogType2["debugWarn"] = "debug:warn";
  })(LogType || (log.LogType = LogType = {}));
  return log;
}
var ProcessingQueue = {};
var hasRequiredProcessingQueue;
function requireProcessingQueue() {
  if (hasRequiredProcessingQueue) return ProcessingQueue;
  hasRequiredProcessingQueue = 1;
  var _a;
  Object.defineProperty(ProcessingQueue, "__esModule", { value: true });
  ProcessingQueue.ProcessingQueue = void 0;
  const log_js_1 = requireLog();
  let ProcessingQueue$1 = class ProcessingQueue {
    static LOGGER_PREFIX = `${log_js_1.LogType.debug}:queue`;
    #logger;
    #processor;
    #queue = [];
    // Flag to keep only 1 active processor.
    #isProcessing = false;
    constructor(processor, logger2) {
      this.#processor = processor;
      this.#logger = logger2;
    }
    add(entry, name) {
      this.#queue.push([entry, name]);
      void this.#processIfNeeded();
    }
    async #processIfNeeded() {
      if (this.#isProcessing) {
        return;
      }
      this.#isProcessing = true;
      while (this.#queue.length > 0) {
        const arrayEntry = this.#queue.shift();
        if (!arrayEntry) {
          continue;
        }
        const [entryPromise, name] = arrayEntry;
        this.#logger?.(_a.LOGGER_PREFIX, "Processing event:", name);
        await entryPromise.then((entry) => {
          if (entry.kind === "error") {
            this.#logger?.(log_js_1.LogType.debugError, "Event threw before sending:", entry.error.message, entry.error.stack);
            return;
          }
          return this.#processor(entry.value);
        }).catch((error) => {
          this.#logger?.(log_js_1.LogType.debugError, "Event was not processed:", error?.message);
        });
      }
      this.#isProcessing = false;
    }
  };
  ProcessingQueue.ProcessingQueue = ProcessingQueue$1;
  _a = ProcessingQueue$1;
  return ProcessingQueue;
}
var CommandProcessor = {};
var protocol = {};
var cdp = {};
var hasRequiredCdp;
function requireCdp() {
  if (hasRequiredCdp) return cdp;
  hasRequiredCdp = 1;
  Object.defineProperty(cdp, "__esModule", { value: true });
  return cdp;
}
var chromiumBidi = {};
var hasRequiredChromiumBidi;
function requireChromiumBidi() {
  if (hasRequiredChromiumBidi) return chromiumBidi;
  hasRequiredChromiumBidi = 1;
  Object.defineProperty(chromiumBidi, "__esModule", { value: true });
  chromiumBidi.EVENT_NAMES = chromiumBidi.Bluetooth = chromiumBidi.Network = chromiumBidi.BrowsingContext = chromiumBidi.Log = chromiumBidi.Script = chromiumBidi.BiDiModule = void 0;
  var BiDiModule;
  (function(BiDiModule2) {
    BiDiModule2["Bluetooth"] = "bluetooth";
    BiDiModule2["Browser"] = "browser";
    BiDiModule2["BrowsingContext"] = "browsingContext";
    BiDiModule2["Cdp"] = "goog:cdp";
    BiDiModule2["DeprecatedCdp"] = "cdp";
    BiDiModule2["Input"] = "input";
    BiDiModule2["Log"] = "log";
    BiDiModule2["Network"] = "network";
    BiDiModule2["Script"] = "script";
    BiDiModule2["Session"] = "session";
  })(BiDiModule || (chromiumBidi.BiDiModule = BiDiModule = {}));
  var Script;
  (function(Script2) {
    (function(EventNames) {
      EventNames["Message"] = "script.message";
      EventNames["RealmCreated"] = "script.realmCreated";
      EventNames["RealmDestroyed"] = "script.realmDestroyed";
    })(Script2.EventNames || (Script2.EventNames = {}));
  })(Script || (chromiumBidi.Script = Script = {}));
  var Log;
  (function(Log2) {
    (function(EventNames) {
      EventNames["LogEntryAdded"] = "log.entryAdded";
    })(Log2.EventNames || (Log2.EventNames = {}));
  })(Log || (chromiumBidi.Log = Log = {}));
  var BrowsingContext;
  (function(BrowsingContext2) {
    (function(EventNames) {
      EventNames["ContextCreated"] = "browsingContext.contextCreated";
      EventNames["ContextDestroyed"] = "browsingContext.contextDestroyed";
      EventNames["DomContentLoaded"] = "browsingContext.domContentLoaded";
      EventNames["DownloadWillBegin"] = "browsingContext.downloadWillBegin";
      EventNames["FragmentNavigated"] = "browsingContext.fragmentNavigated";
      EventNames["HistoryUpdated"] = "browsingContext.historyUpdated";
      EventNames["Load"] = "browsingContext.load";
      EventNames["NavigationAborted"] = "browsingContext.navigationAborted";
      EventNames["NavigationCommitted"] = "browsingContext.navigationCommitted";
      EventNames["NavigationFailed"] = "browsingContext.navigationFailed";
      EventNames["NavigationStarted"] = "browsingContext.navigationStarted";
      EventNames["UserPromptClosed"] = "browsingContext.userPromptClosed";
      EventNames["UserPromptOpened"] = "browsingContext.userPromptOpened";
    })(BrowsingContext2.EventNames || (BrowsingContext2.EventNames = {}));
  })(BrowsingContext || (chromiumBidi.BrowsingContext = BrowsingContext = {}));
  var Network;
  (function(Network2) {
    (function(EventNames) {
      EventNames["AuthRequired"] = "network.authRequired";
      EventNames["BeforeRequestSent"] = "network.beforeRequestSent";
      EventNames["FetchError"] = "network.fetchError";
      EventNames["ResponseCompleted"] = "network.responseCompleted";
      EventNames["ResponseStarted"] = "network.responseStarted";
    })(Network2.EventNames || (Network2.EventNames = {}));
  })(Network || (chromiumBidi.Network = Network = {}));
  var Bluetooth;
  (function(Bluetooth2) {
    (function(EventNames) {
      EventNames["RequestDevicePromptUpdated"] = "bluetooth.requestDevicePromptUpdated";
    })(Bluetooth2.EventNames || (Bluetooth2.EventNames = {}));
  })(Bluetooth || (chromiumBidi.Bluetooth = Bluetooth = {}));
  chromiumBidi.EVENT_NAMES = /* @__PURE__ */ new Set([
    // keep-sorted start
    ...Object.values(BiDiModule),
    ...Object.values(Bluetooth.EventNames),
    ...Object.values(BrowsingContext.EventNames),
    ...Object.values(Log.EventNames),
    ...Object.values(Network.EventNames),
    ...Object.values(Script.EventNames)
    // keep-sorted end
  ]);
  return chromiumBidi;
}
var webdriverBidi = {};
var hasRequiredWebdriverBidi;
function requireWebdriverBidi() {
  if (hasRequiredWebdriverBidi) return webdriverBidi;
  hasRequiredWebdriverBidi = 1;
  Object.defineProperty(webdriverBidi, "__esModule", { value: true });
  return webdriverBidi;
}
var ErrorResponse = {};
var hasRequiredErrorResponse;
function requireErrorResponse() {
  if (hasRequiredErrorResponse) return ErrorResponse;
  hasRequiredErrorResponse = 1;
  Object.defineProperty(ErrorResponse, "__esModule", { value: true });
  ErrorResponse.NoSuchWebExtensionException = ErrorResponse.InvalidWebExtensionException = ErrorResponse.UnderspecifiedStoragePartitionException = ErrorResponse.UnableToSetFileInputException = ErrorResponse.UnableToSetCookieException = ErrorResponse.NoSuchStoragePartitionException = ErrorResponse.UnsupportedOperationException = ErrorResponse.UnableToCloseBrowserException = ErrorResponse.UnableToCaptureScreenException = ErrorResponse.UnknownErrorException = ErrorResponse.UnknownCommandException = ErrorResponse.SessionNotCreatedException = ErrorResponse.NoSuchUserContextException = ErrorResponse.NoSuchScriptException = ErrorResponse.NoSuchRequestException = ErrorResponse.NoSuchNodeException = ErrorResponse.NoSuchInterceptException = ErrorResponse.NoSuchHistoryEntryException = ErrorResponse.NoSuchHandleException = ErrorResponse.NoSuchFrameException = ErrorResponse.NoSuchElementException = ErrorResponse.NoSuchAlertException = ErrorResponse.MoveTargetOutOfBoundsException = ErrorResponse.InvalidSessionIdException = ErrorResponse.InvalidSelectorException = ErrorResponse.InvalidArgumentException = ErrorResponse.Exception = void 0;
  class Exception extends Error {
    error;
    message;
    stacktrace;
    constructor(error, message, stacktrace) {
      super();
      this.error = error;
      this.message = message;
      this.stacktrace = stacktrace;
    }
    toErrorResponse(commandId) {
      return {
        type: "error",
        id: commandId,
        error: this.error,
        message: this.message,
        stacktrace: this.stacktrace
      };
    }
  }
  ErrorResponse.Exception = Exception;
  class InvalidArgumentException extends Exception {
    constructor(message, stacktrace) {
      super("invalid argument", message, stacktrace);
    }
  }
  ErrorResponse.InvalidArgumentException = InvalidArgumentException;
  class InvalidSelectorException extends Exception {
    constructor(message, stacktrace) {
      super("invalid selector", message, stacktrace);
    }
  }
  ErrorResponse.InvalidSelectorException = InvalidSelectorException;
  class InvalidSessionIdException extends Exception {
    constructor(message, stacktrace) {
      super("invalid session id", message, stacktrace);
    }
  }
  ErrorResponse.InvalidSessionIdException = InvalidSessionIdException;
  class MoveTargetOutOfBoundsException extends Exception {
    constructor(message, stacktrace) {
      super("move target out of bounds", message, stacktrace);
    }
  }
  ErrorResponse.MoveTargetOutOfBoundsException = MoveTargetOutOfBoundsException;
  class NoSuchAlertException extends Exception {
    constructor(message, stacktrace) {
      super("no such alert", message, stacktrace);
    }
  }
  ErrorResponse.NoSuchAlertException = NoSuchAlertException;
  class NoSuchElementException extends Exception {
    constructor(message, stacktrace) {
      super("no such element", message, stacktrace);
    }
  }
  ErrorResponse.NoSuchElementException = NoSuchElementException;
  class NoSuchFrameException extends Exception {
    constructor(message, stacktrace) {
      super("no such frame", message, stacktrace);
    }
  }
  ErrorResponse.NoSuchFrameException = NoSuchFrameException;
  class NoSuchHandleException extends Exception {
    constructor(message, stacktrace) {
      super("no such handle", message, stacktrace);
    }
  }
  ErrorResponse.NoSuchHandleException = NoSuchHandleException;
  class NoSuchHistoryEntryException extends Exception {
    constructor(message, stacktrace) {
      super("no such history entry", message, stacktrace);
    }
  }
  ErrorResponse.NoSuchHistoryEntryException = NoSuchHistoryEntryException;
  class NoSuchInterceptException extends Exception {
    constructor(message, stacktrace) {
      super("no such intercept", message, stacktrace);
    }
  }
  ErrorResponse.NoSuchInterceptException = NoSuchInterceptException;
  class NoSuchNodeException extends Exception {
    constructor(message, stacktrace) {
      super("no such node", message, stacktrace);
    }
  }
  ErrorResponse.NoSuchNodeException = NoSuchNodeException;
  class NoSuchRequestException extends Exception {
    constructor(message, stacktrace) {
      super("no such request", message, stacktrace);
    }
  }
  ErrorResponse.NoSuchRequestException = NoSuchRequestException;
  class NoSuchScriptException extends Exception {
    constructor(message, stacktrace) {
      super("no such script", message, stacktrace);
    }
  }
  ErrorResponse.NoSuchScriptException = NoSuchScriptException;
  class NoSuchUserContextException extends Exception {
    constructor(message, stacktrace) {
      super("no such user context", message, stacktrace);
    }
  }
  ErrorResponse.NoSuchUserContextException = NoSuchUserContextException;
  class SessionNotCreatedException extends Exception {
    constructor(message, stacktrace) {
      super("session not created", message, stacktrace);
    }
  }
  ErrorResponse.SessionNotCreatedException = SessionNotCreatedException;
  class UnknownCommandException extends Exception {
    constructor(message, stacktrace) {
      super("unknown command", message, stacktrace);
    }
  }
  ErrorResponse.UnknownCommandException = UnknownCommandException;
  class UnknownErrorException extends Exception {
    constructor(message, stacktrace = new Error().stack) {
      super("unknown error", message, stacktrace);
    }
  }
  ErrorResponse.UnknownErrorException = UnknownErrorException;
  class UnableToCaptureScreenException extends Exception {
    constructor(message, stacktrace) {
      super("unable to capture screen", message, stacktrace);
    }
  }
  ErrorResponse.UnableToCaptureScreenException = UnableToCaptureScreenException;
  class UnableToCloseBrowserException extends Exception {
    constructor(message, stacktrace) {
      super("unable to close browser", message, stacktrace);
    }
  }
  ErrorResponse.UnableToCloseBrowserException = UnableToCloseBrowserException;
  class UnsupportedOperationException extends Exception {
    constructor(message, stacktrace) {
      super("unsupported operation", message, stacktrace);
    }
  }
  ErrorResponse.UnsupportedOperationException = UnsupportedOperationException;
  class NoSuchStoragePartitionException extends Exception {
    constructor(message, stacktrace) {
      super("no such storage partition", message, stacktrace);
    }
  }
  ErrorResponse.NoSuchStoragePartitionException = NoSuchStoragePartitionException;
  class UnableToSetCookieException extends Exception {
    constructor(message, stacktrace) {
      super("unable to set cookie", message, stacktrace);
    }
  }
  ErrorResponse.UnableToSetCookieException = UnableToSetCookieException;
  class UnableToSetFileInputException extends Exception {
    constructor(message, stacktrace) {
      super("unable to set file input", message, stacktrace);
    }
  }
  ErrorResponse.UnableToSetFileInputException = UnableToSetFileInputException;
  class UnderspecifiedStoragePartitionException extends Exception {
    constructor(message, stacktrace) {
      super("underspecified storage partition", message, stacktrace);
    }
  }
  ErrorResponse.UnderspecifiedStoragePartitionException = UnderspecifiedStoragePartitionException;
  class InvalidWebExtensionException extends Exception {
    constructor(message, stacktrace) {
      super("invalid web extension", message, stacktrace);
    }
  }
  ErrorResponse.InvalidWebExtensionException = InvalidWebExtensionException;
  class NoSuchWebExtensionException extends Exception {
    constructor(message, stacktrace) {
      super("no such web extension", message, stacktrace);
    }
  }
  ErrorResponse.NoSuchWebExtensionException = NoSuchWebExtensionException;
  return ErrorResponse;
}
var webdriverBidiPermissions = {};
var hasRequiredWebdriverBidiPermissions;
function requireWebdriverBidiPermissions() {
  if (hasRequiredWebdriverBidiPermissions) return webdriverBidiPermissions;
  hasRequiredWebdriverBidiPermissions = 1;
  Object.defineProperty(webdriverBidiPermissions, "__esModule", { value: true });
  return webdriverBidiPermissions;
}
var webdriverBidiBluetooth = {};
var hasRequiredWebdriverBidiBluetooth;
function requireWebdriverBidiBluetooth() {
  if (hasRequiredWebdriverBidiBluetooth) return webdriverBidiBluetooth;
  hasRequiredWebdriverBidiBluetooth = 1;
  Object.defineProperty(webdriverBidiBluetooth, "__esModule", { value: true });
  return webdriverBidiBluetooth;
}
var hasRequiredProtocol;
function requireProtocol() {
  if (hasRequiredProtocol) return protocol;
  hasRequiredProtocol = 1;
  (function(exports) {
    var __createBinding = protocol && protocol.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o2[k22] = m2[k2];
    });
    var __setModuleDefault = protocol && protocol.__setModuleDefault || (Object.create ? function(o2, v2) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
    } : function(o2, v2) {
      o2["default"] = v2;
    });
    var __importStar = protocol && protocol.__importStar || /* @__PURE__ */ function() {
      var ownKeys = function(o2) {
        ownKeys = Object.getOwnPropertyNames || function(o3) {
          var ar = [];
          for (var k2 in o3) if (Object.prototype.hasOwnProperty.call(o3, k2)) ar[ar.length] = k2;
          return ar;
        };
        return ownKeys(o2);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k2 = ownKeys(mod), i = 0; i < k2.length; i++) if (k2[i] !== "default") __createBinding(result, mod, k2[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    var __exportStar = protocol && protocol.__exportStar || function(m2, exports2) {
      for (var p in m2) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m2, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChromiumBidi = exports.Cdp = void 0;
    exports.Cdp = __importStar(requireCdp());
    exports.ChromiumBidi = __importStar(requireChromiumBidi());
    __exportStar(requireWebdriverBidi(), exports);
    __exportStar(requireErrorResponse(), exports);
    __exportStar(requireWebdriverBidiPermissions(), exports);
    __exportStar(requireWebdriverBidiBluetooth(), exports);
  })(protocol);
  return protocol;
}
var BidiNoOpParser = {};
var hasRequiredBidiNoOpParser;
function requireBidiNoOpParser() {
  if (hasRequiredBidiNoOpParser) return BidiNoOpParser;
  hasRequiredBidiNoOpParser = 1;
  Object.defineProperty(BidiNoOpParser, "__esModule", { value: true });
  BidiNoOpParser.BidiNoOpParser = void 0;
  let BidiNoOpParser$1 = class BidiNoOpParser {
    // Bluetooth module
    // keep-sorted start block=yes
    parseHandleRequestDevicePromptParams(params) {
      return params;
    }
    parseSimulateAdapterParameters(params) {
      return params;
    }
    parseSimulateAdvertisementParameters(params) {
      return params;
    }
    parseSimulatePreconnectedPeripheralParameters(params) {
      return params;
    }
    // keep-sorted end
    // Browser module
    // keep-sorted start block=yes
    parseRemoveUserContextParams(params) {
      return params;
    }
    // keep-sorted end
    // Browsing Context module
    // keep-sorted start block=yes
    parseActivateParams(params) {
      return params;
    }
    parseCaptureScreenshotParams(params) {
      return params;
    }
    parseCloseParams(params) {
      return params;
    }
    parseCreateParams(params) {
      return params;
    }
    parseGetTreeParams(params) {
      return params;
    }
    parseHandleUserPromptParams(params) {
      return params;
    }
    parseLocateNodesParams(params) {
      return params;
    }
    parseNavigateParams(params) {
      return params;
    }
    parsePrintParams(params) {
      return params;
    }
    parseReloadParams(params) {
      return params;
    }
    parseSetViewportParams(params) {
      return params;
    }
    parseTraverseHistoryParams(params) {
      return params;
    }
    // keep-sorted end
    // CDP module
    // keep-sorted start block=yes
    parseGetSessionParams(params) {
      return params;
    }
    parseResolveRealmParams(params) {
      return params;
    }
    parseSendCommandParams(params) {
      return params;
    }
    // keep-sorted end
    // Script module
    // keep-sorted start block=yes
    parseAddPreloadScriptParams(params) {
      return params;
    }
    parseCallFunctionParams(params) {
      return params;
    }
    parseDisownParams(params) {
      return params;
    }
    parseEvaluateParams(params) {
      return params;
    }
    parseGetRealmsParams(params) {
      return params;
    }
    parseRemovePreloadScriptParams(params) {
      return params;
    }
    // keep-sorted end
    // Input module
    // keep-sorted start block=yes
    parsePerformActionsParams(params) {
      return params;
    }
    parseReleaseActionsParams(params) {
      return params;
    }
    parseSetFilesParams(params) {
      return params;
    }
    // keep-sorted end
    // Network module
    // keep-sorted start block=yes
    parseAddInterceptParams(params) {
      return params;
    }
    parseContinueRequestParams(params) {
      return params;
    }
    parseContinueResponseParams(params) {
      return params;
    }
    parseContinueWithAuthParams(params) {
      return params;
    }
    parseFailRequestParams(params) {
      return params;
    }
    parseProvideResponseParams(params) {
      return params;
    }
    parseRemoveInterceptParams(params) {
      return params;
    }
    parseSetCacheBehavior(params) {
      return params;
    }
    // keep-sorted end
    // Permissions module
    // keep-sorted start block=yes
    parseSetPermissionsParams(params) {
      return params;
    }
    // keep-sorted end
    // Session module
    // keep-sorted start block=yes
    parseSubscribeParams(params) {
      return params;
    }
    parseUnsubscribeParams(params) {
      return params;
    }
    // keep-sorted end
    // Storage module
    // keep-sorted start block=yes
    parseDeleteCookiesParams(params) {
      return params;
    }
    parseGetCookiesParams(params) {
      return params;
    }
    parseSetCookieParams(params) {
      return params;
    }
    // keep-sorted end
    // WebExtenstion module
    // keep-sorted start block=yes
    parseInstallParams(params) {
      return params;
    }
    parseUninstallParams(params) {
      return params;
    }
  };
  BidiNoOpParser.BidiNoOpParser = BidiNoOpParser$1;
  return BidiNoOpParser;
}
var BrowserProcessor = {};
var hasRequiredBrowserProcessor;
function requireBrowserProcessor() {
  if (hasRequiredBrowserProcessor) return BrowserProcessor;
  hasRequiredBrowserProcessor = 1;
  Object.defineProperty(BrowserProcessor, "__esModule", { value: true });
  BrowserProcessor.BrowserProcessor = void 0;
  const protocol_js_1 = requireProtocol();
  let BrowserProcessor$1 = class BrowserProcessor {
    #browserCdpClient;
    #browsingContextStorage;
    #userContextStorage;
    constructor(browserCdpClient, browsingContextStorage, userContextStorage) {
      this.#browserCdpClient = browserCdpClient;
      this.#browsingContextStorage = browsingContextStorage;
      this.#userContextStorage = userContextStorage;
    }
    close() {
      setTimeout(() => this.#browserCdpClient.sendCommand("Browser.close"), 0);
      return {};
    }
    async createUserContext(params) {
      const request = {
        proxyServer: params["goog:proxyServer"] ?? void 0
      };
      const proxyBypassList = params["goog:proxyBypassList"] ?? void 0;
      if (proxyBypassList) {
        request.proxyBypassList = proxyBypassList.join(",");
      }
      const context = await this.#browserCdpClient.sendCommand("Target.createBrowserContext", request);
      return {
        userContext: context.browserContextId
      };
    }
    async removeUserContext(params) {
      const userContext = params.userContext;
      if (userContext === "default") {
        throw new protocol_js_1.InvalidArgumentException("`default` user context cannot be removed");
      }
      try {
        await this.#browserCdpClient.sendCommand("Target.disposeBrowserContext", {
          browserContextId: userContext
        });
      } catch (err) {
        if (err.message.startsWith("Failed to find context with id")) {
          throw new protocol_js_1.NoSuchUserContextException(err.message);
        }
        throw err;
      }
      return {};
    }
    async getUserContexts() {
      return {
        userContexts: await this.#userContextStorage.getUserContexts()
      };
    }
    async #getWindowInfo(targetId) {
      const windowInfo = await this.#browserCdpClient.sendCommand("Browser.getWindowForTarget", { targetId });
      return {
        // `active` is not supported in CDP yet.
        active: false,
        clientWindow: `${windowInfo.windowId}`,
        state: windowInfo.bounds.windowState ?? "normal",
        height: windowInfo.bounds.height ?? 0,
        width: windowInfo.bounds.width ?? 0,
        x: windowInfo.bounds.left ?? 0,
        y: windowInfo.bounds.top ?? 0
      };
    }
    async getClientWindows() {
      const topLevelTargetIds = this.#browsingContextStorage.getTopLevelContexts().map((b) => b.cdpTarget.id);
      const clientWindows = await Promise.all(topLevelTargetIds.map(async (targetId) => await this.#getWindowInfo(targetId)));
      const uniqueClientWindowIds = /* @__PURE__ */ new Set();
      const uniqueClientWindows = new Array();
      for (const window2 of clientWindows) {
        if (!uniqueClientWindowIds.has(window2.clientWindow)) {
          uniqueClientWindowIds.add(window2.clientWindow);
          uniqueClientWindows.push(window2);
        }
      }
      return { clientWindows: uniqueClientWindows };
    }
  };
  BrowserProcessor.BrowserProcessor = BrowserProcessor$1;
  return BrowserProcessor;
}
var CdpProcessor = {};
var hasRequiredCdpProcessor;
function requireCdpProcessor() {
  if (hasRequiredCdpProcessor) return CdpProcessor;
  hasRequiredCdpProcessor = 1;
  Object.defineProperty(CdpProcessor, "__esModule", { value: true });
  CdpProcessor.CdpProcessor = void 0;
  const protocol_js_1 = requireProtocol();
  let CdpProcessor$1 = class CdpProcessor {
    #browsingContextStorage;
    #realmStorage;
    #cdpConnection;
    #browserCdpClient;
    constructor(browsingContextStorage, realmStorage, cdpConnection, browserCdpClient) {
      this.#browsingContextStorage = browsingContextStorage;
      this.#realmStorage = realmStorage;
      this.#cdpConnection = cdpConnection;
      this.#browserCdpClient = browserCdpClient;
    }
    getSession(params) {
      const context = params.context;
      const sessionId = this.#browsingContextStorage.getContext(context).cdpTarget.cdpSessionId;
      if (sessionId === void 0) {
        return {};
      }
      return { session: sessionId };
    }
    resolveRealm(params) {
      const context = params.realm;
      const realm = this.#realmStorage.getRealm({ realmId: context });
      if (realm === void 0) {
        throw new protocol_js_1.UnknownErrorException(`Could not find realm ${params.realm}`);
      }
      return { executionContextId: realm.executionContextId };
    }
    async sendCommand(params) {
      const client = params.session ? this.#cdpConnection.getCdpClient(params.session) : this.#browserCdpClient;
      const result = await client.sendCommand(params.method, params.params);
      return {
        result,
        session: params.session
      };
    }
  };
  CdpProcessor.CdpProcessor = CdpProcessor$1;
  return CdpProcessor;
}
var BrowsingContextProcessor = {};
var hasRequiredBrowsingContextProcessor;
function requireBrowsingContextProcessor() {
  if (hasRequiredBrowsingContextProcessor) return BrowsingContextProcessor;
  hasRequiredBrowsingContextProcessor = 1;
  Object.defineProperty(BrowsingContextProcessor, "__esModule", { value: true });
  BrowsingContextProcessor.BrowsingContextProcessor = void 0;
  const protocol_js_1 = requireProtocol();
  let BrowsingContextProcessor$1 = class BrowsingContextProcessor {
    #browserCdpClient;
    #browsingContextStorage;
    #eventManager;
    constructor(browserCdpClient, browsingContextStorage, eventManager) {
      this.#browserCdpClient = browserCdpClient;
      this.#browsingContextStorage = browsingContextStorage;
      this.#eventManager = eventManager;
      this.#eventManager.addSubscribeHook(protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.ContextCreated, this.#onContextCreatedSubscribeHook.bind(this));
    }
    getTree(params) {
      const resultContexts = params.root === void 0 ? this.#browsingContextStorage.getTopLevelContexts() : [this.#browsingContextStorage.getContext(params.root)];
      return {
        contexts: resultContexts.map((c2) => c2.serializeToBidiValue(params.maxDepth ?? Number.MAX_VALUE))
      };
    }
    async create(params) {
      let referenceContext;
      let userContext = "default";
      if (params.referenceContext !== void 0) {
        referenceContext = this.#browsingContextStorage.getContext(params.referenceContext);
        if (!referenceContext.isTopLevelContext()) {
          throw new protocol_js_1.InvalidArgumentException(`referenceContext should be a top-level context`);
        }
        userContext = referenceContext.userContext;
      }
      if (params.userContext !== void 0) {
        userContext = params.userContext;
      }
      const existingContexts = this.#browsingContextStorage.getAllContexts().filter((context2) => context2.userContext === userContext);
      let newWindow = false;
      switch (params.type) {
        case "tab":
          newWindow = false;
          break;
        case "window":
          newWindow = true;
          break;
      }
      if (!existingContexts.length) {
        newWindow = true;
      }
      let result;
      try {
        result = await this.#browserCdpClient.sendCommand("Target.createTarget", {
          url: "about:blank",
          newWindow,
          browserContextId: userContext === "default" ? void 0 : userContext,
          background: params.background === true
        });
      } catch (err) {
        if (
          // See https://source.chromium.org/chromium/chromium/src/+/main:chrome/browser/devtools/protocol/target_handler.cc;l=90;drc=e80392ac11e48a691f4309964cab83a3a59e01c8
          err.message.startsWith("Failed to find browser context with id") || // See https://source.chromium.org/chromium/chromium/src/+/main:headless/lib/browser/protocol/target_handler.cc;l=49;drc=e80392ac11e48a691f4309964cab83a3a59e01c8
          err.message === "browserContextId"
        ) {
          throw new protocol_js_1.NoSuchUserContextException(`The context ${userContext} was not found`);
        }
        throw err;
      }
      const context = await this.#browsingContextStorage.waitForContext(result.targetId);
      await context.lifecycleLoaded();
      return { context: context.id };
    }
    navigate(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      return context.navigate(
        params.url,
        params.wait ?? "none"
        /* BrowsingContext.ReadinessState.None */
      );
    }
    reload(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      return context.reload(
        params.ignoreCache ?? false,
        params.wait ?? "none"
        /* BrowsingContext.ReadinessState.None */
      );
    }
    async activate(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      if (!context.isTopLevelContext()) {
        throw new protocol_js_1.InvalidArgumentException("Activation is only supported on the top-level context");
      }
      await context.activate();
      return {};
    }
    async captureScreenshot(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      return await context.captureScreenshot(params);
    }
    async print(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      return await context.print(params);
    }
    async setViewport(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      if (!context.isTopLevelContext()) {
        throw new protocol_js_1.InvalidArgumentException("Emulating viewport is only supported on the top-level context");
      }
      await context.setViewport(params.viewport, params.devicePixelRatio);
      return {};
    }
    async traverseHistory(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      if (!context) {
        throw new protocol_js_1.InvalidArgumentException(`No browsing context with id ${params.context}`);
      }
      if (!context.isTopLevelContext()) {
        throw new protocol_js_1.InvalidArgumentException("Traversing history is only supported on the top-level context");
      }
      await context.traverseHistory(params.delta);
      return {};
    }
    async handleUserPrompt(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      try {
        await context.handleUserPrompt(params.accept, params.userText);
      } catch (error) {
        if (error.message?.includes("No dialog is showing")) {
          throw new protocol_js_1.NoSuchAlertException("No dialog is showing");
        }
        throw error;
      }
      return {};
    }
    async close(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      if (!context.isTopLevelContext()) {
        throw new protocol_js_1.InvalidArgumentException(`Non top-level browsing context ${context.id} cannot be closed.`);
      }
      const parentCdpClient = context.cdpTarget.parentCdpClient;
      try {
        const detachedFromTargetPromise = new Promise((resolve2) => {
          const onContextDestroyed = (event) => {
            if (event.targetId === params.context) {
              parentCdpClient.off("Target.detachedFromTarget", onContextDestroyed);
              resolve2();
            }
          };
          parentCdpClient.on("Target.detachedFromTarget", onContextDestroyed);
        });
        try {
          if (params.promptUnload) {
            await context.close();
          } else {
            await parentCdpClient.sendCommand("Target.closeTarget", {
              targetId: params.context
            });
          }
        } catch (error) {
          if (!parentCdpClient.isCloseError(error)) {
            throw error;
          }
        }
        await detachedFromTargetPromise;
      } catch (error) {
        if (!(error.code === -32e3 && error.message === "Not attached to an active page")) {
          throw error;
        }
      }
      return {};
    }
    async locateNodes(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      return await context.locateNodes(params);
    }
    #onContextCreatedSubscribeHook(contextId) {
      const context = this.#browsingContextStorage.getContext(contextId);
      const contextsToReport = [
        context,
        ...this.#browsingContextStorage.getContext(contextId).allChildren
      ];
      contextsToReport.forEach((context2) => {
        this.#eventManager.registerEvent({
          type: "event",
          method: protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.ContextCreated,
          params: context2.serializeToBidiValue()
        }, context2.id);
      });
      return Promise.resolve();
    }
  };
  BrowsingContextProcessor.BrowsingContextProcessor = BrowsingContextProcessor$1;
  return BrowsingContextProcessor;
}
var InputProcessor = {};
var assert = {};
var hasRequiredAssert;
function requireAssert() {
  if (hasRequiredAssert) return assert;
  hasRequiredAssert = 1;
  Object.defineProperty(assert, "__esModule", { value: true });
  assert.assert = assert$12;
  function assert$12(predicate, message) {
    if (!predicate) {
      throw new Error(message ?? "Internal assertion failed.");
    }
  }
  return assert;
}
var ActionDispatcher = {};
var graphemeTools = {};
var hasRequiredGraphemeTools;
function requireGraphemeTools() {
  if (hasRequiredGraphemeTools) return graphemeTools;
  hasRequiredGraphemeTools = 1;
  Object.defineProperty(graphemeTools, "__esModule", { value: true });
  graphemeTools.isSingleComplexGrapheme = isSingleComplexGrapheme;
  graphemeTools.isSingleGrapheme = isSingleGrapheme;
  function isSingleComplexGrapheme(value) {
    return isSingleGrapheme(value) && value.length > 1;
  }
  function isSingleGrapheme(value) {
    const segmenter = new Intl.Segmenter("en", { granularity: "grapheme" });
    return [...segmenter.segment(value)].length === 1;
  }
  return graphemeTools;
}
var InputSource = {};
var hasRequiredInputSource;
function requireInputSource() {
  if (hasRequiredInputSource) return InputSource;
  hasRequiredInputSource = 1;
  Object.defineProperty(InputSource, "__esModule", { value: true });
  InputSource.WheelSource = InputSource.PointerSource = InputSource.KeySource = InputSource.NoneSource = void 0;
  class NoneSource {
    type = "none";
  }
  InputSource.NoneSource = NoneSource;
  class KeySource {
    type = "key";
    pressed = /* @__PURE__ */ new Set();
    // This is a bitfield that matches the modifiers parameter of
    // https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-dispatchKeyEvent
    #modifiers = 0;
    get modifiers() {
      return this.#modifiers;
    }
    get alt() {
      return (this.#modifiers & 1) === 1;
    }
    set alt(value) {
      this.#setModifier(value, 1);
    }
    get ctrl() {
      return (this.#modifiers & 2) === 2;
    }
    set ctrl(value) {
      this.#setModifier(value, 2);
    }
    get meta() {
      return (this.#modifiers & 4) === 4;
    }
    set meta(value) {
      this.#setModifier(value, 4);
    }
    get shift() {
      return (this.#modifiers & 8) === 8;
    }
    set shift(value) {
      this.#setModifier(value, 8);
    }
    #setModifier(value, bit) {
      if (value) {
        this.#modifiers |= bit;
      } else {
        this.#modifiers &= ~bit;
      }
    }
  }
  InputSource.KeySource = KeySource;
  class PointerSource {
    type = "pointer";
    subtype;
    pointerId;
    pressed = /* @__PURE__ */ new Set();
    x = 0;
    y = 0;
    radiusX;
    radiusY;
    force;
    constructor(id, subtype) {
      this.pointerId = id;
      this.subtype = subtype;
    }
    // This is a bitfield that matches the buttons parameter of
    // https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-dispatchMouseEvent
    get buttons() {
      let buttons = 0;
      for (const button of this.pressed) {
        switch (button) {
          case 0:
            buttons |= 1;
            break;
          case 1:
            buttons |= 4;
            break;
          case 2:
            buttons |= 2;
            break;
          case 3:
            buttons |= 8;
            break;
          case 4:
            buttons |= 16;
            break;
        }
      }
      return buttons;
    }
    // --- Platform-specific code starts here ---
    // Input.dispatchMouseEvent doesn't know the concept of double click, so we
    // need to create the logic, similar to how it's done for OSes:
    // https://source.chromium.org/chromium/chromium/src/+/refs/heads/main:ui/events/event.cc;l=479
    static ClickContext = class ClickContext {
      static #DOUBLE_CLICK_TIME_MS = 500;
      static #MAX_DOUBLE_CLICK_RADIUS = 2;
      count = 0;
      #x;
      #y;
      #time;
      constructor(x2, y2, time2) {
        this.#x = x2;
        this.#y = y2;
        this.#time = time2;
      }
      compare(context) {
        return (
          // The click needs to be within a certain amount of ms.
          context.#time - this.#time > ClickContext.#DOUBLE_CLICK_TIME_MS || // The click needs to be within a certain square radius.
          Math.abs(context.#x - this.#x) > ClickContext.#MAX_DOUBLE_CLICK_RADIUS || Math.abs(context.#y - this.#y) > ClickContext.#MAX_DOUBLE_CLICK_RADIUS
        );
      }
    };
    #clickContexts = /* @__PURE__ */ new Map();
    setClickCount(button, context) {
      let storedContext = this.#clickContexts.get(button);
      if (!storedContext || storedContext.compare(context)) {
        storedContext = context;
      }
      ++storedContext.count;
      this.#clickContexts.set(button, storedContext);
      return storedContext.count;
    }
    getClickCount(button) {
      return this.#clickContexts.get(button)?.count ?? 0;
    }
    /**
     * Resets click count. Resets consequent click counter. Prevents grouping clicks in
     * different `performActions` calls, so that they are not grouped as double, triple etc
     * clicks. Required for https://github.com/GoogleChromeLabs/chromium-bidi/issues/3043.
     */
    resetClickCount() {
      this.#clickContexts = /* @__PURE__ */ new Map();
    }
  }
  InputSource.PointerSource = PointerSource;
  class WheelSource {
    type = "wheel";
  }
  InputSource.WheelSource = WheelSource;
  return InputSource;
}
var keyUtils = {};
var hasRequiredKeyUtils;
function requireKeyUtils() {
  if (hasRequiredKeyUtils) return keyUtils;
  hasRequiredKeyUtils = 1;
  Object.defineProperty(keyUtils, "__esModule", { value: true });
  keyUtils.getNormalizedKey = getNormalizedKey;
  keyUtils.getKeyCode = getKeyCode;
  keyUtils.getKeyLocation = getKeyLocation;
  function getNormalizedKey(value) {
    switch (value) {
      case "":
        return "Unidentified";
      case "":
        return "Cancel";
      case "":
        return "Help";
      case "":
        return "Backspace";
      case "":
        return "Tab";
      case "":
        return "Clear";
      // Specification declares the '\uE006' to be `Return`, but it is not supported by
      // Chrome, so fall back to `Enter`, which aligns with WPT.
      case "":
      case "":
        return "Enter";
      case "":
        return "Shift";
      case "":
        return "Control";
      case "":
        return "Alt";
      case "":
        return "Pause";
      case "":
        return "Escape";
      case "":
        return " ";
      case "":
        return "PageUp";
      case "":
        return "PageDown";
      case "":
        return "End";
      case "":
        return "Home";
      case "":
        return "ArrowLeft";
      case "":
        return "ArrowUp";
      case "":
        return "ArrowRight";
      case "":
        return "ArrowDown";
      case "":
        return "Insert";
      case "":
        return "Delete";
      case "":
        return ";";
      case "":
        return "=";
      case "":
        return "0";
      case "":
        return "1";
      case "":
        return "2";
      case "":
        return "3";
      case "":
        return "4";
      case "":
        return "5";
      case "":
        return "6";
      case "":
        return "7";
      case "":
        return "8";
      case "":
        return "9";
      case "":
        return "*";
      case "":
        return "+";
      case "":
        return ",";
      case "":
        return "-";
      case "":
        return ".";
      case "":
        return "/";
      case "":
        return "F1";
      case "":
        return "F2";
      case "":
        return "F3";
      case "":
        return "F4";
      case "":
        return "F5";
      case "":
        return "F6";
      case "":
        return "F7";
      case "":
        return "F8";
      case "":
        return "F9";
      case "":
        return "F10";
      case "":
        return "F11";
      case "":
        return "F12";
      case "":
        return "Meta";
      case "":
        return "ZenkakuHankaku";
      case "":
        return "Shift";
      case "":
        return "Control";
      case "":
        return "Alt";
      case "":
        return "Meta";
      case "":
        return "PageUp";
      case "":
        return "PageDown";
      case "":
        return "End";
      case "":
        return "Home";
      case "":
        return "ArrowLeft";
      case "":
        return "ArrowUp";
      case "":
        return "ArrowRight";
      case "":
        return "ArrowDown";
      case "":
        return "Insert";
      case "":
        return "Delete";
      default:
        return value;
    }
  }
  function getKeyCode(key) {
    switch (key) {
      case "`":
      case "~":
        return "Backquote";
      case "\\":
      case "|":
        return "Backslash";
      case "":
        return "Backspace";
      case "[":
      case "{":
        return "BracketLeft";
      case "]":
      case "}":
        return "BracketRight";
      case ",":
      case "<":
        return "Comma";
      case "0":
      case ")":
        return "Digit0";
      case "1":
      case "!":
        return "Digit1";
      case "2":
      case "@":
        return "Digit2";
      case "3":
      case "#":
        return "Digit3";
      case "4":
      case "$":
        return "Digit4";
      case "5":
      case "%":
        return "Digit5";
      case "6":
      case "^":
        return "Digit6";
      case "7":
      case "&":
        return "Digit7";
      case "8":
      case "*":
        return "Digit8";
      case "9":
      case "(":
        return "Digit9";
      case "=":
      case "+":
        return "Equal";
      // The spec declares the '<' to be `IntlBackslash` as well, but it is already covered
      // in the `Comma` above.
      case ">":
        return "IntlBackslash";
      case "a":
      case "A":
        return "KeyA";
      case "b":
      case "B":
        return "KeyB";
      case "c":
      case "C":
        return "KeyC";
      case "d":
      case "D":
        return "KeyD";
      case "e":
      case "E":
        return "KeyE";
      case "f":
      case "F":
        return "KeyF";
      case "g":
      case "G":
        return "KeyG";
      case "h":
      case "H":
        return "KeyH";
      case "i":
      case "I":
        return "KeyI";
      case "j":
      case "J":
        return "KeyJ";
      case "k":
      case "K":
        return "KeyK";
      case "l":
      case "L":
        return "KeyL";
      case "m":
      case "M":
        return "KeyM";
      case "n":
      case "N":
        return "KeyN";
      case "o":
      case "O":
        return "KeyO";
      case "p":
      case "P":
        return "KeyP";
      case "q":
      case "Q":
        return "KeyQ";
      case "r":
      case "R":
        return "KeyR";
      case "s":
      case "S":
        return "KeyS";
      case "t":
      case "T":
        return "KeyT";
      case "u":
      case "U":
        return "KeyU";
      case "v":
      case "V":
        return "KeyV";
      case "w":
      case "W":
        return "KeyW";
      case "x":
      case "X":
        return "KeyX";
      case "y":
      case "Y":
        return "KeyY";
      case "z":
      case "Z":
        return "KeyZ";
      case "-":
      case "_":
        return "Minus";
      case ".":
        return "Period";
      case "'":
      case '"':
        return "Quote";
      case ";":
      case ":":
        return "Semicolon";
      case "/":
      case "?":
        return "Slash";
      case "":
        return "AltLeft";
      case "":
        return "AltRight";
      case "":
        return "ControlLeft";
      case "":
        return "ControlRight";
      case "":
        return "Enter";
      case "":
        return "Pause";
      case "":
        return "MetaLeft";
      case "":
        return "MetaRight";
      case "":
        return "ShiftLeft";
      case "":
        return "ShiftRight";
      case " ":
      case "":
        return "Space";
      case "":
        return "Tab";
      case "":
        return "Delete";
      case "":
        return "End";
      case "":
        return "Help";
      case "":
        return "Home";
      case "":
        return "Insert";
      case "":
        return "PageDown";
      case "":
        return "PageUp";
      case "":
        return "ArrowDown";
      case "":
        return "ArrowLeft";
      case "":
        return "ArrowRight";
      case "":
        return "ArrowUp";
      case "":
        return "Escape";
      case "":
        return "F1";
      case "":
        return "F2";
      case "":
        return "F3";
      case "":
        return "F4";
      case "":
        return "F5";
      case "":
        return "F6";
      case "":
        return "F7";
      case "":
        return "F8";
      case "":
        return "F9";
      case "":
        return "F10";
      case "":
        return "F11";
      case "":
        return "F12";
      case "":
        return "NumpadEqual";
      case "":
      case "":
        return "Numpad0";
      case "":
      case "":
        return "Numpad1";
      case "":
      case "":
        return "Numpad2";
      case "":
      case "":
        return "Numpad3";
      case "":
      case "":
        return "Numpad4";
      case "":
        return "Numpad5";
      case "":
      case "":
        return "Numpad6";
      case "":
      case "":
        return "Numpad7";
      case "":
      case "":
        return "Numpad8";
      case "":
      case "":
        return "Numpad9";
      case "":
        return "NumpadAdd";
      case "":
        return "NumpadComma";
      case "":
      case "":
        return "NumpadDecimal";
      case "":
        return "NumpadDivide";
      case "":
        return "NumpadEnter";
      case "":
        return "NumpadMultiply";
      case "":
        return "NumpadSubtract";
      default:
        return;
    }
  }
  function getKeyLocation(key) {
    switch (key) {
      case "":
      case "":
      case "":
      case "":
      case "":
        return 1;
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
        return 3;
      case "":
      case "":
      case "":
      case "":
        return 2;
      default:
        return 0;
    }
  }
  return keyUtils;
}
var USKeyboardLayout = {};
var hasRequiredUSKeyboardLayout;
function requireUSKeyboardLayout() {
  if (hasRequiredUSKeyboardLayout) return USKeyboardLayout;
  hasRequiredUSKeyboardLayout = 1;
  Object.defineProperty(USKeyboardLayout, "__esModule", { value: true });
  USKeyboardLayout.KeyToKeyCode = void 0;
  USKeyboardLayout.KeyToKeyCode = {
    "0": 48,
    "1": 49,
    "2": 50,
    "3": 51,
    "4": 52,
    "5": 53,
    "6": 54,
    "7": 55,
    "8": 56,
    "9": 57,
    Abort: 3,
    Help: 6,
    Backspace: 8,
    Tab: 9,
    Numpad5: 12,
    NumpadEnter: 13,
    Enter: 13,
    "\\r": 13,
    "\\n": 13,
    ShiftLeft: 16,
    ShiftRight: 16,
    ControlLeft: 17,
    ControlRight: 17,
    AltLeft: 18,
    AltRight: 18,
    Pause: 19,
    CapsLock: 20,
    Escape: 27,
    Convert: 28,
    NonConvert: 29,
    Space: 32,
    Numpad9: 33,
    PageUp: 33,
    Numpad3: 34,
    PageDown: 34,
    End: 35,
    Numpad1: 35,
    Home: 36,
    Numpad7: 36,
    ArrowLeft: 37,
    Numpad4: 37,
    Numpad8: 38,
    ArrowUp: 38,
    ArrowRight: 39,
    Numpad6: 39,
    Numpad2: 40,
    ArrowDown: 40,
    Select: 41,
    Open: 43,
    PrintScreen: 44,
    Insert: 45,
    Numpad0: 45,
    Delete: 46,
    NumpadDecimal: 46,
    Digit0: 48,
    Digit1: 49,
    Digit2: 50,
    Digit3: 51,
    Digit4: 52,
    Digit5: 53,
    Digit6: 54,
    Digit7: 55,
    Digit8: 56,
    Digit9: 57,
    KeyA: 65,
    KeyB: 66,
    KeyC: 67,
    KeyD: 68,
    KeyE: 69,
    KeyF: 70,
    KeyG: 71,
    KeyH: 72,
    KeyI: 73,
    KeyJ: 74,
    KeyK: 75,
    KeyL: 76,
    KeyM: 77,
    KeyN: 78,
    KeyO: 79,
    KeyP: 80,
    KeyQ: 81,
    KeyR: 82,
    KeyS: 83,
    KeyT: 84,
    KeyU: 85,
    KeyV: 86,
    KeyW: 87,
    KeyX: 88,
    KeyY: 89,
    KeyZ: 90,
    MetaLeft: 91,
    MetaRight: 92,
    ContextMenu: 93,
    NumpadMultiply: 106,
    NumpadAdd: 107,
    NumpadSubtract: 109,
    NumpadDivide: 111,
    F1: 112,
    F2: 113,
    F3: 114,
    F4: 115,
    F5: 116,
    F6: 117,
    F7: 118,
    F8: 119,
    F9: 120,
    F10: 121,
    F11: 122,
    F12: 123,
    F13: 124,
    F14: 125,
    F15: 126,
    F16: 127,
    F17: 128,
    F18: 129,
    F19: 130,
    F20: 131,
    F21: 132,
    F22: 133,
    F23: 134,
    F24: 135,
    NumLock: 144,
    ScrollLock: 145,
    AudioVolumeMute: 173,
    AudioVolumeDown: 174,
    AudioVolumeUp: 175,
    MediaTrackNext: 176,
    MediaTrackPrevious: 177,
    MediaStop: 178,
    MediaPlayPause: 179,
    Semicolon: 186,
    Equal: 187,
    NumpadEqual: 187,
    Comma: 188,
    Minus: 189,
    Period: 190,
    Slash: 191,
    Backquote: 192,
    BracketLeft: 219,
    Backslash: 220,
    BracketRight: 221,
    Quote: 222,
    AltGraph: 225,
    Props: 247,
    Cancel: 3,
    Clear: 12,
    Shift: 16,
    Control: 17,
    Alt: 18,
    Accept: 30,
    ModeChange: 31,
    " ": 32,
    Print: 42,
    Execute: 43,
    "\\u0000": 46,
    a: 65,
    b: 66,
    c: 67,
    d: 68,
    e: 69,
    f: 70,
    g: 71,
    h: 72,
    i: 73,
    j: 74,
    k: 75,
    l: 76,
    m: 77,
    n: 78,
    o: 79,
    p: 80,
    q: 81,
    r: 82,
    s: 83,
    t: 84,
    u: 85,
    v: 86,
    w: 87,
    x: 88,
    y: 89,
    z: 90,
    Meta: 91,
    "*": 106,
    "+": 107,
    "-": 109,
    "/": 111,
    ";": 186,
    "=": 187,
    ",": 188,
    ".": 190,
    "`": 192,
    "[": 219,
    "\\\\": 220,
    "]": 221,
    "'": 222,
    Attn: 246,
    CrSel: 247,
    ExSel: 248,
    EraseEof: 249,
    Play: 250,
    ZoomOut: 251,
    ")": 48,
    "!": 49,
    "@": 50,
    "#": 51,
    $: 52,
    "%": 53,
    "^": 54,
    "&": 55,
    "(": 57,
    A: 65,
    B: 66,
    C: 67,
    D: 68,
    E: 69,
    F: 70,
    G: 71,
    H: 72,
    I: 73,
    J: 74,
    K: 75,
    L: 76,
    M: 77,
    N: 78,
    O: 79,
    P: 80,
    Q: 81,
    R: 82,
    S: 83,
    T: 84,
    U: 85,
    V: 86,
    W: 87,
    X: 88,
    Y: 89,
    Z: 90,
    ":": 186,
    "<": 188,
    _: 189,
    ">": 190,
    "?": 191,
    "~": 192,
    "{": 219,
    "|": 220,
    "}": 221,
    '"': 222,
    Camera: 44,
    EndCall: 95,
    VolumeDown: 182,
    VolumeUp: 183
  };
  return USKeyboardLayout;
}
var hasRequiredActionDispatcher;
function requireActionDispatcher() {
  if (hasRequiredActionDispatcher) return ActionDispatcher;
  hasRequiredActionDispatcher = 1;
  Object.defineProperty(ActionDispatcher, "__esModule", { value: true });
  ActionDispatcher.ActionDispatcher = void 0;
  const protocol_js_1 = requireProtocol();
  const assert_js_1 = requireAssert();
  const graphemeTools_js_1 = requireGraphemeTools();
  const InputSource_js_1 = requireInputSource();
  const keyUtils_js_1 = requireKeyUtils();
  const USKeyboardLayout_js_1 = requireUSKeyboardLayout();
  const CALCULATE_IN_VIEW_CENTER_PT_DECL = ((i) => {
    const t = i.getClientRects()[0], e2 = Math.max(0, Math.min(t.x, t.x + t.width)), n = Math.min(window.innerWidth, Math.max(t.x, t.x + t.width)), h2 = Math.max(0, Math.min(t.y, t.y + t.height)), m2 = Math.min(window.innerHeight, Math.max(t.y, t.y + t.height));
    return [e2 + (n - e2 >> 1), h2 + (m2 - h2 >> 1)];
  }).toString();
  const IS_MAC_DECL = (() => {
    return navigator.platform.toLowerCase().includes("mac");
  }).toString();
  async function getElementCenter(context, element) {
    const sandbox = await context.getOrCreateSandbox(void 0);
    const result = await sandbox.callFunction(CALCULATE_IN_VIEW_CENTER_PT_DECL, false, { type: "undefined" }, [element]);
    if (result.type === "exception") {
      throw new protocol_js_1.NoSuchElementException(`Origin element ${element.sharedId} was not found`);
    }
    (0, assert_js_1.assert)(result.result.type === "array");
    (0, assert_js_1.assert)(result.result.value?.[0]?.type === "number");
    (0, assert_js_1.assert)(result.result.value?.[1]?.type === "number");
    const { result: { value: [{ value: x2 }, { value: y2 }] } } = result;
    return { x: x2, y: y2 };
  }
  let ActionDispatcher$1 = class ActionDispatcher {
    static isMacOS = async (context) => {
      const result = await (await context.getOrCreateSandbox(void 0)).callFunction(IS_MAC_DECL, false);
      (0, assert_js_1.assert)(result.type !== "exception");
      (0, assert_js_1.assert)(result.result.type === "boolean");
      return result.result.value;
    };
    #browsingContextStorage;
    #tickStart = 0;
    #tickDuration = 0;
    #inputState;
    #contextId;
    #isMacOS;
    constructor(inputState, browsingContextStorage, contextId, isMacOS) {
      this.#browsingContextStorage = browsingContextStorage;
      this.#inputState = inputState;
      this.#contextId = contextId;
      this.#isMacOS = isMacOS;
    }
    /**
     * The context can be disposed between action ticks, so need to get it each time.
     */
    get #context() {
      return this.#browsingContextStorage.getContext(this.#contextId);
    }
    async dispatchActions(optionsByTick) {
      await this.#inputState.queue.run(async () => {
        for (const options of optionsByTick) {
          await this.dispatchTickActions(options);
        }
      });
    }
    async dispatchTickActions(options) {
      this.#tickStart = performance.now();
      this.#tickDuration = 0;
      for (const { action } of options) {
        if ("duration" in action && action.duration !== void 0) {
          this.#tickDuration = Math.max(this.#tickDuration, action.duration);
        }
      }
      const promises = [
        new Promise((resolve2) => setTimeout(resolve2, this.#tickDuration))
      ];
      for (const option of options) {
        promises.push(this.#dispatchAction(option));
      }
      await Promise.all(promises);
    }
    async #dispatchAction({ id, action }) {
      const source = this.#inputState.get(id);
      const keyState = this.#inputState.getGlobalKeyState();
      switch (action.type) {
        case "keyDown": {
          await this.#dispatchKeyDownAction(source, action);
          this.#inputState.cancelList.push({
            id,
            action: {
              ...action,
              type: "keyUp"
            }
          });
          break;
        }
        case "keyUp": {
          await this.#dispatchKeyUpAction(source, action);
          break;
        }
        case "pause": {
          break;
        }
        case "pointerDown": {
          await this.#dispatchPointerDownAction(source, keyState, action);
          this.#inputState.cancelList.push({
            id,
            action: {
              ...action,
              type: "pointerUp"
            }
          });
          break;
        }
        case "pointerMove": {
          await this.#dispatchPointerMoveAction(source, keyState, action);
          break;
        }
        case "pointerUp": {
          await this.#dispatchPointerUpAction(source, keyState, action);
          break;
        }
        case "scroll": {
          await this.#dispatchScrollAction(source, keyState, action);
          break;
        }
      }
    }
    async #dispatchPointerDownAction(source, keyState, action) {
      const { button } = action;
      if (source.pressed.has(button)) {
        return;
      }
      source.pressed.add(button);
      const { x: x2, y: y2, subtype: pointerType } = source;
      const { width, height, pressure, twist, tangentialPressure } = action;
      const { tiltX, tiltY } = getTilt(action);
      const { modifiers } = keyState;
      const { radiusX, radiusY } = getRadii(width ?? 1, height ?? 1);
      switch (pointerType) {
        case "mouse":
        case "pen":
          await this.#context.cdpTarget.cdpClient.sendCommand("Input.dispatchMouseEvent", {
            type: "mousePressed",
            x: x2,
            y: y2,
            modifiers,
            button: getCdpButton(button),
            buttons: source.buttons,
            clickCount: source.setClickCount(button, new InputSource_js_1.PointerSource.ClickContext(x2, y2, performance.now())),
            pointerType,
            tangentialPressure,
            tiltX,
            tiltY,
            twist,
            force: pressure
          });
          break;
        case "touch":
          await this.#context.cdpTarget.cdpClient.sendCommand("Input.dispatchTouchEvent", {
            type: "touchStart",
            touchPoints: [
              {
                x: x2,
                y: y2,
                radiusX,
                radiusY,
                tangentialPressure,
                tiltX,
                tiltY,
                twist,
                force: pressure,
                id: source.pointerId
              }
            ],
            modifiers
          });
          break;
      }
      source.radiusX = radiusX;
      source.radiusY = radiusY;
      source.force = pressure;
    }
    #dispatchPointerUpAction(source, keyState, action) {
      const { button } = action;
      if (!source.pressed.has(button)) {
        return;
      }
      source.pressed.delete(button);
      const { x: x2, y: y2, force, radiusX, radiusY, subtype: pointerType } = source;
      const { modifiers } = keyState;
      switch (pointerType) {
        case "mouse":
        case "pen":
          return this.#context.cdpTarget.cdpClient.sendCommand("Input.dispatchMouseEvent", {
            type: "mouseReleased",
            x: x2,
            y: y2,
            modifiers,
            button: getCdpButton(button),
            buttons: source.buttons,
            clickCount: source.getClickCount(button),
            pointerType
          });
        case "touch":
          return this.#context.cdpTarget.cdpClient.sendCommand("Input.dispatchTouchEvent", {
            type: "touchEnd",
            touchPoints: [
              {
                x: x2,
                y: y2,
                id: source.pointerId,
                force,
                radiusX,
                radiusY
              }
            ],
            modifiers
          });
      }
    }
    async #dispatchPointerMoveAction(source, keyState, action) {
      const { x: startX, y: startY, subtype: pointerType } = source;
      const { width, height, pressure, twist, tangentialPressure, x: offsetX, y: offsetY, origin = "viewport", duration = this.#tickDuration } = action;
      const { tiltX, tiltY } = getTilt(action);
      const { radiusX, radiusY } = getRadii(width ?? 1, height ?? 1);
      const { targetX, targetY } = await this.#getCoordinateFromOrigin(origin, offsetX, offsetY, startX, startY);
      if (targetX < 0 || targetY < 0) {
        throw new protocol_js_1.MoveTargetOutOfBoundsException(`Cannot move beyond viewport (x: ${targetX}, y: ${targetY})`);
      }
      let last;
      do {
        const ratio = duration > 0 ? (performance.now() - this.#tickStart) / duration : 1;
        last = ratio >= 1;
        let x2;
        let y2;
        if (last) {
          x2 = targetX;
          y2 = targetY;
        } else {
          x2 = Math.round(ratio * (targetX - startX) + startX);
          y2 = Math.round(ratio * (targetY - startY) + startY);
        }
        if (source.x !== x2 || source.y !== y2) {
          const { modifiers } = keyState;
          switch (pointerType) {
            case "mouse":
              await this.#context.cdpTarget.cdpClient.sendCommand("Input.dispatchMouseEvent", {
                type: "mouseMoved",
                x: x2,
                y: y2,
                modifiers,
                clickCount: 0,
                button: getCdpButton(source.pressed.values().next().value ?? 5),
                buttons: source.buttons,
                pointerType,
                tangentialPressure,
                tiltX,
                tiltY,
                twist,
                force: pressure
              });
              break;
            case "pen":
              if (source.pressed.size !== 0) {
                await this.#context.cdpTarget.cdpClient.sendCommand("Input.dispatchMouseEvent", {
                  type: "mouseMoved",
                  x: x2,
                  y: y2,
                  modifiers,
                  clickCount: 0,
                  button: getCdpButton(source.pressed.values().next().value ?? 5),
                  buttons: source.buttons,
                  pointerType,
                  tangentialPressure,
                  tiltX,
                  tiltY,
                  twist,
                  force: pressure ?? 0.5
                });
              }
              break;
            case "touch":
              if (source.pressed.size !== 0) {
                await this.#context.cdpTarget.cdpClient.sendCommand("Input.dispatchTouchEvent", {
                  type: "touchMove",
                  touchPoints: [
                    {
                      x: x2,
                      y: y2,
                      radiusX,
                      radiusY,
                      tangentialPressure,
                      tiltX,
                      tiltY,
                      twist,
                      force: pressure,
                      id: source.pointerId
                    }
                  ],
                  modifiers
                });
              }
              break;
          }
          source.x = x2;
          source.y = y2;
          source.radiusX = radiusX;
          source.radiusY = radiusY;
          source.force = pressure;
        }
      } while (!last);
    }
    async #getFrameOffset() {
      if (this.#context.id === this.#context.cdpTarget.id) {
        return { x: 0, y: 0 };
      }
      const { backendNodeId } = await this.#context.cdpTarget.cdpClient.sendCommand("DOM.getFrameOwner", { frameId: this.#context.id });
      const { model: frameBoxModel } = await this.#context.cdpTarget.cdpClient.sendCommand("DOM.getBoxModel", {
        backendNodeId
      });
      return { x: frameBoxModel.content[0], y: frameBoxModel.content[1] };
    }
    async #getCoordinateFromOrigin(origin, offsetX, offsetY, startX, startY) {
      let targetX;
      let targetY;
      const frameOffset = await this.#getFrameOffset();
      switch (origin) {
        case "viewport":
          targetX = offsetX + frameOffset.x;
          targetY = offsetY + frameOffset.y;
          break;
        case "pointer":
          targetX = startX + offsetX + frameOffset.x;
          targetY = startY + offsetY + frameOffset.y;
          break;
        default: {
          const { x: posX, y: posY } = await getElementCenter(this.#context, origin.element);
          targetX = posX + offsetX + frameOffset.x;
          targetY = posY + offsetY + frameOffset.y;
          break;
        }
      }
      return { targetX, targetY };
    }
    async #dispatchScrollAction(_source, keyState, action) {
      const { deltaX: targetDeltaX, deltaY: targetDeltaY, x: offsetX, y: offsetY, origin = "viewport", duration = this.#tickDuration } = action;
      if (origin === "pointer") {
        throw new protocol_js_1.InvalidArgumentException('"pointer" origin is invalid for scrolling.');
      }
      const { targetX, targetY } = await this.#getCoordinateFromOrigin(origin, offsetX, offsetY, 0, 0);
      if (targetX < 0 || targetY < 0) {
        throw new protocol_js_1.MoveTargetOutOfBoundsException(`Cannot move beyond viewport (x: ${targetX}, y: ${targetY})`);
      }
      let currentDeltaX = 0;
      let currentDeltaY = 0;
      let last;
      do {
        const ratio = duration > 0 ? (performance.now() - this.#tickStart) / duration : 1;
        last = ratio >= 1;
        let deltaX;
        let deltaY;
        if (last) {
          deltaX = targetDeltaX - currentDeltaX;
          deltaY = targetDeltaY - currentDeltaY;
        } else {
          deltaX = Math.round(ratio * targetDeltaX - currentDeltaX);
          deltaY = Math.round(ratio * targetDeltaY - currentDeltaY);
        }
        if (deltaX !== 0 || deltaY !== 0) {
          const { modifiers } = keyState;
          await this.#context.cdpTarget.cdpClient.sendCommand("Input.dispatchMouseEvent", {
            type: "mouseWheel",
            deltaX,
            deltaY,
            x: targetX,
            y: targetY,
            modifiers
          });
          currentDeltaX += deltaX;
          currentDeltaY += deltaY;
        }
      } while (!last);
    }
    async #dispatchKeyDownAction(source, action) {
      const rawKey = action.value;
      if (!(0, graphemeTools_js_1.isSingleGrapheme)(rawKey)) {
        throw new protocol_js_1.InvalidArgumentException(`Invalid key value: ${rawKey}`);
      }
      const isGrapheme = (0, graphemeTools_js_1.isSingleComplexGrapheme)(rawKey);
      const key = (0, keyUtils_js_1.getNormalizedKey)(rawKey);
      const repeat = source.pressed.has(key);
      const code = (0, keyUtils_js_1.getKeyCode)(rawKey);
      const location2 = (0, keyUtils_js_1.getKeyLocation)(rawKey);
      switch (key) {
        case "Alt":
          source.alt = true;
          break;
        case "Shift":
          source.shift = true;
          break;
        case "Control":
          source.ctrl = true;
          break;
        case "Meta":
          source.meta = true;
          break;
      }
      source.pressed.add(key);
      const { modifiers } = source;
      const unmodifiedText = getKeyEventUnmodifiedText(key, source, isGrapheme);
      const text = getKeyEventText(code ?? "", source) ?? unmodifiedText;
      let command;
      if (this.#isMacOS && source.meta) {
        switch (code) {
          case "KeyA":
            command = "SelectAll";
            break;
          case "KeyC":
            command = "Copy";
            break;
          case "KeyV":
            command = source.shift ? "PasteAndMatchStyle" : "Paste";
            break;
          case "KeyX":
            command = "Cut";
            break;
          case "KeyZ":
            command = source.shift ? "Redo" : "Undo";
            break;
        }
      }
      const promises = [
        this.#context.cdpTarget.cdpClient.sendCommand("Input.dispatchKeyEvent", {
          type: text ? "keyDown" : "rawKeyDown",
          windowsVirtualKeyCode: USKeyboardLayout_js_1.KeyToKeyCode[key],
          key,
          code,
          text,
          unmodifiedText,
          autoRepeat: repeat,
          isSystemKey: source.alt || void 0,
          location: location2 < 3 ? location2 : void 0,
          isKeypad: location2 === 3,
          modifiers,
          commands: command ? [command] : void 0
        })
      ];
      if (key === "Escape") {
        if (!source.alt && (this.#isMacOS && !source.ctrl && !source.meta || !this.#isMacOS)) {
          promises.push(this.#context.cdpTarget.cdpClient.sendCommand("Input.cancelDragging"));
        }
      }
      await Promise.all(promises);
    }
    #dispatchKeyUpAction(source, action) {
      const rawKey = action.value;
      if (!(0, graphemeTools_js_1.isSingleGrapheme)(rawKey)) {
        throw new protocol_js_1.InvalidArgumentException(`Invalid key value: ${rawKey}`);
      }
      const isGrapheme = (0, graphemeTools_js_1.isSingleComplexGrapheme)(rawKey);
      const key = (0, keyUtils_js_1.getNormalizedKey)(rawKey);
      if (!source.pressed.has(key)) {
        return;
      }
      const code = (0, keyUtils_js_1.getKeyCode)(rawKey);
      const location2 = (0, keyUtils_js_1.getKeyLocation)(rawKey);
      switch (key) {
        case "Alt":
          source.alt = false;
          break;
        case "Shift":
          source.shift = false;
          break;
        case "Control":
          source.ctrl = false;
          break;
        case "Meta":
          source.meta = false;
          break;
      }
      source.pressed.delete(key);
      const { modifiers } = source;
      const unmodifiedText = getKeyEventUnmodifiedText(key, source, isGrapheme);
      const text = getKeyEventText(code ?? "", source) ?? unmodifiedText;
      return this.#context.cdpTarget.cdpClient.sendCommand("Input.dispatchKeyEvent", {
        type: "keyUp",
        windowsVirtualKeyCode: USKeyboardLayout_js_1.KeyToKeyCode[key],
        key,
        code,
        text,
        unmodifiedText,
        location: location2 < 3 ? location2 : void 0,
        isSystemKey: source.alt || void 0,
        isKeypad: location2 === 3,
        modifiers
      });
    }
  };
  ActionDispatcher.ActionDispatcher = ActionDispatcher$1;
  const getKeyEventUnmodifiedText = (key, source, isGrapheme) => {
    if (isGrapheme) {
      return key;
    }
    if (key === "Enter") {
      return "\r";
    }
    return [...key].length === 1 ? source.shift ? key.toLocaleUpperCase("en-US") : key : void 0;
  };
  const getKeyEventText = (code, source) => {
    if (source.ctrl) {
      switch (code) {
        case "Digit2":
          if (source.shift) {
            return "\0";
          }
          break;
        case "KeyA":
          return "";
        case "KeyB":
          return "";
        case "KeyC":
          return "";
        case "KeyD":
          return "";
        case "KeyE":
          return "";
        case "KeyF":
          return "";
        case "KeyG":
          return "\x07";
        case "KeyH":
          return "\b";
        case "KeyI":
          return "	";
        case "KeyJ":
          return "\n";
        case "KeyK":
          return "\v";
        case "KeyL":
          return "\f";
        case "KeyM":
          return "\r";
        case "KeyN":
          return "";
        case "KeyO":
          return "";
        case "KeyP":
          return "";
        case "KeyQ":
          return "";
        case "KeyR":
          return "";
        case "KeyS":
          return "";
        case "KeyT":
          return "";
        case "KeyU":
          return "";
        case "KeyV":
          return "";
        case "KeyW":
          return "";
        case "KeyX":
          return "";
        case "KeyY":
          return "";
        case "KeyZ":
          return "";
        case "BracketLeft":
          return "\x1B";
        case "Backslash":
          return "";
        case "BracketRight":
          return "";
        case "Digit6":
          if (source.shift) {
            return "";
          }
          break;
        case "Minus":
          return "";
      }
      return "";
    }
    if (source.alt) {
      return "";
    }
    return;
  };
  function getCdpButton(button) {
    switch (button) {
      case 0:
        return "left";
      case 1:
        return "middle";
      case 2:
        return "right";
      case 3:
        return "back";
      case 4:
        return "forward";
      default:
        return "none";
    }
  }
  function getTilt(action) {
    const altitudeAngle = action.altitudeAngle ?? Math.PI / 2;
    const azimuthAngle = action.azimuthAngle ?? 0;
    let tiltXRadians = 0;
    let tiltYRadians = 0;
    if (altitudeAngle === 0) {
      if (azimuthAngle === 0 || azimuthAngle === 2 * Math.PI) {
        tiltXRadians = Math.PI / 2;
      }
      if (azimuthAngle === Math.PI / 2) {
        tiltYRadians = Math.PI / 2;
      }
      if (azimuthAngle === Math.PI) {
        tiltXRadians = -Math.PI / 2;
      }
      if (azimuthAngle === 3 * Math.PI / 2) {
        tiltYRadians = -Math.PI / 2;
      }
      if (azimuthAngle > 0 && azimuthAngle < Math.PI / 2) {
        tiltXRadians = Math.PI / 2;
        tiltYRadians = Math.PI / 2;
      }
      if (azimuthAngle > Math.PI / 2 && azimuthAngle < Math.PI) {
        tiltXRadians = -Math.PI / 2;
        tiltYRadians = Math.PI / 2;
      }
      if (azimuthAngle > Math.PI && azimuthAngle < 3 * Math.PI / 2) {
        tiltXRadians = -Math.PI / 2;
        tiltYRadians = -Math.PI / 2;
      }
      if (azimuthAngle > 3 * Math.PI / 2 && azimuthAngle < 2 * Math.PI) {
        tiltXRadians = Math.PI / 2;
        tiltYRadians = -Math.PI / 2;
      }
    }
    if (altitudeAngle !== 0) {
      const tanAlt = Math.tan(altitudeAngle);
      tiltXRadians = Math.atan(Math.cos(azimuthAngle) / tanAlt);
      tiltYRadians = Math.atan(Math.sin(azimuthAngle) / tanAlt);
    }
    const factor = 180 / Math.PI;
    return {
      tiltX: Math.round(tiltXRadians * factor),
      tiltY: Math.round(tiltYRadians * factor)
    };
  }
  function getRadii(width, height) {
    return {
      radiusX: width ? width / 2 : 0.5,
      radiusY: height ? height / 2 : 0.5
    };
  }
  return ActionDispatcher;
}
var InputStateManager = {};
var InputState = {};
var Mutex = {};
var hasRequiredMutex;
function requireMutex() {
  if (hasRequiredMutex) return Mutex;
  hasRequiredMutex = 1;
  Object.defineProperty(Mutex, "__esModule", { value: true });
  Mutex.Mutex = void 0;
  let Mutex$1 = class Mutex {
    #locked = false;
    #acquirers = [];
    // This is FIFO.
    acquire() {
      const state = { resolved: false };
      if (this.#locked) {
        return new Promise((resolve2) => {
          this.#acquirers.push(() => resolve2(this.#release.bind(this, state)));
        });
      }
      this.#locked = true;
      return Promise.resolve(this.#release.bind(this, state));
    }
    #release(state) {
      if (state.resolved) {
        throw new Error("Cannot release more than once.");
      }
      state.resolved = true;
      const resolve2 = this.#acquirers.shift();
      if (!resolve2) {
        this.#locked = false;
        return;
      }
      resolve2();
    }
    async run(action) {
      const release = await this.acquire();
      try {
        const result = await action();
        return result;
      } finally {
        release();
      }
    }
  };
  Mutex.Mutex = Mutex$1;
  return Mutex;
}
var hasRequiredInputState;
function requireInputState() {
  if (hasRequiredInputState) return InputState;
  hasRequiredInputState = 1;
  Object.defineProperty(InputState, "__esModule", { value: true });
  InputState.InputState = void 0;
  const protocol_js_1 = requireProtocol();
  const Mutex_js_1 = requireMutex();
  const InputSource_js_1 = requireInputSource();
  let InputState$1 = class InputState {
    cancelList = [];
    #sources = /* @__PURE__ */ new Map();
    #mutex = new Mutex_js_1.Mutex();
    getOrCreate(id, type, subtype) {
      let source = this.#sources.get(id);
      if (!source) {
        switch (type) {
          case "none":
            source = new InputSource_js_1.NoneSource();
            break;
          case "key":
            source = new InputSource_js_1.KeySource();
            break;
          case "pointer": {
            let pointerId = subtype === "mouse" ? 0 : 2;
            const pointerIds = /* @__PURE__ */ new Set();
            for (const [, source2] of this.#sources) {
              if (source2.type === "pointer") {
                pointerIds.add(source2.pointerId);
              }
            }
            while (pointerIds.has(pointerId)) {
              ++pointerId;
            }
            source = new InputSource_js_1.PointerSource(pointerId, subtype);
            break;
          }
          case "wheel":
            source = new InputSource_js_1.WheelSource();
            break;
          default:
            throw new protocol_js_1.InvalidArgumentException(`Expected "${"none"}", "${"key"}", "${"pointer"}", or "${"wheel"}". Found unknown source type ${type}.`);
        }
        this.#sources.set(id, source);
        return source;
      }
      if (source.type !== type) {
        throw new protocol_js_1.InvalidArgumentException(`Input source type of ${id} is ${source.type}, but received ${type}.`);
      }
      return source;
    }
    get(id) {
      const source = this.#sources.get(id);
      if (!source) {
        throw new protocol_js_1.UnknownErrorException(`Internal error.`);
      }
      return source;
    }
    getGlobalKeyState() {
      const state = new InputSource_js_1.KeySource();
      for (const [, source] of this.#sources) {
        if (source.type !== "key") {
          continue;
        }
        for (const pressed of source.pressed) {
          state.pressed.add(pressed);
        }
        state.alt ||= source.alt;
        state.ctrl ||= source.ctrl;
        state.meta ||= source.meta;
        state.shift ||= source.shift;
      }
      return state;
    }
    get queue() {
      return this.#mutex;
    }
  };
  InputState.InputState = InputState$1;
  return InputState;
}
var hasRequiredInputStateManager;
function requireInputStateManager() {
  if (hasRequiredInputStateManager) return InputStateManager;
  hasRequiredInputStateManager = 1;
  Object.defineProperty(InputStateManager, "__esModule", { value: true });
  InputStateManager.InputStateManager = void 0;
  const assert_js_1 = requireAssert();
  const InputState_js_1 = requireInputState();
  let InputStateManager$1 = class InputStateManager extends WeakMap {
    get(context) {
      (0, assert_js_1.assert)(context.isTopLevelContext());
      if (!this.has(context)) {
        this.set(context, new InputState_js_1.InputState());
      }
      return super.get(context);
    }
  };
  InputStateManager.InputStateManager = InputStateManager$1;
  return InputStateManager;
}
var hasRequiredInputProcessor;
function requireInputProcessor() {
  if (hasRequiredInputProcessor) return InputProcessor;
  hasRequiredInputProcessor = 1;
  Object.defineProperty(InputProcessor, "__esModule", { value: true });
  InputProcessor.InputProcessor = void 0;
  const protocol_js_1 = requireProtocol();
  const assert_js_1 = requireAssert();
  const ActionDispatcher_js_1 = requireActionDispatcher();
  const InputStateManager_js_1 = requireInputStateManager();
  let InputProcessor$1 = class InputProcessor {
    #browsingContextStorage;
    #inputStateManager = new InputStateManager_js_1.InputStateManager();
    constructor(browsingContextStorage) {
      this.#browsingContextStorage = browsingContextStorage;
    }
    async performActions(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      const inputState = this.#inputStateManager.get(context.top);
      const actionsByTick = this.#getActionsByTick(params, inputState);
      const dispatcher2 = new ActionDispatcher_js_1.ActionDispatcher(inputState, this.#browsingContextStorage, params.context, await ActionDispatcher_js_1.ActionDispatcher.isMacOS(context).catch(() => false));
      await dispatcher2.dispatchActions(actionsByTick);
      return {};
    }
    async releaseActions(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      const topContext = context.top;
      const inputState = this.#inputStateManager.get(topContext);
      const dispatcher2 = new ActionDispatcher_js_1.ActionDispatcher(inputState, this.#browsingContextStorage, params.context, await ActionDispatcher_js_1.ActionDispatcher.isMacOS(context).catch(() => false));
      await dispatcher2.dispatchTickActions(inputState.cancelList.reverse());
      this.#inputStateManager.delete(topContext);
      return {};
    }
    async setFiles(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      const realm = await context.getOrCreateSandbox(void 0);
      let result;
      try {
        result = await realm.callFunction(String(function getFiles(fileListLength) {
          if (!(this instanceof HTMLInputElement)) {
            if (this instanceof Element) {
              return 1;
            }
            return 0;
          }
          if (this.type !== "file") {
            return 2;
          }
          if (this.disabled) {
            return 3;
          }
          if (fileListLength > 1 && !this.multiple) {
            return 4;
          }
          return;
        }), false, params.element, [{ type: "number", value: params.files.length }]);
      } catch {
        throw new protocol_js_1.NoSuchNodeException(`Could not find element ${params.element.sharedId}`);
      }
      (0, assert_js_1.assert)(result.type === "success");
      if (result.result.type === "number") {
        switch (result.result.value) {
          case 0: {
            throw new protocol_js_1.NoSuchElementException(`Could not find element ${params.element.sharedId}`);
          }
          case 1: {
            throw new protocol_js_1.UnableToSetFileInputException(`Element ${params.element.sharedId} is not a input`);
          }
          case 2: {
            throw new protocol_js_1.UnableToSetFileInputException(`Input element ${params.element.sharedId} is not a file type`);
          }
          case 3: {
            throw new protocol_js_1.UnableToSetFileInputException(`Input element ${params.element.sharedId} is disabled`);
          }
          case 4: {
            throw new protocol_js_1.UnableToSetFileInputException(`Cannot set multiple files on a non-multiple input element`);
          }
        }
      }
      if (params.files.length === 0) {
        await realm.callFunction(String(function dispatchEvent() {
          if (this.files?.length === 0) {
            this.dispatchEvent(new Event("cancel", {
              bubbles: true
            }));
            return;
          }
          this.files = new DataTransfer().files;
          this.dispatchEvent(new Event("input", { bubbles: true, composed: true }));
          this.dispatchEvent(new Event("change", { bubbles: true }));
        }), false, params.element);
        return {};
      }
      const paths = [];
      for (let i = 0; i < params.files.length; ++i) {
        const result2 = await realm.callFunction(
          String(function getFiles(index) {
            return this.files?.item(index);
          }),
          false,
          params.element,
          [{ type: "number", value: 0 }],
          "root"
          /* Script.ResultOwnership.Root */
        );
        (0, assert_js_1.assert)(result2.type === "success");
        if (result2.result.type !== "object") {
          break;
        }
        const { handle } = result2.result;
        (0, assert_js_1.assert)(handle !== void 0);
        const { path } = await realm.cdpClient.sendCommand("DOM.getFileInfo", {
          objectId: handle
        });
        paths.push(path);
        void realm.disown(handle).catch(void 0);
      }
      paths.sort();
      const sortedFiles = [...params.files].sort();
      if (paths.length !== params.files.length || sortedFiles.some((path, index) => {
        return paths[index] !== path;
      })) {
        const { objectId } = await realm.deserializeForCdp(params.element);
        (0, assert_js_1.assert)(objectId !== void 0);
        await realm.cdpClient.sendCommand("DOM.setFileInputFiles", {
          files: params.files,
          objectId
        });
      } else {
        await realm.callFunction(String(function dispatchEvent() {
          this.dispatchEvent(new Event("cancel", {
            bubbles: true
          }));
        }), false, params.element);
      }
      return {};
    }
    #getActionsByTick(params, inputState) {
      const actionsByTick = [];
      for (const action of params.actions) {
        switch (action.type) {
          case "pointer": {
            action.parameters ??= {
              pointerType: "mouse"
              /* Input.PointerType.Mouse */
            };
            action.parameters.pointerType ??= "mouse";
            const source = inputState.getOrCreate(action.id, "pointer", action.parameters.pointerType);
            if (source.subtype !== action.parameters.pointerType) {
              throw new protocol_js_1.InvalidArgumentException(`Expected input source ${action.id} to be ${source.subtype}; got ${action.parameters.pointerType}.`);
            }
            source.resetClickCount();
            break;
          }
          default:
            inputState.getOrCreate(action.id, action.type);
        }
        const actions = action.actions.map((item) => ({
          id: action.id,
          action: item
        }));
        for (let i = 0; i < actions.length; i++) {
          if (actionsByTick.length === i) {
            actionsByTick.push([]);
          }
          actionsByTick[i].push(actions[i]);
        }
      }
      return actionsByTick;
    }
  };
  InputProcessor.InputProcessor = InputProcessor$1;
  return InputProcessor;
}
var NetworkProcessor = {};
var NetworkUtils = {};
var base64 = {};
var hasRequiredBase64;
function requireBase64() {
  if (hasRequiredBase64) return base64;
  hasRequiredBase64 = 1;
  Object.defineProperty(base64, "__esModule", { value: true });
  base64.base64ToString = base64ToString;
  function base64ToString(base64Str) {
    if ("atob" in globalThis) {
      return globalThis.atob(base64Str);
    }
    return Buffer.from(base64Str, "base64").toString("ascii");
  }
  return base64;
}
var hasRequiredNetworkUtils;
function requireNetworkUtils() {
  if (hasRequiredNetworkUtils) return NetworkUtils;
  hasRequiredNetworkUtils = 1;
  Object.defineProperty(NetworkUtils, "__esModule", { value: true });
  NetworkUtils.computeHeadersSize = computeHeadersSize;
  NetworkUtils.stringToBase64 = stringToBase64;
  NetworkUtils.bidiNetworkHeadersFromCdpNetworkHeaders = bidiNetworkHeadersFromCdpNetworkHeaders;
  NetworkUtils.bidiNetworkHeadersFromCdpNetworkHeadersEntries = bidiNetworkHeadersFromCdpNetworkHeadersEntries;
  NetworkUtils.cdpNetworkHeadersFromBidiNetworkHeaders = cdpNetworkHeadersFromBidiNetworkHeaders;
  NetworkUtils.bidiNetworkHeadersFromCdpFetchHeaders = bidiNetworkHeadersFromCdpFetchHeaders;
  NetworkUtils.cdpFetchHeadersFromBidiNetworkHeaders = cdpFetchHeadersFromBidiNetworkHeaders;
  NetworkUtils.networkHeaderFromCookieHeaders = networkHeaderFromCookieHeaders;
  NetworkUtils.cdpAuthChallengeResponseFromBidiAuthContinueWithAuthAction = cdpAuthChallengeResponseFromBidiAuthContinueWithAuthAction;
  NetworkUtils.cdpToBiDiCookie = cdpToBiDiCookie;
  NetworkUtils.deserializeByteValue = deserializeByteValue;
  NetworkUtils.bidiToCdpCookie = bidiToCdpCookie;
  NetworkUtils.sameSiteBiDiToCdp = sameSiteBiDiToCdp;
  NetworkUtils.isSpecialScheme = isSpecialScheme;
  NetworkUtils.matchUrlPattern = matchUrlPattern;
  NetworkUtils.bidiBodySizeFromCdpPostDataEntries = bidiBodySizeFromCdpPostDataEntries;
  NetworkUtils.getTiming = getTiming;
  const ErrorResponse_js_1 = requireErrorResponse();
  const base64_js_1 = requireBase64();
  function computeHeadersSize(headers2) {
    const requestHeaders = headers2.reduce((acc, header) => {
      return `${acc}${header.name}: ${header.value.value}\r
`;
    }, "");
    return new TextEncoder().encode(requestHeaders).length;
  }
  function stringToBase64(str) {
    return typedArrayToBase64(new TextEncoder().encode(str));
  }
  function typedArrayToBase64(typedArray) {
    const chunkSize = 65534;
    const chunks = [];
    for (let i = 0; i < typedArray.length; i += chunkSize) {
      const chunk = typedArray.subarray(i, i + chunkSize);
      chunks.push(String.fromCodePoint.apply(null, chunk));
    }
    const binaryString = chunks.join("");
    return btoa(binaryString);
  }
  function bidiNetworkHeadersFromCdpNetworkHeaders(headers2) {
    if (!headers2) {
      return [];
    }
    return Object.entries(headers2).map(([name, value]) => ({
      name,
      value: {
        type: "string",
        value
      }
    }));
  }
  function bidiNetworkHeadersFromCdpNetworkHeadersEntries(headers2) {
    if (!headers2) {
      return [];
    }
    return headers2.map(({ name, value }) => ({
      name,
      value: {
        type: "string",
        value
      }
    }));
  }
  function cdpNetworkHeadersFromBidiNetworkHeaders(headers2) {
    if (headers2 === void 0) {
      return void 0;
    }
    return headers2.reduce((result, header) => {
      result[header.name] = header.value.value;
      return result;
    }, {});
  }
  function bidiNetworkHeadersFromCdpFetchHeaders(headers2) {
    if (!headers2) {
      return [];
    }
    return headers2.map(({ name, value }) => ({
      name,
      value: {
        type: "string",
        value
      }
    }));
  }
  function cdpFetchHeadersFromBidiNetworkHeaders(headers2) {
    if (headers2 === void 0) {
      return void 0;
    }
    return headers2.map(({ name, value }) => ({
      name,
      value: value.value
    }));
  }
  function networkHeaderFromCookieHeaders(headers2) {
    if (headers2 === void 0) {
      return void 0;
    }
    const value = headers2.reduce((acc, value2, index) => {
      if (index > 0) {
        acc += ";";
      }
      const cookieValue = value2.value.type === "base64" ? btoa(value2.value.value) : value2.value.value;
      acc += `${value2.name}=${cookieValue}`;
      return acc;
    }, "");
    return {
      name: "Cookie",
      value: {
        type: "string",
        value
      }
    };
  }
  function cdpAuthChallengeResponseFromBidiAuthContinueWithAuthAction(action) {
    switch (action) {
      case "default":
        return "Default";
      case "cancel":
        return "CancelAuth";
      case "provideCredentials":
        return "ProvideCredentials";
    }
  }
  function cdpToBiDiCookie(cookie) {
    const result = {
      name: cookie.name,
      value: { type: "string", value: cookie.value },
      domain: cookie.domain,
      path: cookie.path,
      size: cookie.size,
      httpOnly: cookie.httpOnly,
      secure: cookie.secure,
      sameSite: cookie.sameSite === void 0 ? "none" : sameSiteCdpToBiDi(cookie.sameSite),
      ...cookie.expires >= 0 ? { expiry: cookie.expires } : void 0
    };
    result[`goog:session`] = cookie.session;
    result[`goog:priority`] = cookie.priority;
    result[`goog:sameParty`] = cookie.sameParty;
    result[`goog:sourceScheme`] = cookie.sourceScheme;
    result[`goog:sourcePort`] = cookie.sourcePort;
    if (cookie.partitionKey !== void 0) {
      result[`goog:partitionKey`] = cookie.partitionKey;
    }
    if (cookie.partitionKeyOpaque !== void 0) {
      result[`goog:partitionKeyOpaque`] = cookie.partitionKeyOpaque;
    }
    return result;
  }
  function deserializeByteValue(value) {
    if (value.type === "base64") {
      return (0, base64_js_1.base64ToString)(value.value);
    }
    return value.value;
  }
  function bidiToCdpCookie(params, partitionKey) {
    const deserializedValue = deserializeByteValue(params.cookie.value);
    const result = {
      name: params.cookie.name,
      value: deserializedValue,
      domain: params.cookie.domain,
      path: params.cookie.path ?? "/",
      secure: params.cookie.secure ?? false,
      httpOnly: params.cookie.httpOnly ?? false,
      ...partitionKey.sourceOrigin !== void 0 && {
        partitionKey: {
          hasCrossSiteAncestor: false,
          // CDP's `partitionKey.topLevelSite` is the BiDi's `partition.sourceOrigin`.
          topLevelSite: partitionKey.sourceOrigin
        }
      },
      ...params.cookie.expiry !== void 0 && {
        expires: params.cookie.expiry
      },
      ...params.cookie.sameSite !== void 0 && {
        sameSite: sameSiteBiDiToCdp(params.cookie.sameSite)
      }
    };
    if (params.cookie[`goog:url`] !== void 0) {
      result.url = params.cookie[`goog:url`];
    }
    if (params.cookie[`goog:priority`] !== void 0) {
      result.priority = params.cookie[`goog:priority`];
    }
    if (params.cookie[`goog:sameParty`] !== void 0) {
      result.sameParty = params.cookie[`goog:sameParty`];
    }
    if (params.cookie[`goog:sourceScheme`] !== void 0) {
      result.sourceScheme = params.cookie[`goog:sourceScheme`];
    }
    if (params.cookie[`goog:sourcePort`] !== void 0) {
      result.sourcePort = params.cookie[`goog:sourcePort`];
    }
    return result;
  }
  function sameSiteCdpToBiDi(sameSite) {
    switch (sameSite) {
      case "Strict":
        return "strict";
      case "None":
        return "none";
      case "Lax":
        return "lax";
      default:
        return "lax";
    }
  }
  function sameSiteBiDiToCdp(sameSite) {
    switch (sameSite) {
      case "strict":
        return "Strict";
      case "lax":
        return "Lax";
      case "none":
        return "None";
    }
    throw new ErrorResponse_js_1.InvalidArgumentException(`Unknown 'sameSite' value ${sameSite}`);
  }
  function isSpecialScheme(protocol2) {
    return ["ftp", "file", "http", "https", "ws", "wss"].includes(protocol2.replace(/:$/, ""));
  }
  function getScheme(url) {
    return url.protocol.replace(/:$/, "");
  }
  function matchUrlPattern(pattern, url) {
    const parsedUrl = new URL(url);
    if (pattern.protocol !== void 0 && pattern.protocol !== getScheme(parsedUrl)) {
      return false;
    }
    if (pattern.hostname !== void 0 && pattern.hostname !== parsedUrl.hostname) {
      return false;
    }
    if (pattern.port !== void 0 && pattern.port !== parsedUrl.port) {
      return false;
    }
    if (pattern.pathname !== void 0 && pattern.pathname !== parsedUrl.pathname) {
      return false;
    }
    if (pattern.search !== void 0 && pattern.search !== parsedUrl.search) {
      return false;
    }
    return true;
  }
  function bidiBodySizeFromCdpPostDataEntries(entries) {
    let size = 0;
    for (const entry of entries) {
      size += atob(entry.bytes ?? "").length;
    }
    return size;
  }
  function getTiming(timing, offset = 0) {
    if (!timing) {
      return 0;
    }
    if (timing <= 0 || timing + offset <= 0) {
      return 0;
    }
    return timing + offset;
  }
  return NetworkUtils;
}
var hasRequiredNetworkProcessor;
function requireNetworkProcessor() {
  if (hasRequiredNetworkProcessor) return NetworkProcessor;
  hasRequiredNetworkProcessor = 1;
  Object.defineProperty(NetworkProcessor, "__esModule", { value: true });
  NetworkProcessor.NetworkProcessor = void 0;
  const protocol_js_1 = requireProtocol();
  const NetworkUtils_js_1 = requireNetworkUtils();
  let NetworkProcessor$1 = class NetworkProcessor2 {
    #browsingContextStorage;
    #networkStorage;
    constructor(browsingContextStorage, networkStorage) {
      this.#browsingContextStorage = browsingContextStorage;
      this.#networkStorage = networkStorage;
    }
    async addIntercept(params) {
      this.#browsingContextStorage.verifyTopLevelContextsList(params.contexts);
      const urlPatterns = params.urlPatterns ?? [];
      const parsedUrlPatterns = NetworkProcessor2.parseUrlPatterns(urlPatterns);
      const intercept = this.#networkStorage.addIntercept({
        urlPatterns: parsedUrlPatterns,
        phases: params.phases,
        contexts: params.contexts
      });
      await Promise.all(this.#browsingContextStorage.getAllContexts().map((context) => {
        return context.cdpTarget.toggleNetwork();
      }));
      return {
        intercept
      };
    }
    async continueRequest(params) {
      if (params.url !== void 0) {
        NetworkProcessor2.parseUrlString(params.url);
      }
      if (params.method !== void 0) {
        if (!NetworkProcessor2.isMethodValid(params.method)) {
          throw new protocol_js_1.InvalidArgumentException(`Method '${params.method}' is invalid.`);
        }
      }
      if (params.headers) {
        NetworkProcessor2.validateHeaders(params.headers);
      }
      const request = this.#getBlockedRequestOrFail(params.request, [
        "beforeRequestSent"
      ]);
      try {
        await request.continueRequest(params);
      } catch (error) {
        throw NetworkProcessor2.wrapInterceptionError(error);
      }
      return {};
    }
    async continueResponse(params) {
      if (params.headers) {
        NetworkProcessor2.validateHeaders(params.headers);
      }
      const request = this.#getBlockedRequestOrFail(params.request, [
        "authRequired",
        "responseStarted"
      ]);
      try {
        await request.continueResponse(params);
      } catch (error) {
        throw NetworkProcessor2.wrapInterceptionError(error);
      }
      return {};
    }
    async continueWithAuth(params) {
      const networkId = params.request;
      const request = this.#getBlockedRequestOrFail(networkId, [
        "authRequired"
      ]);
      await request.continueWithAuth(params);
      return {};
    }
    async failRequest({ request: networkId }) {
      const request = this.#getRequestOrFail(networkId);
      if (request.interceptPhase === "authRequired") {
        throw new protocol_js_1.InvalidArgumentException(`Request '${networkId}' in 'authRequired' phase cannot be failed`);
      }
      if (!request.interceptPhase) {
        throw new protocol_js_1.NoSuchRequestException(`No blocked request found for network id '${networkId}'`);
      }
      await request.failRequest("Failed");
      return {};
    }
    async provideResponse(params) {
      if (params.headers) {
        NetworkProcessor2.validateHeaders(params.headers);
      }
      const request = this.#getBlockedRequestOrFail(params.request, [
        "beforeRequestSent",
        "responseStarted",
        "authRequired"
      ]);
      try {
        await request.provideResponse(params);
      } catch (error) {
        throw NetworkProcessor2.wrapInterceptionError(error);
      }
      return {};
    }
    async removeIntercept(params) {
      this.#networkStorage.removeIntercept(params.intercept);
      await Promise.all(this.#browsingContextStorage.getAllContexts().map((context) => {
        return context.cdpTarget.toggleNetwork();
      }));
      return {};
    }
    async setCacheBehavior(params) {
      const contexts = this.#browsingContextStorage.verifyTopLevelContextsList(params.contexts);
      if (contexts.size === 0) {
        this.#networkStorage.defaultCacheBehavior = params.cacheBehavior;
        await Promise.all(this.#browsingContextStorage.getAllContexts().map((context) => {
          return context.cdpTarget.toggleSetCacheDisabled();
        }));
        return {};
      }
      const cacheDisabled = params.cacheBehavior === "bypass";
      await Promise.all([...contexts.values()].map((context) => {
        return context.cdpTarget.toggleSetCacheDisabled(cacheDisabled);
      }));
      return {};
    }
    #getRequestOrFail(id) {
      const request = this.#networkStorage.getRequestById(id);
      if (!request) {
        throw new protocol_js_1.NoSuchRequestException(`Network request with ID '${id}' doesn't exist`);
      }
      return request;
    }
    #getBlockedRequestOrFail(id, phases) {
      const request = this.#getRequestOrFail(id);
      if (!request.interceptPhase) {
        throw new protocol_js_1.NoSuchRequestException(`No blocked request found for network id '${id}'`);
      }
      if (request.interceptPhase && !phases.includes(request.interceptPhase)) {
        throw new protocol_js_1.InvalidArgumentException(`Blocked request for network id '${id}' is in '${request.interceptPhase}' phase`);
      }
      return request;
    }
    /**
     * Validate https://fetch.spec.whatwg.org/#header-value
     */
    static validateHeaders(headers2) {
      for (const header of headers2) {
        let headerValue;
        if (header.value.type === "string") {
          headerValue = header.value.value;
        } else {
          headerValue = atob(header.value.value);
        }
        if (headerValue !== headerValue.trim() || headerValue.includes("\n") || headerValue.includes("\0")) {
          throw new protocol_js_1.InvalidArgumentException(`Header value '${headerValue}' is not acceptable value`);
        }
      }
    }
    static isMethodValid(method) {
      return /^[!#$%&'*+\-.^_`|~a-zA-Z\d]+$/.test(method);
    }
    /**
     * Attempts to parse the given url.
     * Throws an InvalidArgumentException if the url is invalid.
     */
    static parseUrlString(url) {
      try {
        return new URL(url);
      } catch (error) {
        throw new protocol_js_1.InvalidArgumentException(`Invalid URL '${url}': ${error}`);
      }
    }
    static parseUrlPatterns(urlPatterns) {
      return urlPatterns.map((urlPattern) => {
        let patternUrl = "";
        let hasProtocol = true;
        let hasHostname = true;
        let hasPort = true;
        let hasPathname = true;
        let hasSearch = true;
        switch (urlPattern.type) {
          case "string": {
            patternUrl = unescapeURLPattern(urlPattern.pattern);
            break;
          }
          case "pattern": {
            if (urlPattern.protocol === void 0) {
              hasProtocol = false;
              patternUrl += "http";
            } else {
              if (urlPattern.protocol === "") {
                throw new protocol_js_1.InvalidArgumentException("URL pattern must specify a protocol");
              }
              urlPattern.protocol = unescapeURLPattern(urlPattern.protocol);
              if (!urlPattern.protocol.match(/^[a-zA-Z+-.]+$/)) {
                throw new protocol_js_1.InvalidArgumentException("Forbidden characters");
              }
              patternUrl += urlPattern.protocol;
            }
            const scheme = patternUrl.toLocaleLowerCase();
            patternUrl += ":";
            if ((0, NetworkUtils_js_1.isSpecialScheme)(scheme)) {
              patternUrl += "//";
            }
            if (urlPattern.hostname === void 0) {
              if (scheme !== "file") {
                patternUrl += "placeholder";
              }
              hasHostname = false;
            } else {
              if (urlPattern.hostname === "") {
                throw new protocol_js_1.InvalidArgumentException("URL pattern must specify a hostname");
              }
              if (urlPattern.protocol === "file") {
                throw new protocol_js_1.InvalidArgumentException(`URL pattern protocol cannot be 'file'`);
              }
              urlPattern.hostname = unescapeURLPattern(urlPattern.hostname);
              let insideBrackets = false;
              for (const c2 of urlPattern.hostname) {
                if (c2 === "/" || c2 === "?" || c2 === "#") {
                  throw new protocol_js_1.InvalidArgumentException(`'/', '?', '#' are forbidden in hostname`);
                }
                if (!insideBrackets && c2 === ":") {
                  throw new protocol_js_1.InvalidArgumentException(`':' is only allowed inside brackets in hostname`);
                }
                if (c2 === "[") {
                  insideBrackets = true;
                }
                if (c2 === "]") {
                  insideBrackets = false;
                }
              }
              patternUrl += urlPattern.hostname;
            }
            if (urlPattern.port === void 0) {
              hasPort = false;
            } else {
              if (urlPattern.port === "") {
                throw new protocol_js_1.InvalidArgumentException(`URL pattern must specify a port`);
              }
              urlPattern.port = unescapeURLPattern(urlPattern.port);
              patternUrl += ":";
              if (!urlPattern.port.match(/^\d+$/)) {
                throw new protocol_js_1.InvalidArgumentException("Forbidden characters");
              }
              patternUrl += urlPattern.port;
            }
            if (urlPattern.pathname === void 0) {
              hasPathname = false;
            } else {
              urlPattern.pathname = unescapeURLPattern(urlPattern.pathname);
              if (urlPattern.pathname[0] !== "/") {
                patternUrl += "/";
              }
              if (urlPattern.pathname.includes("#") || urlPattern.pathname.includes("?")) {
                throw new protocol_js_1.InvalidArgumentException("Forbidden characters");
              }
              patternUrl += urlPattern.pathname;
            }
            if (urlPattern.search === void 0) {
              hasSearch = false;
            } else {
              urlPattern.search = unescapeURLPattern(urlPattern.search);
              if (urlPattern.search[0] !== "?") {
                patternUrl += "?";
              }
              if (urlPattern.search.includes("#")) {
                throw new protocol_js_1.InvalidArgumentException("Forbidden characters");
              }
              patternUrl += urlPattern.search;
            }
            break;
          }
        }
        const serializePort = (url) => {
          const defaultPorts = {
            "ftp:": 21,
            "file:": null,
            "http:": 80,
            "https:": 443,
            "ws:": 80,
            "wss:": 443
          };
          if ((0, NetworkUtils_js_1.isSpecialScheme)(url.protocol) && defaultPorts[url.protocol] !== null && (!url.port || String(defaultPorts[url.protocol]) === url.port)) {
            return "";
          } else if (url.port) {
            return url.port;
          }
          return void 0;
        };
        try {
          const url = new URL(patternUrl);
          return {
            protocol: hasProtocol ? url.protocol.replace(/:$/, "") : void 0,
            hostname: hasHostname ? url.hostname : void 0,
            port: hasPort ? serializePort(url) : void 0,
            pathname: hasPathname && url.pathname ? url.pathname : void 0,
            search: hasSearch ? url.search : void 0
          };
        } catch (err) {
          throw new protocol_js_1.InvalidArgumentException(`${err.message} '${patternUrl}'`);
        }
      });
    }
    static wrapInterceptionError(error) {
      if (error?.message.includes("Invalid header") || error?.message.includes("Unsafe header")) {
        return new protocol_js_1.InvalidArgumentException(error.message);
      }
      return error;
    }
  };
  NetworkProcessor.NetworkProcessor = NetworkProcessor$1;
  function unescapeURLPattern(pattern) {
    const forbidden = /* @__PURE__ */ new Set(["(", ")", "*", "{", "}"]);
    let result = "";
    let isEscaped = false;
    for (const c2 of pattern) {
      if (!isEscaped) {
        if (forbidden.has(c2)) {
          throw new protocol_js_1.InvalidArgumentException("Forbidden characters");
        }
        if (c2 === "\\") {
          isEscaped = true;
          continue;
        }
      }
      result += c2;
      isEscaped = false;
    }
    return result;
  }
  return NetworkProcessor;
}
var PermissionsProcessor = {};
var hasRequiredPermissionsProcessor;
function requirePermissionsProcessor() {
  if (hasRequiredPermissionsProcessor) return PermissionsProcessor;
  hasRequiredPermissionsProcessor = 1;
  Object.defineProperty(PermissionsProcessor, "__esModule", { value: true });
  PermissionsProcessor.PermissionsProcessor = void 0;
  const protocol_js_1 = requireProtocol();
  let PermissionsProcessor$1 = class PermissionsProcessor {
    #browserCdpClient;
    constructor(browserCdpClient) {
      this.#browserCdpClient = browserCdpClient;
    }
    async setPermissions(params) {
      try {
        const userContextId = params["goog:userContext"] || params.userContext;
        await this.#browserCdpClient.sendCommand("Browser.setPermission", {
          origin: params.origin,
          browserContextId: userContextId && userContextId !== "default" ? userContextId : void 0,
          permission: {
            name: params.descriptor.name
          },
          setting: params.state
        });
      } catch (err) {
        if (err.message === `Permission can't be granted to opaque origins.`) {
          return {};
        }
        throw new protocol_js_1.InvalidArgumentException(err.message);
      }
      return {};
    }
  };
  PermissionsProcessor.PermissionsProcessor = PermissionsProcessor$1;
  return PermissionsProcessor;
}
var ScriptProcessor = {};
var PreloadScript = {};
var uuid = {};
var hasRequiredUuid;
function requireUuid() {
  if (hasRequiredUuid) return uuid;
  hasRequiredUuid = 1;
  Object.defineProperty(uuid, "__esModule", { value: true });
  uuid.uuidv4 = uuidv4;
  function bytesToHex(bytes) {
    return bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, "0"), "");
  }
  function uuidv4() {
    if ("crypto" in globalThis && "randomUUID" in globalThis.crypto) {
      return globalThis.crypto.randomUUID();
    }
    const randomValues = new Uint8Array(16);
    if ("crypto" in globalThis && "getRandomValues" in globalThis.crypto) {
      globalThis.crypto.getRandomValues(randomValues);
    } else {
      require$$5.webcrypto.getRandomValues(randomValues);
    }
    randomValues[6] = randomValues[6] & 15 | 64;
    randomValues[8] = randomValues[8] & 63 | 128;
    return [
      bytesToHex(randomValues.subarray(0, 4)),
      bytesToHex(randomValues.subarray(4, 6)),
      bytesToHex(randomValues.subarray(6, 8)),
      bytesToHex(randomValues.subarray(8, 10)),
      bytesToHex(randomValues.subarray(10, 16))
    ].join("-");
  }
  return uuid;
}
var ChannelProxy = {};
var hasRequiredChannelProxy;
function requireChannelProxy() {
  if (hasRequiredChannelProxy) return ChannelProxy;
  hasRequiredChannelProxy = 1;
  Object.defineProperty(ChannelProxy, "__esModule", { value: true });
  ChannelProxy.ChannelProxy = void 0;
  const protocol_js_1 = requireProtocol();
  const log_js_1 = requireLog();
  const uuid_js_1 = requireUuid();
  let ChannelProxy$1 = class ChannelProxy2 {
    #properties;
    #id = (0, uuid_js_1.uuidv4)();
    #logger;
    constructor(channel, logger2) {
      this.#properties = channel;
      this.#logger = logger2;
    }
    /**
     * Creates a channel proxy in the given realm, initialises listener and
     * returns a handle to `sendMessage` delegate.
     */
    async init(realm, eventManager) {
      const channelHandle = await ChannelProxy2.#createAndGetHandleInRealm(realm);
      const sendMessageHandle = await ChannelProxy2.#createSendMessageHandle(realm, channelHandle);
      void this.#startListener(realm, channelHandle, eventManager);
      return sendMessageHandle;
    }
    /** Gets a ChannelProxy from window and returns its handle. */
    async startListenerFromWindow(realm, eventManager) {
      try {
        const channelHandle = await this.#getHandleFromWindow(realm);
        void this.#startListener(realm, channelHandle, eventManager);
      } catch (error) {
        this.#logger?.(log_js_1.LogType.debugError, error);
      }
    }
    /**
     * Evaluation string which creates a ChannelProxy object on the client side.
     */
    static #createChannelProxyEvalStr() {
      const functionStr = String(() => {
        const queue = [];
        let queueNonEmptyResolver = null;
        return {
          /**
           * Gets a promise, which is resolved as soon as a message occurs
           * in the queue.
           */
          async getMessage() {
            const onMessage = queue.length > 0 ? Promise.resolve() : new Promise((resolve2) => {
              queueNonEmptyResolver = resolve2;
            });
            await onMessage;
            return queue.shift();
          },
          /**
           * Adds a message to the queue.
           * Resolves the pending promise if needed.
           */
          sendMessage(message) {
            queue.push(message);
            if (queueNonEmptyResolver !== null) {
              queueNonEmptyResolver();
              queueNonEmptyResolver = null;
            }
          }
        };
      });
      return `(${functionStr})()`;
    }
    /** Creates a ChannelProxy in the given realm. */
    static async #createAndGetHandleInRealm(realm) {
      const createChannelHandleResult = await realm.cdpClient.sendCommand("Runtime.evaluate", {
        expression: this.#createChannelProxyEvalStr(),
        contextId: realm.executionContextId,
        serializationOptions: {
          serialization: "idOnly"
        }
      });
      if (createChannelHandleResult.exceptionDetails || createChannelHandleResult.result.objectId === void 0) {
        throw new Error(`Cannot create channel`);
      }
      return createChannelHandleResult.result.objectId;
    }
    /** Gets a handle to `sendMessage` delegate from the ChannelProxy handle. */
    static async #createSendMessageHandle(realm, channelHandle) {
      const sendMessageArgResult = await realm.cdpClient.sendCommand("Runtime.callFunctionOn", {
        functionDeclaration: String((channelHandle2) => {
          return channelHandle2.sendMessage;
        }),
        arguments: [{ objectId: channelHandle }],
        executionContextId: realm.executionContextId,
        serializationOptions: {
          serialization: "idOnly"
        }
      });
      return sendMessageArgResult.result.objectId;
    }
    /** Starts listening for the channel events of the provided ChannelProxy. */
    async #startListener(realm, channelHandle, eventManager) {
      for (; ; ) {
        try {
          const message = await realm.cdpClient.sendCommand("Runtime.callFunctionOn", {
            functionDeclaration: String(async (channelHandle2) => await channelHandle2.getMessage()),
            arguments: [
              {
                objectId: channelHandle
              }
            ],
            awaitPromise: true,
            executionContextId: realm.executionContextId,
            serializationOptions: {
              serialization: "deep",
              maxDepth: this.#properties.serializationOptions?.maxObjectDepth ?? void 0
            }
          });
          if (message.exceptionDetails) {
            throw new Error("Runtime.callFunctionOn in ChannelProxy", {
              cause: message.exceptionDetails
            });
          }
          for (const browsingContext of realm.associatedBrowsingContexts) {
            eventManager.registerEvent({
              type: "event",
              method: protocol_js_1.ChromiumBidi.Script.EventNames.Message,
              params: {
                channel: this.#properties.channel,
                data: realm.cdpToBidiValue(
                  message,
                  this.#properties.ownership ?? "none"
                  /* Script.ResultOwnership.None */
                ),
                source: realm.source
              }
            }, browsingContext.id);
          }
        } catch (error) {
          this.#logger?.(log_js_1.LogType.debugError, error);
          break;
        }
      }
    }
    /**
     * Returns a handle of ChannelProxy from window's property which was set there
     * by `getEvalInWindowStr`. If window property is not set yet, sets a promise
     * resolver to the window property, so that `getEvalInWindowStr` can resolve
     * the promise later on with the channel.
     * This is needed because `getEvalInWindowStr` can be called before or
     * after this method.
     */
    async #getHandleFromWindow(realm) {
      const channelHandleResult = await realm.cdpClient.sendCommand("Runtime.callFunctionOn", {
        functionDeclaration: String((id) => {
          const w2 = window;
          if (w2[id] === void 0) {
            return new Promise((resolve2) => w2[id] = resolve2);
          }
          const channelProxy = w2[id];
          delete w2[id];
          return channelProxy;
        }),
        arguments: [{ value: this.#id }],
        executionContextId: realm.executionContextId,
        awaitPromise: true,
        serializationOptions: {
          serialization: "idOnly"
        }
      });
      if (channelHandleResult.exceptionDetails !== void 0 || channelHandleResult.result.objectId === void 0) {
        throw new Error(`ChannelHandle not found in window["${this.#id}"]`);
      }
      return channelHandleResult.result.objectId;
    }
    /**
     * String to be evaluated to create a ProxyChannel and put it to window.
     * Returns the delegate `sendMessage`. Used to provide an argument for preload
     * script. Does the following:
     * 1. Creates a ChannelProxy.
     * 2. Puts the ChannelProxy to window['${this.#id}'] or resolves the promise
     *    by calling delegate stored in window['${this.#id}'].
     *    This is needed because `#getHandleFromWindow` can be called before or
     *    after this method.
     * 3. Returns the delegate `sendMessage` of the created ChannelProxy.
     */
    getEvalInWindowStr() {
      const delegate = String((id, channelProxy) => {
        const w2 = window;
        if (w2[id] === void 0) {
          w2[id] = channelProxy;
        } else {
          w2[id](channelProxy);
          delete w2[id];
        }
        return channelProxy.sendMessage;
      });
      const channelProxyEval = ChannelProxy2.#createChannelProxyEvalStr();
      return `(${delegate})('${this.#id}',${channelProxyEval})`;
    }
  };
  ChannelProxy.ChannelProxy = ChannelProxy$1;
  return ChannelProxy;
}
var hasRequiredPreloadScript;
function requirePreloadScript() {
  if (hasRequiredPreloadScript) return PreloadScript;
  hasRequiredPreloadScript = 1;
  Object.defineProperty(PreloadScript, "__esModule", { value: true });
  PreloadScript.PreloadScript = void 0;
  const uuid_js_1 = requireUuid();
  const ChannelProxy_js_1 = requireChannelProxy();
  let PreloadScript$1 = class PreloadScript {
    /** BiDi ID, an automatically generated UUID. */
    #id = (0, uuid_js_1.uuidv4)();
    /** CDP preload scripts. */
    #cdpPreloadScripts = [];
    /** The script itself, in a format expected by the spec i.e. a function. */
    #functionDeclaration;
    /** Targets, in which the preload script is initialized. */
    #targetIds = /* @__PURE__ */ new Set();
    /** Channels to be added as arguments to functionDeclaration. */
    #channels;
    /** The script sandbox / world name. */
    #sandbox;
    /** The browsing contexts to execute the preload scripts in, if any. */
    #contexts;
    /** The browsing contexts to execute the preload scripts in, if any. */
    #userContexts;
    get id() {
      return this.#id;
    }
    get targetIds() {
      return this.#targetIds;
    }
    constructor(params, logger2) {
      this.#channels = params.arguments?.map((a) => new ChannelProxy_js_1.ChannelProxy(a.value, logger2)) ?? [];
      this.#functionDeclaration = params.functionDeclaration;
      this.#sandbox = params.sandbox;
      this.#contexts = params.contexts;
      this.#userContexts = params.userContexts;
    }
    /** Channels of the preload script. */
    get channels() {
      return this.#channels;
    }
    /** Contexts of the preload script, if any */
    get contexts() {
      return this.#contexts;
    }
    /** UserContexts of the preload script, if any */
    get userContexts() {
      return this.#userContexts;
    }
    /**
     * String to be evaluated. Wraps user-provided function so that the following
     * steps are run:
     * 1. Create channels.
     * 2. Store the created channels in window.
     * 3. Call the user-provided function with channels as arguments.
     */
    #getEvaluateString() {
      const channelsArgStr = `[${this.channels.map((c2) => c2.getEvalInWindowStr()).join(", ")}]`;
      return `(()=>{(${this.#functionDeclaration})(...${channelsArgStr})})()`;
    }
    /**
     * Adds the script to the given CDP targets by calling the
     * `Page.addScriptToEvaluateOnNewDocument` command.
     */
    async initInTargets(cdpTargets, runImmediately) {
      await Promise.all(Array.from(cdpTargets).map((cdpTarget) => this.initInTarget(cdpTarget, runImmediately)));
    }
    /**
     * Adds the script to the given CDP target by calling the
     * `Page.addScriptToEvaluateOnNewDocument` command.
     */
    async initInTarget(cdpTarget, runImmediately) {
      const addCdpPreloadScriptResult = await cdpTarget.cdpClient.sendCommand("Page.addScriptToEvaluateOnNewDocument", {
        source: this.#getEvaluateString(),
        worldName: this.#sandbox,
        runImmediately
      });
      this.#cdpPreloadScripts.push({
        target: cdpTarget,
        preloadScriptId: addCdpPreloadScriptResult.identifier
      });
      this.#targetIds.add(cdpTarget.id);
    }
    /**
     * Removes this script from all CDP targets.
     */
    async remove() {
      await Promise.all([
        this.#cdpPreloadScripts.map(async (cdpPreloadScript) => {
          const cdpTarget = cdpPreloadScript.target;
          const cdpPreloadScriptId = cdpPreloadScript.preloadScriptId;
          return await cdpTarget.cdpClient.sendCommand("Page.removeScriptToEvaluateOnNewDocument", {
            identifier: cdpPreloadScriptId
          });
        })
      ]);
    }
    /** Removes the provided cdp target from the list of cdp preload scripts. */
    dispose(cdpTargetId) {
      this.#cdpPreloadScripts = this.#cdpPreloadScripts.filter((cdpPreloadScript) => cdpPreloadScript.target?.id !== cdpTargetId);
      this.#targetIds.delete(cdpTargetId);
    }
  };
  PreloadScript.PreloadScript = PreloadScript$1;
  return PreloadScript;
}
var hasRequiredScriptProcessor;
function requireScriptProcessor() {
  if (hasRequiredScriptProcessor) return ScriptProcessor;
  hasRequiredScriptProcessor = 1;
  Object.defineProperty(ScriptProcessor, "__esModule", { value: true });
  ScriptProcessor.ScriptProcessor = void 0;
  const protocol_js_1 = requireProtocol();
  const PreloadScript_js_1 = requirePreloadScript();
  let ScriptProcessor$1 = class ScriptProcessor {
    #eventManager;
    #browsingContextStorage;
    #realmStorage;
    #preloadScriptStorage;
    #userContextStorage;
    #logger;
    constructor(eventManager, browsingContextStorage, realmStorage, preloadScriptStorage, userContextStorage, logger2) {
      this.#browsingContextStorage = browsingContextStorage;
      this.#realmStorage = realmStorage;
      this.#preloadScriptStorage = preloadScriptStorage;
      this.#userContextStorage = userContextStorage;
      this.#logger = logger2;
      this.#eventManager = eventManager;
      this.#eventManager.addSubscribeHook(protocol_js_1.ChromiumBidi.Script.EventNames.RealmCreated, this.#onRealmCreatedSubscribeHook.bind(this));
    }
    #onRealmCreatedSubscribeHook(contextId) {
      const context = this.#browsingContextStorage.getContext(contextId);
      const contextsToReport = [
        context,
        ...this.#browsingContextStorage.getContext(contextId).allChildren
      ];
      const realms = /* @__PURE__ */ new Set();
      for (const reportContext of contextsToReport) {
        const realmsForContext = this.#realmStorage.findRealms({
          browsingContextId: reportContext.id
        });
        for (const realm of realmsForContext) {
          realms.add(realm);
        }
      }
      for (const realm of realms) {
        this.#eventManager.registerEvent({
          type: "event",
          method: protocol_js_1.ChromiumBidi.Script.EventNames.RealmCreated,
          params: realm.realmInfo
        }, context.id);
      }
      return Promise.resolve();
    }
    async addPreloadScript(params) {
      if (params.userContexts?.length && params.contexts?.length) {
        throw new protocol_js_1.InvalidArgumentException("Both userContexts and contexts cannot be specified.");
      }
      const userContexts = await this.#userContextStorage.verifyUserContextIdList(params.userContexts ?? []);
      const browsingContexts = this.#browsingContextStorage.verifyTopLevelContextsList(params.contexts);
      const preloadScript = new PreloadScript_js_1.PreloadScript(params, this.#logger);
      this.#preloadScriptStorage.add(preloadScript);
      let contextsToRunIn = [];
      if (userContexts.size) {
        contextsToRunIn = this.#browsingContextStorage.getTopLevelContexts().filter((context) => {
          return userContexts.has(context.userContext);
        });
      } else if (browsingContexts.size) {
        contextsToRunIn = [...browsingContexts.values()];
      } else {
        contextsToRunIn = this.#browsingContextStorage.getTopLevelContexts();
      }
      const cdpTargets = new Set(contextsToRunIn.map((context) => context.cdpTarget));
      await preloadScript.initInTargets(cdpTargets, false);
      return {
        script: preloadScript.id
      };
    }
    async removePreloadScript(params) {
      const { script: id } = params;
      const script = this.#preloadScriptStorage.getPreloadScript(id);
      await script.remove();
      this.#preloadScriptStorage.remove(id);
      return {};
    }
    async callFunction(params) {
      const realm = await this.#getRealm(params.target);
      return await realm.callFunction(params.functionDeclaration, params.awaitPromise, params.this, params.arguments, params.resultOwnership, params.serializationOptions, params.userActivation);
    }
    async evaluate(params) {
      const realm = await this.#getRealm(params.target);
      return await realm.evaluate(params.expression, params.awaitPromise, params.resultOwnership, params.serializationOptions, params.userActivation);
    }
    async disown(params) {
      const realm = await this.#getRealm(params.target);
      await Promise.all(params.handles.map(async (handle) => await realm.disown(handle)));
      return {};
    }
    getRealms(params) {
      if (params.context !== void 0) {
        this.#browsingContextStorage.getContext(params.context);
      }
      const realms = this.#realmStorage.findRealms({
        browsingContextId: params.context,
        type: params.type
      }).map((realm) => realm.realmInfo);
      return { realms };
    }
    async #getRealm(target) {
      if ("context" in target) {
        const context = this.#browsingContextStorage.getContext(target.context);
        return await context.getOrCreateSandbox(target.sandbox);
      }
      return this.#realmStorage.getRealm({
        realmId: target.realm
      });
    }
  };
  ScriptProcessor.ScriptProcessor = ScriptProcessor$1;
  return ScriptProcessor;
}
var SessionProcessor = {};
var hasRequiredSessionProcessor;
function requireSessionProcessor() {
  if (hasRequiredSessionProcessor) return SessionProcessor;
  hasRequiredSessionProcessor = 1;
  Object.defineProperty(SessionProcessor, "__esModule", { value: true });
  SessionProcessor.SessionProcessor = void 0;
  const protocol_js_1 = requireProtocol();
  let SessionProcessor$1 = class SessionProcessor {
    #eventManager;
    #browserCdpClient;
    #initConnection;
    #created = false;
    constructor(eventManager, browserCdpClient, initConnection) {
      this.#eventManager = eventManager;
      this.#browserCdpClient = browserCdpClient;
      this.#initConnection = initConnection;
    }
    status() {
      return { ready: false, message: "already connected" };
    }
    #mergeCapabilities(capabilitiesRequest) {
      const mergedCapabilities = [];
      for (const first of capabilitiesRequest.firstMatch ?? [{}]) {
        const result = {
          ...capabilitiesRequest.alwaysMatch
        };
        for (const key of Object.keys(first)) {
          if (result[key] !== void 0) {
            throw new protocol_js_1.InvalidArgumentException(`Capability ${key} in firstMatch is already defined in alwaysMatch`);
          }
          result[key] = first[key];
        }
        mergedCapabilities.push(result);
      }
      const match = mergedCapabilities.find((c2) => c2.browserName === "chrome") ?? mergedCapabilities[0] ?? {};
      match.unhandledPromptBehavior = this.#getUnhandledPromptBehavior(match.unhandledPromptBehavior);
      return match;
    }
    #getUnhandledPromptBehavior(capabilityValue) {
      if (capabilityValue === void 0) {
        return void 0;
      }
      if (typeof capabilityValue === "object") {
        return capabilityValue;
      }
      if (typeof capabilityValue !== "string") {
        throw new protocol_js_1.InvalidArgumentException(`Unexpected 'unhandledPromptBehavior' type: ${typeof capabilityValue}`);
      }
      switch (capabilityValue) {
        case "accept":
        case "accept and notify":
          return {
            default: "accept"
            /* Session.UserPromptHandlerType.Accept */
          };
        case "dismiss":
        case "dismiss and notify":
          return {
            default: "dismiss"
            /* Session.UserPromptHandlerType.Dismiss */
          };
        case "ignore":
          return {
            default: "ignore"
            /* Session.UserPromptHandlerType.Ignore */
          };
        default:
          throw new protocol_js_1.InvalidArgumentException(`Unexpected 'unhandledPromptBehavior' value: ${capabilityValue}`);
      }
    }
    async new(params) {
      if (this.#created) {
        throw new Error("Session has been already created.");
      }
      this.#created = true;
      const matchedCapabitlites = this.#mergeCapabilities(params.capabilities);
      await this.#initConnection(matchedCapabitlites);
      const version2 = await this.#browserCdpClient.sendCommand("Browser.getVersion");
      return {
        sessionId: "unknown",
        capabilities: {
          ...matchedCapabitlites,
          acceptInsecureCerts: matchedCapabitlites.acceptInsecureCerts ?? false,
          browserName: version2.product,
          browserVersion: version2.revision,
          platformName: "",
          setWindowRect: false,
          webSocketUrl: "",
          userAgent: version2.userAgent
        }
      };
    }
    async subscribe(params, channel = {}) {
      const subscription = await this.#eventManager.subscribe(params.events, params.contexts ?? [], params.userContexts ?? [], channel);
      return {
        subscription
      };
    }
    async unsubscribe(params, channel = {}) {
      if ("subscriptions" in params) {
        await this.#eventManager.unsubscribeByIds(params.subscriptions);
        return {};
      }
      await this.#eventManager.unsubscribe(params.events, params.contexts ?? [], channel);
      return {};
    }
  };
  SessionProcessor.SessionProcessor = SessionProcessor$1;
  return SessionProcessor;
}
var StorageProcessor = {};
var hasRequiredStorageProcessor;
function requireStorageProcessor() {
  if (hasRequiredStorageProcessor) return StorageProcessor;
  hasRequiredStorageProcessor = 1;
  Object.defineProperty(StorageProcessor, "__esModule", { value: true });
  StorageProcessor.StorageProcessor = void 0;
  const protocol_js_1 = requireProtocol();
  const assert_js_1 = requireAssert();
  const log_js_1 = requireLog();
  const NetworkProcessor_js_1 = requireNetworkProcessor();
  const NetworkUtils_js_1 = requireNetworkUtils();
  let StorageProcessor$1 = class StorageProcessor {
    #browserCdpClient;
    #browsingContextStorage;
    #logger;
    constructor(browserCdpClient, browsingContextStorage, logger2) {
      this.#browsingContextStorage = browsingContextStorage;
      this.#browserCdpClient = browserCdpClient;
      this.#logger = logger2;
    }
    async deleteCookies(params) {
      const partitionKey = this.#expandStoragePartitionSpec(params.partition);
      let cdpResponse;
      try {
        cdpResponse = await this.#browserCdpClient.sendCommand("Storage.getCookies", {
          browserContextId: this.#getCdpBrowserContextId(partitionKey)
        });
      } catch (err) {
        if (this.#isNoSuchUserContextError(err)) {
          throw new protocol_js_1.NoSuchUserContextException(err.message);
        }
        throw err;
      }
      const cdpCookiesToDelete = cdpResponse.cookies.filter(
        // CDP's partition key is the source origin. If the request specifies the
        // `sourceOrigin` partition key, only cookies with the requested source origin
        // are returned.
        (c2) => partitionKey.sourceOrigin === void 0 || c2.partitionKey?.topLevelSite === partitionKey.sourceOrigin
      ).filter((cdpCookie) => {
        const bidiCookie = (0, NetworkUtils_js_1.cdpToBiDiCookie)(cdpCookie);
        return this.#matchCookie(bidiCookie, params.filter);
      }).map((cookie) => ({
        ...cookie,
        // Set expiry to pass date to delete the cookie.
        expires: 1
      }));
      await this.#browserCdpClient.sendCommand("Storage.setCookies", {
        cookies: cdpCookiesToDelete,
        browserContextId: this.#getCdpBrowserContextId(partitionKey)
      });
      return {
        partitionKey
      };
    }
    async getCookies(params) {
      const partitionKey = this.#expandStoragePartitionSpec(params.partition);
      let cdpResponse;
      try {
        cdpResponse = await this.#browserCdpClient.sendCommand("Storage.getCookies", {
          browserContextId: this.#getCdpBrowserContextId(partitionKey)
        });
      } catch (err) {
        if (this.#isNoSuchUserContextError(err)) {
          throw new protocol_js_1.NoSuchUserContextException(err.message);
        }
        throw err;
      }
      const filteredBiDiCookies = cdpResponse.cookies.filter(
        // CDP's partition key is the source origin. If the request specifies the
        // `sourceOrigin` partition key, only cookies with the requested source origin
        // are returned.
        (c2) => partitionKey.sourceOrigin === void 0 || c2.partitionKey?.topLevelSite === partitionKey.sourceOrigin
      ).map((c2) => (0, NetworkUtils_js_1.cdpToBiDiCookie)(c2)).filter((c2) => this.#matchCookie(c2, params.filter));
      return {
        cookies: filteredBiDiCookies,
        partitionKey
      };
    }
    async setCookie(params) {
      const partitionKey = this.#expandStoragePartitionSpec(params.partition);
      const cdpCookie = (0, NetworkUtils_js_1.bidiToCdpCookie)(params, partitionKey);
      try {
        await this.#browserCdpClient.sendCommand("Storage.setCookies", {
          cookies: [cdpCookie],
          browserContextId: this.#getCdpBrowserContextId(partitionKey)
        });
      } catch (err) {
        if (this.#isNoSuchUserContextError(err)) {
          throw new protocol_js_1.NoSuchUserContextException(err.message);
        }
        this.#logger?.(log_js_1.LogType.debugError, err);
        throw new protocol_js_1.UnableToSetCookieException(err.toString());
      }
      return {
        partitionKey
      };
    }
    #isNoSuchUserContextError(err) {
      return err.message?.startsWith("Failed to find browser context for id");
    }
    #getCdpBrowserContextId(partitionKey) {
      return partitionKey.userContext === "default" ? void 0 : partitionKey.userContext;
    }
    #expandStoragePartitionSpecByBrowsingContext(descriptor) {
      const browsingContextId = descriptor.context;
      const browsingContext = this.#browsingContextStorage.getContext(browsingContextId);
      return {
        userContext: browsingContext.userContext
      };
    }
    #expandStoragePartitionSpecByStorageKey(descriptor) {
      const unsupportedPartitionKeys = /* @__PURE__ */ new Map();
      let sourceOrigin = descriptor.sourceOrigin;
      if (sourceOrigin !== void 0) {
        const url = NetworkProcessor_js_1.NetworkProcessor.parseUrlString(sourceOrigin);
        if (url.origin === "null") {
          sourceOrigin = url.origin;
        } else {
          sourceOrigin = `${url.protocol}//${url.hostname}`;
        }
      }
      for (const [key, value] of Object.entries(descriptor)) {
        if (key !== void 0 && value !== void 0 && !["type", "sourceOrigin", "userContext"].includes(key)) {
          unsupportedPartitionKeys.set(key, value);
        }
      }
      if (unsupportedPartitionKeys.size > 0) {
        this.#logger?.(log_js_1.LogType.debugInfo, `Unsupported partition keys: ${JSON.stringify(Object.fromEntries(unsupportedPartitionKeys))}`);
      }
      const userContext = descriptor.userContext ?? "default";
      return {
        userContext,
        ...sourceOrigin === void 0 ? {} : { sourceOrigin }
      };
    }
    #expandStoragePartitionSpec(partitionSpec) {
      if (partitionSpec === void 0) {
        return { userContext: "default" };
      }
      if (partitionSpec.type === "context") {
        return this.#expandStoragePartitionSpecByBrowsingContext(partitionSpec);
      }
      (0, assert_js_1.assert)(partitionSpec.type === "storageKey", "Unknown partition type");
      return this.#expandStoragePartitionSpecByStorageKey(partitionSpec);
    }
    #matchCookie(cookie, filter) {
      if (filter === void 0) {
        return true;
      }
      return (filter.domain === void 0 || filter.domain === cookie.domain) && (filter.name === void 0 || filter.name === cookie.name) && // `value` contains fields `type` and `value`.
      (filter.value === void 0 || (0, NetworkUtils_js_1.deserializeByteValue)(filter.value) === (0, NetworkUtils_js_1.deserializeByteValue)(cookie.value)) && (filter.path === void 0 || filter.path === cookie.path) && (filter.size === void 0 || filter.size === cookie.size) && (filter.httpOnly === void 0 || filter.httpOnly === cookie.httpOnly) && (filter.secure === void 0 || filter.secure === cookie.secure) && (filter.sameSite === void 0 || filter.sameSite === cookie.sameSite) && (filter.expiry === void 0 || filter.expiry === cookie.expiry);
    }
  };
  StorageProcessor.StorageProcessor = StorageProcessor$1;
  return StorageProcessor;
}
var WebExtensionProcessor = {};
var hasRequiredWebExtensionProcessor;
function requireWebExtensionProcessor() {
  if (hasRequiredWebExtensionProcessor) return WebExtensionProcessor;
  hasRequiredWebExtensionProcessor = 1;
  Object.defineProperty(WebExtensionProcessor, "__esModule", { value: true });
  WebExtensionProcessor.WebExtensionProcessor = void 0;
  const protocol_js_1 = requireProtocol();
  let WebExtensionProcessor$1 = class WebExtensionProcessor {
    #browserCdpClient;
    constructor(browserCdpClient) {
      this.#browserCdpClient = browserCdpClient;
    }
    async install(params) {
      switch (params.extensionData.type) {
        case "archivePath":
        case "base64":
          throw new protocol_js_1.UnsupportedOperationException("Archived and Base64 extensions are not supported");
      }
      try {
        const response = await this.#browserCdpClient.sendCommand("Extensions.loadUnpacked", {
          path: params.extensionData.path
        });
        return {
          extension: response.id
        };
      } catch (err) {
        if (err.message.startsWith("invalid web extension")) {
          throw new protocol_js_1.InvalidWebExtensionException(err.message);
        }
        throw err;
      }
    }
    async uninstall(params) {
      try {
        await this.#browserCdpClient.sendCommand("Extensions.uninstall", {
          id: params.extension
        });
        return {};
      } catch (err) {
        if (err.message === "Uninstall failed. Reason: could not find extension.") {
          throw new protocol_js_1.NoSuchWebExtensionException("no such web extension");
        }
        throw err;
      }
    }
  };
  WebExtensionProcessor.WebExtensionProcessor = WebExtensionProcessor$1;
  return WebExtensionProcessor;
}
var OutgoingMessage = {};
var hasRequiredOutgoingMessage;
function requireOutgoingMessage() {
  if (hasRequiredOutgoingMessage) return OutgoingMessage;
  hasRequiredOutgoingMessage = 1;
  Object.defineProperty(OutgoingMessage, "__esModule", { value: true });
  OutgoingMessage.OutgoingMessage = void 0;
  let OutgoingMessage$1 = class OutgoingMessage2 {
    #message;
    #channel;
    constructor(message, channel) {
      this.#message = message;
      this.#channel = channel;
    }
    static createFromPromise(messagePromise, channel) {
      return messagePromise.then((message) => {
        if (message.kind === "success") {
          return {
            kind: "success",
            value: new OutgoingMessage2(message.value, channel)
          };
        }
        return message;
      });
    }
    static createResolved(message, channel) {
      return Promise.resolve({
        kind: "success",
        value: new OutgoingMessage2(message, channel)
      });
    }
    get message() {
      return this.#message;
    }
    get channel() {
      return this.#channel;
    }
  };
  OutgoingMessage.OutgoingMessage = OutgoingMessage$1;
  return OutgoingMessage;
}
var hasRequiredCommandProcessor;
function requireCommandProcessor() {
  if (hasRequiredCommandProcessor) return CommandProcessor;
  hasRequiredCommandProcessor = 1;
  Object.defineProperty(CommandProcessor, "__esModule", { value: true });
  CommandProcessor.CommandProcessor = void 0;
  const protocol_js_1 = requireProtocol();
  const EventEmitter_js_1 = requireEventEmitter$1();
  const log_js_1 = requireLog();
  const BidiNoOpParser_js_1 = requireBidiNoOpParser();
  const BrowserProcessor_js_1 = requireBrowserProcessor();
  const CdpProcessor_js_1 = requireCdpProcessor();
  const BrowsingContextProcessor_js_1 = requireBrowsingContextProcessor();
  const InputProcessor_js_1 = requireInputProcessor();
  const NetworkProcessor_js_1 = requireNetworkProcessor();
  const PermissionsProcessor_js_1 = requirePermissionsProcessor();
  const ScriptProcessor_js_1 = requireScriptProcessor();
  const SessionProcessor_js_1 = requireSessionProcessor();
  const StorageProcessor_js_1 = requireStorageProcessor();
  const WebExtensionProcessor_js_1 = requireWebExtensionProcessor();
  const OutgoingMessage_js_1 = requireOutgoingMessage();
  let CommandProcessor$1 = class CommandProcessor extends EventEmitter_js_1.EventEmitter {
    // keep-sorted start
    #bluetoothProcessor;
    #browserProcessor;
    #browsingContextProcessor;
    #cdpProcessor;
    #inputProcessor;
    #networkProcessor;
    #permissionsProcessor;
    #scriptProcessor;
    #sessionProcessor;
    #storageProcessor;
    #webExtensionProcessor;
    // keep-sorted end
    #parser;
    #logger;
    constructor(cdpConnection, browserCdpClient, eventManager, browsingContextStorage, realmStorage, preloadScriptStorage, networkStorage, bluetoothProcessor, userContextStorage, parser = new BidiNoOpParser_js_1.BidiNoOpParser(), initConnection, logger2) {
      super();
      this.#parser = parser;
      this.#logger = logger2;
      this.#bluetoothProcessor = bluetoothProcessor;
      this.#browserProcessor = new BrowserProcessor_js_1.BrowserProcessor(browserCdpClient, browsingContextStorage, userContextStorage);
      this.#browsingContextProcessor = new BrowsingContextProcessor_js_1.BrowsingContextProcessor(browserCdpClient, browsingContextStorage, eventManager);
      this.#cdpProcessor = new CdpProcessor_js_1.CdpProcessor(browsingContextStorage, realmStorage, cdpConnection, browserCdpClient);
      this.#inputProcessor = new InputProcessor_js_1.InputProcessor(browsingContextStorage);
      this.#networkProcessor = new NetworkProcessor_js_1.NetworkProcessor(browsingContextStorage, networkStorage);
      this.#permissionsProcessor = new PermissionsProcessor_js_1.PermissionsProcessor(browserCdpClient);
      this.#scriptProcessor = new ScriptProcessor_js_1.ScriptProcessor(eventManager, browsingContextStorage, realmStorage, preloadScriptStorage, userContextStorage, logger2);
      this.#sessionProcessor = new SessionProcessor_js_1.SessionProcessor(eventManager, browserCdpClient, initConnection);
      this.#storageProcessor = new StorageProcessor_js_1.StorageProcessor(browserCdpClient, browsingContextStorage, logger2);
      this.#webExtensionProcessor = new WebExtensionProcessor_js_1.WebExtensionProcessor(browserCdpClient);
    }
    async #processCommand(command) {
      switch (command.method) {
        // Bluetooth module
        // keep-sorted start block=yes
        case "bluetooth.handleRequestDevicePrompt":
          return await this.#bluetoothProcessor.handleRequestDevicePrompt(this.#parser.parseHandleRequestDevicePromptParams(command.params));
        case "bluetooth.simulateAdapter":
          return await this.#bluetoothProcessor.simulateAdapter(this.#parser.parseSimulateAdapterParameters(command.params));
        case "bluetooth.simulateAdvertisement":
          return await this.#bluetoothProcessor.simulateAdvertisement(this.#parser.parseSimulateAdvertisementParameters(command.params));
        case "bluetooth.simulatePreconnectedPeripheral":
          return await this.#bluetoothProcessor.simulatePreconnectedPeripheral(this.#parser.parseSimulatePreconnectedPeripheralParameters(command.params));
        // keep-sorted end
        // Browser module
        // keep-sorted start block=yes
        case "browser.close":
          return this.#browserProcessor.close();
        case "browser.createUserContext":
          return await this.#browserProcessor.createUserContext(command.params);
        case "browser.getClientWindows":
          return await this.#browserProcessor.getClientWindows();
        case "browser.getUserContexts":
          return await this.#browserProcessor.getUserContexts();
        case "browser.removeUserContext":
          return await this.#browserProcessor.removeUserContext(this.#parser.parseRemoveUserContextParams(command.params));
        case "browser.setClientWindowState":
          throw new protocol_js_1.UnknownErrorException(`Method ${command.method} is not implemented.`);
        // keep-sorted end
        // Browsing Context module
        // keep-sorted start block=yes
        case "browsingContext.activate":
          return await this.#browsingContextProcessor.activate(this.#parser.parseActivateParams(command.params));
        case "browsingContext.captureScreenshot":
          return await this.#browsingContextProcessor.captureScreenshot(this.#parser.parseCaptureScreenshotParams(command.params));
        case "browsingContext.close":
          return await this.#browsingContextProcessor.close(this.#parser.parseCloseParams(command.params));
        case "browsingContext.create":
          return await this.#browsingContextProcessor.create(this.#parser.parseCreateParams(command.params));
        case "browsingContext.getTree":
          return this.#browsingContextProcessor.getTree(this.#parser.parseGetTreeParams(command.params));
        case "browsingContext.handleUserPrompt":
          return await this.#browsingContextProcessor.handleUserPrompt(this.#parser.parseHandleUserPromptParams(command.params));
        case "browsingContext.locateNodes":
          return await this.#browsingContextProcessor.locateNodes(this.#parser.parseLocateNodesParams(command.params));
        case "browsingContext.navigate":
          return await this.#browsingContextProcessor.navigate(this.#parser.parseNavigateParams(command.params));
        case "browsingContext.print":
          return await this.#browsingContextProcessor.print(this.#parser.parsePrintParams(command.params));
        case "browsingContext.reload":
          return await this.#browsingContextProcessor.reload(this.#parser.parseReloadParams(command.params));
        case "browsingContext.setViewport":
          return await this.#browsingContextProcessor.setViewport(this.#parser.parseSetViewportParams(command.params));
        case "browsingContext.traverseHistory":
          return await this.#browsingContextProcessor.traverseHistory(this.#parser.parseTraverseHistoryParams(command.params));
        // keep-sorted end
        // CDP module
        // keep-sorted start block=yes
        case "goog:cdp.getSession":
          return this.#cdpProcessor.getSession(this.#parser.parseGetSessionParams(command.params));
        case "goog:cdp.resolveRealm":
          return this.#cdpProcessor.resolveRealm(this.#parser.parseResolveRealmParams(command.params));
        case "goog:cdp.sendCommand":
          return await this.#cdpProcessor.sendCommand(this.#parser.parseSendCommandParams(command.params));
        // keep-sorted end
        // CDP deprecated domain.
        // https://github.com/GoogleChromeLabs/chromium-bidi/issues/2844
        // keep-sorted start block=yes
        case "cdp.getSession":
          this.#logger?.(log_js_1.LogType.debugWarn, `Legacy '${command.method}' command is deprecated and will not supported soon. Use 'goog:${command.method}' instead.`);
          return this.#cdpProcessor.getSession(this.#parser.parseGetSessionParams(command.params));
        case "cdp.resolveRealm":
          this.#logger?.(log_js_1.LogType.debugWarn, `Legacy '${command.method}' command is deprecated and will not supported soon. Use 'goog:${command.method}' instead.`);
          return this.#cdpProcessor.resolveRealm(this.#parser.parseResolveRealmParams(command.params));
        case "cdp.sendCommand":
          this.#logger?.(log_js_1.LogType.debugWarn, `Legacy '${command.method}' command is deprecated and will not supported soon. Use 'goog:${command.method}' instead.`);
          return await this.#cdpProcessor.sendCommand(this.#parser.parseSendCommandParams(command.params));
        // keep-sorted end
        // Input module
        // keep-sorted start block=yes
        case "input.performActions":
          return await this.#inputProcessor.performActions(this.#parser.parsePerformActionsParams(command.params));
        case "input.releaseActions":
          return await this.#inputProcessor.releaseActions(this.#parser.parseReleaseActionsParams(command.params));
        case "input.setFiles":
          return await this.#inputProcessor.setFiles(this.#parser.parseSetFilesParams(command.params));
        // keep-sorted end
        // Network module
        // keep-sorted start block=yes
        case "network.addIntercept":
          return await this.#networkProcessor.addIntercept(this.#parser.parseAddInterceptParams(command.params));
        case "network.continueRequest":
          return await this.#networkProcessor.continueRequest(this.#parser.parseContinueRequestParams(command.params));
        case "network.continueResponse":
          return await this.#networkProcessor.continueResponse(this.#parser.parseContinueResponseParams(command.params));
        case "network.continueWithAuth":
          return await this.#networkProcessor.continueWithAuth(this.#parser.parseContinueWithAuthParams(command.params));
        case "network.failRequest":
          return await this.#networkProcessor.failRequest(this.#parser.parseFailRequestParams(command.params));
        case "network.provideResponse":
          return await this.#networkProcessor.provideResponse(this.#parser.parseProvideResponseParams(command.params));
        case "network.removeIntercept":
          return await this.#networkProcessor.removeIntercept(this.#parser.parseRemoveInterceptParams(command.params));
        case "network.setCacheBehavior":
          return await this.#networkProcessor.setCacheBehavior(this.#parser.parseSetCacheBehavior(command.params));
        // keep-sorted end
        // Permissions module
        // keep-sorted start block=yes
        case "permissions.setPermission":
          return await this.#permissionsProcessor.setPermissions(this.#parser.parseSetPermissionsParams(command.params));
        // keep-sorted end
        // Script module
        // keep-sorted start block=yes
        case "script.addPreloadScript":
          return await this.#scriptProcessor.addPreloadScript(this.#parser.parseAddPreloadScriptParams(command.params));
        case "script.callFunction":
          return await this.#scriptProcessor.callFunction(this.#parser.parseCallFunctionParams(this.#processTargetParams(command.params)));
        case "script.disown":
          return await this.#scriptProcessor.disown(this.#parser.parseDisownParams(this.#processTargetParams(command.params)));
        case "script.evaluate":
          return await this.#scriptProcessor.evaluate(this.#parser.parseEvaluateParams(this.#processTargetParams(command.params)));
        case "script.getRealms":
          return this.#scriptProcessor.getRealms(this.#parser.parseGetRealmsParams(command.params));
        case "script.removePreloadScript":
          return await this.#scriptProcessor.removePreloadScript(this.#parser.parseRemovePreloadScriptParams(command.params));
        // keep-sorted end
        // Session module
        // keep-sorted start block=yes
        case "session.end":
          throw new protocol_js_1.UnknownErrorException(`Method ${command.method} is not implemented.`);
        case "session.new":
          return await this.#sessionProcessor.new(command.params);
        case "session.status":
          return this.#sessionProcessor.status();
        case "session.subscribe":
          return await this.#sessionProcessor.subscribe(this.#parser.parseSubscribeParams(command.params), command.channel);
        case "session.unsubscribe":
          return await this.#sessionProcessor.unsubscribe(this.#parser.parseUnsubscribeParams(command.params), command.channel);
        // keep-sorted end
        // Storage module
        // keep-sorted start block=yes
        case "storage.deleteCookies":
          return await this.#storageProcessor.deleteCookies(this.#parser.parseDeleteCookiesParams(command.params));
        case "storage.getCookies":
          return await this.#storageProcessor.getCookies(this.#parser.parseGetCookiesParams(command.params));
        case "storage.setCookie":
          return await this.#storageProcessor.setCookie(this.#parser.parseSetCookieParams(command.params));
        // keep-sorted end
        // WebExtension module
        // keep-sorted start block=yes
        case "webExtension.install":
          return await this.#webExtensionProcessor.install(this.#parser.parseInstallParams(command.params));
        case "webExtension.uninstall":
          return await this.#webExtensionProcessor.uninstall(this.#parser.parseUninstallParams(command.params));
      }
      throw new protocol_js_1.UnknownCommandException(`Unknown command '${command?.method}'.`);
    }
    // Workaround for as zod.union always take the first schema
    // https://github.com/w3c/webdriver-bidi/issues/635
    #processTargetParams(params) {
      if (typeof params === "object" && params && "target" in params && typeof params.target === "object" && params.target && "context" in params.target) {
        delete params.target["realm"];
      }
      return params;
    }
    async processCommand(command) {
      try {
        const result = await this.#processCommand(command);
        const response = {
          type: "success",
          id: command.id,
          result
        };
        this.emit("response", {
          message: OutgoingMessage_js_1.OutgoingMessage.createResolved(response, command.channel),
          event: command.method
        });
      } catch (e2) {
        if (e2 instanceof protocol_js_1.Exception) {
          this.emit("response", {
            message: OutgoingMessage_js_1.OutgoingMessage.createResolved(e2.toErrorResponse(command.id), command.channel),
            event: command.method
          });
        } else {
          const error = e2;
          this.#logger?.(log_js_1.LogType.bidi, error);
          this.emit("response", {
            message: OutgoingMessage_js_1.OutgoingMessage.createResolved(new protocol_js_1.UnknownErrorException(error.message, error.stack).toErrorResponse(command.id), command.channel),
            event: command.method
          });
        }
      }
    }
  };
  CommandProcessor.CommandProcessor = CommandProcessor$1;
  return CommandProcessor;
}
var BluetoothProcessor = {};
var hasRequiredBluetoothProcessor;
function requireBluetoothProcessor() {
  if (hasRequiredBluetoothProcessor) return BluetoothProcessor;
  hasRequiredBluetoothProcessor = 1;
  Object.defineProperty(BluetoothProcessor, "__esModule", { value: true });
  BluetoothProcessor.BluetoothProcessor = void 0;
  const protocol_js_1 = requireProtocol();
  let BluetoothProcessor$1 = class BluetoothProcessor {
    #eventManager;
    #browsingContextStorage;
    constructor(eventManager, browsingContextStorage) {
      this.#eventManager = eventManager;
      this.#browsingContextStorage = browsingContextStorage;
    }
    async simulateAdapter(params) {
      if (params.type !== "create") {
        throw new protocol_js_1.UnsupportedOperationException(`Simulate type "${params.type}" is not supported. Only create type is supported`);
      }
      if (params.state === void 0) {
        throw new protocol_js_1.InvalidArgumentException(`Parameter "state" is required for creating a Bluetooth adapter`);
      }
      const context = this.#browsingContextStorage.getContext(params.context);
      await context.cdpTarget.browserCdpClient.sendCommand("BluetoothEmulation.disable");
      await context.cdpTarget.browserCdpClient.sendCommand("BluetoothEmulation.enable", {
        state: params.state
      });
      return {};
    }
    async simulatePreconnectedPeripheral(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      await context.cdpTarget.browserCdpClient.sendCommand("BluetoothEmulation.simulatePreconnectedPeripheral", {
        address: params.address,
        name: params.name,
        knownServiceUuids: params.knownServiceUuids,
        manufacturerData: params.manufacturerData
      });
      return {};
    }
    async simulateAdvertisement(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      await context.cdpTarget.browserCdpClient.sendCommand("BluetoothEmulation.simulateAdvertisement", {
        entry: params.scanEntry
      });
      return {};
    }
    onCdpTargetCreated(cdpTarget) {
      cdpTarget.cdpClient.on("DeviceAccess.deviceRequestPrompted", (event) => {
        this.#eventManager.registerEvent({
          type: "event",
          method: "bluetooth.requestDevicePromptUpdated",
          params: {
            context: cdpTarget.id,
            prompt: event.id,
            devices: event.devices
          }
        }, cdpTarget.id);
      });
    }
    async handleRequestDevicePrompt(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      if (params.accept) {
        await context.cdpTarget.cdpClient.sendCommand("DeviceAccess.selectPrompt", {
          id: params.prompt,
          deviceId: params.device
        });
      } else {
        await context.cdpTarget.cdpClient.sendCommand("DeviceAccess.cancelPrompt", {
          id: params.prompt
        });
      }
      return {};
    }
  };
  BluetoothProcessor.BluetoothProcessor = BluetoothProcessor$1;
  return BluetoothProcessor;
}
var UserContextStorage = {};
var hasRequiredUserContextStorage;
function requireUserContextStorage() {
  if (hasRequiredUserContextStorage) return UserContextStorage;
  hasRequiredUserContextStorage = 1;
  Object.defineProperty(UserContextStorage, "__esModule", { value: true });
  UserContextStorage.UserContextStorage = void 0;
  const protocol_js_1 = requireProtocol();
  let UserContextStorage$1 = class UserContextStorage {
    #browserClient;
    constructor(browserClient) {
      this.#browserClient = browserClient;
    }
    async getUserContexts() {
      const result = await this.#browserClient.sendCommand("Target.getBrowserContexts");
      return [
        {
          userContext: "default"
        },
        ...result.browserContextIds.map((id) => {
          return {
            userContext: id
          };
        })
      ];
    }
    async verifyUserContextIdList(userContextIds) {
      const foundContexts = /* @__PURE__ */ new Set();
      if (!userContextIds.length) {
        return foundContexts;
      }
      const userContexts = await this.getUserContexts();
      const knownUserContextIds = new Set(userContexts.map((userContext) => userContext.userContext));
      for (const userContextId of userContextIds) {
        if (!knownUserContextIds.has(userContextId)) {
          throw new protocol_js_1.NoSuchUserContextException(`User context ${userContextId} not found`);
        }
        foundContexts.add(userContextId);
      }
      return foundContexts;
    }
  };
  UserContextStorage.UserContextStorage = UserContextStorage$1;
  return UserContextStorage;
}
var CdpTargetManager = {};
var BrowsingContextImpl = {};
var Deferred = {};
var hasRequiredDeferred;
function requireDeferred() {
  if (hasRequiredDeferred) return Deferred;
  hasRequiredDeferred = 1;
  Object.defineProperty(Deferred, "__esModule", { value: true });
  Deferred.Deferred = void 0;
  let Deferred$1 = class Deferred {
    #isFinished = false;
    #promise;
    #result;
    #resolve;
    #reject;
    get isFinished() {
      return this.#isFinished;
    }
    get result() {
      if (!this.#isFinished) {
        throw new Error("Deferred is not finished yet");
      }
      return this.#result;
    }
    constructor() {
      this.#promise = new Promise((resolve2, reject) => {
        this.#resolve = resolve2;
        this.#reject = reject;
      });
      this.#promise.catch((_error) => {
      });
    }
    then(onFulfilled, onRejected) {
      return this.#promise.then(onFulfilled, onRejected);
    }
    catch(onRejected) {
      return this.#promise.catch(onRejected);
    }
    resolve(value) {
      this.#result = value;
      if (!this.#isFinished) {
        this.#isFinished = true;
        this.#resolve(value);
      }
    }
    reject(reason) {
      if (!this.#isFinished) {
        this.#isFinished = true;
        this.#reject(reason);
      }
    }
    finally(onFinally) {
      return this.#promise.finally(onFinally);
    }
    [Symbol.toStringTag] = "Promise";
  };
  Deferred.Deferred = Deferred$1;
  return Deferred;
}
var time = {};
var hasRequiredTime;
function requireTime() {
  if (hasRequiredTime) return time;
  hasRequiredTime = 1;
  Object.defineProperty(time, "__esModule", { value: true });
  time.getTimestamp = getTimestamp;
  function getTimestamp() {
    return (/* @__PURE__ */ new Date()).getTime();
  }
  return time;
}
var unitConversions = {};
var hasRequiredUnitConversions;
function requireUnitConversions() {
  if (hasRequiredUnitConversions) return unitConversions;
  hasRequiredUnitConversions = 1;
  Object.defineProperty(unitConversions, "__esModule", { value: true });
  unitConversions.inchesFromCm = inchesFromCm;
  function inchesFromCm(cm) {
    return cm / 2.54;
  }
  return unitConversions;
}
var WindowRealm = {};
var Realm = {};
var hasRequiredRealm;
function requireRealm() {
  if (hasRequiredRealm) return Realm;
  hasRequiredRealm = 1;
  Object.defineProperty(Realm, "__esModule", { value: true });
  Realm.Realm = void 0;
  const protocol_js_1 = requireProtocol();
  const log_js_1 = requireLog();
  const uuid_js_1 = requireUuid();
  const ChannelProxy_js_1 = requireChannelProxy();
  let Realm$1 = class Realm2 {
    #cdpClient;
    #eventManager;
    #executionContextId;
    #logger;
    #origin;
    #realmId;
    #realmStorage;
    constructor(cdpClient, eventManager, executionContextId, logger2, origin, realmId, realmStorage) {
      this.#cdpClient = cdpClient;
      this.#eventManager = eventManager;
      this.#executionContextId = executionContextId;
      this.#logger = logger2;
      this.#origin = origin;
      this.#realmId = realmId;
      this.#realmStorage = realmStorage;
      this.#realmStorage.addRealm(this);
    }
    cdpToBidiValue(cdpValue, resultOwnership) {
      const bidiValue = this.serializeForBiDi(cdpValue.result.deepSerializedValue, /* @__PURE__ */ new Map());
      if (cdpValue.result.objectId) {
        const objectId = cdpValue.result.objectId;
        if (resultOwnership === "root") {
          bidiValue.handle = objectId;
          this.#realmStorage.knownHandlesToRealmMap.set(objectId, this.realmId);
        } else {
          void this.#releaseObject(objectId).catch((error) => this.#logger?.(log_js_1.LogType.debugError, error));
        }
      }
      return bidiValue;
    }
    /**
     * Relies on the CDP to implement proper BiDi serialization, except:
     * * CDP integer property `backendNodeId` is replaced with `sharedId` of
     * `{documentId}_element_{backendNodeId}`;
     * * CDP integer property `weakLocalObjectReference` is replaced with UUID `internalId`
     * using unique-per serialization `internalIdMap`.
     * * CDP type `platformobject` is replaced with `object`.
     * @param deepSerializedValue - CDP value to be converted to BiDi.
     * @param internalIdMap - Map from CDP integer `weakLocalObjectReference` to BiDi UUID
     * `internalId`.
     */
    serializeForBiDi(deepSerializedValue, internalIdMap) {
      if (Object.hasOwn(deepSerializedValue, "weakLocalObjectReference")) {
        const weakLocalObjectReference = deepSerializedValue.weakLocalObjectReference;
        if (!internalIdMap.has(weakLocalObjectReference)) {
          internalIdMap.set(weakLocalObjectReference, (0, uuid_js_1.uuidv4)());
        }
        deepSerializedValue.internalId = internalIdMap.get(weakLocalObjectReference);
        delete deepSerializedValue["weakLocalObjectReference"];
      }
      if (deepSerializedValue.type === "node" && deepSerializedValue.value && Object.hasOwn(deepSerializedValue.value, "frameId")) {
        delete deepSerializedValue.value["frameId"];
      }
      if (deepSerializedValue.type === "platformobject") {
        return { type: "object" };
      }
      const bidiValue = deepSerializedValue.value;
      if (bidiValue === void 0) {
        return deepSerializedValue;
      }
      if (["array", "set", "htmlcollection", "nodelist"].includes(deepSerializedValue.type)) {
        for (const i in bidiValue) {
          bidiValue[i] = this.serializeForBiDi(bidiValue[i], internalIdMap);
        }
      }
      if (["object", "map"].includes(deepSerializedValue.type)) {
        for (const i in bidiValue) {
          bidiValue[i] = [
            this.serializeForBiDi(bidiValue[i][0], internalIdMap),
            this.serializeForBiDi(bidiValue[i][1], internalIdMap)
          ];
        }
      }
      return deepSerializedValue;
    }
    get realmId() {
      return this.#realmId;
    }
    get executionContextId() {
      return this.#executionContextId;
    }
    get origin() {
      return this.#origin;
    }
    get source() {
      return {
        realm: this.realmId
      };
    }
    get cdpClient() {
      return this.#cdpClient;
    }
    get baseInfo() {
      return {
        realm: this.realmId,
        origin: this.origin
      };
    }
    async evaluate(expression, awaitPromise, resultOwnership = "none", serializationOptions = {}, userActivation = false, includeCommandLineApi = false) {
      const cdpEvaluateResult = await this.cdpClient.sendCommand("Runtime.evaluate", {
        contextId: this.executionContextId,
        expression,
        awaitPromise,
        serializationOptions: Realm2.#getSerializationOptions("deep", serializationOptions),
        userGesture: userActivation,
        includeCommandLineAPI: includeCommandLineApi
      });
      if (cdpEvaluateResult.exceptionDetails) {
        return await this.#getExceptionResult(cdpEvaluateResult.exceptionDetails, 0, resultOwnership);
      }
      return {
        realm: this.realmId,
        result: this.cdpToBidiValue(cdpEvaluateResult, resultOwnership),
        type: "success"
      };
    }
    #registerEvent(event) {
      if (this.associatedBrowsingContexts.length === 0) {
        this.#eventManager.registerGlobalEvent(event);
      } else {
        for (const browsingContext of this.associatedBrowsingContexts) {
          this.#eventManager.registerEvent(event, browsingContext.id);
        }
      }
    }
    initialize() {
      this.#registerEvent({
        type: "event",
        method: protocol_js_1.ChromiumBidi.Script.EventNames.RealmCreated,
        params: this.realmInfo
      });
    }
    /**
     * Serializes a given CDP object into BiDi, keeping references in the
     * target's `globalThis`.
     */
    async serializeCdpObject(cdpRemoteObject, resultOwnership) {
      const argument = Realm2.#cdpRemoteObjectToCallArgument(cdpRemoteObject);
      const cdpValue = await this.cdpClient.sendCommand("Runtime.callFunctionOn", {
        functionDeclaration: String((remoteObject) => remoteObject),
        awaitPromise: false,
        arguments: [argument],
        serializationOptions: {
          serialization: "deep"
        },
        executionContextId: this.executionContextId
      });
      return this.cdpToBidiValue(cdpValue, resultOwnership);
    }
    static #cdpRemoteObjectToCallArgument(cdpRemoteObject) {
      if (cdpRemoteObject.objectId !== void 0) {
        return { objectId: cdpRemoteObject.objectId };
      }
      if (cdpRemoteObject.unserializableValue !== void 0) {
        return { unserializableValue: cdpRemoteObject.unserializableValue };
      }
      return { value: cdpRemoteObject.value };
    }
    /**
     * Gets the string representation of an object. This is equivalent to
     * calling `toString()` on the object value.
     */
    async stringifyObject(cdpRemoteObject) {
      const { result } = await this.cdpClient.sendCommand("Runtime.callFunctionOn", {
        functionDeclaration: String(
          // eslint-disable-next-line @typescript-eslint/no-base-to-string
          (remoteObject) => String(remoteObject)
        ),
        awaitPromise: false,
        arguments: [cdpRemoteObject],
        returnByValue: true,
        executionContextId: this.executionContextId
      });
      return result.value;
    }
    async #flattenKeyValuePairs(mappingLocalValue) {
      const keyValueArray = await Promise.all(mappingLocalValue.map(async ([key, value]) => {
        let keyArg;
        if (typeof key === "string") {
          keyArg = { value: key };
        } else {
          keyArg = await this.deserializeForCdp(key);
        }
        const valueArg = await this.deserializeForCdp(value);
        return [keyArg, valueArg];
      }));
      return keyValueArray.flat();
    }
    async #flattenValueList(listLocalValue) {
      return await Promise.all(listLocalValue.map((localValue) => this.deserializeForCdp(localValue)));
    }
    async #serializeCdpExceptionDetails(cdpExceptionDetails, lineOffset, resultOwnership) {
      const callFrames = cdpExceptionDetails.stackTrace?.callFrames.map((frame2) => ({
        url: frame2.url,
        functionName: frame2.functionName,
        lineNumber: frame2.lineNumber - lineOffset,
        columnNumber: frame2.columnNumber
      })) ?? [];
      const exception = cdpExceptionDetails.exception;
      return {
        exception: await this.serializeCdpObject(exception, resultOwnership),
        columnNumber: cdpExceptionDetails.columnNumber,
        lineNumber: cdpExceptionDetails.lineNumber - lineOffset,
        stackTrace: {
          callFrames
        },
        text: await this.stringifyObject(exception) || cdpExceptionDetails.text
      };
    }
    async callFunction(functionDeclaration, awaitPromise, thisLocalValue = {
      type: "undefined"
    }, argumentsLocalValues = [], resultOwnership = "none", serializationOptions = {}, userActivation = false) {
      const callFunctionAndSerializeScript = `(...args) => {
      function callFunction(f, args) {
        const deserializedThis = args.shift();
        const deserializedArgs = args;
        return f.apply(deserializedThis, deserializedArgs);
      }
      return callFunction((
        ${functionDeclaration}
      ), args);
    }`;
      const thisAndArgumentsList = [
        await this.deserializeForCdp(thisLocalValue),
        ...await Promise.all(argumentsLocalValues.map(async (argumentLocalValue) => await this.deserializeForCdp(argumentLocalValue)))
      ];
      let cdpCallFunctionResult;
      try {
        cdpCallFunctionResult = await this.cdpClient.sendCommand("Runtime.callFunctionOn", {
          functionDeclaration: callFunctionAndSerializeScript,
          awaitPromise,
          arguments: thisAndArgumentsList,
          serializationOptions: Realm2.#getSerializationOptions("deep", serializationOptions),
          executionContextId: this.executionContextId,
          userGesture: userActivation
        });
      } catch (error) {
        if (error.code === -32e3 && [
          "Could not find object with given id",
          "Argument should belong to the same JavaScript world as target object",
          "Invalid remote object id"
        ].includes(error.message)) {
          throw new protocol_js_1.NoSuchHandleException("Handle was not found.");
        }
        throw error;
      }
      if (cdpCallFunctionResult.exceptionDetails) {
        return await this.#getExceptionResult(cdpCallFunctionResult.exceptionDetails, 1, resultOwnership);
      }
      return {
        type: "success",
        result: this.cdpToBidiValue(cdpCallFunctionResult, resultOwnership),
        realm: this.realmId
      };
    }
    async deserializeForCdp(localValue) {
      if ("handle" in localValue && localValue.handle) {
        return { objectId: localValue.handle };
      } else if ("handle" in localValue || "sharedId" in localValue) {
        throw new protocol_js_1.NoSuchHandleException("Handle was not found.");
      }
      switch (localValue.type) {
        case "undefined":
          return { unserializableValue: "undefined" };
        case "null":
          return { unserializableValue: "null" };
        case "string":
          return { value: localValue.value };
        case "number":
          if (localValue.value === "NaN") {
            return { unserializableValue: "NaN" };
          } else if (localValue.value === "-0") {
            return { unserializableValue: "-0" };
          } else if (localValue.value === "Infinity") {
            return { unserializableValue: "Infinity" };
          } else if (localValue.value === "-Infinity") {
            return { unserializableValue: "-Infinity" };
          }
          return {
            value: localValue.value
          };
        case "boolean":
          return { value: Boolean(localValue.value) };
        case "bigint":
          return {
            unserializableValue: `BigInt(${JSON.stringify(localValue.value)})`
          };
        case "date":
          return {
            unserializableValue: `new Date(Date.parse(${JSON.stringify(localValue.value)}))`
          };
        case "regexp":
          return {
            unserializableValue: `new RegExp(${JSON.stringify(localValue.value.pattern)}, ${JSON.stringify(localValue.value.flags)})`
          };
        case "map": {
          const keyValueArray = await this.#flattenKeyValuePairs(localValue.value);
          const { result } = await this.cdpClient.sendCommand("Runtime.callFunctionOn", {
            functionDeclaration: String((...args) => {
              const result2 = /* @__PURE__ */ new Map();
              for (let i = 0; i < args.length; i += 2) {
                result2.set(args[i], args[i + 1]);
              }
              return result2;
            }),
            awaitPromise: false,
            arguments: keyValueArray,
            returnByValue: false,
            executionContextId: this.executionContextId
          });
          return { objectId: result.objectId };
        }
        case "object": {
          const keyValueArray = await this.#flattenKeyValuePairs(localValue.value);
          const { result } = await this.cdpClient.sendCommand("Runtime.callFunctionOn", {
            functionDeclaration: String((...args) => {
              const result2 = {};
              for (let i = 0; i < args.length; i += 2) {
                const key = args[i];
                result2[key] = args[i + 1];
              }
              return result2;
            }),
            awaitPromise: false,
            arguments: keyValueArray,
            returnByValue: false,
            executionContextId: this.executionContextId
          });
          return { objectId: result.objectId };
        }
        case "array": {
          const args = await this.#flattenValueList(localValue.value);
          const { result } = await this.cdpClient.sendCommand("Runtime.callFunctionOn", {
            functionDeclaration: String((...args2) => args2),
            awaitPromise: false,
            arguments: args,
            returnByValue: false,
            executionContextId: this.executionContextId
          });
          return { objectId: result.objectId };
        }
        case "set": {
          const args = await this.#flattenValueList(localValue.value);
          const { result } = await this.cdpClient.sendCommand("Runtime.callFunctionOn", {
            functionDeclaration: String((...args2) => new Set(args2)),
            awaitPromise: false,
            arguments: args,
            returnByValue: false,
            executionContextId: this.executionContextId
          });
          return { objectId: result.objectId };
        }
        case "channel": {
          const channelProxy = new ChannelProxy_js_1.ChannelProxy(localValue.value, this.#logger);
          const channelProxySendMessageHandle = await channelProxy.init(this, this.#eventManager);
          return { objectId: channelProxySendMessageHandle };
        }
      }
      throw new Error(`Value ${JSON.stringify(localValue)} is not deserializable.`);
    }
    async #getExceptionResult(exceptionDetails, lineOffset, resultOwnership) {
      return {
        exceptionDetails: await this.#serializeCdpExceptionDetails(exceptionDetails, lineOffset, resultOwnership),
        realm: this.realmId,
        type: "exception"
      };
    }
    static #getSerializationOptions(serialization, serializationOptions) {
      return {
        serialization,
        additionalParameters: Realm2.#getAdditionalSerializationParameters(serializationOptions),
        ...Realm2.#getMaxObjectDepth(serializationOptions)
      };
    }
    static #getAdditionalSerializationParameters(serializationOptions) {
      const additionalParameters = {};
      if (serializationOptions.maxDomDepth !== void 0) {
        additionalParameters["maxNodeDepth"] = serializationOptions.maxDomDepth === null ? 1e3 : serializationOptions.maxDomDepth;
      }
      if (serializationOptions.includeShadowTree !== void 0) {
        additionalParameters["includeShadowTree"] = serializationOptions.includeShadowTree;
      }
      return additionalParameters;
    }
    static #getMaxObjectDepth(serializationOptions) {
      return serializationOptions.maxObjectDepth === void 0 || serializationOptions.maxObjectDepth === null ? {} : { maxDepth: serializationOptions.maxObjectDepth };
    }
    async #releaseObject(handle) {
      try {
        await this.cdpClient.sendCommand("Runtime.releaseObject", {
          objectId: handle
        });
      } catch (error) {
        if (!(error.code === -32e3 && error.message === "Invalid remote object id")) {
          throw error;
        }
      }
    }
    async disown(handle) {
      if (this.#realmStorage.knownHandlesToRealmMap.get(handle) !== this.realmId) {
        return;
      }
      await this.#releaseObject(handle);
      this.#realmStorage.knownHandlesToRealmMap.delete(handle);
    }
    dispose() {
      this.#registerEvent({
        type: "event",
        method: protocol_js_1.ChromiumBidi.Script.EventNames.RealmDestroyed,
        params: {
          realm: this.realmId
        }
      });
    }
  };
  Realm.Realm = Realm$1;
  return Realm;
}
var SharedId = {};
var hasRequiredSharedId;
function requireSharedId() {
  if (hasRequiredSharedId) return SharedId;
  hasRequiredSharedId = 1;
  Object.defineProperty(SharedId, "__esModule", { value: true });
  SharedId.getSharedId = getSharedId;
  SharedId.parseSharedId = parseSharedId;
  const SHARED_ID_DIVIDER = "_element_";
  function getSharedId(frameId, documentId, backendNodeId) {
    return `f.${frameId}.d.${documentId}.e.${backendNodeId}`;
  }
  function parseLegacySharedId(sharedId) {
    const match = sharedId.match(new RegExp(`(.*)${SHARED_ID_DIVIDER}(.*)`));
    if (!match) {
      return null;
    }
    const documentId = match[1];
    const elementId = match[2];
    if (documentId === void 0 || elementId === void 0) {
      return null;
    }
    const backendNodeId = parseInt(elementId ?? "");
    if (isNaN(backendNodeId)) {
      return null;
    }
    return {
      documentId,
      backendNodeId
    };
  }
  function parseSharedId(sharedId) {
    const legacyFormattedSharedId = parseLegacySharedId(sharedId);
    if (legacyFormattedSharedId !== null) {
      return { ...legacyFormattedSharedId, frameId: void 0 };
    }
    const match = sharedId.match(/f\.(.*)\.d\.(.*)\.e\.([0-9]*)/);
    if (!match) {
      return null;
    }
    const frameId = match[1];
    const documentId = match[2];
    const elementId = match[3];
    if (frameId === void 0 || documentId === void 0 || elementId === void 0) {
      return null;
    }
    const backendNodeId = parseInt(elementId ?? "");
    if (isNaN(backendNodeId)) {
      return null;
    }
    return {
      frameId,
      documentId,
      backendNodeId
    };
  }
  return SharedId;
}
var hasRequiredWindowRealm;
function requireWindowRealm() {
  if (hasRequiredWindowRealm) return WindowRealm;
  hasRequiredWindowRealm = 1;
  Object.defineProperty(WindowRealm, "__esModule", { value: true });
  WindowRealm.WindowRealm = void 0;
  const protocol_js_1 = requireProtocol();
  const Realm_js_1 = requireRealm();
  const SharedId_js_1 = requireSharedId();
  let WindowRealm$1 = class WindowRealm extends Realm_js_1.Realm {
    #browsingContextId;
    #browsingContextStorage;
    sandbox;
    constructor(browsingContextId, browsingContextStorage, cdpClient, eventManager, executionContextId, logger2, origin, realmId, realmStorage, sandbox) {
      super(cdpClient, eventManager, executionContextId, logger2, origin, realmId, realmStorage);
      this.#browsingContextId = browsingContextId;
      this.#browsingContextStorage = browsingContextStorage;
      this.sandbox = sandbox;
      this.initialize();
    }
    #getBrowsingContextId(navigableId) {
      const maybeBrowsingContext = this.#browsingContextStorage.getAllContexts().find((context) => context.navigableId === navigableId);
      return maybeBrowsingContext?.id ?? "UNKNOWN";
    }
    get browsingContext() {
      return this.#browsingContextStorage.getContext(this.#browsingContextId);
    }
    get associatedBrowsingContexts() {
      return [this.browsingContext];
    }
    get realmType() {
      return "window";
    }
    get realmInfo() {
      return {
        ...this.baseInfo,
        type: this.realmType,
        context: this.#browsingContextId,
        sandbox: this.sandbox
      };
    }
    get source() {
      return {
        realm: this.realmId,
        context: this.browsingContext.id
      };
    }
    serializeForBiDi(deepSerializedValue, internalIdMap) {
      const bidiValue = deepSerializedValue.value;
      if (deepSerializedValue.type === "node" && bidiValue !== void 0) {
        if (Object.hasOwn(bidiValue, "backendNodeId")) {
          let navigableId = this.browsingContext.navigableId ?? "UNKNOWN";
          if (Object.hasOwn(bidiValue, "loaderId")) {
            navigableId = bidiValue.loaderId;
            delete bidiValue["loaderId"];
          }
          deepSerializedValue.sharedId = (0, SharedId_js_1.getSharedId)(this.#getBrowsingContextId(navigableId), navigableId, bidiValue.backendNodeId);
          delete bidiValue["backendNodeId"];
        }
        if (Object.hasOwn(bidiValue, "children")) {
          for (const i in bidiValue.children) {
            bidiValue.children[i] = this.serializeForBiDi(bidiValue.children[i], internalIdMap);
          }
        }
        if (Object.hasOwn(bidiValue, "shadowRoot") && bidiValue.shadowRoot !== null) {
          bidiValue.shadowRoot = this.serializeForBiDi(bidiValue.shadowRoot, internalIdMap);
        }
        if (bidiValue.namespaceURI === "") {
          bidiValue.namespaceURI = null;
        }
      }
      return super.serializeForBiDi(deepSerializedValue, internalIdMap);
    }
    async deserializeForCdp(localValue) {
      if ("sharedId" in localValue && localValue.sharedId) {
        const parsedSharedId = (0, SharedId_js_1.parseSharedId)(localValue.sharedId);
        if (parsedSharedId === null) {
          throw new protocol_js_1.NoSuchNodeException(`SharedId "${localValue.sharedId}" was not found.`);
        }
        const { documentId, backendNodeId } = parsedSharedId;
        if (this.browsingContext.navigableId !== documentId) {
          throw new protocol_js_1.NoSuchNodeException(`SharedId "${localValue.sharedId}" belongs to different document. Current document is ${this.browsingContext.navigableId}.`);
        }
        try {
          const { object } = await this.cdpClient.sendCommand("DOM.resolveNode", {
            backendNodeId,
            executionContextId: this.executionContextId
          });
          return { objectId: object.objectId };
        } catch (error) {
          if (error.code === -32e3 && error.message === "No node with given id found") {
            throw new protocol_js_1.NoSuchNodeException(`SharedId "${localValue.sharedId}" was not found.`);
          }
          throw new protocol_js_1.UnknownErrorException(error.message, error.stack);
        }
      }
      return await super.deserializeForCdp(localValue);
    }
    async evaluate(expression, awaitPromise, resultOwnership, serializationOptions, userActivation, includeCommandLineApi) {
      await this.#browsingContextStorage.getContext(this.#browsingContextId).targetUnblockedOrThrow();
      return await super.evaluate(expression, awaitPromise, resultOwnership, serializationOptions, userActivation, includeCommandLineApi);
    }
    async callFunction(functionDeclaration, awaitPromise, thisLocalValue, argumentsLocalValues, resultOwnership, serializationOptions, userActivation) {
      await this.#browsingContextStorage.getContext(this.#browsingContextId).targetUnblockedOrThrow();
      return await super.callFunction(functionDeclaration, awaitPromise, thisLocalValue, argumentsLocalValues, resultOwnership, serializationOptions, userActivation);
    }
  };
  WindowRealm.WindowRealm = WindowRealm$1;
  return WindowRealm;
}
var NavigationTracker = {};
var urlHelpers = {};
var hasRequiredUrlHelpers;
function requireUrlHelpers() {
  if (hasRequiredUrlHelpers) return urlHelpers;
  hasRequiredUrlHelpers = 1;
  Object.defineProperty(urlHelpers, "__esModule", { value: true });
  urlHelpers.urlMatchesAboutBlank = urlMatchesAboutBlank;
  function urlMatchesAboutBlank(url) {
    if (url === "") {
      return true;
    }
    try {
      const parsedUrl = new URL(url);
      const schema = parsedUrl.protocol.replace(/:$/, "");
      return schema.toLowerCase() === "about" && parsedUrl.pathname.toLowerCase() === "blank" && parsedUrl.username === "" && parsedUrl.password === "" && parsedUrl.host === "";
    } catch (err) {
      if (err instanceof TypeError) {
        return false;
      }
      throw err;
    }
  }
  return urlHelpers;
}
var hasRequiredNavigationTracker;
function requireNavigationTracker() {
  if (hasRequiredNavigationTracker) return NavigationTracker;
  hasRequiredNavigationTracker = 1;
  Object.defineProperty(NavigationTracker, "__esModule", { value: true });
  NavigationTracker.NavigationTracker = NavigationTracker.NavigationState = NavigationTracker.NavigationResult = void 0;
  const protocol_js_1 = requireProtocol();
  const Deferred_js_1 = requireDeferred();
  const log_js_1 = requireLog();
  const time_js_1 = requireTime();
  const urlHelpers_js_1 = requireUrlHelpers();
  const uuid_js_1 = requireUuid();
  class NavigationResult {
    eventName;
    message;
    constructor(eventName, message) {
      this.eventName = eventName;
      this.message = message;
    }
  }
  NavigationTracker.NavigationResult = NavigationResult;
  class NavigationState {
    navigationId = (0, uuid_js_1.uuidv4)();
    #browsingContextId;
    #started = false;
    #finished = new Deferred_js_1.Deferred();
    url;
    loaderId;
    #isInitial;
    #eventManager;
    committed = new Deferred_js_1.Deferred();
    isFragmentNavigation;
    get finished() {
      return this.#finished;
    }
    constructor(url, browsingContextId, isInitial, eventManager) {
      this.#browsingContextId = browsingContextId;
      this.url = url;
      this.#isInitial = isInitial;
      this.#eventManager = eventManager;
    }
    navigationInfo() {
      return {
        context: this.#browsingContextId,
        navigation: this.navigationId,
        timestamp: (0, time_js_1.getTimestamp)(),
        url: this.url
      };
    }
    start() {
      if (!this.#isInitial && !this.#started) {
        this.#eventManager.registerEvent({
          type: "event",
          method: protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.NavigationStarted,
          params: this.navigationInfo()
        }, this.#browsingContextId);
      }
      this.#started = true;
    }
    #finish(navigationResult) {
      this.#started = true;
      if (!this.#isInitial && !this.#finished.isFinished && navigationResult.eventName !== "browsingContext.load") {
        this.#eventManager.registerEvent({
          type: "event",
          method: navigationResult.eventName,
          params: this.navigationInfo()
        }, this.#browsingContextId);
      }
      this.#finished.resolve(navigationResult);
    }
    frameNavigated() {
      this.committed.resolve();
      if (!this.#isInitial) {
        this.#eventManager.registerEvent({
          type: "event",
          method: protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.NavigationCommitted,
          params: this.navigationInfo()
        }, this.#browsingContextId);
      }
    }
    fragmentNavigated() {
      this.committed.resolve();
      this.#finish(new NavigationResult(
        "browsingContext.fragmentNavigated"
        /* NavigationEventName.FragmentNavigated */
      ));
    }
    load() {
      this.#finish(new NavigationResult(
        "browsingContext.load"
        /* NavigationEventName.Load */
      ));
    }
    fail(message) {
      this.#finish(new NavigationResult(this.committed.isFinished ? "browsingContext.navigationAborted" : "browsingContext.navigationFailed", message));
    }
  }
  NavigationTracker.NavigationState = NavigationState;
  let NavigationTracker$1 = class NavigationTracker {
    #eventManager;
    #logger;
    #loaderIdToNavigationsMap = /* @__PURE__ */ new Map();
    #browsingContextId;
    #currentNavigation;
    // When a new navigation is started via `BrowsingContext.navigate` with `wait` set to
    // `None`, the command result should have `navigation` value, but mapper does not have
    // it yet. This value will be set to `navigationId` after next .
    #pendingNavigation;
    // Flags if the initial navigation to `about:blank` is in progress.
    #isInitialNavigation = true;
    constructor(url, browsingContextId, eventManager, logger2) {
      this.#browsingContextId = browsingContextId;
      this.#eventManager = eventManager;
      this.#logger = logger2;
      this.#isInitialNavigation = true;
      this.#currentNavigation = new NavigationState(url, browsingContextId, (0, urlHelpers_js_1.urlMatchesAboutBlank)(url), this.#eventManager);
    }
    /**
     * Returns current started ongoing navigation. It can be either a started pending
     * navigation, or one is already navigated.
     */
    get currentNavigationId() {
      if (this.#pendingNavigation?.loaderId !== void 0) {
        return this.#pendingNavigation.navigationId;
      }
      return this.#currentNavigation.navigationId;
    }
    /**
     * Flags if the current navigation relates to the initial to `about:blank` navigation.
     */
    get isInitialNavigation() {
      return this.#isInitialNavigation;
    }
    /**
     * Url of the last navigated navigation.
     */
    get url() {
      return this.#currentNavigation.url;
    }
    /**
     * Creates a pending navigation e.g. when navigation command is called. Required to
     * provide navigation id before the actual navigation is started. It will be used when
     * navigation started. Can be aborted, failed, fragment navigated, or became a current
     * navigation.
     */
    createPendingNavigation(url, canBeInitialNavigation = false) {
      this.#logger?.(log_js_1.LogType.debug, "createCommandNavigation");
      this.#isInitialNavigation = canBeInitialNavigation && this.#isInitialNavigation && (0, urlHelpers_js_1.urlMatchesAboutBlank)(url);
      this.#pendingNavigation?.fail("navigation canceled by concurrent navigation");
      const navigation = new NavigationState(url, this.#browsingContextId, this.#isInitialNavigation, this.#eventManager);
      this.#pendingNavigation = navigation;
      return navigation;
    }
    dispose() {
      this.#pendingNavigation?.fail("navigation canceled by context disposal");
      this.#currentNavigation.fail("navigation canceled by context disposal");
    }
    // Update the current url.
    onTargetInfoChanged(url) {
      this.#logger?.(log_js_1.LogType.debug, `onTargetInfoChanged ${url}`);
      this.#currentNavigation.url = url;
    }
    #getNavigationForFrameNavigated(url, loaderId) {
      if (this.#loaderIdToNavigationsMap.has(loaderId)) {
        return this.#loaderIdToNavigationsMap.get(loaderId);
      }
      if (this.#pendingNavigation !== void 0 && this.#pendingNavigation.loaderId === void 0) {
        return this.#pendingNavigation;
      }
      return this.createPendingNavigation(url, true);
    }
    /**
     * @param {string} unreachableUrl indicated the navigation is actually failed.
     */
    frameNavigated(url, loaderId, unreachableUrl) {
      this.#logger?.(log_js_1.LogType.debug, `frameNavigated ${url}`);
      if (unreachableUrl !== void 0 && !this.#loaderIdToNavigationsMap.has(loaderId)) {
        const navigation2 = this.#pendingNavigation ?? this.createPendingNavigation(unreachableUrl, true);
        navigation2.url = unreachableUrl;
        navigation2.start();
        navigation2.fail("the requested url is unreachable");
        return;
      }
      const navigation = this.#getNavigationForFrameNavigated(url, loaderId);
      if (navigation !== this.#currentNavigation) {
        this.#currentNavigation.fail("navigation canceled by concurrent navigation");
      }
      navigation.url = url;
      navigation.loaderId = loaderId;
      this.#loaderIdToNavigationsMap.set(loaderId, navigation);
      navigation.start();
      navigation.frameNavigated();
      this.#currentNavigation = navigation;
      if (this.#pendingNavigation === navigation) {
        this.#pendingNavigation = void 0;
      }
    }
    navigatedWithinDocument(url, navigationType) {
      this.#logger?.(log_js_1.LogType.debug, `navigatedWithinDocument ${url}, ${navigationType}`);
      this.#currentNavigation.url = url;
      if (navigationType !== "fragment") {
        return;
      }
      const fragmentNavigation = this.#pendingNavigation !== void 0 && this.#pendingNavigation.loaderId === void 0 ? this.#pendingNavigation : new NavigationState(url, this.#browsingContextId, false, this.#eventManager);
      fragmentNavigation.fragmentNavigated();
      if (fragmentNavigation === this.#pendingNavigation) {
        this.#pendingNavigation = void 0;
      }
    }
    frameRequestedNavigation(url) {
      this.#logger?.(log_js_1.LogType.debug, `Page.frameRequestedNavigation ${url}`);
      this.createPendingNavigation(url, true);
    }
    /**
     * Required to mark navigation as fully complete.
     * TODO: navigation should be complete when it became the current one on
     * `Page.frameNavigated` or on navigating command finished with a new loader Id.
     */
    loadPageEvent(loaderId) {
      this.#logger?.(log_js_1.LogType.debug, "loadPageEvent");
      this.#isInitialNavigation = false;
      this.#loaderIdToNavigationsMap.get(loaderId)?.load();
    }
    /**
     * Fail navigation due to navigation command failed.
     */
    failNavigation(navigation, errorText) {
      this.#logger?.(log_js_1.LogType.debug, "failCommandNavigation");
      navigation.fail(errorText);
    }
    /**
     * Updates the navigation's `loaderId` and sets it as current one, if it is a
     * cross-document navigation.
     */
    navigationCommandFinished(navigation, loaderId) {
      this.#logger?.(log_js_1.LogType.debug, `finishCommandNavigation ${navigation.navigationId}, ${loaderId}`);
      if (loaderId !== void 0) {
        navigation.loaderId = loaderId;
        this.#loaderIdToNavigationsMap.set(loaderId, navigation);
      }
      navigation.isFragmentNavigation = loaderId === void 0;
      if (loaderId === void 0 || this.#currentNavigation === navigation) {
        return;
      }
      this.#currentNavigation.fail("navigation canceled by concurrent navigation");
      navigation.start();
      this.#currentNavigation = navigation;
      if (this.#pendingNavigation === navigation) {
        this.#pendingNavigation = void 0;
      }
    }
    /**
     * Emulated event, tight to `Network.requestWillBeSent`.
     */
    frameStartedNavigating(url, loaderId) {
      this.#logger?.(log_js_1.LogType.debug, `frameStartedNavigating ${url}, ${loaderId}`);
      if (this.#loaderIdToNavigationsMap.has(loaderId)) {
        return;
      }
      const pendingNavigation = this.#pendingNavigation ?? this.createPendingNavigation(url, true);
      pendingNavigation.url = url;
      pendingNavigation.start();
      pendingNavigation.loaderId = loaderId;
      this.#loaderIdToNavigationsMap.set(loaderId, pendingNavigation);
    }
    /**
     * In case of `beforeunload` handler, the pending navigation should be marked as started
     * for consistency, as the `browsingContext.navigationStarted` should be emitted before
     * user prompt.
     */
    beforeunload() {
      this.#logger?.(log_js_1.LogType.debug, `beforeunload`);
      if (this.#pendingNavigation === void 0) {
        this.#logger?.(log_js_1.LogType.debugError, `Unexpectedly no pending navigation on beforeunload`);
        return;
      }
      this.#pendingNavigation.start();
    }
    /**
     * If there is a navigation with the loaderId equals to the network request id, it means
     * that the navigation failed.
     */
    networkLoadingFailed(loaderId, errorText) {
      this.#loaderIdToNavigationsMap.get(loaderId)?.fail(errorText);
    }
  };
  NavigationTracker.NavigationTracker = NavigationTracker$1;
  return NavigationTracker;
}
var hasRequiredBrowsingContextImpl;
function requireBrowsingContextImpl() {
  if (hasRequiredBrowsingContextImpl) return BrowsingContextImpl;
  hasRequiredBrowsingContextImpl = 1;
  var _a;
  Object.defineProperty(BrowsingContextImpl, "__esModule", { value: true });
  BrowsingContextImpl.BrowsingContextImpl = void 0;
  BrowsingContextImpl.serializeOrigin = serializeOrigin;
  const protocol_js_1 = requireProtocol();
  const assert_js_1 = requireAssert();
  const Deferred_js_1 = requireDeferred();
  const log_js_1 = requireLog();
  const time_js_1 = requireTime();
  const unitConversions_js_1 = requireUnitConversions();
  const WindowRealm_js_1 = requireWindowRealm();
  const NavigationTracker_js_1 = requireNavigationTracker();
  let BrowsingContextImpl$1 = class BrowsingContextImpl {
    static LOGGER_PREFIX = `${log_js_1.LogType.debug}:browsingContext`;
    /** Direct children browsing contexts. */
    #children = /* @__PURE__ */ new Set();
    /** The ID of this browsing context. */
    #id;
    userContext;
    /**
     * The ID of the parent browsing context.
     * If null, this is a top-level context.
     */
    #loaderId;
    #parentId = null;
    // Keeps track of the previously set viewport.
    #previousViewport = { width: 0, height: 0 };
    #originalOpener;
    #lifecycle = {
      DOMContentLoaded: new Deferred_js_1.Deferred(),
      load: new Deferred_js_1.Deferred()
    };
    #cdpTarget;
    #defaultRealmDeferred = new Deferred_js_1.Deferred();
    #browsingContextStorage;
    #eventManager;
    #logger;
    #navigationTracker;
    #realmStorage;
    // The deferred will be resolved when the default realm is created.
    #unhandledPromptBehavior;
    // Set when the user prompt is opened. Required to provide the type in closing event.
    #lastUserPromptType;
    constructor(id, parentId, userContext, cdpTarget, eventManager, browsingContextStorage, realmStorage, url, originalOpener, unhandledPromptBehavior, logger2) {
      this.#cdpTarget = cdpTarget;
      this.#id = id;
      this.#parentId = parentId;
      this.userContext = userContext;
      this.#eventManager = eventManager;
      this.#browsingContextStorage = browsingContextStorage;
      this.#realmStorage = realmStorage;
      this.#unhandledPromptBehavior = unhandledPromptBehavior;
      this.#logger = logger2;
      this.#originalOpener = originalOpener;
      this.#navigationTracker = new NavigationTracker_js_1.NavigationTracker(url, id, eventManager, logger2);
    }
    static create(id, parentId, userContext, cdpTarget, eventManager, browsingContextStorage, realmStorage, url, originalOpener, unhandledPromptBehavior, logger2) {
      const context = new _a(id, parentId, userContext, cdpTarget, eventManager, browsingContextStorage, realmStorage, url, originalOpener, unhandledPromptBehavior, logger2);
      context.#initListeners();
      browsingContextStorage.addContext(context);
      if (!context.isTopLevelContext()) {
        context.parent.addChild(context.id);
      }
      eventManager.registerPromiseEvent(context.targetUnblockedOrThrow().then(() => {
        return {
          kind: "success",
          value: {
            type: "event",
            method: protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.ContextCreated,
            params: {
              ...context.serializeToBidiValue(),
              // Hack to provide the initial URL of the context, as it can be changed
              // between the page target is attached and unblocked, as the page is not
              // fully paused in MPArch session (https://crbug.com/372842894).
              // TODO: remove once https://crbug.com/372842894 is addressed.
              url
            }
          }
        };
      }, (error) => {
        return {
          kind: "error",
          error
        };
      }), context.id, protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.ContextCreated);
      return context;
    }
    /**
     * @see https://html.spec.whatwg.org/multipage/document-sequences.html#navigable
     */
    get navigableId() {
      return this.#loaderId;
    }
    get navigationId() {
      return this.#navigationTracker.currentNavigationId;
    }
    dispose(emitContextDestroyed) {
      this.#navigationTracker.dispose();
      this.#realmStorage.deleteRealms({
        browsingContextId: this.id
      });
      if (!this.isTopLevelContext()) {
        this.parent.#children.delete(this.id);
      }
      this.#failLifecycleIfNotFinished();
      if (emitContextDestroyed) {
        this.#eventManager.registerEvent({
          type: "event",
          method: protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.ContextDestroyed,
          params: this.serializeToBidiValue(null)
        }, this.id);
      }
      this.#deleteAllChildren();
      this.#eventManager.clearBufferedEvents(this.id);
      this.#browsingContextStorage.deleteContextById(this.id);
    }
    /** Returns the ID of this context. */
    get id() {
      return this.#id;
    }
    /** Returns the parent context ID. */
    get parentId() {
      return this.#parentId;
    }
    /** Sets the parent context ID and updates parent's children. */
    set parentId(parentId) {
      if (this.#parentId !== null) {
        this.#logger?.(log_js_1.LogType.debugError, "Parent context already set");
        return;
      }
      this.#parentId = parentId;
      if (!this.isTopLevelContext()) {
        this.parent.addChild(this.id);
      }
    }
    /** Returns the parent context. */
    get parent() {
      if (this.parentId === null) {
        return null;
      }
      return this.#browsingContextStorage.getContext(this.parentId);
    }
    /** Returns all direct children contexts. */
    get directChildren() {
      return [...this.#children].map((id) => this.#browsingContextStorage.getContext(id));
    }
    /** Returns all children contexts, flattened. */
    get allChildren() {
      const children = this.directChildren;
      return children.concat(...children.map((child) => child.allChildren));
    }
    /**
     * Returns true if this is a top-level context.
     * This is the case whenever the parent context ID is null.
     */
    isTopLevelContext() {
      return this.#parentId === null;
    }
    get top() {
      let topContext = this;
      let parent = topContext.parent;
      while (parent) {
        topContext = parent;
        parent = topContext.parent;
      }
      return topContext;
    }
    addChild(childId) {
      this.#children.add(childId);
    }
    #deleteAllChildren(emitContextDestroyed = false) {
      this.directChildren.map((child) => child.dispose(emitContextDestroyed));
    }
    get cdpTarget() {
      return this.#cdpTarget;
    }
    updateCdpTarget(cdpTarget) {
      this.#cdpTarget = cdpTarget;
      this.#initListeners();
    }
    get url() {
      return this.#navigationTracker.url;
    }
    async lifecycleLoaded() {
      await this.#lifecycle.load;
    }
    async targetUnblockedOrThrow() {
      const result = await this.#cdpTarget.unblocked;
      if (result.kind === "error") {
        throw result.error;
      }
    }
    async getOrCreateSandbox(sandbox) {
      if (sandbox === void 0 || sandbox === "") {
        return await this.#defaultRealmDeferred;
      }
      let maybeSandboxes = this.#realmStorage.findRealms({
        browsingContextId: this.id,
        sandbox
      });
      if (maybeSandboxes.length === 0) {
        await this.#cdpTarget.cdpClient.sendCommand("Page.createIsolatedWorld", {
          frameId: this.id,
          worldName: sandbox
        });
        maybeSandboxes = this.#realmStorage.findRealms({
          browsingContextId: this.id,
          sandbox
        });
        (0, assert_js_1.assert)(maybeSandboxes.length !== 0);
      }
      return maybeSandboxes[0];
    }
    /**
     * Implements https://w3c.github.io/webdriver-bidi/#get-the-navigable-info.
     */
    serializeToBidiValue(maxDepth = 0, addParentField = true) {
      return {
        context: this.#id,
        url: this.url,
        userContext: this.userContext,
        originalOpener: this.#originalOpener ?? null,
        // TODO(#2646): Implement Client Window correctly
        clientWindow: "",
        children: maxDepth === null || maxDepth > 0 ? this.directChildren.map((c2) => c2.serializeToBidiValue(maxDepth === null ? maxDepth : maxDepth - 1, false)) : null,
        ...addParentField ? { parent: this.#parentId } : {}
      };
    }
    onTargetInfoChanged(params) {
      this.#navigationTracker.onTargetInfoChanged(params.targetInfo.url);
    }
    #initListeners() {
      this.#cdpTarget.cdpClient.on("Network.loadingFailed", (params) => {
        this.#navigationTracker.networkLoadingFailed(params.requestId, params.errorText);
      });
      this.#cdpTarget.cdpClient.on("Page.frameNavigated", (params) => {
        if (this.id !== params.frame.id) {
          return;
        }
        this.#navigationTracker.frameNavigated(
          params.frame.url + (params.frame.urlFragment ?? ""),
          params.frame.loaderId,
          // `unreachableUrl` indicates if the navigation failed.
          params.frame.unreachableUrl
        );
        this.#deleteAllChildren();
        this.#documentChanged(params.frame.loaderId);
      });
      this.#cdpTarget.on("frameStartedNavigating", (params) => {
        this.#logger?.(log_js_1.LogType.debugInfo, `Received ${"frameStartedNavigating"} event`, params);
        const possibleFrameIds = [
          this.id,
          ...this.cdpTarget.id === this.id ? [void 0] : []
        ];
        if (!possibleFrameIds.includes(params.frameId)) {
          return;
        }
        this.#navigationTracker.frameStartedNavigating(params.url, params.loaderId);
      });
      this.#cdpTarget.cdpClient.on("Page.navigatedWithinDocument", (params) => {
        if (this.id !== params.frameId) {
          return;
        }
        this.#navigationTracker.navigatedWithinDocument(params.url, params.navigationType);
        if (params.navigationType === "historyApi") {
          this.#eventManager.registerEvent({
            type: "event",
            method: "browsingContext.historyUpdated",
            params: {
              context: this.id,
              url: this.#navigationTracker.url
            }
          }, this.id);
          return;
        }
      });
      this.#cdpTarget.cdpClient.on("Page.frameRequestedNavigation", (params) => {
        if (this.id !== params.frameId) {
          return;
        }
        this.#navigationTracker.frameRequestedNavigation(params.url);
      });
      this.#cdpTarget.cdpClient.on("Page.lifecycleEvent", (params) => {
        if (this.id !== params.frameId) {
          return;
        }
        if (params.name === "init") {
          this.#documentChanged(params.loaderId);
          return;
        }
        if (params.name === "commit") {
          this.#loaderId = params.loaderId;
          return;
        }
        if (!this.#loaderId) {
          this.#loaderId = params.loaderId;
        }
        if (params.loaderId !== this.#loaderId) {
          return;
        }
        switch (params.name) {
          case "DOMContentLoaded":
            if (!this.#navigationTracker.isInitialNavigation) {
              this.#eventManager.registerEvent({
                type: "event",
                method: protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.DomContentLoaded,
                params: {
                  context: this.id,
                  navigation: this.#navigationTracker.currentNavigationId,
                  timestamp: (0, time_js_1.getTimestamp)(),
                  url: this.#navigationTracker.url
                }
              }, this.id);
            }
            this.#lifecycle.DOMContentLoaded.resolve();
            break;
          case "load":
            if (!this.#navigationTracker.isInitialNavigation) {
              this.#eventManager.registerEvent({
                type: "event",
                method: protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.Load,
                params: {
                  context: this.id,
                  navigation: this.#navigationTracker.currentNavigationId,
                  timestamp: (0, time_js_1.getTimestamp)(),
                  url: this.#navigationTracker.url
                }
              }, this.id);
            }
            this.#navigationTracker.loadPageEvent(params.loaderId);
            this.#lifecycle.load.resolve();
            break;
        }
      });
      this.#cdpTarget.cdpClient.on("Runtime.executionContextCreated", (params) => {
        const { auxData, name, uniqueId, id } = params.context;
        if (!auxData || auxData.frameId !== this.id) {
          return;
        }
        let origin;
        let sandbox;
        switch (auxData.type) {
          case "isolated":
            sandbox = name;
            if (!this.#defaultRealmDeferred.isFinished) {
              this.#logger?.(log_js_1.LogType.debugError, "Unexpectedly, isolated realm created before the default one");
            }
            origin = this.#defaultRealmDeferred.isFinished ? this.#defaultRealmDeferred.result.origin : (
              // This fallback is not expected to be ever reached.
              ""
            );
            break;
          case "default":
            origin = serializeOrigin(params.context.origin);
            break;
          default:
            return;
        }
        const realm = new WindowRealm_js_1.WindowRealm(this.id, this.#browsingContextStorage, this.#cdpTarget.cdpClient, this.#eventManager, id, this.#logger, origin, uniqueId, this.#realmStorage, sandbox);
        if (auxData.isDefault) {
          this.#defaultRealmDeferred.resolve(realm);
          void Promise.all(this.#cdpTarget.getChannels().map((channel) => channel.startListenerFromWindow(realm, this.#eventManager)));
        }
      });
      this.#cdpTarget.cdpClient.on("Runtime.executionContextDestroyed", (params) => {
        if (this.#defaultRealmDeferred.isFinished && this.#defaultRealmDeferred.result.executionContextId === params.executionContextId) {
          this.#defaultRealmDeferred = new Deferred_js_1.Deferred();
        }
        this.#realmStorage.deleteRealms({
          cdpSessionId: this.#cdpTarget.cdpSessionId,
          executionContextId: params.executionContextId
        });
      });
      this.#cdpTarget.cdpClient.on("Runtime.executionContextsCleared", () => {
        if (!this.#defaultRealmDeferred.isFinished) {
          this.#defaultRealmDeferred.reject(new protocol_js_1.UnknownErrorException("execution contexts cleared"));
        }
        this.#defaultRealmDeferred = new Deferred_js_1.Deferred();
        this.#realmStorage.deleteRealms({
          cdpSessionId: this.#cdpTarget.cdpSessionId
        });
      });
      this.#cdpTarget.cdpClient.on("Page.javascriptDialogClosed", (params) => {
        const accepted = params.result;
        if (this.#lastUserPromptType === void 0) {
          this.#logger?.(log_js_1.LogType.debugError, "Unexpectedly no opening prompt event before closing one");
        }
        this.#eventManager.registerEvent({
          type: "event",
          method: protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.UserPromptClosed,
          params: {
            context: this.id,
            accepted,
            // `lastUserPromptType` should never be undefined here, so fallback to
            // `UNKNOWN`. The fallback is required to prevent tests from hanging while
            // waiting for the closing event. The cast is required, as the `UNKNOWN` value
            // is not standard.
            type: this.#lastUserPromptType ?? "UNKNOWN",
            userText: accepted && params.userInput ? params.userInput : void 0
          }
        }, this.id);
        this.#lastUserPromptType = void 0;
      });
      this.#cdpTarget.cdpClient.on("Page.javascriptDialogOpening", (params) => {
        const promptType = _a.#getPromptType(params.type);
        if (params.type === "beforeunload") {
          this.#navigationTracker.beforeunload();
        }
        this.#lastUserPromptType = promptType;
        const promptHandler = this.#getPromptHandler(promptType);
        this.#eventManager.registerEvent({
          type: "event",
          method: protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.UserPromptOpened,
          params: {
            context: this.id,
            handler: promptHandler,
            type: promptType,
            message: params.message,
            ...params.type === "prompt" ? { defaultValue: params.defaultPrompt } : {}
          }
        }, this.id);
        switch (promptHandler) {
          // Based on `unhandledPromptBehavior`, check if the prompt should be handled
          // automatically (`accept`, `dismiss`) or wait for the user to do it.
          case "accept":
            void this.handleUserPrompt(true);
            break;
          case "dismiss":
            void this.handleUserPrompt(false);
            break;
        }
      });
    }
    static #getPromptType(cdpType) {
      switch (cdpType) {
        case "alert":
          return "alert";
        case "beforeunload":
          return "beforeunload";
        case "confirm":
          return "confirm";
        case "prompt":
          return "prompt";
      }
    }
    #getPromptHandler(promptType) {
      const defaultPromptHandler = "dismiss";
      switch (promptType) {
        case "alert":
          return this.#unhandledPromptBehavior?.alert ?? this.#unhandledPromptBehavior?.default ?? defaultPromptHandler;
        case "beforeunload":
          return this.#unhandledPromptBehavior?.beforeUnload ?? this.#unhandledPromptBehavior?.default ?? "accept";
        case "confirm":
          return this.#unhandledPromptBehavior?.confirm ?? this.#unhandledPromptBehavior?.default ?? defaultPromptHandler;
        case "prompt":
          return this.#unhandledPromptBehavior?.prompt ?? this.#unhandledPromptBehavior?.default ?? defaultPromptHandler;
      }
    }
    #documentChanged(loaderId) {
      if (loaderId === void 0 || this.#loaderId === loaderId) {
        return;
      }
      this.#resetLifecycleIfFinished();
      this.#loaderId = loaderId;
      this.#deleteAllChildren(true);
    }
    #resetLifecycleIfFinished() {
      if (this.#lifecycle.DOMContentLoaded.isFinished) {
        this.#lifecycle.DOMContentLoaded = new Deferred_js_1.Deferred();
      } else {
        this.#logger?.(_a.LOGGER_PREFIX, "Document changed (DOMContentLoaded)");
      }
      if (this.#lifecycle.load.isFinished) {
        this.#lifecycle.load = new Deferred_js_1.Deferred();
      } else {
        this.#logger?.(_a.LOGGER_PREFIX, "Document changed (load)");
      }
    }
    #failLifecycleIfNotFinished() {
      if (!this.#lifecycle.DOMContentLoaded.isFinished) {
        this.#lifecycle.DOMContentLoaded.reject(new protocol_js_1.UnknownErrorException("navigation canceled"));
      }
      if (!this.#lifecycle.load.isFinished) {
        this.#lifecycle.load.reject(new protocol_js_1.UnknownErrorException("navigation canceled"));
      }
    }
    async navigate(url, wait) {
      try {
        new URL(url);
      } catch {
        throw new protocol_js_1.InvalidArgumentException(`Invalid URL: ${url}`);
      }
      const navigationState = this.#navigationTracker.createPendingNavigation(url);
      const cdpNavigatePromise = (async () => {
        const cdpNavigateResult = await this.#cdpTarget.cdpClient.sendCommand("Page.navigate", {
          url,
          frameId: this.id
        });
        if (cdpNavigateResult.errorText) {
          this.#navigationTracker.failNavigation(navigationState, cdpNavigateResult.errorText);
          throw new protocol_js_1.UnknownErrorException(cdpNavigateResult.errorText);
        }
        this.#navigationTracker.navigationCommandFinished(navigationState, cdpNavigateResult.loaderId);
        this.#documentChanged(cdpNavigateResult.loaderId);
      })();
      const result = await Promise.race([
        // No `loaderId` means same-document navigation.
        this.#waitNavigation(wait, cdpNavigatePromise, navigationState),
        // Throw an error if the navigation is canceled.
        navigationState.finished
      ]);
      if (result instanceof NavigationTracker_js_1.NavigationResult) {
        if (
          // TODO: check after decision on the spec is done:
          //  https://github.com/w3c/webdriver-bidi/issues/799.
          result.eventName === "browsingContext.navigationAborted" || result.eventName === "browsingContext.navigationFailed"
        ) {
          throw new protocol_js_1.UnknownErrorException(result.message ?? "unknown exception");
        }
      }
      return {
        navigation: navigationState.navigationId,
        // Url can change due to redirects. Get the one from commandNavigation.
        url: navigationState.url
      };
    }
    async #waitNavigation(wait, cdpCommandPromise, navigationState) {
      await Promise.all([navigationState.committed, cdpCommandPromise]);
      if (wait === "none") {
        return;
      }
      if (navigationState.isFragmentNavigation === true) {
        await navigationState.finished;
        return;
      }
      if (wait === "interactive") {
        await this.#lifecycle.DOMContentLoaded;
        return;
      }
      if (wait === "complete") {
        await this.#lifecycle.load;
        return;
      }
      throw new protocol_js_1.InvalidArgumentException(`Wait condition ${wait} is not supported`);
    }
    // TODO: support concurrent navigations analogous to `navigate`.
    async reload(ignoreCache, wait) {
      await this.targetUnblockedOrThrow();
      this.#resetLifecycleIfFinished();
      const navigationState = this.#navigationTracker.createPendingNavigation(this.#navigationTracker.url);
      const cdpReloadPromise = this.#cdpTarget.cdpClient.sendCommand("Page.reload", {
        ignoreCache
      });
      const result = await Promise.race([
        // No `loaderId` means same-document navigation.
        this.#waitNavigation(wait, cdpReloadPromise, navigationState),
        // Throw an error if the navigation is canceled.
        navigationState.finished
      ]);
      if (result instanceof NavigationTracker_js_1.NavigationResult) {
        if (result.eventName === "browsingContext.navigationAborted" || result.eventName === "browsingContext.navigationFailed") {
          throw new protocol_js_1.UnknownErrorException(result.message ?? "unknown exception");
        }
      }
      return {
        navigation: navigationState.navigationId,
        // Url can change due to redirects. Get the one from commandNavigation.
        url: navigationState.url
      };
    }
    async setViewport(viewport, devicePixelRatio) {
      if (viewport === null && devicePixelRatio === null) {
        await this.#cdpTarget.cdpClient.sendCommand("Emulation.clearDeviceMetricsOverride");
      } else {
        try {
          let appliedViewport;
          if (viewport === void 0) {
            appliedViewport = this.#previousViewport;
          } else if (viewport === null) {
            appliedViewport = {
              width: 0,
              height: 0
            };
          } else {
            appliedViewport = viewport;
          }
          this.#previousViewport = appliedViewport;
          await this.#cdpTarget.cdpClient.sendCommand("Emulation.setDeviceMetricsOverride", {
            width: this.#previousViewport.width,
            height: this.#previousViewport.height,
            deviceScaleFactor: devicePixelRatio ? devicePixelRatio : 0,
            mobile: false,
            dontSetVisibleSize: true
          });
        } catch (err) {
          if (err.message.startsWith(
            // https://crsrc.org/c/content/browser/devtools/protocol/emulation_handler.cc;l=257;drc=2f6eee84cf98d4227e7c41718dd71b82f26d90ff
            "Width and height values must be positive"
          )) {
            throw new protocol_js_1.UnsupportedOperationException("Provided viewport dimensions are not supported");
          }
          throw err;
        }
      }
    }
    async handleUserPrompt(accept, userText) {
      await this.#cdpTarget.cdpClient.sendCommand("Page.handleJavaScriptDialog", {
        accept: accept ?? true,
        promptText: userText
      });
    }
    async activate() {
      await this.#cdpTarget.cdpClient.sendCommand("Page.bringToFront");
    }
    async captureScreenshot(params) {
      if (!this.isTopLevelContext()) {
        throw new protocol_js_1.UnsupportedOperationException(`Non-top-level 'context' (${params.context}) is currently not supported`);
      }
      const formatParameters = getImageFormatParameters(params);
      let captureBeyondViewport = false;
      let script;
      params.origin ??= "viewport";
      switch (params.origin) {
        case "document": {
          script = String(() => {
            const element = document.documentElement;
            return {
              x: 0,
              y: 0,
              width: element.scrollWidth,
              height: element.scrollHeight
            };
          });
          captureBeyondViewport = true;
          break;
        }
        case "viewport": {
          script = String(() => {
            const viewport = window.visualViewport;
            return {
              x: viewport.pageLeft,
              y: viewport.pageTop,
              width: viewport.width,
              height: viewport.height
            };
          });
          break;
        }
      }
      const realm = await this.getOrCreateSandbox(void 0);
      const originResult = await realm.callFunction(script, false);
      (0, assert_js_1.assert)(originResult.type === "success");
      const origin = deserializeDOMRect(originResult.result);
      (0, assert_js_1.assert)(origin);
      let rect = origin;
      if (params.clip) {
        const clip = params.clip;
        if (params.origin === "viewport" && clip.type === "box") {
          clip.x += origin.x;
          clip.y += origin.y;
        }
        rect = getIntersectionRect(await this.#parseRect(clip), origin);
      }
      if (rect.width === 0 || rect.height === 0) {
        throw new protocol_js_1.UnableToCaptureScreenException(`Unable to capture screenshot with zero dimensions: width=${rect.width}, height=${rect.height}`);
      }
      return await this.#cdpTarget.cdpClient.sendCommand("Page.captureScreenshot", {
        clip: { ...rect, scale: 1 },
        ...formatParameters,
        captureBeyondViewport
      });
    }
    async print(params) {
      if (!this.isTopLevelContext()) {
        throw new protocol_js_1.UnsupportedOperationException("Printing of non-top level contexts is not supported");
      }
      const cdpParams = {};
      if (params.background !== void 0) {
        cdpParams.printBackground = params.background;
      }
      if (params.margin?.bottom !== void 0) {
        cdpParams.marginBottom = (0, unitConversions_js_1.inchesFromCm)(params.margin.bottom);
      }
      if (params.margin?.left !== void 0) {
        cdpParams.marginLeft = (0, unitConversions_js_1.inchesFromCm)(params.margin.left);
      }
      if (params.margin?.right !== void 0) {
        cdpParams.marginRight = (0, unitConversions_js_1.inchesFromCm)(params.margin.right);
      }
      if (params.margin?.top !== void 0) {
        cdpParams.marginTop = (0, unitConversions_js_1.inchesFromCm)(params.margin.top);
      }
      if (params.orientation !== void 0) {
        cdpParams.landscape = params.orientation === "landscape";
      }
      if (params.page?.height !== void 0) {
        cdpParams.paperHeight = (0, unitConversions_js_1.inchesFromCm)(params.page.height);
      }
      if (params.page?.width !== void 0) {
        cdpParams.paperWidth = (0, unitConversions_js_1.inchesFromCm)(params.page.width);
      }
      if (params.pageRanges !== void 0) {
        for (const range of params.pageRanges) {
          if (typeof range === "number") {
            continue;
          }
          const rangeParts = range.split("-");
          if (rangeParts.length < 1 || rangeParts.length > 2) {
            throw new protocol_js_1.InvalidArgumentException(`Invalid page range: ${range} is not a valid integer range.`);
          }
          if (rangeParts.length === 1) {
            void parseInteger(rangeParts[0] ?? "");
            continue;
          }
          let lowerBound;
          let upperBound;
          const [rangeLowerPart = "", rangeUpperPart = ""] = rangeParts;
          if (rangeLowerPart === "") {
            lowerBound = 1;
          } else {
            lowerBound = parseInteger(rangeLowerPart);
          }
          if (rangeUpperPart === "") {
            upperBound = Number.MAX_SAFE_INTEGER;
          } else {
            upperBound = parseInteger(rangeUpperPart);
          }
          if (lowerBound > upperBound) {
            throw new protocol_js_1.InvalidArgumentException(`Invalid page range: ${rangeLowerPart} > ${rangeUpperPart}`);
          }
        }
        cdpParams.pageRanges = params.pageRanges.join(",");
      }
      if (params.scale !== void 0) {
        cdpParams.scale = params.scale;
      }
      if (params.shrinkToFit !== void 0) {
        cdpParams.preferCSSPageSize = !params.shrinkToFit;
      }
      try {
        const result = await this.#cdpTarget.cdpClient.sendCommand("Page.printToPDF", cdpParams);
        return {
          data: result.data
        };
      } catch (error) {
        if (error.message === "invalid print parameters: content area is empty") {
          throw new protocol_js_1.UnsupportedOperationException(error.message);
        }
        throw error;
      }
    }
    /**
     * See
     * https://w3c.github.io/webdriver-bidi/#:~:text=If%20command%20parameters%20contains%20%22clip%22%3A
     */
    async #parseRect(clip) {
      switch (clip.type) {
        case "box":
          return { x: clip.x, y: clip.y, width: clip.width, height: clip.height };
        case "element": {
          const sandbox = await this.getOrCreateSandbox(void 0);
          const result = await sandbox.callFunction(String((element) => {
            return element instanceof Element;
          }), false, { type: "undefined" }, [clip.element]);
          if (result.type === "exception") {
            throw new protocol_js_1.NoSuchElementException(`Element '${clip.element.sharedId}' was not found`);
          }
          (0, assert_js_1.assert)(result.result.type === "boolean");
          if (!result.result.value) {
            throw new protocol_js_1.NoSuchElementException(`Node '${clip.element.sharedId}' is not an Element`);
          }
          {
            const result2 = await sandbox.callFunction(String((element) => {
              const rect2 = element.getBoundingClientRect();
              return {
                x: rect2.x,
                y: rect2.y,
                height: rect2.height,
                width: rect2.width
              };
            }), false, { type: "undefined" }, [clip.element]);
            (0, assert_js_1.assert)(result2.type === "success");
            const rect = deserializeDOMRect(result2.result);
            if (!rect) {
              throw new protocol_js_1.UnableToCaptureScreenException(`Could not get bounding box for Element '${clip.element.sharedId}'`);
            }
            return rect;
          }
        }
      }
    }
    async close() {
      await this.#cdpTarget.cdpClient.sendCommand("Page.close");
    }
    async traverseHistory(delta) {
      if (delta === 0) {
        return;
      }
      const history = await this.#cdpTarget.cdpClient.sendCommand("Page.getNavigationHistory");
      const entry = history.entries[history.currentIndex + delta];
      if (!entry) {
        throw new protocol_js_1.NoSuchHistoryEntryException(`No history entry at delta ${delta}`);
      }
      await this.#cdpTarget.cdpClient.sendCommand("Page.navigateToHistoryEntry", {
        entryId: entry.id
      });
    }
    async toggleModulesIfNeeded() {
      await Promise.all([
        this.#cdpTarget.toggleNetworkIfNeeded(),
        this.#cdpTarget.toggleDeviceAccessIfNeeded()
      ]);
    }
    async locateNodes(params) {
      return await this.#locateNodesByLocator(await this.#defaultRealmDeferred, params.locator, params.startNodes ?? [], params.maxNodeCount, params.serializationOptions);
    }
    async #getLocatorDelegate(realm, locator2, maxNodeCount, startNodes) {
      switch (locator2.type) {
        case "context":
          throw new Error("Unreachable");
        case "css":
          return {
            functionDeclaration: String((cssSelector, maxNodeCount2, ...startNodes2) => {
              const locateNodesUsingCss = (element) => {
                if (!(element instanceof HTMLElement || element instanceof Document || element instanceof DocumentFragment)) {
                  throw new Error("startNodes in css selector should be HTMLElement, Document or DocumentFragment");
                }
                return [...element.querySelectorAll(cssSelector)];
              };
              startNodes2 = startNodes2.length > 0 ? startNodes2 : [document];
              const returnedNodes = startNodes2.map((startNode) => (
                // TODO: stop search early if `maxNodeCount` is reached.
                locateNodesUsingCss(startNode)
              )).flat(1);
              return maxNodeCount2 === 0 ? returnedNodes : returnedNodes.slice(0, maxNodeCount2);
            }),
            argumentsLocalValues: [
              // `cssSelector`
              { type: "string", value: locator2.value },
              // `maxNodeCount` with `0` means no limit.
              { type: "number", value: maxNodeCount ?? 0 },
              // `startNodes`
              ...startNodes
            ]
          };
        case "xpath":
          return {
            functionDeclaration: String((xPathSelector, maxNodeCount2, ...startNodes2) => {
              const evaluator = new XPathEvaluator();
              const expression = evaluator.createExpression(xPathSelector);
              const locateNodesUsingXpath = (element) => {
                const xPathResult = expression.evaluate(element, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE);
                const returnedNodes2 = [];
                for (let i = 0; i < xPathResult.snapshotLength; i++) {
                  returnedNodes2.push(xPathResult.snapshotItem(i));
                }
                return returnedNodes2;
              };
              startNodes2 = startNodes2.length > 0 ? startNodes2 : [document];
              const returnedNodes = startNodes2.map((startNode) => (
                // TODO: stop search early if `maxNodeCount` is reached.
                locateNodesUsingXpath(startNode)
              )).flat(1);
              return maxNodeCount2 === 0 ? returnedNodes : returnedNodes.slice(0, maxNodeCount2);
            }),
            argumentsLocalValues: [
              // `xPathSelector`
              { type: "string", value: locator2.value },
              // `maxNodeCount` with `0` means no limit.
              { type: "number", value: maxNodeCount ?? 0 },
              // `startNodes`
              ...startNodes
            ]
          };
        case "innerText":
          if (locator2.value === "") {
            throw new protocol_js_1.InvalidSelectorException("innerText locator cannot be empty");
          }
          return {
            functionDeclaration: String((innerTextSelector, fullMatch, ignoreCase, maxNodeCount2, maxDepth, ...startNodes2) => {
              const searchText = ignoreCase ? innerTextSelector.toUpperCase() : innerTextSelector;
              const locateNodesUsingInnerText = (node, currentMaxDepth) => {
                const returnedNodes2 = [];
                if (node instanceof DocumentFragment || node instanceof Document) {
                  const children = [...node.children];
                  children.forEach((child) => (
                    // `currentMaxDepth` is not decremented intentionally according to
                    // https://github.com/w3c/webdriver-bidi/pull/713.
                    returnedNodes2.push(...locateNodesUsingInnerText(child, currentMaxDepth))
                  ));
                  return returnedNodes2;
                }
                if (!(node instanceof HTMLElement)) {
                  return [];
                }
                const element = node;
                const nodeInnerText = ignoreCase ? element.innerText?.toUpperCase() : element.innerText;
                if (!nodeInnerText.includes(searchText)) {
                  return [];
                }
                const childNodes = [];
                for (const child of element.children) {
                  if (child instanceof HTMLElement) {
                    childNodes.push(child);
                  }
                }
                if (childNodes.length === 0) {
                  if (fullMatch && nodeInnerText === searchText) {
                    returnedNodes2.push(element);
                  } else {
                    if (!fullMatch) {
                      returnedNodes2.push(element);
                    }
                  }
                } else {
                  const childNodeMatches = (
                    // Don't search deeper if `maxDepth` is reached.
                    currentMaxDepth <= 0 ? [] : childNodes.map((child) => locateNodesUsingInnerText(child, currentMaxDepth - 1)).flat(1)
                  );
                  if (childNodeMatches.length === 0) {
                    if (!fullMatch || nodeInnerText === searchText) {
                      returnedNodes2.push(element);
                    }
                  } else {
                    returnedNodes2.push(...childNodeMatches);
                  }
                }
                return returnedNodes2;
              };
              startNodes2 = startNodes2.length > 0 ? startNodes2 : [document];
              const returnedNodes = startNodes2.map((startNode) => (
                // TODO: stop search early if `maxNodeCount` is reached.
                locateNodesUsingInnerText(startNode, maxDepth)
              )).flat(1);
              return maxNodeCount2 === 0 ? returnedNodes : returnedNodes.slice(0, maxNodeCount2);
            }),
            argumentsLocalValues: [
              // `innerTextSelector`
              { type: "string", value: locator2.value },
              // `fullMatch` with default `true`.
              { type: "boolean", value: locator2.matchType !== "partial" },
              // `ignoreCase` with default `false`.
              { type: "boolean", value: locator2.ignoreCase === true },
              // `maxNodeCount` with `0` means no limit.
              { type: "number", value: maxNodeCount ?? 0 },
              // `maxDepth` with default `1000` (same as default full serialization depth).
              { type: "number", value: locator2.maxDepth ?? 1e3 },
              // `startNodes`
              ...startNodes
            ]
          };
        case "accessibility": {
          if (!locator2.value.name && !locator2.value.role) {
            throw new protocol_js_1.InvalidSelectorException("Either name or role has to be specified");
          }
          await Promise.all([
            this.#cdpTarget.cdpClient.sendCommand("Accessibility.enable"),
            this.#cdpTarget.cdpClient.sendCommand("Accessibility.getRootAXNode")
          ]);
          const bindings = await realm.evaluate(
            /* expression=*/
            "({getAccessibleName, getAccessibleRole})",
            /* awaitPromise=*/
            false,
            "root",
            /* serializationOptions= */
            void 0,
            /* userActivation=*/
            false,
            /* includeCommandLineApi=*/
            true
          );
          if (bindings.type !== "success") {
            throw new Error("Could not get bindings");
          }
          if (bindings.result.type !== "object") {
            throw new Error("Could not get bindings");
          }
          return {
            functionDeclaration: String((name, role, bindings2, maxNodeCount2, ...startNodes2) => {
              const returnedNodes = [];
              let aborted = false;
              function collect(contextNodes, selector) {
                if (aborted) {
                  return;
                }
                for (const contextNode of contextNodes) {
                  let match = true;
                  if (selector.role) {
                    const role2 = bindings2.getAccessibleRole(contextNode);
                    if (selector.role !== role2) {
                      match = false;
                    }
                  }
                  if (selector.name) {
                    const name2 = bindings2.getAccessibleName(contextNode);
                    if (selector.name !== name2) {
                      match = false;
                    }
                  }
                  if (match) {
                    if (maxNodeCount2 !== 0 && returnedNodes.length === maxNodeCount2) {
                      aborted = true;
                      break;
                    }
                    returnedNodes.push(contextNode);
                  }
                  const childNodes = [];
                  for (const child of contextNode.children) {
                    if (child instanceof HTMLElement) {
                      childNodes.push(child);
                    }
                  }
                  collect(childNodes, selector);
                }
              }
              startNodes2 = startNodes2.length > 0 ? startNodes2 : Array.from(document.documentElement.children).filter((c2) => c2 instanceof HTMLElement);
              collect(startNodes2, {
                role,
                name
              });
              return returnedNodes;
            }),
            argumentsLocalValues: [
              // `name`
              { type: "string", value: locator2.value.name || "" },
              // `role`
              { type: "string", value: locator2.value.role || "" },
              // `bindings`.
              { handle: bindings.result.handle },
              // `maxNodeCount` with `0` means no limit.
              { type: "number", value: maxNodeCount ?? 0 },
              // `startNodes`
              ...startNodes
            ]
          };
        }
      }
    }
    async #locateNodesByLocator(realm, locator2, startNodes, maxNodeCount, serializationOptions) {
      if (locator2.type === "context") {
        if (startNodes.length !== 0) {
          throw new protocol_js_1.InvalidArgumentException("Start nodes are not supported");
        }
        const contextId = locator2.value.context;
        if (!contextId) {
          throw new protocol_js_1.InvalidSelectorException("Invalid context");
        }
        const context = this.#browsingContextStorage.getContext(contextId);
        const parent = context.parent;
        if (!parent) {
          throw new protocol_js_1.InvalidArgumentException("This context has no container");
        }
        try {
          const { backendNodeId } = await parent.#cdpTarget.cdpClient.sendCommand("DOM.getFrameOwner", {
            frameId: contextId
          });
          const { object } = await parent.#cdpTarget.cdpClient.sendCommand("DOM.resolveNode", {
            backendNodeId
          });
          const locatorResult2 = await realm.callFunction(`function () { return this; }`, false, { handle: object.objectId }, [], "none", serializationOptions);
          if (locatorResult2.type === "exception") {
            throw new Error("Unknown exception");
          }
          return { nodes: [locatorResult2.result] };
        } catch {
          throw new protocol_js_1.InvalidArgumentException("Context does not exist");
        }
      }
      const locatorDelegate = await this.#getLocatorDelegate(realm, locator2, maxNodeCount, startNodes);
      serializationOptions = {
        ...serializationOptions,
        // The returned object is an array of nodes, so no need in deeper JS serialization.
        maxObjectDepth: 1
      };
      const locatorResult = await realm.callFunction(locatorDelegate.functionDeclaration, false, { type: "undefined" }, locatorDelegate.argumentsLocalValues, "none", serializationOptions);
      if (locatorResult.type !== "success") {
        this.#logger?.(_a.LOGGER_PREFIX, "Failed locateNodesByLocator", locatorResult);
        if (
          // CSS selector.
          locatorResult.exceptionDetails.text?.endsWith("is not a valid selector.") || // XPath selector.
          locatorResult.exceptionDetails.text?.endsWith("is not a valid XPath expression.")
        ) {
          throw new protocol_js_1.InvalidSelectorException(`Not valid selector ${typeof locator2.value === "string" ? locator2.value : JSON.stringify(locator2.value)}`);
        }
        if (locatorResult.exceptionDetails.text === "Error: startNodes in css selector should be HTMLElement, Document or DocumentFragment") {
          throw new protocol_js_1.InvalidArgumentException("startNodes in css selector should be HTMLElement, Document or DocumentFragment");
        }
        throw new protocol_js_1.UnknownErrorException(`Unexpected error in selector script: ${locatorResult.exceptionDetails.text}`);
      }
      if (locatorResult.result.type !== "array") {
        throw new protocol_js_1.UnknownErrorException(`Unexpected selector script result type: ${locatorResult.result.type}`);
      }
      const nodes = locatorResult.result.value.map((value) => {
        if (value.type !== "node") {
          throw new protocol_js_1.UnknownErrorException(`Unexpected selector script result element: ${value.type}`);
        }
        return value;
      });
      return { nodes };
    }
  };
  BrowsingContextImpl.BrowsingContextImpl = BrowsingContextImpl$1;
  _a = BrowsingContextImpl$1;
  function serializeOrigin(origin) {
    if (["://", ""].includes(origin)) {
      origin = "null";
    }
    return origin;
  }
  function getImageFormatParameters(params) {
    const { quality, type } = params.format ?? {
      type: "image/png"
    };
    switch (type) {
      case "image/png": {
        return { format: "png" };
      }
      case "image/jpeg": {
        return {
          format: "jpeg",
          ...quality === void 0 ? {} : { quality: Math.round(quality * 100) }
        };
      }
      case "image/webp": {
        return {
          format: "webp",
          ...quality === void 0 ? {} : { quality: Math.round(quality * 100) }
        };
      }
    }
    throw new protocol_js_1.InvalidArgumentException(`Image format '${type}' is not a supported format`);
  }
  function deserializeDOMRect(result) {
    if (result.type !== "object" || result.value === void 0) {
      return;
    }
    const x2 = result.value.find(([key]) => {
      return key === "x";
    })?.[1];
    const y2 = result.value.find(([key]) => {
      return key === "y";
    })?.[1];
    const height = result.value.find(([key]) => {
      return key === "height";
    })?.[1];
    const width = result.value.find(([key]) => {
      return key === "width";
    })?.[1];
    if (x2?.type !== "number" || y2?.type !== "number" || height?.type !== "number" || width?.type !== "number") {
      return;
    }
    return {
      x: x2.value,
      y: y2.value,
      width: width.value,
      height: height.value
    };
  }
  function normalizeRect(box) {
    return {
      ...box.width < 0 ? {
        x: box.x + box.width,
        width: -box.width
      } : {
        x: box.x,
        width: box.width
      },
      ...box.height < 0 ? {
        y: box.y + box.height,
        height: -box.height
      } : {
        y: box.y,
        height: box.height
      }
    };
  }
  function getIntersectionRect(first, second) {
    first = normalizeRect(first);
    second = normalizeRect(second);
    const x2 = Math.max(first.x, second.x);
    const y2 = Math.max(first.y, second.y);
    return {
      x: x2,
      y: y2,
      width: Math.max(Math.min(first.x + first.width, second.x + second.width) - x2, 0),
      height: Math.max(Math.min(first.y + first.height, second.y + second.height) - y2, 0)
    };
  }
  function parseInteger(value) {
    value = value.trim();
    if (!/^[0-9]+$/.test(value)) {
      throw new protocol_js_1.InvalidArgumentException(`Invalid integer: ${value}`);
    }
    return parseInt(value);
  }
  return BrowsingContextImpl;
}
var WorkerRealm = {};
var hasRequiredWorkerRealm;
function requireWorkerRealm() {
  if (hasRequiredWorkerRealm) return WorkerRealm;
  hasRequiredWorkerRealm = 1;
  Object.defineProperty(WorkerRealm, "__esModule", { value: true });
  WorkerRealm.WorkerRealm = void 0;
  const Realm_js_1 = requireRealm();
  let WorkerRealm$1 = class WorkerRealm extends Realm_js_1.Realm {
    #realmType;
    #ownerRealms;
    constructor(cdpClient, eventManager, executionContextId, logger2, origin, ownerRealms, realmId, realmStorage, realmType) {
      super(cdpClient, eventManager, executionContextId, logger2, origin, realmId, realmStorage);
      this.#ownerRealms = ownerRealms;
      this.#realmType = realmType;
      this.initialize();
    }
    get associatedBrowsingContexts() {
      return this.#ownerRealms.flatMap((realm) => realm.associatedBrowsingContexts);
    }
    get realmType() {
      return this.#realmType;
    }
    get source() {
      return {
        realm: this.realmId,
        // This is a hack to make Puppeteer able to track workers.
        // TODO: remove after Puppeteer tracks workers by owners and use the base version.
        context: this.associatedBrowsingContexts[0]?.id
      };
    }
    get realmInfo() {
      const owners = this.#ownerRealms.map((realm) => realm.realmId);
      const { realmType } = this;
      switch (realmType) {
        case "dedicated-worker": {
          const owner = owners[0];
          if (owner === void 0 || owners.length !== 1) {
            throw new Error("Dedicated worker must have exactly one owner");
          }
          return {
            ...this.baseInfo,
            type: realmType,
            owners: [owner]
          };
        }
        case "service-worker":
        case "shared-worker": {
          return {
            ...this.baseInfo,
            type: realmType
          };
        }
      }
    }
  };
  WorkerRealm.WorkerRealm = WorkerRealm$1;
  return WorkerRealm;
}
var CdpTarget = {};
var LogManager = {};
var logHelper = {};
var hasRequiredLogHelper;
function requireLogHelper() {
  if (hasRequiredLogHelper) return logHelper;
  hasRequiredLogHelper = 1;
  Object.defineProperty(logHelper, "__esModule", { value: true });
  logHelper.logMessageFormatter = logMessageFormatter;
  logHelper.getRemoteValuesText = getRemoteValuesText;
  const assert_js_1 = requireAssert();
  const specifiers = ["%s", "%d", "%i", "%f", "%o", "%O", "%c"];
  function isFormatSpecifier(str) {
    return specifiers.some((spec) => str.includes(spec));
  }
  function logMessageFormatter(args) {
    let output2 = "";
    const argFormat = args[0].value.toString();
    const argValues = args.slice(1, void 0);
    const tokens = argFormat.split(new RegExp(specifiers.map((spec) => `(${spec})`).join("|"), "g"));
    for (const token of tokens) {
      if (token === void 0 || token === "") {
        continue;
      }
      if (isFormatSpecifier(token)) {
        const arg = argValues.shift();
        (0, assert_js_1.assert)(arg, `Less value is provided: "${getRemoteValuesText(args, false)}"`);
        if (token === "%s") {
          output2 += stringFromArg(arg);
        } else if (token === "%d" || token === "%i") {
          if (arg.type === "bigint" || arg.type === "number" || arg.type === "string") {
            output2 += parseInt(arg.value.toString(), 10);
          } else {
            output2 += "NaN";
          }
        } else if (token === "%f") {
          if (arg.type === "bigint" || arg.type === "number" || arg.type === "string") {
            output2 += parseFloat(arg.value.toString());
          } else {
            output2 += "NaN";
          }
        } else {
          output2 += toJson(arg);
        }
      } else {
        output2 += token;
      }
    }
    if (argValues.length > 0) {
      throw new Error(`More value is provided: "${getRemoteValuesText(args, false)}"`);
    }
    return output2;
  }
  function toJson(arg) {
    if (arg.type !== "array" && arg.type !== "bigint" && arg.type !== "date" && arg.type !== "number" && arg.type !== "object" && arg.type !== "string") {
      return stringFromArg(arg);
    }
    if (arg.type === "bigint") {
      return `${arg.value.toString()}n`;
    }
    if (arg.type === "number") {
      return arg.value.toString();
    }
    if (["date", "string"].includes(arg.type)) {
      return JSON.stringify(arg.value);
    }
    if (arg.type === "object") {
      return `{${arg.value.map((pair) => {
        return `${JSON.stringify(pair[0])}:${toJson(pair[1])}`;
      }).join(",")}}`;
    }
    if (arg.type === "array") {
      return `[${arg.value?.map((val) => toJson(val)).join(",") ?? ""}]`;
    }
    throw Error(`Invalid value type: ${arg}`);
  }
  function stringFromArg(arg) {
    if (!Object.hasOwn(arg, "value")) {
      return arg.type;
    }
    switch (arg.type) {
      case "string":
      case "number":
      case "boolean":
      case "bigint":
        return String(arg.value);
      case "regexp":
        return `/${arg.value.pattern}/${arg.value.flags ?? ""}`;
      case "date":
        return new Date(arg.value).toString();
      case "object":
        return `Object(${arg.value?.length ?? ""})`;
      case "array":
        return `Array(${arg.value?.length ?? ""})`;
      case "map":
        return `Map(${arg.value?.length})`;
      case "set":
        return `Set(${arg.value?.length})`;
      default:
        return arg.type;
    }
  }
  function getRemoteValuesText(args, formatText) {
    const arg = args[0];
    if (!arg) {
      return "";
    }
    if (arg.type === "string" && isFormatSpecifier(arg.value.toString()) && formatText) {
      return logMessageFormatter(args);
    }
    return args.map((arg2) => {
      return stringFromArg(arg2);
    }).join(" ");
  }
  return logHelper;
}
var hasRequiredLogManager;
function requireLogManager() {
  if (hasRequiredLogManager) return LogManager;
  hasRequiredLogManager = 1;
  var _a;
  Object.defineProperty(LogManager, "__esModule", { value: true });
  LogManager.LogManager = void 0;
  const protocol_js_1 = requireProtocol();
  const log_js_1 = requireLog();
  const logHelper_js_1 = requireLogHelper();
  function getBidiStackTrace(cdpStackTrace) {
    const stackFrames = cdpStackTrace?.callFrames.map((callFrame) => {
      return {
        columnNumber: callFrame.columnNumber,
        functionName: callFrame.functionName,
        lineNumber: callFrame.lineNumber,
        url: callFrame.url
      };
    });
    return stackFrames ? { callFrames: stackFrames } : void 0;
  }
  function getLogLevel(consoleApiType) {
    if (["error", "assert"].includes(consoleApiType)) {
      return "error";
    }
    if (["debug", "trace"].includes(consoleApiType)) {
      return "debug";
    }
    if (["warn", "warning"].includes(consoleApiType)) {
      return "warn";
    }
    return "info";
  }
  function getLogMethod(consoleApiType) {
    switch (consoleApiType) {
      case "warning":
        return "warn";
      case "startGroup":
        return "group";
      case "startGroupCollapsed":
        return "groupCollapsed";
      case "endGroup":
        return "groupEnd";
    }
    return consoleApiType;
  }
  let LogManager$1 = class LogManager {
    #eventManager;
    #realmStorage;
    #cdpTarget;
    #logger;
    constructor(cdpTarget, realmStorage, eventManager, logger2) {
      this.#cdpTarget = cdpTarget;
      this.#realmStorage = realmStorage;
      this.#eventManager = eventManager;
      this.#logger = logger2;
    }
    static create(cdpTarget, realmStorage, eventManager, logger2) {
      const logManager = new _a(cdpTarget, realmStorage, eventManager, logger2);
      logManager.#initializeEntryAddedEventListener();
      return logManager;
    }
    /**
     * Heuristic serialization of CDP remote object. If possible, return the BiDi value
     * without deep serialization.
     */
    async #heuristicSerializeArg(arg, realm) {
      switch (arg.type) {
        // TODO: Implement regexp, array, object, map and set heuristics base on
        //  preview.
        case "undefined":
          return { type: "undefined" };
        case "boolean":
          return { type: "boolean", value: arg.value };
        case "string":
          return { type: "string", value: arg.value };
        case "number":
          return { type: "number", value: arg.unserializableValue ?? arg.value };
        case "bigint":
          if (arg.unserializableValue !== void 0 && arg.unserializableValue[arg.unserializableValue.length - 1] === "n") {
            return {
              type: arg.type,
              value: arg.unserializableValue.slice(0, -1)
            };
          }
          break;
        case "object":
          if (arg.subtype === "null") {
            return { type: "null" };
          }
          break;
      }
      return await realm.serializeCdpObject(
        arg,
        "none"
        /* Script.ResultOwnership.None */
      );
    }
    #initializeEntryAddedEventListener() {
      this.#cdpTarget.cdpClient.on("Runtime.consoleAPICalled", (params) => {
        const realm = this.#realmStorage.findRealm({
          cdpSessionId: this.#cdpTarget.cdpSessionId,
          executionContextId: params.executionContextId
        });
        if (realm === void 0) {
          this.#logger?.(log_js_1.LogType.cdp, params);
          return;
        }
        const argsPromise = Promise.all(params.args.map((arg) => this.#heuristicSerializeArg(arg, realm)));
        for (const browsingContext of realm.associatedBrowsingContexts) {
          this.#eventManager.registerPromiseEvent(argsPromise.then((args) => ({
            kind: "success",
            value: {
              type: "event",
              method: protocol_js_1.ChromiumBidi.Log.EventNames.LogEntryAdded,
              params: {
                level: getLogLevel(params.type),
                source: realm.source,
                text: (0, logHelper_js_1.getRemoteValuesText)(args, true),
                timestamp: Math.round(params.timestamp),
                stackTrace: getBidiStackTrace(params.stackTrace),
                type: "console",
                method: getLogMethod(params.type),
                args
              }
            }
          }), (error) => ({
            kind: "error",
            error
          })), browsingContext.id, protocol_js_1.ChromiumBidi.Log.EventNames.LogEntryAdded);
        }
      });
      this.#cdpTarget.cdpClient.on("Runtime.exceptionThrown", (params) => {
        const realm = this.#realmStorage.findRealm({
          cdpSessionId: this.#cdpTarget.cdpSessionId,
          executionContextId: params.exceptionDetails.executionContextId
        });
        if (realm === void 0) {
          this.#logger?.(log_js_1.LogType.cdp, params);
          return;
        }
        for (const browsingContext of realm.associatedBrowsingContexts) {
          this.#eventManager.registerPromiseEvent(_a.#getExceptionText(params, realm).then((text) => ({
            kind: "success",
            value: {
              type: "event",
              method: protocol_js_1.ChromiumBidi.Log.EventNames.LogEntryAdded,
              params: {
                level: "error",
                source: realm.source,
                text,
                timestamp: Math.round(params.timestamp),
                stackTrace: getBidiStackTrace(params.exceptionDetails.stackTrace),
                type: "javascript"
              }
            }
          }), (error) => ({
            kind: "error",
            error
          })), browsingContext.id, protocol_js_1.ChromiumBidi.Log.EventNames.LogEntryAdded);
        }
      });
    }
    /**
     * Try the best to get the exception text.
     */
    static async #getExceptionText(params, realm) {
      if (!params.exceptionDetails.exception) {
        return params.exceptionDetails.text;
      }
      if (realm === void 0) {
        return JSON.stringify(params.exceptionDetails.exception);
      }
      return await realm.stringifyObject(params.exceptionDetails.exception);
    }
  };
  LogManager.LogManager = LogManager$1;
  _a = LogManager$1;
  return LogManager;
}
var hasRequiredCdpTarget;
function requireCdpTarget() {
  if (hasRequiredCdpTarget) return CdpTarget;
  hasRequiredCdpTarget = 1;
  Object.defineProperty(CdpTarget, "__esModule", { value: true });
  CdpTarget.CdpTarget = void 0;
  const chromium_bidi_js_1 = requireChromiumBidi();
  const Deferred_js_1 = requireDeferred();
  const EventEmitter_js_1 = requireEventEmitter$1();
  const log_js_1 = requireLog();
  const BrowsingContextImpl_js_1 = requireBrowsingContextImpl();
  const LogManager_js_1 = requireLogManager();
  let CdpTarget$1 = class CdpTarget2 extends EventEmitter_js_1.EventEmitter {
    #id;
    #cdpClient;
    #browserCdpClient;
    #parentCdpClient;
    #realmStorage;
    #eventManager;
    #preloadScriptStorage;
    #browsingContextStorage;
    #prerenderingDisabled;
    #networkStorage;
    #unblocked = new Deferred_js_1.Deferred();
    #unhandledPromptBehavior;
    #logger;
    #deviceAccessEnabled = false;
    #cacheDisableState = false;
    #fetchDomainStages = {
      request: false,
      response: false,
      auth: false
    };
    static create(targetId, cdpClient, browserCdpClient, parentCdpClient, realmStorage, eventManager, preloadScriptStorage, browsingContextStorage, networkStorage, prerenderingDisabled, unhandledPromptBehavior, logger2) {
      const cdpTarget = new CdpTarget2(targetId, cdpClient, browserCdpClient, parentCdpClient, eventManager, realmStorage, preloadScriptStorage, browsingContextStorage, networkStorage, prerenderingDisabled, unhandledPromptBehavior, logger2);
      LogManager_js_1.LogManager.create(cdpTarget, realmStorage, eventManager, logger2);
      cdpTarget.#setEventListeners();
      void cdpTarget.#unblock();
      return cdpTarget;
    }
    constructor(targetId, cdpClient, browserCdpClient, parentCdpClient, eventManager, realmStorage, preloadScriptStorage, browsingContextStorage, networkStorage, prerenderingDisabled, unhandledPromptBehavior, logger2) {
      super();
      this.#id = targetId;
      this.#cdpClient = cdpClient;
      this.#browserCdpClient = browserCdpClient;
      this.#parentCdpClient = parentCdpClient;
      this.#eventManager = eventManager;
      this.#realmStorage = realmStorage;
      this.#preloadScriptStorage = preloadScriptStorage;
      this.#networkStorage = networkStorage;
      this.#browsingContextStorage = browsingContextStorage;
      this.#prerenderingDisabled = prerenderingDisabled;
      this.#unhandledPromptBehavior = unhandledPromptBehavior;
      this.#logger = logger2;
    }
    /** Returns a deferred that resolves when the target is unblocked. */
    get unblocked() {
      return this.#unblocked;
    }
    get id() {
      return this.#id;
    }
    get cdpClient() {
      return this.#cdpClient;
    }
    get parentCdpClient() {
      return this.#parentCdpClient;
    }
    get browserCdpClient() {
      return this.#browserCdpClient;
    }
    /** Needed for CDP escape path. */
    get cdpSessionId() {
      return this.#cdpClient.sessionId;
    }
    /**
     * Enables all the required CDP domains and unblocks the target.
     */
    async #unblock() {
      try {
        await Promise.all([
          this.#cdpClient.sendCommand("Page.enable"),
          // There can be some existing frames in the target, if reconnecting to an
          // existing browser instance, e.g. via Puppeteer. Need to restore the browsing
          // contexts for the frames to correctly handle further events, like
          // `Runtime.executionContextCreated`.
          // It's important to schedule this task together with enabling domains commands to
          // prepare the tree before the events (e.g. Runtime.executionContextCreated) start
          // coming.
          // https://github.com/GoogleChromeLabs/chromium-bidi/issues/2282
          this.#cdpClient.sendCommand("Page.getFrameTree").then((frameTree) => this.#restoreFrameTreeState(frameTree.frameTree)),
          this.#cdpClient.sendCommand("Runtime.enable"),
          this.#cdpClient.sendCommand("Page.setLifecycleEventsEnabled", {
            enabled: true
          }),
          this.#cdpClient.sendCommand("Page.setPrerenderingAllowed", {
            isAllowed: !this.#prerenderingDisabled
          }).catch(() => {
          }),
          // Enabling CDP Network domain is required for navigation detection:
          // https://github.com/GoogleChromeLabs/chromium-bidi/issues/2856.
          this.#cdpClient.sendCommand("Network.enable").then(() => this.toggleNetworkIfNeeded()),
          this.#cdpClient.sendCommand("Target.setAutoAttach", {
            autoAttach: true,
            waitForDebuggerOnStart: true,
            flatten: true
          }),
          this.#initAndEvaluatePreloadScripts(),
          this.#cdpClient.sendCommand("Runtime.runIfWaitingForDebugger"),
          // Resume tab execution as well if it was paused by the debugger.
          this.#parentCdpClient.sendCommand("Runtime.runIfWaitingForDebugger"),
          this.toggleDeviceAccessIfNeeded()
        ]);
      } catch (error) {
        this.#logger?.(log_js_1.LogType.debugError, "Failed to unblock target", error);
        if (!this.#cdpClient.isCloseError(error)) {
          this.#unblocked.resolve({
            kind: "error",
            error
          });
          return;
        }
      }
      this.#unblocked.resolve({
        kind: "success",
        value: void 0
      });
    }
    #restoreFrameTreeState(frameTree) {
      const frame2 = frameTree.frame;
      const maybeContext = this.#browsingContextStorage.findContext(frame2.id);
      if (maybeContext !== void 0) {
        if (maybeContext.parentId === null && frame2.parentId !== null && frame2.parentId !== void 0) {
          maybeContext.parentId = frame2.parentId;
        }
      }
      if (maybeContext === void 0 && frame2.parentId !== void 0) {
        const parentBrowsingContext = this.#browsingContextStorage.getContext(frame2.parentId);
        BrowsingContextImpl_js_1.BrowsingContextImpl.create(frame2.id, frame2.parentId, parentBrowsingContext.userContext, parentBrowsingContext.cdpTarget, this.#eventManager, this.#browsingContextStorage, this.#realmStorage, frame2.url, void 0, this.#unhandledPromptBehavior, this.#logger);
      }
      frameTree.childFrames?.map((frameTree2) => this.#restoreFrameTreeState(frameTree2));
    }
    async toggleFetchIfNeeded() {
      const stages = this.#networkStorage.getInterceptionStages(this.topLevelId);
      if (this.#fetchDomainStages.request === stages.request && this.#fetchDomainStages.response === stages.response && this.#fetchDomainStages.auth === stages.auth) {
        return;
      }
      const patterns = [];
      this.#fetchDomainStages = stages;
      if (stages.request || stages.auth) {
        patterns.push({
          urlPattern: "*",
          requestStage: "Request"
        });
      }
      if (stages.response) {
        patterns.push({
          urlPattern: "*",
          requestStage: "Response"
        });
      }
      if (patterns.length) {
        await this.#cdpClient.sendCommand("Fetch.enable", {
          patterns,
          handleAuthRequests: stages.auth
        });
      } else {
        const blockedRequest = this.#networkStorage.getRequestsByTarget(this).filter((request) => request.interceptPhase);
        void Promise.allSettled(blockedRequest.map((request) => request.waitNextPhase)).then(async () => {
          const blockedRequest2 = this.#networkStorage.getRequestsByTarget(this).filter((request) => request.interceptPhase);
          if (blockedRequest2.length) {
            return await this.toggleFetchIfNeeded();
          }
          return await this.#cdpClient.sendCommand("Fetch.disable");
        }).catch((error) => {
          this.#logger?.(log_js_1.LogType.bidi, "Disable failed", error);
        });
      }
    }
    /**
     * Toggles CDP "Fetch" domain and enable/disable network cache.
     */
    async toggleNetworkIfNeeded() {
      try {
        await Promise.all([
          this.toggleSetCacheDisabled(),
          this.toggleFetchIfNeeded()
        ]);
      } catch (err) {
        this.#logger?.(log_js_1.LogType.debugError, err);
        if (!this.#isExpectedError(err)) {
          throw err;
        }
      }
    }
    async toggleSetCacheDisabled(disable) {
      const defaultCacheDisabled = this.#networkStorage.defaultCacheBehavior === "bypass";
      const cacheDisabled = disable ?? defaultCacheDisabled;
      if (this.#cacheDisableState === cacheDisabled) {
        return;
      }
      this.#cacheDisableState = cacheDisabled;
      try {
        await this.#cdpClient.sendCommand("Network.setCacheDisabled", {
          cacheDisabled
        });
      } catch (err) {
        this.#logger?.(log_js_1.LogType.debugError, err);
        this.#cacheDisableState = !cacheDisabled;
        if (!this.#isExpectedError(err)) {
          throw err;
        }
      }
    }
    async toggleDeviceAccessIfNeeded() {
      const enabled = this.isSubscribedTo(chromium_bidi_js_1.Bluetooth.EventNames.RequestDevicePromptUpdated);
      if (this.#deviceAccessEnabled === enabled) {
        return;
      }
      this.#deviceAccessEnabled = enabled;
      try {
        await this.#cdpClient.sendCommand(enabled ? "DeviceAccess.enable" : "DeviceAccess.disable");
      } catch (err) {
        this.#logger?.(log_js_1.LogType.debugError, err);
        this.#deviceAccessEnabled = !enabled;
        if (!this.#isExpectedError(err)) {
          throw err;
        }
      }
    }
    /**
     * Heuristic checking if the error is due to the session being closed. If so, ignore the
     * error.
     */
    #isExpectedError(err) {
      const error = err;
      return error.code === -32001 && error.message === "Session with given id not found." || this.#cdpClient.isCloseError(err);
    }
    #setEventListeners() {
      this.#cdpClient.on("Network.requestWillBeSent", (eventParams) => {
        if (eventParams.loaderId === eventParams.requestId) {
          this.emit("frameStartedNavigating", {
            loaderId: eventParams.loaderId,
            url: eventParams.request.url,
            frameId: eventParams.frameId
          });
        }
      });
      this.#cdpClient.on("*", (event, params) => {
        if (typeof event !== "string") {
          return;
        }
        this.#eventManager.registerEvent({
          type: "event",
          method: `goog:cdp.${event}`,
          params: {
            event,
            params,
            session: this.cdpSessionId
          }
        }, this.id);
        this.#eventManager.registerEvent({
          type: "event",
          method: `cdp.${event}`,
          params: {
            event,
            params,
            session: this.cdpSessionId
          }
        }, this.id);
      });
    }
    async #enableFetch(stages) {
      const patterns = [];
      if (stages.request || stages.auth) {
        patterns.push({
          urlPattern: "*",
          requestStage: "Request"
        });
      }
      if (stages.response) {
        patterns.push({
          urlPattern: "*",
          requestStage: "Response"
        });
      }
      if (patterns.length) {
        const oldStages = this.#fetchDomainStages;
        this.#fetchDomainStages = stages;
        try {
          await this.#cdpClient.sendCommand("Fetch.enable", {
            patterns,
            handleAuthRequests: stages.auth
          });
        } catch {
          this.#fetchDomainStages = oldStages;
        }
      }
    }
    async #disableFetch() {
      const blockedRequest = this.#networkStorage.getRequestsByTarget(this).filter((request) => request.interceptPhase);
      if (blockedRequest.length === 0) {
        this.#fetchDomainStages = {
          request: false,
          response: false,
          auth: false
        };
        await this.#cdpClient.sendCommand("Fetch.disable");
      }
    }
    async toggleNetwork() {
      const stages = this.#networkStorage.getInterceptionStages(this.topLevelId);
      const fetchEnable = Object.values(stages).some((value) => value);
      const fetchChanged = this.#fetchDomainStages.request !== stages.request || this.#fetchDomainStages.response !== stages.response || this.#fetchDomainStages.auth !== stages.auth;
      this.#logger?.(log_js_1.LogType.debugInfo, "Toggle Network", `Fetch (${fetchEnable}) ${fetchChanged}`);
      if (fetchEnable && fetchChanged) {
        await this.#enableFetch(stages);
      }
      if (!fetchEnable && fetchChanged) {
        await this.#disableFetch();
      }
    }
    /**
     * All the ProxyChannels from all the preload scripts of the given
     * BrowsingContext.
     */
    getChannels() {
      return this.#preloadScriptStorage.find().flatMap((script) => script.channels);
    }
    /** Loads all top-level preload scripts. */
    async #initAndEvaluatePreloadScripts() {
      await Promise.all(this.#preloadScriptStorage.find({
        // Needed for OOPIF
        targetId: this.topLevelId
      }).map((script) => {
        return script.initInTarget(this, true);
      }));
    }
    get topLevelId() {
      return this.#browsingContextStorage.findTopLevelContextId(this.id) ?? this.id;
    }
    isSubscribedTo(moduleOrEvent) {
      return this.#eventManager.subscriptionManager.isSubscribedTo(moduleOrEvent, this.topLevelId);
    }
  };
  CdpTarget.CdpTarget = CdpTarget$1;
  return CdpTarget;
}
var hasRequiredCdpTargetManager;
function requireCdpTargetManager() {
  if (hasRequiredCdpTargetManager) return CdpTargetManager;
  hasRequiredCdpTargetManager = 1;
  Object.defineProperty(CdpTargetManager, "__esModule", { value: true });
  CdpTargetManager.CdpTargetManager = void 0;
  const log_js_1 = requireLog();
  const BrowsingContextImpl_js_1 = requireBrowsingContextImpl();
  const WorkerRealm_js_1 = requireWorkerRealm();
  const CdpTarget_js_1 = requireCdpTarget();
  const cdpToBidiTargetTypes = {
    service_worker: "service-worker",
    shared_worker: "shared-worker",
    worker: "dedicated-worker"
  };
  let CdpTargetManager$1 = class CdpTargetManager {
    #browserCdpClient;
    #cdpConnection;
    #targetKeysToBeIgnoredByAutoAttach = /* @__PURE__ */ new Set();
    #selfTargetId;
    #eventManager;
    #browsingContextStorage;
    #networkStorage;
    #bluetoothProcessor;
    #preloadScriptStorage;
    #realmStorage;
    #defaultUserContextId;
    #logger;
    #unhandledPromptBehavior;
    #prerenderingDisabled;
    constructor(cdpConnection, browserCdpClient, selfTargetId, eventManager, browsingContextStorage, realmStorage, networkStorage, bluetoothProcessor, preloadScriptStorage, defaultUserContextId, prerenderingDisabled, unhandledPromptBehavior, logger2) {
      this.#cdpConnection = cdpConnection;
      this.#browserCdpClient = browserCdpClient;
      this.#targetKeysToBeIgnoredByAutoAttach.add(selfTargetId);
      this.#selfTargetId = selfTargetId;
      this.#eventManager = eventManager;
      this.#browsingContextStorage = browsingContextStorage;
      this.#preloadScriptStorage = preloadScriptStorage;
      this.#networkStorage = networkStorage;
      this.#bluetoothProcessor = bluetoothProcessor;
      this.#realmStorage = realmStorage;
      this.#defaultUserContextId = defaultUserContextId;
      this.#prerenderingDisabled = prerenderingDisabled;
      this.#unhandledPromptBehavior = unhandledPromptBehavior;
      this.#logger = logger2;
      this.#setEventListeners(browserCdpClient);
    }
    /**
     * This method is called for each CDP session, since this class is responsible
     * for creating and destroying all targets and browsing contexts.
     */
    #setEventListeners(cdpClient) {
      cdpClient.on("Target.attachedToTarget", (params) => {
        this.#handleAttachedToTargetEvent(params, cdpClient);
      });
      cdpClient.on("Target.detachedFromTarget", this.#handleDetachedFromTargetEvent.bind(this));
      cdpClient.on("Target.targetInfoChanged", this.#handleTargetInfoChangedEvent.bind(this));
      cdpClient.on("Inspector.targetCrashed", () => {
        this.#handleTargetCrashedEvent(cdpClient);
      });
      cdpClient.on("Page.frameAttached", this.#handleFrameAttachedEvent.bind(this));
      cdpClient.on("Page.frameSubtreeWillBeDetached", this.#handleFrameSubtreeWillBeDetached.bind(this));
    }
    #handleFrameAttachedEvent(params) {
      const parentBrowsingContext = this.#browsingContextStorage.findContext(params.parentFrameId);
      if (parentBrowsingContext !== void 0) {
        BrowsingContextImpl_js_1.BrowsingContextImpl.create(
          params.frameId,
          params.parentFrameId,
          parentBrowsingContext.userContext,
          parentBrowsingContext.cdpTarget,
          this.#eventManager,
          this.#browsingContextStorage,
          this.#realmStorage,
          // At this point, we don't know the URL of the frame yet, so it will be updated
          // later.
          "about:blank",
          void 0,
          this.#unhandledPromptBehavior,
          this.#logger
        );
      }
    }
    #handleFrameSubtreeWillBeDetached(params) {
      this.#browsingContextStorage.findContext(params.frameId)?.dispose(true);
    }
    #handleAttachedToTargetEvent(params, parentSessionCdpClient) {
      const { sessionId, targetInfo } = params;
      const targetCdpClient = this.#cdpConnection.getCdpClient(sessionId);
      const detach = async () => {
        await targetCdpClient.sendCommand("Runtime.runIfWaitingForDebugger").then(() => parentSessionCdpClient.sendCommand("Target.detachFromTarget", params)).catch((error) => this.#logger?.(log_js_1.LogType.debugError, error));
      };
      if (this.#selfTargetId === targetInfo.targetId) {
        void detach();
        return;
      }
      const targetKey = targetInfo.type === "service_worker" ? `${parentSessionCdpClient.sessionId}_${targetInfo.targetId}` : targetInfo.targetId;
      if (this.#targetKeysToBeIgnoredByAutoAttach.has(targetKey)) {
        return;
      }
      this.#targetKeysToBeIgnoredByAutoAttach.add(targetKey);
      const userContext = targetInfo.browserContextId && targetInfo.browserContextId !== this.#defaultUserContextId ? targetInfo.browserContextId : "default";
      switch (targetInfo.type) {
        case "tab": {
          this.#setEventListeners(targetCdpClient);
          void (async () => {
            await targetCdpClient.sendCommand("Target.setAutoAttach", {
              autoAttach: true,
              waitForDebuggerOnStart: true,
              flatten: true
            });
          })();
          return;
        }
        case "page":
        case "iframe": {
          const cdpTarget = this.#createCdpTarget(targetCdpClient, parentSessionCdpClient, targetInfo, userContext);
          const maybeContext = this.#browsingContextStorage.findContext(targetInfo.targetId);
          if (maybeContext && targetInfo.type === "iframe") {
            maybeContext.updateCdpTarget(cdpTarget);
          } else {
            const parentId = this.#findFrameParentId(targetInfo, parentSessionCdpClient.sessionId);
            BrowsingContextImpl_js_1.BrowsingContextImpl.create(
              targetInfo.targetId,
              parentId,
              userContext,
              cdpTarget,
              this.#eventManager,
              this.#browsingContextStorage,
              this.#realmStorage,
              // Hack: when a new target created, CDP emits targetInfoChanged with an empty
              // url, and navigates it to about:blank later. When the event is emitted for
              // an existing target (reconnect), the url is already known, and navigation
              // events will not be emitted anymore. Replacing empty url with `about:blank`
              // allows to handle both cases in the same way.
              // "7.3.2.1 Creating browsing contexts".
              // https://html.spec.whatwg.org/multipage/document-sequences.html#creating-browsing-contexts
              // TODO: check who to deal with non-null creator and its `creatorOrigin`.
              targetInfo.url === "" ? "about:blank" : targetInfo.url,
              targetInfo.openerFrameId ?? targetInfo.openerId,
              this.#unhandledPromptBehavior,
              this.#logger
            );
          }
          return;
        }
        case "service_worker":
        case "worker": {
          const realm = this.#realmStorage.findRealm({
            cdpSessionId: parentSessionCdpClient.sessionId
          });
          if (!realm) {
            void detach();
            return;
          }
          const cdpTarget = this.#createCdpTarget(targetCdpClient, parentSessionCdpClient, targetInfo, userContext);
          this.#handleWorkerTarget(cdpToBidiTargetTypes[targetInfo.type], cdpTarget, realm);
          return;
        }
        // In CDP, we only emit shared workers on the browser and not the set of
        // frames that use the shared worker. If we change this in the future to
        // behave like service workers (emits on both browser and frame targets),
        // we can remove this block and merge service workers with the above one.
        case "shared_worker": {
          const cdpTarget = this.#createCdpTarget(targetCdpClient, parentSessionCdpClient, targetInfo, userContext);
          this.#handleWorkerTarget(cdpToBidiTargetTypes[targetInfo.type], cdpTarget);
          return;
        }
      }
      void detach();
    }
    /** Try to find the parent browsing context ID for the given attached target. */
    #findFrameParentId(targetInfo, parentSessionId) {
      if (targetInfo.type !== "iframe") {
        return null;
      }
      const parentId = targetInfo.openerFrameId ?? targetInfo.openerId;
      if (parentId !== void 0) {
        return parentId;
      }
      if (parentSessionId !== void 0) {
        return this.#browsingContextStorage.findContextBySession(parentSessionId)?.id ?? null;
      }
      return null;
    }
    #createCdpTarget(targetCdpClient, parentCdpClient, targetInfo, userContext) {
      this.#setEventListeners(targetCdpClient);
      this.#preloadScriptStorage.onCdpTargetCreated(targetInfo.targetId, userContext);
      const target = CdpTarget_js_1.CdpTarget.create(targetInfo.targetId, targetCdpClient, this.#browserCdpClient, parentCdpClient, this.#realmStorage, this.#eventManager, this.#preloadScriptStorage, this.#browsingContextStorage, this.#networkStorage, this.#prerenderingDisabled, this.#unhandledPromptBehavior, this.#logger);
      this.#networkStorage.onCdpTargetCreated(target);
      this.#bluetoothProcessor.onCdpTargetCreated(target);
      return target;
    }
    #workers = /* @__PURE__ */ new Map();
    #handleWorkerTarget(realmType, cdpTarget, ownerRealm) {
      cdpTarget.cdpClient.on("Runtime.executionContextCreated", (params) => {
        const { uniqueId, id, origin } = params.context;
        const workerRealm = new WorkerRealm_js_1.WorkerRealm(cdpTarget.cdpClient, this.#eventManager, id, this.#logger, (0, BrowsingContextImpl_js_1.serializeOrigin)(origin), ownerRealm ? [ownerRealm] : [], uniqueId, this.#realmStorage, realmType);
        this.#workers.set(cdpTarget.cdpSessionId, workerRealm);
      });
    }
    #handleDetachedFromTargetEvent({ sessionId, targetId }) {
      if (targetId) {
        this.#preloadScriptStorage.find({ targetId }).map((preloadScript) => {
          preloadScript.dispose(targetId);
        });
      }
      const context = this.#browsingContextStorage.findContextBySession(sessionId);
      if (context) {
        context.dispose(true);
        return;
      }
      const worker2 = this.#workers.get(sessionId);
      if (worker2) {
        this.#realmStorage.deleteRealms({
          cdpSessionId: worker2.cdpClient.sessionId
        });
      }
    }
    #handleTargetInfoChangedEvent(params) {
      const context = this.#browsingContextStorage.findContext(params.targetInfo.targetId);
      if (context) {
        context.onTargetInfoChanged(params);
      }
    }
    #handleTargetCrashedEvent(cdpClient) {
      const realms = this.#realmStorage.findRealms({
        cdpSessionId: cdpClient.sessionId
      });
      for (const realm of realms) {
        realm.dispose();
      }
    }
  };
  CdpTargetManager.CdpTargetManager = CdpTargetManager$1;
  return CdpTargetManager;
}
var BrowsingContextStorage = {};
var hasRequiredBrowsingContextStorage;
function requireBrowsingContextStorage() {
  if (hasRequiredBrowsingContextStorage) return BrowsingContextStorage;
  hasRequiredBrowsingContextStorage = 1;
  Object.defineProperty(BrowsingContextStorage, "__esModule", { value: true });
  BrowsingContextStorage.BrowsingContextStorage = void 0;
  const protocol_js_1 = requireProtocol();
  const EventEmitter_js_1 = requireEventEmitter$1();
  let BrowsingContextStorage$1 = class BrowsingContextStorage {
    /** Map from context ID to context implementation. */
    #contexts = /* @__PURE__ */ new Map();
    /** Event emitter for browsing context storage eventsis not expected to be exposed to
     * the outside world. */
    #eventEmitter = new EventEmitter_js_1.EventEmitter();
    /** Gets all top-level contexts, i.e. those with no parent. */
    getTopLevelContexts() {
      return this.getAllContexts().filter((context) => context.isTopLevelContext());
    }
    /** Gets all contexts. */
    getAllContexts() {
      return Array.from(this.#contexts.values());
    }
    /** Deletes the context with the given ID. */
    deleteContextById(id) {
      this.#contexts.delete(id);
    }
    /** Deletes the given context. */
    deleteContext(context) {
      this.#contexts.delete(context.id);
    }
    /** Tracks the given context. */
    addContext(context) {
      this.#contexts.set(context.id, context);
      this.#eventEmitter.emit("added", {
        browsingContext: context
      });
    }
    /**
     * Waits for a context with the given ID to be added and returns it.
     */
    waitForContext(browsingContextId) {
      if (this.#contexts.has(browsingContextId)) {
        return Promise.resolve(this.getContext(browsingContextId));
      }
      return new Promise((resolve2) => {
        const listener = (event) => {
          if (event.browsingContext.id === browsingContextId) {
            this.#eventEmitter.off("added", listener);
            resolve2(event.browsingContext);
          }
        };
        this.#eventEmitter.on("added", listener);
      });
    }
    /** Returns true whether there is an existing context with the given ID. */
    hasContext(id) {
      return this.#contexts.has(id);
    }
    /** Gets the context with the given ID, if any. */
    findContext(id) {
      return this.#contexts.get(id);
    }
    /** Returns the top-level context ID of the given context, if any. */
    findTopLevelContextId(id) {
      if (id === null) {
        return null;
      }
      const maybeContext = this.findContext(id);
      if (!maybeContext) {
        return null;
      }
      const parentId = maybeContext.parentId ?? null;
      if (parentId === null) {
        return id;
      }
      return this.findTopLevelContextId(parentId);
    }
    findContextBySession(sessionId) {
      for (const context of this.#contexts.values()) {
        if (context.cdpTarget.cdpSessionId === sessionId) {
          return context;
        }
      }
      return;
    }
    /** Gets the context with the given ID, if any, otherwise throws. */
    getContext(id) {
      const result = this.findContext(id);
      if (result === void 0) {
        throw new protocol_js_1.NoSuchFrameException(`Context ${id} not found`);
      }
      return result;
    }
    verifyTopLevelContextsList(contexts) {
      const foundContexts = /* @__PURE__ */ new Set();
      if (!contexts) {
        return foundContexts;
      }
      for (const contextId of contexts) {
        const context = this.getContext(contextId);
        if (context.isTopLevelContext()) {
          foundContexts.add(context);
        } else {
          throw new protocol_js_1.InvalidArgumentException(`Non top-level context '${contextId}' given.`);
        }
      }
      return foundContexts;
    }
    verifyContextsList(contexts) {
      if (!contexts.length) {
        return;
      }
      for (const contextId of contexts) {
        this.getContext(contextId);
      }
    }
  };
  BrowsingContextStorage.BrowsingContextStorage = BrowsingContextStorage$1;
  return BrowsingContextStorage;
}
var NetworkStorage = {};
var NetworkRequest = {};
var DefaultMap = {};
var hasRequiredDefaultMap;
function requireDefaultMap() {
  if (hasRequiredDefaultMap) return DefaultMap;
  hasRequiredDefaultMap = 1;
  Object.defineProperty(DefaultMap, "__esModule", { value: true });
  DefaultMap.DefaultMap = void 0;
  let DefaultMap$1 = class DefaultMap extends Map {
    /** The default value to return whenever a key is not present in the map. */
    #getDefaultValue;
    constructor(getDefaultValue, entries) {
      super(entries);
      this.#getDefaultValue = getDefaultValue;
    }
    get(key) {
      if (!this.has(key)) {
        this.set(key, this.#getDefaultValue(key));
      }
      return super.get(key);
    }
  };
  DefaultMap.DefaultMap = DefaultMap$1;
  return DefaultMap;
}
var hasRequiredNetworkRequest;
function requireNetworkRequest() {
  if (hasRequiredNetworkRequest) return NetworkRequest;
  hasRequiredNetworkRequest = 1;
  var _a;
  Object.defineProperty(NetworkRequest, "__esModule", { value: true });
  NetworkRequest.NetworkRequest = void 0;
  const protocol_js_1 = requireProtocol();
  const assert_js_1 = requireAssert();
  const DefaultMap_js_1 = requireDefaultMap();
  const Deferred_js_1 = requireDeferred();
  const log_js_1 = requireLog();
  const NetworkUtils_js_1 = requireNetworkUtils();
  const REALM_REGEX = /(?<=realm=").*(?=")/;
  let NetworkRequest$1 = class NetworkRequest {
    static unknownParameter = "UNKNOWN";
    /**
     * Each network request has an associated request id, which is a string
     * uniquely identifying that request.
     *
     * The identifier for a request resulting from a redirect matches that of the
     * request that initiated it.
     */
    #id;
    #fetchId;
    /**
     * Indicates the network intercept phase, if the request is currently blocked.
     * Undefined necessarily implies that the request is not blocked.
     */
    #interceptPhase;
    #servedFromCache = false;
    #redirectCount;
    #request = {};
    #requestOverrides;
    #responseOverrides;
    #response = {};
    #eventManager;
    #networkStorage;
    #cdpTarget;
    #logger;
    #emittedEvents = {
      [protocol_js_1.ChromiumBidi.Network.EventNames.AuthRequired]: false,
      [protocol_js_1.ChromiumBidi.Network.EventNames.BeforeRequestSent]: false,
      [protocol_js_1.ChromiumBidi.Network.EventNames.FetchError]: false,
      [protocol_js_1.ChromiumBidi.Network.EventNames.ResponseCompleted]: false,
      [protocol_js_1.ChromiumBidi.Network.EventNames.ResponseStarted]: false
    };
    waitNextPhase = new Deferred_js_1.Deferred();
    constructor(id, eventManager, networkStorage, cdpTarget, redirectCount = 0, logger2) {
      this.#id = id;
      this.#eventManager = eventManager;
      this.#networkStorage = networkStorage;
      this.#cdpTarget = cdpTarget;
      this.#redirectCount = redirectCount;
      this.#logger = logger2;
    }
    get id() {
      return this.#id;
    }
    get fetchId() {
      return this.#fetchId;
    }
    /**
     * When blocked returns the phase for it
     */
    get interceptPhase() {
      return this.#interceptPhase;
    }
    get url() {
      const fragment = this.#request.info?.request.urlFragment ?? this.#request.paused?.request.urlFragment ?? "";
      const url = this.#response.paused?.request.url ?? this.#requestOverrides?.url ?? this.#response.info?.url ?? this.#request.auth?.request.url ?? this.#request.info?.request.url ?? this.#request.paused?.request.url ?? _a.unknownParameter;
      return `${url}${fragment}`;
    }
    get redirectCount() {
      return this.#redirectCount;
    }
    get cdpTarget() {
      return this.#cdpTarget;
    }
    get cdpClient() {
      return this.#cdpTarget.cdpClient;
    }
    isRedirecting() {
      return Boolean(this.#request.info);
    }
    #isDataUrl() {
      return this.url.startsWith("data:");
    }
    get #method() {
      return this.#requestOverrides?.method ?? this.#request.info?.request.method ?? this.#request.paused?.request.method ?? this.#request.auth?.request.method ?? this.#response.paused?.request.method;
    }
    get #navigationId() {
      if (!this.#request.info || !this.#request.info.loaderId || // When we navigate all CDP network events have `loaderId`
      // CDP's `loaderId` and `requestId` match when
      // that request triggered the loading
      this.#request.info.loaderId !== this.#request.info.requestId) {
        return null;
      }
      return this.#networkStorage.getNavigationId(this.#context ?? void 0);
    }
    get #cookies() {
      let cookies = [];
      if (this.#request.extraInfo) {
        cookies = this.#request.extraInfo.associatedCookies.filter(({ blockedReasons }) => {
          return !Array.isArray(blockedReasons) || blockedReasons.length === 0;
        }).map(({ cookie }) => (0, NetworkUtils_js_1.cdpToBiDiCookie)(cookie));
      }
      return cookies;
    }
    get #bodySize() {
      let bodySize = 0;
      if (typeof this.#requestOverrides?.bodySize === "number") {
        bodySize = this.#requestOverrides.bodySize;
      } else {
        bodySize = (0, NetworkUtils_js_1.bidiBodySizeFromCdpPostDataEntries)(this.#request.info?.request.postDataEntries ?? []);
      }
      return bodySize;
    }
    get #context() {
      return this.#response.paused?.frameId ?? this.#request.info?.frameId ?? this.#request.paused?.frameId ?? this.#request.auth?.frameId ?? null;
    }
    /** Returns the HTTP status code associated with this request if any. */
    get #statusCode() {
      return this.#responseOverrides?.statusCode ?? this.#response.paused?.responseStatusCode ?? this.#response.extraInfo?.statusCode ?? this.#response.info?.status;
    }
    get #requestHeaders() {
      let headers2 = [];
      if (this.#requestOverrides?.headers) {
        const headerMap = new DefaultMap_js_1.DefaultMap(() => []);
        for (const header of this.#requestOverrides.headers) {
          headerMap.get(header.name).push(header.value.value);
        }
        for (const [name, value] of headerMap.entries()) {
          headers2.push({
            name,
            value: {
              type: "string",
              value: value.join("\n").trimEnd()
            }
          });
        }
      } else {
        headers2 = [
          ...(0, NetworkUtils_js_1.bidiNetworkHeadersFromCdpNetworkHeaders)(this.#request.info?.request.headers),
          ...(0, NetworkUtils_js_1.bidiNetworkHeadersFromCdpNetworkHeaders)(this.#request.extraInfo?.headers)
        ];
      }
      return headers2;
    }
    get #authChallenges() {
      if (!this.#response.info) {
        return;
      }
      if (!(this.#statusCode === 401 || this.#statusCode === 407)) {
        return void 0;
      }
      const headerName = this.#statusCode === 401 ? "WWW-Authenticate" : "Proxy-Authenticate";
      const authChallenges = [];
      for (const [header, value] of Object.entries(this.#response.info.headers)) {
        if (header.localeCompare(headerName, void 0, { sensitivity: "base" }) === 0) {
          authChallenges.push({
            scheme: value.split(" ").at(0) ?? "",
            realm: value.match(REALM_REGEX)?.at(0) ?? ""
          });
        }
      }
      return authChallenges;
    }
    get #timings() {
      const responseTimeOffset = (0, NetworkUtils_js_1.getTiming)((0, NetworkUtils_js_1.getTiming)(this.#response.info?.timing?.requestTime) - (0, NetworkUtils_js_1.getTiming)(this.#request.info?.timestamp));
      return {
        // TODO: Verify this is correct
        timeOrigin: Math.round((0, NetworkUtils_js_1.getTiming)(this.#request.info?.wallTime) * 1e3),
        // Timing baseline.
        // TODO: Verify this is correct.
        requestTime: 0,
        // TODO: set if redirect detected.
        redirectStart: 0,
        // TODO: set if redirect detected.
        redirectEnd: 0,
        // TODO: Verify this is correct
        // https://source.chromium.org/chromium/chromium/src/+/main:net/base/load_timing_info.h;l=145
        fetchStart: (0, NetworkUtils_js_1.getTiming)(this.#response.info?.timing?.workerFetchStart, responseTimeOffset),
        // fetchStart: 0,
        dnsStart: (0, NetworkUtils_js_1.getTiming)(this.#response.info?.timing?.dnsStart, responseTimeOffset),
        dnsEnd: (0, NetworkUtils_js_1.getTiming)(this.#response.info?.timing?.dnsEnd, responseTimeOffset),
        connectStart: (0, NetworkUtils_js_1.getTiming)(this.#response.info?.timing?.connectStart, responseTimeOffset),
        connectEnd: (0, NetworkUtils_js_1.getTiming)(this.#response.info?.timing?.connectEnd, responseTimeOffset),
        tlsStart: (0, NetworkUtils_js_1.getTiming)(this.#response.info?.timing?.sslStart, responseTimeOffset),
        requestStart: (0, NetworkUtils_js_1.getTiming)(this.#response.info?.timing?.sendStart, responseTimeOffset),
        // https://source.chromium.org/chromium/chromium/src/+/main:net/base/load_timing_info.h;l=196
        responseStart: (0, NetworkUtils_js_1.getTiming)(this.#response.info?.timing?.receiveHeadersStart, responseTimeOffset),
        responseEnd: (0, NetworkUtils_js_1.getTiming)(this.#response.info?.timing?.receiveHeadersEnd, responseTimeOffset)
      };
    }
    #phaseChanged() {
      this.waitNextPhase.resolve();
      this.waitNextPhase = new Deferred_js_1.Deferred();
    }
    #interceptsInPhase(phase) {
      if (!this.#cdpTarget.isSubscribedTo(`network.${phase}`)) {
        return /* @__PURE__ */ new Set();
      }
      return this.#networkStorage.getInterceptsForPhase(this, phase);
    }
    #isBlockedInPhase(phase) {
      return this.#interceptsInPhase(phase).size > 0;
    }
    handleRedirect(event) {
      this.#response.hasExtraInfo = false;
      this.#response.info = event.redirectResponse;
      this.#emitEventsIfReady({
        wasRedirected: true
      });
    }
    #emitEventsIfReady(options = {}) {
      const requestExtraInfoCompleted = (
        // Flush redirects
        options.wasRedirected || options.hasFailed || this.#isDataUrl() || Boolean(this.#request.extraInfo) || // Requests from cache don't have extra info
        this.#servedFromCache || // Sometimes there is no extra info and the response
        // is the only place we can find out
        Boolean(this.#response.info && !this.#response.hasExtraInfo)
      );
      const noInterceptionExpected = (
        // We can't intercept data urls from CDP
        this.#isDataUrl() || // Cached requests never hit the network
        this.#servedFromCache
      );
      const requestInterceptionExpected = !noInterceptionExpected && this.#isBlockedInPhase(
        "beforeRequestSent"
        /* Network.InterceptPhase.BeforeRequestSent */
      );
      const requestInterceptionCompleted = !requestInterceptionExpected || requestInterceptionExpected && Boolean(this.#request.paused);
      if (Boolean(this.#request.info) && (requestInterceptionExpected ? requestInterceptionCompleted : requestExtraInfoCompleted)) {
        this.#emitEvent(this.#getBeforeRequestEvent.bind(this));
      }
      const responseExtraInfoCompleted = Boolean(this.#response.extraInfo) || // Response from cache don't have extra info
      this.#servedFromCache || // Don't expect extra info if the flag is false
      Boolean(this.#response.info && !this.#response.hasExtraInfo);
      const responseInterceptionExpected = !noInterceptionExpected && this.#isBlockedInPhase(
        "responseStarted"
        /* Network.InterceptPhase.ResponseStarted */
      );
      if (this.#response.info || responseInterceptionExpected && Boolean(this.#response.paused)) {
        this.#emitEvent(this.#getResponseStartedEvent.bind(this));
      }
      const responseInterceptionCompleted = !responseInterceptionExpected || responseInterceptionExpected && Boolean(this.#response.paused);
      if (Boolean(this.#response.info) && responseExtraInfoCompleted && responseInterceptionCompleted) {
        this.#emitEvent(this.#getResponseReceivedEvent.bind(this));
        this.#networkStorage.deleteRequest(this.id);
      }
    }
    onRequestWillBeSentEvent(event) {
      this.#request.info = event;
      this.#emitEventsIfReady();
    }
    onRequestWillBeSentExtraInfoEvent(event) {
      this.#request.extraInfo = event;
      this.#emitEventsIfReady();
    }
    onResponseReceivedExtraInfoEvent(event) {
      if (event.statusCode >= 300 && event.statusCode <= 399 && this.#request.info && event.headers["location"] === this.#request.info.request.url) {
        return;
      }
      this.#response.extraInfo = event;
      this.#emitEventsIfReady();
    }
    onResponseReceivedEvent(event) {
      this.#response.hasExtraInfo = event.hasExtraInfo;
      this.#response.info = event.response;
      this.#emitEventsIfReady();
    }
    onServedFromCache() {
      this.#servedFromCache = true;
      this.#emitEventsIfReady();
    }
    onLoadingFailedEvent(event) {
      this.#emitEventsIfReady({
        hasFailed: true
      });
      this.#emitEvent(() => {
        return {
          method: protocol_js_1.ChromiumBidi.Network.EventNames.FetchError,
          params: {
            ...this.#getBaseEventParams(),
            errorText: event.errorText
          }
        };
      });
    }
    /** @see https://chromedevtools.github.io/devtools-protocol/tot/Fetch/#method-failRequest */
    async failRequest(errorReason) {
      (0, assert_js_1.assert)(this.#fetchId, "Network Interception not set-up.");
      await this.cdpClient.sendCommand("Fetch.failRequest", {
        requestId: this.#fetchId,
        errorReason
      });
      this.#interceptPhase = void 0;
    }
    onRequestPaused(event) {
      this.#fetchId = event.requestId;
      if (event.responseStatusCode || event.responseErrorReason) {
        this.#response.paused = event;
        if (this.#isBlockedInPhase(
          "responseStarted"
          /* Network.InterceptPhase.ResponseStarted */
        ) && // CDP may emit multiple events for a single request
        !this.#emittedEvents[protocol_js_1.ChromiumBidi.Network.EventNames.ResponseStarted] && // Continue all response that have not enabled Network domain
        this.#fetchId !== this.id) {
          this.#interceptPhase = "responseStarted";
        } else {
          void this.#continueResponse();
        }
      } else {
        this.#request.paused = event;
        if (this.#isBlockedInPhase(
          "beforeRequestSent"
          /* Network.InterceptPhase.BeforeRequestSent */
        ) && // CDP may emit multiple events for a single request
        !this.#emittedEvents[protocol_js_1.ChromiumBidi.Network.EventNames.BeforeRequestSent] && // Continue all requests that have not enabled Network domain
        this.#fetchId !== this.id) {
          this.#interceptPhase = "beforeRequestSent";
        } else {
          void this.#continueRequest();
        }
      }
      this.#emitEventsIfReady();
    }
    onAuthRequired(event) {
      this.#fetchId = event.requestId;
      this.#request.auth = event;
      if (this.#isBlockedInPhase(
        "authRequired"
        /* Network.InterceptPhase.AuthRequired */
      ) && // Continue all auth requests that have not enabled Network domain
      this.#fetchId !== this.id) {
        this.#interceptPhase = "authRequired";
      } else {
        void this.#continueWithAuth({
          response: "Default"
        });
      }
      this.#emitEvent(() => {
        return {
          method: protocol_js_1.ChromiumBidi.Network.EventNames.AuthRequired,
          params: {
            ...this.#getBaseEventParams(
              "authRequired"
              /* Network.InterceptPhase.AuthRequired */
            ),
            response: this.#getResponseEventParams()
          }
        };
      });
    }
    /** @see https://chromedevtools.github.io/devtools-protocol/tot/Fetch/#method-continueRequest */
    async continueRequest(overrides = {}) {
      const overrideHeaders = this.#getOverrideHeader(overrides.headers, overrides.cookies);
      const headers2 = (0, NetworkUtils_js_1.cdpFetchHeadersFromBidiNetworkHeaders)(overrideHeaders);
      const postData = getCdpBodyFromBiDiBytesValue(overrides.body);
      await this.#continueRequest({
        url: overrides.url,
        method: overrides.method,
        headers: headers2,
        postData
      });
      this.#requestOverrides = {
        url: overrides.url,
        method: overrides.method,
        headers: overrides.headers,
        cookies: overrides.cookies,
        bodySize: getSizeFromBiDiBytesValue(overrides.body)
      };
    }
    async #continueRequest(overrides = {}) {
      (0, assert_js_1.assert)(this.#fetchId, "Network Interception not set-up.");
      await this.cdpClient.sendCommand("Fetch.continueRequest", {
        requestId: this.#fetchId,
        url: overrides.url,
        method: overrides.method,
        headers: overrides.headers,
        postData: overrides.postData
      });
      this.#interceptPhase = void 0;
    }
    /** @see https://chromedevtools.github.io/devtools-protocol/tot/Fetch/#method-continueResponse */
    async continueResponse(overrides = {}) {
      if (this.interceptPhase === "authRequired") {
        if (overrides.credentials) {
          await Promise.all([
            this.waitNextPhase,
            await this.#continueWithAuth({
              response: "ProvideCredentials",
              username: overrides.credentials.username,
              password: overrides.credentials.password
            })
          ]);
        } else {
          return await this.#continueWithAuth({
            response: "ProvideCredentials"
          });
        }
      }
      if (this.#interceptPhase === "responseStarted") {
        const overrideHeaders = this.#getOverrideHeader(overrides.headers, overrides.cookies);
        const responseHeaders = (0, NetworkUtils_js_1.cdpFetchHeadersFromBidiNetworkHeaders)(overrideHeaders);
        await this.#continueResponse({
          responseCode: overrides.statusCode ?? this.#response.paused?.responseStatusCode,
          responsePhrase: overrides.reasonPhrase ?? this.#response.paused?.responseStatusText,
          responseHeaders: responseHeaders ?? this.#response.paused?.responseHeaders
        });
        this.#responseOverrides = {
          statusCode: overrides.statusCode,
          headers: overrideHeaders
        };
      }
    }
    async #continueResponse({ responseCode, responsePhrase, responseHeaders } = {}) {
      (0, assert_js_1.assert)(this.#fetchId, "Network Interception not set-up.");
      await this.cdpClient.sendCommand("Fetch.continueResponse", {
        requestId: this.#fetchId,
        responseCode,
        responsePhrase,
        responseHeaders
      });
      this.#interceptPhase = void 0;
    }
    /** @see https://chromedevtools.github.io/devtools-protocol/tot/Fetch/#method-continueWithAuth */
    async continueWithAuth(authChallenge) {
      let username;
      let password;
      if (authChallenge.action === "provideCredentials") {
        const { credentials } = authChallenge;
        username = credentials.username;
        password = credentials.password;
      }
      const response = (0, NetworkUtils_js_1.cdpAuthChallengeResponseFromBidiAuthContinueWithAuthAction)(authChallenge.action);
      await this.#continueWithAuth({
        response,
        username,
        password
      });
    }
    /** @see https://chromedevtools.github.io/devtools-protocol/tot/Fetch/#method-provideResponse */
    async provideResponse(overrides) {
      (0, assert_js_1.assert)(this.#fetchId, "Network Interception not set-up.");
      if (this.interceptPhase === "authRequired") {
        return await this.#continueWithAuth({
          response: "ProvideCredentials"
        });
      }
      if (!overrides.body && !overrides.headers) {
        return await this.#continueRequest();
      }
      const overrideHeaders = this.#getOverrideHeader(overrides.headers, overrides.cookies);
      const responseHeaders = (0, NetworkUtils_js_1.cdpFetchHeadersFromBidiNetworkHeaders)(overrideHeaders);
      const responseCode = overrides.statusCode ?? this.#statusCode ?? 200;
      await this.cdpClient.sendCommand("Fetch.fulfillRequest", {
        requestId: this.#fetchId,
        responseCode,
        responsePhrase: overrides.reasonPhrase,
        responseHeaders,
        body: getCdpBodyFromBiDiBytesValue(overrides.body)
      });
      this.#interceptPhase = void 0;
    }
    dispose() {
      this.waitNextPhase.reject(new Error("waitNextPhase disposed"));
    }
    async #continueWithAuth(authChallengeResponse) {
      (0, assert_js_1.assert)(this.#fetchId, "Network Interception not set-up.");
      await this.cdpClient.sendCommand("Fetch.continueWithAuth", {
        requestId: this.#fetchId,
        authChallengeResponse
      });
      this.#interceptPhase = void 0;
    }
    #emitEvent(getEvent) {
      let event;
      try {
        event = getEvent();
      } catch (error) {
        this.#logger?.(log_js_1.LogType.debugError, error);
        return;
      }
      if (this.#isIgnoredEvent() || this.#emittedEvents[event.method] && // Special case this event can be emitted multiple times
      event.method !== protocol_js_1.ChromiumBidi.Network.EventNames.AuthRequired) {
        return;
      }
      this.#phaseChanged();
      this.#emittedEvents[event.method] = true;
      if (this.#context) {
        this.#eventManager.registerEvent(Object.assign(event, {
          type: "event"
        }), this.#context);
      } else {
        this.#eventManager.registerGlobalEvent(Object.assign(event, {
          type: "event"
        }));
      }
    }
    #getBaseEventParams(phase) {
      const interceptProps = {
        isBlocked: false
      };
      if (phase) {
        const blockedBy = this.#interceptsInPhase(phase);
        interceptProps.isBlocked = blockedBy.size > 0;
        if (interceptProps.isBlocked) {
          interceptProps.intercepts = [...blockedBy];
        }
      }
      return {
        context: this.#context,
        navigation: this.#navigationId,
        redirectCount: this.#redirectCount,
        request: this.#getRequestData(),
        // Timestamp should be in milliseconds, while CDP provides it in seconds.
        timestamp: Math.round((0, NetworkUtils_js_1.getTiming)(this.#request.info?.wallTime) * 1e3),
        // Contains isBlocked and intercepts
        ...interceptProps
      };
    }
    #getResponseEventParams() {
      if (this.#response.info?.fromDiskCache) {
        this.#response.extraInfo = void 0;
      }
      const headers2 = [
        ...(0, NetworkUtils_js_1.bidiNetworkHeadersFromCdpNetworkHeaders)(this.#response.info?.headers),
        ...(0, NetworkUtils_js_1.bidiNetworkHeadersFromCdpNetworkHeaders)(this.#response.extraInfo?.headers)
        // TODO: Verify how to dedupe these
        // ...bidiNetworkHeadersFromCdpNetworkHeadersEntries(
        //   this.#response.paused?.responseHeaders
        // ),
      ];
      const authChallenges = this.#authChallenges;
      const response = {
        url: this.url,
        protocol: this.#response.info?.protocol ?? "",
        status: this.#statusCode ?? -1,
        // TODO: Throw an exception or use some other status code?
        statusText: this.#response.info?.statusText || this.#response.paused?.responseStatusText || "",
        fromCache: this.#response.info?.fromDiskCache || this.#response.info?.fromPrefetchCache || this.#servedFromCache,
        headers: this.#responseOverrides?.headers ?? headers2,
        mimeType: this.#response.info?.mimeType || "",
        bytesReceived: this.#response.info?.encodedDataLength || 0,
        headersSize: (0, NetworkUtils_js_1.computeHeadersSize)(headers2),
        // TODO: consider removing from spec.
        bodySize: 0,
        content: {
          // TODO: consider removing from spec.
          size: 0
        },
        ...authChallenges ? { authChallenges } : {}
      };
      return {
        ...response,
        "goog:securityDetails": this.#response.info?.securityDetails
      };
    }
    #getRequestData() {
      const headers2 = this.#requestHeaders;
      const request = {
        request: this.#id,
        url: this.url,
        method: this.#method ?? _a.unknownParameter,
        headers: headers2,
        cookies: this.#cookies,
        headersSize: (0, NetworkUtils_js_1.computeHeadersSize)(headers2),
        bodySize: this.#bodySize,
        // TODO: populate
        destination: this.#getDestination(),
        // TODO: populate
        initiatorType: this.#getInitiatorType(),
        timings: this.#timings
      };
      return {
        ...request,
        "goog:postData": this.#request.info?.request?.postData,
        "goog:hasPostData": this.#request.info?.request?.hasPostData,
        "goog:resourceType": this.#request.info?.type,
        "goog:resourceInitiator": this.#request.info?.initiator
      };
    }
    /**
     * Heuristic trying to guess the destination.
     * Specification: https://fetch.spec.whatwg.org/#concept-request-destination.
     * Specified values: "audio", "audioworklet", "document", "embed", "font", "frame",
     * "iframe", "image", "json", "manifest", "object", "paintworklet", "report", "script",
     * "serviceworker", "sharedworker", "style", "track", "video", "webidentity", "worker",
     * "xslt".
     */
    #getDestination() {
      switch (this.#request.info?.type) {
        case "Script":
          return "script";
        case "Stylesheet":
          return "style";
        case "Image":
          return "image";
        case "Document":
          return this.#request.info?.initiator.type === "parser" ? "iframe" : "";
        default:
          return "";
      }
    }
    /**
     * Heuristic trying to guess the initiator type.
     * Specification: https://fetch.spec.whatwg.org/#request-initiator-type.
     * Specified values: "audio", "beacon", "body", "css", "early-hints", "embed", "fetch",
     * "font", "frame", "iframe", "image", "img", "input", "link", "object", "ping",
     * "script", "track", "video", "xmlhttprequest", "other".
     */
    #getInitiatorType() {
      if (this.#request.info?.initiator.type === "parser") {
        switch (this.#request.info?.type) {
          case "Document":
            return "iframe";
          case "Font":
            return this.#request.info?.initiator?.url === this.#request.info?.documentURL ? "font" : "css";
          case "Image":
            return this.#request.info?.initiator?.url === this.#request.info?.documentURL ? "img" : "css";
          case "Script":
            return "script";
          case "Stylesheet":
            return "link";
          default:
            return null;
        }
      }
      if (this.#request?.info?.type === "Fetch") {
        return "fetch";
      }
      return null;
    }
    #getBeforeRequestEvent() {
      (0, assert_js_1.assert)(this.#request.info, "RequestWillBeSentEvent is not set");
      return {
        method: protocol_js_1.ChromiumBidi.Network.EventNames.BeforeRequestSent,
        params: {
          ...this.#getBaseEventParams(
            "beforeRequestSent"
            /* Network.InterceptPhase.BeforeRequestSent */
          ),
          initiator: {
            type: _a.#getInitiator(this.#request.info.initiator.type),
            columnNumber: this.#request.info.initiator.columnNumber,
            lineNumber: this.#request.info.initiator.lineNumber,
            stackTrace: this.#request.info.initiator.stack,
            request: this.#request.info.initiator.requestId
          }
        }
      };
    }
    #getResponseStartedEvent() {
      return {
        method: protocol_js_1.ChromiumBidi.Network.EventNames.ResponseStarted,
        params: {
          ...this.#getBaseEventParams(
            "responseStarted"
            /* Network.InterceptPhase.ResponseStarted */
          ),
          response: this.#getResponseEventParams()
        }
      };
    }
    #getResponseReceivedEvent() {
      return {
        method: protocol_js_1.ChromiumBidi.Network.EventNames.ResponseCompleted,
        params: {
          ...this.#getBaseEventParams(),
          response: this.#getResponseEventParams()
        }
      };
    }
    #isIgnoredEvent() {
      const faviconUrl = "/favicon.ico";
      return this.#request.paused?.request.url.endsWith(faviconUrl) ?? this.#request.info?.request.url.endsWith(faviconUrl) ?? false;
    }
    #getOverrideHeader(headers2, cookies) {
      if (!headers2 && !cookies) {
        return void 0;
      }
      let overrideHeaders = headers2;
      const cookieHeader = (0, NetworkUtils_js_1.networkHeaderFromCookieHeaders)(cookies);
      if (cookieHeader && !overrideHeaders) {
        overrideHeaders = this.#requestHeaders;
      }
      if (cookieHeader && overrideHeaders) {
        overrideHeaders.filter((header) => header.name.localeCompare("cookie", void 0, {
          sensitivity: "base"
        }) !== 0);
        overrideHeaders.push(cookieHeader);
      }
      return overrideHeaders;
    }
    static #getInitiator(initiatorType) {
      switch (initiatorType) {
        case "parser":
        case "script":
        case "preflight":
          return initiatorType;
        default:
          return "other";
      }
    }
  };
  NetworkRequest.NetworkRequest = NetworkRequest$1;
  _a = NetworkRequest$1;
  function getCdpBodyFromBiDiBytesValue(body) {
    let parsedBody;
    if (body?.type === "string") {
      parsedBody = (0, NetworkUtils_js_1.stringToBase64)(body.value);
    } else if (body?.type === "base64") {
      parsedBody = body.value;
    }
    return parsedBody;
  }
  function getSizeFromBiDiBytesValue(body) {
    if (body?.type === "string") {
      return body.value.length;
    } else if (body?.type === "base64") {
      return atob(body.value).length;
    }
    return 0;
  }
  return NetworkRequest;
}
var hasRequiredNetworkStorage;
function requireNetworkStorage() {
  if (hasRequiredNetworkStorage) return NetworkStorage;
  hasRequiredNetworkStorage = 1;
  Object.defineProperty(NetworkStorage, "__esModule", { value: true });
  NetworkStorage.NetworkStorage = void 0;
  const protocol_js_1 = requireProtocol();
  const uuid_js_1 = requireUuid();
  const NetworkRequest_js_1 = requireNetworkRequest();
  const NetworkUtils_js_1 = requireNetworkUtils();
  let NetworkStorage$1 = class NetworkStorage {
    #browsingContextStorage;
    #eventManager;
    #logger;
    /**
     * A map from network request ID to Network Request objects.
     * Needed as long as information about requests comes from different events.
     */
    #requests = /* @__PURE__ */ new Map();
    /** A map from intercept ID to track active network intercepts. */
    #intercepts = /* @__PURE__ */ new Map();
    #defaultCacheBehavior = "default";
    constructor(eventManager, browsingContextStorage, browserClient, logger2) {
      this.#browsingContextStorage = browsingContextStorage;
      this.#eventManager = eventManager;
      browserClient.on("Target.detachedFromTarget", ({ sessionId }) => {
        this.disposeRequestMap(sessionId);
      });
      this.#logger = logger2;
    }
    /**
     * Gets the network request with the given ID, if any.
     * Otherwise, creates a new network request with the given ID and cdp target.
     */
    #getOrCreateNetworkRequest(id, cdpTarget, redirectCount) {
      let request = this.getRequestById(id);
      if (request) {
        return request;
      }
      request = new NetworkRequest_js_1.NetworkRequest(id, this.#eventManager, this, cdpTarget, redirectCount, this.#logger);
      this.addRequest(request);
      return request;
    }
    onCdpTargetCreated(cdpTarget) {
      const cdpClient = cdpTarget.cdpClient;
      const listeners = [
        [
          "Network.requestWillBeSent",
          (params) => {
            const request = this.getRequestById(params.requestId);
            if (request && request.isRedirecting()) {
              request.handleRedirect(params);
              this.deleteRequest(params.requestId);
              this.#getOrCreateNetworkRequest(params.requestId, cdpTarget, request.redirectCount + 1).onRequestWillBeSentEvent(params);
            } else {
              this.#getOrCreateNetworkRequest(params.requestId, cdpTarget).onRequestWillBeSentEvent(params);
            }
          }
        ],
        [
          "Network.requestWillBeSentExtraInfo",
          (params) => {
            this.#getOrCreateNetworkRequest(params.requestId, cdpTarget).onRequestWillBeSentExtraInfoEvent(params);
          }
        ],
        [
          "Network.responseReceived",
          (params) => {
            this.#getOrCreateNetworkRequest(params.requestId, cdpTarget).onResponseReceivedEvent(params);
          }
        ],
        [
          "Network.responseReceivedExtraInfo",
          (params) => {
            this.#getOrCreateNetworkRequest(params.requestId, cdpTarget).onResponseReceivedExtraInfoEvent(params);
          }
        ],
        [
          "Network.requestServedFromCache",
          (params) => {
            this.#getOrCreateNetworkRequest(params.requestId, cdpTarget).onServedFromCache();
          }
        ],
        [
          "Network.loadingFailed",
          (params) => {
            this.#getOrCreateNetworkRequest(params.requestId, cdpTarget).onLoadingFailedEvent(params);
          }
        ],
        [
          "Fetch.requestPaused",
          (event) => {
            this.#getOrCreateNetworkRequest(
              // CDP quirk if the Network domain is not present this is undefined
              event.networkId ?? event.requestId,
              cdpTarget
            ).onRequestPaused(event);
          }
        ],
        [
          "Fetch.authRequired",
          (event) => {
            let request = this.getRequestByFetchId(event.requestId);
            if (!request) {
              request = this.#getOrCreateNetworkRequest(event.requestId, cdpTarget);
            }
            request.onAuthRequired(event);
          }
        ]
      ];
      for (const [event, listener] of listeners) {
        cdpClient.on(event, listener);
      }
    }
    getInterceptionStages(browsingContextId) {
      const stages = {
        request: false,
        response: false,
        auth: false
      };
      for (const intercept of this.#intercepts.values()) {
        if (intercept.contexts && !intercept.contexts.includes(browsingContextId)) {
          continue;
        }
        stages.request ||= intercept.phases.includes(
          "beforeRequestSent"
          /* Network.InterceptPhase.BeforeRequestSent */
        );
        stages.response ||= intercept.phases.includes(
          "responseStarted"
          /* Network.InterceptPhase.ResponseStarted */
        );
        stages.auth ||= intercept.phases.includes(
          "authRequired"
          /* Network.InterceptPhase.AuthRequired */
        );
      }
      return stages;
    }
    getInterceptsForPhase(request, phase) {
      if (request.url === NetworkRequest_js_1.NetworkRequest.unknownParameter) {
        return /* @__PURE__ */ new Set();
      }
      const intercepts = /* @__PURE__ */ new Set();
      for (const [interceptId, intercept] of this.#intercepts.entries()) {
        if (!intercept.phases.includes(phase) || intercept.contexts && !intercept.contexts.includes(request.cdpTarget.topLevelId)) {
          continue;
        }
        if (intercept.urlPatterns.length === 0) {
          intercepts.add(interceptId);
          continue;
        }
        for (const pattern of intercept.urlPatterns) {
          if ((0, NetworkUtils_js_1.matchUrlPattern)(pattern, request.url)) {
            intercepts.add(interceptId);
            break;
          }
        }
      }
      return intercepts;
    }
    disposeRequestMap(sessionId) {
      for (const request of this.#requests.values()) {
        if (request.cdpClient.sessionId === sessionId) {
          this.#requests.delete(request.id);
          request.dispose();
        }
      }
    }
    /**
     * Adds the given entry to the intercept map.
     * URL patterns are assumed to be parsed.
     *
     * @return The intercept ID.
     */
    addIntercept(value) {
      const interceptId = (0, uuid_js_1.uuidv4)();
      this.#intercepts.set(interceptId, value);
      return interceptId;
    }
    /**
     * Removes the given intercept from the intercept map.
     * Throws NoSuchInterceptException if the intercept does not exist.
     */
    removeIntercept(intercept) {
      if (!this.#intercepts.has(intercept)) {
        throw new protocol_js_1.NoSuchInterceptException(`Intercept '${intercept}' does not exist.`);
      }
      this.#intercepts.delete(intercept);
    }
    getRequestsByTarget(target) {
      const requests = [];
      for (const request of this.#requests.values()) {
        if (request.cdpTarget === target) {
          requests.push(request);
        }
      }
      return requests;
    }
    getRequestById(id) {
      return this.#requests.get(id);
    }
    getRequestByFetchId(fetchId) {
      for (const request of this.#requests.values()) {
        if (request.fetchId === fetchId) {
          return request;
        }
      }
      return;
    }
    addRequest(request) {
      this.#requests.set(request.id, request);
    }
    deleteRequest(id) {
      this.#requests.delete(id);
    }
    /**
     * Gets the virtual navigation ID for the given navigable ID.
     */
    getNavigationId(contextId) {
      if (contextId === void 0) {
        return null;
      }
      return this.#browsingContextStorage.findContext(contextId)?.navigationId ?? null;
    }
    set defaultCacheBehavior(behavior) {
      this.#defaultCacheBehavior = behavior;
    }
    get defaultCacheBehavior() {
      return this.#defaultCacheBehavior;
    }
  };
  NetworkStorage.NetworkStorage = NetworkStorage$1;
  return NetworkStorage;
}
var PreloadScriptStorage = {};
var hasRequiredPreloadScriptStorage;
function requirePreloadScriptStorage() {
  if (hasRequiredPreloadScriptStorage) return PreloadScriptStorage;
  hasRequiredPreloadScriptStorage = 1;
  Object.defineProperty(PreloadScriptStorage, "__esModule", { value: true });
  PreloadScriptStorage.PreloadScriptStorage = void 0;
  const ErrorResponse_js_1 = requireErrorResponse();
  let PreloadScriptStorage$1 = class PreloadScriptStorage {
    /** Tracks all BiDi preload scripts.  */
    #scripts = /* @__PURE__ */ new Set();
    /**
     * Finds all entries that match the given filter (OR logic).
     */
    find(filter) {
      if (!filter) {
        return [...this.#scripts];
      }
      return [...this.#scripts].filter((script) => {
        if (script.contexts === void 0 && script.userContexts === void 0) {
          return true;
        }
        if (filter.targetId !== void 0 && script.targetIds.has(filter.targetId)) {
          return true;
        }
        return false;
      });
    }
    add(preloadScript) {
      this.#scripts.add(preloadScript);
    }
    /** Deletes all BiDi preload script entries that match the given filter. */
    remove(id) {
      const script = [...this.#scripts].find((script2) => script2.id === id);
      if (script === void 0) {
        throw new ErrorResponse_js_1.NoSuchScriptException(`No preload script with id '${id}'`);
      }
      this.#scripts.delete(script);
    }
    /** Gets the preload script with the given ID, if any, otherwise throws. */
    getPreloadScript(id) {
      const script = [...this.#scripts].find((script2) => script2.id === id);
      if (script === void 0) {
        throw new ErrorResponse_js_1.NoSuchScriptException(`No preload script with id '${id}'`);
      }
      return script;
    }
    onCdpTargetCreated(targetId, userContext) {
      const scriptInUserContext = [...this.#scripts].filter((script) => {
        if (!script.userContexts && !script.contexts) {
          return true;
        }
        return script.userContexts?.includes(userContext);
      });
      for (const script of scriptInUserContext) {
        script.targetIds.add(targetId);
      }
    }
  };
  PreloadScriptStorage.PreloadScriptStorage = PreloadScriptStorage$1;
  return PreloadScriptStorage;
}
var RealmStorage = {};
var hasRequiredRealmStorage;
function requireRealmStorage() {
  if (hasRequiredRealmStorage) return RealmStorage;
  hasRequiredRealmStorage = 1;
  Object.defineProperty(RealmStorage, "__esModule", { value: true });
  RealmStorage.RealmStorage = void 0;
  const protocol_js_1 = requireProtocol();
  const WindowRealm_js_1 = requireWindowRealm();
  let RealmStorage$1 = class RealmStorage {
    /** Tracks handles and their realms sent to the client. */
    #knownHandlesToRealmMap = /* @__PURE__ */ new Map();
    /** Map from realm ID to Realm. */
    #realmMap = /* @__PURE__ */ new Map();
    get knownHandlesToRealmMap() {
      return this.#knownHandlesToRealmMap;
    }
    addRealm(realm) {
      this.#realmMap.set(realm.realmId, realm);
    }
    /** Finds all realms that match the given filter. */
    findRealms(filter) {
      return Array.from(this.#realmMap.values()).filter((realm) => {
        if (filter.realmId !== void 0 && filter.realmId !== realm.realmId) {
          return false;
        }
        if (filter.browsingContextId !== void 0 && !realm.associatedBrowsingContexts.map((browsingContext) => browsingContext.id).includes(filter.browsingContextId)) {
          return false;
        }
        if (filter.sandbox !== void 0 && (!(realm instanceof WindowRealm_js_1.WindowRealm) || filter.sandbox !== realm.sandbox)) {
          return false;
        }
        if (filter.executionContextId !== void 0 && filter.executionContextId !== realm.executionContextId) {
          return false;
        }
        if (filter.origin !== void 0 && filter.origin !== realm.origin) {
          return false;
        }
        if (filter.type !== void 0 && filter.type !== realm.realmType) {
          return false;
        }
        if (filter.cdpSessionId !== void 0 && filter.cdpSessionId !== realm.cdpClient.sessionId) {
          return false;
        }
        return true;
      });
    }
    findRealm(filter) {
      const maybeRealms = this.findRealms(filter);
      if (maybeRealms.length !== 1) {
        return void 0;
      }
      return maybeRealms[0];
    }
    /** Gets the only realm that matches the given filter, if any, otherwise throws. */
    getRealm(filter) {
      const maybeRealm = this.findRealm(filter);
      if (maybeRealm === void 0) {
        throw new protocol_js_1.NoSuchFrameException(`Realm ${JSON.stringify(filter)} not found`);
      }
      return maybeRealm;
    }
    /** Deletes all realms that match the given filter. */
    deleteRealms(filter) {
      this.findRealms(filter).map((realm) => {
        realm.dispose();
        this.#realmMap.delete(realm.realmId);
        Array.from(this.knownHandlesToRealmMap.entries()).filter(([, r2]) => r2 === realm.realmId).map(([handle]) => this.knownHandlesToRealmMap.delete(handle));
      });
    }
  };
  RealmStorage.RealmStorage = RealmStorage$1;
  return RealmStorage;
}
var EventManager = {};
var Buffer$1 = {};
var hasRequiredBuffer$1;
function requireBuffer$1() {
  if (hasRequiredBuffer$1) return Buffer$1;
  hasRequiredBuffer$1 = 1;
  Object.defineProperty(Buffer$1, "__esModule", { value: true });
  Buffer$1.Buffer = void 0;
  class Buffer2 {
    #capacity;
    #entries = [];
    #onItemRemoved;
    /**
     * @param capacity The buffer capacity.
     * @param onItemRemoved Delegate called for each removed element.
     */
    constructor(capacity, onItemRemoved) {
      this.#capacity = capacity;
      this.#onItemRemoved = onItemRemoved;
    }
    get() {
      return this.#entries;
    }
    add(value) {
      this.#entries.push(value);
      while (this.#entries.length > this.#capacity) {
        const item = this.#entries.shift();
        if (item !== void 0) {
          this.#onItemRemoved?.(item);
        }
      }
    }
  }
  Buffer$1.Buffer = Buffer2;
  return Buffer$1;
}
var IdWrapper = {};
var hasRequiredIdWrapper;
function requireIdWrapper() {
  if (hasRequiredIdWrapper) return IdWrapper;
  hasRequiredIdWrapper = 1;
  Object.defineProperty(IdWrapper, "__esModule", { value: true });
  IdWrapper.IdWrapper = void 0;
  let IdWrapper$1 = class IdWrapper2 {
    static #counter = 0;
    #id;
    constructor() {
      this.#id = ++IdWrapper2.#counter;
    }
    get id() {
      return this.#id;
    }
  };
  IdWrapper.IdWrapper = IdWrapper$1;
  return IdWrapper;
}
var events$1 = {};
var hasRequiredEvents$1;
function requireEvents$1() {
  if (hasRequiredEvents$1) return events$1;
  hasRequiredEvents$1 = 1;
  Object.defineProperty(events$1, "__esModule", { value: true });
  events$1.isCdpEvent = isCdpEvent;
  events$1.isDeprecatedCdpEvent = isDeprecatedCdpEvent;
  events$1.assertSupportedEvent = assertSupportedEvent;
  const protocol_js_1 = requireProtocol();
  function isCdpEvent(name) {
    return name.split(".").at(0)?.startsWith(protocol_js_1.ChromiumBidi.BiDiModule.Cdp) ?? false;
  }
  function isDeprecatedCdpEvent(name) {
    return name.split(".").at(0)?.startsWith(protocol_js_1.ChromiumBidi.BiDiModule.DeprecatedCdp) ?? false;
  }
  function assertSupportedEvent(name) {
    if (!protocol_js_1.ChromiumBidi.EVENT_NAMES.has(name) && !isCdpEvent(name) && !isDeprecatedCdpEvent(name)) {
      throw new protocol_js_1.InvalidArgumentException(`Unknown event: ${name}`);
    }
  }
  return events$1;
}
var SubscriptionManager = {};
var hasRequiredSubscriptionManager;
function requireSubscriptionManager() {
  if (hasRequiredSubscriptionManager) return SubscriptionManager;
  hasRequiredSubscriptionManager = 1;
  Object.defineProperty(SubscriptionManager, "__esModule", { value: true });
  SubscriptionManager.SubscriptionManager = void 0;
  SubscriptionManager.cartesianProduct = cartesianProduct;
  SubscriptionManager.unrollEvents = unrollEvents;
  SubscriptionManager.difference = difference;
  const protocol_js_1 = requireProtocol();
  const uuid_js_1 = requireUuid();
  function cartesianProduct(...a) {
    return a.reduce((a2, b) => a2.flatMap((d2) => b.map((e2) => [d2, e2].flat())));
  }
  function unrollEvents(events2) {
    const allEvents = /* @__PURE__ */ new Set();
    function addEvents(events3) {
      for (const event of events3) {
        allEvents.add(event);
      }
    }
    for (const event of events2) {
      switch (event) {
        case protocol_js_1.ChromiumBidi.BiDiModule.Bluetooth:
          addEvents(Object.values(protocol_js_1.ChromiumBidi.Bluetooth.EventNames));
          break;
        case protocol_js_1.ChromiumBidi.BiDiModule.BrowsingContext:
          addEvents(Object.values(protocol_js_1.ChromiumBidi.BrowsingContext.EventNames));
          break;
        case protocol_js_1.ChromiumBidi.BiDiModule.Log:
          addEvents(Object.values(protocol_js_1.ChromiumBidi.Log.EventNames));
          break;
        case protocol_js_1.ChromiumBidi.BiDiModule.Network:
          addEvents(Object.values(protocol_js_1.ChromiumBidi.Network.EventNames));
          break;
        case protocol_js_1.ChromiumBidi.BiDiModule.Script:
          addEvents(Object.values(protocol_js_1.ChromiumBidi.Script.EventNames));
          break;
        default:
          allEvents.add(event);
      }
    }
    return allEvents.values();
  }
  let SubscriptionManager$1 = class SubscriptionManager {
    #subscriptions = [];
    #knownSubscriptionIds = /* @__PURE__ */ new Set();
    #browsingContextStorage;
    constructor(browsingContextStorage) {
      this.#browsingContextStorage = browsingContextStorage;
    }
    getChannelsSubscribedToEvent(eventName, contextId) {
      const channels = /* @__PURE__ */ new Map();
      for (const subscription of this.#subscriptions) {
        if (this.#isSubscribedTo(subscription, eventName, contextId)) {
          channels.set(JSON.stringify(subscription.channel), subscription.channel);
        }
      }
      return Array.from(channels.values());
    }
    getChannelsSubscribedToEventGlobally(eventName) {
      const channels = /* @__PURE__ */ new Map();
      for (const subscription of this.#subscriptions) {
        if (this.#isSubscribedTo(subscription, eventName)) {
          channels.set(JSON.stringify(subscription.channel), subscription.channel);
        }
      }
      return Array.from(channels.values());
    }
    #isSubscribedTo(subscription, moduleOrEvent, browsingContextId) {
      let includesEvent = false;
      for (const eventName of subscription.eventNames) {
        if (
          // Event explicitly subscribed
          eventName === moduleOrEvent || // Event subscribed via module
          eventName === moduleOrEvent.split(".").at(0) || // Event explicitly subscribed compared to module
          eventName.split(".").at(0) === moduleOrEvent
        ) {
          includesEvent = true;
          break;
        }
      }
      if (!includesEvent) {
        return false;
      }
      if (subscription.userContextIds.size !== 0) {
        if (!browsingContextId) {
          return false;
        }
        const context = this.#browsingContextStorage.findContext(browsingContextId);
        if (!context) {
          return false;
        }
        return subscription.userContextIds.has(context.userContext);
      }
      if (subscription.topLevelTraversableIds.size !== 0) {
        if (!browsingContextId) {
          return false;
        }
        const topLevelContext = this.#browsingContextStorage.findTopLevelContextId(browsingContextId);
        return topLevelContext !== null && subscription.topLevelTraversableIds.has(topLevelContext);
      }
      return true;
    }
    isSubscribedTo(moduleOrEvent, contextId) {
      for (const subscription of this.#subscriptions) {
        if (this.#isSubscribedTo(subscription, moduleOrEvent, contextId)) {
          return true;
        }
      }
      return false;
    }
    /**
     * Subscribes to event in the given context and channel.
     * @param {EventNames} event
     * @param {BrowsingContext.BrowsingContext | null} contextId
     * @param {BidiPlusChannel} channel
     * @return {SubscriptionItem[]} List of
     * subscriptions. If the event is a whole module, it will return all the specific
     * events. If the contextId is null, it will return all the top-level contexts which were
     * not subscribed before the command.
     */
    subscribe(eventNames, contextIds, userContextIds, channel) {
      const subscription = {
        id: (0, uuid_js_1.uuidv4)(),
        eventNames: new Set(unrollEvents(eventNames)),
        topLevelTraversableIds: new Set(contextIds.map((contextId) => {
          const topLevelContext = this.#browsingContextStorage.findTopLevelContextId(contextId);
          if (!topLevelContext) {
            throw new protocol_js_1.NoSuchFrameException(`Top-level navigable not found for context id ${contextId}`);
          }
          return topLevelContext;
        })),
        userContextIds: new Set(userContextIds),
        channel
      };
      this.#subscriptions.push(subscription);
      this.#knownSubscriptionIds.add(subscription.id);
      return subscription;
    }
    /**
     * Unsubscribes atomically from all events in the given contexts and channel.
     *
     * This is a legacy spec branch to unsubscribe by attributes.
     */
    unsubscribe(inputEventNames, inputContextIds, channel) {
      const eventNames = new Set(unrollEvents(inputEventNames));
      this.#browsingContextStorage.verifyContextsList(inputContextIds);
      const topLevelTraversables = new Set(inputContextIds.map((contextId) => {
        const topLevelContext = this.#browsingContextStorage.findTopLevelContextId(contextId);
        if (!topLevelContext) {
          throw new protocol_js_1.NoSuchFrameException(`Top-level navigable not found for context id ${contextId}`);
        }
        return topLevelContext;
      }));
      const isGlobalUnsubscribe = topLevelTraversables.size === 0;
      const newSubscriptions = [];
      const eventsMatched = /* @__PURE__ */ new Set();
      const contextsMatched = /* @__PURE__ */ new Set();
      for (const subscription of this.#subscriptions) {
        if (JSON.stringify(subscription.channel) !== JSON.stringify(channel)) {
          newSubscriptions.push(subscription);
          continue;
        }
        if (subscription.userContextIds.size !== 0) {
          newSubscriptions.push(subscription);
          continue;
        }
        if (intersection(subscription.eventNames, eventNames).size === 0) {
          newSubscriptions.push(subscription);
          continue;
        }
        if (isGlobalUnsubscribe) {
          if (subscription.topLevelTraversableIds.size !== 0) {
            newSubscriptions.push(subscription);
            continue;
          }
          const subscriptionEventNames = new Set(subscription.eventNames);
          for (const eventName of eventNames) {
            if (subscriptionEventNames.has(eventName)) {
              eventsMatched.add(eventName);
              subscriptionEventNames.delete(eventName);
            }
          }
          if (subscriptionEventNames.size !== 0) {
            newSubscriptions.push({
              ...subscription,
              eventNames: subscriptionEventNames
            });
          }
        } else {
          if (subscription.topLevelTraversableIds.size === 0) {
            newSubscriptions.push(subscription);
            continue;
          }
          const eventMap = /* @__PURE__ */ new Map();
          for (const eventName of subscription.eventNames) {
            eventMap.set(eventName, new Set(subscription.topLevelTraversableIds));
          }
          for (const eventName of eventNames) {
            const eventContextSet = eventMap.get(eventName);
            if (!eventContextSet) {
              continue;
            }
            for (const toRemoveId of topLevelTraversables) {
              if (eventContextSet.has(toRemoveId)) {
                contextsMatched.add(toRemoveId);
                eventsMatched.add(eventName);
                eventContextSet.delete(toRemoveId);
              }
            }
            if (eventContextSet.size === 0) {
              eventMap.delete(eventName);
            }
          }
          for (const [eventName, remainingContextIds] of eventMap) {
            const partialSubscription = {
              id: subscription.id,
              channel: subscription.channel,
              eventNames: /* @__PURE__ */ new Set([eventName]),
              topLevelTraversableIds: remainingContextIds,
              userContextIds: /* @__PURE__ */ new Set()
            };
            newSubscriptions.push(partialSubscription);
          }
        }
      }
      if (!equal(eventsMatched, eventNames)) {
        throw new protocol_js_1.InvalidArgumentException("No subscription found");
      }
      if (!isGlobalUnsubscribe && !equal(contextsMatched, topLevelTraversables)) {
        throw new protocol_js_1.InvalidArgumentException("No subscription found");
      }
      this.#subscriptions = newSubscriptions;
    }
    /**
     * Unsubscribes by subscriptionId.
     */
    unsubscribeById(subscriptionIds) {
      const subscriptionIdsSet = new Set(subscriptionIds);
      const unknownIds = difference(subscriptionIdsSet, this.#knownSubscriptionIds);
      if (unknownIds.size !== 0) {
        throw new protocol_js_1.InvalidArgumentException("No subscription found");
      }
      this.#subscriptions = this.#subscriptions.filter((subscription) => {
        return !subscriptionIdsSet.has(subscription.id);
      });
      this.#knownSubscriptionIds = difference(this.#knownSubscriptionIds, subscriptionIdsSet);
    }
  };
  SubscriptionManager.SubscriptionManager = SubscriptionManager$1;
  function intersection(setA, setB) {
    const result = /* @__PURE__ */ new Set();
    for (const a of setA) {
      if (setB.has(a)) {
        result.add(a);
      }
    }
    return result;
  }
  function difference(setA, setB) {
    const result = /* @__PURE__ */ new Set();
    for (const a of setA) {
      if (!setB.has(a)) {
        result.add(a);
      }
    }
    return result;
  }
  function equal(setA, setB) {
    if (setA.size !== setB.size) {
      return false;
    }
    for (const a of setA) {
      if (!setB.has(a)) {
        return false;
      }
    }
    return true;
  }
  return SubscriptionManager;
}
var hasRequiredEventManager;
function requireEventManager() {
  if (hasRequiredEventManager) return EventManager;
  hasRequiredEventManager = 1;
  var _a;
  Object.defineProperty(EventManager, "__esModule", { value: true });
  EventManager.EventManager = void 0;
  const protocol_js_1 = requireProtocol();
  const Buffer_js_1 = requireBuffer$1();
  const DefaultMap_js_1 = requireDefaultMap();
  const EventEmitter_js_1 = requireEventEmitter$1();
  const IdWrapper_js_1 = requireIdWrapper();
  const OutgoingMessage_js_1 = requireOutgoingMessage();
  const events_js_1 = requireEvents$1();
  const SubscriptionManager_js_1 = requireSubscriptionManager();
  class EventWrapper {
    #idWrapper = new IdWrapper_js_1.IdWrapper();
    #contextId;
    #event;
    constructor(event, contextId) {
      this.#event = event;
      this.#contextId = contextId;
    }
    get id() {
      return this.#idWrapper.id;
    }
    get contextId() {
      return this.#contextId;
    }
    get event() {
      return this.#event;
    }
  }
  const eventBufferLength = /* @__PURE__ */ new Map([[protocol_js_1.ChromiumBidi.Log.EventNames.LogEntryAdded, 100]]);
  let EventManager$1 = class EventManager extends EventEmitter_js_1.EventEmitter {
    /**
     * Maps event name to a set of contexts where this event already happened.
     * Needed for getting buffered events from all the contexts in case of
     * subscripting to all contexts.
     */
    #eventToContextsMap = new DefaultMap_js_1.DefaultMap(() => /* @__PURE__ */ new Set());
    /**
     * Maps `eventName` + `browsingContext` to buffer. Used to get buffered events
     * during subscription. Channel-agnostic.
     */
    #eventBuffers = /* @__PURE__ */ new Map();
    /**
     * Maps `eventName` + `browsingContext` to  Map of json stringified channel to last id.
     * Used to avoid sending duplicated events when user
     * subscribes -> unsubscribes -> subscribes.
     */
    #lastMessageSent = /* @__PURE__ */ new Map();
    #subscriptionManager;
    #browsingContextStorage;
    /**
     * Map of event name to hooks to be called when client is subscribed to the event.
     */
    #subscribeHooks;
    #userContextStorage;
    constructor(browsingContextStorage, userContextStorage) {
      super();
      this.#browsingContextStorage = browsingContextStorage;
      this.#userContextStorage = userContextStorage;
      this.#subscriptionManager = new SubscriptionManager_js_1.SubscriptionManager(browsingContextStorage);
      this.#subscribeHooks = new DefaultMap_js_1.DefaultMap(() => []);
    }
    get subscriptionManager() {
      return this.#subscriptionManager;
    }
    /**
     * Returns consistent key to be used to access value maps.
     */
    static #getMapKey(eventName, browsingContext) {
      return JSON.stringify({ eventName, browsingContext });
    }
    addSubscribeHook(event, hook) {
      this.#subscribeHooks.get(event).push(hook);
    }
    registerEvent(event, contextId) {
      this.registerPromiseEvent(Promise.resolve({
        kind: "success",
        value: event
      }), contextId, event.method);
    }
    registerGlobalEvent(event) {
      this.registerGlobalPromiseEvent(Promise.resolve({
        kind: "success",
        value: event
      }), event.method);
    }
    registerPromiseEvent(event, contextId, eventName) {
      const eventWrapper = new EventWrapper(event, contextId);
      const sortedChannels = this.#subscriptionManager.getChannelsSubscribedToEvent(eventName, contextId);
      this.#bufferEvent(eventWrapper, eventName);
      for (const channel of sortedChannels) {
        this.emit("event", {
          message: OutgoingMessage_js_1.OutgoingMessage.createFromPromise(event, channel),
          event: eventName
        });
        this.#markEventSent(eventWrapper, channel, eventName);
      }
    }
    registerGlobalPromiseEvent(event, eventName) {
      const eventWrapper = new EventWrapper(event, null);
      const sortedChannels = this.#subscriptionManager.getChannelsSubscribedToEventGlobally(eventName);
      this.#bufferEvent(eventWrapper, eventName);
      for (const channel of sortedChannels) {
        this.emit("event", {
          message: OutgoingMessage_js_1.OutgoingMessage.createFromPromise(event, channel),
          event: eventName
        });
        this.#markEventSent(eventWrapper, channel, eventName);
      }
    }
    async subscribe(eventNames, contextIds, userContextIds, channel) {
      for (const name of eventNames) {
        (0, events_js_1.assertSupportedEvent)(name);
      }
      if (userContextIds.length && contextIds.length) {
        throw new protocol_js_1.InvalidArgumentException("Both userContexts and contexts cannot be specified.");
      }
      this.#browsingContextStorage.verifyContextsList(contextIds);
      await this.#userContextStorage.verifyUserContextIdList(userContextIds);
      const unrolledEventNames = new Set((0, SubscriptionManager_js_1.unrollEvents)(eventNames));
      const subscribeStepEvents = /* @__PURE__ */ new Map();
      const subscriptionNavigableIds = new Set(contextIds.length ? contextIds.map((contextId) => {
        const id = this.#browsingContextStorage.findTopLevelContextId(contextId);
        if (!id) {
          throw new protocol_js_1.InvalidArgumentException("Invalid context id");
        }
        return id;
      }) : this.#browsingContextStorage.getTopLevelContexts().map((c2) => c2.id));
      for (const eventName of unrolledEventNames) {
        const subscribedNavigableIds = new Set(this.#browsingContextStorage.getTopLevelContexts().map((c2) => c2.id).filter((id) => {
          return this.#subscriptionManager.isSubscribedTo(eventName, id);
        }));
        subscribeStepEvents.set(eventName, (0, SubscriptionManager_js_1.difference)(subscriptionNavigableIds, subscribedNavigableIds));
      }
      const subscription = this.#subscriptionManager.subscribe(eventNames, contextIds, userContextIds, channel);
      for (const eventName of subscription.eventNames) {
        for (const contextId of subscriptionNavigableIds) {
          for (const eventWrapper of this.#getBufferedEvents(eventName, contextId, channel)) {
            this.emit("event", {
              message: OutgoingMessage_js_1.OutgoingMessage.createFromPromise(eventWrapper.event, channel),
              event: eventName
            });
            this.#markEventSent(eventWrapper, channel, eventName);
          }
        }
      }
      for (const [eventName, contextIds2] of subscribeStepEvents) {
        for (const contextId of contextIds2) {
          this.#subscribeHooks.get(eventName).forEach((hook) => hook(contextId));
        }
      }
      await this.toggleModulesIfNeeded();
      return subscription.id;
    }
    async unsubscribe(eventNames, contextIds, channel) {
      for (const name of eventNames) {
        (0, events_js_1.assertSupportedEvent)(name);
      }
      this.#subscriptionManager.unsubscribe(eventNames, contextIds, channel);
      await this.toggleModulesIfNeeded();
    }
    async unsubscribeByIds(subscriptionIds) {
      this.#subscriptionManager.unsubscribeById(subscriptionIds);
      await this.toggleModulesIfNeeded();
    }
    async toggleModulesIfNeeded() {
      await Promise.all(this.#browsingContextStorage.getAllContexts().map(async (context) => {
        return await context.toggleModulesIfNeeded();
      }));
    }
    clearBufferedEvents(contextId) {
      for (const eventName of eventBufferLength.keys()) {
        const bufferMapKey = _a.#getMapKey(eventName, contextId);
        this.#eventBuffers.delete(bufferMapKey);
      }
    }
    /**
     * If the event is buffer-able, put it in the buffer.
     */
    #bufferEvent(eventWrapper, eventName) {
      if (!eventBufferLength.has(eventName)) {
        return;
      }
      const bufferMapKey = _a.#getMapKey(eventName, eventWrapper.contextId);
      if (!this.#eventBuffers.has(bufferMapKey)) {
        this.#eventBuffers.set(bufferMapKey, new Buffer_js_1.Buffer(eventBufferLength.get(eventName)));
      }
      this.#eventBuffers.get(bufferMapKey).add(eventWrapper);
      this.#eventToContextsMap.get(eventName).add(eventWrapper.contextId);
    }
    /**
     * If the event is buffer-able, mark it as sent to the given contextId and channel.
     */
    #markEventSent(eventWrapper, channel, eventName) {
      if (!eventBufferLength.has(eventName)) {
        return;
      }
      const lastSentMapKey = _a.#getMapKey(eventName, eventWrapper.contextId);
      const lastId = Math.max(this.#lastMessageSent.get(lastSentMapKey)?.get(JSON.stringify(channel)) ?? 0, eventWrapper.id);
      const channelMap = this.#lastMessageSent.get(lastSentMapKey);
      if (channelMap) {
        channelMap.set(JSON.stringify(channel), lastId);
      } else {
        this.#lastMessageSent.set(lastSentMapKey, /* @__PURE__ */ new Map([[JSON.stringify(channel), lastId]]));
      }
    }
    /**
     * Returns events which are buffered and not yet sent to the given channel events.
     */
    #getBufferedEvents(eventName, contextId, channel) {
      const bufferMapKey = _a.#getMapKey(eventName, contextId);
      const lastSentMessageId = this.#lastMessageSent.get(bufferMapKey)?.get(JSON.stringify(channel)) ?? -Infinity;
      const result = this.#eventBuffers.get(bufferMapKey)?.get().filter((wrapper) => wrapper.id > lastSentMessageId) ?? [];
      if (contextId === null) {
        Array.from(this.#eventToContextsMap.get(eventName).keys()).filter((_contextId) => (
          // Events without context are already in the result.
          _contextId !== null && // Events from deleted contexts should not be sent.
          this.#browsingContextStorage.hasContext(_contextId)
        )).map((_contextId) => this.#getBufferedEvents(eventName, _contextId, channel)).forEach((events2) => result.push(...events2));
      }
      return result.sort((e1, e2) => e1.id - e2.id);
    }
  };
  EventManager.EventManager = EventManager$1;
  _a = EventManager$1;
  return EventManager;
}
var hasRequiredBidiServer;
function requireBidiServer() {
  if (hasRequiredBidiServer) return BidiServer;
  hasRequiredBidiServer = 1;
  Object.defineProperty(BidiServer, "__esModule", { value: true });
  BidiServer.BidiServer = void 0;
  const EventEmitter_js_1 = requireEventEmitter$1();
  const log_js_1 = requireLog();
  const ProcessingQueue_js_1 = requireProcessingQueue();
  const CommandProcessor_js_1 = requireCommandProcessor();
  const BluetoothProcessor_js_1 = requireBluetoothProcessor();
  const UserContextStorage_js_1 = requireUserContextStorage();
  const CdpTargetManager_js_1 = requireCdpTargetManager();
  const BrowsingContextStorage_js_1 = requireBrowsingContextStorage();
  const NetworkStorage_js_1 = requireNetworkStorage();
  const PreloadScriptStorage_js_1 = requirePreloadScriptStorage();
  const RealmStorage_js_1 = requireRealmStorage();
  const EventManager_js_1 = requireEventManager();
  let BidiServer$1 = class BidiServer2 extends EventEmitter_js_1.EventEmitter {
    #messageQueue;
    #transport;
    #commandProcessor;
    #eventManager;
    #browsingContextStorage = new BrowsingContextStorage_js_1.BrowsingContextStorage();
    #realmStorage = new RealmStorage_js_1.RealmStorage();
    #preloadScriptStorage = new PreloadScriptStorage_js_1.PreloadScriptStorage();
    #bluetoothProcessor;
    #logger;
    #handleIncomingMessage = (message) => {
      void this.#commandProcessor.processCommand(message).catch((error) => {
        this.#logger?.(log_js_1.LogType.debugError, error);
      });
    };
    #processOutgoingMessage = async (messageEntry) => {
      const message = { ...messageEntry.message, ...messageEntry.channel };
      await this.#transport.sendMessage(message);
    };
    constructor(bidiTransport, cdpConnection, browserCdpClient, selfTargetId, defaultUserContextId, parser, logger2) {
      super();
      this.#logger = logger2;
      this.#messageQueue = new ProcessingQueue_js_1.ProcessingQueue(this.#processOutgoingMessage, this.#logger);
      this.#transport = bidiTransport;
      this.#transport.setOnMessage(this.#handleIncomingMessage);
      const userUserContextStorage = new UserContextStorage_js_1.UserContextStorage(browserCdpClient);
      this.#eventManager = new EventManager_js_1.EventManager(this.#browsingContextStorage, userUserContextStorage);
      const networkStorage = new NetworkStorage_js_1.NetworkStorage(this.#eventManager, this.#browsingContextStorage, browserCdpClient, logger2);
      this.#bluetoothProcessor = new BluetoothProcessor_js_1.BluetoothProcessor(this.#eventManager, this.#browsingContextStorage);
      this.#commandProcessor = new CommandProcessor_js_1.CommandProcessor(cdpConnection, browserCdpClient, this.#eventManager, this.#browsingContextStorage, this.#realmStorage, this.#preloadScriptStorage, networkStorage, this.#bluetoothProcessor, userUserContextStorage, parser, async (options) => {
        await browserCdpClient.sendCommand("Security.setIgnoreCertificateErrors", {
          ignore: options.acceptInsecureCerts ?? false
        });
        new CdpTargetManager_js_1.CdpTargetManager(cdpConnection, browserCdpClient, selfTargetId, this.#eventManager, this.#browsingContextStorage, this.#realmStorage, networkStorage, this.#bluetoothProcessor, this.#preloadScriptStorage, defaultUserContextId, options?.["goog:prerenderingDisabled"] ?? false, options?.unhandledPromptBehavior, logger2);
        await browserCdpClient.sendCommand("Target.setDiscoverTargets", {
          discover: true
        });
        await browserCdpClient.sendCommand("Target.setAutoAttach", {
          autoAttach: true,
          waitForDebuggerOnStart: true,
          flatten: true,
          // Browser session should attach to tab instead of the page, so that
          // prerendering is not blocked.
          filter: [
            {
              type: "page",
              exclude: true
            },
            {}
          ]
        });
        await this.#topLevelContextsLoaded();
      }, this.#logger);
      this.#eventManager.on("event", ({ message, event }) => {
        this.emitOutgoingMessage(message, event);
      });
      this.#commandProcessor.on("response", ({ message, event }) => {
        this.emitOutgoingMessage(message, event);
      });
    }
    /**
     * Creates and starts BiDi Mapper instance.
     */
    static async createAndStart(bidiTransport, cdpConnection, browserCdpClient, selfTargetId, parser, logger2) {
      const [{ browserContextIds }, { targetInfos }] = await Promise.all([
        browserCdpClient.sendCommand("Target.getBrowserContexts"),
        browserCdpClient.sendCommand("Target.getTargets")
      ]);
      let defaultUserContextId = "default";
      for (const info of targetInfos) {
        if (info.browserContextId && !browserContextIds.includes(info.browserContextId)) {
          defaultUserContextId = info.browserContextId;
          break;
        }
      }
      const server2 = new BidiServer2(bidiTransport, cdpConnection, browserCdpClient, selfTargetId, defaultUserContextId, parser, logger2);
      return server2;
    }
    /**
     * Sends BiDi message.
     */
    emitOutgoingMessage(messageEntry, event) {
      this.#messageQueue.add(messageEntry, event);
    }
    close() {
      this.#transport.close();
    }
    async #topLevelContextsLoaded() {
      await Promise.all(this.#browsingContextStorage.getTopLevelContexts().map((c2) => c2.lifecycleLoaded()));
    }
  };
  BidiServer.BidiServer = BidiServer$1;
  return BidiServer;
}
var hasRequiredBidiMapper;
function requireBidiMapper() {
  if (hasRequiredBidiMapper) return BidiMapper;
  hasRequiredBidiMapper = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OutgoingMessage = exports.EventEmitter = exports.BidiServer = void 0;
    var BidiServer_js_1 = requireBidiServer();
    Object.defineProperty(exports, "BidiServer", { enumerable: true, get: function() {
      return BidiServer_js_1.BidiServer;
    } });
    var EventEmitter_js_1 = requireEventEmitter$1();
    Object.defineProperty(exports, "EventEmitter", { enumerable: true, get: function() {
      return EventEmitter_js_1.EventEmitter;
    } });
    var OutgoingMessage_js_1 = requireOutgoingMessage();
    Object.defineProperty(exports, "OutgoingMessage", { enumerable: true, get: function() {
      return OutgoingMessage_js_1.OutgoingMessage;
    } });
  })(BidiMapper);
  return BidiMapper;
}
var CdpConnection = {};
var CdpClient = {};
var hasRequiredCdpClient;
function requireCdpClient() {
  if (hasRequiredCdpClient) return CdpClient;
  hasRequiredCdpClient = 1;
  Object.defineProperty(CdpClient, "__esModule", { value: true });
  CdpClient.MapperCdpClient = CdpClient.CloseError = void 0;
  const EventEmitter_js_1 = requireEventEmitter$1();
  class CloseError extends Error {
  }
  CdpClient.CloseError = CloseError;
  class MapperCdpClient extends EventEmitter_js_1.EventEmitter {
    #cdpConnection;
    #sessionId;
    constructor(cdpConnection, sessionId) {
      super();
      this.#cdpConnection = cdpConnection;
      this.#sessionId = sessionId;
    }
    get sessionId() {
      return this.#sessionId;
    }
    sendCommand(method, ...params) {
      return this.#cdpConnection.sendCommand(method, params[0], this.#sessionId);
    }
    isCloseError(error) {
      return error instanceof CloseError;
    }
  }
  CdpClient.MapperCdpClient = MapperCdpClient;
  return CdpClient;
}
var hasRequiredCdpConnection;
function requireCdpConnection() {
  if (hasRequiredCdpConnection) return CdpConnection;
  hasRequiredCdpConnection = 1;
  var _a;
  Object.defineProperty(CdpConnection, "__esModule", { value: true });
  CdpConnection.MapperCdpConnection = void 0;
  const log_js_1 = requireLog();
  const CdpClient_js_1 = requireCdpClient();
  class MapperCdpConnection {
    static LOGGER_PREFIX_RECV = `${log_js_1.LogType.cdp}:RECV ◂`;
    static LOGGER_PREFIX_SEND = `${log_js_1.LogType.cdp}:SEND ▸`;
    #mainBrowserCdpClient;
    #transport;
    /** Map from session ID to CdpClient.
     * `undefined` points to the main browser session. */
    #sessionCdpClients = /* @__PURE__ */ new Map();
    #commandCallbacks = /* @__PURE__ */ new Map();
    #logger;
    #nextId = 0;
    constructor(transport2, logger2) {
      this.#transport = transport2;
      this.#logger = logger2;
      this.#transport.setOnMessage(this.#onMessage);
      this.#mainBrowserCdpClient = this.#createCdpClient(void 0);
    }
    /** Closes the connection to the browser. */
    close() {
      this.#transport.close();
      for (const [, { reject, error }] of this.#commandCallbacks) {
        reject(error);
      }
      this.#commandCallbacks.clear();
      this.#sessionCdpClients.clear();
    }
    async createBrowserSession() {
      const { sessionId } = await this.#mainBrowserCdpClient.sendCommand("Target.attachToBrowserTarget");
      return this.#createCdpClient(sessionId);
    }
    /**
     * Gets a CdpClient instance attached to the given session ID,
     * or null if the session is not attached.
     */
    getCdpClient(sessionId) {
      const cdpClient = this.#sessionCdpClients.get(sessionId);
      if (!cdpClient) {
        throw new Error(`Unknown CDP session ID: ${sessionId}`);
      }
      return cdpClient;
    }
    sendCommand(method, params, sessionId) {
      return new Promise((resolve2, reject) => {
        const id = this.#nextId++;
        this.#commandCallbacks.set(id, {
          sessionId,
          resolve: resolve2,
          reject,
          error: new CdpClient_js_1.CloseError(`${method} ${JSON.stringify(params)} ${sessionId ?? ""} call rejected because the connection has been closed.`)
        });
        const cdpMessage = { id, method, params };
        if (sessionId) {
          cdpMessage.sessionId = sessionId;
        }
        void this.#transport.sendMessage(JSON.stringify(cdpMessage))?.catch((error) => {
          this.#logger?.(log_js_1.LogType.debugError, error);
          this.#transport.close();
        });
        this.#logger?.(_a.LOGGER_PREFIX_SEND, cdpMessage);
      });
    }
    #onMessage = (json2) => {
      const message = JSON.parse(json2);
      this.#logger?.(_a.LOGGER_PREFIX_RECV, message);
      if (message.method === "Target.attachedToTarget") {
        const { sessionId } = message.params;
        this.#createCdpClient(sessionId);
      }
      if (message.id !== void 0) {
        const callbacks = this.#commandCallbacks.get(message.id);
        this.#commandCallbacks.delete(message.id);
        if (callbacks) {
          if (message.result) {
            callbacks.resolve(message.result);
          } else if (message.error) {
            callbacks.reject(message.error);
          }
        }
      } else if (message.method) {
        const client = this.#sessionCdpClients.get(message.sessionId ?? void 0);
        client?.emit(message.method, message.params || {});
        if (message.method === "Target.detachedFromTarget") {
          const { sessionId } = message.params;
          const client2 = this.#sessionCdpClients.get(sessionId);
          if (client2) {
            this.#sessionCdpClients.delete(sessionId);
            client2.removeAllListeners();
          }
          for (const callback of this.#commandCallbacks.values()) {
            if (callback.sessionId === sessionId) {
              callback.reject(callback.error);
            }
          }
        }
      }
    };
    /**
     * Creates a new CdpClient instance for the given session ID.
     * @param sessionId either a string, or undefined for the main browser session.
     * The main browser session is used only to create new browser sessions.
     * @private
     */
    #createCdpClient(sessionId) {
      const cdpClient = new CdpClient_js_1.MapperCdpClient(this, sessionId);
      this.#sessionCdpClients.set(sessionId, cdpClient);
      return cdpClient;
    }
  }
  CdpConnection.MapperCdpConnection = MapperCdpConnection;
  _a = MapperCdpConnection;
  return CdpConnection;
}
var hasRequiredBidiOverCdp;
function requireBidiOverCdp() {
  if (hasRequiredBidiOverCdp) return bidiOverCdp;
  hasRequiredBidiOverCdp = 1;
  Object.defineProperty(bidiOverCdp, "__esModule", {
    value: true
  });
  bidiOverCdp.connectBidiOverCdp = connectBidiOverCdp;
  var bidiMapper = _interopRequireWildcard(requireBidiMapper());
  var bidiCdpConnection = _interopRequireWildcard(requireCdpConnection());
  var _debugLogger = requireDebugLogger();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  const bidiServerLogger = (prefix, ...args) => {
    _debugLogger.debugLogger.log(prefix, args);
  };
  async function connectBidiOverCdp(cdp2) {
    let server2 = void 0;
    const bidiTransport = new BidiTransportImpl();
    const bidiConnection2 = new BidiConnection(bidiTransport, () => {
      var _server;
      return (_server = server2) === null || _server === void 0 ? void 0 : _server.close();
    });
    const cdpTransportImpl = new CdpTransportImpl(cdp2);
    const cdpConnection = new bidiCdpConnection.MapperCdpConnection(cdpTransportImpl, bidiServerLogger);
    cdp2.onclose = () => {
      var _bidiConnection$onclo;
      return (_bidiConnection$onclo = bidiConnection2.onclose) === null || _bidiConnection$onclo === void 0 ? void 0 : _bidiConnection$onclo.call(bidiConnection2);
    };
    server2 = await bidiMapper.BidiServer.createAndStart(
      bidiTransport,
      cdpConnection,
      await cdpConnection.createBrowserSession(),
      /* selfTargetId= */
      "",
      void 0,
      bidiServerLogger
    );
    return bidiConnection2;
  }
  class BidiTransportImpl {
    constructor() {
      this._handler = void 0;
      this._bidiConnection = void 0;
    }
    setOnMessage(handler) {
      this._handler = handler;
    }
    sendMessage(message) {
      var _this$_bidiConnection, _this$_bidiConnection2;
      return (_this$_bidiConnection = (_this$_bidiConnection2 = this._bidiConnection).onmessage) === null || _this$_bidiConnection === void 0 ? void 0 : _this$_bidiConnection.call(_this$_bidiConnection2, message);
    }
    close() {
      var _this$_bidiConnection3, _this$_bidiConnection4;
      (_this$_bidiConnection3 = (_this$_bidiConnection4 = this._bidiConnection).onclose) === null || _this$_bidiConnection3 === void 0 || _this$_bidiConnection3.call(_this$_bidiConnection4);
    }
  }
  class BidiConnection {
    constructor(bidiTransport, closeCallback) {
      this._bidiTransport = void 0;
      this._closeCallback = void 0;
      this.onmessage = void 0;
      this.onclose = void 0;
      this._bidiTransport = bidiTransport;
      this._bidiTransport._bidiConnection = this;
      this._closeCallback = closeCallback;
    }
    send(s2) {
      var _this$_bidiTransport$, _this$_bidiTransport;
      (_this$_bidiTransport$ = (_this$_bidiTransport = this._bidiTransport)._handler) === null || _this$_bidiTransport$ === void 0 || _this$_bidiTransport$.call(_this$_bidiTransport, s2);
    }
    close() {
      this._closeCallback();
    }
  }
  class CdpTransportImpl {
    constructor(connection2) {
      this._connection = void 0;
      this._handler = void 0;
      this._bidiConnection = void 0;
      this._connection = connection2;
      this._connection.onmessage = (message) => {
        var _this$_handler;
        (_this$_handler = this._handler) === null || _this$_handler === void 0 || _this$_handler.call(this, JSON.stringify(message));
      };
    }
    setOnMessage(handler) {
      this._handler = handler;
    }
    sendMessage(message) {
      return this._connection.send(JSON.parse(message));
    }
    close() {
      this._connection.close();
    }
  }
  return bidiOverCdp;
}
var hasRequiredBidiChromium;
function requireBidiChromium() {
  if (hasRequiredBidiChromium) return bidiChromium;
  hasRequiredBidiChromium = 1;
  Object.defineProperty(bidiChromium, "__esModule", {
    value: true
  });
  bidiChromium.BidiChromium = void 0;
  var _os = _interopRequireDefault(require$$1$3);
  var _utils = requireUtils();
  var _ascii = requireAscii();
  var _browserType = requireBrowserType$1();
  var _bidiBrowser = requireBidiBrowser();
  var _bidiConnection = requireBidiConnection();
  var _chromiumSwitches = requireChromiumSwitches();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  class BidiChromium extends _browserType.BrowserType {
    constructor(parent) {
      super(parent, "bidi");
      this._useBidi = true;
    }
    async connectToTransport(transport2, options) {
      const bidiTransport = await requireBidiOverCdp().connectBidiOverCdp(transport2);
      transport2[kBidiOverCdpWrapper] = bidiTransport;
      return _bidiBrowser.BidiBrowser.connect(this.attribution.playwright, bidiTransport, options);
    }
    doRewriteStartupLog(error) {
      if (!error.logs) return error;
      if (error.logs.includes("Missing X server")) error.logs = "\n" + (0, _ascii.wrapInASCIIBox)(_browserType.kNoXServerRunningError, 1);
      if (!error.logs.includes("crbug.com/357670") && !error.logs.includes("No usable sandbox!") && !error.logs.includes("crbug.com/638180")) return error;
      error.logs = [`Chromium sandboxing failed!`, `================================`, `To avoid the sandboxing issue, do either of the following:`, `  - (preferred): Configure your environment to support sandboxing`, `  - (alternative): Launch Chromium without sandbox using 'chromiumSandbox: false' option`, `================================`, ``].join("\n");
      return error;
    }
    amendEnvironment(env2, userDataDir, executable, browserArguments) {
      return env2;
    }
    attemptToGracefullyCloseBrowser(transport2) {
      const bidiTransport = transport2[kBidiOverCdpWrapper];
      if (bidiTransport) transport2 = bidiTransport;
      transport2.send({
        method: "browser.close",
        params: {},
        id: _bidiConnection.kBrowserCloseMessageId
      });
    }
    defaultArgs(options, isPersistent, userDataDir) {
      const chromeArguments = this._innerDefaultArgs(options);
      chromeArguments.push(`--user-data-dir=${userDataDir}`);
      chromeArguments.push("--remote-debugging-port=0");
      if (isPersistent) chromeArguments.push("about:blank");
      else chromeArguments.push("--no-startup-window");
      return chromeArguments;
    }
    readyState(options) {
      (0, _utils.assert)(options.useWebSocket);
      return new ChromiumReadyState();
    }
    _innerDefaultArgs(options) {
      const {
        args = []
      } = options;
      const userDataDirArg = args.find((arg) => arg.startsWith("--user-data-dir"));
      if (userDataDirArg) throw this._createUserDataDirArgMisuseError("--user-data-dir");
      if (args.find((arg) => arg.startsWith("--remote-debugging-pipe"))) throw new Error("Playwright manages remote debugging connection itself.");
      if (args.find((arg) => !arg.startsWith("-"))) throw new Error("Arguments can not specify page to be opened");
      const chromeArguments = [..._chromiumSwitches.chromiumSwitches];
      if (_os.default.platform() === "darwin") {
        chromeArguments.push("--enable-use-zoom-for-dsf=false");
        if (options.headless) chromeArguments.push("--use-angle");
      }
      if (options.devtools) chromeArguments.push("--auto-open-devtools-for-tabs");
      if (options.headless) {
        chromeArguments.push("--headless");
        chromeArguments.push("--hide-scrollbars", "--mute-audio", "--blink-settings=primaryHoverType=2,availableHoverTypes=2,primaryPointerType=4,availablePointerTypes=4");
      }
      if (options.chromiumSandbox !== true) chromeArguments.push("--no-sandbox");
      const proxy = options.proxyOverride || options.proxy;
      if (proxy) {
        const proxyURL = new URL(proxy.server);
        const isSocks = proxyURL.protocol === "socks5:";
        if (isSocks && !this.attribution.playwright.options.socksProxyPort) {
          chromeArguments.push(`--host-resolver-rules="MAP * ~NOTFOUND , EXCLUDE ${proxyURL.hostname}"`);
        }
        chromeArguments.push(`--proxy-server=${proxy.server}`);
        const proxyBypassRules = [];
        if (this.attribution.playwright.options.socksProxyPort) proxyBypassRules.push("<-loopback>");
        if (proxy.bypass) proxyBypassRules.push(...proxy.bypass.split(",").map((t) => t.trim()).map((t) => t.startsWith(".") ? "*" + t : t));
        if (!process.env.PLAYWRIGHT_DISABLE_FORCED_CHROMIUM_PROXIED_LOOPBACK && !proxyBypassRules.includes("<-loopback>")) proxyBypassRules.push("<-loopback>");
        if (proxyBypassRules.length > 0) chromeArguments.push(`--proxy-bypass-list=${proxyBypassRules.join(";")}`);
      }
      chromeArguments.push(...args);
      return chromeArguments;
    }
  }
  bidiChromium.BidiChromium = BidiChromium;
  class ChromiumReadyState extends _browserType.BrowserReadyState {
    onBrowserOutput(message) {
      const match = message.match(/DevTools listening on (.*)/);
      if (match) this._wsEndpoint.resolve(match[1]);
    }
  }
  const kBidiOverCdpWrapper = Symbol("kBidiConnectionWrapper");
  return bidiChromium;
}
var bidiFirefox = {};
var firefoxPrefs = {};
var hasRequiredFirefoxPrefs;
function requireFirefoxPrefs() {
  if (hasRequiredFirefoxPrefs) return firefoxPrefs;
  hasRequiredFirefoxPrefs = 1;
  Object.defineProperty(firefoxPrefs, "__esModule", {
    value: true
  });
  firefoxPrefs.createProfile = createProfile;
  var _fs = _interopRequireDefault(require$$0$2);
  var _path2 = _interopRequireDefault(require$$1$1);
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  /**
   * @license
   * Copyright 2023 Google Inc.
   * SPDX-License-Identifier: Apache-2.0
   */
  async function createProfile(options) {
    if (!_fs.default.existsSync(options.path)) {
      await _fs.default.promises.mkdir(options.path, {
        recursive: true
      });
    }
    await writePreferences({
      preferences: {
        ...defaultProfilePreferences(options.preferences),
        ...options.preferences
      },
      path: options.path
    });
  }
  function defaultProfilePreferences(extraPrefs) {
    const server2 = "dummy.test";
    const defaultPrefs = {
      // Make sure Shield doesn't hit the network.
      "app.normandy.api_url": "",
      // Disable Firefox old build background check
      "app.update.checkInstallTime": false,
      // Disable automatically upgrading Firefox
      "app.update.disabledForTesting": true,
      // Increase the APZ content response timeout to 1 minute
      "apz.content_response_timeout": 6e4,
      // Prevent various error message on the console
      // jest-puppeteer asserts that no error message is emitted by the console
      "browser.contentblocking.features.standard": "-tp,tpPrivate,cookieBehavior0,-cm,-fp",
      // Enable the dump function: which sends messages to the system
      // console
      // https://bugzilla.mozilla.org/show_bug.cgi?id=1543115
      "browser.dom.window.dump.enabled": true,
      // Make sure newtab weather doesn't hit the network to retrieve weather data.
      "browser.newtabpage.activity-stream.discoverystream.region-weather-config": "",
      // Make sure newtab wallpapers don't hit the network to retrieve wallpaper data.
      "browser.newtabpage.activity-stream.newtabWallpapers.enabled": false,
      "browser.newtabpage.activity-stream.newtabWallpapers.v2.enabled": false,
      // Make sure Topsites doesn't hit the network to retrieve sponsored tiles.
      "browser.newtabpage.activity-stream.showSponsoredTopSites": false,
      // Disable topstories
      "browser.newtabpage.activity-stream.feeds.system.topstories": false,
      // Always display a blank page
      "browser.newtabpage.enabled": false,
      // Background thumbnails in particular cause grief: and disabling
      // thumbnails in general cannot hurt
      "browser.pagethumbnails.capturing_disabled": true,
      // Disable safebrowsing components.
      "browser.safebrowsing.blockedURIs.enabled": false,
      "browser.safebrowsing.downloads.enabled": false,
      "browser.safebrowsing.malware.enabled": false,
      "browser.safebrowsing.phishing.enabled": false,
      // Disable updates to search engines.
      "browser.search.update": false,
      // Do not restore the last open set of tabs if the browser has crashed
      "browser.sessionstore.resume_from_crash": false,
      // Skip check for default browser on startup
      "browser.shell.checkDefaultBrowser": false,
      // Disable newtabpage
      "browser.startup.homepage": "about:blank",
      // Do not redirect user when a milstone upgrade of Firefox is detected
      "browser.startup.homepage_override.mstone": "ignore",
      // Start with a blank page about:blank
      "browser.startup.page": 0,
      // Do not allow background tabs to be zombified on Android: otherwise for
      // tests that open additional tabs: the test harness tab itself might get
      // unloaded
      "browser.tabs.disableBackgroundZombification": false,
      // Do not warn when closing all other open tabs
      "browser.tabs.warnOnCloseOtherTabs": false,
      // Do not warn when multiple tabs will be opened
      "browser.tabs.warnOnOpen": false,
      // Do not automatically offer translations, as tests do not expect this.
      "browser.translations.automaticallyPopup": false,
      // Disable the UI tour.
      "browser.uitour.enabled": false,
      // Turn off search suggestions in the location bar so as not to trigger
      // network connections.
      "browser.urlbar.suggest.searches": false,
      // Disable first run splash page on Windows 10
      "browser.usedOnWindows10.introURL": "",
      // Do not warn on quitting Firefox
      "browser.warnOnQuit": false,
      // Defensively disable data reporting systems
      "datareporting.healthreport.documentServerURI": `http://${server2}/dummy/healthreport/`,
      "datareporting.healthreport.logging.consoleEnabled": false,
      "datareporting.healthreport.service.enabled": false,
      "datareporting.healthreport.service.firstRun": false,
      "datareporting.healthreport.uploadEnabled": false,
      // Do not show datareporting policy notifications which can interfere with tests
      "datareporting.policy.dataSubmissionEnabled": false,
      "datareporting.policy.dataSubmissionPolicyBypassNotification": true,
      // DevTools JSONViewer sometimes fails to load dependencies with its require.js.
      // This doesn't affect Puppeteer but spams console (Bug 1424372)
      "devtools.jsonview.enabled": false,
      // Disable popup-blocker
      "dom.disable_open_during_load": false,
      // Enable the support for File object creation in the content process
      // Required for |Page.setFileInputFiles| protocol method.
      "dom.file.createInChild": true,
      // Disable the ProcessHangMonitor
      "dom.ipc.reportProcessHangs": false,
      // Disable slow script dialogues
      "dom.max_chrome_script_run_time": 0,
      "dom.max_script_run_time": 0,
      // Disable background timer throttling to allow tests to run in parallel
      // without a decrease in performance.
      "dom.min_background_timeout_value": 0,
      "dom.min_background_timeout_value_without_budget_throttling": 0,
      "dom.timeout.enable_budget_timer_throttling": false,
      // Disable HTTPS-First upgrades
      "dom.security.https_first": false,
      // Only load extensions from the application and user profile
      // AddonManager.SCOPE_PROFILE + AddonManager.SCOPE_APPLICATION
      "extensions.autoDisableScopes": 0,
      "extensions.enabledScopes": 5,
      // Disable metadata caching for installed add-ons by default
      "extensions.getAddons.cache.enabled": false,
      // Disable installing any distribution extensions or add-ons.
      "extensions.installDistroAddons": false,
      // Disabled screenshots extension
      "extensions.screenshots.disabled": true,
      // Turn off extension updates so they do not bother tests
      "extensions.update.enabled": false,
      // Turn off extension updates so they do not bother tests
      "extensions.update.notifyUser": false,
      // Make sure opening about:addons will not hit the network
      "extensions.webservice.discoverURL": `http://${server2}/dummy/discoveryURL`,
      // Allow the application to have focus even it runs in the background
      "focusmanager.testmode": true,
      // Disable useragent updates
      "general.useragent.updates.enabled": false,
      // Always use network provider for geolocation tests so we bypass the
      // macOS dialog raised by the corelocation provider
      "geo.provider.testing": true,
      // Do not scan Wifi
      "geo.wifi.scan": false,
      // No hang monitor
      "hangmonitor.timeout": 0,
      // Show chrome errors and warnings in the error console
      "javascript.options.showInConsole": true,
      // Do not throttle rendering (requestAnimationFrame) in background tabs
      "layout.testing.top-level-always-active": true,
      // Disable download and usage of OpenH264: and Widevine plugins
      "media.gmp-manager.updateEnabled": false,
      // Disable the GFX sanity window
      "media.sanity-test.disabled": true,
      // Disable connectivity service pings
      "network.connectivity-service.enabled": false,
      // Disable experimental feature that is only available in Nightly
      "network.cookie.sameSite.laxByDefault": false,
      // Do not prompt for temporary redirects
      "network.http.prompt-temp-redirect": false,
      // Disable speculative connections so they are not reported as leaking
      // when they are hanging around
      "network.http.speculative-parallel-limit": 0,
      // Do not automatically switch between offline and online
      "network.manage-offline-status": false,
      // Make sure SNTP requests do not hit the network
      "network.sntp.pools": server2,
      // Disable Flash.
      "plugin.state.flash": 0,
      "privacy.trackingprotection.enabled": false,
      // Can be removed once Firefox 89 is no longer supported
      // https://bugzilla.mozilla.org/show_bug.cgi?id=1710839
      "remote.enabled": true,
      // Don't do network connections for mitm priming
      "security.certerrors.mitm.priming.enabled": false,
      // Local documents have access to all other local documents,
      // including directory listings
      "security.fileuri.strict_origin_policy": false,
      // Do not wait for the notification button security delay
      "security.notification_enable_delay": 0,
      // Do not automatically fill sign-in forms with known usernames and
      // passwords
      "signon.autofillForms": false,
      // Disable password capture, so that tests that include forms are not
      // influenced by the presence of the persistent doorhanger notification
      "signon.rememberSignons": false,
      // Disable first-run welcome page
      "startup.homepage_welcome_url": "about:blank",
      // Disable first-run welcome page
      "startup.homepage_welcome_url.additional": "",
      // Disable browser animations (tabs, fullscreen, sliding alerts)
      "toolkit.cosmeticAnimations.enabled": false,
      // Prevent starting into safe mode after application crashes
      "toolkit.startup.max_resumed_crashes": -1
    };
    return Object.assign(defaultPrefs, extraPrefs);
  }
  async function writePreferences(options) {
    const prefsPath = _path2.default.join(options.path, "prefs.js");
    const lines = Object.entries(options.preferences).map(([key, value]) => {
      return `user_pref(${JSON.stringify(key)}, ${JSON.stringify(value)});`;
    });
    const result = await Promise.allSettled([
      _fs.default.promises.writeFile(_path2.default.join(options.path, "user.js"), lines.join("\n")),
      // Create a backup of the preferences file if it already exitsts.
      _fs.default.promises.access(prefsPath, _fs.default.constants.F_OK).then(
        async () => {
          await _fs.default.promises.copyFile(prefsPath, _path2.default.join(options.path, "prefs.js.playwright"));
        },
        // Swallow only if file does not exist
        () => {
        }
      )
    ]);
    for (const command of result) {
      if (command.status === "rejected") {
        throw command.reason;
      }
    }
  }
  return firefoxPrefs;
}
var hasRequiredBidiFirefox;
function requireBidiFirefox() {
  if (hasRequiredBidiFirefox) return bidiFirefox;
  hasRequiredBidiFirefox = 1;
  Object.defineProperty(bidiFirefox, "__esModule", {
    value: true
  });
  bidiFirefox.BidiFirefox = void 0;
  var _os = _interopRequireDefault(require$$1$3);
  var _path2 = _interopRequireDefault(require$$1$1);
  var _utils = requireUtils();
  var _ascii = requireAscii();
  var _browserType = requireBrowserType$1();
  var _bidiBrowser = requireBidiBrowser();
  var _bidiConnection = requireBidiConnection();
  var _firefoxPrefs = requireFirefoxPrefs();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  class BidiFirefox extends _browserType.BrowserType {
    constructor(parent) {
      super(parent, "bidi");
      this._useBidi = true;
    }
    async connectToTransport(transport2, options) {
      return _bidiBrowser.BidiBrowser.connect(this.attribution.playwright, transport2, options);
    }
    doRewriteStartupLog(error) {
      if (!error.logs) return error;
      if (error.logs.includes(`as root in a regular user's session is not supported.`)) error.logs = "\n" + (0, _ascii.wrapInASCIIBox)(`Firefox is unable to launch if the $HOME folder isn't owned by the current user.
Workaround: Set the HOME=/root environment variable${process.env.GITHUB_ACTION ? " in your GitHub Actions workflow file" : ""} when running Playwright.`, 1);
      if (error.logs.includes("no DISPLAY environment variable specified")) error.logs = "\n" + (0, _ascii.wrapInASCIIBox)(_browserType.kNoXServerRunningError, 1);
      return error;
    }
    amendEnvironment(env2, userDataDir, executable, browserArguments) {
      if (!_path2.default.isAbsolute(_os.default.homedir())) throw new Error(`Cannot launch Firefox with relative home directory. Did you set ${_os.default.platform() === "win32" ? "USERPROFILE" : "HOME"} to a relative path?`);
      env2 = {
        ...env2,
        "MOZ_CRASHREPORTER": "1",
        "MOZ_CRASHREPORTER_NO_REPORT": "1",
        "MOZ_CRASHREPORTER_SHUTDOWN": "1"
      };
      if (_os.default.platform() === "linux") {
        return {
          ...env2,
          SNAP_NAME: void 0,
          SNAP_INSTANCE_NAME: void 0
        };
      }
      return env2;
    }
    attemptToGracefullyCloseBrowser(transport2) {
      transport2.send({
        method: "browser.close",
        params: {},
        id: _bidiConnection.kBrowserCloseMessageId
      });
    }
    async prepareUserDataDir(options, userDataDir) {
      await (0, _firefoxPrefs.createProfile)({
        path: userDataDir,
        preferences: options.firefoxUserPrefs || {}
      });
    }
    defaultArgs(options, isPersistent, userDataDir) {
      const {
        args = [],
        headless
      } = options;
      const userDataDirArg = args.find((arg) => arg.startsWith("-profile") || arg.startsWith("--profile"));
      if (userDataDirArg) throw this._createUserDataDirArgMisuseError("--profile");
      const firefoxArguments = ["--remote-debugging-port=0"];
      if (headless) firefoxArguments.push("--headless");
      else firefoxArguments.push("--foreground");
      firefoxArguments.push(`--profile`, userDataDir);
      firefoxArguments.push(...args);
      return firefoxArguments;
    }
    readyState(options) {
      (0, _utils.assert)(options.useWebSocket);
      return new FirefoxReadyState();
    }
  }
  bidiFirefox.BidiFirefox = BidiFirefox;
  class FirefoxReadyState extends _browserType.BrowserReadyState {
    onBrowserOutput(message) {
      const match = message.match(/WebDriver BiDi listening on (ws:\/\/.*)$/);
      if (match) this._wsEndpoint.resolve(match[1] + "/session");
    }
  }
  return bidiFirefox;
}
var chromium$1 = {};
var crDevTools = {};
var hasRequiredCrDevTools;
function requireCrDevTools() {
  if (hasRequiredCrDevTools) return crDevTools;
  hasRequiredCrDevTools = 1;
  Object.defineProperty(crDevTools, "__esModule", {
    value: true
  });
  crDevTools.CRDevTools = void 0;
  var _fs = _interopRequireDefault(require$$0$2);
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  const kBindingName = "__pw_devtools__";
  class CRDevTools {
    constructor(preferencesPath) {
      this._preferencesPath = void 0;
      this._prefs = void 0;
      this._savePromise = void 0;
      this.__testHookOnBinding = void 0;
      this._preferencesPath = preferencesPath;
      this._savePromise = Promise.resolve();
    }
    install(session) {
      session.on("Runtime.bindingCalled", async (event) => {
        if (event.name !== kBindingName) return;
        const parsed = JSON.parse(event.payload);
        let result = void 0;
        if (this.__testHookOnBinding) this.__testHookOnBinding(parsed);
        if (parsed.method === "getPreferences") {
          if (this._prefs === void 0) {
            try {
              const json2 = await _fs.default.promises.readFile(this._preferencesPath, "utf8");
              this._prefs = JSON.parse(json2);
            } catch (e2) {
              this._prefs = {};
            }
          }
          result = this._prefs;
        } else if (parsed.method === "setPreference") {
          this._prefs[parsed.params[0]] = parsed.params[1];
          this._save();
        } else if (parsed.method === "removePreference") {
          delete this._prefs[parsed.params[0]];
          this._save();
        } else if (parsed.method === "clearPreferences") {
          this._prefs = {};
          this._save();
        }
        session.send("Runtime.evaluate", {
          expression: `window.DevToolsAPI.embedderMessageAck(${parsed.id}, ${JSON.stringify(result)})`,
          contextId: event.executionContextId
        }).catch((e2) => null);
      });
      Promise.all([session.send("Runtime.enable"), session.send("Runtime.addBinding", {
        name: kBindingName
      }), session.send("Page.enable"), session.send("Page.addScriptToEvaluateOnNewDocument", {
        source: `
        (() => {
          const init = () => {
            // Lazy init happens when InspectorFrontendHost is initialized.
            // At this point DevToolsHost is ready to be used.
            const host = window.DevToolsHost;
            const old = host.sendMessageToEmbedder.bind(host);
            host.sendMessageToEmbedder = message => {
              if (['getPreferences', 'setPreference', 'removePreference', 'clearPreferences'].includes(JSON.parse(message).method))
                window.${kBindingName}(message);
              else
                old(message);
            };
          };
          let value;
          Object.defineProperty(window, 'InspectorFrontendHost', {
            configurable: true,
            enumerable: true,
            get() { return value; },
            set(v) { value = v; init(); },
          });
        })()
      `
      }), session.send("Runtime.runIfWaitingForDebugger")]).catch((e2) => null);
    }
    _save() {
      this._savePromise = this._savePromise.then(async () => {
        await _fs.default.promises.writeFile(this._preferencesPath, JSON.stringify(this._prefs)).catch((e2) => null);
      });
    }
  }
  crDevTools.CRDevTools = CRDevTools;
  return crDevTools;
}
var hasRequiredChromium;
function requireChromium() {
  if (hasRequiredChromium) return chromium$1;
  hasRequiredChromium = 1;
  Object.defineProperty(chromium$1, "__esModule", {
    value: true
  });
  chromium$1.Chromium = void 0;
  var _fs = _interopRequireDefault(require$$0$2);
  var _os = _interopRequireDefault(require$$1$3);
  var _path2 = _interopRequireDefault(require$$1$1);
  var _chromiumSwitches = requireChromiumSwitches();
  var _crBrowser = requireCrBrowser();
  var _crConnection = requireCrConnection();
  var _timeoutSettings = requireTimeoutSettings$1();
  var _utils = requireUtils();
  var _ascii = requireAscii();
  var _debugLogger = requireDebugLogger();
  var _manualPromise = requireManualPromise();
  var _network = requireNetwork$2();
  var _userAgent = requireUserAgent();
  var _browserContext = requireBrowserContext$1();
  var _browserType = requireBrowserType$1();
  var _helper = requireHelper();
  var _registry = requireRegistry();
  var _transport = requireTransport();
  var _crDevTools = requireCrDevTools();
  var _browser = requireBrowser$2();
  var _fileUtils = requireFileUtils$1();
  var _processLauncher = requireProcessLauncher();
  var _progress = requireProgress();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  const ARTIFACTS_FOLDER = _path2.default.join(_os.default.tmpdir(), "playwright-artifacts-");
  class Chromium extends _browserType.BrowserType {
    constructor(parent) {
      super(parent, "chromium");
      this._devtools = void 0;
      if ((0, _utils.debugMode)()) this._devtools = this._createDevTools();
    }
    async connectOverCDP(metadata, endpointURL, options, timeout) {
      const controller = new _progress.ProgressController(metadata, this);
      controller.setLogName("browser");
      return controller.run(async (progress2) => {
        return await this._connectOverCDPInternal(progress2, endpointURL, options);
      }, _timeoutSettings.TimeoutSettings.timeout({
        timeout
      }));
    }
    async _connectOverCDPInternal(progress2, endpointURL, options, onClose) {
      let headersMap;
      if (options.headers) headersMap = (0, _utils.headersArrayToObject)(options.headers, false);
      if (!headersMap) headersMap = {
        "User-Agent": (0, _userAgent.getUserAgent)()
      };
      else if (headersMap && !Object.keys(headersMap).some((key) => key.toLowerCase() === "user-agent")) headersMap["User-Agent"] = (0, _userAgent.getUserAgent)();
      const artifactsDir = await _fs.default.promises.mkdtemp(ARTIFACTS_FOLDER);
      const wsEndpoint = await urlToWSEndpoint(progress2, endpointURL, headersMap);
      progress2.throwIfAborted();
      const chromeTransport = await _transport.WebSocketTransport.connect(progress2, wsEndpoint, headersMap);
      const cleanedUp = new _manualPromise.ManualPromise();
      const doCleanup = async () => {
        await (0, _fileUtils.removeFolders)([artifactsDir]);
        await (onClose === null || onClose === void 0 ? void 0 : onClose());
        cleanedUp.resolve();
      };
      const doClose = async () => {
        await chromeTransport.closeAndWait();
        await cleanedUp;
      };
      const browserProcess = {
        close: doClose,
        kill: doClose
      };
      const persistent = {
        noDefaultViewport: true
      };
      const browserOptions = {
        slowMo: options.slowMo,
        name: "chromium",
        isChromium: true,
        persistent,
        browserProcess,
        protocolLogger: _helper.helper.debugProtocolLogger(),
        browserLogsCollector: new _debugLogger.RecentLogsCollector(),
        artifactsDir,
        downloadsPath: options.downloadsPath || artifactsDir,
        tracesDir: options.tracesDir || artifactsDir,
        originalLaunchOptions: {}
      };
      (0, _browserContext.validateBrowserContextOptions)(persistent, browserOptions);
      progress2.throwIfAborted();
      const browser2 = await _crBrowser.CRBrowser.connect(this.attribution.playwright, chromeTransport, browserOptions);
      browser2._isCollocatedWithServer = false;
      browser2.on(_browser.Browser.Events.Disconnected, doCleanup);
      return browser2;
    }
    _createDevTools() {
      const directory = _registry.registry.findExecutable("chromium").directory;
      return directory ? new _crDevTools.CRDevTools(_path2.default.join(directory, "devtools-preferences.json")) : void 0;
    }
    async connectToTransport(transport2, options) {
      let devtools = this._devtools;
      if (options.__testHookForDevTools) {
        devtools = this._createDevTools();
        await options.__testHookForDevTools(devtools);
      }
      return _crBrowser.CRBrowser.connect(this.attribution.playwright, transport2, options, devtools);
    }
    doRewriteStartupLog(error) {
      if (!error.logs) return error;
      if (error.logs.includes("Missing X server")) error.logs = "\n" + (0, _ascii.wrapInASCIIBox)(_browserType.kNoXServerRunningError, 1);
      if (!error.logs.includes("crbug.com/357670") && !error.logs.includes("No usable sandbox!") && !error.logs.includes("crbug.com/638180")) return error;
      error.logs = [`Chromium sandboxing failed!`, `================================`, `To avoid the sandboxing issue, do either of the following:`, `  - (preferred): Configure your environment to support sandboxing`, `  - (alternative): Launch Chromium without sandbox using 'chromiumSandbox: false' option`, `================================`, ``].join("\n");
      return error;
    }
    amendEnvironment(env2, userDataDir, executable, browserArguments) {
      return env2;
    }
    attemptToGracefullyCloseBrowser(transport2) {
      const message = {
        method: "Browser.close",
        id: _crConnection.kBrowserCloseMessageId,
        params: {}
      };
      transport2.send(message);
    }
    async _launchWithSeleniumHub(progress2, hubUrl, options) {
      await this._createArtifactDirs(options);
      if (!hubUrl.endsWith("/")) hubUrl = hubUrl + "/";
      const args = this._innerDefaultArgs(options);
      args.push("--remote-debugging-port=0");
      const isEdge = options.channel && options.channel.startsWith("msedge");
      let desiredCapabilities = {
        "browserName": isEdge ? "MicrosoftEdge" : "chrome",
        [isEdge ? "ms:edgeOptions" : "goog:chromeOptions"]: {
          args
        }
      };
      if (process.env.SELENIUM_REMOTE_CAPABILITIES) {
        const remoteCapabilities = parseSeleniumRemoteParams({
          name: "capabilities",
          value: process.env.SELENIUM_REMOTE_CAPABILITIES
        }, progress2);
        if (remoteCapabilities) desiredCapabilities = {
          ...desiredCapabilities,
          ...remoteCapabilities
        };
      }
      let headers2 = {};
      if (process.env.SELENIUM_REMOTE_HEADERS) {
        const remoteHeaders = parseSeleniumRemoteParams({
          name: "headers",
          value: process.env.SELENIUM_REMOTE_HEADERS
        }, progress2);
        if (remoteHeaders) headers2 = remoteHeaders;
      }
      progress2.log(`<selenium> connecting to ${hubUrl}`);
      const response = await (0, _network.fetchData)({
        url: hubUrl + "session",
        method: "POST",
        headers: {
          "Content-Type": "application/json; charset=utf-8",
          ...headers2
        },
        data: JSON.stringify({
          capabilities: {
            alwaysMatch: desiredCapabilities
          }
        }),
        timeout: progress2.timeUntilDeadline()
      }, seleniumErrorHandler);
      const value = JSON.parse(response).value;
      const sessionId = value.sessionId;
      progress2.log(`<selenium> connected to sessionId=${sessionId}`);
      const disconnectFromSelenium = async () => {
        progress2.log(`<selenium> disconnecting from sessionId=${sessionId}`);
        await (0, _network.fetchData)({
          url: hubUrl + "session/" + sessionId,
          method: "DELETE",
          headers: headers2
        }).catch((error) => progress2.log(`<error disconnecting from selenium>: ${error}`));
        progress2.log(`<selenium> disconnected from sessionId=${sessionId}`);
        _processLauncher.gracefullyCloseSet.delete(disconnectFromSelenium);
      };
      _processLauncher.gracefullyCloseSet.add(disconnectFromSelenium);
      try {
        const capabilities = value.capabilities;
        let endpointURL;
        if (capabilities["se:cdp"]) {
          progress2.log(`<selenium> using selenium v4`);
          const endpointURLString = addProtocol(capabilities["se:cdp"]);
          endpointURL = new URL(endpointURLString);
          if (endpointURL.hostname === "localhost" || endpointURL.hostname === "127.0.0.1") endpointURL.hostname = new URL(hubUrl).hostname;
          progress2.log(`<selenium> retrieved endpoint ${endpointURL.toString()} for sessionId=${sessionId}`);
        } else {
          progress2.log(`<selenium> using selenium v3`);
          const maybeChromeOptions = capabilities["goog:chromeOptions"];
          const chromeOptions = maybeChromeOptions && typeof maybeChromeOptions === "object" ? maybeChromeOptions : void 0;
          const debuggerAddress = chromeOptions && typeof chromeOptions.debuggerAddress === "string" ? chromeOptions.debuggerAddress : void 0;
          const chromeOptionsURL = typeof maybeChromeOptions === "string" ? maybeChromeOptions : void 0;
          const endpointURLString = addProtocol(debuggerAddress || chromeOptionsURL).replace("localhost", "127.0.0.1");
          progress2.log(`<selenium> retrieved endpoint ${endpointURLString} for sessionId=${sessionId}`);
          endpointURL = new URL(endpointURLString);
          if (endpointURL.hostname === "localhost" || endpointURL.hostname === "127.0.0.1") {
            const sessionInfoUrl = new URL(hubUrl).origin + "/grid/api/testsession?session=" + sessionId;
            try {
              const sessionResponse = await (0, _network.fetchData)({
                url: sessionInfoUrl,
                method: "GET",
                timeout: progress2.timeUntilDeadline(),
                headers: headers2
              }, seleniumErrorHandler);
              const proxyId = JSON.parse(sessionResponse).proxyId;
              endpointURL.hostname = new URL(proxyId).hostname;
              progress2.log(`<selenium> resolved endpoint ip ${endpointURL.toString()} for sessionId=${sessionId}`);
            } catch (e2) {
              progress2.log(`<selenium> unable to resolve endpoint ip for sessionId=${sessionId}, running in standalone?`);
            }
          }
        }
        return await this._connectOverCDPInternal(progress2, endpointURL.toString(), {
          ...options,
          headers: (0, _utils.headersObjectToArray)(headers2)
        }, disconnectFromSelenium);
      } catch (e2) {
        await disconnectFromSelenium();
        throw e2;
      }
    }
    defaultArgs(options, isPersistent, userDataDir) {
      const chromeArguments = this._innerDefaultArgs(options);
      chromeArguments.push(`--user-data-dir=${userDataDir}`);
      if (options.useWebSocket) chromeArguments.push("--remote-debugging-port=0");
      else chromeArguments.push("--remote-debugging-pipe");
      if (isPersistent) chromeArguments.push("about:blank");
      else chromeArguments.push("--no-startup-window");
      return chromeArguments;
    }
    _innerDefaultArgs(options) {
      const {
        args = []
      } = options;
      const userDataDirArg = args.find((arg) => arg.startsWith("--user-data-dir"));
      if (userDataDirArg) throw this._createUserDataDirArgMisuseError("--user-data-dir");
      if (args.find((arg) => arg.startsWith("--remote-debugging-pipe"))) throw new Error("Playwright manages remote debugging connection itself.");
      if (args.find((arg) => !arg.startsWith("-"))) throw new Error("Arguments can not specify page to be opened");
      const chromeArguments = [..._chromiumSwitches.chromiumSwitches];
      if (_os.default.platform() === "darwin") {
        chromeArguments.push("--enable-use-zoom-for-dsf=false");
        if (options.headless && (!options.channel || options.channel === "chromium-headless-shell")) chromeArguments.push("--use-angle");
      }
      if (options.devtools) chromeArguments.push("--auto-open-devtools-for-tabs");
      if (options.headless) {
        chromeArguments.push("--headless");
        chromeArguments.push("--hide-scrollbars", "--mute-audio", "--blink-settings=primaryHoverType=2,availableHoverTypes=2,primaryPointerType=4,availablePointerTypes=4");
      }
      if (options.chromiumSandbox !== true) chromeArguments.push("--no-sandbox");
      const proxy = options.proxyOverride || options.proxy;
      if (proxy) {
        const proxyURL = new URL(proxy.server);
        const isSocks = proxyURL.protocol === "socks5:";
        if (isSocks && !this.attribution.playwright.options.socksProxyPort) {
          chromeArguments.push(`--host-resolver-rules="MAP * ~NOTFOUND , EXCLUDE ${proxyURL.hostname}"`);
        }
        chromeArguments.push(`--proxy-server=${proxy.server}`);
        const proxyBypassRules = [];
        if (this.attribution.playwright.options.socksProxyPort) proxyBypassRules.push("<-loopback>");
        if (proxy.bypass) proxyBypassRules.push(...proxy.bypass.split(",").map((t) => t.trim()).map((t) => t.startsWith(".") ? "*" + t : t));
        if (!process.env.PLAYWRIGHT_DISABLE_FORCED_CHROMIUM_PROXIED_LOOPBACK && !proxyBypassRules.includes("<-loopback>")) proxyBypassRules.push("<-loopback>");
        if (proxyBypassRules.length > 0) chromeArguments.push(`--proxy-bypass-list=${proxyBypassRules.join(";")}`);
      }
      chromeArguments.push(...args);
      return chromeArguments;
    }
    readyState(options) {
      var _options$args;
      if (options.useWebSocket || (_options$args = options.args) !== null && _options$args !== void 0 && _options$args.some((a) => a.startsWith("--remote-debugging-port"))) return new ChromiumReadyState();
      return void 0;
    }
    getExecutableName(options) {
      if (options.channel) return options.channel;
      return options.headless ? "chromium-headless-shell" : "chromium";
    }
  }
  chromium$1.Chromium = Chromium;
  class ChromiumReadyState extends _browserType.BrowserReadyState {
    onBrowserOutput(message) {
      const match = message.match(/DevTools listening on (.*)/);
      if (match) this._wsEndpoint.resolve(match[1]);
    }
  }
  async function urlToWSEndpoint(progress2, endpointURL, headers2) {
    if (endpointURL.startsWith("ws")) return endpointURL;
    progress2.log(`<ws preparing> retrieving websocket url from ${endpointURL}`);
    const httpURL = endpointURL.endsWith("/") ? `${endpointURL}json/version/` : `${endpointURL}/json/version/`;
    const json2 = await (0, _network.fetchData)({
      url: httpURL,
      headers: headers2
    }, async (_2, resp) => new Error(`Unexpected status ${resp.statusCode} when connecting to ${httpURL}.
This does not look like a DevTools server, try connecting via ws://.`));
    return JSON.parse(json2).webSocketDebuggerUrl;
  }
  async function seleniumErrorHandler(params, response) {
    const body = await streamToString(response);
    let message = body;
    try {
      const json2 = JSON.parse(body);
      message = json2.value.localizedMessage || json2.value.message;
    } catch (e2) {
    }
    return new Error(`Error connecting to Selenium at ${params.url}: ${message}`);
  }
  function addProtocol(url) {
    if (!["ws://", "wss://", "http://", "https://"].some((protocol2) => url.startsWith(protocol2))) return "http://" + url;
    return url;
  }
  function streamToString(stream2) {
    return new Promise((resolve2, reject) => {
      const chunks = [];
      stream2.on("data", (chunk) => chunks.push(Buffer.from(chunk)));
      stream2.on("error", reject);
      stream2.on("end", () => resolve2(Buffer.concat(chunks).toString("utf8")));
    });
  }
  function parseSeleniumRemoteParams(env2, progress2) {
    try {
      const parsed = JSON.parse(env2.value);
      progress2.log(`<selenium> using additional ${env2.name} "${env2.value}"`);
      return parsed;
    } catch (e2) {
      progress2.log(`<selenium> ignoring additional ${env2.name} "${env2.value}": ${e2}`);
    }
  }
  return chromium$1;
}
var debugController = {};
var ariaSnapshot = {};
var hasRequiredAriaSnapshot;
function requireAriaSnapshot() {
  if (hasRequiredAriaSnapshot) return ariaSnapshot;
  hasRequiredAriaSnapshot = 1;
  Object.defineProperty(ariaSnapshot, "__esModule", {
    value: true
  });
  ariaSnapshot.ParserError = ariaSnapshot.KeyParser = void 0;
  ariaSnapshot.parseAriaSnapshot = parseAriaSnapshot;
  ariaSnapshot.parseAriaSnapshotUnsafe = parseAriaSnapshotUnsafe;
  ariaSnapshot.valueOrRegex = valueOrRegex;
  function parseAriaSnapshotUnsafe(yaml, text) {
    const result = parseAriaSnapshot(yaml, text);
    if (result.errors.length) throw new Error(result.errors[0].message);
    return result.fragment;
  }
  function parseAriaSnapshot(yaml, text, options = {}) {
    var _fragment$children;
    const lineCounter = new yaml.LineCounter();
    const parseOptions = {
      keepSourceTokens: true,
      lineCounter,
      ...options
    };
    const yamlDoc = yaml.parseDocument(text, parseOptions);
    const errors2 = [];
    const convertRange = (range) => {
      return [lineCounter.linePos(range[0]), lineCounter.linePos(range[1])];
    };
    const addError = (error) => {
      errors2.push({
        message: error.message,
        range: [lineCounter.linePos(error.pos[0]), lineCounter.linePos(error.pos[1])]
      });
    };
    const convertSeq = (container, seq) => {
      for (const item of seq.items) {
        const itemIsString = item instanceof yaml.Scalar && typeof item.value === "string";
        if (itemIsString) {
          const childNode = KeyParser.parse(item, parseOptions, errors2);
          if (childNode) {
            container.children = container.children || [];
            container.children.push(childNode);
          }
          continue;
        }
        const itemIsMap = item instanceof yaml.YAMLMap;
        if (itemIsMap) {
          convertMap(container, item);
          continue;
        }
        errors2.push({
          message: "Sequence items should be strings or maps",
          range: convertRange(item.range || seq.range)
        });
      }
    };
    const convertMap = (container, map) => {
      for (const entry of map.items) {
        container.children = container.children || [];
        const keyIsString = entry.key instanceof yaml.Scalar && typeof entry.key.value === "string";
        if (!keyIsString) {
          errors2.push({
            message: "Only string keys are supported",
            range: convertRange(entry.key.range || map.range)
          });
          continue;
        }
        const key = entry.key;
        const value = entry.value;
        if (key.value === "text") {
          const valueIsString = value instanceof yaml.Scalar && typeof value.value === "string";
          if (!valueIsString) {
            errors2.push({
              message: "Text value should be a string",
              range: convertRange(entry.value.range || map.range)
            });
            continue;
          }
          container.children.push({
            kind: "text",
            text: valueOrRegex(value.value)
          });
          continue;
        }
        const childNode = KeyParser.parse(key, parseOptions, errors2);
        if (!childNode) continue;
        const valueIsScalar = value instanceof yaml.Scalar;
        if (valueIsScalar) {
          const type = typeof value.value;
          if (type !== "string" && type !== "number" && type !== "boolean") {
            errors2.push({
              message: "Node value should be a string or a sequence",
              range: convertRange(entry.value.range || map.range)
            });
            continue;
          }
          container.children.push({
            ...childNode,
            children: [{
              kind: "text",
              text: valueOrRegex(String(value.value))
            }]
          });
          continue;
        }
        const valueIsSequence = value instanceof yaml.YAMLSeq;
        if (valueIsSequence) {
          container.children.push(childNode);
          convertSeq(childNode, value);
          continue;
        }
        errors2.push({
          message: "Map values should be strings or sequences",
          range: convertRange(entry.value.range || map.range)
        });
      }
    };
    const fragment = {
      kind: "role",
      role: "fragment"
    };
    yamlDoc.errors.forEach(addError);
    if (errors2.length) return {
      errors: errors2,
      fragment
    };
    if (!(yamlDoc.contents instanceof yaml.YAMLSeq)) {
      errors2.push({
        message: 'Aria snapshot must be a YAML sequence, elements starting with " -"',
        range: yamlDoc.contents ? convertRange(yamlDoc.contents.range) : [{
          line: 0,
          col: 0
        }, {
          line: 0,
          col: 0
        }]
      });
    }
    if (errors2.length) return {
      errors: errors2,
      fragment
    };
    convertSeq(fragment, yamlDoc.contents);
    if (errors2.length) return {
      errors: errors2,
      fragment: emptyFragment
    };
    if (((_fragment$children = fragment.children) === null || _fragment$children === void 0 ? void 0 : _fragment$children.length) === 1) return {
      fragment: fragment.children[0],
      errors: errors2
    };
    return {
      fragment,
      errors: errors2
    };
  }
  const emptyFragment = {
    kind: "role",
    role: "fragment"
  };
  function normalizeWhitespace(text) {
    return text.replace(/[\u200b\u00ad]/g, "").replace(/[\r\n\s\t]+/g, " ").trim();
  }
  function valueOrRegex(value) {
    return value.startsWith("/") && value.endsWith("/") && value.length > 1 ? {
      pattern: value.slice(1, -1)
    } : normalizeWhitespace(value);
  }
  class KeyParser {
    static parse(text, options, errors2) {
      try {
        return new KeyParser(text.value)._parse();
      } catch (e2) {
        if (e2 instanceof ParserError) {
          const message = options.prettyErrors === false ? e2.message : e2.message + ":\n\n" + text.value + "\n" + " ".repeat(e2.pos) + "^\n";
          errors2.push({
            message,
            range: [options.lineCounter.linePos(text.range[0]), options.lineCounter.linePos(text.range[0] + e2.pos)]
          });
          return null;
        }
        throw e2;
      }
    }
    constructor(input2) {
      this._input = void 0;
      this._pos = void 0;
      this._length = void 0;
      this._input = input2;
      this._pos = 0;
      this._length = input2.length;
    }
    _peek() {
      return this._input[this._pos] || "";
    }
    _next() {
      if (this._pos < this._length) return this._input[this._pos++];
      return null;
    }
    _eof() {
      return this._pos >= this._length;
    }
    _isWhitespace() {
      return !this._eof() && /\s/.test(this._peek());
    }
    _skipWhitespace() {
      while (this._isWhitespace()) this._pos++;
    }
    _readIdentifier(type) {
      if (this._eof()) this._throwError(`Unexpected end of input when expecting ${type}`);
      const start = this._pos;
      while (!this._eof() && /[a-zA-Z]/.test(this._peek())) this._pos++;
      return this._input.slice(start, this._pos);
    }
    _readString() {
      let result = "";
      let escaped = false;
      while (!this._eof()) {
        const ch = this._next();
        if (escaped) {
          result += ch;
          escaped = false;
        } else if (ch === "\\") {
          escaped = true;
        } else if (ch === '"') {
          return result;
        } else {
          result += ch;
        }
      }
      this._throwError("Unterminated string");
    }
    _throwError(message, offset = 0) {
      throw new ParserError(message, offset || this._pos);
    }
    _readRegex() {
      let result = "";
      let escaped = false;
      let insideClass = false;
      while (!this._eof()) {
        const ch = this._next();
        if (escaped) {
          result += ch;
          escaped = false;
        } else if (ch === "\\") {
          escaped = true;
          result += ch;
        } else if (ch === "/" && !insideClass) {
          return {
            pattern: result
          };
        } else if (ch === "[") {
          insideClass = true;
          result += ch;
        } else if (ch === "]" && insideClass) {
          result += ch;
          insideClass = false;
        } else {
          result += ch;
        }
      }
      this._throwError("Unterminated regex");
    }
    _readStringOrRegex() {
      const ch = this._peek();
      if (ch === '"') {
        this._next();
        return normalizeWhitespace(this._readString());
      }
      if (ch === "/") {
        this._next();
        return this._readRegex();
      }
      return null;
    }
    _readAttributes(result) {
      let errorPos = this._pos;
      while (true) {
        this._skipWhitespace();
        if (this._peek() === "[") {
          this._next();
          this._skipWhitespace();
          errorPos = this._pos;
          const flagName = this._readIdentifier("attribute");
          this._skipWhitespace();
          let flagValue = "";
          if (this._peek() === "=") {
            this._next();
            this._skipWhitespace();
            errorPos = this._pos;
            while (this._peek() !== "]" && !this._isWhitespace() && !this._eof()) flagValue += this._next();
          }
          this._skipWhitespace();
          if (this._peek() !== "]") this._throwError("Expected ]");
          this._next();
          this._applyAttribute(result, flagName, flagValue || "true", errorPos);
        } else {
          break;
        }
      }
    }
    _parse() {
      this._skipWhitespace();
      const role = this._readIdentifier("role");
      this._skipWhitespace();
      const name = this._readStringOrRegex() || "";
      const result = {
        kind: "role",
        role,
        name
      };
      this._readAttributes(result);
      this._skipWhitespace();
      if (!this._eof()) this._throwError("Unexpected input");
      return result;
    }
    _applyAttribute(node, key, value, errorPos) {
      if (key === "checked") {
        this._assert(value === "true" || value === "false" || value === "mixed", 'Value of "checked" attribute must be a boolean or "mixed"', errorPos);
        node.checked = value === "true" ? true : value === "false" ? false : "mixed";
        return;
      }
      if (key === "disabled") {
        this._assert(value === "true" || value === "false", 'Value of "disabled" attribute must be a boolean', errorPos);
        node.disabled = value === "true";
        return;
      }
      if (key === "expanded") {
        this._assert(value === "true" || value === "false", 'Value of "expanded" attribute must be a boolean', errorPos);
        node.expanded = value === "true";
        return;
      }
      if (key === "level") {
        this._assert(!isNaN(Number(value)), 'Value of "level" attribute must be a number', errorPos);
        node.level = Number(value);
        return;
      }
      if (key === "pressed") {
        this._assert(value === "true" || value === "false" || value === "mixed", 'Value of "pressed" attribute must be a boolean or "mixed"', errorPos);
        node.pressed = value === "true" ? true : value === "false" ? false : "mixed";
        return;
      }
      if (key === "selected") {
        this._assert(value === "true" || value === "false", 'Value of "selected" attribute must be a boolean', errorPos);
        node.selected = value === "true";
        return;
      }
      this._assert(false, `Unsupported attribute [${key}]`, errorPos);
    }
    _assert(value, message, valuePos) {
      if (!value) this._throwError(message || "Assertion error", valuePos);
    }
  }
  ariaSnapshot.KeyParser = KeyParser;
  class ParserError extends Error {
    constructor(message, pos) {
      super(message);
      this.pos = void 0;
      this.pos = pos;
    }
  }
  ariaSnapshot.ParserError = ParserError;
  return ariaSnapshot;
}
var hasRequiredDebugController;
function requireDebugController() {
  if (hasRequiredDebugController) return debugController;
  hasRequiredDebugController = 1;
  Object.defineProperty(debugController, "__esModule", {
    value: true
  });
  debugController.DebugController = void 0;
  var _instrumentation = requireInstrumentation();
  var _processLauncher = requireProcessLauncher();
  var _recorder = requireRecorder();
  var _utils = requireUtils();
  var _ariaSnapshot = requireAriaSnapshot();
  var _utilsBundle = requireUtilsBundle();
  var _recorderApp = requireRecorderApp();
  var _locatorParser = requireLocatorParser();
  const internalMetadata = (0, _instrumentation.serverSideCallMetadata)();
  class DebugController extends _instrumentation.SdkObject {
    constructor(playwright2) {
      super({
        attribution: {
          isInternalPlaywright: true
        },
        instrumentation: (0, _instrumentation.createInstrumentation)()
      }, void 0, "DebugController");
      this._trackHierarchyListener = void 0;
      this._playwright = void 0;
      this._sdkLanguage = "javascript";
      this._codegenId = "playwright-test";
      this._playwright = playwright2;
    }
    initialize(codegenId, sdkLanguage) {
      this._codegenId = codegenId;
      this._sdkLanguage = sdkLanguage;
    }
    dispose() {
      this.setReportStateChanged(false);
    }
    setReportStateChanged(enabled) {
      if (enabled && !this._trackHierarchyListener) {
        this._trackHierarchyListener = {
          onPageOpen: () => this._emitSnapshot(false),
          onPageClose: () => this._emitSnapshot(false)
        };
        this._playwright.instrumentation.addListener(this._trackHierarchyListener, null);
        this._emitSnapshot(true);
      } else if (!enabled && this._trackHierarchyListener) {
        this._playwright.instrumentation.removeListener(this._trackHierarchyListener);
        this._trackHierarchyListener = void 0;
      }
    }
    async resetForReuse() {
      const contexts = /* @__PURE__ */ new Set();
      for (const page2 of this._playwright.allPages()) contexts.add(page2.context());
      for (const context of contexts) await context.resetForReuse(internalMetadata, null);
    }
    async navigate(url) {
      for (const p of this._playwright.allPages()) await p.mainFrame().goto(internalMetadata, url);
    }
    async setRecorderMode(params) {
      await this._closeBrowsersWithoutPages();
      if (params.mode === "none") {
        for (const recorder2 of await this._allRecorders()) {
          recorder2.hideHighlightedSelector();
          recorder2.setMode("none");
        }
        return;
      }
      if (!this._playwright.allBrowsers().length) await this._playwright.chromium.launch(internalMetadata, {
        headless: !!process.env.PW_DEBUG_CONTROLLER_HEADLESS
      });
      const pages = this._playwright.allPages();
      if (!pages.length) {
        const [browser2] = this._playwright.allBrowsers();
        const {
          context
        } = await browser2.newContextForReuse({}, internalMetadata);
        await context.newPage(internalMetadata);
      }
      if (params.testIdAttributeName) {
        for (const page2 of this._playwright.allPages()) page2.context().selectors().setTestIdAttributeName(params.testIdAttributeName);
      }
      for (const recorder2 of await this._allRecorders()) {
        recorder2.hideHighlightedSelector();
        if (params.mode !== "inspecting") recorder2.setOutput(this._codegenId, params.file);
        recorder2.setMode(params.mode);
      }
    }
    async highlight(params) {
      if (params.selector) (0, _locatorParser.unsafeLocatorOrSelectorAsSelector)(this._sdkLanguage, params.selector, "data-testid");
      const ariaTemplate = params.ariaTemplate ? (0, _ariaSnapshot.parseAriaSnapshotUnsafe)(_utilsBundle.yaml, params.ariaTemplate) : void 0;
      for (const recorder2 of await this._allRecorders()) {
        if (ariaTemplate) recorder2.setHighlightedAriaTemplate(ariaTemplate);
        else if (params.selector) recorder2.setHighlightedSelector(this._sdkLanguage, params.selector);
      }
    }
    async hideHighlight() {
      for (const recorder2 of await this._allRecorders()) recorder2.hideHighlightedSelector();
      await this._playwright.hideHighlight();
    }
    allBrowsers() {
      return [...this._playwright.allBrowsers()];
    }
    async resume() {
      for (const recorder2 of await this._allRecorders()) recorder2.resume();
    }
    async kill() {
      (0, _processLauncher.gracefullyProcessExitDoNotHang)(0);
    }
    async closeAllBrowsers() {
      await Promise.all(this.allBrowsers().map((browser2) => browser2.close({
        reason: "Close all browsers requested"
      })));
    }
    _emitSnapshot(initial) {
      const pageCount = this._playwright.allPages().length;
      if (initial && !pageCount) return;
      this.emit(DebugController.Events.StateChanged, {
        pageCount
      });
    }
    async _allRecorders() {
      const contexts = /* @__PURE__ */ new Set();
      for (const page2 of this._playwright.allPages()) contexts.add(page2.context());
      const result = await Promise.all([...contexts].map((c2) => _recorder.Recorder.showInspector(c2, {
        omitCallTracking: true
      }, () => Promise.resolve(new InspectingRecorderApp(this)))));
      return result.filter(Boolean);
    }
    async _closeBrowsersWithoutPages() {
      for (const browser2 of this._playwright.allBrowsers()) {
        for (const context of browser2.contexts()) {
          if (!context.pages().length) await context.close({
            reason: "Browser collected"
          });
        }
        if (!browser2.contexts()) await browser2.close({
          reason: "Browser collected"
        });
      }
    }
  }
  debugController.DebugController = DebugController;
  DebugController.Events = {
    StateChanged: "stateChanged",
    InspectRequested: "inspectRequested",
    SourceChanged: "sourceChanged",
    Paused: "paused",
    SetModeRequested: "setModeRequested"
  };
  class InspectingRecorderApp extends _recorderApp.EmptyRecorderApp {
    constructor(debugController2) {
      super();
      this._debugController = void 0;
      this._debugController = debugController2;
    }
    async elementPicked(elementInfo) {
      const locator2 = (0, _utils.asLocator)(this._debugController._sdkLanguage, elementInfo.selector);
      this._debugController.emit(DebugController.Events.InspectRequested, {
        selector: elementInfo.selector,
        locator: locator2,
        ariaSnapshot: elementInfo.ariaSnapshot
      });
    }
    async setSources(sources) {
      const source = sources.find((s2) => s2.id === this._debugController._codegenId);
      const {
        text,
        header,
        footer,
        actions
      } = source || {
        text: ""
      };
      this._debugController.emit(DebugController.Events.SourceChanged, {
        text,
        header,
        footer,
        actions
      });
    }
    async setPaused(paused) {
      this._debugController.emit(DebugController.Events.Paused, {
        paused
      });
    }
    async setMode(mode) {
      this._debugController.emit(DebugController.Events.SetModeRequested, {
        mode
      });
    }
  }
  return debugController;
}
var electron$1 = {};
var hasRequiredElectron$1;
function requireElectron$1() {
  if (hasRequiredElectron$1) return electron$1;
  hasRequiredElectron$1 = 1;
  Object.defineProperty(electron$1, "__esModule", {
    value: true
  });
  electron$1.ElectronApplication = electron$1.Electron = void 0;
  var _fs = _interopRequireDefault(require$$0$2);
  var _os = _interopRequireDefault(require$$1$3);
  var _path2 = _interopRequireDefault(require$$1$1);
  var readline = _interopRequireWildcard(require$$2$2);
  var _timeoutSettings = requireTimeoutSettings$1();
  var _utils = requireUtils();
  var _ascii = requireAscii();
  var _debugLogger = requireDebugLogger();
  var _eventsHelper = requireEventsHelper();
  var _browserContext = requireBrowserContext$1();
  var _crBrowser = requireCrBrowser();
  var _crConnection = requireCrConnection();
  var _crExecutionContext = requireCrExecutionContext();
  var _crProtocolHelper = requireCrProtocolHelper();
  var _console = requireConsole$1();
  var _helper = requireHelper();
  var _instrumentation = requireInstrumentation();
  var js = _interopRequireWildcard(requireJavascript$1());
  var _processLauncher = requireProcessLauncher();
  var _progress = requireProgress();
  var _transport = requireTransport();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  const ARTIFACTS_FOLDER = _path2.default.join(_os.default.tmpdir(), "playwright-artifacts-");
  class ElectronApplication extends _instrumentation.SdkObject {
    constructor(parent, browser2, nodeConnection, process2) {
      super(parent, "electron-app");
      this._browserContext = void 0;
      this._nodeConnection = void 0;
      this._nodeSession = void 0;
      this._nodeExecutionContext = void 0;
      this._nodeElectronHandlePromise = new _utils.ManualPromise();
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings();
      this._process = void 0;
      this._process = process2;
      this._browserContext = browser2._defaultContext;
      this._nodeConnection = nodeConnection;
      this._nodeSession = nodeConnection.rootSession;
      this._nodeSession.on("Runtime.executionContextCreated", async (event) => {
        if (!event.context.auxData || !event.context.auxData.isDefault) return;
        const crExecutionContext2 = new _crExecutionContext.CRExecutionContext(this._nodeSession, event.context);
        this._nodeExecutionContext = new js.ExecutionContext(this, crExecutionContext2, "electron");
        const {
          result: remoteObject
        } = await crExecutionContext2._client.send("Runtime.evaluate", {
          expression: `require('electron')`,
          contextId: event.context.id,
          // Needed after Electron 28 to get access to require: https://github.com/microsoft/playwright/issues/28048
          includeCommandLineAPI: true
        });
        this._nodeElectronHandlePromise.resolve(new js.JSHandle(this._nodeExecutionContext, "object", "ElectronModule", remoteObject.objectId));
      });
      this._nodeSession.on("Runtime.consoleAPICalled", (event) => this._onConsoleAPI(event));
      const appClosePromise = new Promise((f2) => this.once(ElectronApplication.Events.Close, f2));
      this._browserContext.setCustomCloseHandler(async () => {
        await this._browserContext.stopVideoRecording();
        const electronHandle = await this._nodeElectronHandlePromise;
        await electronHandle.evaluate(({
          app
        }) => app.quit()).catch(() => {
        });
        this._nodeConnection.close();
        await appClosePromise;
      });
    }
    async _onConsoleAPI(event) {
      if (event.executionContextId === 0) {
        return;
      }
      if (!this._nodeExecutionContext) return;
      const args = event.args.map((arg) => (0, _crExecutionContext.createHandle)(this._nodeExecutionContext, arg));
      const message = new _console.ConsoleMessage(null, event.type, void 0, args, (0, _crProtocolHelper.toConsoleMessageLocation)(event.stackTrace));
      this.emit(ElectronApplication.Events.Console, message);
    }
    async initialize() {
      await this._nodeSession.send("Runtime.enable", {});
      await this._nodeSession.send("Runtime.evaluate", {
        expression: "__playwright_run()"
      });
    }
    process() {
      return this._process;
    }
    context() {
      return this._browserContext;
    }
    async close() {
      await this._browserContext.close({
        reason: "Application exited"
      });
    }
    async browserWindow(page2) {
      const targetId = page2._delegate._targetId;
      const electronHandle = await this._nodeElectronHandlePromise;
      return await electronHandle.evaluateHandle(({
        BrowserWindow,
        webContents
      }, targetId2) => {
        const wc = webContents.fromDevToolsTargetId(targetId2);
        return BrowserWindow.fromWebContents(wc);
      }, targetId);
    }
  }
  electron$1.ElectronApplication = ElectronApplication;
  ElectronApplication.Events = {
    Close: "close",
    Console: "console"
  };
  class Electron extends _instrumentation.SdkObject {
    constructor(playwright2) {
      super(playwright2, "electron");
    }
    async launch(options) {
      const {
        args = []
      } = options;
      const controller = new _progress.ProgressController((0, _instrumentation.serverSideCallMetadata)(), this);
      controller.setLogName("browser");
      return controller.run(async (progress2) => {
        let app = void 0;
        let electronArguments = ["--inspect=0", "--remote-debugging-port=0", ...args];
        if (_os.default.platform() === "linux") {
          const runningAsRoot = process.geteuid && process.geteuid() === 0;
          if (runningAsRoot && electronArguments.indexOf("--no-sandbox") === -1) electronArguments.unshift("--no-sandbox");
        }
        const artifactsDir = await _fs.default.promises.mkdtemp(ARTIFACTS_FOLDER);
        const browserLogsCollector = new _debugLogger.RecentLogsCollector();
        const env2 = options.env ? (0, _processLauncher.envArrayToObject)(options.env) : process.env;
        let command;
        if (options.executablePath) {
          command = options.executablePath;
        } else {
          try {
            command = require("electron/index.js");
          } catch (error) {
            if ((error === null || error === void 0 ? void 0 : error.code) === "MODULE_NOT_FOUND") {
              throw new Error("\n" + (0, _ascii.wrapInASCIIBox)(["Electron executablePath not found!", "Please install it using `npm install -D electron` or set the executablePath to your Electron executable."].join("\n"), 1));
            }
            throw error;
          }
          electronArguments.unshift("-r", new URL("./loader", import.meta.url).pathname);
        }
        let shell = false;
        if (process.platform === "win32") {
          shell = true;
          command = `"${command}"`;
          electronArguments = electronArguments.map((arg) => `"${arg}"`);
        }
        delete env2.NODE_OPTIONS;
        const {
          launchedProcess,
          gracefullyClose,
          kill
        } = await (0, _processLauncher.launchProcess)({
          command,
          args: electronArguments,
          env: env2,
          log: (message) => {
            progress2.log(message);
            browserLogsCollector.log(message);
          },
          shell,
          stdio: "pipe",
          cwd: options.cwd,
          tempDirectories: [artifactsDir],
          attemptToGracefullyClose: () => app.close(),
          handleSIGINT: true,
          handleSIGTERM: true,
          handleSIGHUP: true,
          onExit: () => {
            var _app;
            return (_app = app) === null || _app === void 0 ? void 0 : _app.emit(ElectronApplication.Events.Close);
          }
        });
        const waitForXserverError = new Promise(async (resolve2, reject) => {
          waitForLine(progress2, launchedProcess, /Unable to open X display/).then(() => reject(new Error(["Unable to open X display!", `================================`, "Most likely this is because there is no X server available.", "Use 'xvfb-run' on Linux to launch your tests with an emulated display server.", "For example: 'xvfb-run npm run test:e2e'", `================================`, progress2.metadata.log].join("\n")))).catch(() => {
          });
        });
        const nodeMatchPromise = waitForLine(progress2, launchedProcess, /^Debugger listening on (ws:\/\/.*)$/);
        const chromeMatchPromise = waitForLine(progress2, launchedProcess, /^DevTools listening on (ws:\/\/.*)$/);
        const debuggerDisconnectPromise = waitForLine(progress2, launchedProcess, /Waiting for the debugger to disconnect\.\.\./);
        const nodeMatch = await nodeMatchPromise;
        const nodeTransport = await _transport.WebSocketTransport.connect(progress2, nodeMatch[1]);
        const nodeConnection = new _crConnection.CRConnection(nodeTransport, _helper.helper.debugProtocolLogger(), browserLogsCollector);
        debuggerDisconnectPromise.then(() => {
          nodeTransport.close();
        }).catch(() => {
        });
        const chromeMatch = await Promise.race([chromeMatchPromise, waitForXserverError]);
        const chromeTransport = await _transport.WebSocketTransport.connect(progress2, chromeMatch[1]);
        const browserProcess = {
          onclose: void 0,
          process: launchedProcess,
          close: gracefullyClose,
          kill
        };
        const contextOptions = {
          ...options,
          noDefaultViewport: true
        };
        const browserOptions = {
          name: "electron",
          isChromium: true,
          headful: true,
          persistent: contextOptions,
          browserProcess,
          protocolLogger: _helper.helper.debugProtocolLogger(),
          browserLogsCollector,
          artifactsDir,
          downloadsPath: artifactsDir,
          tracesDir: options.tracesDir || artifactsDir,
          originalLaunchOptions: {}
        };
        (0, _browserContext.validateBrowserContextOptions)(contextOptions, browserOptions);
        const browser2 = await _crBrowser.CRBrowser.connect(this.attribution.playwright, chromeTransport, browserOptions);
        app = new ElectronApplication(this, browser2, nodeConnection, launchedProcess);
        await app.initialize();
        return app;
      }, _timeoutSettings.TimeoutSettings.launchTimeout(options));
    }
  }
  electron$1.Electron = Electron;
  function waitForLine(progress2, process2, regex) {
    return new Promise((resolve2, reject) => {
      const rl = readline.createInterface({
        input: process2.stderr
      });
      const failError = new Error("Process failed to launch!");
      const listeners = [
        _eventsHelper.eventsHelper.addEventListener(rl, "line", onLine),
        _eventsHelper.eventsHelper.addEventListener(rl, "close", reject.bind(null, failError)),
        _eventsHelper.eventsHelper.addEventListener(process2, "exit", reject.bind(null, failError)),
        // It is Ok to remove error handler because we did not create process and there is another listener.
        _eventsHelper.eventsHelper.addEventListener(process2, "error", reject.bind(null, failError))
      ];
      progress2.cleanupWhenAborted(cleanup);
      function onLine(line) {
        const match = line.match(regex);
        if (!match) return;
        cleanup();
        resolve2(match);
      }
      function cleanup() {
        _eventsHelper.eventsHelper.removeEventListeners(listeners);
      }
    });
  }
  return electron$1;
}
var firefox = {};
var ffBrowser = {};
var ffConnection = {};
var hasRequiredFfConnection;
function requireFfConnection() {
  if (hasRequiredFfConnection) return ffConnection;
  hasRequiredFfConnection = 1;
  Object.defineProperty(ffConnection, "__esModule", {
    value: true
  });
  ffConnection.kBrowserCloseMessageId = ffConnection.FFSession = ffConnection.FFConnection = ffConnection.ConnectionEvents = void 0;
  var _events = require$$0$4;
  var _debugLogger = requireDebugLogger();
  var _helper = requireHelper();
  var _protocolError = requireProtocolError();
  const ConnectionEvents = ffConnection.ConnectionEvents = {
    Disconnected: Symbol("Disconnected")
  };
  const kBrowserCloseMessageId = ffConnection.kBrowserCloseMessageId = -9999;
  class FFConnection extends _events.EventEmitter {
    constructor(transport2, protocolLogger, browserLogsCollector) {
      super();
      this._lastId = void 0;
      this._transport = void 0;
      this._protocolLogger = void 0;
      this._browserLogsCollector = void 0;
      this._browserDisconnectedLogs = void 0;
      this.rootSession = void 0;
      this._sessions = void 0;
      this._closed = void 0;
      this.setMaxListeners(0);
      this._transport = transport2;
      this._protocolLogger = protocolLogger;
      this._browserLogsCollector = browserLogsCollector;
      this._lastId = 0;
      this._sessions = /* @__PURE__ */ new Map();
      this._closed = false;
      this.rootSession = new FFSession(this, "", (message) => this._rawSend(message));
      this._sessions.set("", this.rootSession);
      this._transport.onmessage = this._onMessage.bind(this);
      this._transport.onclose = this._onClose.bind(this);
    }
    nextMessageId() {
      return ++this._lastId;
    }
    _rawSend(message) {
      this._protocolLogger("send", message);
      this._transport.send(message);
    }
    async _onMessage(message) {
      this._protocolLogger("receive", message);
      if (message.id === kBrowserCloseMessageId) return;
      const session = this._sessions.get(message.sessionId || "");
      if (session) session.dispatchMessage(message);
    }
    _onClose(reason) {
      this._closed = true;
      this._transport.onmessage = void 0;
      this._transport.onclose = void 0;
      this._browserDisconnectedLogs = _helper.helper.formatBrowserLogs(this._browserLogsCollector.recentLogs(), reason);
      this.rootSession.dispose();
      Promise.resolve().then(() => this.emit(ConnectionEvents.Disconnected));
    }
    close() {
      if (!this._closed) this._transport.close();
    }
    createSession(sessionId) {
      const session = new FFSession(this, sessionId, (message) => this._rawSend({
        ...message,
        sessionId
      }));
      this._sessions.set(sessionId, session);
      return session;
    }
  }
  ffConnection.FFConnection = FFConnection;
  class FFSession extends _events.EventEmitter {
    constructor(connection2, sessionId, rawSend) {
      super();
      this._connection = void 0;
      this._disposed = false;
      this._callbacks = void 0;
      this._sessionId = void 0;
      this._rawSend = void 0;
      this._crashed = false;
      this.on = void 0;
      this.addListener = void 0;
      this.off = void 0;
      this.removeListener = void 0;
      this.once = void 0;
      this.setMaxListeners(0);
      this._callbacks = /* @__PURE__ */ new Map();
      this._connection = connection2;
      this._sessionId = sessionId;
      this._rawSend = rawSend;
      this.on = super.on;
      this.addListener = super.addListener;
      this.off = super.removeListener;
      this.removeListener = super.removeListener;
      this.once = super.once;
    }
    markAsCrashed() {
      this._crashed = true;
    }
    async send(method, params) {
      if (this._crashed || this._disposed || this._connection._closed || this._connection._browserDisconnectedLogs) throw new _protocolError.ProtocolError(this._crashed ? "crashed" : "closed", void 0, this._connection._browserDisconnectedLogs);
      const id = this._connection.nextMessageId();
      this._rawSend({
        method,
        params,
        id
      });
      return new Promise((resolve2, reject) => {
        this._callbacks.set(id, {
          resolve: resolve2,
          reject,
          error: new _protocolError.ProtocolError("error", method)
        });
      });
    }
    sendMayFail(method, params) {
      return this.send(method, params).catch((error) => _debugLogger.debugLogger.log("error", error));
    }
    dispatchMessage(object) {
      if (object.id) {
        const callback = this._callbacks.get(object.id);
        if (callback) {
          this._callbacks.delete(object.id);
          if (object.error) {
            callback.error.setMessage(object.error.message);
            callback.reject(callback.error);
          } else {
            callback.resolve(object.result);
          }
        }
      } else {
        Promise.resolve().then(() => this.emit(object.method, object.params));
      }
    }
    dispose() {
      this._disposed = true;
      this._connection._sessions.delete(this._sessionId);
      for (const callback of this._callbacks.values()) {
        callback.error.type = this._crashed ? "crashed" : "closed";
        callback.error.logs = this._connection._browserDisconnectedLogs;
        callback.reject(callback.error);
      }
      this._callbacks.clear();
    }
  }
  ffConnection.FFSession = FFSession;
  return ffConnection;
}
var ffPage = {};
var ffAccessibility = {};
var hasRequiredFfAccessibility;
function requireFfAccessibility() {
  if (hasRequiredFfAccessibility) return ffAccessibility;
  hasRequiredFfAccessibility = 1;
  Object.defineProperty(ffAccessibility, "__esModule", {
    value: true
  });
  ffAccessibility.getAccessibilityTree = getAccessibilityTree;
  async function getAccessibilityTree(session, needle) {
    const objectId = needle ? needle._objectId : void 0;
    const {
      tree
    } = await session.send("Accessibility.getFullAXTree", {
      objectId
    });
    const axNode = new FFAXNode(tree);
    return {
      tree: axNode,
      needle: needle ? axNode._findNeedle() : null
    };
  }
  const FFRoleToARIARole = new Map(Object.entries({
    "pushbutton": "button",
    "checkbutton": "checkbox",
    "editcombobox": "combobox",
    "content deletion": "deletion",
    "footnote": "doc-footnote",
    "non-native document": "document",
    "grouping": "group",
    "graphic": "img",
    "content insertion": "insertion",
    "animation": "marquee",
    "flat equation": "math",
    "menupopup": "menu",
    "check menu item": "menuitemcheckbox",
    "radio menu item": "menuitemradio",
    "listbox option": "option",
    "radiobutton": "radio",
    "statusbar": "status",
    "pagetab": "tab",
    "pagetablist": "tablist",
    "propertypage": "tabpanel",
    "entry": "textbox",
    "outline": "tree",
    "tree table": "treegrid",
    "outlineitem": "treeitem"
  }));
  class FFAXNode {
    constructor(payload) {
      this._children = void 0;
      this._payload = void 0;
      this._editable = void 0;
      this._richlyEditable = void 0;
      this._focusable = void 0;
      this._expanded = void 0;
      this._name = void 0;
      this._role = void 0;
      this._cachedHasFocusableChild = void 0;
      this._payload = payload;
      this._children = (payload.children || []).map((x2) => new FFAXNode(x2));
      this._editable = !!payload.editable;
      this._richlyEditable = this._editable && payload.tag !== "textarea" && payload.tag !== "input";
      this._focusable = !!payload.focusable;
      this._expanded = !!payload.expanded;
      this._name = this._payload.name;
      this._role = this._payload.role;
    }
    _isPlainTextField() {
      if (this._richlyEditable) return false;
      if (this._editable) return true;
      return this._role === "entry";
    }
    _isTextOnlyObject() {
      const role = this._role;
      return role === "text leaf" || role === "text" || role === "statictext";
    }
    _hasFocusableChild() {
      if (this._cachedHasFocusableChild === void 0) {
        this._cachedHasFocusableChild = false;
        for (const child of this._children) {
          if (child._focusable || child._hasFocusableChild()) {
            this._cachedHasFocusableChild = true;
            break;
          }
        }
      }
      return this._cachedHasFocusableChild;
    }
    children() {
      return this._children;
    }
    _findNeedle() {
      if (this._payload.foundObject) return this;
      for (const child of this._children) {
        const found = child._findNeedle();
        if (found) return found;
      }
      return null;
    }
    isLeafNode() {
      if (!this._children.length) return true;
      if (this._isPlainTextField() || this._isTextOnlyObject()) return true;
      switch (this._role) {
        case "graphic":
        case "scrollbar":
        case "slider":
        case "separator":
        case "progressbar":
          return true;
      }
      if (this._hasFocusableChild()) return false;
      if (this._focusable && this._role !== "document" && this._name) return true;
      if (this._role === "heading" && this._name) return true;
      return false;
    }
    isControl() {
      switch (this._role) {
        case "checkbutton":
        case "check menu item":
        case "check rich option":
        case "combobox":
        case "combobox option":
        case "color chooser":
        case "listbox":
        case "listbox option":
        case "listbox rich option":
        case "popup menu":
        case "menupopup":
        case "menuitem":
        case "menubar":
        case "button":
        case "pushbutton":
        case "radiobutton":
        case "radio menuitem":
        case "scrollbar":
        case "slider":
        case "spinbutton":
        case "switch":
        case "pagetab":
        case "entry":
        case "tree table":
          return true;
        default:
          return false;
      }
    }
    isInteresting(insideControl) {
      if (this._focusable || this._richlyEditable) return true;
      if (this.isControl()) return true;
      if (insideControl) return false;
      return this.isLeafNode() && !!this._name.trim();
    }
    serialize() {
      const node = {
        role: FFRoleToARIARole.get(this._role) || this._role,
        name: this._name || ""
      };
      const userStringProperties = ["name", "description", "roledescription", "valuetext", "keyshortcuts"];
      for (const userStringProperty of userStringProperties) {
        if (!(userStringProperty in this._payload)) continue;
        node[userStringProperty] = this._payload[userStringProperty];
      }
      const booleanProperties = ["disabled", "expanded", "focused", "modal", "multiline", "multiselectable", "readonly", "required", "selected"];
      for (const booleanProperty of booleanProperties) {
        if (this._role === "document" && booleanProperty === "focused") continue;
        const value = this._payload[booleanProperty];
        if (!value) continue;
        node[booleanProperty] = value;
      }
      const numericalProperties = ["level"];
      for (const numericalProperty of numericalProperties) {
        if (!(numericalProperty in this._payload)) continue;
        node[numericalProperty] = this._payload[numericalProperty];
      }
      const tokenProperties = ["autocomplete", "haspopup", "orientation"];
      for (const tokenProperty of tokenProperties) {
        const value = this._payload[tokenProperty];
        if (!value || value === "false") continue;
        node[tokenProperty] = value;
      }
      const axNode = node;
      axNode.valueString = this._payload.value;
      if ("checked" in this._payload) axNode.checked = this._payload.checked === true ? "checked" : this._payload.checked === "mixed" ? "mixed" : "unchecked";
      if ("pressed" in this._payload) axNode.pressed = this._payload.pressed === true ? "pressed" : "released";
      if ("invalid" in this._payload) axNode.invalid = this._payload.invalid === true ? "true" : "false";
      return axNode;
    }
  }
  return ffAccessibility;
}
var ffExecutionContext = {};
var hasRequiredFfExecutionContext;
function requireFfExecutionContext() {
  if (hasRequiredFfExecutionContext) return ffExecutionContext;
  hasRequiredFfExecutionContext = 1;
  Object.defineProperty(ffExecutionContext, "__esModule", {
    value: true
  });
  ffExecutionContext.FFExecutionContext = void 0;
  ffExecutionContext.createHandle = createHandle;
  var _assert = requireAssert$1();
  var _stackTrace = requireStackTrace();
  var _utilityScriptSerializers = requireUtilityScriptSerializers();
  var js = _interopRequireWildcard(requireJavascript$1());
  var dom2 = _interopRequireWildcard(requireDom());
  var _protocolError = requireProtocolError();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  class FFExecutionContext {
    constructor(session, executionContextId) {
      this._session = void 0;
      this._executionContextId = void 0;
      this._session = session;
      this._executionContextId = executionContextId;
    }
    async rawEvaluateJSON(expression) {
      const payload = await this._session.send("Runtime.evaluate", {
        expression,
        returnByValue: true,
        executionContextId: this._executionContextId
      }).catch(rewriteError);
      checkException(payload.exceptionDetails);
      return payload.result.value;
    }
    async rawEvaluateHandle(context, expression) {
      const payload = await this._session.send("Runtime.evaluate", {
        expression,
        returnByValue: false,
        executionContextId: this._executionContextId
      }).catch(rewriteError);
      checkException(payload.exceptionDetails);
      return createHandle(context, payload.result);
    }
    async evaluateWithArguments(expression, returnByValue, utilityScript, values, handles) {
      const payload = await this._session.send("Runtime.callFunction", {
        functionDeclaration: expression,
        args: [{
          objectId: utilityScript._objectId,
          value: void 0
        }, ...values.map((value) => ({
          value
        })), ...handles.map((handle) => ({
          objectId: handle._objectId,
          value: void 0
        }))],
        returnByValue,
        executionContextId: this._executionContextId
      }).catch(rewriteError);
      checkException(payload.exceptionDetails);
      if (returnByValue) return (0, _utilityScriptSerializers.parseEvaluationResultValue)(payload.result.value);
      return createHandle(utilityScript._context, payload.result);
    }
    async getProperties(object) {
      const response = await this._session.send("Runtime.getObjectProperties", {
        executionContextId: this._executionContextId,
        objectId: object._objectId
      });
      const result = /* @__PURE__ */ new Map();
      for (const property of response.properties) result.set(property.name, createHandle(object._context, property.value));
      return result;
    }
    async releaseHandle(handle) {
      if (!handle._objectId) return;
      await this._session.send("Runtime.disposeObject", {
        executionContextId: this._executionContextId,
        objectId: handle._objectId
      });
    }
  }
  ffExecutionContext.FFExecutionContext = FFExecutionContext;
  function checkException(exceptionDetails) {
    if (!exceptionDetails) return;
    if (exceptionDetails.value) throw new js.JavaScriptErrorInEvaluate(JSON.stringify(exceptionDetails.value));
    else throw new js.JavaScriptErrorInEvaluate(exceptionDetails.text + (exceptionDetails.stack ? "\n" + exceptionDetails.stack : ""));
  }
  function rewriteError(error) {
    if (error.message.includes("cyclic object value") || error.message.includes("Object is not serializable")) return {
      result: {
        type: "undefined",
        value: void 0
      }
    };
    if (error instanceof TypeError && error.message.startsWith("Converting circular structure to JSON")) (0, _stackTrace.rewriteErrorMessage)(error, error.message + " Are you passing a nested JSHandle?");
    if (!js.isJavaScriptErrorInEvaluate(error) && !(0, _protocolError.isSessionClosedError)(error)) throw new Error("Execution context was destroyed, most likely because of a navigation.");
    throw error;
  }
  function potentiallyUnserializableValue(remoteObject) {
    const value = remoteObject.value;
    const unserializableValue = remoteObject.unserializableValue;
    return unserializableValue ? js.parseUnserializableValue(unserializableValue) : value;
  }
  function renderPreview(object) {
    if (object.type === "undefined") return "undefined";
    if (object.unserializableValue) return String(object.unserializableValue);
    if (object.type === "symbol") return "Symbol()";
    if (object.subtype === "regexp") return "RegExp";
    if (object.subtype === "weakmap") return "WeakMap";
    if (object.subtype === "weakset") return "WeakSet";
    if (object.subtype) return object.subtype[0].toUpperCase() + object.subtype.slice(1);
    if ("value" in object) return String(object.value);
  }
  function createHandle(context, remoteObject) {
    if (remoteObject.subtype === "node") {
      (0, _assert.assert)(context instanceof dom2.FrameExecutionContext);
      return new dom2.ElementHandle(context, remoteObject.objectId);
    }
    return new js.JSHandle(context, remoteObject.subtype || remoteObject.type || "", renderPreview(remoteObject), remoteObject.objectId, potentiallyUnserializableValue(remoteObject));
  }
  return ffExecutionContext;
}
var ffInput = {};
var hasRequiredFfInput;
function requireFfInput() {
  if (hasRequiredFfInput) return ffInput;
  hasRequiredFfInput = 1;
  Object.defineProperty(ffInput, "__esModule", {
    value: true
  });
  ffInput.RawTouchscreenImpl = ffInput.RawMouseImpl = ffInput.RawKeyboardImpl = void 0;
  function toModifiersMask(modifiers) {
    let mask = 0;
    if (modifiers.has("Alt")) mask |= 1;
    if (modifiers.has("Control")) mask |= 2;
    if (modifiers.has("Shift")) mask |= 4;
    if (modifiers.has("Meta")) mask |= 8;
    return mask;
  }
  function toButtonNumber(button) {
    if (button === "left") return 0;
    if (button === "middle") return 1;
    if (button === "right") return 2;
    return 0;
  }
  function toButtonsMask(buttons) {
    let mask = 0;
    if (buttons.has("left")) mask |= 1;
    if (buttons.has("right")) mask |= 2;
    if (buttons.has("middle")) mask |= 4;
    return mask;
  }
  class RawKeyboardImpl {
    constructor(client) {
      this._client = void 0;
      this._client = client;
    }
    async keydown(modifiers, keyName, description, autoRepeat) {
      let text = description.text;
      if (text === "\r") text = "";
      const {
        code,
        key,
        location: location2
      } = description;
      await this._client.send("Page.dispatchKeyEvent", {
        type: "keydown",
        keyCode: description.keyCodeWithoutLocation,
        code,
        key,
        repeat: autoRepeat,
        location: location2,
        text
      });
    }
    async keyup(modifiers, keyName, description) {
      const {
        code,
        key,
        location: location2
      } = description;
      await this._client.send("Page.dispatchKeyEvent", {
        type: "keyup",
        key,
        keyCode: description.keyCodeWithoutLocation,
        code,
        location: location2,
        repeat: false
      });
    }
    async sendText(text) {
      await this._client.send("Page.insertText", {
        text
      });
    }
  }
  ffInput.RawKeyboardImpl = RawKeyboardImpl;
  class RawMouseImpl {
    constructor(client) {
      this._client = void 0;
      this._page = void 0;
      this._client = client;
    }
    async move(x2, y2, button, buttons, modifiers, forClick) {
      await this._client.send("Page.dispatchMouseEvent", {
        type: "mousemove",
        button: 0,
        buttons: toButtonsMask(buttons),
        x: Math.floor(x2),
        y: Math.floor(y2),
        modifiers: toModifiersMask(modifiers)
      });
    }
    async down(x2, y2, button, buttons, modifiers, clickCount) {
      await this._client.send("Page.dispatchMouseEvent", {
        type: "mousedown",
        button: toButtonNumber(button),
        buttons: toButtonsMask(buttons),
        x: Math.floor(x2),
        y: Math.floor(y2),
        modifiers: toModifiersMask(modifiers),
        clickCount
      });
    }
    async up(x2, y2, button, buttons, modifiers, clickCount) {
      await this._client.send("Page.dispatchMouseEvent", {
        type: "mouseup",
        button: toButtonNumber(button),
        buttons: toButtonsMask(buttons),
        x: Math.floor(x2),
        y: Math.floor(y2),
        modifiers: toModifiersMask(modifiers),
        clickCount
      });
    }
    async wheel(x2, y2, buttons, modifiers, deltaX, deltaY) {
      await this._page.mainFrame().evaluateExpression(`new Promise(requestAnimationFrame)`, {
        world: "utility"
      });
      await this._client.send("Page.dispatchWheelEvent", {
        deltaX,
        deltaY,
        x: Math.floor(x2),
        y: Math.floor(y2),
        deltaZ: 0,
        modifiers: toModifiersMask(modifiers)
      });
    }
    setPage(page2) {
      this._page = page2;
    }
  }
  ffInput.RawMouseImpl = RawMouseImpl;
  class RawTouchscreenImpl {
    constructor(client) {
      this._client = void 0;
      this._client = client;
    }
    async tap(x2, y2, modifiers) {
      await this._client.send("Page.dispatchTapEvent", {
        x: x2,
        y: y2,
        modifiers: toModifiersMask(modifiers)
      });
    }
  }
  ffInput.RawTouchscreenImpl = RawTouchscreenImpl;
  return ffInput;
}
var ffNetworkManager = {};
var hasRequiredFfNetworkManager;
function requireFfNetworkManager() {
  if (hasRequiredFfNetworkManager) return ffNetworkManager;
  hasRequiredFfNetworkManager = 1;
  Object.defineProperty(ffNetworkManager, "__esModule", {
    value: true
  });
  ffNetworkManager.FFNetworkManager = void 0;
  var _eventsHelper = requireEventsHelper();
  var network2 = _interopRequireWildcard(requireNetwork$1());
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  class FFNetworkManager {
    constructor(session, page2) {
      this._session = void 0;
      this._requests = void 0;
      this._page = void 0;
      this._eventListeners = void 0;
      this._session = session;
      this._requests = /* @__PURE__ */ new Map();
      this._page = page2;
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(session, "Network.requestWillBeSent", this._onRequestWillBeSent.bind(this)), _eventsHelper.eventsHelper.addEventListener(session, "Network.responseReceived", this._onResponseReceived.bind(this)), _eventsHelper.eventsHelper.addEventListener(session, "Network.requestFinished", this._onRequestFinished.bind(this)), _eventsHelper.eventsHelper.addEventListener(session, "Network.requestFailed", this._onRequestFailed.bind(this))];
    }
    dispose() {
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
    }
    async setRequestInterception(enabled) {
      await Promise.all([this._session.send("Network.setRequestInterception", {
        enabled
      }), this._session.send("Page.setCacheDisabled", {
        cacheDisabled: enabled
      })]);
    }
    _onRequestWillBeSent(event) {
      const redirectedFrom = event.redirectedFrom ? this._requests.get(event.redirectedFrom) || null : null;
      const frame2 = redirectedFrom ? redirectedFrom.request.frame() : event.frameId ? this._page._frameManager.frame(event.frameId) : null;
      if (!frame2) return;
      if (redirectedFrom) this._requests.delete(redirectedFrom._id);
      const request = new InterceptableRequest(frame2, redirectedFrom, event);
      let route;
      if (event.isIntercepted) route = new FFRouteImpl(this._session, request);
      this._requests.set(request._id, request);
      this._page._frameManager.requestStarted(request.request, route);
    }
    _onResponseReceived(event) {
      var _event$securityDetail, _event$securityDetail2, _event$securityDetail3, _event$securityDetail4, _event$securityDetail5;
      const request = this._requests.get(event.requestId);
      if (!request) return;
      const getResponseBody = async () => {
        const response2 = await this._session.send("Network.getResponseBody", {
          requestId: request._id
        });
        if (response2.evicted) throw new Error(`Response body for ${request.request.method()} ${request.request.url()} was evicted!`);
        return Buffer.from(response2.base64body, "base64");
      };
      const startTime = event.timing.startTime;
      function relativeToStart(time2) {
        if (!time2) return -1;
        return (time2 - startTime) / 1e3;
      }
      const timing = {
        startTime: startTime / 1e3,
        domainLookupStart: relativeToStart(event.timing.domainLookupStart),
        domainLookupEnd: relativeToStart(event.timing.domainLookupEnd),
        connectStart: relativeToStart(event.timing.connectStart),
        secureConnectionStart: relativeToStart(event.timing.secureConnectionStart),
        connectEnd: relativeToStart(event.timing.connectEnd),
        requestStart: relativeToStart(event.timing.requestStart),
        responseStart: relativeToStart(event.timing.responseStart)
      };
      const response = new network2.Response(request.request, event.status, event.statusText, parseMultivalueHeaders(event.headers), timing, getResponseBody, event.fromServiceWorker);
      if (event !== null && event !== void 0 && event.remoteIPAddress && typeof (event === null || event === void 0 ? void 0 : event.remotePort) === "number") {
        response._serverAddrFinished({
          ipAddress: event.remoteIPAddress,
          port: event.remotePort
        });
      } else {
        response._serverAddrFinished();
      }
      response._securityDetailsFinished({
        protocol: event === null || event === void 0 || (_event$securityDetail = event.securityDetails) === null || _event$securityDetail === void 0 ? void 0 : _event$securityDetail.protocol,
        subjectName: event === null || event === void 0 || (_event$securityDetail2 = event.securityDetails) === null || _event$securityDetail2 === void 0 ? void 0 : _event$securityDetail2.subjectName,
        issuer: event === null || event === void 0 || (_event$securityDetail3 = event.securityDetails) === null || _event$securityDetail3 === void 0 ? void 0 : _event$securityDetail3.issuer,
        validFrom: event === null || event === void 0 || (_event$securityDetail4 = event.securityDetails) === null || _event$securityDetail4 === void 0 ? void 0 : _event$securityDetail4.validFrom,
        validTo: event === null || event === void 0 || (_event$securityDetail5 = event.securityDetails) === null || _event$securityDetail5 === void 0 ? void 0 : _event$securityDetail5.validTo
      });
      response.setRawResponseHeaders(null);
      response.setResponseHeadersSize(null);
      this._page._frameManager.requestReceivedResponse(response);
    }
    _onRequestFinished(event) {
      const request = this._requests.get(event.requestId);
      if (!request) return;
      const response = request.request._existingResponse();
      response.setTransferSize(event.transferSize);
      response.setEncodedBodySize(event.encodedBodySize);
      const isRedirected = response.status() >= 300 && response.status() <= 399;
      const responseEndTime = event.responseEndTime ? event.responseEndTime / 1e3 - response.timing().startTime : -1;
      if (isRedirected) {
        response._requestFinished(responseEndTime);
      } else {
        this._requests.delete(request._id);
        response._requestFinished(responseEndTime);
      }
      if (event.protocolVersion) response._setHttpVersion(event.protocolVersion);
      this._page._frameManager.reportRequestFinished(request.request, response);
    }
    _onRequestFailed(event) {
      const request = this._requests.get(event.requestId);
      if (!request) return;
      this._requests.delete(request._id);
      const response = request.request._existingResponse();
      if (response) {
        response.setTransferSize(null);
        response.setEncodedBodySize(null);
        response._requestFinished(-1);
      }
      request.request._setFailureText(event.errorCode);
      this._page._frameManager.requestFailed(request.request, event.errorCode === "NS_BINDING_ABORTED");
    }
  }
  ffNetworkManager.FFNetworkManager = FFNetworkManager;
  const causeToResourceType = {
    TYPE_INVALID: "other",
    TYPE_OTHER: "other",
    TYPE_SCRIPT: "script",
    TYPE_IMAGE: "image",
    TYPE_STYLESHEET: "stylesheet",
    TYPE_OBJECT: "other",
    TYPE_DOCUMENT: "document",
    TYPE_SUBDOCUMENT: "document",
    TYPE_REFRESH: "document",
    TYPE_XBL: "other",
    TYPE_PING: "other",
    TYPE_XMLHTTPREQUEST: "xhr",
    TYPE_OBJECT_SUBREQUEST: "other",
    TYPE_DTD: "other",
    TYPE_FONT: "font",
    TYPE_MEDIA: "media",
    TYPE_WEBSOCKET: "websocket",
    TYPE_CSP_REPORT: "other",
    TYPE_XSLT: "other",
    TYPE_BEACON: "other",
    TYPE_FETCH: "fetch",
    TYPE_IMAGESET: "image",
    TYPE_WEB_MANIFEST: "manifest"
  };
  const internalCauseToResourceType = {
    TYPE_INTERNAL_EVENTSOURCE: "eventsource"
  };
  class InterceptableRequest {
    constructor(frame2, redirectedFrom, payload) {
      this.request = void 0;
      this._id = void 0;
      this._redirectedTo = void 0;
      this._id = payload.requestId;
      if (redirectedFrom) redirectedFrom._redirectedTo = this;
      let postDataBuffer = null;
      if (payload.postData) postDataBuffer = Buffer.from(payload.postData, "base64");
      this.request = new network2.Request(frame2._page._browserContext, frame2, null, redirectedFrom ? redirectedFrom.request : null, payload.navigationId, payload.url, internalCauseToResourceType[payload.internalCause] || causeToResourceType[payload.cause] || "other", payload.method, postDataBuffer, payload.headers);
      this.request.setRawRequestHeaders(null);
    }
    _finalRequest() {
      let request = this;
      while (request._redirectedTo) request = request._redirectedTo;
      return request;
    }
  }
  class FFRouteImpl {
    constructor(session, request) {
      this._request = void 0;
      this._session = void 0;
      this._session = session;
      this._request = request;
    }
    async continue(overrides) {
      await this._session.sendMayFail("Network.resumeInterceptedRequest", {
        requestId: this._request._id,
        url: overrides.url,
        method: overrides.method,
        headers: overrides.headers,
        postData: overrides.postData ? Buffer.from(overrides.postData).toString("base64") : void 0
      });
    }
    async fulfill(response) {
      const base64body = response.isBase64 ? response.body : Buffer.from(response.body).toString("base64");
      await this._session.sendMayFail("Network.fulfillInterceptedRequest", {
        requestId: this._request._id,
        status: response.status,
        statusText: network2.statusText(response.status),
        headers: response.headers,
        base64body
      });
    }
    async abort(errorCode) {
      await this._session.sendMayFail("Network.abortInterceptedRequest", {
        requestId: this._request._id,
        errorCode
      });
    }
  }
  function parseMultivalueHeaders(headers2) {
    const result = [];
    for (const header of headers2) {
      const separator = header.name.toLowerCase() === "set-cookie" ? "\n" : ",";
      const tokens = header.value.split(separator).map((s2) => s2.trim());
      for (const token of tokens) result.push({
        name: header.name,
        value: token
      });
    }
    return result;
  }
  return ffNetworkManager;
}
var hasRequiredFfPage;
function requireFfPage() {
  if (hasRequiredFfPage) return ffPage;
  hasRequiredFfPage = 1;
  Object.defineProperty(ffPage, "__esModule", {
    value: true
  });
  ffPage.UTILITY_WORLD_NAME = ffPage.FFPage = void 0;
  var _eventsHelper = requireEventsHelper();
  var dialog2 = _interopRequireWildcard(requireDialog$1());
  var dom2 = _interopRequireWildcard(requireDom());
  var _page = requirePage$1();
  var _ffAccessibility = requireFfAccessibility();
  var _ffConnection = requireFfConnection();
  var _ffExecutionContext = requireFfExecutionContext();
  var _ffInput = requireFfInput();
  var _ffNetworkManager = requireFfNetworkManager();
  var _debugLogger = requireDebugLogger();
  var _stackTrace = requireStackTrace();
  var _browserContext = requireBrowserContext$1();
  var _errors = requireErrors$1();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  const UTILITY_WORLD_NAME = ffPage.UTILITY_WORLD_NAME = "__playwright_utility_world__";
  class FFPage {
    constructor(session, browserContext2, opener) {
      this.cspErrorsAsynchronousForInlineScripts = true;
      this.rawMouse = void 0;
      this.rawKeyboard = void 0;
      this.rawTouchscreen = void 0;
      this._session = void 0;
      this._page = void 0;
      this._networkManager = void 0;
      this._browserContext = void 0;
      this._reportedAsNew = false;
      this._opener = void 0;
      this._contextIdToContext = void 0;
      this._eventListeners = void 0;
      this._workers = /* @__PURE__ */ new Map();
      this._screencastId = void 0;
      this._initScripts = [];
      this._session = session;
      this._opener = opener;
      this.rawKeyboard = new _ffInput.RawKeyboardImpl(session);
      this.rawMouse = new _ffInput.RawMouseImpl(session);
      this.rawTouchscreen = new _ffInput.RawTouchscreenImpl(session);
      this._contextIdToContext = /* @__PURE__ */ new Map();
      this._browserContext = browserContext2;
      this._page = new _page.Page(this, browserContext2);
      this.rawMouse.setPage(this._page);
      this._networkManager = new _ffNetworkManager.FFNetworkManager(session, this._page);
      this._page.on(_page.Page.Events.FrameDetached, (frame2) => this._removeContextsForFrame(frame2));
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(this._session, "Page.eventFired", this._onEventFired.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameAttached", this._onFrameAttached.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameDetached", this._onFrameDetached.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.navigationAborted", this._onNavigationAborted.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.navigationCommitted", this._onNavigationCommitted.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.navigationStarted", this._onNavigationStarted.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.sameDocumentNavigation", this._onSameDocumentNavigation.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.executionContextCreated", this._onExecutionContextCreated.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.executionContextDestroyed", this._onExecutionContextDestroyed.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.executionContextsCleared", this._onExecutionContextsCleared.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.linkClicked", (event) => this._onLinkClicked(event.phase)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.uncaughtError", this._onUncaughtError.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.console", this._onConsole.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.dialogOpened", this._onDialogOpened.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.bindingCalled", this._onBindingCalled.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.fileChooserOpened", this._onFileChooserOpened.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.workerCreated", this._onWorkerCreated.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.workerDestroyed", this._onWorkerDestroyed.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.dispatchMessageFromWorker", this._onDispatchMessageFromWorker.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.crashed", this._onCrashed.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.videoRecordingStarted", this._onVideoRecordingStarted.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.webSocketCreated", this._onWebSocketCreated.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.webSocketClosed", this._onWebSocketClosed.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.webSocketFrameReceived", this._onWebSocketFrameReceived.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.webSocketFrameSent", this._onWebSocketFrameSent.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.screencastFrame", this._onScreencastFrame.bind(this))];
      this._session.once("Page.ready", () => {
        var _this$_opener;
        if (this._reportedAsNew) return;
        this._reportedAsNew = true;
        this._page.reportAsNew((_this$_opener = this._opener) === null || _this$_opener === void 0 ? void 0 : _this$_opener._page);
      });
      this.addInitScript(new _page.InitScript("", true), UTILITY_WORLD_NAME).catch((e2) => this._markAsError(e2));
    }
    async _markAsError(error) {
      var _this$_opener2;
      if (this._reportedAsNew) return;
      this._reportedAsNew = true;
      this._page.reportAsNew((_this$_opener2 = this._opener) === null || _this$_opener2 === void 0 ? void 0 : _this$_opener2._page, error);
    }
    _onWebSocketCreated(event) {
      this._page._frameManager.onWebSocketCreated(webSocketId(event.frameId, event.wsid), event.requestURL);
      this._page._frameManager.onWebSocketRequest(webSocketId(event.frameId, event.wsid));
    }
    _onWebSocketClosed(event) {
      if (event.error) this._page._frameManager.webSocketError(webSocketId(event.frameId, event.wsid), event.error);
      this._page._frameManager.webSocketClosed(webSocketId(event.frameId, event.wsid));
    }
    _onWebSocketFrameReceived(event) {
      this._page._frameManager.webSocketFrameReceived(webSocketId(event.frameId, event.wsid), event.opcode, event.data);
    }
    _onWebSocketFrameSent(event) {
      this._page._frameManager.onWebSocketFrameSent(webSocketId(event.frameId, event.wsid), event.opcode, event.data);
    }
    _onExecutionContextCreated(payload) {
      const {
        executionContextId,
        auxData
      } = payload;
      const frame2 = this._page._frameManager.frame(auxData.frameId);
      if (!frame2) return;
      const delegate = new _ffExecutionContext.FFExecutionContext(this._session, executionContextId);
      let worldName = null;
      if (auxData.name === UTILITY_WORLD_NAME) worldName = "utility";
      else if (!auxData.name) worldName = "main";
      const context = new dom2.FrameExecutionContext(delegate, frame2, worldName);
      if (worldName) frame2._contextCreated(worldName, context);
      this._contextIdToContext.set(executionContextId, context);
    }
    _onExecutionContextDestroyed(payload) {
      const {
        executionContextId
      } = payload;
      const context = this._contextIdToContext.get(executionContextId);
      if (!context) return;
      this._contextIdToContext.delete(executionContextId);
      context.frame._contextDestroyed(context);
    }
    _onExecutionContextsCleared() {
      for (const executionContextId of Array.from(this._contextIdToContext.keys())) this._onExecutionContextDestroyed({
        executionContextId
      });
    }
    _removeContextsForFrame(frame2) {
      for (const [contextId, context] of this._contextIdToContext) {
        if (context.frame === frame2) this._contextIdToContext.delete(contextId);
      }
    }
    _onLinkClicked(phase) {
      if (phase === "before") this._page._frameManager.frameWillPotentiallyRequestNavigation();
      else this._page._frameManager.frameDidPotentiallyRequestNavigation();
    }
    _onNavigationStarted(params) {
      this._page._frameManager.frameRequestedNavigation(params.frameId, params.navigationId);
    }
    _onNavigationAborted(params) {
      this._page._frameManager.frameAbortedNavigation(params.frameId, params.errorText, params.navigationId);
    }
    _onNavigationCommitted(params) {
      for (const [workerId, worker2] of this._workers) {
        if (worker2.frameId === params.frameId) this._onWorkerDestroyed({
          workerId
        });
      }
      this._page._frameManager.frameCommittedNewDocumentNavigation(params.frameId, params.url, params.name || "", params.navigationId || "", false);
    }
    _onSameDocumentNavigation(params) {
      this._page._frameManager.frameCommittedSameDocumentNavigation(params.frameId, params.url);
    }
    _onFrameAttached(params) {
      this._page._frameManager.frameAttached(params.frameId, params.parentFrameId);
    }
    _onFrameDetached(params) {
      this._page._frameManager.frameDetached(params.frameId);
    }
    _onEventFired(payload) {
      const {
        frameId,
        name
      } = payload;
      if (name === "load") this._page._frameManager.frameLifecycleEvent(frameId, "load");
      if (name === "DOMContentLoaded") this._page._frameManager.frameLifecycleEvent(frameId, "domcontentloaded");
    }
    _onUncaughtError(params) {
      const {
        name,
        message
      } = (0, _stackTrace.splitErrorMessage)(params.message);
      const error = new Error(message);
      error.stack = params.message + "\n" + params.stack.split("\n").filter(Boolean).map((a) => a.replace(/([^@]*)@(.*)/, "    at $1 ($2)")).join("\n");
      error.name = name;
      this._page.emitOnContextOnceInitialized(_browserContext.BrowserContext.Events.PageError, error, this._page);
    }
    _onConsole(payload) {
      const {
        type,
        args,
        executionContextId,
        location: location2
      } = payload;
      const context = this._contextIdToContext.get(executionContextId);
      if (!context) return;
      this._page._addConsoleMessage(type === "warn" ? "warning" : type, args.map((arg) => (0, _ffExecutionContext.createHandle)(context, arg)), location2);
    }
    _onDialogOpened(params) {
      this._page.emitOnContext(_browserContext.BrowserContext.Events.Dialog, new dialog2.Dialog(this._page, params.type, params.message, async (accept, promptText) => {
        await this._session.sendMayFail("Page.handleDialog", {
          dialogId: params.dialogId,
          accept,
          promptText
        });
      }, params.defaultValue));
    }
    async _onBindingCalled(event) {
      const pageOrError = await this._page.waitForInitializedOrError();
      if (!(pageOrError instanceof Error)) {
        const context = this._contextIdToContext.get(event.executionContextId);
        if (context) await this._page._onBindingCalled(event.payload, context);
      }
    }
    async _onFileChooserOpened(payload) {
      const {
        executionContextId,
        element
      } = payload;
      const context = this._contextIdToContext.get(executionContextId);
      if (!context) return;
      const handle = (0, _ffExecutionContext.createHandle)(context, element).asElement();
      await this._page._onFileChooserOpened(handle);
    }
    async _onWorkerCreated(event) {
      const workerId = event.workerId;
      const worker2 = new _page.Worker(this._page, event.url);
      const workerSession = new _ffConnection.FFSession(this._session._connection, workerId, (message) => {
        this._session.send("Page.sendMessageToWorker", {
          frameId: event.frameId,
          workerId,
          message: JSON.stringify(message)
        }).catch((e2) => {
          workerSession.dispatchMessage({
            id: message.id,
            method: "",
            params: {},
            error: {
              message: e2.message,
              data: void 0
            }
          });
        });
      });
      this._workers.set(workerId, {
        session: workerSession,
        frameId: event.frameId
      });
      this._page._addWorker(workerId, worker2);
      workerSession.once("Runtime.executionContextCreated", (event2) => {
        worker2._createExecutionContext(new _ffExecutionContext.FFExecutionContext(workerSession, event2.executionContextId));
      });
      workerSession.on("Runtime.console", (event2) => {
        const {
          type,
          args,
          location: location2
        } = event2;
        const context = worker2._existingExecutionContext;
        this._page._addConsoleMessage(type, args.map((arg) => (0, _ffExecutionContext.createHandle)(context, arg)), location2);
      });
    }
    _onWorkerDestroyed(event) {
      const workerId = event.workerId;
      const worker2 = this._workers.get(workerId);
      if (!worker2) return;
      worker2.session.dispose();
      this._workers.delete(workerId);
      this._page._removeWorker(workerId);
    }
    async _onDispatchMessageFromWorker(event) {
      const worker2 = this._workers.get(event.workerId);
      if (!worker2) return;
      worker2.session.dispatchMessage(JSON.parse(event.message));
    }
    async _onCrashed(event) {
      this._session.markAsCrashed();
      this._page._didCrash();
    }
    _onVideoRecordingStarted(event) {
      this._browserContext._browser._videoStarted(this._browserContext, event.screencastId, event.file, this._page.waitForInitializedOrError());
    }
    didClose() {
      this._markAsError(new _errors.TargetClosedError());
      this._session.dispose();
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      this._networkManager.dispose();
      this._page._didClose();
    }
    async navigateFrame(frame2, url, referer) {
      const response = await this._session.send("Page.navigate", {
        url,
        referer,
        frameId: frame2._id
      });
      return {
        newDocumentId: response.navigationId || void 0
      };
    }
    async updateExtraHTTPHeaders() {
      await this._session.send("Network.setExtraHTTPHeaders", {
        headers: this._page.extraHTTPHeaders() || []
      });
    }
    async updateEmulatedViewportSize() {
      const viewportSize = this._page.viewportSize();
      await this._session.send("Page.setViewportSize", {
        viewportSize
      });
    }
    async bringToFront() {
      await this._session.send("Page.bringToFront", {});
    }
    async updateEmulateMedia() {
      const emulatedMedia = this._page.emulatedMedia();
      const colorScheme = emulatedMedia.colorScheme === "no-override" ? void 0 : emulatedMedia.colorScheme;
      const reducedMotion = emulatedMedia.reducedMotion === "no-override" ? void 0 : emulatedMedia.reducedMotion;
      const forcedColors = emulatedMedia.forcedColors === "no-override" ? void 0 : emulatedMedia.forcedColors;
      const contrast = emulatedMedia.contrast === "no-override" ? void 0 : emulatedMedia.contrast;
      await this._session.send("Page.setEmulatedMedia", {
        // Empty string means reset.
        type: emulatedMedia.media === "no-override" ? "" : emulatedMedia.media,
        colorScheme,
        reducedMotion,
        forcedColors,
        contrast
      });
    }
    async updateRequestInterception() {
      await this._networkManager.setRequestInterception(this._page.needsRequestInterception());
    }
    async updateFileChooserInterception() {
      const enabled = this._page.fileChooserIntercepted();
      await this._session.send("Page.setInterceptFileChooserDialog", {
        enabled
      }).catch(() => {
      });
    }
    async reload() {
      await this._session.send("Page.reload");
    }
    async goBack() {
      const {
        success
      } = await this._session.send("Page.goBack", {
        frameId: this._page.mainFrame()._id
      });
      return success;
    }
    async goForward() {
      const {
        success
      } = await this._session.send("Page.goForward", {
        frameId: this._page.mainFrame()._id
      });
      return success;
    }
    async requestGC() {
      await this._session.send("Heap.collectGarbage");
    }
    async addInitScript(initScript, worldName) {
      this._initScripts.push({
        initScript,
        worldName
      });
      await this._session.send("Page.setInitScripts", {
        scripts: this._initScripts.map((s2) => ({
          script: s2.initScript.source,
          worldName: s2.worldName
        }))
      });
    }
    async removeNonInternalInitScripts() {
      this._initScripts = this._initScripts.filter((s2) => s2.initScript.internal);
      await this._session.send("Page.setInitScripts", {
        scripts: this._initScripts.map((s2) => ({
          script: s2.initScript.source,
          worldName: s2.worldName
        }))
      });
    }
    async closePage(runBeforeUnload) {
      await this._session.send("Page.close", {
        runBeforeUnload
      });
    }
    async setBackgroundColor(color) {
      if (color) throw new Error("Not implemented");
    }
    async takeScreenshot(progress2, format2, documentRect, viewportRect, quality, fitsViewport, scale) {
      if (!documentRect) {
        const scrollOffset = await this._page.mainFrame().waitForFunctionValueInUtility(progress2, () => ({
          x: window.scrollX,
          y: window.scrollY
        }));
        documentRect = {
          x: viewportRect.x + scrollOffset.x,
          y: viewportRect.y + scrollOffset.y,
          width: viewportRect.width,
          height: viewportRect.height
        };
      }
      progress2.throwIfAborted();
      const {
        data
      } = await this._session.send("Page.screenshot", {
        mimeType: "image/" + format2,
        clip: documentRect,
        quality,
        omitDeviceScaleFactor: scale === "css"
      });
      return Buffer.from(data, "base64");
    }
    async getContentFrame(handle) {
      const {
        contentFrameId
      } = await this._session.send("Page.describeNode", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId
      });
      if (!contentFrameId) return null;
      return this._page._frameManager.frame(contentFrameId);
    }
    async getOwnerFrame(handle) {
      const {
        ownerFrameId
      } = await this._session.send("Page.describeNode", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId
      });
      return ownerFrameId || null;
    }
    async getBoundingBox(handle) {
      const quads = await this.getContentQuads(handle);
      if (!quads || !quads.length) return null;
      let minX = Infinity;
      let maxX = -Infinity;
      let minY = Infinity;
      let maxY = -Infinity;
      for (const quad of quads) {
        for (const point of quad) {
          minX = Math.min(minX, point.x);
          maxX = Math.max(maxX, point.x);
          minY = Math.min(minY, point.y);
          maxY = Math.max(maxY, point.y);
        }
      }
      return {
        x: minX,
        y: minY,
        width: maxX - minX,
        height: maxY - minY
      };
    }
    async scrollRectIntoViewIfNeeded(handle, rect) {
      return await this._session.send("Page.scrollIntoViewIfNeeded", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId,
        rect
      }).then(() => "done").catch((e2) => {
        if (e2 instanceof Error && e2.message.includes("Node is detached from document")) return "error:notconnected";
        if (e2 instanceof Error && e2.message.includes("Node does not have a layout object")) return "error:notvisible";
        throw e2;
      });
    }
    async setScreencastOptions(options) {
      if (options) {
        const {
          screencastId
        } = await this._session.send("Page.startScreencast", options);
        this._screencastId = screencastId;
      } else {
        await this._session.send("Page.stopScreencast");
      }
    }
    _onScreencastFrame(event) {
      if (!this._screencastId) return;
      const screencastId = this._screencastId;
      this._page.throttleScreencastFrameAck(() => {
        this._session.send("Page.screencastFrameAck", {
          screencastId
        }).catch((e2) => _debugLogger.debugLogger.log("error", e2));
      });
      const buffer2 = Buffer.from(event.data, "base64");
      this._page.emit(_page.Page.Events.ScreencastFrame, {
        buffer: buffer2,
        width: event.deviceWidth,
        height: event.deviceHeight
      });
    }
    rafCountForStablePosition() {
      return 1;
    }
    async getContentQuads(handle) {
      const result = await this._session.sendMayFail("Page.getContentQuads", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId
      });
      if (!result) return null;
      return result.quads.map((quad) => [quad.p1, quad.p2, quad.p3, quad.p4]);
    }
    async setInputFilePaths(handle, files) {
      await this._session.send("Page.setFileInputFiles", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId,
        files
      });
    }
    async adoptElementHandle(handle, to) {
      const result = await this._session.send("Page.adoptNode", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId,
        executionContextId: to.delegate._executionContextId
      });
      if (!result.remoteObject) throw new Error(dom2.kUnableToAdoptErrorMessage);
      return (0, _ffExecutionContext.createHandle)(to, result.remoteObject);
    }
    async getAccessibilityTree(needle) {
      return (0, _ffAccessibility.getAccessibilityTree)(this._session, needle);
    }
    async inputActionEpilogue() {
    }
    async resetForReuse() {
      await this.rawMouse.move(-1, -1, "none", /* @__PURE__ */ new Set(), /* @__PURE__ */ new Set(), false);
    }
    async getFrameElement(frame2) {
      const parent = frame2.parentFrame();
      if (!parent) throw new Error("Frame has been detached.");
      const context = await parent._mainContext();
      const result = await this._session.send("Page.adoptNode", {
        frameId: frame2._id,
        executionContextId: context.delegate._executionContextId
      });
      if (!result.remoteObject) throw new Error("Frame has been detached.");
      return (0, _ffExecutionContext.createHandle)(context, result.remoteObject);
    }
    shouldToggleStyleSheetToSyncAnimations() {
      return false;
    }
  }
  ffPage.FFPage = FFPage;
  function webSocketId(frameId, wsid) {
    return `${frameId}---${wsid}`;
  }
  return ffPage;
}
var hasRequiredFfBrowser;
function requireFfBrowser() {
  if (hasRequiredFfBrowser) return ffBrowser;
  hasRequiredFfBrowser = 1;
  Object.defineProperty(ffBrowser, "__esModule", {
    value: true
  });
  ffBrowser.FFBrowserContext = ffBrowser.FFBrowser = void 0;
  var _utils = requireUtils();
  var _browser = requireBrowser$2();
  var _browserContext = requireBrowserContext$1();
  var _errors = requireErrors$1();
  var network2 = _interopRequireWildcard(requireNetwork$1());
  var _page = requirePage$1();
  var _ffConnection = requireFfConnection();
  var _ffPage = requireFfPage();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  class FFBrowser extends _browser.Browser {
    static async connect(parent, transport2, options) {
      var _options$originalLaun;
      const connection2 = new _ffConnection.FFConnection(transport2, options.protocolLogger, options.browserLogsCollector);
      const browser2 = new FFBrowser(parent, connection2, options);
      if (options.__testHookOnConnectToBrowser) await options.__testHookOnConnectToBrowser();
      let firefoxUserPrefs = (_options$originalLaun = options.originalLaunchOptions.firefoxUserPrefs) !== null && _options$originalLaun !== void 0 ? _options$originalLaun : {};
      if (Object.keys(kBandaidFirefoxUserPrefs).length) firefoxUserPrefs = {
        ...kBandaidFirefoxUserPrefs,
        ...firefoxUserPrefs
      };
      const promises = [browser2.session.send("Browser.enable", {
        attachToDefaultContext: !!options.persistent,
        userPrefs: Object.entries(firefoxUserPrefs).map(([name, value]) => ({
          name,
          value
        }))
      }), browser2._initVersion()];
      if (options.persistent) {
        browser2._defaultContext = new FFBrowserContext(browser2, void 0, options.persistent);
        promises.push(browser2._defaultContext._initialize());
      }
      const proxy = options.originalLaunchOptions.proxyOverride || options.proxy;
      if (proxy) promises.push(browser2.session.send("Browser.setBrowserProxy", toJugglerProxyOptions(proxy)));
      await Promise.all(promises);
      return browser2;
    }
    constructor(parent, connection2, options) {
      super(parent, options);
      this._connection = void 0;
      this.session = void 0;
      this._ffPages = void 0;
      this._contexts = void 0;
      this._version = "";
      this._userAgent = "";
      this._connection = connection2;
      this.session = connection2.rootSession;
      this._ffPages = /* @__PURE__ */ new Map();
      this._contexts = /* @__PURE__ */ new Map();
      this._connection.on(_ffConnection.ConnectionEvents.Disconnected, () => this._onDisconnect());
      this.session.on("Browser.attachedToTarget", this._onAttachedToTarget.bind(this));
      this.session.on("Browser.detachedFromTarget", this._onDetachedFromTarget.bind(this));
      this.session.on("Browser.downloadCreated", this._onDownloadCreated.bind(this));
      this.session.on("Browser.downloadFinished", this._onDownloadFinished.bind(this));
      this.session.on("Browser.videoRecordingFinished", this._onVideoRecordingFinished.bind(this));
    }
    async _initVersion() {
      const result = await this.session.send("Browser.getInfo");
      this._version = result.version.substring(result.version.indexOf("/") + 1);
      this._userAgent = result.userAgent;
    }
    isConnected() {
      return !this._connection._closed;
    }
    async doCreateNewContext(options) {
      if (options.isMobile) throw new Error("options.isMobile is not supported in Firefox");
      const {
        browserContextId
      } = await this.session.send("Browser.createBrowserContext", {
        removeOnDetach: true
      });
      const context = new FFBrowserContext(this, browserContextId, options);
      await context._initialize();
      this._contexts.set(browserContextId, context);
      return context;
    }
    contexts() {
      return Array.from(this._contexts.values());
    }
    version() {
      return this._version;
    }
    userAgent() {
      return this._userAgent;
    }
    _onDetachedFromTarget(payload) {
      const ffPage2 = this._ffPages.get(payload.targetId);
      this._ffPages.delete(payload.targetId);
      ffPage2.didClose();
    }
    _onAttachedToTarget(payload) {
      const {
        targetId,
        browserContextId,
        openerId,
        type
      } = payload.targetInfo;
      (0, _utils.assert)(type === "page");
      const context = browserContextId ? this._contexts.get(browserContextId) : this._defaultContext;
      (0, _utils.assert)(context, `Unknown context id:${browserContextId}, _defaultContext: ${this._defaultContext}`);
      const session = this._connection.createSession(payload.sessionId);
      const opener = openerId ? this._ffPages.get(openerId) : null;
      const ffPage2 = new _ffPage.FFPage(session, context, opener);
      this._ffPages.set(targetId, ffPage2);
    }
    _onDownloadCreated(payload) {
      const ffPage2 = this._ffPages.get(payload.pageTargetId);
      if (!ffPage2) return;
      ffPage2._page._frameManager.frameAbortedNavigation(payload.frameId, "Download is starting");
      let originPage = ffPage2._page.initializedOrUndefined();
      if (!originPage) {
        ffPage2._markAsError(new Error("Starting new page download"));
        if (ffPage2._opener) originPage = ffPage2._opener._page.initializedOrUndefined();
      }
      if (!originPage) return;
      this._downloadCreated(originPage, payload.uuid, payload.url, payload.suggestedFileName);
    }
    _onDownloadFinished(payload) {
      const error = payload.canceled ? "canceled" : payload.error;
      this._downloadFinished(payload.uuid, error);
    }
    _onVideoRecordingFinished(payload) {
      var _this$_takeVideo;
      (_this$_takeVideo = this._takeVideo(payload.screencastId)) === null || _this$_takeVideo === void 0 || _this$_takeVideo.reportFinished();
    }
    _onDisconnect() {
      for (const video2 of this._idToVideo.values()) video2.artifact.reportFinished(new _errors.TargetClosedError());
      this._idToVideo.clear();
      for (const ffPage2 of this._ffPages.values()) ffPage2.didClose();
      this._ffPages.clear();
      this._didClose();
    }
  }
  ffBrowser.FFBrowser = FFBrowser;
  class FFBrowserContext extends _browserContext.BrowserContext {
    constructor(browser2, browserContextId, options) {
      super(browser2, options, browserContextId);
    }
    async _initialize() {
      (0, _utils.assert)(!this._ffPages().length);
      const browserContextId = this._browserContextId;
      const promises = [super._initialize(), this._browser.session.send("Browser.addBinding", {
        browserContextId: this._browserContextId,
        name: _page.PageBinding.kPlaywrightBinding,
        script: ""
      })];
      if (this._options.acceptDownloads !== "internal-browser-default") {
        promises.push(this._browser.session.send("Browser.setDownloadOptions", {
          browserContextId,
          downloadOptions: {
            behavior: this._options.acceptDownloads === "accept" ? "saveToDisk" : "cancel",
            downloadsDir: this._browser.options.downloadsPath
          }
        }));
      }
      if (this._options.viewport) {
        const viewport = {
          viewportSize: {
            width: this._options.viewport.width,
            height: this._options.viewport.height
          },
          deviceScaleFactor: this._options.deviceScaleFactor || 1
        };
        promises.push(this._browser.session.send("Browser.setDefaultViewport", {
          browserContextId,
          viewport
        }));
      }
      if (this._options.hasTouch) promises.push(this._browser.session.send("Browser.setTouchOverride", {
        browserContextId,
        hasTouch: true
      }));
      if (this._options.userAgent) promises.push(this._browser.session.send("Browser.setUserAgentOverride", {
        browserContextId,
        userAgent: this._options.userAgent
      }));
      if (this._options.bypassCSP) promises.push(this._browser.session.send("Browser.setBypassCSP", {
        browserContextId,
        bypassCSP: true
      }));
      if (this._options.ignoreHTTPSErrors || this._options.internalIgnoreHTTPSErrors) promises.push(this._browser.session.send("Browser.setIgnoreHTTPSErrors", {
        browserContextId,
        ignoreHTTPSErrors: true
      }));
      if (this._options.javaScriptEnabled === false) promises.push(this._browser.session.send("Browser.setJavaScriptDisabled", {
        browserContextId,
        javaScriptDisabled: true
      }));
      if (this._options.locale) promises.push(this._browser.session.send("Browser.setLocaleOverride", {
        browserContextId,
        locale: this._options.locale
      }));
      if (this._options.timezoneId) promises.push(this._browser.session.send("Browser.setTimezoneOverride", {
        browserContextId,
        timezoneId: this._options.timezoneId
      }));
      if (this._options.extraHTTPHeaders || this._options.locale) promises.push(this.setExtraHTTPHeaders(this._options.extraHTTPHeaders || []));
      if (this._options.httpCredentials) promises.push(this.setHTTPCredentials(this._options.httpCredentials));
      if (this._options.geolocation) promises.push(this.setGeolocation(this._options.geolocation));
      if (this._options.offline) promises.push(this.setOffline(this._options.offline));
      if (this._options.colorScheme !== "no-override") {
        promises.push(this._browser.session.send("Browser.setColorScheme", {
          browserContextId,
          colorScheme: this._options.colorScheme !== void 0 ? this._options.colorScheme : "light"
        }));
      }
      if (this._options.reducedMotion !== "no-override") {
        promises.push(this._browser.session.send("Browser.setReducedMotion", {
          browserContextId,
          reducedMotion: this._options.reducedMotion !== void 0 ? this._options.reducedMotion : "no-preference"
        }));
      }
      if (this._options.forcedColors !== "no-override") {
        promises.push(this._browser.session.send("Browser.setForcedColors", {
          browserContextId,
          forcedColors: this._options.forcedColors !== void 0 ? this._options.forcedColors : "none"
        }));
      }
      if (this._options.contrast !== "no-override") {
        promises.push(this._browser.session.send("Browser.setContrast", {
          browserContextId,
          contrast: this._options.contrast !== void 0 ? this._options.contrast : "no-preference"
        }));
      }
      if (this._options.recordVideo) {
        promises.push(this._ensureVideosPath().then(() => {
          return this._browser.session.send("Browser.setVideoRecordingOptions", {
            // validateBrowserContextOptions ensures correct video size.
            options: {
              ...this._options.recordVideo.size,
              dir: this._options.recordVideo.dir
            },
            browserContextId: this._browserContextId
          });
        }));
      }
      const proxy = this._options.proxyOverride || this._options.proxy;
      if (proxy) {
        promises.push(this._browser.session.send("Browser.setContextProxy", {
          browserContextId: this._browserContextId,
          ...toJugglerProxyOptions(proxy)
        }));
      }
      await Promise.all(promises);
    }
    _ffPages() {
      return Array.from(this._browser._ffPages.values()).filter((ffPage2) => ffPage2._browserContext === this);
    }
    possiblyUninitializedPages() {
      return this._ffPages().map((ffPage2) => ffPage2._page);
    }
    async doCreateNewPage() {
      (0, _browserContext.assertBrowserContextIsNotOwned)(this);
      const {
        targetId
      } = await this._browser.session.send("Browser.newPage", {
        browserContextId: this._browserContextId
      }).catch((e2) => {
        if (e2.message.includes("Failed to override timezone")) throw new Error(`Invalid timezone ID: ${this._options.timezoneId}`);
        throw e2;
      });
      return this._browser._ffPages.get(targetId)._page;
    }
    async doGetCookies(urls) {
      const {
        cookies
      } = await this._browser.session.send("Browser.getCookies", {
        browserContextId: this._browserContextId
      });
      return network2.filterCookies(cookies.map((c2) => {
        const copy2 = {
          ...c2
        };
        delete copy2.size;
        delete copy2.session;
        return copy2;
      }), urls);
    }
    async addCookies(cookies) {
      const cc = network2.rewriteCookies(cookies).map((c2) => ({
        ...c2,
        expires: c2.expires === -1 ? void 0 : c2.expires
      }));
      await this._browser.session.send("Browser.setCookies", {
        browserContextId: this._browserContextId,
        cookies: cc
      });
    }
    async doClearCookies() {
      await this._browser.session.send("Browser.clearCookies", {
        browserContextId: this._browserContextId
      });
    }
    async doGrantPermissions(origin, permissions) {
      const webPermissionToProtocol = /* @__PURE__ */ new Map([["geolocation", "geo"], ["persistent-storage", "persistent-storage"], ["push", "push"], ["notifications", "desktop-notification"]]);
      const filtered = permissions.map((permission) => {
        const protocolPermission = webPermissionToProtocol.get(permission);
        if (!protocolPermission) throw new Error("Unknown permission: " + permission);
        return protocolPermission;
      });
      await this._browser.session.send("Browser.grantPermissions", {
        origin,
        browserContextId: this._browserContextId,
        permissions: filtered
      });
    }
    async doClearPermissions() {
      await this._browser.session.send("Browser.resetPermissions", {
        browserContextId: this._browserContextId
      });
    }
    async setGeolocation(geolocation) {
      (0, _browserContext.verifyGeolocation)(geolocation);
      this._options.geolocation = geolocation;
      await this._browser.session.send("Browser.setGeolocationOverride", {
        browserContextId: this._browserContextId,
        geolocation: geolocation || null
      });
    }
    async setExtraHTTPHeaders(headers2) {
      this._options.extraHTTPHeaders = headers2;
      let allHeaders = this._options.extraHTTPHeaders;
      if (this._options.locale) allHeaders = network2.mergeHeaders([allHeaders, network2.singleHeader("Accept-Language", this._options.locale)]);
      await this._browser.session.send("Browser.setExtraHTTPHeaders", {
        browserContextId: this._browserContextId,
        headers: allHeaders
      });
    }
    async setUserAgent(userAgent2) {
      await this._browser.session.send("Browser.setUserAgentOverride", {
        browserContextId: this._browserContextId,
        userAgent: userAgent2 || null
      });
    }
    async setOffline(offline) {
      this._options.offline = offline;
      await this._browser.session.send("Browser.setOnlineOverride", {
        browserContextId: this._browserContextId,
        override: offline ? "offline" : "online"
      });
    }
    async doSetHTTPCredentials(httpCredentials) {
      this._options.httpCredentials = httpCredentials;
      let credentials = null;
      if (httpCredentials) {
        const {
          username,
          password,
          origin
        } = httpCredentials;
        credentials = {
          username,
          password,
          origin
        };
      }
      await this._browser.session.send("Browser.setHTTPCredentials", {
        browserContextId: this._browserContextId,
        credentials
      });
    }
    async doAddInitScript(initScript) {
      await this._updateInitScripts();
    }
    async doRemoveNonInternalInitScripts() {
      await this._updateInitScripts();
    }
    async _updateInitScripts() {
      const bindingScripts = [...this._pageBindings.values()].map((binding) => binding.initScript.source);
      const initScripts = this.initScripts.map((script) => script.source);
      await this._browser.session.send("Browser.setInitScripts", {
        browserContextId: this._browserContextId,
        scripts: [...bindingScripts, ...initScripts].map((script) => ({
          script
        }))
      });
    }
    async doUpdateRequestInterception() {
      await Promise.all([this._browser.session.send("Browser.setRequestInterception", {
        browserContextId: this._browserContextId,
        enabled: !!this._requestInterceptor
      }), this._browser.session.send("Browser.setCacheDisabled", {
        browserContextId: this._browserContextId,
        cacheDisabled: !!this._requestInterceptor
      })]);
    }
    onClosePersistent() {
    }
    async clearCache() {
      await this._browser.session.send("Browser.clearCache");
    }
    async doClose(reason) {
      if (!this._browserContextId) {
        if (this._options.recordVideo) {
          await this._browser.session.send("Browser.setVideoRecordingOptions", {
            options: void 0,
            browserContextId: this._browserContextId
          });
        }
        await this._browser.close({
          reason
        });
      } else {
        await this._browser.session.send("Browser.removeBrowserContext", {
          browserContextId: this._browserContextId
        });
        this._browser._contexts.delete(this._browserContextId);
      }
    }
    async cancelDownload(uuid2) {
      await this._browser.session.send("Browser.cancelDownload", {
        uuid: uuid2
      });
    }
  }
  ffBrowser.FFBrowserContext = FFBrowserContext;
  function toJugglerProxyOptions(proxy) {
    const proxyServer = new URL(proxy.server);
    let port = parseInt(proxyServer.port, 10);
    let type = "http";
    if (proxyServer.protocol === "socks5:") type = "socks";
    else if (proxyServer.protocol === "socks4:") type = "socks4";
    else if (proxyServer.protocol === "https:") type = "https";
    if (proxyServer.port === "") {
      if (proxyServer.protocol === "http:") port = 80;
      else if (proxyServer.protocol === "https:") port = 443;
    }
    return {
      type,
      bypass: proxy.bypass ? proxy.bypass.split(",").map((domain) => domain.trim()) : [],
      host: proxyServer.hostname,
      port,
      username: proxy.username,
      password: proxy.password
    };
  }
  const kBandaidFirefoxUserPrefs = {
    "dom.fetchKeepalive.enabled": false
  };
  return ffBrowser;
}
var hasRequiredFirefox;
function requireFirefox() {
  if (hasRequiredFirefox) return firefox;
  hasRequiredFirefox = 1;
  Object.defineProperty(firefox, "__esModule", {
    value: true
  });
  firefox.Firefox = void 0;
  var _os = _interopRequireDefault(require$$1$3);
  var _path2 = _interopRequireDefault(require$$1$1);
  var _ffBrowser = requireFfBrowser();
  var _ffConnection = requireFfConnection();
  var _ascii = requireAscii();
  var _browserType = requireBrowserType$1();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  class Firefox extends _browserType.BrowserType {
    constructor(parent) {
      super(parent, "firefox");
    }
    connectToTransport(transport2, options) {
      return _ffBrowser.FFBrowser.connect(this.attribution.playwright, transport2, options);
    }
    doRewriteStartupLog(error) {
      if (!error.logs) return error;
      if (error.logs.includes(`as root in a regular user's session is not supported.`)) error.logs = "\n" + (0, _ascii.wrapInASCIIBox)(`Firefox is unable to launch if the $HOME folder isn't owned by the current user.
Workaround: Set the HOME=/root environment variable${process.env.GITHUB_ACTION ? " in your GitHub Actions workflow file" : ""} when running Playwright.`, 1);
      if (error.logs.includes("no DISPLAY environment variable specified")) error.logs = "\n" + (0, _ascii.wrapInASCIIBox)(_browserType.kNoXServerRunningError, 1);
      return error;
    }
    amendEnvironment(env2, userDataDir, executable, browserArguments) {
      if (!_path2.default.isAbsolute(_os.default.homedir())) throw new Error(`Cannot launch Firefox with relative home directory. Did you set ${_os.default.platform() === "win32" ? "USERPROFILE" : "HOME"} to a relative path?`);
      if (_os.default.platform() === "linux") {
        return {
          ...env2,
          SNAP_NAME: void 0,
          SNAP_INSTANCE_NAME: void 0
        };
      }
      return env2;
    }
    attemptToGracefullyCloseBrowser(transport2) {
      const message = {
        method: "Browser.close",
        params: {},
        id: _ffConnection.kBrowserCloseMessageId
      };
      transport2.send(message);
    }
    defaultArgs(options, isPersistent, userDataDir) {
      const {
        args = [],
        headless
      } = options;
      const userDataDirArg = args.find((arg) => arg.startsWith("-profile") || arg.startsWith("--profile"));
      if (userDataDirArg) throw this._createUserDataDirArgMisuseError("--profile");
      if (args.find((arg) => arg.startsWith("-juggler"))) throw new Error("Use the port parameter instead of -juggler argument");
      const firefoxArguments = ["-no-remote"];
      if (headless) {
        firefoxArguments.push("-headless");
      } else {
        firefoxArguments.push("-wait-for-browser");
        firefoxArguments.push("-foreground");
      }
      firefoxArguments.push(`-profile`, userDataDir);
      firefoxArguments.push("-juggler-pipe");
      firefoxArguments.push(...args);
      if (isPersistent) firefoxArguments.push("about:blank");
      else firefoxArguments.push("-silent");
      return firefoxArguments;
    }
    readyState(options) {
      return new JugglerReadyState();
    }
  }
  firefox.Firefox = Firefox;
  class JugglerReadyState extends _browserType.BrowserReadyState {
    onBrowserOutput(message) {
      if (message.includes("Juggler listening to the pipe")) this._wsEndpoint.resolve(void 0);
    }
  }
  return firefox;
}
var selectors$1 = {};
var hasRequiredSelectors$1;
function requireSelectors$1() {
  if (hasRequiredSelectors$1) return selectors$1;
  hasRequiredSelectors$1 = 1;
  Object.defineProperty(selectors$1, "__esModule", {
    value: true
  });
  selectors$1.Selectors = void 0;
  var _crypto = requireCrypto();
  var _selectorParser = requireSelectorParser();
  class Selectors {
    constructor() {
      this._builtinEngines = void 0;
      this._builtinEnginesInMainWorld = void 0;
      this._engines = void 0;
      this.guid = `selectors@${(0, _crypto.createGuid)()}`;
      this._testIdAttributeName = "data-testid";
      this._builtinEngines = /* @__PURE__ */ new Set(["css", "css:light", "xpath", "xpath:light", "_react", "_vue", "text", "text:light", "id", "id:light", "data-testid", "data-testid:light", "data-test-id", "data-test-id:light", "data-test", "data-test:light", "nth", "visible", "internal:control", "internal:has", "internal:has-not", "internal:has-text", "internal:has-not-text", "internal:and", "internal:or", "internal:chain", "role", "internal:attr", "internal:label", "internal:text", "internal:role", "internal:testid", "internal:aria-id"]);
      this._builtinEnginesInMainWorld = /* @__PURE__ */ new Set(["_react", "_vue"]);
      this._engines = /* @__PURE__ */ new Map();
    }
    async register(name, source, contentScript = false) {
      if (!name.match(/^[a-zA-Z_0-9-]+$/)) throw new Error("Selector engine name may only contain [a-zA-Z0-9_] characters");
      if (this._builtinEngines.has(name) || name === "zs" || name === "zs:light") throw new Error(`"${name}" is a predefined selector engine`);
      if (this._engines.has(name)) throw new Error(`"${name}" selector engine has been already registered`);
      this._engines.set(name, {
        source,
        contentScript
      });
    }
    testIdAttributeName() {
      return this._testIdAttributeName;
    }
    setTestIdAttributeName(testIdAttributeName) {
      this._testIdAttributeName = testIdAttributeName;
    }
    unregisterAll() {
      this._engines.clear();
    }
    parseSelector(selector, strict) {
      const parsed = typeof selector === "string" ? (0, _selectorParser.parseSelector)(selector) : selector;
      let needsMainWorld = false;
      (0, _selectorParser.visitAllSelectorParts)(parsed, (part) => {
        const name = part.name;
        const custom = this._engines.get(name);
        if (!custom && !this._builtinEngines.has(name)) throw new _selectorParser.InvalidSelectorError(`Unknown engine "${name}" while parsing selector ${(0, _selectorParser.stringifySelector)(parsed)}`);
        if (custom && !custom.contentScript) needsMainWorld = true;
        if (this._builtinEnginesInMainWorld.has(name)) needsMainWorld = true;
      });
      return {
        parsed,
        world: needsMainWorld ? "main" : "utility",
        strict
      };
    }
  }
  selectors$1.Selectors = Selectors;
  return selectors$1;
}
var webkit = {};
var wkConnection = {};
var hasRequiredWkConnection;
function requireWkConnection() {
  if (hasRequiredWkConnection) return wkConnection;
  hasRequiredWkConnection = 1;
  Object.defineProperty(wkConnection, "__esModule", {
    value: true
  });
  wkConnection.kPageProxyMessageReceived = wkConnection.kBrowserCloseMessageId = wkConnection.WKSession = wkConnection.WKConnection = void 0;
  var _events = require$$0$4;
  var _utils = requireUtils();
  var _debugLogger = requireDebugLogger();
  var _helper = requireHelper();
  var _protocolError = requireProtocolError();
  const kBrowserCloseMessageId = wkConnection.kBrowserCloseMessageId = -9999;
  const kPageProxyMessageReceived = wkConnection.kPageProxyMessageReceived = Symbol("kPageProxyMessageReceived");
  class WKConnection {
    constructor(transport2, onDisconnect, protocolLogger, browserLogsCollector) {
      this._transport = void 0;
      this._onDisconnect = void 0;
      this._protocolLogger = void 0;
      this._browserLogsCollector = void 0;
      this._browserDisconnectedLogs = void 0;
      this._lastId = 0;
      this._closed = false;
      this.browserSession = void 0;
      this._transport = transport2;
      this._onDisconnect = onDisconnect;
      this._protocolLogger = protocolLogger;
      this._browserLogsCollector = browserLogsCollector;
      this.browserSession = new WKSession(this, "", (message) => {
        this.rawSend(message);
      });
      this._transport.onmessage = this._dispatchMessage.bind(this);
      this._transport.onclose = this._onClose.bind(this);
    }
    nextMessageId() {
      return ++this._lastId;
    }
    rawSend(message) {
      this._protocolLogger("send", message);
      this._transport.send(message);
    }
    _dispatchMessage(message) {
      this._protocolLogger("receive", message);
      if (message.id === kBrowserCloseMessageId) return;
      if (message.pageProxyId) {
        const payload = {
          message,
          pageProxyId: message.pageProxyId
        };
        this.browserSession.dispatchMessage({
          method: kPageProxyMessageReceived,
          params: payload
        });
        return;
      }
      this.browserSession.dispatchMessage(message);
    }
    _onClose(reason) {
      this._closed = true;
      this._transport.onmessage = void 0;
      this._transport.onclose = void 0;
      this._browserDisconnectedLogs = _helper.helper.formatBrowserLogs(this._browserLogsCollector.recentLogs(), reason);
      this.browserSession.dispose();
      this._onDisconnect();
    }
    isClosed() {
      return this._closed;
    }
    close() {
      if (!this._closed) this._transport.close();
    }
  }
  wkConnection.WKConnection = WKConnection;
  class WKSession extends _events.EventEmitter {
    constructor(connection2, sessionId, rawSend) {
      super();
      this.connection = void 0;
      this.sessionId = void 0;
      this._disposed = false;
      this._rawSend = void 0;
      this._callbacks = /* @__PURE__ */ new Map();
      this._crashed = false;
      this.on = void 0;
      this.addListener = void 0;
      this.off = void 0;
      this.removeListener = void 0;
      this.once = void 0;
      this.setMaxListeners(0);
      this.connection = connection2;
      this.sessionId = sessionId;
      this._rawSend = rawSend;
      this.on = super.on;
      this.off = super.removeListener;
      this.addListener = super.addListener;
      this.removeListener = super.removeListener;
      this.once = super.once;
    }
    async send(method, params) {
      if (this._crashed || this._disposed || this.connection._browserDisconnectedLogs) throw new _protocolError.ProtocolError(this._crashed ? "crashed" : "closed", void 0, this.connection._browserDisconnectedLogs);
      const id = this.connection.nextMessageId();
      const messageObj = {
        id,
        method,
        params
      };
      this._rawSend(messageObj);
      return new Promise((resolve2, reject) => {
        this._callbacks.set(id, {
          resolve: resolve2,
          reject,
          error: new _protocolError.ProtocolError("error", method)
        });
      });
    }
    sendMayFail(method, params) {
      return this.send(method, params).catch((error) => _debugLogger.debugLogger.log("error", error));
    }
    markAsCrashed() {
      this._crashed = true;
    }
    isDisposed() {
      return this._disposed;
    }
    dispose() {
      for (const callback of this._callbacks.values()) {
        callback.error.type = this._crashed ? "crashed" : "closed";
        callback.error.logs = this.connection._browserDisconnectedLogs;
        callback.reject(callback.error);
      }
      this._callbacks.clear();
      this._disposed = true;
    }
    dispatchMessage(object) {
      if (object.id && this._callbacks.has(object.id)) {
        const callback = this._callbacks.get(object.id);
        this._callbacks.delete(object.id);
        if (object.error) {
          callback.error.setMessage(object.error.message);
          callback.reject(callback.error);
        } else {
          callback.resolve(object.result);
        }
      } else if (object.id && !object.error) {
        (0, _utils.assert)(this.isDisposed());
      } else {
        Promise.resolve().then(() => this.emit(object.method, object.params));
      }
    }
  }
  wkConnection.WKSession = WKSession;
  return wkConnection;
}
var wkBrowser = {};
var wkPage = {};
var wkAccessibility = {};
var hasRequiredWkAccessibility;
function requireWkAccessibility() {
  if (hasRequiredWkAccessibility) return wkAccessibility;
  hasRequiredWkAccessibility = 1;
  Object.defineProperty(wkAccessibility, "__esModule", {
    value: true
  });
  wkAccessibility.getAccessibilityTree = getAccessibilityTree;
  async function getAccessibilityTree(session, needle) {
    const objectId = needle ? needle._objectId : void 0;
    const {
      axNode
    } = await session.send("Page.accessibilitySnapshot", {
      objectId
    });
    const tree = new WKAXNode(axNode);
    return {
      tree,
      needle: needle ? tree._findNeedle() : null
    };
  }
  const WKRoleToARIARole = new Map(Object.entries({
    "TextField": "textbox"
  }));
  const WKUnhelpfulRoleDescriptions = new Map(Object.entries({
    "WebArea": "HTML content",
    "Summary": "summary",
    "DescriptionList": "description list",
    "ImageMap": "image map",
    "ListMarker": "list marker",
    "Video": "video playback",
    "Mark": "highlighted",
    "contentinfo": "content information",
    "Details": "details",
    "DescriptionListDetail": "description",
    "DescriptionListTerm": "term",
    "alertdialog": "web alert dialog",
    "dialog": "web dialog",
    "status": "application status",
    "tabpanel": "tab panel",
    "application": "web application"
  }));
  class WKAXNode {
    constructor(payload) {
      this._payload = void 0;
      this._children = void 0;
      this._payload = payload;
      this._children = [];
      for (const payload2 of this._payload.children || []) this._children.push(new WKAXNode(payload2));
    }
    children() {
      return this._children;
    }
    _findNeedle() {
      if (this._payload.found) return this;
      for (const child of this._children) {
        const found = child._findNeedle();
        if (found) return found;
      }
      return null;
    }
    isControl() {
      switch (this._payload.role) {
        case "button":
        case "checkbox":
        case "ColorWell":
        case "combobox":
        case "DisclosureTriangle":
        case "listbox":
        case "menu":
        case "menubar":
        case "menuitem":
        case "menuitemcheckbox":
        case "menuitemradio":
        case "radio":
        case "scrollbar":
        case "searchbox":
        case "slider":
        case "spinbutton":
        case "switch":
        case "tab":
        case "textbox":
        case "TextField":
        case "tree":
          return true;
        default:
          return false;
      }
    }
    _isTextControl() {
      switch (this._payload.role) {
        case "combobox":
        case "searchfield":
        case "textbox":
        case "TextField":
          return true;
      }
      return false;
    }
    _name() {
      if (this._payload.role === "text") return this._payload.value || "";
      return this._payload.name || "";
    }
    isInteresting(insideControl) {
      const {
        role,
        focusable
      } = this._payload;
      const name = this._name();
      if (role === "ScrollArea") return false;
      if (role === "WebArea") return true;
      if (focusable || role === "MenuListOption") return true;
      if (this.isControl()) return true;
      if (insideControl) return false;
      return this.isLeafNode() && !!name;
    }
    _hasRedundantTextChild() {
      if (this._children.length !== 1) return false;
      const child = this._children[0];
      return child._payload.role === "text" && this._payload.name === child._payload.value;
    }
    isLeafNode() {
      if (!this._children.length) return true;
      if (this._isTextControl()) return true;
      if (this._hasRedundantTextChild()) return true;
      return false;
    }
    serialize() {
      const node = {
        role: WKRoleToARIARole.get(this._payload.role) || this._payload.role,
        name: this._name()
      };
      if ("description" in this._payload && this._payload.description !== node.name) node.description = this._payload.description;
      if ("roledescription" in this._payload) {
        const roledescription = this._payload.roledescription;
        if (roledescription !== this._payload.role && WKUnhelpfulRoleDescriptions.get(this._payload.role) !== roledescription) node.roledescription = roledescription;
      }
      if ("value" in this._payload && this._payload.role !== "text") {
        if (typeof this._payload.value === "string") node.valueString = this._payload.value;
        else if (typeof this._payload.value === "number") node.valueNumber = this._payload.value;
      }
      if ("checked" in this._payload) node.checked = this._payload.checked === "true" ? "checked" : this._payload.checked === "false" ? "unchecked" : "mixed";
      if ("pressed" in this._payload) node.pressed = this._payload.pressed === "true" ? "pressed" : this._payload.pressed === "false" ? "released" : "mixed";
      const userStringProperties = ["keyshortcuts", "valuetext"];
      for (const userStringProperty of userStringProperties) {
        if (!(userStringProperty in this._payload)) continue;
        node[userStringProperty] = this._payload[userStringProperty];
      }
      const booleanProperties = ["disabled", "expanded", "focused", "modal", "multiselectable", "readonly", "required", "selected"];
      for (const booleanProperty of booleanProperties) {
        if (booleanProperty === "focused" && (this._payload.role === "WebArea" || this._payload.role === "ScrollArea")) continue;
        const value = this._payload[booleanProperty];
        if (!value) continue;
        node[booleanProperty] = value;
      }
      const numericalProperties = ["level", "valuemax", "valuemin"];
      for (const numericalProperty of numericalProperties) {
        if (!(numericalProperty in this._payload)) continue;
        node[numericalProperty] = this._payload[numericalProperty];
      }
      const tokenProperties = ["autocomplete", "haspopup", "invalid"];
      for (const tokenProperty of tokenProperties) {
        const value = this._payload[tokenProperty];
        if (!value || value === "false") continue;
        node[tokenProperty] = value;
      }
      const orientationIsApplicable = /* @__PURE__ */ new Set(["ScrollArea", "scrollbar", "listbox", "combobox", "menu", "tree", "separator", "slider", "tablist", "toolbar"]);
      if (this._payload.orientation && orientationIsApplicable.has(this._payload.role)) node.orientation = this._payload.orientation;
      return node;
    }
  }
  return wkAccessibility;
}
var wkExecutionContext = {};
var hasRequiredWkExecutionContext;
function requireWkExecutionContext() {
  if (hasRequiredWkExecutionContext) return wkExecutionContext;
  hasRequiredWkExecutionContext = 1;
  Object.defineProperty(wkExecutionContext, "__esModule", {
    value: true
  });
  wkExecutionContext.WKExecutionContext = void 0;
  wkExecutionContext.createHandle = createHandle;
  var _utilityScriptSerializers = requireUtilityScriptSerializers();
  var js = _interopRequireWildcard(requireJavascript$1());
  var dom2 = _interopRequireWildcard(requireDom());
  var _protocolError = requireProtocolError();
  var _assert = requireAssert$1();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  class WKExecutionContext {
    constructor(session, contextId) {
      this._session = void 0;
      this._contextId = void 0;
      this._session = session;
      this._contextId = contextId;
    }
    async rawEvaluateJSON(expression) {
      try {
        const response = await this._session.send("Runtime.evaluate", {
          expression,
          contextId: this._contextId,
          returnByValue: true
        });
        if (response.wasThrown) throw new js.JavaScriptErrorInEvaluate(response.result.description);
        return response.result.value;
      } catch (error) {
        throw rewriteError(error);
      }
    }
    async rawEvaluateHandle(context, expression) {
      try {
        const response = await this._session.send("Runtime.evaluate", {
          expression,
          contextId: this._contextId,
          returnByValue: false
        });
        if (response.wasThrown) throw new js.JavaScriptErrorInEvaluate(response.result.description);
        return createHandle(context, response.result);
      } catch (error) {
        throw rewriteError(error);
      }
    }
    async evaluateWithArguments(expression, returnByValue, utilityScript, values, handles) {
      try {
        const response = await this._session.send("Runtime.callFunctionOn", {
          functionDeclaration: expression,
          objectId: utilityScript._objectId,
          arguments: [{
            objectId: utilityScript._objectId
          }, ...values.map((value) => ({
            value
          })), ...handles.map((handle) => ({
            objectId: handle._objectId
          }))],
          returnByValue,
          emulateUserGesture: true,
          awaitPromise: true
        });
        if (response.wasThrown) throw new js.JavaScriptErrorInEvaluate(response.result.description);
        if (returnByValue) return (0, _utilityScriptSerializers.parseEvaluationResultValue)(response.result.value);
        return createHandle(utilityScript._context, response.result);
      } catch (error) {
        throw rewriteError(error);
      }
    }
    async getProperties(object) {
      const response = await this._session.send("Runtime.getProperties", {
        objectId: object._objectId,
        ownProperties: true
      });
      const result = /* @__PURE__ */ new Map();
      for (const property of response.properties) {
        if (!property.enumerable || !property.value) continue;
        result.set(property.name, createHandle(object._context, property.value));
      }
      return result;
    }
    async releaseHandle(handle) {
      if (!handle._objectId) return;
      await this._session.send("Runtime.releaseObject", {
        objectId: handle._objectId
      });
    }
  }
  wkExecutionContext.WKExecutionContext = WKExecutionContext;
  function potentiallyUnserializableValue(remoteObject) {
    const value = remoteObject.value;
    const isUnserializable = remoteObject.type === "number" && ["NaN", "-Infinity", "Infinity", "-0"].includes(remoteObject.description);
    return isUnserializable ? js.parseUnserializableValue(remoteObject.description) : value;
  }
  function rewriteError(error) {
    if (error.message.includes("Object has too long reference chain")) throw new Error("Cannot serialize result: object reference chain is too long.");
    if (!js.isJavaScriptErrorInEvaluate(error) && !(0, _protocolError.isSessionClosedError)(error)) return new Error("Execution context was destroyed, most likely because of a navigation.");
    return error;
  }
  function renderPreview(object) {
    if (object.type === "undefined") return "undefined";
    if ("value" in object) return String(object.value);
    if (object.description === "Object" && object.preview) {
      const tokens = [];
      for (const {
        name,
        value
      } of object.preview.properties) tokens.push(`${name}: ${value}`);
      return `{${tokens.join(", ")}}`;
    }
    if (object.subtype === "array" && object.preview) return js.sparseArrayToString(object.preview.properties);
    return object.description;
  }
  function createHandle(context, remoteObject) {
    if (remoteObject.subtype === "node") {
      (0, _assert.assert)(context instanceof dom2.FrameExecutionContext);
      return new dom2.ElementHandle(context, remoteObject.objectId);
    }
    const isPromise = remoteObject.className === "Promise";
    return new js.JSHandle(context, isPromise ? "promise" : remoteObject.subtype || remoteObject.type, renderPreview(remoteObject), remoteObject.objectId, potentiallyUnserializableValue(remoteObject));
  }
  return wkExecutionContext;
}
var wkInput = {};
var hasRequiredWkInput;
function requireWkInput() {
  if (hasRequiredWkInput) return wkInput;
  hasRequiredWkInput = 1;
  Object.defineProperty(wkInput, "__esModule", {
    value: true
  });
  wkInput.RawTouchscreenImpl = wkInput.RawMouseImpl = wkInput.RawKeyboardImpl = void 0;
  var _utils = requireUtils();
  var input2 = _interopRequireWildcard(requireInput$1());
  var _macEditingCommands = requireMacEditingCommands();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  function toModifiersMask(modifiers) {
    let mask = 0;
    if (modifiers.has("Shift")) mask |= 1;
    if (modifiers.has("Control")) mask |= 2;
    if (modifiers.has("Alt")) mask |= 4;
    if (modifiers.has("Meta")) mask |= 8;
    return mask;
  }
  function toButtonsMask(buttons) {
    let mask = 0;
    if (buttons.has("left")) mask |= 1;
    if (buttons.has("right")) mask |= 2;
    if (buttons.has("middle")) mask |= 4;
    return mask;
  }
  class RawKeyboardImpl {
    constructor(session) {
      this._pageProxySession = void 0;
      this._session = void 0;
      this._pageProxySession = session;
    }
    setSession(session) {
      this._session = session;
    }
    async keydown(modifiers, keyName, description, autoRepeat) {
      const parts = [];
      for (const modifier of ["Shift", "Control", "Alt", "Meta"]) {
        if (modifiers.has(modifier)) parts.push(modifier);
      }
      const {
        code,
        keyCode,
        key,
        text
      } = description;
      parts.push(code);
      const shortcut = parts.join("+");
      let commands = _macEditingCommands.macEditingCommands[shortcut];
      if ((0, _utils.isString)(commands)) commands = [commands];
      await this._pageProxySession.send("Input.dispatchKeyEvent", {
        type: "keyDown",
        modifiers: toModifiersMask(modifiers),
        windowsVirtualKeyCode: keyCode,
        code,
        key,
        text,
        unmodifiedText: text,
        autoRepeat,
        macCommands: commands,
        isKeypad: description.location === input2.keypadLocation
      });
    }
    async keyup(modifiers, keyName, description) {
      const {
        code,
        key
      } = description;
      await this._pageProxySession.send("Input.dispatchKeyEvent", {
        type: "keyUp",
        modifiers: toModifiersMask(modifiers),
        key,
        windowsVirtualKeyCode: description.keyCode,
        code,
        isKeypad: description.location === input2.keypadLocation
      });
    }
    async sendText(text) {
      await this._session.send("Page.insertText", {
        text
      });
    }
  }
  wkInput.RawKeyboardImpl = RawKeyboardImpl;
  class RawMouseImpl {
    constructor(session) {
      this._pageProxySession = void 0;
      this._session = void 0;
      this._page = void 0;
      this._pageProxySession = session;
    }
    setSession(session) {
      this._session = session;
    }
    async move(x2, y2, button, buttons, modifiers, forClick) {
      await this._pageProxySession.send("Input.dispatchMouseEvent", {
        type: "move",
        button,
        buttons: toButtonsMask(buttons),
        x: x2,
        y: y2,
        modifiers: toModifiersMask(modifiers)
      });
    }
    async down(x2, y2, button, buttons, modifiers, clickCount) {
      await this._pageProxySession.send("Input.dispatchMouseEvent", {
        type: "down",
        button,
        buttons: toButtonsMask(buttons),
        x: x2,
        y: y2,
        modifiers: toModifiersMask(modifiers),
        clickCount
      });
    }
    async up(x2, y2, button, buttons, modifiers, clickCount) {
      await this._pageProxySession.send("Input.dispatchMouseEvent", {
        type: "up",
        button,
        buttons: toButtonsMask(buttons),
        x: x2,
        y: y2,
        modifiers: toModifiersMask(modifiers),
        clickCount
      });
    }
    async wheel(x2, y2, buttons, modifiers, deltaX, deltaY) {
      var _this$_page;
      if ((_this$_page = this._page) !== null && _this$_page !== void 0 && _this$_page._browserContext._options.isMobile) throw new Error("Mouse wheel is not supported in mobile WebKit");
      await this._session.send("Page.updateScrollingState");
      await this._page.mainFrame().evaluateExpression(`new Promise(requestAnimationFrame)`, {
        world: "utility"
      });
      await this._pageProxySession.send("Input.dispatchWheelEvent", {
        x: x2,
        y: y2,
        deltaX,
        deltaY,
        modifiers: toModifiersMask(modifiers)
      });
    }
    setPage(page2) {
      this._page = page2;
    }
  }
  wkInput.RawMouseImpl = RawMouseImpl;
  class RawTouchscreenImpl {
    constructor(session) {
      this._pageProxySession = void 0;
      this._pageProxySession = session;
    }
    async tap(x2, y2, modifiers) {
      await this._pageProxySession.send("Input.dispatchTapEvent", {
        x: x2,
        y: y2,
        modifiers: toModifiersMask(modifiers)
      });
    }
  }
  wkInput.RawTouchscreenImpl = RawTouchscreenImpl;
  return wkInput;
}
var wkInterceptableRequest = {};
var hasRequiredWkInterceptableRequest;
function requireWkInterceptableRequest() {
  if (hasRequiredWkInterceptableRequest) return wkInterceptableRequest;
  hasRequiredWkInterceptableRequest = 1;
  Object.defineProperty(wkInterceptableRequest, "__esModule", {
    value: true
  });
  wkInterceptableRequest.WKRouteImpl = wkInterceptableRequest.WKInterceptableRequest = void 0;
  var _utils = requireUtils();
  var network2 = _interopRequireWildcard(requireNetwork$1());
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  const errorReasons = {
    "aborted": "Cancellation",
    "accessdenied": "AccessControl",
    "addressunreachable": "General",
    "blockedbyclient": "Cancellation",
    "blockedbyresponse": "General",
    "connectionaborted": "General",
    "connectionclosed": "General",
    "connectionfailed": "General",
    "connectionrefused": "General",
    "connectionreset": "General",
    "internetdisconnected": "General",
    "namenotresolved": "General",
    "timedout": "Timeout",
    "failed": "General"
  };
  class WKInterceptableRequest {
    constructor(session, frame2, event, redirectedFrom, documentId) {
      this._session = void 0;
      this._requestId = void 0;
      this.request = void 0;
      this._timestamp = void 0;
      this._wallTime = void 0;
      this._session = session;
      this._requestId = event.requestId;
      const resourceType = event.type ? event.type.toLowerCase() : redirectedFrom ? redirectedFrom.request.resourceType() : "other";
      let postDataBuffer = null;
      this._timestamp = event.timestamp;
      this._wallTime = event.walltime * 1e3;
      if (event.request.postData) postDataBuffer = Buffer.from(event.request.postData, "base64");
      this.request = new network2.Request(frame2._page._browserContext, frame2, null, (redirectedFrom === null || redirectedFrom === void 0 ? void 0 : redirectedFrom.request) || null, documentId, event.request.url, resourceType, event.request.method, postDataBuffer, (0, _utils.headersObjectToArray)(event.request.headers));
    }
    adoptRequestFromNewProcess(newSession, requestId) {
      this._session = newSession;
      this._requestId = requestId;
    }
    createResponse(responsePayload) {
      const getResponseBody = async () => {
        const response2 = await this._session.send("Network.getResponseBody", {
          requestId: this._requestId
        });
        return Buffer.from(response2.body, response2.base64Encoded ? "base64" : "utf8");
      };
      const timingPayload = responsePayload.timing;
      const timing = {
        startTime: this._wallTime,
        domainLookupStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.domainLookupStart) : -1,
        domainLookupEnd: timingPayload ? wkMillisToRoundishMillis(timingPayload.domainLookupEnd) : -1,
        connectStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.connectStart) : -1,
        secureConnectionStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.secureConnectionStart) : -1,
        connectEnd: timingPayload ? wkMillisToRoundishMillis(timingPayload.connectEnd) : -1,
        requestStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.requestStart) : -1,
        responseStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.responseStart) : -1
      };
      const setCookieSeparator = process.platform === "darwin" ? "," : "playwright-set-cookie-separator";
      const response = new network2.Response(this.request, responsePayload.status, responsePayload.statusText, (0, _utils.headersObjectToArray)(responsePayload.headers, ",", setCookieSeparator), timing, getResponseBody, responsePayload.source === "service-worker");
      response.setRawResponseHeaders(null);
      response.setTransferSize(null);
      if (responsePayload.requestHeaders && Object.keys(responsePayload.requestHeaders).length) {
        const headers2 = {
          ...responsePayload.requestHeaders
        };
        if (!headers2["host"]) headers2["Host"] = new URL(this.request.url()).host;
        this.request.setRawRequestHeaders((0, _utils.headersObjectToArray)(headers2));
      } else {
        this.request.setRawRequestHeaders(null);
      }
      return response;
    }
  }
  wkInterceptableRequest.WKInterceptableRequest = WKInterceptableRequest;
  class WKRouteImpl {
    constructor(session, requestId) {
      this._session = void 0;
      this._requestId = void 0;
      this._session = session;
      this._requestId = requestId;
    }
    async abort(errorCode) {
      const errorType = errorReasons[errorCode];
      (0, _utils.assert)(errorType, "Unknown error code: " + errorCode);
      await this._session.sendMayFail("Network.interceptRequestWithError", {
        requestId: this._requestId,
        errorType
      });
    }
    async fulfill(response) {
      if (300 <= response.status && response.status < 400) throw new Error("Cannot fulfill with redirect status: " + response.status);
      let mimeType2 = response.isBase64 ? "application/octet-stream" : "text/plain";
      const headers2 = (0, _utils.headersArrayToObject)(
        response.headers,
        true
        /* lowerCase */
      );
      const contentType = headers2["content-type"];
      if (contentType) mimeType2 = contentType.split(";")[0].trim();
      await this._session.sendMayFail("Network.interceptRequestWithResponse", {
        requestId: this._requestId,
        status: response.status,
        statusText: network2.statusText(response.status),
        mimeType: mimeType2,
        headers: headers2,
        base64Encoded: response.isBase64,
        content: response.body
      });
    }
    async continue(overrides) {
      await this._session.sendMayFail("Network.interceptWithRequest", {
        requestId: this._requestId,
        url: overrides.url,
        method: overrides.method,
        headers: overrides.headers ? (0, _utils.headersArrayToObject)(
          overrides.headers,
          false
          /* lowerCase */
        ) : void 0,
        postData: overrides.postData ? Buffer.from(overrides.postData).toString("base64") : void 0
      });
    }
  }
  wkInterceptableRequest.WKRouteImpl = WKRouteImpl;
  function wkMillisToRoundishMillis(value) {
    if (value === -1e3) return -1;
    if (value <= 0) {
      return -1;
    }
    return (value * 1e3 | 0) / 1e3;
  }
  return wkInterceptableRequest;
}
var wkProvisionalPage = {};
var hasRequiredWkProvisionalPage;
function requireWkProvisionalPage() {
  if (hasRequiredWkProvisionalPage) return wkProvisionalPage;
  hasRequiredWkProvisionalPage = 1;
  Object.defineProperty(wkProvisionalPage, "__esModule", {
    value: true
  });
  wkProvisionalPage.WKProvisionalPage = void 0;
  var _utils = requireUtils();
  var _eventsHelper = requireEventsHelper();
  class WKProvisionalPage {
    constructor(session, page2) {
      var _page$_page$mainFrame;
      this._session = void 0;
      this._wkPage = void 0;
      this._coopNavigationRequest = void 0;
      this._sessionListeners = [];
      this._mainFrameId = null;
      this.initializationPromise = void 0;
      this._session = session;
      this._wkPage = page2;
      this._coopNavigationRequest = (_page$_page$mainFrame = page2._page.mainFrame().pendingDocument()) === null || _page$_page$mainFrame === void 0 ? void 0 : _page$_page$mainFrame.request;
      const overrideFrameId = (handler) => {
        return (payload) => {
          if (payload.frameId) payload.frameId = this._wkPage._page._frameManager.mainFrame()._id;
          handler(payload);
        };
      };
      const wkPage2 = this._wkPage;
      this._sessionListeners = [_eventsHelper.eventsHelper.addEventListener(session, "Network.requestWillBeSent", overrideFrameId((e2) => this._onRequestWillBeSent(e2))), _eventsHelper.eventsHelper.addEventListener(session, "Network.requestIntercepted", overrideFrameId((e2) => wkPage2._onRequestIntercepted(session, e2))), _eventsHelper.eventsHelper.addEventListener(session, "Network.responseReceived", overrideFrameId((e2) => wkPage2._onResponseReceived(session, e2))), _eventsHelper.eventsHelper.addEventListener(session, "Network.loadingFinished", overrideFrameId((e2) => this._onLoadingFinished(e2))), _eventsHelper.eventsHelper.addEventListener(session, "Network.loadingFailed", overrideFrameId((e2) => this._onLoadingFailed(e2)))];
      this.initializationPromise = this._wkPage._initializeSession(session, true, ({
        frameTree
      }) => this._handleFrameTree(frameTree));
    }
    coopNavigationRequest() {
      return this._coopNavigationRequest;
    }
    dispose() {
      _eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
    }
    commit() {
      (0, _utils.assert)(this._mainFrameId);
      this._wkPage._onFrameAttached(this._mainFrameId, null);
    }
    _onRequestWillBeSent(event) {
      if (this._coopNavigationRequest && this._coopNavigationRequest.url() === event.request.url) {
        this._wkPage._adoptRequestFromNewProcess(this._coopNavigationRequest, this._session, event.requestId);
        return;
      }
      this._wkPage._onRequestWillBeSent(this._session, event);
    }
    _onLoadingFinished(event) {
      this._coopNavigationRequest = void 0;
      this._wkPage._onLoadingFinished(event);
    }
    _onLoadingFailed(event) {
      this._coopNavigationRequest = void 0;
      this._wkPage._onLoadingFailed(this._session, event);
    }
    _handleFrameTree(frameTree) {
      (0, _utils.assert)(!frameTree.frame.parentId);
      this._mainFrameId = frameTree.frame.id;
    }
  }
  wkProvisionalPage.WKProvisionalPage = WKProvisionalPage;
  return wkProvisionalPage;
}
var wkWorkers = {};
var hasRequiredWkWorkers;
function requireWkWorkers() {
  if (hasRequiredWkWorkers) return wkWorkers;
  hasRequiredWkWorkers = 1;
  Object.defineProperty(wkWorkers, "__esModule", {
    value: true
  });
  wkWorkers.WKWorkers = void 0;
  var _eventsHelper = requireEventsHelper();
  var _page = requirePage$1();
  var _wkConnection = requireWkConnection();
  var _wkExecutionContext = requireWkExecutionContext();
  class WKWorkers {
    constructor(page2) {
      this._sessionListeners = [];
      this._page = void 0;
      this._workerSessions = /* @__PURE__ */ new Map();
      this._page = page2;
    }
    setSession(session) {
      _eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
      this.clear();
      this._sessionListeners = [_eventsHelper.eventsHelper.addEventListener(session, "Worker.workerCreated", (event) => {
        const worker2 = new _page.Worker(this._page, event.url);
        const workerSession = new _wkConnection.WKSession(session.connection, event.workerId, (message) => {
          session.send("Worker.sendMessageToWorker", {
            workerId: event.workerId,
            message: JSON.stringify(message)
          }).catch((e2) => {
            workerSession.dispatchMessage({
              id: message.id,
              error: {
                message: e2.message
              }
            });
          });
        });
        this._workerSessions.set(event.workerId, workerSession);
        worker2._createExecutionContext(new _wkExecutionContext.WKExecutionContext(workerSession, void 0));
        this._page._addWorker(event.workerId, worker2);
        workerSession.on("Console.messageAdded", (event2) => this._onConsoleMessage(worker2, event2));
        Promise.all([workerSession.send("Runtime.enable"), workerSession.send("Console.enable"), session.send("Worker.initialized", {
          workerId: event.workerId
        })]).catch((e2) => {
          this._page._removeWorker(event.workerId);
        });
      }), _eventsHelper.eventsHelper.addEventListener(session, "Worker.dispatchMessageFromWorker", (event) => {
        const workerSession = this._workerSessions.get(event.workerId);
        if (!workerSession) return;
        workerSession.dispatchMessage(JSON.parse(event.message));
      }), _eventsHelper.eventsHelper.addEventListener(session, "Worker.workerTerminated", (event) => {
        const workerSession = this._workerSessions.get(event.workerId);
        if (!workerSession) return;
        workerSession.dispose();
        this._workerSessions.delete(event.workerId);
        this._page._removeWorker(event.workerId);
      })];
    }
    clear() {
      this._page._clearWorkers();
      this._workerSessions.clear();
    }
    async initializeSession(session) {
      await session.send("Worker.enable");
    }
    async _onConsoleMessage(worker2, event) {
      const {
        type,
        level,
        text,
        parameters,
        url,
        line: lineNumber,
        column: columnNumber
      } = event.message;
      let derivedType = type || "";
      if (type === "log") derivedType = level;
      else if (type === "timing") derivedType = "timeEnd";
      const handles = (parameters || []).map((p) => {
        return (0, _wkExecutionContext.createHandle)(worker2._existingExecutionContext, p);
      });
      const location2 = {
        url: url || "",
        lineNumber: (lineNumber || 1) - 1,
        columnNumber: (columnNumber || 1) - 1
      };
      this._page._addConsoleMessage(derivedType, handles, location2, handles.length ? void 0 : text);
    }
  }
  wkWorkers.WKWorkers = WKWorkers;
  return wkWorkers;
}
var hasRequiredWkPage;
function requireWkPage() {
  if (hasRequiredWkPage) return wkPage;
  hasRequiredWkPage = 1;
  Object.defineProperty(wkPage, "__esModule", {
    value: true
  });
  wkPage.WKPage = void 0;
  var _path2 = _interopRequireDefault(require$$1$1);
  var _utils = requireUtils();
  var _headers = requireHeaders();
  var _crypto = requireCrypto();
  var _eventsHelper = requireEventsHelper();
  var _hostPlatform = requireHostPlatform();
  var _stackTrace = requireStackTrace();
  var _utilsBundle = requireUtilsBundle();
  var _browserContext = requireBrowserContext$1();
  var dialog2 = _interopRequireWildcard(requireDialog$1());
  var dom2 = _interopRequireWildcard(requireDom());
  var _errors = requireErrors$1();
  var _helper = requireHelper();
  var network2 = _interopRequireWildcard(requireNetwork$1());
  var _page = requirePage$1();
  var _wkAccessibility = requireWkAccessibility();
  var _wkConnection = requireWkConnection();
  var _wkExecutionContext = requireWkExecutionContext();
  var _wkInput = requireWkInput();
  var _wkInterceptableRequest = requireWkInterceptableRequest();
  var _wkProvisionalPage = requireWkProvisionalPage();
  var _wkWorkers = requireWkWorkers();
  var _debugLogger = requireDebugLogger();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  const UTILITY_WORLD_NAME = "__playwright_utility_world__";
  class WKPage {
    constructor(browserContext2, pageProxySession, opener) {
      this.rawMouse = void 0;
      this.rawKeyboard = void 0;
      this.rawTouchscreen = void 0;
      this._session = void 0;
      this._provisionalPage = null;
      this._page = void 0;
      this._pageProxySession = void 0;
      this._opener = void 0;
      this._requestIdToRequest = /* @__PURE__ */ new Map();
      this._requestIdToRequestWillBeSentEvent = /* @__PURE__ */ new Map();
      this._workers = void 0;
      this._contextIdToContext = void 0;
      this._sessionListeners = [];
      this._eventListeners = void 0;
      this._browserContext = void 0;
      this._firstNonInitialNavigationCommittedPromise = void 0;
      this._firstNonInitialNavigationCommittedFulfill = () => {
      };
      this._firstNonInitialNavigationCommittedReject = (e2) => {
      };
      this._lastConsoleMessage = null;
      this._requestIdToResponseReceivedPayloadEvent = /* @__PURE__ */ new Map();
      this._nextWindowOpenPopupFeatures = void 0;
      this._recordingVideoFile = null;
      this._screencastGeneration = 0;
      this._pageProxySession = pageProxySession;
      this._opener = opener;
      this.rawKeyboard = new _wkInput.RawKeyboardImpl(pageProxySession);
      this.rawMouse = new _wkInput.RawMouseImpl(pageProxySession);
      this.rawTouchscreen = new _wkInput.RawTouchscreenImpl(pageProxySession);
      this._contextIdToContext = /* @__PURE__ */ new Map();
      this._page = new _page.Page(this, browserContext2);
      this.rawMouse.setPage(this._page);
      this._workers = new _wkWorkers.WKWorkers(this._page);
      this._session = void 0;
      this._browserContext = browserContext2;
      this._page.on(_page.Page.Events.FrameDetached, (frame2) => this._removeContextsForFrame(frame2, false));
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Target.targetCreated", this._onTargetCreated.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Target.targetDestroyed", this._onTargetDestroyed.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Target.dispatchMessageFromTarget", this._onDispatchMessageFromTarget.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Target.didCommitProvisionalTarget", this._onDidCommitProvisionalTarget.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Screencast.screencastFrame", this._onScreencastFrame.bind(this))];
      this._firstNonInitialNavigationCommittedPromise = new Promise((f2, r2) => {
        this._firstNonInitialNavigationCommittedFulfill = f2;
        this._firstNonInitialNavigationCommittedReject = r2;
      });
      if (opener && !browserContext2._options.noDefaultViewport && opener._nextWindowOpenPopupFeatures) {
        const viewportSize = _helper.helper.getViewportSizeFromWindowFeatures(opener._nextWindowOpenPopupFeatures);
        opener._nextWindowOpenPopupFeatures = void 0;
        if (viewportSize) this._page._emulatedSize = {
          viewport: viewportSize,
          screen: viewportSize
        };
      }
    }
    async _initializePageProxySession() {
      if (this._page._browserContext.isSettingStorageState()) return;
      const promises = [this._pageProxySession.send("Dialog.enable"), this._pageProxySession.send("Emulation.setActiveAndFocused", {
        active: true
      })];
      const contextOptions = this._browserContext._options;
      if (contextOptions.javaScriptEnabled === false) promises.push(this._pageProxySession.send("Emulation.setJavaScriptEnabled", {
        enabled: false
      }));
      promises.push(this._updateViewport());
      promises.push(this.updateHttpCredentials());
      if (this._browserContext._permissions.size) {
        for (const [key, value] of this._browserContext._permissions) promises.push(this._grantPermissions(key, value));
      }
      if (this._browserContext._options.recordVideo) {
        const outputFile = _path2.default.join(this._browserContext._options.recordVideo.dir, (0, _crypto.createGuid)() + ".webm");
        promises.push(this._browserContext._ensureVideosPath().then(() => {
          return this._startVideo({
            // validateBrowserContextOptions ensures correct video size.
            ...this._browserContext._options.recordVideo.size,
            outputFile
          });
        }));
      }
      await Promise.all(promises);
    }
    _setSession(session) {
      _eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
      this._session = session;
      this.rawKeyboard.setSession(session);
      this.rawMouse.setSession(session);
      this._addSessionListeners();
      this._workers.setSession(session);
    }
    // This method is called for provisional targets as well. The session passed as the parameter
    // may be different from the current session and may be destroyed without becoming current.
    async _initializeSession(session, provisional, resourceTreeHandler) {
      await this._initializeSessionMayThrow(session, resourceTreeHandler).catch((e2) => {
        if (provisional && session.isDisposed()) return;
        if (this._session === session) throw e2;
      });
    }
    async _initializeSessionMayThrow(session, resourceTreeHandler) {
      const [, frameTree] = await Promise.all([
        // Page agent must be enabled before Runtime.
        session.send("Page.enable"),
        session.send("Page.getResourceTree")
      ]);
      resourceTreeHandler(frameTree);
      const promises = [
        // Resource tree should be received before first execution context.
        session.send("Runtime.enable"),
        session.send("Runtime.addBinding", {
          name: _page.PageBinding.kPlaywrightBinding
        }),
        session.send("Page.createUserWorld", {
          name: UTILITY_WORLD_NAME
        }).catch((_2) => {
        }),
        // Worlds are per-process
        session.send("Console.enable"),
        session.send("Network.enable"),
        this._workers.initializeSession(session)
      ];
      if (this._page.needsRequestInterception()) {
        promises.push(session.send("Network.setInterceptionEnabled", {
          enabled: true
        }));
        promises.push(session.send("Network.setResourceCachingDisabled", {
          disabled: true
        }));
        promises.push(session.send("Network.addInterception", {
          url: ".*",
          stage: "request",
          isRegex: true
        }));
      }
      if (this._page._browserContext.isSettingStorageState()) {
        await Promise.all(promises);
        return;
      }
      const contextOptions = this._browserContext._options;
      if (contextOptions.userAgent) promises.push(this.updateUserAgent());
      const emulatedMedia = this._page.emulatedMedia();
      if (emulatedMedia.media || emulatedMedia.colorScheme || emulatedMedia.reducedMotion || emulatedMedia.forcedColors || emulatedMedia.contrast) promises.push(WKPage._setEmulateMedia(session, emulatedMedia.media, emulatedMedia.colorScheme, emulatedMedia.reducedMotion, emulatedMedia.forcedColors, emulatedMedia.contrast));
      const bootstrapScript = this._calculateBootstrapScript();
      if (bootstrapScript.length) promises.push(session.send("Page.setBootstrapScript", {
        source: bootstrapScript
      }));
      this._page.frames().map((frame2) => frame2.evaluateExpression(bootstrapScript).catch((e2) => {
      }));
      if (contextOptions.bypassCSP) promises.push(session.send("Page.setBypassCSP", {
        enabled: true
      }));
      const emulatedSize = this._page.emulatedSize();
      if (emulatedSize) {
        promises.push(session.send("Page.setScreenSizeOverride", {
          width: emulatedSize.screen.width,
          height: emulatedSize.screen.height
        }));
      }
      promises.push(this.updateEmulateMedia());
      promises.push(session.send("Network.setExtraHTTPHeaders", {
        headers: (0, _headers.headersArrayToObject)(
          this._calculateExtraHTTPHeaders(),
          false
          /* lowerCase */
        )
      }));
      if (contextOptions.offline) promises.push(session.send("Network.setEmulateOfflineState", {
        offline: true
      }));
      promises.push(session.send("Page.setTouchEmulationEnabled", {
        enabled: !!contextOptions.hasTouch
      }));
      if (contextOptions.timezoneId) {
        promises.push(session.send("Page.setTimeZone", {
          timeZone: contextOptions.timezoneId
        }).catch((e2) => {
          throw new Error(`Invalid timezone ID: ${contextOptions.timezoneId}`);
        }));
      }
      if (this._page.fileChooserIntercepted()) promises.push(session.send("Page.setInterceptFileChooserDialog", {
        enabled: true
      }));
      promises.push(session.send("Page.overrideSetting", {
        setting: "DeviceOrientationEventEnabled",
        value: contextOptions.isMobile
      }));
      promises.push(session.send("Page.overrideSetting", {
        setting: "FullScreenEnabled",
        value: !contextOptions.isMobile
      }));
      promises.push(session.send("Page.overrideSetting", {
        setting: "NotificationsEnabled",
        value: !contextOptions.isMobile
      }));
      promises.push(session.send("Page.overrideSetting", {
        setting: "PointerLockEnabled",
        value: !contextOptions.isMobile
      }));
      promises.push(session.send("Page.overrideSetting", {
        setting: "InputTypeMonthEnabled",
        value: contextOptions.isMobile
      }));
      promises.push(session.send("Page.overrideSetting", {
        setting: "InputTypeWeekEnabled",
        value: contextOptions.isMobile
      }));
      promises.push(session.send("Page.overrideSetting", {
        setting: "FixedBackgroundsPaintRelativeToDocument",
        value: contextOptions.isMobile
      }));
      await Promise.all(promises);
    }
    _onDidCommitProvisionalTarget(event) {
      const {
        oldTargetId,
        newTargetId
      } = event;
      (0, _utils.assert)(this._provisionalPage);
      (0, _utils.assert)(this._provisionalPage._session.sessionId === newTargetId, "Unknown new target: " + newTargetId);
      (0, _utils.assert)(this._session.sessionId === oldTargetId, "Unknown old target: " + oldTargetId);
      const newSession = this._provisionalPage._session;
      this._provisionalPage.commit();
      this._provisionalPage.dispose();
      this._provisionalPage = null;
      this._setSession(newSession);
    }
    _onTargetDestroyed(event) {
      const {
        targetId,
        crashed
      } = event;
      if (this._provisionalPage && this._provisionalPage._session.sessionId === targetId) {
        this._maybeCancelCoopNavigationRequest(this._provisionalPage);
        this._provisionalPage._session.dispose();
        this._provisionalPage.dispose();
        this._provisionalPage = null;
      } else if (this._session.sessionId === targetId) {
        this._session.dispose();
        _eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
        if (crashed) {
          this._session.markAsCrashed();
          this._page._didCrash();
        }
      }
    }
    didClose() {
      this._pageProxySession.dispose();
      _eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      if (this._session) this._session.dispose();
      if (this._provisionalPage) {
        this._provisionalPage._session.dispose();
        this._provisionalPage.dispose();
        this._provisionalPage = null;
      }
      this._firstNonInitialNavigationCommittedReject(new _errors.TargetClosedError());
      this._page._didClose();
    }
    dispatchMessageToSession(message) {
      this._pageProxySession.dispatchMessage(message);
    }
    handleProvisionalLoadFailed(event) {
      if (!this._page.initializedOrUndefined()) {
        this._firstNonInitialNavigationCommittedReject(new Error("Initial load failed"));
        return;
      }
      if (!this._provisionalPage) return;
      let errorText = event.error;
      if (errorText.includes("cancelled")) errorText += "; maybe frame was detached?";
      this._page._frameManager.frameAbortedNavigation(this._page.mainFrame()._id, errorText, event.loaderId);
    }
    handleWindowOpen(event) {
      this._nextWindowOpenPopupFeatures = event.windowFeatures;
    }
    async _onTargetCreated(event) {
      const {
        targetInfo
      } = event;
      const session = new _wkConnection.WKSession(this._pageProxySession.connection, targetInfo.targetId, (message) => {
        this._pageProxySession.send("Target.sendMessageToTarget", {
          message: JSON.stringify(message),
          targetId: targetInfo.targetId
        }).catch((e2) => {
          session.dispatchMessage({
            id: message.id,
            error: {
              message: e2.message
            }
          });
        });
      });
      (0, _utils.assert)(targetInfo.type === "page", "Only page targets are expected in WebKit, received: " + targetInfo.type);
      if (!targetInfo.isProvisional) {
        var _this$_opener;
        (0, _utils.assert)(!this._page.initializedOrUndefined());
        let pageOrError;
        try {
          this._setSession(session);
          await Promise.all([this._initializePageProxySession(), this._initializeSession(session, false, ({
            frameTree
          }) => this._handleFrameTree(frameTree))]);
          pageOrError = this._page;
        } catch (e2) {
          pageOrError = e2;
        }
        if (targetInfo.isPaused) this._pageProxySession.sendMayFail("Target.resume", {
          targetId: targetInfo.targetId
        });
        if (pageOrError instanceof _page.Page && this._page.mainFrame().url() === "") {
          try {
            await this._firstNonInitialNavigationCommittedPromise;
          } catch (e2) {
            pageOrError = e2;
          }
        } else {
          this._firstNonInitialNavigationCommittedPromise.catch(() => {
          });
        }
        this._page.reportAsNew((_this$_opener = this._opener) === null || _this$_opener === void 0 ? void 0 : _this$_opener._page, pageOrError instanceof _page.Page ? void 0 : pageOrError);
      } else {
        (0, _utils.assert)(targetInfo.isProvisional);
        (0, _utils.assert)(!this._provisionalPage);
        this._provisionalPage = new _wkProvisionalPage.WKProvisionalPage(session, this);
        if (targetInfo.isPaused) {
          this._provisionalPage.initializationPromise.then(() => {
            this._pageProxySession.sendMayFail("Target.resume", {
              targetId: targetInfo.targetId
            });
          });
        }
      }
    }
    _onDispatchMessageFromTarget(event) {
      const {
        targetId,
        message
      } = event;
      if (this._provisionalPage && this._provisionalPage._session.sessionId === targetId) this._provisionalPage._session.dispatchMessage(JSON.parse(message));
      else if (this._session.sessionId === targetId) this._session.dispatchMessage(JSON.parse(message));
      else throw new Error("Unknown target: " + targetId);
    }
    _addSessionListeners() {
      this._sessionListeners = [_eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameNavigated", (event) => this._onFrameNavigated(event.frame, false)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.navigatedWithinDocument", (event) => this._onFrameNavigatedWithinDocument(event.frameId, event.url)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameAttached", (event) => this._onFrameAttached(event.frameId, event.parentFrameId)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameDetached", (event) => this._onFrameDetached(event.frameId)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.willCheckNavigationPolicy", (event) => this._onWillCheckNavigationPolicy(event.frameId)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.didCheckNavigationPolicy", (event) => this._onDidCheckNavigationPolicy(event.frameId, event.cancel)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameScheduledNavigation", (event) => this._onFrameScheduledNavigation(event.frameId, event.delay, event.targetIsCurrentFrame)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.loadEventFired", (event) => this._page._frameManager.frameLifecycleEvent(event.frameId, "load")), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.domContentEventFired", (event) => this._page._frameManager.frameLifecycleEvent(event.frameId, "domcontentloaded")), _eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.executionContextCreated", (event) => this._onExecutionContextCreated(event.context)), _eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.bindingCalled", (event) => this._onBindingCalled(event.contextId, event.argument)), _eventsHelper.eventsHelper.addEventListener(this._session, "Console.messageAdded", (event) => this._onConsoleMessage(event)), _eventsHelper.eventsHelper.addEventListener(this._session, "Console.messageRepeatCountUpdated", (event) => this._onConsoleRepeatCountUpdated(event)), _eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Dialog.javascriptDialogOpening", (event) => this._onDialog(event)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.fileChooserOpened", (event) => this._onFileChooserOpened(event)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.requestWillBeSent", (e2) => this._onRequestWillBeSent(this._session, e2)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.requestIntercepted", (e2) => this._onRequestIntercepted(this._session, e2)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.responseReceived", (e2) => this._onResponseReceived(this._session, e2)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.loadingFinished", (e2) => this._onLoadingFinished(e2)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.loadingFailed", (e2) => this._onLoadingFailed(this._session, e2)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketCreated", (e2) => this._page._frameManager.onWebSocketCreated(e2.requestId, e2.url)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketWillSendHandshakeRequest", (e2) => this._page._frameManager.onWebSocketRequest(e2.requestId)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketHandshakeResponseReceived", (e2) => this._page._frameManager.onWebSocketResponse(e2.requestId, e2.response.status, e2.response.statusText)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketFrameSent", (e2) => e2.response.payloadData && this._page._frameManager.onWebSocketFrameSent(e2.requestId, e2.response.opcode, e2.response.payloadData)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketFrameReceived", (e2) => e2.response.payloadData && this._page._frameManager.webSocketFrameReceived(e2.requestId, e2.response.opcode, e2.response.payloadData)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketClosed", (e2) => this._page._frameManager.webSocketClosed(e2.requestId)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketFrameError", (e2) => this._page._frameManager.webSocketError(e2.requestId, e2.errorMessage))];
    }
    async _updateState(method, params) {
      await this._forAllSessions((session) => session.send(method, params).then());
    }
    async _forAllSessions(callback) {
      const sessions = [this._session];
      if (this._provisionalPage) sessions.push(this._provisionalPage._session);
      await Promise.all(sessions.map((session) => callback(session).catch((e2) => {
      })));
    }
    _onWillCheckNavigationPolicy(frameId) {
      if (this._provisionalPage) return;
      this._page._frameManager.frameRequestedNavigation(frameId);
    }
    _onDidCheckNavigationPolicy(frameId, cancel) {
      if (!cancel) return;
      if (this._provisionalPage) return;
      this._page._frameManager.frameAbortedNavigation(frameId, "Navigation canceled by policy check");
    }
    _onFrameScheduledNavigation(frameId, delay, targetIsCurrentFrame) {
      if (targetIsCurrentFrame) this._page._frameManager.frameRequestedNavigation(frameId);
    }
    _handleFrameTree(frameTree) {
      this._onFrameAttached(frameTree.frame.id, frameTree.frame.parentId || null);
      this._onFrameNavigated(frameTree.frame, true);
      this._page._frameManager.frameLifecycleEvent(frameTree.frame.id, "domcontentloaded");
      this._page._frameManager.frameLifecycleEvent(frameTree.frame.id, "load");
      if (!frameTree.childFrames) return;
      for (const child of frameTree.childFrames) this._handleFrameTree(child);
    }
    _onFrameAttached(frameId, parentFrameId) {
      return this._page._frameManager.frameAttached(frameId, parentFrameId);
    }
    _onFrameNavigated(framePayload, initial) {
      const frame2 = this._page._frameManager.frame(framePayload.id);
      (0, _utils.assert)(frame2);
      this._removeContextsForFrame(frame2, true);
      if (!framePayload.parentId) this._workers.clear();
      this._page._frameManager.frameCommittedNewDocumentNavigation(framePayload.id, framePayload.url, framePayload.name || "", framePayload.loaderId, initial);
      if (!initial) this._firstNonInitialNavigationCommittedFulfill();
    }
    _onFrameNavigatedWithinDocument(frameId, url) {
      this._page._frameManager.frameCommittedSameDocumentNavigation(frameId, url);
    }
    _onFrameDetached(frameId) {
      this._page._frameManager.frameDetached(frameId);
    }
    _removeContextsForFrame(frame2, notifyFrame) {
      for (const [contextId, context] of this._contextIdToContext) {
        if (context.frame === frame2) {
          this._contextIdToContext.delete(contextId);
          if (notifyFrame) frame2._contextDestroyed(context);
        }
      }
    }
    _onExecutionContextCreated(contextPayload) {
      if (this._contextIdToContext.has(contextPayload.id)) return;
      const frame2 = this._page._frameManager.frame(contextPayload.frameId);
      if (!frame2) return;
      const delegate = new _wkExecutionContext.WKExecutionContext(this._session, contextPayload.id);
      let worldName = null;
      if (contextPayload.type === "normal") worldName = "main";
      else if (contextPayload.type === "user" && contextPayload.name === UTILITY_WORLD_NAME) worldName = "utility";
      const context = new dom2.FrameExecutionContext(delegate, frame2, worldName);
      if (worldName) frame2._contextCreated(worldName, context);
      this._contextIdToContext.set(contextPayload.id, context);
    }
    async _onBindingCalled(contextId, argument) {
      const pageOrError = await this._page.waitForInitializedOrError();
      if (!(pageOrError instanceof Error)) {
        const context = this._contextIdToContext.get(contextId);
        if (context) await this._page._onBindingCalled(argument, context);
      }
    }
    async navigateFrame(frame2, url, referrer) {
      if (this._pageProxySession.isDisposed()) throw new _errors.TargetClosedError();
      const pageProxyId = this._pageProxySession.sessionId;
      const result = await this._pageProxySession.connection.browserSession.send("Playwright.navigate", {
        url,
        pageProxyId,
        frameId: frame2._id,
        referrer
      });
      return {
        newDocumentId: result.loaderId
      };
    }
    _onConsoleMessage(event) {
      const {
        type,
        level,
        text,
        parameters,
        url,
        line: lineNumber,
        column: columnNumber,
        source
      } = event.message;
      if (level === "error" && source === "javascript") {
        const {
          name,
          message
        } = (0, _stackTrace.splitErrorMessage)(text);
        let stack;
        if (event.message.stackTrace) {
          stack = text + "\n" + event.message.stackTrace.callFrames.map((callFrame) => {
            return `    at ${callFrame.functionName || "unknown"} (${callFrame.url}:${callFrame.lineNumber}:${callFrame.columnNumber})`;
          }).join("\n");
        } else {
          stack = "";
        }
        this._lastConsoleMessage = null;
        const error = new Error(message);
        error.stack = stack;
        error.name = name;
        this._page.emitOnContextOnceInitialized(_browserContext.BrowserContext.Events.PageError, error, this._page);
        return;
      }
      let derivedType = type || "";
      if (type === "log") derivedType = level;
      else if (type === "timing") derivedType = "timeEnd";
      const handles = [];
      for (const p of parameters || []) {
        let context;
        if (p.objectId) {
          const objectId = JSON.parse(p.objectId);
          context = this._contextIdToContext.get(objectId.injectedScriptId);
        } else {
          context = [...this._contextIdToContext.values()].find((c2) => c2.frame === this._page.mainFrame());
        }
        if (!context) return;
        handles.push((0, _wkExecutionContext.createHandle)(context, p));
      }
      this._lastConsoleMessage = {
        derivedType,
        text,
        handles,
        count: 0,
        location: {
          url: url || "",
          lineNumber: (lineNumber || 1) - 1,
          columnNumber: (columnNumber || 1) - 1
        }
      };
      this._onConsoleRepeatCountUpdated({
        count: 1
      });
    }
    _onConsoleRepeatCountUpdated(event) {
      if (this._lastConsoleMessage) {
        const {
          derivedType,
          text,
          handles,
          count,
          location: location2
        } = this._lastConsoleMessage;
        for (let i = count; i < event.count; ++i) this._page._addConsoleMessage(derivedType, handles, location2, handles.length ? void 0 : text);
        this._lastConsoleMessage.count = event.count;
      }
    }
    _onDialog(event) {
      this._page.emitOnContext(_browserContext.BrowserContext.Events.Dialog, new dialog2.Dialog(this._page, event.type, event.message, async (accept, promptText) => {
        if (event.type === "beforeunload" && !accept) this._page._frameManager.frameAbortedNavigation(this._page.mainFrame()._id, "navigation cancelled by beforeunload dialog");
        await this._pageProxySession.send("Dialog.handleJavaScriptDialog", {
          accept,
          promptText
        });
      }, event.defaultPrompt));
    }
    async _onFileChooserOpened(event) {
      let handle;
      try {
        const context = await this._page._frameManager.frame(event.frameId)._mainContext();
        handle = (0, _wkExecutionContext.createHandle)(context, event.element).asElement();
      } catch (e2) {
        return;
      }
      await this._page._onFileChooserOpened(handle);
    }
    static async _setEmulateMedia(session, mediaType, colorScheme, reducedMotion, forcedColors, contrast) {
      const promises = [];
      promises.push(session.send("Page.setEmulatedMedia", {
        media: mediaType === "no-override" ? "" : mediaType
      }));
      let appearance = void 0;
      switch (colorScheme) {
        case "light":
          appearance = "Light";
          break;
        case "dark":
          appearance = "Dark";
          break;
        case "no-override":
          appearance = void 0;
          break;
      }
      promises.push(session.send("Page.overrideUserPreference", {
        name: "PrefersColorScheme",
        value: appearance
      }));
      let reducedMotionWk = void 0;
      switch (reducedMotion) {
        case "reduce":
          reducedMotionWk = "Reduce";
          break;
        case "no-preference":
          reducedMotionWk = "NoPreference";
          break;
        case "no-override":
          reducedMotionWk = void 0;
          break;
      }
      promises.push(session.send("Page.overrideUserPreference", {
        name: "PrefersReducedMotion",
        value: reducedMotionWk
      }));
      let forcedColorsWk = void 0;
      switch (forcedColors) {
        case "active":
          forcedColorsWk = "Active";
          break;
        case "none":
          forcedColorsWk = "None";
          break;
        case "no-override":
          forcedColorsWk = void 0;
          break;
      }
      promises.push(session.send("Page.setForcedColors", {
        forcedColors: forcedColorsWk
      }));
      let contrastWk = void 0;
      switch (contrast) {
        case "more":
          contrastWk = "More";
          break;
        case "no-preference":
          contrastWk = "NoPreference";
          break;
        case "no-override":
          contrastWk = void 0;
          break;
      }
      promises.push(session.send("Page.overrideUserPreference", {
        name: "PrefersContrast",
        value: contrastWk
      }));
      await Promise.all(promises);
    }
    async updateExtraHTTPHeaders() {
      await this._updateState("Network.setExtraHTTPHeaders", {
        headers: (0, _headers.headersArrayToObject)(
          this._calculateExtraHTTPHeaders(),
          false
          /* lowerCase */
        )
      });
    }
    _calculateExtraHTTPHeaders() {
      const locale = this._browserContext._options.locale;
      const headers2 = network2.mergeHeaders([this._browserContext._options.extraHTTPHeaders, this._page.extraHTTPHeaders(), locale ? network2.singleHeader("Accept-Language", locale) : void 0]);
      return headers2;
    }
    async updateEmulateMedia() {
      const emulatedMedia = this._page.emulatedMedia();
      const colorScheme = emulatedMedia.colorScheme;
      const reducedMotion = emulatedMedia.reducedMotion;
      const forcedColors = emulatedMedia.forcedColors;
      const contrast = emulatedMedia.contrast;
      await this._forAllSessions((session) => WKPage._setEmulateMedia(session, emulatedMedia.media, colorScheme, reducedMotion, forcedColors, contrast));
    }
    async updateEmulatedViewportSize() {
      this._browserContext._validateEmulatedViewport(this._page.viewportSize());
      await this._updateViewport();
    }
    async updateUserAgent() {
      const contextOptions = this._browserContext._options;
      this._updateState("Page.overrideUserAgent", {
        value: contextOptions.userAgent
      });
    }
    async bringToFront() {
      this._pageProxySession.send("Target.activate", {
        targetId: this._session.sessionId
      });
    }
    async _updateViewport() {
      const options = this._browserContext._options;
      const deviceSize = this._page.emulatedSize();
      if (deviceSize === null) return;
      const viewportSize = deviceSize.viewport;
      const screenSize = deviceSize.screen;
      const promises = [this._pageProxySession.send("Emulation.setDeviceMetricsOverride", {
        width: viewportSize.width,
        height: viewportSize.height,
        fixedLayout: !!options.isMobile,
        deviceScaleFactor: options.deviceScaleFactor || 1
      }), this._session.send("Page.setScreenSizeOverride", {
        width: screenSize.width,
        height: screenSize.height
      })];
      if (options.isMobile) {
        const angle = viewportSize.width > viewportSize.height ? 90 : 0;
        promises.push(this._pageProxySession.send("Emulation.setOrientationOverride", {
          angle
        }));
      }
      await Promise.all(promises);
    }
    async updateRequestInterception() {
      const enabled = this._page.needsRequestInterception();
      await Promise.all([this._updateState("Network.setInterceptionEnabled", {
        enabled
      }), this._updateState("Network.setResourceCachingDisabled", {
        disabled: enabled
      }), this._updateState("Network.addInterception", {
        url: ".*",
        stage: "request",
        isRegex: true
      })]);
    }
    async updateOffline() {
      await this._updateState("Network.setEmulateOfflineState", {
        offline: !!this._browserContext._options.offline
      });
    }
    async updateHttpCredentials() {
      const credentials = this._browserContext._options.httpCredentials || {
        username: "",
        password: "",
        origin: ""
      };
      await this._pageProxySession.send("Emulation.setAuthCredentials", {
        username: credentials.username,
        password: credentials.password,
        origin: credentials.origin
      });
    }
    async updateFileChooserInterception() {
      const enabled = this._page.fileChooserIntercepted();
      await this._session.send("Page.setInterceptFileChooserDialog", {
        enabled
      }).catch(() => {
      });
    }
    async reload() {
      await this._session.send("Page.reload");
    }
    goBack() {
      return this._session.send("Page.goBack").then(() => true).catch((error) => {
        if (error instanceof Error && error.message.includes(`Protocol error (Page.goBack): Failed to go`)) return false;
        throw error;
      });
    }
    goForward() {
      return this._session.send("Page.goForward").then(() => true).catch((error) => {
        if (error instanceof Error && error.message.includes(`Protocol error (Page.goForward): Failed to go`)) return false;
        throw error;
      });
    }
    async requestGC() {
      await this._session.send("Heap.gc");
    }
    async addInitScript(initScript) {
      await this._updateBootstrapScript();
    }
    async removeNonInternalInitScripts() {
      await this._updateBootstrapScript();
    }
    _calculateBootstrapScript() {
      const scripts = [];
      if (!this._page.context()._options.isMobile) {
        scripts.push("delete window.orientation");
        scripts.push("delete window.ondevicemotion");
        scripts.push("delete window.ondeviceorientation");
      }
      scripts.push('if (!window.safari) window.safari = { pushNotification: { toString() { return "[object SafariRemoteNotification]"; } } };');
      scripts.push("if (!window.GestureEvent) window.GestureEvent = function GestureEvent() {};");
      scripts.push(...this._page.allInitScripts().map((script) => script.source));
      return scripts.join(";\n");
    }
    async _updateBootstrapScript() {
      await this._updateState("Page.setBootstrapScript", {
        source: this._calculateBootstrapScript()
      });
    }
    async closePage(runBeforeUnload) {
      await this._stopVideo();
      await this._pageProxySession.sendMayFail("Target.close", {
        targetId: this._session.sessionId,
        runBeforeUnload
      });
    }
    async setBackgroundColor(color) {
      await this._session.send("Page.setDefaultBackgroundColorOverride", {
        color
      });
    }
    _toolbarHeight() {
      var _this$_page$_browserC;
      if ((_this$_page$_browserC = this._page._browserContext._browser) !== null && _this$_page$_browserC !== void 0 && _this$_page$_browserC.options.headful) return _hostPlatform.hostPlatform === "mac10.15" ? 55 : 59;
      return 0;
    }
    async _startVideo(options) {
      (0, _utils.assert)(!this._recordingVideoFile);
      const {
        screencastId
      } = await this._pageProxySession.send("Screencast.startVideo", {
        file: options.outputFile,
        width: options.width,
        height: options.height,
        toolbarHeight: this._toolbarHeight()
      });
      this._recordingVideoFile = options.outputFile;
      this._browserContext._browser._videoStarted(this._browserContext, screencastId, options.outputFile, this._page.waitForInitializedOrError());
    }
    async _stopVideo() {
      if (!this._recordingVideoFile) return;
      await this._pageProxySession.sendMayFail("Screencast.stopVideo");
      this._recordingVideoFile = null;
    }
    validateScreenshotDimension(side, omitDeviceScaleFactor) {
      if (process.platform === "darwin") return;
      if (!omitDeviceScaleFactor && this._page._browserContext._options.deviceScaleFactor) side = Math.ceil(side * this._page._browserContext._options.deviceScaleFactor);
      if (side > 32767) throw new Error("Cannot take screenshot larger than 32767 pixels on any dimension");
    }
    async takeScreenshot(progress2, format2, documentRect, viewportRect, quality, fitsViewport, scale) {
      const rect = documentRect || viewportRect;
      const omitDeviceScaleFactor = scale === "css";
      this.validateScreenshotDimension(rect.width, omitDeviceScaleFactor);
      this.validateScreenshotDimension(rect.height, omitDeviceScaleFactor);
      const result = await this._session.send("Page.snapshotRect", {
        ...rect,
        coordinateSystem: documentRect ? "Page" : "Viewport",
        omitDeviceScaleFactor
      });
      const prefix = "data:image/png;base64,";
      let buffer2 = Buffer.from(result.dataURL.substr(prefix.length), "base64");
      if (format2 === "jpeg") buffer2 = _utilsBundle.jpegjs.encode(_utilsBundle.PNG.sync.read(buffer2), quality).data;
      return buffer2;
    }
    async getContentFrame(handle) {
      const nodeInfo = await this._session.send("DOM.describeNode", {
        objectId: handle._objectId
      });
      if (!nodeInfo.contentFrameId) return null;
      return this._page._frameManager.frame(nodeInfo.contentFrameId);
    }
    async getOwnerFrame(handle) {
      if (!handle._objectId) return null;
      const nodeInfo = await this._session.send("DOM.describeNode", {
        objectId: handle._objectId
      });
      return nodeInfo.ownerFrameId || null;
    }
    async getBoundingBox(handle) {
      const quads = await this.getContentQuads(handle);
      if (!quads || !quads.length) return null;
      let minX = Infinity;
      let maxX = -Infinity;
      let minY = Infinity;
      let maxY = -Infinity;
      for (const quad of quads) {
        for (const point of quad) {
          minX = Math.min(minX, point.x);
          maxX = Math.max(maxX, point.x);
          minY = Math.min(minY, point.y);
          maxY = Math.max(maxY, point.y);
        }
      }
      return {
        x: minX,
        y: minY,
        width: maxX - minX,
        height: maxY - minY
      };
    }
    async scrollRectIntoViewIfNeeded(handle, rect) {
      return await this._session.send("DOM.scrollIntoViewIfNeeded", {
        objectId: handle._objectId,
        rect
      }).then(() => "done").catch((e2) => {
        if (e2 instanceof Error && e2.message.includes("Node does not have a layout object")) return "error:notvisible";
        if (e2 instanceof Error && e2.message.includes("Node is detached from document")) return "error:notconnected";
        throw e2;
      });
    }
    async setScreencastOptions(options) {
      if (options) {
        const so = {
          ...options,
          toolbarHeight: this._toolbarHeight()
        };
        const {
          generation
        } = await this._pageProxySession.send("Screencast.startScreencast", so);
        this._screencastGeneration = generation;
      } else {
        await this._pageProxySession.send("Screencast.stopScreencast");
      }
    }
    _onScreencastFrame(event) {
      const generation = this._screencastGeneration;
      this._page.throttleScreencastFrameAck(() => {
        this._pageProxySession.send("Screencast.screencastFrameAck", {
          generation
        }).catch((e2) => _debugLogger.debugLogger.log("error", e2));
      });
      const buffer2 = Buffer.from(event.data, "base64");
      this._page.emit(_page.Page.Events.ScreencastFrame, {
        buffer: buffer2,
        width: event.deviceWidth,
        height: event.deviceHeight
      });
    }
    rafCountForStablePosition() {
      return process.platform === "win32" ? 5 : 1;
    }
    async getContentQuads(handle) {
      const result = await this._session.sendMayFail("DOM.getContentQuads", {
        objectId: handle._objectId
      });
      if (!result) return null;
      return result.quads.map((quad) => [{
        x: quad[0],
        y: quad[1]
      }, {
        x: quad[2],
        y: quad[3]
      }, {
        x: quad[4],
        y: quad[5]
      }, {
        x: quad[6],
        y: quad[7]
      }]);
    }
    async setInputFilePaths(handle, paths) {
      const pageProxyId = this._pageProxySession.sessionId;
      const objectId = handle._objectId;
      await Promise.all([this._pageProxySession.connection.browserSession.send("Playwright.grantFileReadAccess", {
        pageProxyId,
        paths
      }), this._session.send("DOM.setInputFiles", {
        objectId,
        paths
      })]);
    }
    async adoptElementHandle(handle, to) {
      const result = await this._session.sendMayFail("DOM.resolveNode", {
        objectId: handle._objectId,
        executionContextId: to.delegate._contextId
      });
      if (!result || result.object.subtype === "null") throw new Error(dom2.kUnableToAdoptErrorMessage);
      return (0, _wkExecutionContext.createHandle)(to, result.object);
    }
    async getAccessibilityTree(needle) {
      return (0, _wkAccessibility.getAccessibilityTree)(this._session, needle);
    }
    async inputActionEpilogue() {
    }
    async resetForReuse() {
    }
    async getFrameElement(frame2) {
      const parent = frame2.parentFrame();
      if (!parent) throw new Error("Frame has been detached.");
      const context = await parent._mainContext();
      const result = await this._session.send("DOM.resolveNode", {
        frameId: frame2._id,
        executionContextId: context.delegate._contextId
      });
      if (!result || result.object.subtype === "null") throw new Error("Frame has been detached.");
      return (0, _wkExecutionContext.createHandle)(context, result.object);
    }
    _maybeCancelCoopNavigationRequest(provisionalPage) {
      const navigationRequest = provisionalPage.coopNavigationRequest();
      for (const [requestId, request] of this._requestIdToRequest) {
        if (request.request === navigationRequest) {
          this._onLoadingFailed(provisionalPage._session, {
            requestId,
            errorText: "Provisiolal navigation canceled.",
            timestamp: request._timestamp,
            canceled: true
          });
          return;
        }
      }
    }
    _adoptRequestFromNewProcess(navigationRequest, newSession, newRequestId) {
      for (const [requestId, request] of this._requestIdToRequest) {
        if (request.request === navigationRequest) {
          this._requestIdToRequest.delete(requestId);
          request.adoptRequestFromNewProcess(newSession, newRequestId);
          this._requestIdToRequest.set(newRequestId, request);
          return;
        }
      }
    }
    _onRequestWillBeSent(session, event) {
      if (event.request.url.startsWith("data:")) return;
      if (this._page.needsRequestInterception() && !event.redirectResponse) this._requestIdToRequestWillBeSentEvent.set(event.requestId, event);
      else this._onRequest(session, event, false);
    }
    _onRequest(session, event, intercepted) {
      let redirectedFrom = null;
      if (event.redirectResponse) {
        const request2 = this._requestIdToRequest.get(event.requestId);
        if (request2) {
          this._handleRequestRedirect(request2, event.requestId, event.redirectResponse, event.timestamp);
          redirectedFrom = request2;
        }
      }
      const frame2 = redirectedFrom ? redirectedFrom.request.frame() : this._page._frameManager.frame(event.frameId);
      if (!frame2) return;
      const isNavigationRequest = event.type === "Document";
      const documentId = isNavigationRequest ? event.loaderId : void 0;
      const request = new _wkInterceptableRequest.WKInterceptableRequest(session, frame2, event, redirectedFrom, documentId);
      let route;
      if (intercepted) {
        route = new _wkInterceptableRequest.WKRouteImpl(session, event.requestId);
        request.request.setRawRequestHeaders(null);
      }
      this._requestIdToRequest.set(event.requestId, request);
      this._page._frameManager.requestStarted(request.request, route);
    }
    _handleRequestRedirect(request, requestId, responsePayload, timestamp) {
      const response = request.createResponse(responsePayload);
      response._securityDetailsFinished();
      response._serverAddrFinished();
      response.setResponseHeadersSize(null);
      response.setEncodedBodySize(null);
      response._requestFinished(responsePayload.timing ? _helper.helper.secondsToRoundishMillis(timestamp - request._timestamp) : -1);
      this._requestIdToRequest.delete(requestId);
      this._page._frameManager.requestReceivedResponse(response);
      this._page._frameManager.reportRequestFinished(request.request, response);
    }
    _onRequestIntercepted(session, event) {
      const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
      if (!requestWillBeSentEvent) {
        session.sendMayFail("Network.interceptWithRequest", {
          requestId: event.requestId
        });
        return;
      }
      this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
      this._onRequest(session, requestWillBeSentEvent, true);
    }
    _onResponseReceived(session, event) {
      const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
      if (requestWillBeSentEvent) {
        this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
        this._onRequest(session, requestWillBeSentEvent, false);
      }
      const request = this._requestIdToRequest.get(event.requestId);
      if (!request) return;
      this._requestIdToResponseReceivedPayloadEvent.set(event.requestId, event);
      const response = request.createResponse(event.response);
      this._page._frameManager.requestReceivedResponse(response);
      if (response.status() === 204 && request.request.isNavigationRequest()) {
        this._onLoadingFailed(session, {
          requestId: event.requestId,
          errorText: "Aborted: 204 No Content",
          timestamp: event.timestamp
        });
      }
    }
    _onLoadingFinished(event) {
      const request = this._requestIdToRequest.get(event.requestId);
      if (!request) return;
      const response = request.request._existingResponse();
      if (response) {
        var _event$metrics, _event$metrics2, _responseReceivedPayl, _responseReceivedPayl2, _responseReceivedPayl3, _event$metrics3, _event$metrics$respon, _event$metrics4, _event$metrics$respon2, _event$metrics5;
        const responseReceivedPayload = this._requestIdToResponseReceivedPayloadEvent.get(event.requestId);
        response._serverAddrFinished(parseRemoteAddress(event === null || event === void 0 || (_event$metrics = event.metrics) === null || _event$metrics === void 0 ? void 0 : _event$metrics.remoteAddress));
        response._securityDetailsFinished({
          protocol: isLoadedSecurely(response.url(), response.timing()) ? (_event$metrics2 = event.metrics) === null || _event$metrics2 === void 0 || (_event$metrics2 = _event$metrics2.securityConnection) === null || _event$metrics2 === void 0 ? void 0 : _event$metrics2.protocol : void 0,
          subjectName: responseReceivedPayload === null || responseReceivedPayload === void 0 || (_responseReceivedPayl = responseReceivedPayload.response.security) === null || _responseReceivedPayl === void 0 || (_responseReceivedPayl = _responseReceivedPayl.certificate) === null || _responseReceivedPayl === void 0 ? void 0 : _responseReceivedPayl.subject,
          validFrom: responseReceivedPayload === null || responseReceivedPayload === void 0 || (_responseReceivedPayl2 = responseReceivedPayload.response.security) === null || _responseReceivedPayl2 === void 0 || (_responseReceivedPayl2 = _responseReceivedPayl2.certificate) === null || _responseReceivedPayl2 === void 0 ? void 0 : _responseReceivedPayl2.validFrom,
          validTo: responseReceivedPayload === null || responseReceivedPayload === void 0 || (_responseReceivedPayl3 = responseReceivedPayload.response.security) === null || _responseReceivedPayl3 === void 0 || (_responseReceivedPayl3 = _responseReceivedPayl3.certificate) === null || _responseReceivedPayl3 === void 0 ? void 0 : _responseReceivedPayl3.validUntil
        });
        if ((_event$metrics3 = event.metrics) !== null && _event$metrics3 !== void 0 && _event$metrics3.protocol) response._setHttpVersion(event.metrics.protocol);
        response.setEncodedBodySize((_event$metrics$respon = (_event$metrics4 = event.metrics) === null || _event$metrics4 === void 0 ? void 0 : _event$metrics4.responseBodyBytesReceived) !== null && _event$metrics$respon !== void 0 ? _event$metrics$respon : null);
        response.setResponseHeadersSize((_event$metrics$respon2 = (_event$metrics5 = event.metrics) === null || _event$metrics5 === void 0 ? void 0 : _event$metrics5.responseHeaderBytesReceived) !== null && _event$metrics$respon2 !== void 0 ? _event$metrics$respon2 : null);
        response._requestFinished(_helper.helper.secondsToRoundishMillis(event.timestamp - request._timestamp));
      } else {
        request.request.setRawRequestHeaders(null);
      }
      this._requestIdToResponseReceivedPayloadEvent.delete(event.requestId);
      this._requestIdToRequest.delete(event.requestId);
      this._page._frameManager.reportRequestFinished(request.request, response);
    }
    _onLoadingFailed(session, event) {
      const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
      if (requestWillBeSentEvent) {
        this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
        this._onRequest(session, requestWillBeSentEvent, false);
      }
      const request = this._requestIdToRequest.get(event.requestId);
      if (!request) return;
      const response = request.request._existingResponse();
      if (response) {
        response._serverAddrFinished();
        response._securityDetailsFinished();
        response.setResponseHeadersSize(null);
        response.setEncodedBodySize(null);
        response._requestFinished(_helper.helper.secondsToRoundishMillis(event.timestamp - request._timestamp));
      } else {
        request.request.setRawRequestHeaders(null);
      }
      this._requestIdToRequest.delete(event.requestId);
      request.request._setFailureText(event.errorText);
      this._page._frameManager.requestFailed(request.request, event.errorText.includes("cancelled"));
    }
    async _grantPermissions(origin, permissions) {
      const webPermissionToProtocol = /* @__PURE__ */ new Map([["geolocation", "geolocation"], ["notifications", "notifications"], ["clipboard-read", "clipboard-read"]]);
      const filtered = permissions.map((permission) => {
        const protocolPermission = webPermissionToProtocol.get(permission);
        if (!protocolPermission) throw new Error("Unknown permission: " + permission);
        return protocolPermission;
      });
      await this._pageProxySession.send("Emulation.grantPermissions", {
        origin,
        permissions: filtered
      });
    }
    async _clearPermissions() {
      await this._pageProxySession.send("Emulation.resetPermissions", {});
    }
    shouldToggleStyleSheetToSyncAnimations() {
      return true;
    }
  }
  wkPage.WKPage = WKPage;
  function parseRemoteAddress(value) {
    if (!value) return;
    try {
      const colon = value.lastIndexOf(":");
      const dot = value.lastIndexOf(".");
      if (dot < 0) {
        return {
          ipAddress: `[${value.slice(0, colon)}]`,
          port: +value.slice(colon + 1)
        };
      }
      if (colon > dot) {
        const [address, port] = value.split(":");
        return {
          ipAddress: address,
          port: +port
        };
      } else {
        const [address, port] = value.split(".");
        return {
          ipAddress: `[${address}]`,
          port: +port
        };
      }
    } catch (_2) {
    }
  }
  function isLoadedSecurely(url, timing) {
    try {
      const u2 = new URL(url);
      if (u2.protocol !== "https:" && u2.protocol !== "wss:" && u2.protocol !== "sftp:") return false;
      if (timing.secureConnectionStart === -1 && timing.connectStart !== -1) return false;
      return true;
    } catch (_2) {
    }
  }
  return wkPage;
}
var hasRequiredWkBrowser;
function requireWkBrowser() {
  if (hasRequiredWkBrowser) return wkBrowser;
  hasRequiredWkBrowser = 1;
  Object.defineProperty(wkBrowser, "__esModule", {
    value: true
  });
  wkBrowser.WKBrowserContext = wkBrowser.WKBrowser = void 0;
  var _utils = requireUtils();
  var _browser = requireBrowser$2();
  var _browserContext = requireBrowserContext$1();
  var network2 = _interopRequireWildcard(requireNetwork$1());
  var _wkConnection = requireWkConnection();
  var _wkPage = requireWkPage();
  var _errors = requireErrors$1();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  const DEFAULT_USER_AGENT = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Safari/605.1.15";
  const BROWSER_VERSION = "18.4";
  class WKBrowser extends _browser.Browser {
    static async connect(parent, transport2, options) {
      const browser2 = new WKBrowser(parent, transport2, options);
      if (options.__testHookOnConnectToBrowser) await options.__testHookOnConnectToBrowser();
      const promises = [browser2._browserSession.send("Playwright.enable")];
      if (options.persistent) {
        var _options$persistent;
        (_options$persistent = options.persistent).userAgent || (_options$persistent.userAgent = DEFAULT_USER_AGENT);
        browser2._defaultContext = new WKBrowserContext(browser2, void 0, options.persistent);
        promises.push(browser2._defaultContext._initialize());
      }
      await Promise.all(promises);
      return browser2;
    }
    constructor(parent, transport2, options) {
      super(parent, options);
      this._connection = void 0;
      this._browserSession = void 0;
      this._contexts = /* @__PURE__ */ new Map();
      this._wkPages = /* @__PURE__ */ new Map();
      this._connection = new _wkConnection.WKConnection(transport2, this._onDisconnect.bind(this), options.protocolLogger, options.browserLogsCollector);
      this._browserSession = this._connection.browserSession;
      this._browserSession.on("Playwright.pageProxyCreated", this._onPageProxyCreated.bind(this));
      this._browserSession.on("Playwright.pageProxyDestroyed", this._onPageProxyDestroyed.bind(this));
      this._browserSession.on("Playwright.provisionalLoadFailed", (event) => this._onProvisionalLoadFailed(event));
      this._browserSession.on("Playwright.windowOpen", (event) => this._onWindowOpen(event));
      this._browserSession.on("Playwright.downloadCreated", this._onDownloadCreated.bind(this));
      this._browserSession.on("Playwright.downloadFilenameSuggested", this._onDownloadFilenameSuggested.bind(this));
      this._browserSession.on("Playwright.downloadFinished", this._onDownloadFinished.bind(this));
      this._browserSession.on("Playwright.screencastFinished", this._onScreencastFinished.bind(this));
      this._browserSession.on(_wkConnection.kPageProxyMessageReceived, this._onPageProxyMessageReceived.bind(this));
    }
    _onDisconnect() {
      for (const wkPage2 of this._wkPages.values()) wkPage2.didClose();
      this._wkPages.clear();
      for (const video2 of this._idToVideo.values()) video2.artifact.reportFinished(new _errors.TargetClosedError());
      this._idToVideo.clear();
      this._didClose();
    }
    async doCreateNewContext(options) {
      const proxy = options.proxyOverride || options.proxy;
      const createOptions = proxy ? {
        // Enable socks5 hostname resolution on Windows.
        // See https://github.com/microsoft/playwright/issues/20451
        proxyServer: process.platform === "win32" ? proxy.server.replace(/^socks5:\/\//, "socks5h://") : proxy.server,
        proxyBypassList: proxy.bypass
      } : void 0;
      const {
        browserContextId
      } = await this._browserSession.send("Playwright.createContext", createOptions);
      options.userAgent = options.userAgent || DEFAULT_USER_AGENT;
      const context = new WKBrowserContext(this, browserContextId, options);
      await context._initialize();
      this._contexts.set(browserContextId, context);
      return context;
    }
    contexts() {
      return Array.from(this._contexts.values());
    }
    version() {
      return BROWSER_VERSION;
    }
    userAgent() {
      return DEFAULT_USER_AGENT;
    }
    _onDownloadCreated(payload) {
      const page2 = this._wkPages.get(payload.pageProxyId);
      if (!page2) return;
      page2._page._frameManager.frameAbortedNavigation(payload.frameId, "Download is starting");
      let originPage = page2._page.initializedOrUndefined();
      if (!originPage) {
        page2._firstNonInitialNavigationCommittedReject(new Error("Starting new page download"));
        if (page2._opener) originPage = page2._opener._page.initializedOrUndefined();
      }
      if (!originPage) return;
      this._downloadCreated(originPage, payload.uuid, payload.url);
    }
    _onDownloadFilenameSuggested(payload) {
      this._downloadFilenameSuggested(payload.uuid, payload.suggestedFilename);
    }
    _onDownloadFinished(payload) {
      this._downloadFinished(payload.uuid, payload.error);
    }
    _onScreencastFinished(payload) {
      var _this$_takeVideo;
      (_this$_takeVideo = this._takeVideo(payload.screencastId)) === null || _this$_takeVideo === void 0 || _this$_takeVideo.reportFinished();
    }
    _onPageProxyCreated(event) {
      const pageProxyId = event.pageProxyId;
      let context = null;
      if (event.browserContextId) {
        context = this._contexts.get(event.browserContextId) || null;
      }
      if (!context) context = this._defaultContext;
      if (!context) return;
      const pageProxySession = new _wkConnection.WKSession(this._connection, pageProxyId, (message) => {
        this._connection.rawSend({
          ...message,
          pageProxyId
        });
      });
      const opener = event.openerId ? this._wkPages.get(event.openerId) : void 0;
      const wkPage2 = new _wkPage.WKPage(context, pageProxySession, opener || null);
      this._wkPages.set(pageProxyId, wkPage2);
    }
    _onPageProxyDestroyed(event) {
      const pageProxyId = event.pageProxyId;
      const wkPage2 = this._wkPages.get(pageProxyId);
      if (!wkPage2) return;
      wkPage2.didClose();
      this._wkPages.delete(pageProxyId);
    }
    _onPageProxyMessageReceived(event) {
      const wkPage2 = this._wkPages.get(event.pageProxyId);
      if (!wkPage2) return;
      wkPage2.dispatchMessageToSession(event.message);
    }
    _onProvisionalLoadFailed(event) {
      const wkPage2 = this._wkPages.get(event.pageProxyId);
      if (!wkPage2) return;
      wkPage2.handleProvisionalLoadFailed(event);
    }
    _onWindowOpen(event) {
      const wkPage2 = this._wkPages.get(event.pageProxyId);
      if (!wkPage2) return;
      wkPage2.handleWindowOpen(event);
    }
    isConnected() {
      return !this._connection.isClosed();
    }
  }
  wkBrowser.WKBrowser = WKBrowser;
  class WKBrowserContext extends _browserContext.BrowserContext {
    constructor(browser2, browserContextId, options) {
      super(browser2, options, browserContextId);
      this._validateEmulatedViewport(options.viewport);
      this._authenticateProxyViaHeader();
    }
    async _initialize() {
      (0, _utils.assert)(!this._wkPages().length);
      const browserContextId = this._browserContextId;
      const promises = [super._initialize()];
      promises.push(this._browser._browserSession.send("Playwright.setDownloadBehavior", {
        behavior: this._options.acceptDownloads === "accept" ? "allow" : "deny",
        downloadPath: this._browser.options.downloadsPath,
        browserContextId
      }));
      if (this._options.ignoreHTTPSErrors || this._options.internalIgnoreHTTPSErrors) promises.push(this._browser._browserSession.send("Playwright.setIgnoreCertificateErrors", {
        browserContextId,
        ignore: true
      }));
      if (this._options.locale) promises.push(this._browser._browserSession.send("Playwright.setLanguages", {
        browserContextId,
        languages: [this._options.locale]
      }));
      if (this._options.geolocation) promises.push(this.setGeolocation(this._options.geolocation));
      if (this._options.offline) promises.push(this.setOffline(this._options.offline));
      if (this._options.httpCredentials) promises.push(this.setHTTPCredentials(this._options.httpCredentials));
      await Promise.all(promises);
    }
    _wkPages() {
      return Array.from(this._browser._wkPages.values()).filter((wkPage2) => wkPage2._browserContext === this);
    }
    possiblyUninitializedPages() {
      return this._wkPages().map((wkPage2) => wkPage2._page);
    }
    async doCreateNewPage() {
      (0, _browserContext.assertBrowserContextIsNotOwned)(this);
      const {
        pageProxyId
      } = await this._browser._browserSession.send("Playwright.createPage", {
        browserContextId: this._browserContextId
      });
      return this._browser._wkPages.get(pageProxyId)._page;
    }
    async doGetCookies(urls) {
      const {
        cookies
      } = await this._browser._browserSession.send("Playwright.getAllCookies", {
        browserContextId: this._browserContextId
      });
      return network2.filterCookies(cookies.map((c2) => {
        const copy2 = {
          ...c2
        };
        copy2.expires = c2.expires === -1 ? -1 : c2.expires / 1e3;
        delete copy2.session;
        return copy2;
      }), urls);
    }
    async addCookies(cookies) {
      const cc = network2.rewriteCookies(cookies).map((c2) => ({
        ...c2,
        session: c2.expires === -1 || c2.expires === void 0,
        expires: c2.expires && c2.expires !== -1 ? c2.expires * 1e3 : c2.expires
      }));
      await this._browser._browserSession.send("Playwright.setCookies", {
        cookies: cc,
        browserContextId: this._browserContextId
      });
    }
    async doClearCookies() {
      await this._browser._browserSession.send("Playwright.deleteAllCookies", {
        browserContextId: this._browserContextId
      });
    }
    async doGrantPermissions(origin, permissions) {
      await Promise.all(this.pages().map((page2) => page2._delegate._grantPermissions(origin, permissions)));
    }
    async doClearPermissions() {
      await Promise.all(this.pages().map((page2) => page2._delegate._clearPermissions()));
    }
    async setGeolocation(geolocation) {
      (0, _browserContext.verifyGeolocation)(geolocation);
      this._options.geolocation = geolocation;
      const payload = geolocation ? {
        ...geolocation,
        timestamp: Date.now()
      } : void 0;
      await this._browser._browserSession.send("Playwright.setGeolocationOverride", {
        browserContextId: this._browserContextId,
        geolocation: payload
      });
    }
    async setExtraHTTPHeaders(headers2) {
      this._options.extraHTTPHeaders = headers2;
      for (const page2 of this.pages()) await page2._delegate.updateExtraHTTPHeaders();
    }
    async setUserAgent(userAgent2) {
      this._options.userAgent = userAgent2;
      for (const page2 of this.pages()) await page2._delegate.updateUserAgent();
    }
    async setOffline(offline) {
      this._options.offline = offline;
      for (const page2 of this.pages()) await page2._delegate.updateOffline();
    }
    async doSetHTTPCredentials(httpCredentials) {
      this._options.httpCredentials = httpCredentials;
      for (const page2 of this.pages()) await page2._delegate.updateHttpCredentials();
    }
    async doAddInitScript(initScript) {
      for (const page2 of this.pages()) await page2._delegate._updateBootstrapScript();
    }
    async doRemoveNonInternalInitScripts() {
      for (const page2 of this.pages()) await page2._delegate._updateBootstrapScript();
    }
    async doUpdateRequestInterception() {
      for (const page2 of this.pages()) await page2._delegate.updateRequestInterception();
    }
    onClosePersistent() {
    }
    async clearCache() {
      await this._browser._browserSession.send("Playwright.clearMemoryCache", {
        browserContextId: this._browserContextId
      });
    }
    async doClose(reason) {
      if (!this._browserContextId) {
        await Promise.all(this._wkPages().map((wkPage2) => wkPage2._stopVideo()));
        await this._browser.close({
          reason
        });
      } else {
        await this._browser._browserSession.send("Playwright.deleteContext", {
          browserContextId: this._browserContextId
        });
        this._browser._contexts.delete(this._browserContextId);
      }
    }
    async cancelDownload(uuid2) {
      await this._browser._browserSession.send("Playwright.cancelDownload", {
        uuid: uuid2
      });
    }
    _validateEmulatedViewport(viewportSize) {
      if (!viewportSize) return;
      if (process.platform === "win32" && this._browser.options.headful && (viewportSize.width < 250 || viewportSize.height < 240)) throw new Error(`WebKit on Windows has a minimal viewport of 250x240.`);
    }
  }
  wkBrowser.WKBrowserContext = WKBrowserContext;
  return wkBrowser;
}
var hasRequiredWebkit;
function requireWebkit() {
  if (hasRequiredWebkit) return webkit;
  hasRequiredWebkit = 1;
  Object.defineProperty(webkit, "__esModule", {
    value: true
  });
  webkit.WebKit = void 0;
  var _path2 = _interopRequireDefault(require$$1$1);
  var _wkConnection = requireWkConnection();
  var _ascii = requireAscii();
  var _browserType = requireBrowserType$1();
  var _wkBrowser = requireWkBrowser();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  class WebKit extends _browserType.BrowserType {
    constructor(parent) {
      super(parent, "webkit");
    }
    connectToTransport(transport2, options) {
      return _wkBrowser.WKBrowser.connect(this.attribution.playwright, transport2, options);
    }
    amendEnvironment(env2, userDataDir, executable, browserArguments) {
      return {
        ...env2,
        CURL_COOKIE_JAR_PATH: _path2.default.join(userDataDir, "cookiejar.db")
      };
    }
    doRewriteStartupLog(error) {
      if (!error.logs) return error;
      if (error.logs.includes("Failed to open display") || error.logs.includes("cannot open display")) error.logs = "\n" + (0, _ascii.wrapInASCIIBox)(_browserType.kNoXServerRunningError, 1);
      return error;
    }
    attemptToGracefullyCloseBrowser(transport2) {
      transport2.send({
        method: "Playwright.close",
        params: {},
        id: _wkConnection.kBrowserCloseMessageId
      });
    }
    defaultArgs(options, isPersistent, userDataDir) {
      const {
        args = [],
        headless
      } = options;
      const userDataDirArg = args.find((arg) => arg.startsWith("--user-data-dir"));
      if (userDataDirArg) throw this._createUserDataDirArgMisuseError("--user-data-dir");
      if (args.find((arg) => !arg.startsWith("-"))) throw new Error("Arguments can not specify page to be opened");
      const webkitArguments = ["--inspector-pipe"];
      if (process.platform === "win32") webkitArguments.push("--disable-accelerated-compositing");
      if (headless) webkitArguments.push("--headless");
      if (isPersistent) webkitArguments.push(`--user-data-dir=${userDataDir}`);
      else webkitArguments.push(`--no-startup-window`);
      const proxy = options.proxyOverride || options.proxy;
      if (proxy) {
        if (process.platform === "darwin") {
          webkitArguments.push(`--proxy=${proxy.server}`);
          if (proxy.bypass) webkitArguments.push(`--proxy-bypass-list=${proxy.bypass}`);
        } else if (process.platform === "linux") {
          webkitArguments.push(`--proxy=${proxy.server}`);
          if (proxy.bypass) webkitArguments.push(...proxy.bypass.split(",").map((t) => `--ignore-host=${t}`));
        } else if (process.platform === "win32") {
          webkitArguments.push(`--curl-proxy=${proxy.server.replace(/^socks5:\/\//, "socks5h://")}`);
          if (proxy.bypass) webkitArguments.push(`--curl-noproxy=${proxy.bypass}`);
        }
      }
      webkitArguments.push(...args);
      if (isPersistent) webkitArguments.push("about:blank");
      return webkitArguments;
    }
  }
  webkit.WebKit = WebKit;
  return webkit;
}
var hasRequiredPlaywright$1;
function requirePlaywright$1() {
  if (hasRequiredPlaywright$1) return playwright$2;
  hasRequiredPlaywright$1 = 1;
  Object.defineProperty(playwright$2, "__esModule", {
    value: true
  });
  playwright$2.Playwright = void 0;
  playwright$2.createPlaywright = createPlaywright;
  var _utils = requireUtils();
  var _android = requireAndroid$1();
  var _backendAdb = requireBackendAdb();
  var _bidiChromium = requireBidiChromium();
  var _bidiFirefox = requireBidiFirefox();
  var _chromium = requireChromium();
  var _debugController = requireDebugController();
  var _electron = requireElectron$1();
  var _firefox = requireFirefox();
  var _instrumentation = requireInstrumentation();
  var _selectors = requireSelectors$1();
  var _webkit = requireWebkit();
  class Playwright extends _instrumentation.SdkObject {
    constructor(options) {
      super({
        attribution: {},
        instrumentation: (0, _instrumentation.createInstrumentation)()
      }, void 0, "Playwright");
      this.selectors = void 0;
      this.chromium = void 0;
      this.android = void 0;
      this.electron = void 0;
      this.firefox = void 0;
      this.webkit = void 0;
      this.bidiChromium = void 0;
      this.bidiFirefox = void 0;
      this.options = void 0;
      this.debugController = void 0;
      this._allPages = /* @__PURE__ */ new Set();
      this._allBrowsers = /* @__PURE__ */ new Set();
      this.options = options;
      this.attribution.playwright = this;
      this.instrumentation.addListener({
        onBrowserOpen: (browser2) => this._allBrowsers.add(browser2),
        onBrowserClose: (browser2) => this._allBrowsers.delete(browser2),
        onPageOpen: (page2) => this._allPages.add(page2),
        onPageClose: (page2) => this._allPages.delete(page2),
        onCallLog: (sdkObject, metadata, logName, message) => {
          _utils.debugLogger.log(logName, message);
        }
      }, null);
      this.chromium = new _chromium.Chromium(this);
      this.bidiChromium = new _bidiChromium.BidiChromium(this);
      this.bidiFirefox = new _bidiFirefox.BidiFirefox(this);
      this.firefox = new _firefox.Firefox(this);
      this.webkit = new _webkit.WebKit(this);
      this.electron = new _electron.Electron(this);
      this.android = new _android.Android(this, new _backendAdb.AdbBackend());
      this.selectors = new _selectors.Selectors();
      this.debugController = new _debugController.DebugController(this);
    }
    async hideHighlight() {
      await Promise.all([...this._allPages].map((p) => p.hideHighlight().catch(() => {
      })));
    }
    allBrowsers() {
      return [...this._allBrowsers];
    }
    allPages() {
      return [...this._allPages];
    }
  }
  playwright$2.Playwright = Playwright;
  function createPlaywright(options) {
    return new Playwright(options);
  }
  return playwright$2;
}
var hasRequiredRecorderApp;
function requireRecorderApp() {
  if (hasRequiredRecorderApp) return recorderApp;
  hasRequiredRecorderApp = 1;
  Object.defineProperty(recorderApp, "__esModule", {
    value: true
  });
  recorderApp.RecorderApp = recorderApp.EmptyRecorderApp = void 0;
  var _events = require$$0$4;
  var _fs = _interopRequireDefault(require$$0$2);
  var _path2 = _interopRequireDefault(require$$1$1);
  var _debug = requireDebug$1();
  var _utilsBundle = requireUtilsBundle();
  var _instrumentation = requireInstrumentation();
  var _launchApp = requireLaunchApp();
  var _progress = requireProgress();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  class EmptyRecorderApp extends _events.EventEmitter {
    constructor(...args) {
      super(...args);
      this.wsEndpointForTest = void 0;
    }
    async close() {
    }
    async setPaused(paused) {
    }
    async setMode(mode) {
    }
    async setRunningFile(file2) {
    }
    async elementPicked(elementInfo, userGesture) {
    }
    async updateCallLogs(callLogs) {
    }
    async setSources(sources, primaryPageURL) {
    }
    async setActions(actions, sources) {
    }
  }
  recorderApp.EmptyRecorderApp = EmptyRecorderApp;
  class RecorderApp extends _events.EventEmitter {
    constructor(recorder2, page2, wsEndpoint) {
      super();
      this._page = void 0;
      this.wsEndpointForTest = void 0;
      this._recorder = void 0;
      this.setMaxListeners(0);
      this._recorder = recorder2;
      this._page = page2;
      this.wsEndpointForTest = wsEndpoint;
    }
    async close() {
      await this._page.context().close({
        reason: "Recorder window closed"
      });
    }
    async _init() {
      await (0, _launchApp.syncLocalStorageWithSettings)(this._page, "recorder");
      await this._page._setServerRequestInterceptor((route) => {
        if (!route.request().url().startsWith("https://playwright/")) return false;
        const uri = route.request().url().substring("https://playwright/".length);
        const file2 = require.resolve("../../vite/recorder/" + uri);
        _fs.default.promises.readFile(file2).then((buffer2) => {
          route.fulfill({
            status: 200,
            headers: [{
              name: "Content-Type",
              value: _utilsBundle.mime.getType(_path2.default.extname(file2)) || "application/octet-stream"
            }],
            body: buffer2.toString("base64"),
            isBase64: true
          }).catch(() => {
          });
        });
        return true;
      });
      await this._page.exposeBinding("dispatch", false, (_2, data) => this.emit("event", data));
      this._page.once("close", () => {
        this.emit("close");
        this._page.context().close({
          reason: "Recorder window closed"
        }).catch(() => {
        });
      });
      const mainFrame = this._page.mainFrame();
      await mainFrame.goto((0, _instrumentation.serverSideCallMetadata)(), process.env.PW_HMR ? "http://localhost:44225" : "https://playwright/index.html");
    }
    static factory(context) {
      return async (recorder2) => {
        if (process.env.PW_CODEGEN_NO_INSPECTOR) return new EmptyRecorderApp();
        return await RecorderApp._open(recorder2, context);
      };
    }
    static async _open(recorder2, inspectedContext) {
      const sdkLanguage = inspectedContext.attribution.playwright.options.sdkLanguage;
      const headed = !!inspectedContext._browser.options.headful;
      const recorderPlaywright = requirePlaywright$1().createPlaywright({
        sdkLanguage: "javascript",
        isInternalPlaywright: true
      });
      const {
        context,
        page: page2
      } = await (0, _launchApp.launchApp)(recorderPlaywright.chromium, {
        sdkLanguage,
        windowSize: {
          width: 600,
          height: 600
        },
        windowPosition: {
          x: 1020,
          y: 10
        },
        persistentContextOptions: {
          noDefaultViewport: true,
          headless: !!process.env.PWTEST_CLI_HEADLESS || (0, _debug.isUnderTest)() && !headed,
          useWebSocket: (0, _debug.isUnderTest)(),
          handleSIGINT: recorder2.handleSIGINT,
          executablePath: inspectedContext._browser.options.isChromium ? inspectedContext._browser.options.customExecutablePath : void 0
        }
      });
      const controller = new _progress.ProgressController((0, _instrumentation.serverSideCallMetadata)(), context._browser);
      await controller.run(async (progress2) => {
        await context._browser._defaultContext._loadDefaultContextAsIs(progress2);
      });
      const result = new RecorderApp(recorder2, page2, context._browser.options.wsEndpoint);
      await result._init();
      return result;
    }
    async setMode(mode) {
      await this._page.mainFrame().evaluateExpression(((mode2) => {
        window.playwrightSetMode(mode2);
      }).toString(), {
        isFunction: true
      }, mode).catch(() => {
      });
    }
    async setRunningFile(file2) {
      await this._page.mainFrame().evaluateExpression(((file3) => {
        window.playwrightSetRunningFile(file3);
      }).toString(), {
        isFunction: true
      }, file2).catch(() => {
      });
    }
    async setPaused(paused) {
      await this._page.mainFrame().evaluateExpression(((paused2) => {
        window.playwrightSetPaused(paused2);
      }).toString(), {
        isFunction: true
      }, paused).catch(() => {
      });
    }
    async setSources(sources, primaryPageURL) {
      await this._page.mainFrame().evaluateExpression((({
        sources: sources2,
        primaryPageURL: primaryPageURL2
      }) => {
        window.playwrightSetSources(sources2, primaryPageURL2);
      }).toString(), {
        isFunction: true
      }, {
        sources,
        primaryPageURL
      }).catch(() => {
      });
      if (process.env.PWTEST_CLI_IS_UNDER_TEST && sources.length) {
        if (process._didSetSourcesForTest(sources[0].text)) this.close();
      }
    }
    async setActions(actions, sources) {
    }
    async elementPicked(elementInfo, userGesture) {
      if (userGesture) this._page.bringToFront();
      await this._page.mainFrame().evaluateExpression(((param) => {
        window.playwrightElementPicked(param.elementInfo, param.userGesture);
      }).toString(), {
        isFunction: true
      }, {
        elementInfo,
        userGesture
      }).catch(() => {
      });
    }
    async updateCallLogs(callLogs) {
      await this._page.mainFrame().evaluateExpression(((callLogs2) => {
        window.playwrightUpdateLogs(callLogs2);
      }).toString(), {
        isFunction: true
      }, callLogs).catch(() => {
      });
    }
  }
  recorderApp.RecorderApp = RecorderApp;
  return recorderApp;
}
var storageScript = {};
var hasRequiredStorageScript;
function requireStorageScript() {
  if (hasRequiredStorageScript) return storageScript;
  hasRequiredStorageScript = 1;
  Object.defineProperty(storageScript, "__esModule", {
    value: true
  });
  storageScript.collect = collect;
  storageScript.restore = restore;
  async function collect(serializers2, isFirefox, recordIndexedDB) {
    async function collectDB(dbInfo) {
      if (!dbInfo.name) throw new Error("Database name is empty");
      if (!dbInfo.version) throw new Error("Database version is unset");
      function idbRequestToPromise(request) {
        return new Promise((resolve2, reject) => {
          request.addEventListener("success", () => resolve2(request.result));
          request.addEventListener("error", () => reject(request.error));
        });
      }
      function isPlainObject(v2) {
        const ctor = v2 === null || v2 === void 0 ? void 0 : v2.constructor;
        if (isFirefox) {
          const constructorImpl = ctor === null || ctor === void 0 ? void 0 : ctor.toString();
          if (constructorImpl.startsWith("function Object() {") && constructorImpl.includes("[native code]")) return true;
        }
        return ctor === Object;
      }
      function trySerialize(value) {
        let trivial = true;
        const encoded = serializers2.serializeAsCallArgument(value, (v2) => {
          const isTrivial = isPlainObject(v2) || Array.isArray(v2) || typeof v2 === "string" || typeof v2 === "number" || typeof v2 === "boolean" || Object.is(v2, null);
          if (!isTrivial) trivial = false;
          return {
            fallThrough: v2
          };
        });
        if (trivial) return {
          trivial: value
        };
        return {
          encoded
        };
      }
      const db = await idbRequestToPromise(indexedDB.open(dbInfo.name));
      const transaction = db.transaction(db.objectStoreNames, "readonly");
      const stores = await Promise.all([...db.objectStoreNames].map(async (storeName) => {
        const objectStore = transaction.objectStore(storeName);
        const keys = await idbRequestToPromise(objectStore.getAllKeys());
        const records = await Promise.all(keys.map(async (key) => {
          const record = {};
          if (objectStore.keyPath === null) {
            const {
              encoded: encoded2,
              trivial: trivial2
            } = trySerialize(key);
            if (trivial2) record.key = trivial2;
            else record.keyEncoded = encoded2;
          }
          const value = await idbRequestToPromise(objectStore.get(key));
          const {
            encoded,
            trivial
          } = trySerialize(value);
          if (trivial) record.value = trivial;
          else record.valueEncoded = encoded;
          return record;
        }));
        const indexes = [...objectStore.indexNames].map((indexName) => {
          const index = objectStore.index(indexName);
          return {
            name: index.name,
            keyPath: typeof index.keyPath === "string" ? index.keyPath : void 0,
            keyPathArray: Array.isArray(index.keyPath) ? index.keyPath : void 0,
            multiEntry: index.multiEntry,
            unique: index.unique
          };
        });
        return {
          name: storeName,
          records,
          indexes,
          autoIncrement: objectStore.autoIncrement,
          keyPath: typeof objectStore.keyPath === "string" ? objectStore.keyPath : void 0,
          keyPathArray: Array.isArray(objectStore.keyPath) ? objectStore.keyPath : void 0
        };
      }));
      return {
        name: dbInfo.name,
        version: dbInfo.version,
        stores
      };
    }
    return {
      localStorage: Object.keys(localStorage).map((name) => ({
        name,
        value: localStorage.getItem(name)
      })),
      indexedDB: recordIndexedDB ? await Promise.all((await indexedDB.databases()).map(collectDB)).catch((e2) => {
        throw new Error("Unable to serialize IndexedDB: " + e2.message);
      }) : void 0
    };
  }
  async function restore(originState, serializers2) {
    var _originState$indexedD;
    for (const {
      name,
      value
    } of originState.localStorage || []) localStorage.setItem(name, value);
    await Promise.all(((_originState$indexedD = originState.indexedDB) !== null && _originState$indexedD !== void 0 ? _originState$indexedD : []).map(async (dbInfo) => {
      const openRequest = indexedDB.open(dbInfo.name, dbInfo.version);
      openRequest.addEventListener("upgradeneeded", () => {
        const db2 = openRequest.result;
        for (const store of dbInfo.stores) {
          var _store$keyPathArray;
          const objectStore = db2.createObjectStore(store.name, {
            autoIncrement: store.autoIncrement,
            keyPath: (_store$keyPathArray = store.keyPathArray) !== null && _store$keyPathArray !== void 0 ? _store$keyPathArray : store.keyPath
          });
          for (const index of store.indexes) {
            var _index$keyPathArray;
            objectStore.createIndex(index.name, (_index$keyPathArray = index.keyPathArray) !== null && _index$keyPathArray !== void 0 ? _index$keyPathArray : index.keyPath, {
              unique: index.unique,
              multiEntry: index.multiEntry
            });
          }
        }
      });
      function idbRequestToPromise(request) {
        return new Promise((resolve2, reject) => {
          request.addEventListener("success", () => resolve2(request.result));
          request.addEventListener("error", () => reject(request.error));
        });
      }
      const db = await idbRequestToPromise(openRequest);
      const transaction = db.transaction(db.objectStoreNames, "readwrite");
      await Promise.all(dbInfo.stores.map(async (store) => {
        const objectStore = transaction.objectStore(store.name);
        await Promise.all(store.records.map(async (record) => {
          var _record$value, _record$key;
          await idbRequestToPromise(objectStore.add((_record$value = record.value) !== null && _record$value !== void 0 ? _record$value : serializers2.parseEvaluationResultValue(record.valueEncoded), (_record$key = record.key) !== null && _record$key !== void 0 ? _record$key : serializers2.parseEvaluationResultValue(record.keyEncoded)));
        }));
      }));
    })).catch((e2) => {
      throw new Error("Unable to restore IndexedDB: " + e2.message);
    });
  }
  return storageScript;
}
var tracing$1 = {};
var snapshotter = {};
var snapshotterInjected = {};
var hasRequiredSnapshotterInjected;
function requireSnapshotterInjected() {
  if (hasRequiredSnapshotterInjected) return snapshotterInjected;
  hasRequiredSnapshotterInjected = 1;
  Object.defineProperty(snapshotterInjected, "__esModule", {
    value: true
  });
  snapshotterInjected.frameSnapshotStreamer = frameSnapshotStreamer;
  function frameSnapshotStreamer(snapshotStreamer, removeNoScript) {
    if (window[snapshotStreamer]) return;
    const kShadowAttribute = "__playwright_shadow_root_";
    const kValueAttribute = "__playwright_value_";
    const kCheckedAttribute = "__playwright_checked_";
    const kSelectedAttribute = "__playwright_selected_";
    const kScrollTopAttribute = "__playwright_scroll_top_";
    const kScrollLeftAttribute = "__playwright_scroll_left_";
    const kStyleSheetAttribute = "__playwright_style_sheet_";
    const kTargetAttribute = "__playwright_target__";
    const kCustomElementsAttribute = "__playwright_custom_elements__";
    const kCurrentSrcAttribute = "__playwright_current_src__";
    const kBoundingRectAttribute = "__playwright_bounding_rect__";
    const kPopoverOpenAttribute = "__playwright_popover_open_";
    const kSnapshotFrameId = Symbol("__playwright_snapshot_frameid_");
    const kCachedData = Symbol("__playwright_snapshot_cache_");
    const kEndOfList = Symbol("__playwright_end_of_list_");
    function resetCachedData(obj) {
      delete obj[kCachedData];
    }
    function ensureCachedData(obj) {
      if (!obj[kCachedData]) obj[kCachedData] = {};
      return obj[kCachedData];
    }
    function removeHash(url) {
      try {
        const u2 = new URL(url);
        u2.hash = "";
        return u2.toString();
      } catch (e2) {
        return url;
      }
    }
    class Streamer {
      constructor() {
        this._lastSnapshotNumber = 0;
        this._staleStyleSheets = /* @__PURE__ */ new Set();
        this._readingStyleSheet = false;
        this._fakeBase = void 0;
        this._observer = void 0;
        const invalidateCSSGroupingRule = (rule) => {
          if (rule.parentStyleSheet) this._invalidateStyleSheet(rule.parentStyleSheet);
        };
        this._interceptNativeMethod(window.CSSStyleSheet.prototype, "insertRule", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeMethod(window.CSSStyleSheet.prototype, "deleteRule", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeMethod(window.CSSStyleSheet.prototype, "addRule", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeMethod(window.CSSStyleSheet.prototype, "removeRule", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeGetter(window.CSSStyleSheet.prototype, "rules", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeGetter(window.CSSStyleSheet.prototype, "cssRules", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeMethod(window.CSSStyleSheet.prototype, "replaceSync", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeMethod(window.CSSGroupingRule.prototype, "insertRule", invalidateCSSGroupingRule);
        this._interceptNativeMethod(window.CSSGroupingRule.prototype, "deleteRule", invalidateCSSGroupingRule);
        this._interceptNativeGetter(window.CSSGroupingRule.prototype, "cssRules", invalidateCSSGroupingRule);
        this._interceptNativeAsyncMethod(window.CSSStyleSheet.prototype, "replace", (sheet) => this._invalidateStyleSheet(sheet));
        this._fakeBase = document.createElement("base");
        this._observer = new MutationObserver((list) => this._handleMutations(list));
        const observerConfig = {
          attributes: true,
          subtree: true
        };
        this._observer.observe(document, observerConfig);
        this._refreshListenersWhenNeeded();
      }
      _refreshListenersWhenNeeded() {
        this._refreshListeners();
        const customEventName = "__playwright_snapshotter_global_listeners_check__";
        let seenEvent = false;
        const handleCustomEvent = () => seenEvent = true;
        window.addEventListener(customEventName, handleCustomEvent);
        const observer = new MutationObserver((entries) => {
          const newDocumentElement = entries.some((entry) => Array.from(entry.addedNodes).includes(document.documentElement));
          if (newDocumentElement) {
            seenEvent = false;
            window.dispatchEvent(new CustomEvent(customEventName));
            if (!seenEvent) {
              window.addEventListener(customEventName, handleCustomEvent);
              this._refreshListeners();
            }
          }
        });
        observer.observe(document, {
          childList: true
        });
      }
      _refreshListeners() {
        document.addEventListener("__playwright_mark_target__", (event) => {
          if (!event.detail) return;
          const callId = event.detail;
          event.composedPath()[0].__playwright_target__ = callId;
        });
        document.addEventListener("__playwright_unmark_target__", (event) => {
          if (!event.detail) return;
          const callId = event.detail;
          if (event.composedPath()[0].__playwright_target__ === callId) delete event.composedPath()[0].__playwright_target__;
        });
      }
      _interceptNativeMethod(obj, method, cb) {
        const native = obj[method];
        if (!native) return;
        obj[method] = function(...args) {
          const result = native.call(this, ...args);
          cb(this, result);
          return result;
        };
      }
      _interceptNativeAsyncMethod(obj, method, cb) {
        const native = obj[method];
        if (!native) return;
        obj[method] = async function(...args) {
          const result = await native.call(this, ...args);
          cb(this, result);
          return result;
        };
      }
      _interceptNativeGetter(obj, prop, cb) {
        const descriptor = Object.getOwnPropertyDescriptor(obj, prop);
        Object.defineProperty(obj, prop, {
          ...descriptor,
          get: function() {
            const result = descriptor.get.call(this);
            cb(this, result);
            return result;
          }
        });
      }
      _handleMutations(list) {
        for (const mutation of list) ensureCachedData(mutation.target).attributesCached = void 0;
      }
      _invalidateStyleSheet(sheet) {
        if (this._readingStyleSheet) return;
        this._staleStyleSheets.add(sheet);
      }
      _updateStyleElementStyleSheetTextIfNeeded(sheet, forceText) {
        const data = ensureCachedData(sheet);
        if (this._staleStyleSheets.has(sheet) || forceText && data.cssText === void 0) {
          this._staleStyleSheets.delete(sheet);
          try {
            data.cssText = this._getSheetText(sheet);
          } catch (e2) {
            data.cssText = "";
          }
        }
        return data.cssText;
      }
      // Returns either content, ref, or no override.
      _updateLinkStyleSheetTextIfNeeded(sheet, snapshotNumber) {
        const data = ensureCachedData(sheet);
        if (this._staleStyleSheets.has(sheet)) {
          this._staleStyleSheets.delete(sheet);
          try {
            data.cssText = this._getSheetText(sheet);
            data.cssRef = snapshotNumber;
            return data.cssText;
          } catch (e2) {
          }
        }
        return data.cssRef === void 0 ? void 0 : snapshotNumber - data.cssRef;
      }
      markIframe(iframeElement, frameId) {
        iframeElement[kSnapshotFrameId] = frameId;
      }
      reset() {
        this._staleStyleSheets.clear();
        const visitNode = (node) => {
          resetCachedData(node);
          if (node.nodeType === Node.ELEMENT_NODE) {
            const element = node;
            if (element.shadowRoot) visitNode(element.shadowRoot);
          }
          for (let child = node.firstChild; child; child = child.nextSibling) visitNode(child);
        };
        visitNode(document.documentElement);
        visitNode(this._fakeBase);
      }
      __sanitizeMetaAttribute(name, value, httpEquiv) {
        if (name === "charset") return "utf-8";
        if (httpEquiv.toLowerCase() !== "content-type" || name !== "content") return value;
        const [type, ...params] = value.split(";");
        if (type !== "text/html" || params.length <= 0) return value;
        const charsetParamIdx = params.findIndex((param) => param.trim().startsWith("charset="));
        if (charsetParamIdx > -1) params[charsetParamIdx] = "charset=utf-8";
        return `${type}; ${params.join("; ")}`;
      }
      _sanitizeUrl(url) {
        if (url.startsWith("javascript:") || url.startsWith("vbscript:")) return "";
        return url;
      }
      _sanitizeSrcSet(srcset) {
        return srcset.split(",").map((src2) => {
          src2 = src2.trim();
          const spaceIndex = src2.lastIndexOf(" ");
          if (spaceIndex === -1) return this._sanitizeUrl(src2);
          return this._sanitizeUrl(src2.substring(0, spaceIndex).trim()) + src2.substring(spaceIndex);
        }).join(", ");
      }
      _resolveUrl(base, url) {
        if (url === "") return "";
        try {
          return new URL(url, base).href;
        } catch (e2) {
          return url;
        }
      }
      _getSheetBase(sheet) {
        let rootSheet = sheet;
        while (rootSheet.parentStyleSheet) rootSheet = rootSheet.parentStyleSheet;
        if (rootSheet.ownerNode) return rootSheet.ownerNode.baseURI;
        return document.baseURI;
      }
      _getSheetText(sheet) {
        this._readingStyleSheet = true;
        try {
          const rules = [];
          for (const rule of sheet.cssRules) rules.push(rule.cssText);
          return rules.join("\n");
        } finally {
          this._readingStyleSheet = false;
        }
      }
      captureSnapshot() {
        const timestamp = performance.now();
        const snapshotNumber = ++this._lastSnapshotNumber;
        let nodeCounter = 0;
        let shadowDomNesting = 0;
        let headNesting = 0;
        this._handleMutations(this._observer.takeRecords());
        const definedCustomElements = /* @__PURE__ */ new Set();
        const visitNode = (node) => {
          const nodeType = node.nodeType;
          const nodeName = nodeType === Node.DOCUMENT_FRAGMENT_NODE ? "template" : node.nodeName;
          if (nodeType !== Node.ELEMENT_NODE && nodeType !== Node.DOCUMENT_FRAGMENT_NODE && nodeType !== Node.TEXT_NODE) return;
          if (nodeName === "SCRIPT") return;
          if (nodeName === "LINK" && nodeType === Node.ELEMENT_NODE) {
            var _getAttribute;
            const rel = (_getAttribute = node.getAttribute("rel")) === null || _getAttribute === void 0 ? void 0 : _getAttribute.toLowerCase();
            if (rel === "preload" || rel === "prefetch") return;
          }
          if (removeNoScript && nodeName === "NOSCRIPT") return;
          if (nodeName === "META" && node.httpEquiv.toLowerCase() === "content-security-policy") return;
          if ((nodeName === "IFRAME" || nodeName === "FRAME") && headNesting) return;
          const data = ensureCachedData(node);
          const values = [];
          let equals = !!data.cached;
          let extraNodes = 0;
          const expectValue = (value) => {
            equals = equals && data.cached[values.length] === value;
            values.push(value);
          };
          const checkAndReturn = (n) => {
            data.attributesCached = true;
            if (equals) return {
              equals: true,
              n: [[snapshotNumber - data.ref[0], data.ref[1]]]
            };
            nodeCounter += extraNodes;
            data.ref = [snapshotNumber, nodeCounter++];
            data.cached = values;
            return {
              equals: false,
              n
            };
          };
          if (nodeType === Node.TEXT_NODE) {
            const value = node.nodeValue || "";
            expectValue(value);
            return checkAndReturn(value);
          }
          if (nodeName === "STYLE") {
            const sheet = node.sheet;
            let cssText;
            if (sheet) cssText = this._updateStyleElementStyleSheetTextIfNeeded(sheet);
            cssText = cssText || node.textContent || "";
            expectValue(cssText);
            extraNodes++;
            return checkAndReturn([nodeName, {}, cssText]);
          }
          const attrs = {};
          const result2 = [nodeName, attrs];
          const visitChild = (child) => {
            const snapshot = visitNode(child);
            if (snapshot) {
              result2.push(snapshot.n);
              expectValue(child);
              equals = equals && snapshot.equals;
            }
          };
          const visitChildStyleSheet = (child) => {
            const snapshot = visitStyleSheet(child);
            if (snapshot) {
              result2.push(snapshot.n);
              expectValue(child);
              equals = equals && snapshot.equals;
            }
          };
          if (nodeType === Node.DOCUMENT_FRAGMENT_NODE) attrs[kShadowAttribute] = "open";
          if (nodeType === Node.ELEMENT_NODE) {
            var _window$customElement;
            const element = node;
            if (element.localName.includes("-") && (_window$customElement = window.customElements) !== null && _window$customElement !== void 0 && _window$customElement.get(element.localName)) definedCustomElements.add(element.localName);
            if (nodeName === "INPUT" || nodeName === "TEXTAREA") {
              const value = element.value;
              expectValue(kValueAttribute);
              expectValue(value);
              attrs[kValueAttribute] = value;
            }
            if (nodeName === "INPUT" && ["checkbox", "radio"].includes(element.type)) {
              const value = element.checked ? "true" : "false";
              expectValue(kCheckedAttribute);
              expectValue(value);
              attrs[kCheckedAttribute] = value;
            }
            if (nodeName === "OPTION") {
              const value = element.selected ? "true" : "false";
              expectValue(kSelectedAttribute);
              expectValue(value);
              attrs[kSelectedAttribute] = value;
            }
            if (nodeName === "CANVAS" || nodeName === "IFRAME" || nodeName === "FRAME") {
              const boundingRect = element.getBoundingClientRect();
              const value = JSON.stringify({
                left: boundingRect.left,
                top: boundingRect.top,
                right: boundingRect.right,
                bottom: boundingRect.bottom
              });
              expectValue(kBoundingRectAttribute);
              expectValue(value);
              attrs[kBoundingRectAttribute] = value;
            }
            if (element.popover && element.matches && element.matches(":popover-open")) {
              const value = "true";
              expectValue(kPopoverOpenAttribute);
              expectValue(value);
              attrs[kPopoverOpenAttribute] = value;
            }
            if (element.scrollTop) {
              expectValue(kScrollTopAttribute);
              expectValue(element.scrollTop);
              attrs[kScrollTopAttribute] = "" + element.scrollTop;
            }
            if (element.scrollLeft) {
              expectValue(kScrollLeftAttribute);
              expectValue(element.scrollLeft);
              attrs[kScrollLeftAttribute] = "" + element.scrollLeft;
            }
            if (element.shadowRoot) {
              ++shadowDomNesting;
              visitChild(element.shadowRoot);
              --shadowDomNesting;
            }
            if ("__playwright_target__" in element) {
              expectValue(kTargetAttribute);
              expectValue(element["__playwright_target__"]);
              attrs[kTargetAttribute] = element["__playwright_target__"];
            }
          }
          if (nodeName === "HEAD") {
            ++headNesting;
            this._fakeBase.setAttribute("href", document.baseURI);
            visitChild(this._fakeBase);
          }
          for (let child = node.firstChild; child; child = child.nextSibling) visitChild(child);
          if (nodeName === "HEAD") --headNesting;
          expectValue(kEndOfList);
          let documentOrShadowRoot = null;
          if (node.ownerDocument.documentElement === node) documentOrShadowRoot = node.ownerDocument;
          else if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) documentOrShadowRoot = node;
          if (documentOrShadowRoot) {
            for (const sheet of documentOrShadowRoot.adoptedStyleSheets || []) visitChildStyleSheet(sheet);
            expectValue(kEndOfList);
          }
          if (nodeName === "IFRAME" || nodeName === "FRAME") {
            const element = node;
            const frameId = element[kSnapshotFrameId];
            const name = "src";
            const value = frameId ? `/snapshot/${frameId}` : "";
            expectValue(name);
            expectValue(value);
            attrs[name] = value;
          }
          if (nodeName === "BODY" && definedCustomElements.size) {
            const value = [...definedCustomElements].join(",");
            expectValue(kCustomElementsAttribute);
            expectValue(value);
            attrs[kCustomElementsAttribute] = value;
          }
          if (nodeName === "IMG" || nodeName === "PICTURE") {
            const value = nodeName === "PICTURE" ? "" : this._sanitizeUrl(node.currentSrc);
            expectValue(kCurrentSrcAttribute);
            expectValue(value);
            attrs[kCurrentSrcAttribute] = value;
          }
          if (equals && data.attributesCached && !shadowDomNesting) return checkAndReturn(result2);
          if (nodeType === Node.ELEMENT_NODE) {
            const element = node;
            for (let i = 0; i < element.attributes.length; i++) {
              const name = element.attributes[i].name;
              if (nodeName === "LINK" && name === "integrity") continue;
              if (nodeName === "IFRAME" && (name === "src" || name === "srcdoc" || name === "sandbox")) continue;
              if (nodeName === "FRAME" && name === "src") continue;
              let value = element.attributes[i].value;
              if (nodeName === "META") value = this.__sanitizeMetaAttribute(name, value, node.httpEquiv);
              else if (name === "src" && nodeName === "IMG") value = this._sanitizeUrl(value);
              else if (name === "srcset" && nodeName === "IMG") value = this._sanitizeSrcSet(value);
              else if (name === "srcset" && nodeName === "SOURCE") value = this._sanitizeSrcSet(value);
              else if (name === "href" && nodeName === "LINK") value = this._sanitizeUrl(value);
              else if (name.startsWith("on")) value = "";
              expectValue(name);
              expectValue(value);
              attrs[name] = value;
            }
            expectValue(kEndOfList);
          }
          if (result2.length === 2 && !Object.keys(attrs).length) result2.pop();
          return checkAndReturn(result2);
        };
        const visitStyleSheet = (sheet) => {
          const data = ensureCachedData(sheet);
          const oldCSSText = data.cssText;
          const cssText = this._updateStyleElementStyleSheetTextIfNeeded(
            sheet,
            true
            /* forceText */
          );
          if (cssText === oldCSSText) return {
            equals: true,
            n: [[snapshotNumber - data.ref[0], data.ref[1]]]
          };
          data.ref = [snapshotNumber, nodeCounter++];
          return {
            equals: false,
            n: ["template", {
              [kStyleSheetAttribute]: cssText
            }]
          };
        };
        let html;
        if (document.documentElement) {
          const {
            n
          } = visitNode(document.documentElement);
          html = n;
        } else {
          html = ["html"];
        }
        const result = {
          html,
          doctype: document.doctype ? document.doctype.name : void 0,
          resourceOverrides: [],
          viewport: {
            width: window.innerWidth,
            height: window.innerHeight
          },
          url: location.href,
          wallTime: Date.now(),
          collectionTime: 0
        };
        for (const sheet of this._staleStyleSheets) {
          if (sheet.href === null) continue;
          const content = this._updateLinkStyleSheetTextIfNeeded(sheet, snapshotNumber);
          if (content === void 0) {
            continue;
          }
          const base = this._getSheetBase(sheet);
          const url = removeHash(this._resolveUrl(base, sheet.href));
          result.resourceOverrides.push({
            url,
            content,
            contentType: "text/css"
          });
        }
        result.collectionTime = performance.now() - timestamp;
        return result;
      }
    }
    window[snapshotStreamer] = new Streamer();
  }
  return snapshotterInjected;
}
var hasRequiredSnapshotter;
function requireSnapshotter() {
  if (hasRequiredSnapshotter) return snapshotter;
  hasRequiredSnapshotter = 1;
  Object.defineProperty(snapshotter, "__esModule", {
    value: true
  });
  snapshotter.Snapshotter = void 0;
  var _snapshotterInjected = requireSnapshotterInjected();
  var _time = requireTime$1();
  var _crypto = requireCrypto();
  var _debugLogger = requireDebugLogger();
  var _eventsHelper = requireEventsHelper();
  var _utilsBundle = requireUtilsBundle();
  var _browserContext = requireBrowserContext$1();
  var _page = requirePage$1();
  class Snapshotter {
    constructor(context, delegate) {
      this._context = void 0;
      this._delegate = void 0;
      this._eventListeners = [];
      this._snapshotStreamer = void 0;
      this._initialized = false;
      this._started = false;
      this._context = context;
      this._delegate = delegate;
      const guid = (0, _crypto.createGuid)();
      this._snapshotStreamer = "__playwright_snapshot_streamer_" + guid;
    }
    started() {
      return this._started;
    }
    async start() {
      this._started = true;
      if (!this._initialized) {
        this._initialized = true;
        await this._initialize();
      }
      await this.reset();
    }
    async reset() {
      if (this._started) await this._runInAllFrames(`window["${this._snapshotStreamer}"].reset()`);
    }
    async stop() {
      this._started = false;
    }
    resetForReuse() {
      this._initialized = false;
    }
    async _initialize() {
      for (const page2 of this._context.pages()) this._onPage(page2);
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.Page, this._onPage.bind(this))];
      const {
        javaScriptEnabled
      } = this._context._options;
      const initScript = `(${_snapshotterInjected.frameSnapshotStreamer})("${this._snapshotStreamer}", ${javaScriptEnabled || javaScriptEnabled === void 0})`;
      await this._context.addInitScript(initScript);
      await this._runInAllFrames(initScript);
    }
    async _runInAllFrames(expression) {
      const frames2 = [];
      for (const page2 of this._context.pages()) frames2.push(...page2.frames());
      await Promise.all(frames2.map((frame2) => {
        return frame2.nonStallingRawEvaluateInExistingMainContext(expression).catch((e2) => _debugLogger.debugLogger.log("error", e2));
      }));
    }
    dispose() {
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
    }
    async captureSnapshot(page2, callId, snapshotName) {
      const expression = `window["${this._snapshotStreamer}"].captureSnapshot(${JSON.stringify(snapshotName)})`;
      const snapshots = page2.frames().map(async (frame2) => {
        const data = await frame2.nonStallingRawEvaluateInExistingMainContext(expression).catch((e2) => _debugLogger.debugLogger.log("error", e2));
        if (!data || !this._started) return;
        const snapshot = {
          callId,
          snapshotName,
          pageId: page2.guid,
          frameId: frame2.guid,
          frameUrl: data.url,
          doctype: data.doctype,
          html: data.html,
          viewport: data.viewport,
          timestamp: (0, _time.monotonicTime)(),
          wallTime: data.wallTime,
          collectionTime: data.collectionTime,
          resourceOverrides: [],
          isMainFrame: page2.mainFrame() === frame2
        };
        for (const {
          url,
          content,
          contentType
        } of data.resourceOverrides) {
          if (typeof content === "string") {
            const buffer2 = Buffer.from(content);
            const sha1 = (0, _crypto.calculateSha1)(buffer2) + "." + (_utilsBundle.mime.getExtension(contentType) || "dat");
            this._delegate.onSnapshotterBlob({
              sha1,
              buffer: buffer2
            });
            snapshot.resourceOverrides.push({
              url,
              sha1
            });
          } else {
            snapshot.resourceOverrides.push({
              url,
              ref: content
            });
          }
        }
        this._delegate.onFrameSnapshot(snapshot);
      });
      await Promise.all(snapshots);
    }
    _onPage(page2) {
      for (const frame2 of page2.frames()) this._annotateFrameHierarchy(frame2);
      this._eventListeners.push(_eventsHelper.eventsHelper.addEventListener(page2, _page.Page.Events.FrameAttached, (frame2) => this._annotateFrameHierarchy(frame2)));
    }
    async _annotateFrameHierarchy(frame2) {
      try {
        const frameElement = await frame2.frameElement();
        const parent = frame2.parentFrame();
        if (!parent) return;
        const context = await parent._mainContext();
        await (context === null || context === void 0 ? void 0 : context.evaluate(({
          snapshotStreamer,
          frameElement: frameElement2,
          frameId
        }) => {
          window[snapshotStreamer].markIframe(frameElement2, frameId);
        }, {
          snapshotStreamer: this._snapshotStreamer,
          frameElement,
          frameId: frame2.guid
        }));
        frameElement.dispose();
      } catch (e2) {
      }
    }
  }
  snapshotter.Snapshotter = Snapshotter;
  return snapshotter;
}
var hasRequiredTracing$1;
function requireTracing$1() {
  if (hasRequiredTracing$1) return tracing$1;
  hasRequiredTracing$1 = 1;
  Object.defineProperty(tracing$1, "__esModule", {
    value: true
  });
  tracing$1.Tracing = void 0;
  tracing$1.shouldCaptureSnapshot = shouldCaptureSnapshot;
  var _fs = _interopRequireDefault(require$$0$2);
  var _os = _interopRequireDefault(require$$1$3);
  var _path2 = _interopRequireDefault(require$$1$1);
  var _snapshotter = requireSnapshotter();
  var _debug = requireDebug();
  var _assert = requireAssert$1();
  var _time = requireTime$1();
  var _eventsHelper = requireEventsHelper();
  var _crypto = requireCrypto();
  var _artifact = requireArtifact$1();
  var _browserContext = requireBrowserContext$1();
  var _dispatcher = requireDispatcher();
  var _errors = requireErrors$1();
  var _fileUtils = requireFileUtils$1();
  var _harTracer = requireHarTracer();
  var _instrumentation = requireInstrumentation();
  var _page = requirePage$1();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  const version2 = 7;
  const kScreencastOptions = {
    width: 800,
    height: 600,
    quality: 90
  };
  class Tracing extends _instrumentation.SdkObject {
    constructor(context, tracesDir) {
      super(context, "tracing");
      this._fs = new _fileUtils.SerializedFS();
      this._snapshotter = void 0;
      this._harTracer = void 0;
      this._screencastListeners = [];
      this._eventListeners = [];
      this._context = void 0;
      this._state = void 0;
      this._isStopping = false;
      this._precreatedTracesDir = void 0;
      this._tracesTmpDir = void 0;
      this._allResources = /* @__PURE__ */ new Set();
      this._contextCreatedEvent = void 0;
      this._pendingHarEntries = /* @__PURE__ */ new Set();
      this._context = context;
      this._precreatedTracesDir = tracesDir;
      this._harTracer = new _harTracer.HarTracer(context, null, this, {
        content: "attach",
        includeTraceInfo: true,
        recordRequestOverrides: false,
        waitForContentOnStop: false
      });
      const testIdAttributeName = "selectors" in context ? context.selectors().testIdAttributeName() : void 0;
      this._contextCreatedEvent = {
        version: version2,
        type: "context-options",
        origin: "library",
        browserName: "",
        options: {},
        platform: process.platform,
        wallTime: 0,
        monotonicTime: 0,
        sdkLanguage: context.attribution.playwright.options.sdkLanguage,
        testIdAttributeName,
        contextId: context.guid
      };
      if (context instanceof _browserContext.BrowserContext) {
        this._snapshotter = new _snapshotter.Snapshotter(context, this);
        (0, _assert.assert)(tracesDir, "tracesDir must be specified for BrowserContext");
        this._contextCreatedEvent.browserName = context._browser.options.name;
        this._contextCreatedEvent.channel = context._browser.options.channel;
        this._contextCreatedEvent.options = context._options;
      }
    }
    async resetForReuse() {
      var _this$_snapshotter;
      await this.stopChunk({
        mode: "discard"
      }).catch(() => {
      });
      await this.stop();
      (_this$_snapshotter = this._snapshotter) === null || _this$_snapshotter === void 0 || _this$_snapshotter.resetForReuse();
    }
    async start(options) {
      if (this._isStopping) throw new Error("Cannot start tracing while stopping");
      if (this._state) throw new Error("Tracing has been already started");
      this._contextCreatedEvent.sdkLanguage = this._context.attribution.playwright.options.sdkLanguage;
      const traceName = options.name || (0, _crypto.createGuid)();
      const tracesDir = this._createTracesDirIfNeeded();
      this._state = {
        options,
        traceName,
        tracesDir,
        traceFile: _path2.default.join(tracesDir, traceName + ".trace"),
        networkFile: _path2.default.join(tracesDir, traceName + ".network"),
        resourcesDir: _path2.default.join(tracesDir, "resources"),
        chunkOrdinal: 0,
        traceSha1s: /* @__PURE__ */ new Set(),
        networkSha1s: /* @__PURE__ */ new Set(),
        recording: false,
        callIds: /* @__PURE__ */ new Set(),
        groupStack: []
      };
      this._fs.mkdir(this._state.resourcesDir);
      this._fs.writeFile(this._state.networkFile, "");
      if (options.snapshots) this._harTracer.start({
        omitScripts: !options.live
      });
    }
    async startChunk(options = {}) {
      var _this$_snapshotter2;
      if (this._state && this._state.recording) await this.stopChunk({
        mode: "discard"
      });
      if (!this._state) throw new Error("Must start tracing before starting a new chunk");
      if (this._isStopping) throw new Error("Cannot start a trace chunk while stopping");
      this._state.recording = true;
      this._state.callIds.clear();
      const preserveNetworkResources = this._context instanceof _browserContext.BrowserContext;
      if (options.name && options.name !== this._state.traceName) this._changeTraceName(this._state, options.name, preserveNetworkResources);
      else this._allocateNewTraceFile(this._state);
      if (!preserveNetworkResources) this._fs.writeFile(this._state.networkFile, "");
      this._fs.mkdir(_path2.default.dirname(this._state.traceFile));
      const event = {
        ...this._contextCreatedEvent,
        title: options.title,
        wallTime: Date.now(),
        monotonicTime: (0, _time.monotonicTime)()
      };
      this._appendTraceEvent(event);
      this._context.instrumentation.addListener(this, this._context);
      this._eventListeners.push(_eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.Console, this._onConsoleMessage.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.PageError, this._onPageError.bind(this)));
      if (this._state.options.screenshots) this._startScreencast();
      if (this._state.options.snapshots) await ((_this$_snapshotter2 = this._snapshotter) === null || _this$_snapshotter2 === void 0 ? void 0 : _this$_snapshotter2.start());
      return {
        traceName: this._state.traceName
      };
    }
    _currentGroupId() {
      var _this$_state;
      return (_this$_state = this._state) !== null && _this$_state !== void 0 && _this$_state.groupStack.length ? this._state.groupStack[this._state.groupStack.length - 1] : void 0;
    }
    async group(name, location2, metadata) {
      var _ref;
      if (!this._state) return;
      const stackFrames = [];
      const {
        file: file2,
        line,
        column
      } = (_ref = location2 !== null && location2 !== void 0 ? location2 : metadata.location) !== null && _ref !== void 0 ? _ref : {};
      if (file2) {
        stackFrames.push({
          file: file2,
          line: line !== null && line !== void 0 ? line : 0,
          column: column !== null && column !== void 0 ? column : 0
        });
      }
      const event = {
        type: "before",
        callId: metadata.id,
        startTime: metadata.startTime,
        apiName: name,
        class: "Tracing",
        method: "tracingGroup",
        params: {},
        stepId: metadata.stepId,
        stack: stackFrames
      };
      if (this._currentGroupId()) event.parentId = this._currentGroupId();
      this._state.groupStack.push(event.callId);
      this._appendTraceEvent(event);
    }
    groupEnd() {
      if (!this._state) return;
      const callId = this._state.groupStack.pop();
      if (!callId) return;
      const event = {
        type: "after",
        callId,
        endTime: (0, _time.monotonicTime)()
      };
      this._appendTraceEvent(event);
    }
    _startScreencast() {
      if (!(this._context instanceof _browserContext.BrowserContext)) return;
      for (const page2 of this._context.pages()) this._startScreencastInPage(page2);
      this._screencastListeners.push(_eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.Page, this._startScreencastInPage.bind(this)));
    }
    _stopScreencast() {
      _eventsHelper.eventsHelper.removeEventListeners(this._screencastListeners);
      if (!(this._context instanceof _browserContext.BrowserContext)) return;
      for (const page2 of this._context.pages()) page2.setScreencastOptions(null);
    }
    _allocateNewTraceFile(state) {
      const suffix = state.chunkOrdinal ? `-chunk${state.chunkOrdinal}` : ``;
      state.chunkOrdinal++;
      state.traceFile = _path2.default.join(state.tracesDir, `${state.traceName}${suffix}.trace`);
    }
    _changeTraceName(state, name, preserveNetworkResources) {
      state.traceName = name;
      state.chunkOrdinal = 0;
      this._allocateNewTraceFile(state);
      const newNetworkFile = _path2.default.join(state.tracesDir, name + ".network");
      if (preserveNetworkResources) this._fs.copyFile(state.networkFile, newNetworkFile);
      state.networkFile = newNetworkFile;
    }
    async stop() {
      if (!this._state) return;
      if (this._isStopping) throw new Error(`Tracing is already stopping`);
      if (this._state.recording) throw new Error(`Must stop trace file before stopping tracing`);
      this._closeAllGroups();
      this._harTracer.stop();
      this.flushHarEntries();
      await this._fs.syncAndGetError();
      this._state = void 0;
    }
    async deleteTmpTracesDir() {
      if (this._tracesTmpDir) await (0, _fileUtils.removeFolders)([this._tracesTmpDir]);
    }
    _createTracesDirIfNeeded() {
      if (this._precreatedTracesDir) return this._precreatedTracesDir;
      this._tracesTmpDir = _fs.default.mkdtempSync(_path2.default.join(_os.default.tmpdir(), "playwright-tracing-"));
      return this._tracesTmpDir;
    }
    abort() {
      var _this$_snapshotter3;
      (_this$_snapshotter3 = this._snapshotter) === null || _this$_snapshotter3 === void 0 || _this$_snapshotter3.dispose();
      this._harTracer.stop();
    }
    async flush() {
      this.abort();
      await this._fs.syncAndGetError();
    }
    _closeAllGroups() {
      while (this._currentGroupId()) this.groupEnd();
    }
    async stopChunk(params) {
      var _this$_snapshotter4;
      if (this._isStopping) throw new Error(`Tracing is already stopping`);
      this._isStopping = true;
      if (!this._state || !this._state.recording) {
        this._isStopping = false;
        if (params.mode !== "discard") throw new Error(`Must start tracing before stopping`);
        return {};
      }
      this._closeAllGroups();
      this._context.instrumentation.removeListener(this);
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      if (this._state.options.screenshots) this._stopScreencast();
      if (this._state.options.snapshots) await ((_this$_snapshotter4 = this._snapshotter) === null || _this$_snapshotter4 === void 0 ? void 0 : _this$_snapshotter4.stop());
      this.flushHarEntries();
      const newNetworkFile = _path2.default.join(this._state.tracesDir, this._state.traceName + `-pwnetcopy-${this._state.chunkOrdinal}.network`);
      const entries = [];
      entries.push({
        name: "trace.trace",
        value: this._state.traceFile
      });
      entries.push({
        name: "trace.network",
        value: newNetworkFile
      });
      for (const sha1 of /* @__PURE__ */ new Set([...this._state.traceSha1s, ...this._state.networkSha1s])) entries.push({
        name: _path2.default.join("resources", sha1),
        value: _path2.default.join(this._state.resourcesDir, sha1)
      });
      this._state.traceSha1s = /* @__PURE__ */ new Set();
      if (params.mode === "discard") {
        this._isStopping = false;
        this._state.recording = false;
        return {};
      }
      this._fs.copyFile(this._state.networkFile, newNetworkFile);
      const zipFileName = this._state.traceFile + ".zip";
      if (params.mode === "archive") this._fs.zip(entries, zipFileName);
      const error = await this._fs.syncAndGetError();
      this._isStopping = false;
      if (this._state) this._state.recording = false;
      if (error) {
        if (this._context instanceof _browserContext.BrowserContext && !this._context._browser.isConnected()) return {};
        throw error;
      }
      if (params.mode === "entries") return {
        entries
      };
      const artifact2 = new _artifact.Artifact(this._context, zipFileName);
      artifact2.reportFinished();
      return {
        artifact: artifact2
      };
    }
    async _captureSnapshot(snapshotName, sdkObject, metadata) {
      if (!this._snapshotter) return;
      if (!sdkObject.attribution.page) return;
      if (!this._snapshotter.started()) return;
      if (!shouldCaptureSnapshot(metadata)) return;
      await this._snapshotter.captureSnapshot(sdkObject.attribution.page, metadata.id, snapshotName).catch(() => {
      });
    }
    onBeforeCall(sdkObject, metadata) {
      var _sdkObject$attributio, _this$_state2;
      const event = createBeforeActionTraceEvent(metadata, this._currentGroupId());
      if (!event) return Promise.resolve();
      (_sdkObject$attributio = sdkObject.attribution.page) === null || _sdkObject$attributio === void 0 || _sdkObject$attributio.temporarilyDisableTracingScreencastThrottling();
      event.beforeSnapshot = `before@${metadata.id}`;
      (_this$_state2 = this._state) === null || _this$_state2 === void 0 || _this$_state2.callIds.add(metadata.id);
      this._appendTraceEvent(event);
      return this._captureSnapshot(event.beforeSnapshot, sdkObject, metadata);
    }
    onBeforeInputAction(sdkObject, metadata) {
      var _this$_state3, _sdkObject$attributio2;
      if (!((_this$_state3 = this._state) !== null && _this$_state3 !== void 0 && _this$_state3.callIds.has(metadata.id))) return Promise.resolve();
      const event = createInputActionTraceEvent(metadata);
      if (!event) return Promise.resolve();
      (_sdkObject$attributio2 = sdkObject.attribution.page) === null || _sdkObject$attributio2 === void 0 || _sdkObject$attributio2.temporarilyDisableTracingScreencastThrottling();
      event.inputSnapshot = `input@${metadata.id}`;
      this._appendTraceEvent(event);
      return this._captureSnapshot(event.inputSnapshot, sdkObject, metadata);
    }
    onCallLog(sdkObject, metadata, logName, message) {
      if (metadata.isServerSide || metadata.internal) return;
      if (logName !== "api") return;
      const event = createActionLogTraceEvent(metadata, message);
      if (event) this._appendTraceEvent(event);
    }
    async onAfterCall(sdkObject, metadata) {
      var _this$_state4, _this$_state5, _sdkObject$attributio3;
      if (!((_this$_state4 = this._state) !== null && _this$_state4 !== void 0 && _this$_state4.callIds.has(metadata.id))) return;
      (_this$_state5 = this._state) === null || _this$_state5 === void 0 || _this$_state5.callIds.delete(metadata.id);
      const event = createAfterActionTraceEvent(metadata);
      if (!event) return;
      (_sdkObject$attributio3 = sdkObject.attribution.page) === null || _sdkObject$attributio3 === void 0 || _sdkObject$attributio3.temporarilyDisableTracingScreencastThrottling();
      event.afterSnapshot = `after@${metadata.id}`;
      this._appendTraceEvent(event);
      return this._captureSnapshot(event.afterSnapshot, sdkObject, metadata);
    }
    onEntryStarted(entry) {
      this._pendingHarEntries.add(entry);
    }
    onEntryFinished(entry) {
      this._pendingHarEntries.delete(entry);
      const event = {
        type: "resource-snapshot",
        snapshot: entry
      };
      const visited = visitTraceEvent(event, this._state.networkSha1s);
      this._fs.appendFile(
        this._state.networkFile,
        JSON.stringify(visited) + "\n",
        true
        /* flush */
      );
    }
    flushHarEntries() {
      const harLines = [];
      for (const entry of this._pendingHarEntries) {
        const event = {
          type: "resource-snapshot",
          snapshot: entry
        };
        const visited = visitTraceEvent(event, this._state.networkSha1s);
        harLines.push(JSON.stringify(visited));
      }
      this._pendingHarEntries.clear();
      if (harLines.length) this._fs.appendFile(
        this._state.networkFile,
        harLines.join("\n") + "\n",
        true
        /* flush */
      );
    }
    onContentBlob(sha1, buffer2) {
      this._appendResource(sha1, buffer2);
    }
    onSnapshotterBlob(blob) {
      this._appendResource(blob.sha1, blob.buffer);
    }
    onFrameSnapshot(snapshot) {
      this._appendTraceEvent({
        type: "frame-snapshot",
        snapshot
      });
    }
    _onConsoleMessage(message) {
      var _message$page;
      const event = {
        type: "console",
        messageType: message.type(),
        text: message.text(),
        args: message.args().map((a) => ({
          preview: a.toString(),
          value: a.rawValue()
        })),
        location: message.location(),
        time: (0, _time.monotonicTime)(),
        pageId: (_message$page = message.page()) === null || _message$page === void 0 ? void 0 : _message$page.guid
      };
      this._appendTraceEvent(event);
    }
    onDialog(dialog2) {
      const event = {
        type: "event",
        time: (0, _time.monotonicTime)(),
        class: "BrowserContext",
        method: "dialog",
        params: {
          pageId: dialog2.page().guid,
          type: dialog2.type(),
          message: dialog2.message(),
          defaultValue: dialog2.defaultValue()
        }
      };
      this._appendTraceEvent(event);
    }
    onDownload(page2, download2) {
      const event = {
        type: "event",
        time: (0, _time.monotonicTime)(),
        class: "BrowserContext",
        method: "download",
        params: {
          pageId: page2.guid,
          url: download2.url,
          suggestedFilename: download2.suggestedFilename()
        }
      };
      this._appendTraceEvent(event);
    }
    onPageOpen(page2) {
      var _page$opener;
      const event = {
        type: "event",
        time: (0, _time.monotonicTime)(),
        class: "BrowserContext",
        method: "page",
        params: {
          pageId: page2.guid,
          openerPageId: (_page$opener = page2.opener()) === null || _page$opener === void 0 ? void 0 : _page$opener.guid
        }
      };
      this._appendTraceEvent(event);
    }
    onPageClose(page2) {
      const event = {
        type: "event",
        time: (0, _time.monotonicTime)(),
        class: "BrowserContext",
        method: "pageClosed",
        params: {
          pageId: page2.guid
        }
      };
      this._appendTraceEvent(event);
    }
    _onPageError(error, page2) {
      const event = {
        type: "event",
        time: (0, _time.monotonicTime)(),
        class: "BrowserContext",
        method: "pageError",
        params: {
          error: (0, _errors.serializeError)(error)
        },
        pageId: page2.guid
      };
      this._appendTraceEvent(event);
    }
    _startScreencastInPage(page2) {
      page2.setScreencastOptions(kScreencastOptions);
      const prefix = page2.guid;
      this._screencastListeners.push(_eventsHelper.eventsHelper.addEventListener(page2, _page.Page.Events.ScreencastFrame, (params) => {
        const suffix = params.timestamp || Date.now();
        const sha1 = `${prefix}-${suffix}.jpeg`;
        const event = {
          type: "screencast-frame",
          pageId: page2.guid,
          sha1,
          width: params.width,
          height: params.height,
          timestamp: (0, _time.monotonicTime)(),
          frameSwapWallTime: params.frameSwapWallTime
        };
        this._appendResource(sha1, params.buffer);
        this._appendTraceEvent(event);
      }));
    }
    _appendTraceEvent(event) {
      const visited = visitTraceEvent(event, this._state.traceSha1s);
      const flush = this._state.options.live || event.type !== "event" && event.type !== "console" && event.type !== "log";
      this._fs.appendFile(this._state.traceFile, JSON.stringify(visited) + "\n", flush);
    }
    _appendResource(sha1, buffer2) {
      if (this._allResources.has(sha1)) return;
      this._allResources.add(sha1);
      const resourcePath = _path2.default.join(this._state.resourcesDir, sha1);
      this._fs.writeFile(
        resourcePath,
        buffer2,
        true
        /* skipIfExists */
      );
    }
  }
  tracing$1.Tracing = Tracing;
  function visitTraceEvent(object, sha1s) {
    if (Array.isArray(object)) return object.map((o2) => visitTraceEvent(o2, sha1s));
    if (object instanceof _dispatcher.Dispatcher) return `<${object._type}>`;
    if (object instanceof Buffer) return `<Buffer>`;
    if (object instanceof Date) return object;
    if (typeof object === "object") {
      const result = {};
      for (const key in object) {
        if (key === "sha1" || key === "_sha1" || key.endsWith("Sha1")) {
          const sha1 = object[key];
          if (sha1) sha1s.add(sha1);
        }
        result[key] = visitTraceEvent(object[key], sha1s);
      }
      return result;
    }
    return object;
  }
  function shouldCaptureSnapshot(metadata) {
    return _debug.commandsWithTracingSnapshots.has(metadata.type + "." + metadata.method);
  }
  function createBeforeActionTraceEvent(metadata, parentId) {
    if (metadata.internal || metadata.method.startsWith("tracing")) return null;
    const event = {
      type: "before",
      callId: metadata.id,
      startTime: metadata.startTime,
      apiName: metadata.apiName || metadata.type + "." + metadata.method,
      class: metadata.type,
      method: metadata.method,
      params: metadata.params,
      stepId: metadata.stepId,
      pageId: metadata.pageId
    };
    if (parentId) event.parentId = parentId;
    return event;
  }
  function createInputActionTraceEvent(metadata) {
    if (metadata.internal || metadata.method.startsWith("tracing")) return null;
    return {
      type: "input",
      callId: metadata.id,
      point: metadata.point
    };
  }
  function createActionLogTraceEvent(metadata, message) {
    if (metadata.internal || metadata.method.startsWith("tracing")) return null;
    return {
      type: "log",
      callId: metadata.id,
      time: (0, _time.monotonicTime)(),
      message
    };
  }
  function createAfterActionTraceEvent(metadata) {
    var _metadata$error;
    if (metadata.internal || metadata.method.startsWith("tracing")) return null;
    return {
      type: "after",
      callId: metadata.id,
      endTime: metadata.endTime,
      error: (_metadata$error = metadata.error) === null || _metadata$error === void 0 ? void 0 : _metadata$error.error,
      result: metadata.result,
      point: metadata.point
    };
  }
  return tracing$1;
}
var hasRequiredBrowserContext$1;
function requireBrowserContext$1() {
  if (hasRequiredBrowserContext$1) return browserContext$1;
  hasRequiredBrowserContext$1 = 1;
  Object.defineProperty(browserContext$1, "__esModule", {
    value: true
  });
  browserContext$1.BrowserContext = void 0;
  browserContext$1.assertBrowserContextIsNotOwned = assertBrowserContextIsNotOwned;
  browserContext$1.normalizeProxySettings = normalizeProxySettings;
  browserContext$1.validateBrowserContextOptions = validateBrowserContextOptions;
  browserContext$1.verifyClientCertificates = verifyClientCertificates;
  browserContext$1.verifyGeolocation = verifyGeolocation;
  var _fs = _interopRequireDefault(require$$0$2);
  var _path2 = _interopRequireDefault(require$$1$1);
  var _timeoutSettings = requireTimeoutSettings$1();
  var _crypto = requireCrypto();
  var _debug = requireDebug$1();
  var _clock = requireClock$1();
  var _debugger2 = require_debugger();
  var _fetch = requireFetch$1();
  var _fileUtils = requireFileUtils$1();
  var _harRecorder = requireHarRecorder();
  var _helper = requireHelper();
  var _instrumentation = requireInstrumentation();
  var utilityScriptSerializers2 = _interopRequireWildcard(requireUtilityScriptSerializers());
  var network2 = _interopRequireWildcard(requireNetwork$1());
  var _page6 = requirePage$1();
  var _recorder = requireRecorder();
  var _recorderApp = requireRecorderApp();
  var storageScript2 = _interopRequireWildcard(requireStorageScript());
  var consoleApiSource2 = _interopRequireWildcard(requireConsoleApiSource());
  var _tracing = requireTracing$1();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  class BrowserContext extends _instrumentation.SdkObject {
    constructor(browser2, options, browserContextId) {
      super(browser2, "browser-context");
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings();
      this._pageBindings = /* @__PURE__ */ new Map();
      this._activeProgressControllers = /* @__PURE__ */ new Set();
      this._options = void 0;
      this._requestInterceptor = void 0;
      this._isPersistentContext = void 0;
      this._closedStatus = "open";
      this._closePromise = void 0;
      this._closePromiseFulfill = void 0;
      this._permissions = /* @__PURE__ */ new Map();
      this._downloads = /* @__PURE__ */ new Set();
      this._browser = void 0;
      this._browserContextId = void 0;
      this._selectors = void 0;
      this._origins = /* @__PURE__ */ new Set();
      this._harRecorders = /* @__PURE__ */ new Map();
      this.tracing = void 0;
      this.fetchRequest = void 0;
      this._customCloseHandler = void 0;
      this._tempDirs = [];
      this._settingStorageState = false;
      this.initScripts = [];
      this._routesInFlight = /* @__PURE__ */ new Set();
      this._debugger = void 0;
      this._closeReason = void 0;
      this.clock = void 0;
      this._clientCertificatesProxy = void 0;
      this.attribution.context = this;
      this._browser = browser2;
      this._options = options;
      this._browserContextId = browserContextId;
      this._isPersistentContext = !browserContextId;
      this._closePromise = new Promise((fulfill) => this._closePromiseFulfill = fulfill);
      this.fetchRequest = new _fetch.BrowserContextAPIRequestContext(this);
      if (this._options.recordHar) this._harRecorders.set("", new _harRecorder.HarRecorder(this, null, this._options.recordHar));
      this.tracing = new _tracing.Tracing(this, browser2.options.tracesDir);
      this.clock = new _clock.Clock(this);
    }
    isPersistentContext() {
      return this._isPersistentContext;
    }
    setSelectors(selectors2) {
      this._selectors = selectors2;
    }
    selectors() {
      return this._selectors || this.attribution.playwright.selectors;
    }
    async _initialize() {
      if (this.attribution.playwright.options.isInternalPlaywright) return;
      this._debugger = new _debugger2.Debugger(this);
      if ((0, _debug.debugMode)() === "inspector") await _recorder.Recorder.show(this, _recorderApp.RecorderApp.factory(this), {
        pauseOnNextStatement: true
      });
      if (this._debugger.isPaused()) _recorder.Recorder.showInspectorNoReply(this, _recorderApp.RecorderApp.factory(this));
      this._debugger.on(_debugger2.Debugger.Events.PausedStateChanged, () => {
        if (this._debugger.isPaused()) _recorder.Recorder.showInspectorNoReply(this, _recorderApp.RecorderApp.factory(this));
      });
      if ((0, _debug.debugMode)() === "console") await this.extendInjectedScript(consoleApiSource2.source);
      if (this._options.serviceWorkers === "block") await this.addInitScript(`
if (navigator.serviceWorker) navigator.serviceWorker.register = async () => { console.warn('Service Worker registration blocked by Playwright'); };
`);
      if (this._options.permissions) await this.grantPermissions(this._options.permissions);
    }
    debugger() {
      return this._debugger;
    }
    async _ensureVideosPath() {
      if (this._options.recordVideo) await (0, _fileUtils.mkdirIfNeeded)(_path2.default.join(this._options.recordVideo.dir, "dummy"));
    }
    canResetForReuse() {
      if (this._closedStatus !== "open") return false;
      return true;
    }
    async stopPendingOperations(reason) {
      for (const controller of this._activeProgressControllers) controller.abort(new Error(reason));
      await new Promise((f2) => setTimeout(f2, 0));
    }
    static reusableContextHash(params) {
      const paramsCopy = {
        ...params
      };
      for (const k2 of Object.keys(paramsCopy)) {
        const key = k2;
        if (paramsCopy[key] === defaultNewContextParamValues[key]) delete paramsCopy[key];
      }
      for (const key of paramsThatAllowContextReuse) delete paramsCopy[key];
      return JSON.stringify(paramsCopy);
    }
    async resetForReuse(metadata, params) {
      var _page, _page2, _page3, _page4, _page5;
      this.setDefaultNavigationTimeout(void 0);
      this.setDefaultTimeout(void 0);
      this.tracing.resetForReuse();
      if (params) {
        for (const key of paramsThatAllowContextReuse) this._options[key] = params[key];
      }
      await this._cancelAllRoutesInFlight();
      let page2 = this.pages()[0];
      const [, ...otherPages] = this.pages();
      for (const p of otherPages) await p.close(metadata);
      if (page2 && page2.hasCrashed()) {
        await page2.close(metadata);
        page2 = void 0;
      }
      (_page = page2) === null || _page === void 0 || _page._frameManager.setCloseAllOpeningDialogs(true);
      await ((_page2 = page2) === null || _page2 === void 0 ? void 0 : _page2._frameManager.closeOpenDialogs());
      await ((_page3 = page2) === null || _page3 === void 0 ? void 0 : _page3.mainFrame().goto(metadata, "about:blank", {
        timeout: 0
      }));
      (_page4 = page2) === null || _page4 === void 0 || _page4._frameManager.setCloseAllOpeningDialogs(false);
      await this._resetStorage();
      await this._removeExposedBindings();
      await this._removeInitScripts();
      this.clock.markAsUninstalled();
      if (this._options.permissions) await this.grantPermissions(this._options.permissions);
      else await this.clearPermissions();
      await this.setExtraHTTPHeaders(this._options.extraHTTPHeaders || []);
      await this.setGeolocation(this._options.geolocation);
      await this.setOffline(!!this._options.offline);
      await this.setUserAgent(this._options.userAgent);
      await this.clearCache();
      await this._resetCookies();
      await ((_page5 = page2) === null || _page5 === void 0 ? void 0 : _page5.resetForReuse(metadata));
    }
    _browserClosed() {
      for (const page2 of this.pages()) page2._didClose();
      this._didCloseInternal();
    }
    _didCloseInternal() {
      var _this$_clientCertific;
      if (this._closedStatus === "closed") {
        return;
      }
      (_this$_clientCertific = this._clientCertificatesProxy) === null || _this$_clientCertific === void 0 || _this$_clientCertific.close().catch(() => {
      });
      this.tracing.abort();
      if (this._isPersistentContext) this.onClosePersistent();
      this._closePromiseFulfill(new Error("Context closed"));
      this.emit(BrowserContext.Events.Close);
    }
    pages() {
      return this.possiblyUninitializedPages().filter((page2) => page2.initializedOrUndefined());
    }
    // BrowserContext methods.
    async cookies(urls = []) {
      if (urls && !Array.isArray(urls)) urls = [urls];
      return await this.doGetCookies(urls);
    }
    async clearCookies(options) {
      const currentCookies = await this.cookies();
      await this.doClearCookies();
      const matches = (cookie, prop, value) => {
        if (!value) return true;
        if (value instanceof RegExp) {
          value.lastIndex = 0;
          return value.test(cookie[prop]);
        }
        return cookie[prop] === value;
      };
      const cookiesToReadd = currentCookies.filter((cookie) => {
        return !matches(cookie, "name", options.name) || !matches(cookie, "domain", options.domain) || !matches(cookie, "path", options.path);
      });
      await this.addCookies(cookiesToReadd);
    }
    setHTTPCredentials(httpCredentials) {
      return this.doSetHTTPCredentials(httpCredentials);
    }
    hasBinding(name) {
      return this._pageBindings.has(name);
    }
    async exposeBinding(name, needsHandle, playwrightBinding) {
      if (this._pageBindings.has(name)) throw new Error(`Function "${name}" has been already registered`);
      for (const page2 of this.pages()) {
        if (page2.getBinding(name)) throw new Error(`Function "${name}" has been already registered in one of the pages`);
      }
      const binding = new _page6.PageBinding(name, playwrightBinding, needsHandle);
      this._pageBindings.set(name, binding);
      await this.doAddInitScript(binding.initScript);
      const frames2 = this.pages().map((page2) => page2.frames()).flat();
      await Promise.all(frames2.map((frame2) => frame2.evaluateExpression(binding.initScript.source).catch((e2) => {
      })));
    }
    async _removeExposedBindings() {
      for (const [key, binding] of this._pageBindings) {
        if (!binding.internal) this._pageBindings.delete(key);
      }
    }
    async grantPermissions(permissions, origin) {
      let resolvedOrigin = "*";
      if (origin) {
        const url = new URL(origin);
        resolvedOrigin = url.origin;
      }
      const existing = new Set(this._permissions.get(resolvedOrigin) || []);
      permissions.forEach((p) => existing.add(p));
      const list = [...existing.values()];
      this._permissions.set(resolvedOrigin, list);
      await this.doGrantPermissions(resolvedOrigin, list);
    }
    async clearPermissions() {
      this._permissions.clear();
      await this.doClearPermissions();
    }
    setDefaultNavigationTimeout(timeout) {
      this._timeoutSettings.setDefaultNavigationTimeout(timeout);
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
    }
    async _loadDefaultContextAsIs(progress2) {
      if (!this.possiblyUninitializedPages().length) {
        const waitForEvent = _helper.helper.waitForEvent(progress2, this, BrowserContext.Events.Page);
        progress2.cleanupWhenAborted(() => waitForEvent.dispose);
        await Promise.race([waitForEvent.promise, this._closePromise]);
      }
      const page2 = this.possiblyUninitializedPages()[0];
      if (!page2) return;
      const pageOrError = await page2.waitForInitializedOrError();
      if (pageOrError instanceof Error) throw pageOrError;
      await page2.mainFrame()._waitForLoadState(progress2, "load");
      return page2;
    }
    async _loadDefaultContext(progress2) {
      const defaultPage = await this._loadDefaultContextAsIs(progress2);
      if (!defaultPage) return;
      const browserName = this._browser.options.name;
      if (this._options.isMobile && browserName === "chromium" || this._options.locale && browserName === "webkit") {
        await this.newPage(progress2.metadata);
        await defaultPage.close(progress2.metadata);
      }
    }
    _authenticateProxyViaHeader() {
      const proxy = this._options.proxy || this._browser.options.proxy || {
        username: void 0,
        password: void 0
      };
      const {
        username,
        password
      } = proxy;
      if (username) {
        this._options.httpCredentials = {
          username,
          password
        };
        const token = Buffer.from(`${username}:${password}`).toString("base64");
        this._options.extraHTTPHeaders = network2.mergeHeaders([this._options.extraHTTPHeaders, network2.singleHeader("Proxy-Authorization", `Basic ${token}`)]);
      }
    }
    _authenticateProxyViaCredentials() {
      const proxy = this._options.proxy || this._browser.options.proxy;
      if (!proxy) return;
      const {
        username,
        password
      } = proxy;
      if (username) this._options.httpCredentials = {
        username,
        password: password || ""
      };
    }
    async addInitScript(source, name) {
      const initScript = new _page6.InitScript(source, false, name);
      this.initScripts.push(initScript);
      await this.doAddInitScript(initScript);
    }
    async _removeInitScripts() {
      this.initScripts = this.initScripts.filter((script) => script.internal);
      await this.doRemoveNonInternalInitScripts();
    }
    async setRequestInterceptor(handler) {
      this._requestInterceptor = handler;
      await this.doUpdateRequestInterception();
    }
    isClosingOrClosed() {
      return this._closedStatus !== "open";
    }
    async _deleteAllDownloads() {
      await Promise.all(Array.from(this._downloads).map((download2) => download2.artifact.deleteOnContextClose()));
    }
    async _deleteAllTempDirs() {
      await Promise.all(this._tempDirs.map(async (dir) => await _fs.default.promises.unlink(dir).catch((e2) => {
      })));
    }
    setCustomCloseHandler(handler) {
      this._customCloseHandler = handler;
    }
    async close(options) {
      if (this._closedStatus === "open") {
        if (options.reason) this._closeReason = options.reason;
        this.emit(BrowserContext.Events.BeforeClose);
        this._closedStatus = "closing";
        for (const harRecorder2 of this._harRecorders.values()) await harRecorder2.flush();
        await this.tracing.flush();
        const promises = [];
        for (const {
          context,
          artifact: artifact2
        } of this._browser._idToVideo.values()) {
          if (context === this) promises.push(artifact2.finishedPromise());
        }
        if (this._customCloseHandler) {
          await this._customCloseHandler();
        } else {
          await this.doClose(options.reason);
        }
        promises.push(this._deleteAllDownloads());
        promises.push(this._deleteAllTempDirs());
        await Promise.all(promises);
        if (!this._customCloseHandler) this._didCloseInternal();
      }
      await this._closePromise;
    }
    async newPage(metadata) {
      const page2 = await this.doCreateNewPage();
      if (metadata.isServerSide) page2.markAsServerSideOnly();
      const pageOrError = await page2.waitForInitializedOrError();
      if (pageOrError instanceof _page6.Page) {
        if (pageOrError.isClosed()) throw new Error("Page has been closed.");
        return pageOrError;
      }
      throw pageOrError;
    }
    addVisitedOrigin(origin) {
      this._origins.add(origin);
    }
    async storageState(indexedDB2 = false) {
      const result = {
        cookies: await this.cookies(),
        origins: []
      };
      const originsToSave = new Set(this._origins);
      const collectScript = `(${storageScript2.collect})((${utilityScriptSerializers2.source})(), ${this._browser.options.name === "firefox"}, ${indexedDB2})`;
      for (const page2 of this.pages()) {
        const origin = page2.mainFrame().origin();
        if (!origin || !originsToSave.has(origin)) continue;
        try {
          var _storage$indexedDB;
          const storage = await page2.mainFrame().nonStallingEvaluateInExistingContext(collectScript, "utility");
          if (storage.localStorage.length || (_storage$indexedDB = storage.indexedDB) !== null && _storage$indexedDB !== void 0 && _storage$indexedDB.length) result.origins.push({
            origin,
            localStorage: storage.localStorage,
            indexedDB: storage.indexedDB
          });
          originsToSave.delete(origin);
        } catch {
        }
      }
      if (originsToSave.size) {
        const internalMetadata = (0, _instrumentation.serverSideCallMetadata)();
        const page2 = await this.newPage(internalMetadata);
        await page2._setServerRequestInterceptor((handler) => {
          handler.fulfill({
            body: "<html></html>"
          }).catch(() => {
          });
          return true;
        });
        for (const origin of originsToSave) {
          var _storage$indexedDB2;
          const frame2 = page2.mainFrame();
          await frame2.goto(internalMetadata, origin);
          const storage = await frame2.evaluateExpression(collectScript, {
            world: "utility"
          });
          if (storage.localStorage.length || (_storage$indexedDB2 = storage.indexedDB) !== null && _storage$indexedDB2 !== void 0 && _storage$indexedDB2.length) result.origins.push({
            origin,
            localStorage: storage.localStorage,
            indexedDB: storage.indexedDB
          });
        }
        await page2.close(internalMetadata);
      }
      return result;
    }
    async _resetStorage() {
      var _this$_options$storag;
      const oldOrigins = this._origins;
      const newOrigins = new Map(((_this$_options$storag = this._options.storageState) === null || _this$_options$storag === void 0 || (_this$_options$storag = _this$_options$storag.origins) === null || _this$_options$storag === void 0 ? void 0 : _this$_options$storag.map((p) => [p.origin, p])) || []);
      if (!oldOrigins.size && !newOrigins.size) return;
      let page2 = this.pages()[0];
      const internalMetadata = (0, _instrumentation.serverSideCallMetadata)();
      page2 = page2 || await this.newPage({
        ...internalMetadata,
        // Do not mark this page as internal, because we will leave it for later reuse
        // as a user-visible page.
        isServerSide: false
      });
      await page2._setServerRequestInterceptor((handler) => {
        handler.fulfill({
          body: "<html></html>"
        }).catch(() => {
        });
        return true;
      });
      for (const origin of /* @__PURE__ */ new Set([...oldOrigins, ...newOrigins.keys()])) {
        const frame2 = page2.mainFrame();
        await frame2.goto(internalMetadata, origin);
        await frame2.resetStorageForCurrentOriginBestEffort(newOrigins.get(origin));
      }
      await page2._setServerRequestInterceptor(void 0);
      this._origins = /* @__PURE__ */ new Set([...newOrigins.keys()]);
    }
    async _resetCookies() {
      var _this$_options$storag2, _this$_options$storag3;
      await this.doClearCookies();
      if ((_this$_options$storag2 = this._options.storageState) !== null && _this$_options$storag2 !== void 0 && _this$_options$storag2.cookies) await this.addCookies((_this$_options$storag3 = this._options.storageState) === null || _this$_options$storag3 === void 0 ? void 0 : _this$_options$storag3.cookies);
    }
    isSettingStorageState() {
      return this._settingStorageState;
    }
    async setStorageState(metadata, state) {
      this._settingStorageState = true;
      try {
        if (state.cookies) await this.addCookies(state.cookies);
        if (state.origins && state.origins.length) {
          const internalMetadata = (0, _instrumentation.serverSideCallMetadata)();
          const page2 = await this.newPage(internalMetadata);
          await page2._setServerRequestInterceptor((handler) => {
            handler.fulfill({
              body: "<html></html>"
            }).catch(() => {
            });
            return true;
          });
          for (const originState of state.origins) {
            const frame2 = page2.mainFrame();
            await frame2.goto(metadata, originState.origin);
            await frame2.evaluateExpression(`(${storageScript2.restore})(${JSON.stringify(originState)}, (${utilityScriptSerializers2.source})())`, {
              world: "utility"
            });
          }
          await page2.close(internalMetadata);
        }
      } finally {
        this._settingStorageState = false;
      }
    }
    async extendInjectedScript(source, arg) {
      const installInFrame = (frame2) => frame2.extendInjectedScript(source, arg).catch(() => {
      });
      const installInPage = (page2) => {
        page2.on(_page6.Page.Events.InternalFrameNavigatedToNewDocument, installInFrame);
        return Promise.all(page2.frames().map(installInFrame));
      };
      this.on(BrowserContext.Events.Page, installInPage);
      return Promise.all(this.pages().map(installInPage));
    }
    async safeNonStallingEvaluateInAllFrames(expression, world, options = {}) {
      await Promise.all(this.pages().map((page2) => page2.safeNonStallingEvaluateInAllFrames(expression, world, options)));
    }
    async _harStart(page2, options) {
      const harId = (0, _crypto.createGuid)();
      this._harRecorders.set(harId, new _harRecorder.HarRecorder(this, page2, options));
      return harId;
    }
    async _harExport(harId) {
      const recorder2 = this._harRecorders.get(harId || "");
      return recorder2.export();
    }
    addRouteInFlight(route) {
      this._routesInFlight.add(route);
    }
    removeRouteInFlight(route) {
      this._routesInFlight.delete(route);
    }
    async _cancelAllRoutesInFlight() {
      await Promise.all([...this._routesInFlight].map((r2) => r2.abort())).catch(() => {
      });
      this._routesInFlight.clear();
    }
  }
  browserContext$1.BrowserContext = BrowserContext;
  BrowserContext.Events = {
    Console: "console",
    Close: "close",
    Dialog: "dialog",
    Page: "page",
    // Can't use just 'error' due to node.js special treatment of error events.
    // @see https://nodejs.org/api/events.html#events_error_events
    PageError: "pageerror",
    Request: "request",
    Response: "response",
    RequestFailed: "requestfailed",
    RequestFinished: "requestfinished",
    RequestAborted: "requestaborted",
    RequestFulfilled: "requestfulfilled",
    RequestContinued: "requestcontinued",
    BeforeClose: "beforeclose",
    VideoStarted: "videostarted"
  };
  function assertBrowserContextIsNotOwned(context) {
    for (const page2 of context.pages()) {
      if (page2._ownedContext) throw new Error("Please use browser.newContext() for multi-page scripts that share the context.");
    }
  }
  function validateBrowserContextOptions(options, browserOptions) {
    if (options.noDefaultViewport && options.deviceScaleFactor !== void 0) throw new Error(`"deviceScaleFactor" option is not supported with null "viewport"`);
    if (options.noDefaultViewport && !!options.isMobile) throw new Error(`"isMobile" option is not supported with null "viewport"`);
    if (options.acceptDownloads === void 0 && browserOptions.name !== "electron") options.acceptDownloads = "accept";
    else if (options.acceptDownloads === void 0 && browserOptions.name === "electron") options.acceptDownloads = "internal-browser-default";
    if (!options.viewport && !options.noDefaultViewport) options.viewport = {
      width: 1280,
      height: 720
    };
    if (options.recordVideo) {
      if (!options.recordVideo.size) {
        if (options.noDefaultViewport) {
          options.recordVideo.size = {
            width: 800,
            height: 600
          };
        } else {
          const size = options.viewport;
          const scale = Math.min(1, 800 / Math.max(size.width, size.height));
          options.recordVideo.size = {
            width: Math.floor(size.width * scale),
            height: Math.floor(size.height * scale)
          };
        }
      }
      options.recordVideo.size.width &= -2;
      options.recordVideo.size.height &= -2;
    }
    if (options.proxy) options.proxy = normalizeProxySettings(options.proxy);
    verifyGeolocation(options.geolocation);
  }
  function verifyGeolocation(geolocation) {
    if (!geolocation) return;
    geolocation.accuracy = geolocation.accuracy || 0;
    const {
      longitude,
      latitude,
      accuracy
    } = geolocation;
    if (longitude < -180 || longitude > 180) throw new Error(`geolocation.longitude: precondition -180 <= LONGITUDE <= 180 failed.`);
    if (latitude < -90 || latitude > 90) throw new Error(`geolocation.latitude: precondition -90 <= LATITUDE <= 90 failed.`);
    if (accuracy < 0) throw new Error(`geolocation.accuracy: precondition 0 <= ACCURACY failed.`);
  }
  function verifyClientCertificates(clientCertificates) {
    if (!clientCertificates) return;
    for (const cert of clientCertificates) {
      if (!cert.origin) throw new Error(`clientCertificates.origin is required`);
      if (!cert.cert && !cert.key && !cert.passphrase && !cert.pfx) throw new Error("None of cert, key, passphrase or pfx is specified");
      if (cert.cert && !cert.key) throw new Error("cert is specified without key");
      if (!cert.cert && cert.key) throw new Error("key is specified without cert");
      if (cert.pfx && (cert.cert || cert.key)) throw new Error("pfx is specified together with cert, key or passphrase");
    }
  }
  function normalizeProxySettings(proxy) {
    let {
      server: server2,
      bypass
    } = proxy;
    let url;
    try {
      url = new URL(server2);
      if (!url.host || !url.protocol) url = new URL("http://" + server2);
    } catch (e2) {
      url = new URL("http://" + server2);
    }
    if (url.protocol === "socks4:" && (proxy.username || proxy.password)) throw new Error(`Socks4 proxy protocol does not support authentication`);
    if (url.protocol === "socks5:" && (proxy.username || proxy.password)) throw new Error(`Browser does not support socks5 proxy authentication`);
    server2 = url.protocol + "//" + url.host;
    if (bypass) bypass = bypass.split(",").map((t) => t.trim()).join(",");
    return {
      ...proxy,
      server: server2,
      bypass
    };
  }
  const paramsThatAllowContextReuse = ["colorScheme", "forcedColors", "reducedMotion", "contrast", "screen", "userAgent", "viewport"];
  const defaultNewContextParamValues = {
    noDefaultViewport: false,
    ignoreHTTPSErrors: false,
    javaScriptEnabled: true,
    bypassCSP: false,
    offline: false,
    isMobile: false,
    hasTouch: false,
    acceptDownloads: "accept",
    strictSelectors: false,
    serviceWorkers: "allow",
    locale: "en-US"
  };
  return browserContext$1;
}
var formData = {};
var hasRequiredFormData;
function requireFormData() {
  if (hasRequiredFormData) return formData;
  hasRequiredFormData = 1;
  Object.defineProperty(formData, "__esModule", {
    value: true
  });
  formData.MultipartFormData = void 0;
  var _utilsBundle = requireUtilsBundle();
  class MultipartFormData {
    constructor() {
      this._boundary = void 0;
      this._chunks = [];
      this._boundary = generateUniqueBoundaryString();
    }
    contentTypeHeader() {
      return `multipart/form-data; boundary=${this._boundary}`;
    }
    addField(name, value) {
      this._beginMultiPartHeader(name);
      this._finishMultiPartHeader();
      this._chunks.push(Buffer.from(value));
      this._finishMultiPartField();
    }
    addFileField(name, value) {
      this._beginMultiPartHeader(name);
      this._chunks.push(Buffer.from(`; filename="${value.name}"`));
      this._chunks.push(Buffer.from(`\r
content-type: ${value.mimeType || _utilsBundle.mime.getType(value.name) || "application/octet-stream"}`));
      this._finishMultiPartHeader();
      this._chunks.push(value.buffer);
      this._finishMultiPartField();
    }
    finish() {
      this._addBoundary(true);
      return Buffer.concat(this._chunks);
    }
    _beginMultiPartHeader(name) {
      this._addBoundary();
      this._chunks.push(Buffer.from(`content-disposition: form-data; name="${name}"`));
    }
    _finishMultiPartHeader() {
      this._chunks.push(Buffer.from(`\r
\r
`));
    }
    _finishMultiPartField() {
      this._chunks.push(Buffer.from(`\r
`));
    }
    _addBoundary(isLastBoundary) {
      this._chunks.push(Buffer.from("--" + this._boundary));
      if (isLastBoundary) this._chunks.push(Buffer.from("--"));
      this._chunks.push(Buffer.from("\r\n"));
    }
  }
  formData.MultipartFormData = MultipartFormData;
  const alphaNumericEncodingMap = [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66];
  function generateUniqueBoundaryString() {
    const charCodes = [];
    for (let i = 0; i < 16; i++) charCodes.push(alphaNumericEncodingMap[Math.floor(Math.random() * alphaNumericEncodingMap.length)]);
    return "----WebKitFormBoundary" + String.fromCharCode(...charCodes);
  }
  return formData;
}
var hasRequiredFetch$1;
function requireFetch$1() {
  if (hasRequiredFetch$1) return fetch$2;
  hasRequiredFetch$1 = 1;
  Object.defineProperty(fetch$2, "__esModule", {
    value: true
  });
  fetch$2.GlobalAPIRequestContext = fetch$2.BrowserContextAPIRequestContext = fetch$2.APIRequestContext = void 0;
  fetch$2.createProxyAgent = createProxyAgent;
  var _http = _interopRequireDefault(require$$19);
  var _https = _interopRequireDefault(require$$2);
  var _stream = require$$12;
  var _tls = require$$9;
  var _url = _interopRequireDefault(require$$6);
  var zlib = _interopRequireWildcard(require$$13);
  var _timeoutSettings = requireTimeoutSettings$1();
  var _utils = requireUtils();
  var _crypto = requireCrypto();
  var _userAgent = requireUserAgent();
  var _utilsBundle = requireUtilsBundle();
  var _browserContext = requireBrowserContext$1();
  var _cookieStore = requireCookieStore();
  var _formData = requireFormData();
  var _instrumentation = requireInstrumentation();
  var _progress = requireProgress();
  var _socksClientCertificatesInterceptor = requireSocksClientCertificatesInterceptor();
  var _happyEyeballs = requireHappyEyeballs();
  var _tracing = requireTracing$1();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  class APIRequestContext extends _instrumentation.SdkObject {
    static findResponseBody(guid) {
      for (const request of APIRequestContext.allInstances) {
        const body = request.fetchResponses.get(guid);
        if (body) return body;
      }
      return void 0;
    }
    constructor(parent) {
      super(parent, "request-context");
      this.fetchResponses = /* @__PURE__ */ new Map();
      this.fetchLog = /* @__PURE__ */ new Map();
      this._activeProgressControllers = /* @__PURE__ */ new Set();
      this._closeReason = void 0;
      APIRequestContext.allInstances.add(this);
    }
    _disposeImpl() {
      APIRequestContext.allInstances.delete(this);
      this.fetchResponses.clear();
      this.fetchLog.clear();
      this.emit(APIRequestContext.Events.Dispose);
    }
    disposeResponse(fetchUid) {
      this.fetchResponses.delete(fetchUid);
      this.fetchLog.delete(fetchUid);
    }
    _storeResponseBody(body) {
      const uid = (0, _crypto.createGuid)();
      this.fetchResponses.set(uid, body);
      return uid;
    }
    async fetch(params, metadata) {
      var _params$method;
      const defaults = this._defaultOptions();
      const headers2 = {
        "user-agent": defaults.userAgent,
        "accept": "*/*",
        "accept-encoding": "gzip,deflate,br"
      };
      if (defaults.extraHTTPHeaders) {
        for (const {
          name,
          value
        } of defaults.extraHTTPHeaders) setHeader(headers2, name, value);
      }
      if (params.headers) {
        for (const {
          name,
          value
        } of params.headers) setHeader(headers2, name, value);
      }
      const requestUrl = new URL((0, _utils.constructURLBasedOnBaseURL)(defaults.baseURL, params.url));
      if (params.encodedParams) {
        requestUrl.search = params.encodedParams;
      } else if (params.params) {
        for (const {
          name,
          value
        } of params.params) requestUrl.searchParams.append(name, value);
      }
      const credentials = this._getHttpCredentials(requestUrl);
      if ((credentials === null || credentials === void 0 ? void 0 : credentials.send) === "always") setBasicAuthorizationHeader(headers2, credentials);
      const method = ((_params$method = params.method) === null || _params$method === void 0 ? void 0 : _params$method.toUpperCase()) || "GET";
      const proxy = defaults.proxy;
      let agent;
      if (proxy && proxy.server !== "per-context" && !shouldBypassProxy(requestUrl, proxy.bypass)) agent = createProxyAgent(proxy);
      const timeout = defaults.timeoutSettings.timeout(params);
      const deadline = timeout && (0, _utils.monotonicTime)() + timeout;
      const options = {
        method,
        headers: headers2,
        agent,
        maxRedirects: params.maxRedirects === 0 ? -1 : params.maxRedirects === void 0 ? 20 : params.maxRedirects,
        timeout,
        deadline,
        ...(0, _socksClientCertificatesInterceptor.getMatchingTLSOptionsForOrigin)(this._defaultOptions().clientCertificates, requestUrl.origin),
        __testHookLookup: params.__testHookLookup
      };
      if (params.ignoreHTTPSErrors || defaults.ignoreHTTPSErrors) options.rejectUnauthorized = false;
      const postData = serializePostData(params, headers2);
      if (postData) setHeader(headers2, "content-length", String(postData.byteLength));
      const controller = new _progress.ProgressController(metadata, this);
      const fetchResponse = await controller.run((progress2) => {
        return this._sendRequestWithRetries(progress2, requestUrl, options, postData, params.maxRetries);
      });
      const fetchUid = this._storeResponseBody(fetchResponse.body);
      this.fetchLog.set(fetchUid, controller.metadata.log);
      const failOnStatusCode = params.failOnStatusCode !== void 0 ? params.failOnStatusCode : !!defaults.failOnStatusCode;
      if (failOnStatusCode && (fetchResponse.status < 200 || fetchResponse.status >= 400)) {
        let responseText = "";
        if (fetchResponse.body.byteLength) {
          let text = fetchResponse.body.toString("utf8");
          if (text.length > 1e3) text = text.substring(0, 997) + "...";
          responseText = `
Response text:
${text}`;
        }
        throw new Error(`${fetchResponse.status} ${fetchResponse.statusText}${responseText}`);
      }
      return {
        ...fetchResponse,
        fetchUid
      };
    }
    _parseSetCookieHeader(responseUrl, setCookie) {
      if (!setCookie) return [];
      const url = new URL(responseUrl);
      const defaultPath = "/" + url.pathname.substr(1).split("/").slice(0, -1).join("/");
      const cookies = [];
      for (const header of setCookie) {
        const cookie = parseCookie(header);
        if (!cookie) continue;
        if (!cookie.domain) cookie.domain = url.hostname;
        else (0, _utils.assert)(cookie.domain.startsWith(".") || !cookie.domain.includes("."));
        if (!(0, _cookieStore.domainMatches)(url.hostname, cookie.domain)) continue;
        if (!cookie.path || !cookie.path.startsWith("/")) cookie.path = defaultPath;
        cookies.push(cookie);
      }
      return cookies;
    }
    async _updateRequestCookieHeader(url, headers2) {
      if (getHeader(headers2, "cookie") !== void 0) return;
      const cookies = await this._cookies(url);
      if (cookies.length) {
        const valueArray = cookies.map((c2) => `${c2.name}=${c2.value}`);
        setHeader(headers2, "cookie", valueArray.join("; "));
      }
    }
    async _sendRequestWithRetries(progress2, url, options, postData, maxRetries) {
      maxRetries !== null && maxRetries !== void 0 ? maxRetries : maxRetries = 0;
      let backoff = 250;
      for (let i = 0; i <= maxRetries; i++) {
        try {
          return await this._sendRequest(progress2, url, options, postData);
        } catch (e2) {
          e2 = (0, _socksClientCertificatesInterceptor.rewriteOpenSSLErrorIfNeeded)(e2);
          if (maxRetries === 0) throw e2;
          if (i === maxRetries || options.deadline && (0, _utils.monotonicTime)() + backoff > options.deadline) throw new Error(`Failed after ${i + 1} attempt(s): ${e2}`);
          if (e2.code !== "ECONNRESET") throw e2;
          progress2.log(`  Received ECONNRESET, will retry after ${backoff}ms.`);
          await new Promise((f2) => setTimeout(f2, backoff));
          backoff *= 2;
        }
      }
      throw new Error("Unreachable");
    }
    async _sendRequest(progress2, url, options, postData) {
      var _getHeader;
      await this._updateRequestCookieHeader(url, options.headers);
      const requestCookies = ((_getHeader = getHeader(options.headers, "cookie")) === null || _getHeader === void 0 ? void 0 : _getHeader.split(";").map((p) => {
        const [name, value] = p.split("=").map((v2) => v2.trim());
        return {
          name,
          value
        };
      })) || [];
      const requestEvent = {
        url,
        method: options.method,
        headers: options.headers,
        cookies: requestCookies,
        postData
      };
      this.emit(APIRequestContext.Events.Request, requestEvent);
      return new Promise((fulfill, reject) => {
        const requestConstructor = (url.protocol === "https:" ? _https.default : _http.default).request;
        const agent = options.agent || (url.protocol === "https:" ? _happyEyeballs.httpsHappyEyeballsAgent : _happyEyeballs.httpHappyEyeballsAgent);
        const requestOptions = {
          ...options,
          agent
        };
        const startAt = (0, _utils.monotonicTime)();
        let reusedSocketAt;
        let dnsLookupAt;
        let tcpConnectionAt;
        let tlsHandshakeAt;
        let requestFinishAt;
        let serverIPAddress;
        let serverPort;
        let securityDetails;
        const listeners = [];
        const request = requestConstructor(url, requestOptions, async (response) => {
          const responseAt = (0, _utils.monotonicTime)();
          const notifyRequestFinished = (body2) => {
            const endAt = (0, _utils.monotonicTime)();
            const connectEnd = tlsHandshakeAt !== null && tlsHandshakeAt !== void 0 ? tlsHandshakeAt : tcpConnectionAt;
            const timings = {
              send: requestFinishAt - startAt,
              wait: responseAt - requestFinishAt,
              receive: endAt - responseAt,
              dns: dnsLookupAt ? dnsLookupAt - startAt : -1,
              connect: connectEnd ? connectEnd - startAt : -1,
              // "If [ssl] is defined then the time is also included in the connect field "
              ssl: tlsHandshakeAt ? tlsHandshakeAt - tcpConnectionAt : -1,
              blocked: reusedSocketAt ? reusedSocketAt - startAt : -1
            };
            const requestFinishedEvent = {
              requestEvent,
              httpVersion: response.httpVersion,
              statusCode: response.statusCode || 0,
              statusMessage: response.statusMessage || "",
              headers: response.headers,
              rawHeaders: response.rawHeaders,
              cookies,
              body: body2,
              timings,
              serverIPAddress,
              serverPort,
              securityDetails
            };
            this.emit(APIRequestContext.Events.RequestFinished, requestFinishedEvent);
          };
          progress2.log(`← ${response.statusCode} ${response.statusMessage}`);
          for (const [name, value] of Object.entries(response.headers)) progress2.log(`  ${name}: ${value}`);
          const cookies = this._parseSetCookieHeader(response.url || url.toString(), response.headers["set-cookie"]);
          if (cookies.length) {
            try {
              await this._addCookies(cookies);
            } catch (e2) {
              await Promise.all(cookies.map((c2) => this._addCookies([c2]).catch(() => {
              })));
            }
          }
          if (redirectStatus.includes(response.statusCode) && options.maxRedirects >= 0) {
            var _response$headers$loc;
            if (!options.maxRedirects) {
              reject(new Error("Max redirect count exceeded"));
              request.destroy();
              return;
            }
            const headers2 = {
              ...options.headers
            };
            removeHeader(headers2, `cookie`);
            const status = response.statusCode;
            let method = options.method;
            if ((status === 301 || status === 302) && method === "POST" || status === 303 && !["GET", "HEAD"].includes(method)) {
              method = "GET";
              postData = void 0;
              removeHeader(headers2, `content-encoding`);
              removeHeader(headers2, `content-language`);
              removeHeader(headers2, `content-length`);
              removeHeader(headers2, `content-location`);
              removeHeader(headers2, `content-type`);
            }
            const redirectOptions = {
              method,
              headers: headers2,
              agent: options.agent,
              maxRedirects: options.maxRedirects - 1,
              timeout: options.timeout,
              deadline: options.deadline,
              ...(0, _socksClientCertificatesInterceptor.getMatchingTLSOptionsForOrigin)(this._defaultOptions().clientCertificates, url.origin),
              __testHookLookup: options.__testHookLookup
            };
            if (options.rejectUnauthorized === false) redirectOptions.rejectUnauthorized = false;
            const locationHeaderValue = Buffer.from((_response$headers$loc = response.headers.location) !== null && _response$headers$loc !== void 0 ? _response$headers$loc : "", "latin1").toString("utf8");
            if (locationHeaderValue) {
              let locationURL;
              try {
                locationURL = new URL(locationHeaderValue, url);
              } catch (error) {
                reject(new Error(`uri requested responds with an invalid redirect URL: ${locationHeaderValue}`));
                request.destroy();
                return;
              }
              if (headers2["host"]) headers2["host"] = locationURL.host;
              notifyRequestFinished();
              fulfill(this._sendRequest(progress2, locationURL, redirectOptions, postData));
              request.destroy();
              return;
            }
          }
          if (response.statusCode === 401 && !getHeader(options.headers, "authorization")) {
            const auth = response.headers["www-authenticate"];
            const credentials = this._getHttpCredentials(url);
            if (auth !== null && auth !== void 0 && auth.trim().startsWith("Basic") && credentials) {
              setBasicAuthorizationHeader(options.headers, credentials);
              notifyRequestFinished();
              fulfill(this._sendRequest(progress2, url, options, postData));
              request.destroy();
              return;
            }
          }
          response.on("aborted", () => reject(new Error("aborted")));
          const chunks = [];
          const notifyBodyFinished = () => {
            const body2 = Buffer.concat(chunks);
            notifyRequestFinished(body2);
            fulfill({
              url: response.url || url.toString(),
              status: response.statusCode || 0,
              statusText: response.statusMessage || "",
              headers: toHeadersArray(response.rawHeaders),
              body: body2
            });
          };
          let body = response;
          let transform;
          const encoding = response.headers["content-encoding"];
          if (encoding === "gzip" || encoding === "x-gzip") {
            transform = zlib.createGunzip({
              flush: zlib.constants.Z_SYNC_FLUSH,
              finishFlush: zlib.constants.Z_SYNC_FLUSH
            });
          } else if (encoding === "br") {
            transform = zlib.createBrotliDecompress({
              flush: zlib.constants.BROTLI_OPERATION_FLUSH,
              finishFlush: zlib.constants.BROTLI_OPERATION_FLUSH
            });
          } else if (encoding === "deflate") {
            transform = zlib.createInflate();
          }
          if (transform) {
            const emptyStreamTransform = new SafeEmptyStreamTransform(notifyBodyFinished);
            body = (0, _stream.pipeline)(response, emptyStreamTransform, transform, (e2) => {
              if (e2) reject(new Error(`failed to decompress '${encoding}' encoding: ${e2.message}`));
            });
            body.on("error", (e2) => reject(new Error(`failed to decompress '${encoding}' encoding: ${e2}`)));
          } else {
            body.on("error", reject);
          }
          body.on("data", (chunk) => chunks.push(chunk));
          body.on("end", notifyBodyFinished);
        });
        request.on("error", reject);
        listeners.push(_utils.eventsHelper.addEventListener(this, APIRequestContext.Events.Dispose, () => {
          reject(new Error("Request context disposed."));
          request.destroy();
        }));
        request.on("close", () => _utils.eventsHelper.removeEventListeners(listeners));
        request.on("socket", (socket) => {
          if (request.reusedSocket) {
            reusedSocketAt = (0, _utils.monotonicTime)();
            return;
          }
          const happyEyeBallsTimings = (0, _happyEyeballs.timingForSocket)(socket);
          dnsLookupAt = happyEyeBallsTimings.dnsLookupAt;
          tcpConnectionAt = happyEyeBallsTimings.tcpConnectionAt;
          listeners.push(_utils.eventsHelper.addEventListener(socket, "lookup", () => {
            dnsLookupAt = (0, _utils.monotonicTime)();
          }), _utils.eventsHelper.addEventListener(socket, "connect", () => {
            tcpConnectionAt = (0, _utils.monotonicTime)();
          }), _utils.eventsHelper.addEventListener(socket, "secureConnect", () => {
            tlsHandshakeAt = (0, _utils.monotonicTime)();
            if (socket instanceof _tls.TLSSocket) {
              var _socket$getProtocol;
              const peerCertificate = socket.getPeerCertificate();
              securityDetails = {
                protocol: (_socket$getProtocol = socket.getProtocol()) !== null && _socket$getProtocol !== void 0 ? _socket$getProtocol : void 0,
                subjectName: peerCertificate.subject.CN,
                validFrom: new Date(peerCertificate.valid_from).getTime() / 1e3,
                validTo: new Date(peerCertificate.valid_to).getTime() / 1e3,
                issuer: peerCertificate.issuer.CN
              };
            }
          }));
          serverIPAddress = socket.remoteAddress;
          serverPort = socket.remotePort;
        });
        request.on("finish", () => {
          requestFinishAt = (0, _utils.monotonicTime)();
        });
        progress2.log(`→ ${options.method} ${url.toString()}`);
        if (options.headers) {
          for (const [name, value] of Object.entries(options.headers)) progress2.log(`  ${name}: ${value}`);
        }
        if (options.deadline) {
          const rejectOnTimeout = () => {
            reject(new Error(`Request timed out after ${options.timeout}ms`));
            request.destroy();
          };
          const remaining = options.deadline - (0, _utils.monotonicTime)();
          if (remaining <= 0) {
            rejectOnTimeout();
            return;
          }
          request.setTimeout(remaining, rejectOnTimeout);
        }
        if (postData) request.write(postData);
        request.end();
      });
    }
    _getHttpCredentials(url) {
      var _this$_defaultOptions, _this$_defaultOptions2;
      if (!((_this$_defaultOptions = this._defaultOptions().httpCredentials) !== null && _this$_defaultOptions !== void 0 && _this$_defaultOptions.origin) || url.origin.toLowerCase() === ((_this$_defaultOptions2 = this._defaultOptions().httpCredentials) === null || _this$_defaultOptions2 === void 0 || (_this$_defaultOptions2 = _this$_defaultOptions2.origin) === null || _this$_defaultOptions2 === void 0 ? void 0 : _this$_defaultOptions2.toLowerCase())) return this._defaultOptions().httpCredentials;
      return void 0;
    }
  }
  fetch$2.APIRequestContext = APIRequestContext;
  APIRequestContext.Events = {
    Dispose: "dispose",
    Request: "request",
    RequestFinished: "requestfinished"
  };
  APIRequestContext.allInstances = /* @__PURE__ */ new Set();
  class SafeEmptyStreamTransform extends _stream.Transform {
    constructor(onEmptyStreamCallback) {
      super();
      this._receivedSomeData = false;
      this._onEmptyStreamCallback = void 0;
      this._onEmptyStreamCallback = onEmptyStreamCallback;
    }
    _transform(chunk, encoding, callback) {
      this._receivedSomeData = true;
      callback(null, chunk);
    }
    _flush(callback) {
      if (this._receivedSomeData) callback(null);
      else this._onEmptyStreamCallback();
    }
  }
  class BrowserContextAPIRequestContext extends APIRequestContext {
    constructor(context) {
      super(context);
      this._context = void 0;
      this._context = context;
      context.once(_browserContext.BrowserContext.Events.Close, () => this._disposeImpl());
    }
    tracing() {
      return this._context.tracing;
    }
    async dispose(options) {
      this._closeReason = options.reason;
      this.fetchResponses.clear();
    }
    _defaultOptions() {
      return {
        userAgent: this._context._options.userAgent || this._context._browser.userAgent(),
        extraHTTPHeaders: this._context._options.extraHTTPHeaders,
        failOnStatusCode: void 0,
        httpCredentials: this._context._options.httpCredentials,
        proxy: this._context._options.proxy || this._context._browser.options.proxy,
        timeoutSettings: this._context._timeoutSettings,
        ignoreHTTPSErrors: this._context._options.ignoreHTTPSErrors,
        baseURL: this._context._options.baseURL,
        clientCertificates: this._context._options.clientCertificates
      };
    }
    async _addCookies(cookies) {
      await this._context.addCookies(cookies);
    }
    async _cookies(url) {
      return await this._context.cookies(url.toString());
    }
    async storageState(indexedDB2) {
      return this._context.storageState(indexedDB2);
    }
  }
  fetch$2.BrowserContextAPIRequestContext = BrowserContextAPIRequestContext;
  class GlobalAPIRequestContext extends APIRequestContext {
    constructor(playwright2, options) {
      super(playwright2);
      this._cookieStore = new _cookieStore.CookieStore();
      this._options = void 0;
      this._origins = void 0;
      this._tracing = void 0;
      this.attribution.context = this;
      const timeoutSettings2 = new _timeoutSettings.TimeoutSettings();
      if (options.timeout !== void 0) timeoutSettings2.setDefaultTimeout(options.timeout);
      const proxy = options.proxy;
      if (proxy !== null && proxy !== void 0 && proxy.server) {
        let url = proxy === null || proxy === void 0 ? void 0 : proxy.server.trim();
        if (!/^\w+:\/\//.test(url)) url = "http://" + url;
        proxy.server = url;
      }
      if (options.storageState) {
        var _options$storageState;
        this._origins = (_options$storageState = options.storageState.origins) === null || _options$storageState === void 0 ? void 0 : _options$storageState.map((origin) => ({
          indexedDB: [],
          ...origin
        }));
        this._cookieStore.addCookies(options.storageState.cookies || []);
      }
      (0, _browserContext.verifyClientCertificates)(options.clientCertificates);
      this._options = {
        baseURL: options.baseURL,
        userAgent: options.userAgent || (0, _userAgent.getUserAgent)(),
        extraHTTPHeaders: options.extraHTTPHeaders,
        failOnStatusCode: !!options.failOnStatusCode,
        ignoreHTTPSErrors: !!options.ignoreHTTPSErrors,
        httpCredentials: options.httpCredentials,
        clientCertificates: options.clientCertificates,
        proxy,
        timeoutSettings: timeoutSettings2
      };
      this._tracing = new _tracing.Tracing(this, options.tracesDir);
    }
    tracing() {
      return this._tracing;
    }
    async dispose(options) {
      this._closeReason = options.reason;
      await this._tracing.flush();
      await this._tracing.deleteTmpTracesDir();
      this._disposeImpl();
    }
    _defaultOptions() {
      return this._options;
    }
    async _addCookies(cookies) {
      this._cookieStore.addCookies(cookies);
    }
    async _cookies(url) {
      return this._cookieStore.cookies(url);
    }
    async storageState(indexedDB2 = false) {
      return {
        cookies: this._cookieStore.allCookies(),
        origins: (this._origins || []).map((origin) => ({
          ...origin,
          indexedDB: indexedDB2 ? origin.indexedDB : []
        }))
      };
    }
  }
  fetch$2.GlobalAPIRequestContext = GlobalAPIRequestContext;
  function createProxyAgent(proxy) {
    var _proxyOpts$protocol;
    const proxyOpts = _url.default.parse(proxy.server);
    if ((_proxyOpts$protocol = proxyOpts.protocol) !== null && _proxyOpts$protocol !== void 0 && _proxyOpts$protocol.startsWith("socks")) {
      return new _utilsBundle.SocksProxyAgent({
        host: proxyOpts.hostname,
        port: proxyOpts.port || void 0
      });
    }
    if (proxy.username) proxyOpts.auth = `${proxy.username}:${proxy.password || ""}`;
    return new _utilsBundle.HttpsProxyAgent(proxyOpts);
  }
  function toHeadersArray(rawHeaders) {
    const result = [];
    for (let i = 0; i < rawHeaders.length; i += 2) result.push({
      name: rawHeaders[i],
      value: rawHeaders[i + 1]
    });
    return result;
  }
  const redirectStatus = [301, 302, 303, 307, 308];
  function parseCookie(header) {
    const raw = (0, _cookieStore.parseRawCookie)(header);
    if (!raw) return null;
    const cookie = {
      domain: "",
      path: "",
      expires: -1,
      httpOnly: false,
      secure: false,
      // From https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
      // The cookie-sending behavior if SameSite is not specified is SameSite=Lax.
      sameSite: "Lax",
      ...raw
    };
    return cookie;
  }
  function serializePostData(params, headers2) {
    (0, _utils.assert)((params.postData ? 1 : 0) + (params.jsonData ? 1 : 0) + (params.formData ? 1 : 0) + (params.multipartData ? 1 : 0) <= 1, `Only one of 'data', 'form' or 'multipart' can be specified`);
    if (params.jsonData !== void 0) {
      setHeader(headers2, "content-type", "application/json", true);
      return Buffer.from(params.jsonData, "utf8");
    } else if (params.formData) {
      const searchParams = new URLSearchParams();
      for (const {
        name,
        value
      } of params.formData) searchParams.append(name, value);
      setHeader(headers2, "content-type", "application/x-www-form-urlencoded", true);
      return Buffer.from(searchParams.toString(), "utf8");
    } else if (params.multipartData) {
      const formData2 = new _formData.MultipartFormData();
      for (const field of params.multipartData) {
        if (field.file) formData2.addFileField(field.name, field.file);
        else if (field.value) formData2.addField(field.name, field.value);
      }
      setHeader(headers2, "content-type", formData2.contentTypeHeader(), true);
      return formData2.finish();
    } else if (params.postData !== void 0) {
      setHeader(headers2, "content-type", "application/octet-stream", true);
      return params.postData;
    }
    return void 0;
  }
  function setHeader(headers2, name, value, keepExisting = false) {
    const existing = Object.entries(headers2).find((pair) => pair[0].toLowerCase() === name.toLowerCase());
    if (!existing) headers2[name] = value;
    else if (!keepExisting) headers2[existing[0]] = value;
  }
  function getHeader(headers2, name) {
    const existing = Object.entries(headers2).find((pair) => pair[0].toLowerCase() === name.toLowerCase());
    return existing ? existing[1] : void 0;
  }
  function removeHeader(headers2, name) {
    delete headers2[name];
  }
  function shouldBypassProxy(url, bypass) {
    if (!bypass) return false;
    const domains = bypass.split(",").map((s2) => {
      s2 = s2.trim();
      if (!s2.startsWith(".")) s2 = "." + s2;
      return s2;
    });
    const domain = "." + url.hostname;
    return domains.some((d2) => domain.endsWith(d2));
  }
  function setBasicAuthorizationHeader(headers2, credentials) {
    const {
      username,
      password
    } = credentials;
    const encoded = Buffer.from(`${username || ""}:${password || ""}`).toString("base64");
    setHeader(headers2, "authorization", `Basic ${encoded}`);
  }
  return fetch$2;
}
var androidDispatcher = {};
var browserContextDispatcher = {};
var artifactDispatcher = {};
var streamDispatcher = {};
var hasRequiredStreamDispatcher;
function requireStreamDispatcher() {
  if (hasRequiredStreamDispatcher) return streamDispatcher;
  hasRequiredStreamDispatcher = 1;
  Object.defineProperty(streamDispatcher, "__esModule", {
    value: true
  });
  streamDispatcher.StreamDispatcher = void 0;
  var _dispatcher = requireDispatcher();
  var _manualPromise = requireManualPromise();
  var _crypto = requireCrypto();
  class StreamDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, stream2) {
      super(scope, {
        guid: "stream@" + (0, _crypto.createGuid)(),
        stream: stream2
      }, "Stream", {});
      this._type_Stream = true;
      this._ended = false;
      stream2.once("end", () => this._ended = true);
      stream2.once("error", () => this._ended = true);
    }
    async read(params) {
      const stream2 = this._object.stream;
      if (this._ended) return {
        binary: Buffer.from("")
      };
      if (!stream2.readableLength) {
        const readyPromise = new _manualPromise.ManualPromise();
        const done = () => readyPromise.resolve();
        stream2.on("readable", done);
        stream2.on("end", done);
        stream2.on("error", done);
        await readyPromise;
        stream2.off("readable", done);
        stream2.off("end", done);
        stream2.off("error", done);
      }
      const buffer2 = stream2.read(Math.min(stream2.readableLength, params.size || stream2.readableLength));
      return {
        binary: buffer2 || Buffer.from("")
      };
    }
    async close() {
      this._object.stream.destroy();
    }
  }
  streamDispatcher.StreamDispatcher = StreamDispatcher;
  return streamDispatcher;
}
var hasRequiredArtifactDispatcher;
function requireArtifactDispatcher() {
  if (hasRequiredArtifactDispatcher) return artifactDispatcher;
  hasRequiredArtifactDispatcher = 1;
  Object.defineProperty(artifactDispatcher, "__esModule", {
    value: true
  });
  artifactDispatcher.ArtifactDispatcher = void 0;
  var _fs = _interopRequireDefault(require$$0$2);
  var _dispatcher = requireDispatcher();
  var _streamDispatcher = requireStreamDispatcher();
  var _fileUtils = requireFileUtils$1();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  class ArtifactDispatcher extends _dispatcher.Dispatcher {
    static from(parentScope, artifact2) {
      return ArtifactDispatcher.fromNullable(parentScope, artifact2);
    }
    static fromNullable(parentScope, artifact2) {
      if (!artifact2) return void 0;
      const result = (0, _dispatcher.existingDispatcher)(artifact2);
      return result || new ArtifactDispatcher(parentScope, artifact2);
    }
    constructor(scope, artifact2) {
      super(scope, artifact2, "Artifact", {
        absolutePath: artifact2.localPath()
      });
      this._type_Artifact = true;
    }
    async pathAfterFinished() {
      const path = await this._object.localPathAfterFinished();
      return {
        value: path
      };
    }
    async saveAs(params) {
      return await new Promise((resolve2, reject) => {
        this._object.saveAs(async (localPath, error) => {
          if (error) {
            reject(error);
            return;
          }
          try {
            await (0, _fileUtils.mkdirIfNeeded)(params.path);
            await _fs.default.promises.copyFile(localPath, params.path);
            resolve2();
          } catch (e2) {
            reject(e2);
          }
        });
      });
    }
    async saveAsStream() {
      return await new Promise((resolve2, reject) => {
        this._object.saveAs(async (localPath, error) => {
          if (error) {
            reject(error);
            return;
          }
          try {
            const readable = _fs.default.createReadStream(localPath, {
              highWaterMark: 1024 * 1024
            });
            const stream2 = new _streamDispatcher.StreamDispatcher(this, readable);
            resolve2({
              stream: stream2
            });
            await new Promise((resolve3) => {
              readable.on("close", resolve3);
              readable.on("end", resolve3);
              readable.on("error", resolve3);
            });
          } catch (e2) {
            reject(e2);
          }
        });
      });
    }
    async stream() {
      const fileName = await this._object.localPathAfterFinished();
      const readable = _fs.default.createReadStream(fileName, {
        highWaterMark: 1024 * 1024
      });
      return {
        stream: new _streamDispatcher.StreamDispatcher(this, readable)
      };
    }
    async failure() {
      const error = await this._object.failureError();
      return {
        error: error || void 0
      };
    }
    async cancel() {
      await this._object.cancel();
    }
    async delete(_2, metadata) {
      metadata.potentiallyClosesScope = true;
      await this._object.delete();
      this._dispose();
    }
  }
  artifactDispatcher.ArtifactDispatcher = ArtifactDispatcher;
  return artifactDispatcher;
}
var cdpSessionDispatcher = {};
var hasRequiredCdpSessionDispatcher;
function requireCdpSessionDispatcher() {
  if (hasRequiredCdpSessionDispatcher) return cdpSessionDispatcher;
  hasRequiredCdpSessionDispatcher = 1;
  Object.defineProperty(cdpSessionDispatcher, "__esModule", {
    value: true
  });
  cdpSessionDispatcher.CDPSessionDispatcher = void 0;
  var _dispatcher = requireDispatcher();
  var _crConnection = requireCrConnection();
  class CDPSessionDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, cdpSession2) {
      super(scope, cdpSession2, "CDPSession", {});
      this._type_CDPSession = true;
      this.addObjectListener(_crConnection.CDPSession.Events.Event, ({
        method,
        params
      }) => this._dispatchEvent("event", {
        method,
        params
      }));
      this.addObjectListener(_crConnection.CDPSession.Events.Closed, () => this._dispose());
    }
    async send(params) {
      return {
        result: await this._object.send(params.method, params.params)
      };
    }
    async detach(_2, metadata) {
      metadata.potentiallyClosesScope = true;
      await this._object.detach();
    }
  }
  cdpSessionDispatcher.CDPSessionDispatcher = CDPSessionDispatcher;
  return cdpSessionDispatcher;
}
var dialogDispatcher = {};
var pageDispatcher = {};
var elementHandlerDispatcher = {};
var frameDispatcher = {};
var jsHandleDispatcher = {};
var hasRequiredJsHandleDispatcher;
function requireJsHandleDispatcher() {
  if (hasRequiredJsHandleDispatcher) return jsHandleDispatcher;
  hasRequiredJsHandleDispatcher = 1;
  Object.defineProperty(jsHandleDispatcher, "__esModule", {
    value: true
  });
  jsHandleDispatcher.JSHandleDispatcher = void 0;
  jsHandleDispatcher.parseArgument = parseArgument;
  jsHandleDispatcher.parseValue = parseValue;
  jsHandleDispatcher.serializeResult = serializeResult;
  var _dispatcher = requireDispatcher();
  var _elementHandlerDispatcher = requireElementHandlerDispatcher();
  var _serializers = requireSerializers();
  class JSHandleDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, jsHandle2) {
      super(scope, jsHandle2, jsHandle2.asElement() ? "ElementHandle" : "JSHandle", {
        preview: jsHandle2.toString()
      });
      this._type_JSHandle = true;
      jsHandle2._setPreviewCallback((preview) => this._dispatchEvent("previewUpdated", {
        preview
      }));
    }
    async evaluateExpression(params) {
      return {
        value: serializeResult(await this._object.evaluateExpression(params.expression, {
          isFunction: params.isFunction
        }, parseArgument(params.arg)))
      };
    }
    async evaluateExpressionHandle(params) {
      const jsHandle2 = await this._object.evaluateExpressionHandle(params.expression, {
        isFunction: params.isFunction
      }, parseArgument(params.arg));
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this.parentScope(), jsHandle2)
      };
    }
    async getProperty(params) {
      const jsHandle2 = await this._object.getProperty(params.name);
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this.parentScope(), jsHandle2)
      };
    }
    async getPropertyList() {
      const map = await this._object.getProperties();
      const properties = [];
      for (const [name, value] of map) properties.push({
        name,
        value: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this.parentScope(), value)
      });
      return {
        properties
      };
    }
    async jsonValue() {
      return {
        value: serializeResult(await this._object.jsonValue())
      };
    }
    async dispose(_2, metadata) {
      metadata.potentiallyClosesScope = true;
      this._object.dispose();
      this._dispose();
    }
  }
  jsHandleDispatcher.JSHandleDispatcher = JSHandleDispatcher;
  function parseArgument(arg) {
    return (0, _serializers.parseSerializedValue)(arg.value, arg.handles.map((a) => a._object));
  }
  function parseValue(v2) {
    return (0, _serializers.parseSerializedValue)(v2, []);
  }
  function serializeResult(arg) {
    return (0, _serializers.serializeValue)(arg, (value) => ({
      fallThrough: value
    }));
  }
  return jsHandleDispatcher;
}
var networkDispatchers = {};
var tracingDispatcher = {};
var hasRequiredTracingDispatcher;
function requireTracingDispatcher() {
  if (hasRequiredTracingDispatcher) return tracingDispatcher;
  hasRequiredTracingDispatcher = 1;
  Object.defineProperty(tracingDispatcher, "__esModule", {
    value: true
  });
  tracingDispatcher.TracingDispatcher = void 0;
  var _artifactDispatcher = requireArtifactDispatcher();
  var _dispatcher = requireDispatcher();
  class TracingDispatcher extends _dispatcher.Dispatcher {
    static from(scope, tracing2) {
      const result = (0, _dispatcher.existingDispatcher)(tracing2);
      return result || new TracingDispatcher(scope, tracing2);
    }
    constructor(scope, tracing2) {
      super(scope, tracing2, "Tracing", {});
      this._type_Tracing = true;
    }
    async tracingStart(params) {
      await this._object.start(params);
    }
    async tracingStartChunk(params) {
      return await this._object.startChunk(params);
    }
    async tracingGroup(params, metadata) {
      const {
        name,
        location: location2
      } = params;
      await this._object.group(name, location2, metadata);
    }
    async tracingGroupEnd(params) {
      await this._object.groupEnd();
    }
    async tracingStopChunk(params) {
      const {
        artifact: artifact2,
        entries
      } = await this._object.stopChunk(params);
      return {
        artifact: artifact2 ? _artifactDispatcher.ArtifactDispatcher.from(this, artifact2) : void 0,
        entries
      };
    }
    async tracingStop(params) {
      await this._object.stop();
    }
  }
  tracingDispatcher.TracingDispatcher = TracingDispatcher;
  return tracingDispatcher;
}
var hasRequiredNetworkDispatchers;
function requireNetworkDispatchers() {
  if (hasRequiredNetworkDispatchers) return networkDispatchers;
  hasRequiredNetworkDispatchers = 1;
  Object.defineProperty(networkDispatchers, "__esModule", {
    value: true
  });
  networkDispatchers.WebSocketDispatcher = networkDispatchers.RouteDispatcher = networkDispatchers.ResponseDispatcher = networkDispatchers.RequestDispatcher = networkDispatchers.APIRequestContextDispatcher = void 0;
  var _network = requireNetwork$1();
  var _dispatcher = requireDispatcher();
  var _frameDispatcher = requireFrameDispatcher();
  var _pageDispatcher = requirePageDispatcher();
  var _tracingDispatcher = requireTracingDispatcher();
  class RequestDispatcher extends _dispatcher.Dispatcher {
    static from(scope, request) {
      const result = (0, _dispatcher.existingDispatcher)(request);
      return result || new RequestDispatcher(scope, request);
    }
    static fromNullable(scope, request) {
      return request ? RequestDispatcher.from(scope, request) : void 0;
    }
    constructor(scope, request) {
      var _request$frame;
      const postData = request.postDataBuffer();
      const frame2 = request.frame();
      const page2 = (_request$frame = request.frame()) === null || _request$frame === void 0 ? void 0 : _request$frame._page;
      const pageDispatcher2 = page2 ? (0, _dispatcher.existingDispatcher)(page2) : null;
      const frameDispatcher2 = frame2 ? _frameDispatcher.FrameDispatcher.from(scope, frame2) : null;
      super(pageDispatcher2 || frameDispatcher2 || scope, request, "Request", {
        frame: _frameDispatcher.FrameDispatcher.fromNullable(scope, request.frame()),
        serviceWorker: _pageDispatcher.WorkerDispatcher.fromNullable(scope, request.serviceWorker()),
        url: request.url(),
        resourceType: request.resourceType(),
        method: request.method(),
        postData: postData === null ? void 0 : postData,
        headers: request.headers(),
        isNavigationRequest: request.isNavigationRequest(),
        redirectedFrom: RequestDispatcher.fromNullable(scope, request.redirectedFrom())
      });
      this._type_Request = void 0;
      this._browserContextDispatcher = void 0;
      this._type_Request = true;
      this._browserContextDispatcher = scope;
    }
    async rawRequestHeaders(params) {
      return {
        headers: await this._object.rawRequestHeaders()
      };
    }
    async response() {
      return {
        response: ResponseDispatcher.fromNullable(this._browserContextDispatcher, await this._object.response())
      };
    }
  }
  networkDispatchers.RequestDispatcher = RequestDispatcher;
  class ResponseDispatcher extends _dispatcher.Dispatcher {
    static from(scope, response) {
      const result = (0, _dispatcher.existingDispatcher)(response);
      const requestDispatcher = RequestDispatcher.from(scope, response.request());
      return result || new ResponseDispatcher(requestDispatcher, response);
    }
    static fromNullable(scope, response) {
      return response ? ResponseDispatcher.from(scope, response) : void 0;
    }
    constructor(scope, response) {
      super(scope, response, "Response", {
        // TODO: responses in popups can point to non-reported requests.
        request: scope,
        url: response.url(),
        status: response.status(),
        statusText: response.statusText(),
        headers: response.headers(),
        timing: response.timing(),
        fromServiceWorker: response.fromServiceWorker()
      });
      this._type_Response = true;
    }
    async body() {
      return {
        binary: await this._object.body()
      };
    }
    async securityDetails() {
      return {
        value: await this._object.securityDetails() || void 0
      };
    }
    async serverAddr() {
      return {
        value: await this._object.serverAddr() || void 0
      };
    }
    async rawResponseHeaders(params) {
      return {
        headers: await this._object.rawResponseHeaders()
      };
    }
    async sizes(params) {
      return {
        sizes: await this._object.sizes()
      };
    }
  }
  networkDispatchers.ResponseDispatcher = ResponseDispatcher;
  class RouteDispatcher extends _dispatcher.Dispatcher {
    static from(scope, route) {
      const result = (0, _dispatcher.existingDispatcher)(route);
      return result || new RouteDispatcher(scope, route);
    }
    constructor(scope, route) {
      super(scope, route, "Route", {
        // Context route can point to a non-reported request, so we send the request in the initializer.
        request: scope
      });
      this._type_Route = true;
    }
    async continue(params, metadata) {
      await this._object.continue({
        url: params.url,
        method: params.method,
        headers: params.headers,
        postData: params.postData,
        isFallback: params.isFallback
      });
    }
    async fulfill(params, metadata) {
      await this._object.fulfill(params);
    }
    async abort(params, metadata) {
      await this._object.abort(params.errorCode || "failed");
    }
    async redirectNavigationRequest(params) {
      await this._object.redirectNavigationRequest(params.url);
    }
  }
  networkDispatchers.RouteDispatcher = RouteDispatcher;
  class WebSocketDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, webSocket2) {
      super(scope, webSocket2, "WebSocket", {
        url: webSocket2.url()
      });
      this._type_EventTarget = true;
      this._type_WebSocket = true;
      this.addObjectListener(_network.WebSocket.Events.FrameSent, (event) => this._dispatchEvent("frameSent", event));
      this.addObjectListener(_network.WebSocket.Events.FrameReceived, (event) => this._dispatchEvent("frameReceived", event));
      this.addObjectListener(_network.WebSocket.Events.SocketError, (error) => this._dispatchEvent("socketError", {
        error
      }));
      this.addObjectListener(_network.WebSocket.Events.Close, () => this._dispatchEvent("close", {}));
    }
  }
  networkDispatchers.WebSocketDispatcher = WebSocketDispatcher;
  class APIRequestContextDispatcher extends _dispatcher.Dispatcher {
    static from(scope, request) {
      const result = (0, _dispatcher.existingDispatcher)(request);
      return result || new APIRequestContextDispatcher(scope, request);
    }
    static fromNullable(scope, request) {
      return request ? APIRequestContextDispatcher.from(scope, request) : void 0;
    }
    constructor(parentScope, request) {
      const tracing2 = _tracingDispatcher.TracingDispatcher.from(parentScope, request.tracing());
      super(parentScope, request, "APIRequestContext", {
        tracing: tracing2
      });
      this._type_APIRequestContext = true;
      this.adopt(tracing2);
    }
    async storageState(params) {
      return this._object.storageState(params.indexedDB);
    }
    async dispose(params, metadata) {
      metadata.potentiallyClosesScope = true;
      await this._object.dispose(params);
      this._dispose();
    }
    async fetch(params, metadata) {
      const fetchResponse = await this._object.fetch(params, metadata);
      return {
        response: {
          url: fetchResponse.url,
          status: fetchResponse.status,
          statusText: fetchResponse.statusText,
          headers: fetchResponse.headers,
          fetchUid: fetchResponse.fetchUid
        }
      };
    }
    async fetchResponseBody(params) {
      return {
        binary: this._object.fetchResponses.get(params.fetchUid)
      };
    }
    async fetchLog(params) {
      const log2 = this._object.fetchLog.get(params.fetchUid) || [];
      return {
        log: log2
      };
    }
    async disposeAPIResponse(params) {
      this._object.disposeResponse(params.fetchUid);
    }
  }
  networkDispatchers.APIRequestContextDispatcher = APIRequestContextDispatcher;
  return networkDispatchers;
}
var hasRequiredFrameDispatcher;
function requireFrameDispatcher() {
  if (hasRequiredFrameDispatcher) return frameDispatcher;
  hasRequiredFrameDispatcher = 1;
  Object.defineProperty(frameDispatcher, "__esModule", {
    value: true
  });
  frameDispatcher.FrameDispatcher = void 0;
  var _frames = requireFrames();
  var _dispatcher = requireDispatcher();
  var _elementHandlerDispatcher = requireElementHandlerDispatcher();
  var _jsHandleDispatcher = requireJsHandleDispatcher();
  var _networkDispatchers = requireNetworkDispatchers();
  var _ariaSnapshot = requireAriaSnapshot();
  var _utilsBundle = requireUtilsBundle();
  class FrameDispatcher extends _dispatcher.Dispatcher {
    static from(scope, frame2) {
      const result = (0, _dispatcher.existingDispatcher)(frame2);
      return result || new FrameDispatcher(scope, frame2);
    }
    static fromNullable(scope, frame2) {
      if (!frame2) return;
      return FrameDispatcher.from(scope, frame2);
    }
    constructor(scope, frame2) {
      const gcBucket = frame2._page.mainFrame() === frame2 ? "MainFrame" : "Frame";
      const pageDispatcher2 = (0, _dispatcher.existingDispatcher)(frame2._page);
      super(pageDispatcher2 || scope, frame2, "Frame", {
        url: frame2.url(),
        name: frame2.name(),
        parentFrame: FrameDispatcher.fromNullable(scope, frame2.parentFrame()),
        loadStates: Array.from(frame2._firedLifecycleEvents)
      }, gcBucket);
      this._type_Frame = true;
      this._frame = void 0;
      this._browserContextDispatcher = void 0;
      this._browserContextDispatcher = scope;
      this._frame = frame2;
      this.addObjectListener(_frames.Frame.Events.AddLifecycle, (lifecycleEvent) => {
        this._dispatchEvent("loadstate", {
          add: lifecycleEvent
        });
      });
      this.addObjectListener(_frames.Frame.Events.RemoveLifecycle, (lifecycleEvent) => {
        this._dispatchEvent("loadstate", {
          remove: lifecycleEvent
        });
      });
      this.addObjectListener(_frames.Frame.Events.InternalNavigation, (event) => {
        if (!event.isPublic) return;
        const params = {
          url: event.url,
          name: event.name,
          error: event.error ? event.error.message : void 0
        };
        if (event.newDocument) params.newDocument = {
          request: _networkDispatchers.RequestDispatcher.fromNullable(this._browserContextDispatcher, event.newDocument.request || null)
        };
        this._dispatchEvent("navigated", params);
      });
    }
    async goto(params, metadata) {
      return {
        response: _networkDispatchers.ResponseDispatcher.fromNullable(this._browserContextDispatcher, await this._frame.goto(metadata, params.url, params))
      };
    }
    async frameElement() {
      return {
        element: _elementHandlerDispatcher.ElementHandleDispatcher.from(this, await this._frame.frameElement())
      };
    }
    async evaluateExpression(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await this._frame.evaluateExpression(params.expression, {
          isFunction: params.isFunction
        }, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async evaluateExpressionHandle(params, metadata) {
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, await this._frame.evaluateExpressionHandle(params.expression, {
          isFunction: params.isFunction
        }, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async waitForSelector(params, metadata) {
      return {
        element: _elementHandlerDispatcher.ElementHandleDispatcher.fromNullable(this, await this._frame.waitForSelector(metadata, params.selector, params))
      };
    }
    async dispatchEvent(params, metadata) {
      return this._frame.dispatchEvent(metadata, params.selector, params.type, (0, _jsHandleDispatcher.parseArgument)(params.eventInit), params);
    }
    async evalOnSelector(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await this._frame.evalOnSelector(params.selector, !!params.strict, params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async evalOnSelectorAll(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await this._frame.evalOnSelectorAll(params.selector, params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async querySelector(params, metadata) {
      return {
        element: _elementHandlerDispatcher.ElementHandleDispatcher.fromNullable(this, await this._frame.querySelector(params.selector, params))
      };
    }
    async querySelectorAll(params, metadata) {
      const elements = await this._frame.querySelectorAll(params.selector);
      return {
        elements: elements.map((e2) => _elementHandlerDispatcher.ElementHandleDispatcher.from(this, e2))
      };
    }
    async queryCount(params) {
      return {
        value: await this._frame.queryCount(params.selector)
      };
    }
    async content() {
      return {
        value: await this._frame.content()
      };
    }
    async setContent(params, metadata) {
      return await this._frame.setContent(metadata, params.html, params);
    }
    async addScriptTag(params, metadata) {
      return {
        element: _elementHandlerDispatcher.ElementHandleDispatcher.from(this, await this._frame.addScriptTag(params))
      };
    }
    async addStyleTag(params, metadata) {
      return {
        element: _elementHandlerDispatcher.ElementHandleDispatcher.from(this, await this._frame.addStyleTag(params))
      };
    }
    async click(params, metadata) {
      metadata.potentiallyClosesScope = true;
      return await this._frame.click(metadata, params.selector, params);
    }
    async dblclick(params, metadata) {
      return await this._frame.dblclick(metadata, params.selector, params);
    }
    async dragAndDrop(params, metadata) {
      return await this._frame.dragAndDrop(metadata, params.source, params.target, params);
    }
    async tap(params, metadata) {
      return await this._frame.tap(metadata, params.selector, params);
    }
    async fill(params, metadata) {
      return await this._frame.fill(metadata, params.selector, params.value, params);
    }
    async focus(params, metadata) {
      await this._frame.focus(metadata, params.selector, params);
    }
    async blur(params, metadata) {
      await this._frame.blur(metadata, params.selector, params);
    }
    async textContent(params, metadata) {
      const value = await this._frame.textContent(metadata, params.selector, params);
      return {
        value: value === null ? void 0 : value
      };
    }
    async innerText(params, metadata) {
      return {
        value: await this._frame.innerText(metadata, params.selector, params)
      };
    }
    async innerHTML(params, metadata) {
      return {
        value: await this._frame.innerHTML(metadata, params.selector, params)
      };
    }
    async getAttribute(params, metadata) {
      const value = await this._frame.getAttribute(metadata, params.selector, params.name, params);
      return {
        value: value === null ? void 0 : value
      };
    }
    async inputValue(params, metadata) {
      const value = await this._frame.inputValue(metadata, params.selector, params);
      return {
        value
      };
    }
    async isChecked(params, metadata) {
      return {
        value: await this._frame.isChecked(metadata, params.selector, params)
      };
    }
    async isDisabled(params, metadata) {
      return {
        value: await this._frame.isDisabled(metadata, params.selector, params)
      };
    }
    async isEditable(params, metadata) {
      return {
        value: await this._frame.isEditable(metadata, params.selector, params)
      };
    }
    async isEnabled(params, metadata) {
      return {
        value: await this._frame.isEnabled(metadata, params.selector, params)
      };
    }
    async isHidden(params, metadata) {
      return {
        value: await this._frame.isHidden(metadata, params.selector, params)
      };
    }
    async isVisible(params, metadata) {
      return {
        value: await this._frame.isVisible(metadata, params.selector, params)
      };
    }
    async hover(params, metadata) {
      return await this._frame.hover(metadata, params.selector, params);
    }
    async selectOption(params, metadata) {
      const elements = (params.elements || []).map((e2) => e2._elementHandle);
      return {
        values: await this._frame.selectOption(metadata, params.selector, elements, params.options || [], params)
      };
    }
    async setInputFiles(params, metadata) {
      return await this._frame.setInputFiles(metadata, params.selector, params);
    }
    async type(params, metadata) {
      return await this._frame.type(metadata, params.selector, params.text, params);
    }
    async press(params, metadata) {
      return await this._frame.press(metadata, params.selector, params.key, params);
    }
    async check(params, metadata) {
      return await this._frame.check(metadata, params.selector, params);
    }
    async uncheck(params, metadata) {
      return await this._frame.uncheck(metadata, params.selector, params);
    }
    async waitForTimeout(params, metadata) {
      return await this._frame.waitForTimeout(metadata, params.timeout);
    }
    async waitForFunction(params, metadata) {
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, await this._frame._waitForFunctionExpression(metadata, params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg), params))
      };
    }
    async title(params, metadata) {
      return {
        value: await this._frame.title()
      };
    }
    async highlight(params, metadata) {
      return await this._frame.highlight(params.selector);
    }
    async expect(params, metadata) {
      metadata.potentiallyClosesScope = true;
      let expectedValue = params.expectedValue ? (0, _jsHandleDispatcher.parseArgument)(params.expectedValue) : void 0;
      if (params.expression === "to.match.aria" && expectedValue) expectedValue = (0, _ariaSnapshot.parseAriaSnapshotUnsafe)(_utilsBundle.yaml, expectedValue);
      const result = await this._frame.expect(metadata, params.selector, {
        ...params,
        expectedValue
      });
      if (result.received !== void 0) result.received = (0, _jsHandleDispatcher.serializeResult)(result.received);
      return result;
    }
    async ariaSnapshot(params, metadata) {
      return {
        snapshot: await this._frame.ariaSnapshot(metadata, params.selector, params)
      };
    }
  }
  frameDispatcher.FrameDispatcher = FrameDispatcher;
  return frameDispatcher;
}
var hasRequiredElementHandlerDispatcher;
function requireElementHandlerDispatcher() {
  if (hasRequiredElementHandlerDispatcher) return elementHandlerDispatcher;
  hasRequiredElementHandlerDispatcher = 1;
  Object.defineProperty(elementHandlerDispatcher, "__esModule", {
    value: true
  });
  elementHandlerDispatcher.ElementHandleDispatcher = void 0;
  var _browserContextDispatcher = requireBrowserContextDispatcher();
  var _dispatcher = requireDispatcher();
  var _frameDispatcher = requireFrameDispatcher();
  var _jsHandleDispatcher = requireJsHandleDispatcher();
  var _pageDispatcher = requirePageDispatcher();
  class ElementHandleDispatcher extends _jsHandleDispatcher.JSHandleDispatcher {
    static from(scope, handle) {
      return (0, _dispatcher.existingDispatcher)(handle) || new ElementHandleDispatcher(scope, handle);
    }
    static fromNullable(scope, handle) {
      if (!handle) return void 0;
      return (0, _dispatcher.existingDispatcher)(handle) || new ElementHandleDispatcher(scope, handle);
    }
    static fromJSHandle(scope, handle) {
      const result = (0, _dispatcher.existingDispatcher)(handle);
      if (result) return result;
      return handle.asElement() ? new ElementHandleDispatcher(scope, handle.asElement()) : new _jsHandleDispatcher.JSHandleDispatcher(scope, handle);
    }
    constructor(scope, elementHandle2) {
      super(scope, elementHandle2);
      this._type_ElementHandle = true;
      this._elementHandle = void 0;
      this._elementHandle = elementHandle2;
    }
    async ownerFrame(params, metadata) {
      const frame2 = await this._elementHandle.ownerFrame();
      return {
        frame: frame2 ? _frameDispatcher.FrameDispatcher.from(this._browserContextDispatcher(), frame2) : void 0
      };
    }
    async contentFrame(params, metadata) {
      const frame2 = await this._elementHandle.contentFrame();
      return {
        frame: frame2 ? _frameDispatcher.FrameDispatcher.from(this._browserContextDispatcher(), frame2) : void 0
      };
    }
    async generateLocatorString(params, metadata) {
      return {
        value: await this._elementHandle.generateLocatorString()
      };
    }
    async getAttribute(params, metadata) {
      const value = await this._elementHandle.getAttribute(metadata, params.name);
      return {
        value: value === null ? void 0 : value
      };
    }
    async inputValue(params, metadata) {
      const value = await this._elementHandle.inputValue(metadata);
      return {
        value
      };
    }
    async textContent(params, metadata) {
      const value = await this._elementHandle.textContent(metadata);
      return {
        value: value === null ? void 0 : value
      };
    }
    async innerText(params, metadata) {
      return {
        value: await this._elementHandle.innerText(metadata)
      };
    }
    async innerHTML(params, metadata) {
      return {
        value: await this._elementHandle.innerHTML(metadata)
      };
    }
    async isChecked(params, metadata) {
      return {
        value: await this._elementHandle.isChecked(metadata)
      };
    }
    async isDisabled(params, metadata) {
      return {
        value: await this._elementHandle.isDisabled(metadata)
      };
    }
    async isEditable(params, metadata) {
      return {
        value: await this._elementHandle.isEditable(metadata)
      };
    }
    async isEnabled(params, metadata) {
      return {
        value: await this._elementHandle.isEnabled(metadata)
      };
    }
    async isHidden(params, metadata) {
      return {
        value: await this._elementHandle.isHidden(metadata)
      };
    }
    async isVisible(params, metadata) {
      return {
        value: await this._elementHandle.isVisible(metadata)
      };
    }
    async dispatchEvent(params, metadata) {
      await this._elementHandle.dispatchEvent(metadata, params.type, (0, _jsHandleDispatcher.parseArgument)(params.eventInit));
    }
    async scrollIntoViewIfNeeded(params, metadata) {
      await this._elementHandle.scrollIntoViewIfNeeded(metadata, params);
    }
    async hover(params, metadata) {
      return await this._elementHandle.hover(metadata, params);
    }
    async click(params, metadata) {
      return await this._elementHandle.click(metadata, params);
    }
    async dblclick(params, metadata) {
      return await this._elementHandle.dblclick(metadata, params);
    }
    async tap(params, metadata) {
      return await this._elementHandle.tap(metadata, params);
    }
    async selectOption(params, metadata) {
      const elements = (params.elements || []).map((e2) => e2._elementHandle);
      return {
        values: await this._elementHandle.selectOption(metadata, elements, params.options || [], params)
      };
    }
    async fill(params, metadata) {
      return await this._elementHandle.fill(metadata, params.value, params);
    }
    async selectText(params, metadata) {
      await this._elementHandle.selectText(metadata, params);
    }
    async setInputFiles(params, metadata) {
      return await this._elementHandle.setInputFiles(metadata, params);
    }
    async focus(params, metadata) {
      await this._elementHandle.focus(metadata);
    }
    async type(params, metadata) {
      return await this._elementHandle.type(metadata, params.text, params);
    }
    async press(params, metadata) {
      return await this._elementHandle.press(metadata, params.key, params);
    }
    async check(params, metadata) {
      return await this._elementHandle.check(metadata, params);
    }
    async uncheck(params, metadata) {
      return await this._elementHandle.uncheck(metadata, params);
    }
    async boundingBox(params, metadata) {
      const value = await this._elementHandle.boundingBox();
      return {
        value: value || void 0
      };
    }
    async screenshot(params, metadata) {
      const mask = (params.mask || []).map(({
        frame: frame2,
        selector
      }) => ({
        frame: frame2._object,
        selector
      }));
      return {
        binary: await this._elementHandle.screenshot(metadata, {
          ...params,
          mask
        })
      };
    }
    async querySelector(params, metadata) {
      const handle = await this._elementHandle.querySelector(params.selector, params);
      return {
        element: ElementHandleDispatcher.fromNullable(this.parentScope(), handle)
      };
    }
    async querySelectorAll(params, metadata) {
      const elements = await this._elementHandle.querySelectorAll(params.selector);
      return {
        elements: elements.map((e2) => ElementHandleDispatcher.from(this.parentScope(), e2))
      };
    }
    async evalOnSelector(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await this._elementHandle.evalOnSelector(params.selector, !!params.strict, params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async evalOnSelectorAll(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await this._elementHandle.evalOnSelectorAll(params.selector, params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async waitForElementState(params, metadata) {
      await this._elementHandle.waitForElementState(metadata, params.state, params);
    }
    async waitForSelector(params, metadata) {
      return {
        element: ElementHandleDispatcher.fromNullable(this.parentScope(), await this._elementHandle.waitForSelector(metadata, params.selector, params))
      };
    }
    _browserContextDispatcher() {
      const scope = this.parentScope();
      if (scope instanceof _browserContextDispatcher.BrowserContextDispatcher) return scope;
      if (scope instanceof _pageDispatcher.PageDispatcher) return scope.parentScope();
      if (scope instanceof _pageDispatcher.WorkerDispatcher || scope instanceof _frameDispatcher.FrameDispatcher) {
        const parentScope = scope.parentScope();
        if (parentScope instanceof _browserContextDispatcher.BrowserContextDispatcher) return parentScope;
        return parentScope.parentScope();
      }
      throw new Error("ElementHandle belongs to unexpected scope");
    }
  }
  elementHandlerDispatcher.ElementHandleDispatcher = ElementHandleDispatcher;
  return elementHandlerDispatcher;
}
var webSocketRouteDispatcher = {};
var webSocketMockSource = {};
var hasRequiredWebSocketMockSource;
function requireWebSocketMockSource() {
  if (hasRequiredWebSocketMockSource) return webSocketMockSource;
  hasRequiredWebSocketMockSource = 1;
  Object.defineProperty(webSocketMockSource, "__esModule", {
    value: true
  });
  webSocketMockSource.source = void 0;
  webSocketMockSource.source = `
var __commonJS = obj => {
  let required = false;
  let result;
  return function __require() {
    if (!required) {
      required = true;
      let fn;
      for (const name in obj) { fn = obj[name]; break; }
      const module = { exports: {} };
      fn(module.exports, module);
      result = module.exports;
    }
    return result;
  }
};
var __export = (target, all) => {for (var name in all) target[name] = all[name];};
var __toESM = mod => ({ ...mod, 'default': mod });
var __toCommonJS = mod => ({ ...mod, __esModule: true });


// packages/playwright-core/src/server/injected/webSocketMock.ts
var webSocketMock_exports = {};
__export(webSocketMock_exports, {
  inject: () => inject
});
module.exports = __toCommonJS(webSocketMock_exports);
function inject(globalThis) {
  if (globalThis.__pwWebSocketDispatch)
    return;
  function generateId() {
    const bytes = new Uint8Array(32);
    globalThis.crypto.getRandomValues(bytes);
    const hex = "0123456789abcdef";
    return [...bytes].map((value) => {
      const high = Math.floor(value / 16);
      const low = value % 16;
      return hex[high] + hex[low];
    }).join("");
  }
  function bufferToData(b) {
    let s = "";
    for (let i = 0; i < b.length; i++)
      s += String.fromCharCode(b[i]);
    return { data: globalThis.btoa(s), isBase64: true };
  }
  function stringToBuffer(s) {
    s = globalThis.atob(s);
    const b = new Uint8Array(s.length);
    for (let i = 0; i < s.length; i++)
      b[i] = s.charCodeAt(i);
    return b.buffer;
  }
  function messageToData(message, cb) {
    if (message instanceof globalThis.Blob)
      return message.arrayBuffer().then((buffer) => cb(bufferToData(new Uint8Array(buffer))));
    if (typeof message === "string")
      return cb({ data: message, isBase64: false });
    if (ArrayBuffer.isView(message))
      return cb(bufferToData(new Uint8Array(message.buffer, message.byteOffset, message.byteLength)));
    return cb(bufferToData(new Uint8Array(message)));
  }
  function dataToMessage(data, binaryType) {
    if (!data.isBase64)
      return data.data;
    const buffer = stringToBuffer(data.data);
    return binaryType === "arraybuffer" ? buffer : new Blob([buffer]);
  }
  const binding = globalThis.__pwWebSocketBinding;
  const NativeWebSocket = globalThis.WebSocket;
  const idToWebSocket = /* @__PURE__ */ new Map();
  globalThis.__pwWebSocketDispatch = (request) => {
    const ws = idToWebSocket.get(request.id);
    if (!ws)
      return;
    if (request.type === "connect")
      ws._apiConnect();
    if (request.type === "passthrough")
      ws._apiPassThrough();
    if (request.type === "ensureOpened")
      ws._apiEnsureOpened();
    if (request.type === "sendToPage")
      ws._apiSendToPage(dataToMessage(request.data, ws.binaryType));
    if (request.type === "closePage")
      ws._apiClosePage(request.code, request.reason, request.wasClean);
    if (request.type === "sendToServer")
      ws._apiSendToServer(dataToMessage(request.data, ws.binaryType));
    if (request.type === "closeServer")
      ws._apiCloseServer(request.code, request.reason, request.wasClean);
  };
  const _WebSocketMock = class _WebSocketMock extends EventTarget {
    constructor(url, protocols) {
      super();
      // WebSocket.CLOSED
      this.CONNECTING = 0;
      // WebSocket.CONNECTING
      this.OPEN = 1;
      // WebSocket.OPEN
      this.CLOSING = 2;
      // WebSocket.CLOSING
      this.CLOSED = 3;
      // WebSocket.CLOSED
      this._oncloseListener = null;
      this._onerrorListener = null;
      this._onmessageListener = null;
      this._onopenListener = null;
      this.bufferedAmount = 0;
      this.extensions = "";
      this.protocol = "";
      this.readyState = 0;
      this._origin = "";
      this._passthrough = false;
      this._wsBufferedMessages = [];
      this._binaryType = "blob";
      this.url = typeof url === "string" ? url : url.href;
      try {
        this.url = new URL(url).href;
        this._origin = new URL(url).origin;
      } catch {
      }
      this._protocols = protocols;
      this._id = generateId();
      idToWebSocket.set(this._id, this);
      binding({ type: "onCreate", id: this._id, url: this.url });
    }
    // --- native WebSocket implementation ---
    get binaryType() {
      return this._binaryType;
    }
    set binaryType(type) {
      this._binaryType = type;
      if (this._ws)
        this._ws.binaryType = type;
    }
    get onclose() {
      return this._oncloseListener;
    }
    set onclose(listener) {
      if (this._oncloseListener)
        this.removeEventListener("close", this._oncloseListener);
      this._oncloseListener = listener;
      if (this._oncloseListener)
        this.addEventListener("close", this._oncloseListener);
    }
    get onerror() {
      return this._onerrorListener;
    }
    set onerror(listener) {
      if (this._onerrorListener)
        this.removeEventListener("error", this._onerrorListener);
      this._onerrorListener = listener;
      if (this._onerrorListener)
        this.addEventListener("error", this._onerrorListener);
    }
    get onopen() {
      return this._onopenListener;
    }
    set onopen(listener) {
      if (this._onopenListener)
        this.removeEventListener("open", this._onopenListener);
      this._onopenListener = listener;
      if (this._onopenListener)
        this.addEventListener("open", this._onopenListener);
    }
    get onmessage() {
      return this._onmessageListener;
    }
    set onmessage(listener) {
      if (this._onmessageListener)
        this.removeEventListener("message", this._onmessageListener);
      this._onmessageListener = listener;
      if (this._onmessageListener)
        this.addEventListener("message", this._onmessageListener);
    }
    send(message) {
      if (this.readyState === _WebSocketMock.CONNECTING)
        throw new DOMException(\`Failed to execute 'send' on 'WebSocket': Still in CONNECTING state.\`);
      if (this.readyState !== _WebSocketMock.OPEN)
        throw new DOMException(\`WebSocket is already in CLOSING or CLOSED state.\`);
      if (this._passthrough) {
        if (this._ws)
          this._apiSendToServer(message);
      } else {
        messageToData(message, (data) => binding({ type: "onMessageFromPage", id: this._id, data }));
      }
    }
    close(code, reason) {
      if (code !== void 0 && code !== 1e3 && (code < 3e3 || code > 4999))
        throw new DOMException(\`Failed to execute 'close' on 'WebSocket': The close code must be either 1000, or between 3000 and 4999. \${code} is neither.\`);
      if (this.readyState === _WebSocketMock.OPEN || this.readyState === _WebSocketMock.CONNECTING)
        this.readyState = _WebSocketMock.CLOSING;
      if (this._passthrough)
        this._apiCloseServer(code, reason, true);
      else
        binding({ type: "onClosePage", id: this._id, code, reason, wasClean: true });
    }
    // --- methods called from the routing API ---
    _apiEnsureOpened() {
      if (!this._ws)
        this._ensureOpened();
    }
    _apiSendToPage(message) {
      this._ensureOpened();
      if (this.readyState !== _WebSocketMock.OPEN)
        throw new DOMException(\`WebSocket is already in CLOSING or CLOSED state.\`);
      this.dispatchEvent(new MessageEvent("message", { data: message, origin: this._origin, cancelable: true }));
    }
    _apiSendToServer(message) {
      if (!this._ws)
        throw new Error("Cannot send a message before connecting to the server");
      if (this._ws.readyState === _WebSocketMock.CONNECTING)
        this._wsBufferedMessages.push(message);
      else
        this._ws.send(message);
    }
    _apiConnect() {
      if (this._ws)
        throw new Error("Can only connect to the server once");
      this._ws = new NativeWebSocket(this.url, this._protocols);
      this._ws.binaryType = this._binaryType;
      this._ws.onopen = () => {
        for (const message of this._wsBufferedMessages)
          this._ws.send(message);
        this._wsBufferedMessages = [];
        this._ensureOpened();
      };
      this._ws.onclose = (event) => {
        this._onWSClose(event.code, event.reason, event.wasClean);
      };
      this._ws.onmessage = (event) => {
        if (this._passthrough)
          this._apiSendToPage(event.data);
        else
          messageToData(event.data, (data) => binding({ type: "onMessageFromServer", id: this._id, data }));
      };
      this._ws.onerror = () => {
        const event = new Event("error", { cancelable: true });
        this.dispatchEvent(event);
      };
    }
    // This method connects to the server, and passes all messages through,
    // as if WebSocketMock was not engaged.
    _apiPassThrough() {
      this._passthrough = true;
      this._apiConnect();
    }
    _apiCloseServer(code, reason, wasClean) {
      if (!this._ws) {
        this._onWSClose(code, reason, wasClean);
        return;
      }
      if (this._ws.readyState === _WebSocketMock.CONNECTING || this._ws.readyState === _WebSocketMock.OPEN)
        this._ws.close(code, reason);
    }
    _apiClosePage(code, reason, wasClean) {
      if (this.readyState === _WebSocketMock.CLOSED)
        return;
      this.readyState = _WebSocketMock.CLOSED;
      this.dispatchEvent(new CloseEvent("close", { code, reason, wasClean, cancelable: true }));
      this._maybeCleanup();
      if (this._passthrough)
        this._apiCloseServer(code, reason, wasClean);
      else
        binding({ type: "onClosePage", id: this._id, code, reason, wasClean });
    }
    // --- internals ---
    _ensureOpened() {
      var _a;
      if (this.readyState !== _WebSocketMock.CONNECTING)
        return;
      this.extensions = ((_a = this._ws) == null ? void 0 : _a.extensions) || "";
      if (this._ws)
        this.protocol = this._ws.protocol;
      else if (Array.isArray(this._protocols))
        this.protocol = this._protocols[0] || "";
      else
        this.protocol = this._protocols || "";
      this.readyState = _WebSocketMock.OPEN;
      this.dispatchEvent(new Event("open", { cancelable: true }));
    }
    _onWSClose(code, reason, wasClean) {
      if (this._passthrough)
        this._apiClosePage(code, reason, wasClean);
      else
        binding({ type: "onCloseServer", id: this._id, code, reason, wasClean });
      if (this._ws) {
        this._ws.onopen = null;
        this._ws.onclose = null;
        this._ws.onmessage = null;
        this._ws.onerror = null;
        this._ws = void 0;
        this._wsBufferedMessages = [];
      }
      this._maybeCleanup();
    }
    _maybeCleanup() {
      if (this.readyState === _WebSocketMock.CLOSED && !this._ws)
        idToWebSocket.delete(this._id);
    }
  };
  _WebSocketMock.CONNECTING = 0;
  // WebSocket.CONNECTING
  _WebSocketMock.OPEN = 1;
  // WebSocket.OPEN
  _WebSocketMock.CLOSING = 2;
  // WebSocket.CLOSING
  _WebSocketMock.CLOSED = 3;
  let WebSocketMock = _WebSocketMock;
  globalThis.WebSocket = class WebSocket extends WebSocketMock {
  };
}
`;
  return webSocketMockSource;
}
var hasRequiredWebSocketRouteDispatcher;
function requireWebSocketRouteDispatcher() {
  if (hasRequiredWebSocketRouteDispatcher) return webSocketRouteDispatcher;
  hasRequiredWebSocketRouteDispatcher = 1;
  Object.defineProperty(webSocketRouteDispatcher, "__esModule", {
    value: true
  });
  webSocketRouteDispatcher.WebSocketRouteDispatcher = void 0;
  var _page = requirePage$1();
  var _dispatcher = requireDispatcher();
  var _pageDispatcher = requirePageDispatcher();
  var webSocketMockSource2 = _interopRequireWildcard(requireWebSocketMockSource());
  var _crypto = requireCrypto();
  var _urlMatch = requireUrlMatch();
  var _eventsHelper = requireEventsHelper();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  class WebSocketRouteDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, id, url, frame2) {
      super(scope, {
        guid: "webSocketRoute@" + (0, _crypto.createGuid)()
      }, "WebSocketRoute", {
        url
      });
      this._type_WebSocketRoute = true;
      this._id = void 0;
      this._frame = void 0;
      this._id = id;
      this._frame = frame2;
      this._eventListeners.push(
        // When the frame navigates or detaches, there will be no more communication
        // from the mock websocket, so pretend like it was closed.
        _eventsHelper.eventsHelper.addEventListener(frame2._page, _page.Page.Events.InternalFrameNavigatedToNewDocument, (frame3) => {
          if (frame3 === this._frame) this._executionContextGone();
        }),
        _eventsHelper.eventsHelper.addEventListener(frame2._page, _page.Page.Events.FrameDetached, (frame3) => {
          if (frame3 === this._frame) this._executionContextGone();
        }),
        _eventsHelper.eventsHelper.addEventListener(frame2._page, _page.Page.Events.Close, () => this._executionContextGone()),
        _eventsHelper.eventsHelper.addEventListener(frame2._page, _page.Page.Events.Crash, () => this._executionContextGone())
      );
      WebSocketRouteDispatcher._idToDispatcher.set(this._id, this);
      scope._dispatchEvent("webSocketRoute", {
        webSocketRoute: this
      });
    }
    static async installIfNeeded(target) {
      const kBindingName = "__pwWebSocketBinding";
      const context = target instanceof _page.Page ? target.context() : target;
      if (!context.hasBinding(kBindingName)) {
        await context.exposeBinding(kBindingName, false, (source, payload) => {
          if (payload.type === "onCreate") {
            const contextDispatcher = (0, _dispatcher.existingDispatcher)(context);
            const pageDispatcher2 = contextDispatcher ? _pageDispatcher.PageDispatcher.fromNullable(contextDispatcher, source.page) : void 0;
            let scope;
            if (pageDispatcher2 && matchesPattern(pageDispatcher2, context._options.baseURL, payload.url)) scope = pageDispatcher2;
            else if (contextDispatcher && matchesPattern(contextDispatcher, context._options.baseURL, payload.url)) scope = contextDispatcher;
            if (scope) {
              new WebSocketRouteDispatcher(scope, payload.id, payload.url, source.frame);
            } else {
              const request = {
                id: payload.id,
                type: "passthrough"
              };
              source.frame.evaluateExpression(`globalThis.__pwWebSocketDispatch(${JSON.stringify(request)})`).catch(() => {
              });
            }
            return;
          }
          const dispatcher2 = WebSocketRouteDispatcher._idToDispatcher.get(payload.id);
          if (payload.type === "onMessageFromPage") dispatcher2 === null || dispatcher2 === void 0 || dispatcher2._dispatchEvent("messageFromPage", {
            message: payload.data.data,
            isBase64: payload.data.isBase64
          });
          if (payload.type === "onMessageFromServer") dispatcher2 === null || dispatcher2 === void 0 || dispatcher2._dispatchEvent("messageFromServer", {
            message: payload.data.data,
            isBase64: payload.data.isBase64
          });
          if (payload.type === "onClosePage") dispatcher2 === null || dispatcher2 === void 0 || dispatcher2._dispatchEvent("closePage", {
            code: payload.code,
            reason: payload.reason,
            wasClean: payload.wasClean
          });
          if (payload.type === "onCloseServer") dispatcher2 === null || dispatcher2 === void 0 || dispatcher2._dispatchEvent("closeServer", {
            code: payload.code,
            reason: payload.reason,
            wasClean: payload.wasClean
          });
        });
      }
      const kInitScriptName = "webSocketMockSource";
      if (!target.initScripts.find((s2) => s2.name === kInitScriptName)) {
        await target.addInitScript(`
        (() => {
          const module = {};
          ${webSocketMockSource2.source}
          (module.exports.inject())(globalThis);
        })();
      `, kInitScriptName);
      }
    }
    async connect(params) {
      await this._evaluateAPIRequest({
        id: this._id,
        type: "connect"
      });
    }
    async ensureOpened(params) {
      await this._evaluateAPIRequest({
        id: this._id,
        type: "ensureOpened"
      });
    }
    async sendToPage(params) {
      await this._evaluateAPIRequest({
        id: this._id,
        type: "sendToPage",
        data: {
          data: params.message,
          isBase64: params.isBase64
        }
      });
    }
    async sendToServer(params) {
      await this._evaluateAPIRequest({
        id: this._id,
        type: "sendToServer",
        data: {
          data: params.message,
          isBase64: params.isBase64
        }
      });
    }
    async closePage(params) {
      await this._evaluateAPIRequest({
        id: this._id,
        type: "closePage",
        code: params.code,
        reason: params.reason,
        wasClean: params.wasClean
      });
    }
    async closeServer(params) {
      await this._evaluateAPIRequest({
        id: this._id,
        type: "closeServer",
        code: params.code,
        reason: params.reason,
        wasClean: params.wasClean
      });
    }
    async _evaluateAPIRequest(request) {
      await this._frame.evaluateExpression(`globalThis.__pwWebSocketDispatch(${JSON.stringify(request)})`).catch(() => {
      });
    }
    _onDispose() {
      WebSocketRouteDispatcher._idToDispatcher.delete(this._id);
    }
    _executionContextGone() {
      if (!this._disposed) {
        this._dispatchEvent("closePage", {
          wasClean: true
        });
        this._dispatchEvent("closeServer", {
          wasClean: true
        });
      }
    }
  }
  webSocketRouteDispatcher.WebSocketRouteDispatcher = WebSocketRouteDispatcher;
  WebSocketRouteDispatcher._idToDispatcher = /* @__PURE__ */ new Map();
  function matchesPattern(dispatcher2, baseURL, url) {
    for (const pattern of dispatcher2._webSocketInterceptionPatterns || []) {
      const urlMatch2 = pattern.regexSource ? new RegExp(pattern.regexSource, pattern.regexFlags) : pattern.glob;
      if ((0, _urlMatch.urlMatches)(baseURL, url, urlMatch2)) return true;
    }
    return false;
  }
  return webSocketRouteDispatcher;
}
var hasRequiredPageDispatcher;
function requirePageDispatcher() {
  if (hasRequiredPageDispatcher) return pageDispatcher;
  hasRequiredPageDispatcher = 1;
  Object.defineProperty(pageDispatcher, "__esModule", {
    value: true
  });
  pageDispatcher.WorkerDispatcher = pageDispatcher.PageDispatcher = pageDispatcher.BindingCallDispatcher = void 0;
  var _page = requirePage$1();
  var _dispatcher = requireDispatcher();
  var _errors = requireErrors$1();
  var _artifactDispatcher = requireArtifactDispatcher();
  var _elementHandlerDispatcher = requireElementHandlerDispatcher();
  var _frameDispatcher = requireFrameDispatcher();
  var _jsHandleDispatcher = requireJsHandleDispatcher();
  var _networkDispatchers = requireNetworkDispatchers();
  var _webSocketRouteDispatcher = requireWebSocketRouteDispatcher();
  var _crypto = requireCrypto();
  var _urlMatch = requireUrlMatch();
  class PageDispatcher extends _dispatcher.Dispatcher {
    static from(parentScope, page2) {
      return PageDispatcher.fromNullable(parentScope, page2);
    }
    static fromNullable(parentScope, page2) {
      if (!page2) return void 0;
      const result = (0, _dispatcher.existingDispatcher)(page2);
      return result || new PageDispatcher(parentScope, page2);
    }
    constructor(parentScope, page2) {
      const mainFrame = _frameDispatcher.FrameDispatcher.from(parentScope, page2.mainFrame());
      super(parentScope, page2, "Page", {
        mainFrame,
        viewportSize: page2.viewportSize() || void 0,
        isClosed: page2.isClosed(),
        opener: PageDispatcher.fromNullable(parentScope, page2.opener())
      });
      this._type_EventTarget = true;
      this._type_Page = true;
      this._page = void 0;
      this._subscriptions = /* @__PURE__ */ new Set();
      this._webSocketInterceptionPatterns = [];
      this.adopt(mainFrame);
      this._page = page2;
      this.addObjectListener(_page.Page.Events.Close, () => {
        this._dispatchEvent("close");
        this._dispose();
      });
      this.addObjectListener(_page.Page.Events.Crash, () => this._dispatchEvent("crash"));
      this.addObjectListener(_page.Page.Events.Download, (download2) => {
        this._dispatchEvent("download", {
          url: download2.url,
          suggestedFilename: download2.suggestedFilename(),
          artifact: _artifactDispatcher.ArtifactDispatcher.from(parentScope, download2.artifact)
        });
      });
      this.addObjectListener(_page.Page.Events.FileChooser, (fileChooser2) => this._dispatchEvent("fileChooser", {
        element: _elementHandlerDispatcher.ElementHandleDispatcher.from(mainFrame, fileChooser2.element()),
        isMultiple: fileChooser2.isMultiple()
      }));
      this.addObjectListener(_page.Page.Events.FrameAttached, (frame2) => this._onFrameAttached(frame2));
      this.addObjectListener(_page.Page.Events.FrameDetached, (frame2) => this._onFrameDetached(frame2));
      this.addObjectListener(_page.Page.Events.LocatorHandlerTriggered, (uid) => this._dispatchEvent("locatorHandlerTriggered", {
        uid
      }));
      this.addObjectListener(_page.Page.Events.WebSocket, (webSocket2) => this._dispatchEvent("webSocket", {
        webSocket: new _networkDispatchers.WebSocketDispatcher(this, webSocket2)
      }));
      this.addObjectListener(_page.Page.Events.Worker, (worker2) => this._dispatchEvent("worker", {
        worker: new WorkerDispatcher(this, worker2)
      }));
      this.addObjectListener(_page.Page.Events.Video, (artifact2) => this._dispatchEvent("video", {
        artifact: _artifactDispatcher.ArtifactDispatcher.from(parentScope, artifact2)
      }));
      if (page2._video) this._dispatchEvent("video", {
        artifact: _artifactDispatcher.ArtifactDispatcher.from(this.parentScope(), page2._video)
      });
      const frames2 = page2._frameManager.frames();
      for (let i = 1; i < frames2.length; i++) this._onFrameAttached(frames2[i]);
    }
    page() {
      return this._page;
    }
    async setDefaultNavigationTimeoutNoReply(params, metadata) {
      this._page.setDefaultNavigationTimeout(params.timeout);
    }
    async setDefaultTimeoutNoReply(params, metadata) {
      this._page.setDefaultTimeout(params.timeout);
    }
    async exposeBinding(params, metadata) {
      await this._page.exposeBinding(params.name, !!params.needsHandle, (source, ...args) => {
        if (this._disposed) return;
        const binding = new BindingCallDispatcher(this, params.name, !!params.needsHandle, source, args);
        this._dispatchEvent("bindingCall", {
          binding
        });
        return binding.promise();
      });
    }
    async setExtraHTTPHeaders(params, metadata) {
      await this._page.setExtraHTTPHeaders(params.headers);
    }
    async reload(params, metadata) {
      return {
        response: _networkDispatchers.ResponseDispatcher.fromNullable(this.parentScope(), await this._page.reload(metadata, params))
      };
    }
    async goBack(params, metadata) {
      return {
        response: _networkDispatchers.ResponseDispatcher.fromNullable(this.parentScope(), await this._page.goBack(metadata, params))
      };
    }
    async goForward(params, metadata) {
      return {
        response: _networkDispatchers.ResponseDispatcher.fromNullable(this.parentScope(), await this._page.goForward(metadata, params))
      };
    }
    async requestGC(params, metadata) {
      await this._page.requestGC();
    }
    async registerLocatorHandler(params, metadata) {
      const uid = this._page.registerLocatorHandler(params.selector, params.noWaitAfter);
      return {
        uid
      };
    }
    async resolveLocatorHandlerNoReply(params, metadata) {
      this._page.resolveLocatorHandler(params.uid, params.remove);
    }
    async unregisterLocatorHandler(params, metadata) {
      this._page.unregisterLocatorHandler(params.uid);
    }
    async emulateMedia(params, metadata) {
      await this._page.emulateMedia({
        media: params.media,
        colorScheme: params.colorScheme,
        reducedMotion: params.reducedMotion,
        forcedColors: params.forcedColors,
        contrast: params.contrast
      });
    }
    async setViewportSize(params, metadata) {
      await this._page.setViewportSize(params.viewportSize);
    }
    async addInitScript(params, metadata) {
      await this._page.addInitScript(params.source);
    }
    async setNetworkInterceptionPatterns(params, metadata) {
      if (!params.patterns.length) {
        await this._page.setClientRequestInterceptor(void 0);
        return;
      }
      const urlMatchers = params.patterns.map((pattern) => pattern.regexSource ? new RegExp(pattern.regexSource, pattern.regexFlags) : pattern.glob);
      await this._page.setClientRequestInterceptor((route, request) => {
        const matchesSome = urlMatchers.some((urlMatch2) => (0, _urlMatch.urlMatches)(this._page._browserContext._options.baseURL, request.url(), urlMatch2));
        if (!matchesSome) return false;
        this._dispatchEvent("route", {
          route: _networkDispatchers.RouteDispatcher.from(_networkDispatchers.RequestDispatcher.from(this.parentScope(), request), route)
        });
        return true;
      });
    }
    async setWebSocketInterceptionPatterns(params, metadata) {
      this._webSocketInterceptionPatterns = params.patterns;
      if (params.patterns.length) await _webSocketRouteDispatcher.WebSocketRouteDispatcher.installIfNeeded(this._page);
    }
    async expectScreenshot(params, metadata) {
      const mask = (params.mask || []).map(({
        frame: frame2,
        selector
      }) => ({
        frame: frame2._object,
        selector
      }));
      const locator2 = params.locator ? {
        frame: params.locator.frame._object,
        selector: params.locator.selector
      } : void 0;
      return await this._page.expectScreenshot(metadata, {
        ...params,
        locator: locator2,
        mask
      });
    }
    async screenshot(params, metadata) {
      const mask = (params.mask || []).map(({
        frame: frame2,
        selector
      }) => ({
        frame: frame2._object,
        selector
      }));
      return {
        binary: await this._page.screenshot(metadata, {
          ...params,
          mask
        })
      };
    }
    async close(params, metadata) {
      if (!params.runBeforeUnload) metadata.potentiallyClosesScope = true;
      await this._page.close(metadata, params);
    }
    async updateSubscription(params) {
      if (params.event === "fileChooser") await this._page.setFileChooserIntercepted(params.enabled);
      if (params.enabled) this._subscriptions.add(params.event);
      else this._subscriptions.delete(params.event);
    }
    async keyboardDown(params, metadata) {
      await this._page.keyboard.down(params.key);
    }
    async keyboardUp(params, metadata) {
      await this._page.keyboard.up(params.key);
    }
    async keyboardInsertText(params, metadata) {
      await this._page.keyboard.insertText(params.text);
    }
    async keyboardType(params, metadata) {
      await this._page.keyboard.type(params.text, params);
    }
    async keyboardPress(params, metadata) {
      await this._page.keyboard.press(params.key, params);
    }
    async mouseMove(params, metadata) {
      await this._page.mouse.move(params.x, params.y, params, metadata);
    }
    async mouseDown(params, metadata) {
      await this._page.mouse.down(params, metadata);
    }
    async mouseUp(params, metadata) {
      await this._page.mouse.up(params, metadata);
    }
    async mouseClick(params, metadata) {
      await this._page.mouse.click(params.x, params.y, params, metadata);
    }
    async mouseWheel(params, metadata) {
      await this._page.mouse.wheel(params.deltaX, params.deltaY);
    }
    async touchscreenTap(params, metadata) {
      await this._page.touchscreen.tap(params.x, params.y, metadata);
    }
    async accessibilitySnapshot(params, metadata) {
      const rootAXNode = await this._page.accessibility.snapshot({
        interestingOnly: params.interestingOnly,
        root: params.root ? params.root._elementHandle : void 0
      });
      return {
        rootAXNode: rootAXNode || void 0
      };
    }
    async pdf(params, metadata) {
      if (!this._page.pdf) throw new Error("PDF generation is only supported for Headless Chromium");
      const buffer2 = await this._page.pdf(params);
      return {
        pdf: buffer2
      };
    }
    async bringToFront(params, metadata) {
      await this._page.bringToFront();
    }
    async startJSCoverage(params, metadata) {
      const coverage2 = this._page.coverage;
      await coverage2.startJSCoverage(params);
    }
    async stopJSCoverage(params, metadata) {
      const coverage2 = this._page.coverage;
      return await coverage2.stopJSCoverage();
    }
    async startCSSCoverage(params, metadata) {
      const coverage2 = this._page.coverage;
      await coverage2.startCSSCoverage(params);
    }
    async stopCSSCoverage(params, metadata) {
      const coverage2 = this._page.coverage;
      return await coverage2.stopCSSCoverage();
    }
    _onFrameAttached(frame2) {
      this._dispatchEvent("frameAttached", {
        frame: _frameDispatcher.FrameDispatcher.from(this.parentScope(), frame2)
      });
    }
    _onFrameDetached(frame2) {
      this._dispatchEvent("frameDetached", {
        frame: _frameDispatcher.FrameDispatcher.from(this.parentScope(), frame2)
      });
    }
    _onDispose() {
      if (!this._page.isClosedOrClosingOrCrashed()) this._page.setClientRequestInterceptor(void 0).catch(() => {
      });
    }
  }
  pageDispatcher.PageDispatcher = PageDispatcher;
  class WorkerDispatcher extends _dispatcher.Dispatcher {
    static fromNullable(scope, worker2) {
      if (!worker2) return void 0;
      const result = (0, _dispatcher.existingDispatcher)(worker2);
      return result || new WorkerDispatcher(scope, worker2);
    }
    constructor(scope, worker2) {
      super(scope, worker2, "Worker", {
        url: worker2.url()
      });
      this._type_Worker = true;
      this.addObjectListener(_page.Worker.Events.Close, () => this._dispatchEvent("close"));
    }
    async evaluateExpression(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await this._object.evaluateExpression(params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async evaluateExpressionHandle(params, metadata) {
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, await this._object.evaluateExpressionHandle(params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
  }
  pageDispatcher.WorkerDispatcher = WorkerDispatcher;
  class BindingCallDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, name, needsHandle, source, args) {
      super(scope, {
        guid: "bindingCall@" + (0, _crypto.createGuid)()
      }, "BindingCall", {
        frame: _frameDispatcher.FrameDispatcher.from(scope.parentScope(), source.frame),
        name,
        args: needsHandle ? void 0 : args.map(_jsHandleDispatcher.serializeResult),
        handle: needsHandle ? _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(scope, args[0]) : void 0
      });
      this._type_BindingCall = true;
      this._resolve = void 0;
      this._reject = void 0;
      this._promise = void 0;
      this._promise = new Promise((resolve2, reject) => {
        this._resolve = resolve2;
        this._reject = reject;
      });
    }
    promise() {
      return this._promise;
    }
    async resolve(params, metadata) {
      this._resolve((0, _jsHandleDispatcher.parseArgument)(params.result));
      this._dispose();
    }
    async reject(params, metadata) {
      this._reject((0, _errors.parseError)(params.error));
      this._dispose();
    }
  }
  pageDispatcher.BindingCallDispatcher = BindingCallDispatcher;
  return pageDispatcher;
}
var hasRequiredDialogDispatcher;
function requireDialogDispatcher() {
  if (hasRequiredDialogDispatcher) return dialogDispatcher;
  hasRequiredDialogDispatcher = 1;
  Object.defineProperty(dialogDispatcher, "__esModule", {
    value: true
  });
  dialogDispatcher.DialogDispatcher = void 0;
  var _dispatcher = requireDispatcher();
  var _pageDispatcher = requirePageDispatcher();
  class DialogDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, dialog2) {
      const page2 = _pageDispatcher.PageDispatcher.fromNullable(scope, dialog2.page().initializedOrUndefined());
      super(page2 || scope, dialog2, "Dialog", {
        page: page2,
        type: dialog2.type(),
        message: dialog2.message(),
        defaultValue: dialog2.defaultValue()
      });
      this._type_Dialog = true;
    }
    async accept(params) {
      await this._object.accept(params.promptText);
    }
    async dismiss() {
      await this._object.dismiss();
    }
  }
  dialogDispatcher.DialogDispatcher = DialogDispatcher;
  return dialogDispatcher;
}
var writableStreamDispatcher = {};
var hasRequiredWritableStreamDispatcher;
function requireWritableStreamDispatcher() {
  if (hasRequiredWritableStreamDispatcher) return writableStreamDispatcher;
  hasRequiredWritableStreamDispatcher = 1;
  Object.defineProperty(writableStreamDispatcher, "__esModule", {
    value: true
  });
  writableStreamDispatcher.WritableStreamDispatcher = void 0;
  var _fs = _interopRequireDefault(require$$0$2);
  var _dispatcher = requireDispatcher();
  var _crypto = requireCrypto();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  class WritableStreamDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, streamOrDirectory, lastModifiedMs) {
      super(scope, {
        guid: "writableStream@" + (0, _crypto.createGuid)(),
        streamOrDirectory
      }, "WritableStream", {});
      this._type_WritableStream = true;
      this._lastModifiedMs = void 0;
      this._lastModifiedMs = lastModifiedMs;
    }
    async write(params) {
      if (typeof this._object.streamOrDirectory === "string") throw new Error("Cannot write to a directory");
      const stream2 = this._object.streamOrDirectory;
      await new Promise((fulfill, reject) => {
        stream2.write(params.binary, (error) => {
          if (error) reject(error);
          else fulfill();
        });
      });
    }
    async close() {
      if (typeof this._object.streamOrDirectory === "string") throw new Error("Cannot close a directory");
      const stream2 = this._object.streamOrDirectory;
      await new Promise((fulfill) => stream2.end(fulfill));
      if (this._lastModifiedMs) await _fs.default.promises.utimes(this.path(), new Date(this._lastModifiedMs), new Date(this._lastModifiedMs));
    }
    path() {
      if (typeof this._object.streamOrDirectory === "string") return this._object.streamOrDirectory;
      return this._object.streamOrDirectory.path;
    }
  }
  writableStreamDispatcher.WritableStreamDispatcher = WritableStreamDispatcher;
  return writableStreamDispatcher;
}
var hasRequiredBrowserContextDispatcher;
function requireBrowserContextDispatcher() {
  if (hasRequiredBrowserContextDispatcher) return browserContextDispatcher;
  hasRequiredBrowserContextDispatcher = 1;
  Object.defineProperty(browserContextDispatcher, "__esModule", {
    value: true
  });
  browserContextDispatcher.BrowserContextDispatcher = void 0;
  var _fs = _interopRequireDefault(require$$0$2);
  var _path2 = _interopRequireDefault(require$$1$1);
  var _browserContext = requireBrowserContext$1();
  var _artifactDispatcher = requireArtifactDispatcher();
  var _cdpSessionDispatcher = requireCdpSessionDispatcher();
  var _dialogDispatcher = requireDialogDispatcher();
  var _dispatcher = requireDispatcher();
  var _elementHandlerDispatcher = requireElementHandlerDispatcher();
  var _networkDispatchers = requireNetworkDispatchers();
  var _pageDispatcher = requirePageDispatcher();
  var _crBrowser = requireCrBrowser();
  var _errors = requireErrors$1();
  var _recorder = requireRecorder();
  var _tracingDispatcher = requireTracingDispatcher();
  var _webSocketRouteDispatcher = requireWebSocketRouteDispatcher();
  var _writableStreamDispatcher = requireWritableStreamDispatcher();
  var _crypto = requireCrypto();
  var _urlMatch = requireUrlMatch();
  var _recorderApp = requireRecorderApp();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  class BrowserContextDispatcher extends _dispatcher.Dispatcher {
    constructor(parentScope, context) {
      const requestContext = _networkDispatchers.APIRequestContextDispatcher.from(parentScope, context.fetchRequest);
      const tracing2 = _tracingDispatcher.TracingDispatcher.from(parentScope, context.tracing);
      super(parentScope, context, "BrowserContext", {
        isChromium: context._browser.options.isChromium,
        isLocalBrowserOnServer: context._browser._isCollocatedWithServer,
        requestContext,
        tracing: tracing2
      });
      this._type_EventTarget = true;
      this._type_BrowserContext = true;
      this._context = void 0;
      this._subscriptions = /* @__PURE__ */ new Set();
      this._webSocketInterceptionPatterns = [];
      this.adopt(requestContext);
      this.adopt(tracing2);
      this._context = context;
      const onVideo = (artifact2) => {
        const artifactDispatcher2 = _artifactDispatcher.ArtifactDispatcher.from(parentScope, artifact2);
        this._dispatchEvent("video", {
          artifact: artifactDispatcher2
        });
      };
      this.addObjectListener(_browserContext.BrowserContext.Events.VideoStarted, onVideo);
      for (const video2 of context._browser._idToVideo.values()) {
        if (video2.context === context) onVideo(video2.artifact);
      }
      for (const page2 of context.pages()) this._dispatchEvent("page", {
        page: _pageDispatcher.PageDispatcher.from(this, page2)
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.Page, (page2) => {
        this._dispatchEvent("page", {
          page: _pageDispatcher.PageDispatcher.from(this, page2)
        });
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.Close, () => {
        this._dispatchEvent("close");
        this._dispose();
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.PageError, (error, page2) => {
        this._dispatchEvent("pageError", {
          error: (0, _errors.serializeError)(error),
          page: _pageDispatcher.PageDispatcher.from(this, page2)
        });
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.Console, (message) => {
        const page2 = message.page();
        if (this._shouldDispatchEvent(page2, "console")) {
          const pageDispatcher2 = _pageDispatcher.PageDispatcher.from(this, page2);
          this._dispatchEvent("console", {
            page: pageDispatcher2,
            type: message.type(),
            text: message.text(),
            args: message.args().map((a) => _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(pageDispatcher2, a)),
            location: message.location()
          });
        }
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.Dialog, (dialog2) => {
        if (this._shouldDispatchEvent(dialog2.page(), "dialog")) this._dispatchEvent("dialog", {
          dialog: new _dialogDispatcher.DialogDispatcher(this, dialog2)
        });
        else dialog2.close().catch(() => {
        });
      });
      if (context._browser.options.name === "chromium") {
        for (const page2 of context.backgroundPages()) this._dispatchEvent("backgroundPage", {
          page: _pageDispatcher.PageDispatcher.from(this, page2)
        });
        this.addObjectListener(_crBrowser.CRBrowserContext.CREvents.BackgroundPage, (page2) => this._dispatchEvent("backgroundPage", {
          page: _pageDispatcher.PageDispatcher.from(this, page2)
        }));
        for (const serviceWorker of context.serviceWorkers()) this._dispatchEvent("serviceWorker", {
          worker: new _pageDispatcher.WorkerDispatcher(this, serviceWorker)
        });
        this.addObjectListener(_crBrowser.CRBrowserContext.CREvents.ServiceWorker, (serviceWorker) => this._dispatchEvent("serviceWorker", {
          worker: new _pageDispatcher.WorkerDispatcher(this, serviceWorker)
        }));
      }
      this.addObjectListener(_browserContext.BrowserContext.Events.Request, (request) => {
        var _request$frame;
        const redirectFromDispatcher = request.redirectedFrom() && (0, _dispatcher.existingDispatcher)(request.redirectedFrom());
        if (!redirectFromDispatcher && !this._shouldDispatchNetworkEvent(request, "request") && !request.isNavigationRequest()) return;
        const requestDispatcher = _networkDispatchers.RequestDispatcher.from(this, request);
        this._dispatchEvent("request", {
          request: requestDispatcher,
          page: _pageDispatcher.PageDispatcher.fromNullable(this, (_request$frame = request.frame()) === null || _request$frame === void 0 ? void 0 : _request$frame._page.initializedOrUndefined())
        });
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.Response, (response) => {
        var _response$frame;
        const requestDispatcher = (0, _dispatcher.existingDispatcher)(response.request());
        if (!requestDispatcher && !this._shouldDispatchNetworkEvent(response.request(), "response")) return;
        this._dispatchEvent("response", {
          response: _networkDispatchers.ResponseDispatcher.from(this, response),
          page: _pageDispatcher.PageDispatcher.fromNullable(this, (_response$frame = response.frame()) === null || _response$frame === void 0 ? void 0 : _response$frame._page.initializedOrUndefined())
        });
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.RequestFailed, (request) => {
        var _request$frame2;
        const requestDispatcher = (0, _dispatcher.existingDispatcher)(request);
        if (!requestDispatcher && !this._shouldDispatchNetworkEvent(request, "requestFailed")) return;
        this._dispatchEvent("requestFailed", {
          request: _networkDispatchers.RequestDispatcher.from(this, request),
          failureText: request._failureText || void 0,
          responseEndTiming: request._responseEndTiming,
          page: _pageDispatcher.PageDispatcher.fromNullable(this, (_request$frame2 = request.frame()) === null || _request$frame2 === void 0 ? void 0 : _request$frame2._page.initializedOrUndefined())
        });
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.RequestFinished, ({
        request,
        response
      }) => {
        var _request$frame3;
        const requestDispatcher = (0, _dispatcher.existingDispatcher)(request);
        if (!requestDispatcher && !this._shouldDispatchNetworkEvent(request, "requestFinished")) return;
        this._dispatchEvent("requestFinished", {
          request: _networkDispatchers.RequestDispatcher.from(this, request),
          response: _networkDispatchers.ResponseDispatcher.fromNullable(this, response),
          responseEndTiming: request._responseEndTiming,
          page: _pageDispatcher.PageDispatcher.fromNullable(this, (_request$frame3 = request.frame()) === null || _request$frame3 === void 0 ? void 0 : _request$frame3._page.initializedOrUndefined())
        });
      });
    }
    _shouldDispatchNetworkEvent(request, event) {
      var _request$frame4;
      return this._shouldDispatchEvent((_request$frame4 = request.frame()) === null || _request$frame4 === void 0 || (_request$frame4 = _request$frame4._page) === null || _request$frame4 === void 0 ? void 0 : _request$frame4.initializedOrUndefined(), event);
    }
    _shouldDispatchEvent(page2, event) {
      if (this._subscriptions.has(event)) return true;
      const pageDispatcher2 = page2 ? (0, _dispatcher.existingDispatcher)(page2) : void 0;
      if (pageDispatcher2 !== null && pageDispatcher2 !== void 0 && pageDispatcher2._subscriptions.has(event)) return true;
      return false;
    }
    async createTempFiles(params) {
      const dir = this._context._browser.options.artifactsDir;
      const tmpDir = _path2.default.join(dir, "upload-" + (0, _crypto.createGuid)());
      const tempDirWithRootName = params.rootDirName ? _path2.default.join(tmpDir, _path2.default.basename(params.rootDirName)) : tmpDir;
      await _fs.default.promises.mkdir(tempDirWithRootName, {
        recursive: true
      });
      this._context._tempDirs.push(tmpDir);
      return {
        rootDir: params.rootDirName ? new _writableStreamDispatcher.WritableStreamDispatcher(this, tempDirWithRootName) : void 0,
        writableStreams: await Promise.all(params.items.map(async (item) => {
          await _fs.default.promises.mkdir(_path2.default.dirname(_path2.default.join(tempDirWithRootName, item.name)), {
            recursive: true
          });
          const file2 = _fs.default.createWriteStream(_path2.default.join(tempDirWithRootName, item.name));
          return new _writableStreamDispatcher.WritableStreamDispatcher(this, file2, item.lastModifiedMs);
        }))
      };
    }
    async setDefaultNavigationTimeoutNoReply(params) {
      this._context.setDefaultNavigationTimeout(params.timeout);
    }
    async setDefaultTimeoutNoReply(params) {
      this._context.setDefaultTimeout(params.timeout);
    }
    async exposeBinding(params) {
      await this._context.exposeBinding(params.name, !!params.needsHandle, (source, ...args) => {
        if (this._disposed) return;
        const pageDispatcher2 = _pageDispatcher.PageDispatcher.from(this, source.page);
        const binding = new _pageDispatcher.BindingCallDispatcher(pageDispatcher2, params.name, !!params.needsHandle, source, args);
        this._dispatchEvent("bindingCall", {
          binding
        });
        return binding.promise();
      });
    }
    async newPage(params, metadata) {
      return {
        page: _pageDispatcher.PageDispatcher.from(this, await this._context.newPage(metadata))
      };
    }
    async cookies(params) {
      return {
        cookies: await this._context.cookies(params.urls)
      };
    }
    async addCookies(params) {
      await this._context.addCookies(params.cookies);
    }
    async clearCookies(params) {
      const nameRe = params.nameRegexSource !== void 0 && params.nameRegexFlags !== void 0 ? new RegExp(params.nameRegexSource, params.nameRegexFlags) : void 0;
      const domainRe = params.domainRegexSource !== void 0 && params.domainRegexFlags !== void 0 ? new RegExp(params.domainRegexSource, params.domainRegexFlags) : void 0;
      const pathRe = params.pathRegexSource !== void 0 && params.pathRegexFlags !== void 0 ? new RegExp(params.pathRegexSource, params.pathRegexFlags) : void 0;
      await this._context.clearCookies({
        name: nameRe || params.name,
        domain: domainRe || params.domain,
        path: pathRe || params.path
      });
    }
    async grantPermissions(params) {
      await this._context.grantPermissions(params.permissions, params.origin);
    }
    async clearPermissions() {
      await this._context.clearPermissions();
    }
    async setGeolocation(params) {
      await this._context.setGeolocation(params.geolocation);
    }
    async setExtraHTTPHeaders(params) {
      await this._context.setExtraHTTPHeaders(params.headers);
    }
    async setOffline(params) {
      await this._context.setOffline(params.offline);
    }
    async setHTTPCredentials(params) {
      await this._context.setHTTPCredentials(params.httpCredentials);
    }
    async addInitScript(params) {
      await this._context.addInitScript(params.source);
    }
    async setNetworkInterceptionPatterns(params) {
      if (!params.patterns.length) {
        await this._context.setRequestInterceptor(void 0);
        return;
      }
      const urlMatchers = params.patterns.map((pattern) => pattern.regexSource ? new RegExp(pattern.regexSource, pattern.regexFlags) : pattern.glob);
      await this._context.setRequestInterceptor((route, request) => {
        const matchesSome = urlMatchers.some((urlMatch2) => (0, _urlMatch.urlMatches)(this._context._options.baseURL, request.url(), urlMatch2));
        if (!matchesSome) return false;
        this._dispatchEvent("route", {
          route: _networkDispatchers.RouteDispatcher.from(_networkDispatchers.RequestDispatcher.from(this, request), route)
        });
        return true;
      });
    }
    async setWebSocketInterceptionPatterns(params, metadata) {
      this._webSocketInterceptionPatterns = params.patterns;
      if (params.patterns.length) await _webSocketRouteDispatcher.WebSocketRouteDispatcher.installIfNeeded(this._context);
    }
    async storageState(params, metadata) {
      return await this._context.storageState(params.indexedDB);
    }
    async close(params, metadata) {
      metadata.potentiallyClosesScope = true;
      await this._context.close(params);
    }
    async enableRecorder(params) {
      await _recorder.Recorder.show(this._context, _recorderApp.RecorderApp.factory(this._context), params);
    }
    async pause(params, metadata) {
    }
    async newCDPSession(params) {
      if (!this._object._browser.options.isChromium) throw new Error(`CDP session is only available in Chromium`);
      if (!params.page && !params.frame || params.page && params.frame) throw new Error(`CDP session must be initiated with either Page or Frame, not none or both`);
      const crBrowserContext = this._object;
      return {
        session: new _cdpSessionDispatcher.CDPSessionDispatcher(this, await crBrowserContext.newCDPSession((params.page ? params.page : params.frame)._object))
      };
    }
    async harStart(params) {
      const harId = await this._context._harStart(params.page ? params.page._object : null, params.options);
      return {
        harId
      };
    }
    async harExport(params) {
      const artifact2 = await this._context._harExport(params.harId);
      if (!artifact2) throw new Error("No HAR artifact. Ensure record.harPath is set.");
      return {
        artifact: _artifactDispatcher.ArtifactDispatcher.from(this, artifact2)
      };
    }
    async clockFastForward(params, metadata) {
      var _ref, _params$ticksString;
      await this._context.clock.fastForward((_ref = (_params$ticksString = params.ticksString) !== null && _params$ticksString !== void 0 ? _params$ticksString : params.ticksNumber) !== null && _ref !== void 0 ? _ref : 0);
    }
    async clockInstall(params, metadata) {
      var _ref2, _params$timeString;
      await this._context.clock.install((_ref2 = (_params$timeString = params.timeString) !== null && _params$timeString !== void 0 ? _params$timeString : params.timeNumber) !== null && _ref2 !== void 0 ? _ref2 : void 0);
    }
    async clockPauseAt(params, metadata) {
      var _ref3, _params$timeString2;
      await this._context.clock.pauseAt((_ref3 = (_params$timeString2 = params.timeString) !== null && _params$timeString2 !== void 0 ? _params$timeString2 : params.timeNumber) !== null && _ref3 !== void 0 ? _ref3 : 0);
    }
    async clockResume(params, metadata) {
      await this._context.clock.resume();
    }
    async clockRunFor(params, metadata) {
      var _ref4, _params$ticksString2;
      await this._context.clock.runFor((_ref4 = (_params$ticksString2 = params.ticksString) !== null && _params$ticksString2 !== void 0 ? _params$ticksString2 : params.ticksNumber) !== null && _ref4 !== void 0 ? _ref4 : 0);
    }
    async clockSetFixedTime(params, metadata) {
      var _ref5, _params$timeString3;
      await this._context.clock.setFixedTime((_ref5 = (_params$timeString3 = params.timeString) !== null && _params$timeString3 !== void 0 ? _params$timeString3 : params.timeNumber) !== null && _ref5 !== void 0 ? _ref5 : 0);
    }
    async clockSetSystemTime(params, metadata) {
      var _ref6, _params$timeString4;
      await this._context.clock.setSystemTime((_ref6 = (_params$timeString4 = params.timeString) !== null && _params$timeString4 !== void 0 ? _params$timeString4 : params.timeNumber) !== null && _ref6 !== void 0 ? _ref6 : 0);
    }
    async updateSubscription(params) {
      if (params.enabled) this._subscriptions.add(params.event);
      else this._subscriptions.delete(params.event);
    }
    _onDispose() {
      if (!this._context.isClosingOrClosed()) this._context.setRequestInterceptor(void 0).catch(() => {
      });
    }
  }
  browserContextDispatcher.BrowserContextDispatcher = BrowserContextDispatcher;
  return browserContextDispatcher;
}
var hasRequiredAndroidDispatcher;
function requireAndroidDispatcher() {
  if (hasRequiredAndroidDispatcher) return androidDispatcher;
  hasRequiredAndroidDispatcher = 1;
  Object.defineProperty(androidDispatcher, "__esModule", {
    value: true
  });
  androidDispatcher.AndroidSocketDispatcher = androidDispatcher.AndroidDispatcher = androidDispatcher.AndroidDeviceDispatcher = void 0;
  var _browserContextDispatcher = requireBrowserContextDispatcher();
  var _dispatcher = requireDispatcher();
  var _android = requireAndroid$1();
  class AndroidDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, android2) {
      super(scope, android2, "Android", {});
      this._type_Android = true;
    }
    async devices(params) {
      const devices = await this._object.devices(params);
      return {
        devices: devices.map((d2) => AndroidDeviceDispatcher.from(this, d2))
      };
    }
    async setDefaultTimeoutNoReply(params) {
      this._object.setDefaultTimeout(params.timeout);
    }
  }
  androidDispatcher.AndroidDispatcher = AndroidDispatcher;
  class AndroidDeviceDispatcher extends _dispatcher.Dispatcher {
    static from(scope, device) {
      const result = (0, _dispatcher.existingDispatcher)(device);
      return result || new AndroidDeviceDispatcher(scope, device);
    }
    constructor(scope, device) {
      super(scope, device, "AndroidDevice", {
        model: device.model,
        serial: device.serial
      });
      this._type_EventTarget = true;
      this._type_AndroidDevice = true;
      for (const webView of device.webViews()) this._dispatchEvent("webViewAdded", {
        webView
      });
      this.addObjectListener(_android.AndroidDevice.Events.WebViewAdded, (webView) => this._dispatchEvent("webViewAdded", {
        webView
      }));
      this.addObjectListener(_android.AndroidDevice.Events.WebViewRemoved, (socketName) => this._dispatchEvent("webViewRemoved", {
        socketName
      }));
      this.addObjectListener(_android.AndroidDevice.Events.Close, (socketName) => this._dispatchEvent("close"));
    }
    async wait(params) {
      await this._object.send("wait", params);
    }
    async fill(params) {
      await this._object.send("click", {
        selector: params.selector
      });
      await this._object.send("fill", params);
    }
    async tap(params) {
      await this._object.send("click", params);
    }
    async drag(params) {
      await this._object.send("drag", params);
    }
    async fling(params) {
      await this._object.send("fling", params);
    }
    async longTap(params) {
      await this._object.send("longClick", params);
    }
    async pinchClose(params) {
      await this._object.send("pinchClose", params);
    }
    async pinchOpen(params) {
      await this._object.send("pinchOpen", params);
    }
    async scroll(params) {
      await this._object.send("scroll", params);
    }
    async swipe(params) {
      await this._object.send("swipe", params);
    }
    async info(params) {
      const info = await this._object.send("info", params);
      fixupAndroidElementInfo(info);
      return {
        info
      };
    }
    async inputType(params) {
      const text = params.text;
      const keyCodes = [];
      for (let i = 0; i < text.length; ++i) {
        const code = keyMap.get(text[i].toUpperCase());
        if (code === void 0) throw new Error("No mapping for " + text[i] + " found");
        keyCodes.push(code);
      }
      await Promise.all(keyCodes.map((keyCode) => this._object.send("inputPress", {
        keyCode
      })));
    }
    async inputPress(params) {
      if (!keyMap.has(params.key)) throw new Error("Unknown key: " + params.key);
      await this._object.send("inputPress", {
        keyCode: keyMap.get(params.key)
      });
    }
    async inputTap(params) {
      await this._object.send("inputClick", params);
    }
    async inputSwipe(params) {
      await this._object.send("inputSwipe", params);
    }
    async inputDrag(params) {
      await this._object.send("inputDrag", params);
    }
    async screenshot(params) {
      return {
        binary: await this._object.screenshot()
      };
    }
    async shell(params) {
      return {
        result: await this._object.shell(params.command)
      };
    }
    async open(params, metadata) {
      const socket = await this._object.open(params.command);
      return {
        socket: new AndroidSocketDispatcher(this, socket)
      };
    }
    async installApk(params) {
      await this._object.installApk(params.file, {
        args: params.args
      });
    }
    async push(params) {
      await this._object.push(params.file, params.path, params.mode);
    }
    async launchBrowser(params) {
      const context = await this._object.launchBrowser(params.pkg, params);
      return {
        context: new _browserContextDispatcher.BrowserContextDispatcher(this, context)
      };
    }
    async close(params) {
      await this._object.close();
    }
    async setDefaultTimeoutNoReply(params) {
      this._object.setDefaultTimeout(params.timeout);
    }
    async connectToWebView(params) {
      return {
        context: new _browserContextDispatcher.BrowserContextDispatcher(this, await this._object.connectToWebView(params.socketName))
      };
    }
  }
  androidDispatcher.AndroidDeviceDispatcher = AndroidDeviceDispatcher;
  class AndroidSocketDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, socket) {
      super(scope, socket, "AndroidSocket", {});
      this._type_AndroidSocket = true;
      this.addObjectListener("data", (data) => this._dispatchEvent("data", {
        data
      }));
      this.addObjectListener("close", () => {
        this._dispatchEvent("close");
        this._dispose();
      });
    }
    async write(params, metadata) {
      await this._object.write(params.data);
    }
    async close(params, metadata) {
      this._object.close();
    }
  }
  androidDispatcher.AndroidSocketDispatcher = AndroidSocketDispatcher;
  const keyMap = /* @__PURE__ */ new Map([["Unknown", 0], ["SoftLeft", 1], ["SoftRight", 2], ["Home", 3], ["Back", 4], ["Call", 5], ["EndCall", 6], ["0", 7], ["1", 8], ["2", 9], ["3", 10], ["4", 11], ["5", 12], ["6", 13], ["7", 14], ["8", 15], ["9", 16], ["Star", 17], ["*", 17], ["Pound", 18], ["#", 18], ["DialUp", 19], ["DialDown", 20], ["DialLeft", 21], ["DialRight", 22], ["DialCenter", 23], ["VolumeUp", 24], ["VolumeDown", 25], ["Power", 26], ["Camera", 27], ["Clear", 28], ["A", 29], ["B", 30], ["C", 31], ["D", 32], ["E", 33], ["F", 34], ["G", 35], ["H", 36], ["I", 37], ["J", 38], ["K", 39], ["L", 40], ["M", 41], ["N", 42], ["O", 43], ["P", 44], ["Q", 45], ["R", 46], ["S", 47], ["T", 48], ["U", 49], ["V", 50], ["W", 51], ["X", 52], ["Y", 53], ["Z", 54], ["Comma", 55], [",", 55], ["Period", 56], [".", 56], ["AltLeft", 57], ["AltRight", 58], ["ShiftLeft", 59], ["ShiftRight", 60], ["Tab", 61], ["	", 61], ["Space", 62], [" ", 62], ["Sym", 63], ["Explorer", 64], ["Envelop", 65], ["Enter", 66], ["Del", 67], ["Grave", 68], ["Minus", 69], ["-", 69], ["Equals", 70], ["=", 70], ["LeftBracket", 71], ["(", 71], ["RightBracket", 72], [")", 72], ["Backslash", 73], ["\\", 73], ["Semicolon", 74], [";", 74], ["Apostrophe", 75], ["`", 75], ["Slash", 76], ["/", 76], ["At", 77], ["@", 77], ["Num", 78], ["HeadsetHook", 79], ["Focus", 80], ["Plus", 81], ["Menu", 82], ["Notification", 83], ["Search", 84], ["ChannelUp", 166], ["ChannelDown", 167], ["AppSwitch", 187], ["Assist", 219], ["Cut", 277], ["Copy", 278], ["Paste", 279]]);
  function fixupAndroidElementInfo(info) {
    info.clazz = info.clazz || "";
    info.pkg = info.pkg || "";
    info.res = info.res || "";
    info.desc = info.desc || "";
    info.text = info.text || "";
    for (const child of info.children || []) fixupAndroidElementInfo(child);
  }
  return androidDispatcher;
}
var browserDispatcher = {};
var hasRequiredBrowserDispatcher;
function requireBrowserDispatcher() {
  if (hasRequiredBrowserDispatcher) return browserDispatcher;
  hasRequiredBrowserDispatcher = 1;
  Object.defineProperty(browserDispatcher, "__esModule", {
    value: true
  });
  browserDispatcher.ConnectedBrowserDispatcher = browserDispatcher.BrowserDispatcher = void 0;
  var _browser = requireBrowser$2();
  var _browserContextDispatcher = requireBrowserContextDispatcher();
  var _cdpSessionDispatcher = requireCdpSessionDispatcher();
  var _dispatcher = requireDispatcher();
  var _browserContext = requireBrowserContext$1();
  var _selectors = requireSelectors$1();
  var _artifactDispatcher = requireArtifactDispatcher();
  class BrowserDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, browser2) {
      super(scope, browser2, "Browser", {
        version: browser2.version(),
        name: browser2.options.name
      });
      this._type_Browser = true;
      this.addObjectListener(_browser.Browser.Events.Disconnected, () => this._didClose());
    }
    _didClose() {
      this._dispatchEvent("close");
      this._dispose();
    }
    async newContext(params, metadata) {
      const context = await this._object.newContext(metadata, params);
      return {
        context: new _browserContextDispatcher.BrowserContextDispatcher(this, context)
      };
    }
    async newContextForReuse(params, metadata) {
      return await newContextForReuse(this._object, this, params, null, metadata);
    }
    async stopPendingOperations(params, metadata) {
      await this._object.stopPendingOperations(params.reason);
    }
    async close(params, metadata) {
      metadata.potentiallyClosesScope = true;
      await this._object.close(params);
    }
    async killForTests(_2, metadata) {
      metadata.potentiallyClosesScope = true;
      await this._object.killForTests();
    }
    async defaultUserAgentForTest() {
      return {
        userAgent: this._object.userAgent()
      };
    }
    async newBrowserCDPSession() {
      if (!this._object.options.isChromium) throw new Error(`CDP session is only available in Chromium`);
      const crBrowser2 = this._object;
      return {
        session: new _cdpSessionDispatcher.CDPSessionDispatcher(this, await crBrowser2.newBrowserCDPSession())
      };
    }
    async startTracing(params) {
      if (!this._object.options.isChromium) throw new Error(`Tracing is only available in Chromium`);
      const crBrowser2 = this._object;
      await crBrowser2.startTracing(params.page ? params.page._object : void 0, params);
    }
    async stopTracing() {
      if (!this._object.options.isChromium) throw new Error(`Tracing is only available in Chromium`);
      const crBrowser2 = this._object;
      return {
        artifact: _artifactDispatcher.ArtifactDispatcher.from(this, await crBrowser2.stopTracing())
      };
    }
  }
  browserDispatcher.BrowserDispatcher = BrowserDispatcher;
  class ConnectedBrowserDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, browser2) {
      super(scope, browser2, "Browser", {
        version: browser2.version(),
        name: browser2.options.name
      });
      this._type_Browser = true;
      this._contexts = /* @__PURE__ */ new Set();
      this.selectors = void 0;
      this.selectors = new _selectors.Selectors();
    }
    async newContext(params, metadata) {
      if (params.recordVideo) params.recordVideo.dir = this._object.options.artifactsDir;
      const context = await this._object.newContext(metadata, params);
      this._contexts.add(context);
      context.setSelectors(this.selectors);
      context.on(_browserContext.BrowserContext.Events.Close, () => this._contexts.delete(context));
      return {
        context: new _browserContextDispatcher.BrowserContextDispatcher(this, context)
      };
    }
    async newContextForReuse(params, metadata) {
      return await newContextForReuse(this._object, this, params, this.selectors, metadata);
    }
    async stopPendingOperations(params, metadata) {
      await this._object.stopPendingOperations(params.reason);
    }
    async close() {
    }
    async killForTests() {
    }
    async defaultUserAgentForTest() {
      throw new Error("Client should not send us Browser.defaultUserAgentForTest");
    }
    async newBrowserCDPSession() {
      if (!this._object.options.isChromium) throw new Error(`CDP session is only available in Chromium`);
      const crBrowser2 = this._object;
      return {
        session: new _cdpSessionDispatcher.CDPSessionDispatcher(this, await crBrowser2.newBrowserCDPSession())
      };
    }
    async startTracing(params) {
      if (!this._object.options.isChromium) throw new Error(`Tracing is only available in Chromium`);
      const crBrowser2 = this._object;
      await crBrowser2.startTracing(params.page ? params.page._object : void 0, params);
    }
    async stopTracing() {
      if (!this._object.options.isChromium) throw new Error(`Tracing is only available in Chromium`);
      const crBrowser2 = this._object;
      return {
        artifact: _artifactDispatcher.ArtifactDispatcher.from(this, await crBrowser2.stopTracing())
      };
    }
    async cleanupContexts() {
      await Promise.all(Array.from(this._contexts).map((context) => context.close({
        reason: "Global context cleanup (connection terminated)"
      })));
    }
  }
  browserDispatcher.ConnectedBrowserDispatcher = ConnectedBrowserDispatcher;
  async function newContextForReuse(browser2, scope, params, selectors2, metadata) {
    const {
      context,
      needsReset
    } = await browser2.newContextForReuse(params, metadata);
    if (needsReset) {
      const oldContextDispatcher = (0, _dispatcher.existingDispatcher)(context);
      if (oldContextDispatcher) oldContextDispatcher._dispose();
      await context.resetForReuse(metadata, params);
    }
    if (selectors2) context.setSelectors(selectors2);
    const contextDispatcher = new _browserContextDispatcher.BrowserContextDispatcher(scope, context);
    return {
      context: contextDispatcher
    };
  }
  return browserDispatcher;
}
var browserTypeDispatcher = {};
var hasRequiredBrowserTypeDispatcher;
function requireBrowserTypeDispatcher() {
  if (hasRequiredBrowserTypeDispatcher) return browserTypeDispatcher;
  hasRequiredBrowserTypeDispatcher = 1;
  Object.defineProperty(browserTypeDispatcher, "__esModule", {
    value: true
  });
  browserTypeDispatcher.BrowserTypeDispatcher = void 0;
  var _browserContextDispatcher = requireBrowserContextDispatcher();
  var _browserDispatcher = requireBrowserDispatcher();
  var _dispatcher = requireDispatcher();
  class BrowserTypeDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, browserType2) {
      super(scope, browserType2, "BrowserType", {
        executablePath: browserType2.executablePath(),
        name: browserType2.name()
      });
      this._type_BrowserType = true;
    }
    async launch(params, metadata) {
      const browser2 = await this._object.launch(metadata, params);
      return {
        browser: new _browserDispatcher.BrowserDispatcher(this, browser2)
      };
    }
    async launchPersistentContext(params, metadata) {
      const browserContext2 = await this._object.launchPersistentContext(metadata, params.userDataDir, params);
      return {
        context: new _browserContextDispatcher.BrowserContextDispatcher(this, browserContext2)
      };
    }
    async connectOverCDP(params, metadata) {
      const browser2 = await this._object.connectOverCDP(metadata, params.endpointURL, params, params.timeout);
      const browserDispatcher2 = new _browserDispatcher.BrowserDispatcher(this, browser2);
      return {
        browser: browserDispatcher2,
        defaultContext: browser2._defaultContext ? new _browserContextDispatcher.BrowserContextDispatcher(browserDispatcher2, browser2._defaultContext) : void 0
      };
    }
  }
  browserTypeDispatcher.BrowserTypeDispatcher = BrowserTypeDispatcher;
  return browserTypeDispatcher;
}
var electronDispatcher = {};
var hasRequiredElectronDispatcher;
function requireElectronDispatcher() {
  if (hasRequiredElectronDispatcher) return electronDispatcher;
  hasRequiredElectronDispatcher = 1;
  Object.defineProperty(electronDispatcher, "__esModule", {
    value: true
  });
  electronDispatcher.ElectronDispatcher = electronDispatcher.ElectronApplicationDispatcher = void 0;
  var _browserContextDispatcher = requireBrowserContextDispatcher();
  var _dispatcher = requireDispatcher();
  var _elementHandlerDispatcher = requireElementHandlerDispatcher();
  var _jsHandleDispatcher = requireJsHandleDispatcher();
  var _electron = requireElectron$1();
  class ElectronDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, electron2) {
      super(scope, electron2, "Electron", {});
      this._type_Electron = true;
    }
    async launch(params) {
      const electronApplication = await this._object.launch(params);
      return {
        electronApplication: new ElectronApplicationDispatcher(this, electronApplication)
      };
    }
  }
  electronDispatcher.ElectronDispatcher = ElectronDispatcher;
  class ElectronApplicationDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, electronApplication) {
      super(scope, electronApplication, "ElectronApplication", {
        context: new _browserContextDispatcher.BrowserContextDispatcher(scope, electronApplication.context())
      });
      this._type_EventTarget = true;
      this._type_ElectronApplication = true;
      this._subscriptions = /* @__PURE__ */ new Set();
      this.addObjectListener(_electron.ElectronApplication.Events.Close, () => {
        this._dispatchEvent("close");
        this._dispose();
      });
      this.addObjectListener(_electron.ElectronApplication.Events.Console, (message) => {
        if (!this._subscriptions.has("console")) return;
        this._dispatchEvent("console", {
          type: message.type(),
          text: message.text(),
          args: message.args().map((a) => _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, a)),
          location: message.location()
        });
      });
    }
    async browserWindow(params) {
      const handle = await this._object.browserWindow(params.page.page());
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, handle)
      };
    }
    async evaluateExpression(params) {
      const handle = await this._object._nodeElectronHandlePromise;
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await handle.evaluateExpression(params.expression, {
          isFunction: params.isFunction
        }, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async evaluateExpressionHandle(params) {
      const handle = await this._object._nodeElectronHandlePromise;
      const result = await handle.evaluateExpressionHandle(params.expression, {
        isFunction: params.isFunction
      }, (0, _jsHandleDispatcher.parseArgument)(params.arg));
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, result)
      };
    }
    async updateSubscription(params) {
      if (params.enabled) this._subscriptions.add(params.event);
      else this._subscriptions.delete(params.event);
    }
    async close() {
      await this._object.close();
    }
  }
  electronDispatcher.ElectronApplicationDispatcher = ElectronApplicationDispatcher;
  return electronDispatcher;
}
var localUtilsDispatcher = {};
var localUtils$1 = {};
var harBackend = {};
var hasRequiredHarBackend;
function requireHarBackend() {
  if (hasRequiredHarBackend) return harBackend;
  hasRequiredHarBackend = 1;
  Object.defineProperty(harBackend, "__esModule", {
    value: true
  });
  harBackend.HarBackend = void 0;
  var _fs = _interopRequireDefault(require$$0$2);
  var _path2 = _interopRequireDefault(require$$1$1);
  var _crypto = requireCrypto();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  const redirectStatus = [301, 302, 303, 307, 308];
  class HarBackend {
    constructor(harFile, baseDir, zipFile2) {
      this.id = void 0;
      this._harFile = void 0;
      this._zipFile = void 0;
      this._baseDir = void 0;
      this.id = (0, _crypto.createGuid)();
      this._harFile = harFile;
      this._baseDir = baseDir;
      this._zipFile = zipFile2;
    }
    async lookup(url, method, headers2, postData, isNavigationRequest) {
      let entry;
      try {
        entry = await this._harFindResponse(url, method, headers2, postData);
      } catch (e2) {
        return {
          action: "error",
          message: "HAR error: " + e2.message
        };
      }
      if (!entry) return {
        action: "noentry"
      };
      if (entry.request.url !== url && isNavigationRequest) return {
        action: "redirect",
        redirectURL: entry.request.url
      };
      const response = entry.response;
      try {
        const buffer2 = await this._loadContent(response.content);
        return {
          action: "fulfill",
          status: response.status,
          headers: response.headers,
          body: buffer2
        };
      } catch (e2) {
        return {
          action: "error",
          message: e2.message
        };
      }
    }
    async _loadContent(content) {
      const file2 = content._file;
      let buffer2;
      if (file2) {
        if (this._zipFile) buffer2 = await this._zipFile.read(file2);
        else buffer2 = await _fs.default.promises.readFile(_path2.default.resolve(this._baseDir, file2));
      } else {
        buffer2 = Buffer.from(content.text || "", content.encoding === "base64" ? "base64" : "utf-8");
      }
      return buffer2;
    }
    async _harFindResponse(url, method, headers2, postData) {
      const harLog = this._harFile.log;
      const visited = /* @__PURE__ */ new Set();
      while (true) {
        const entries = [];
        for (const candidate of harLog.entries) {
          if (candidate.request.url !== url || candidate.request.method !== method) continue;
          if (method === "POST" && postData && candidate.request.postData) {
            const buffer2 = await this._loadContent(candidate.request.postData);
            if (!buffer2.equals(postData)) {
              const boundary = multipartBoundary(headers2);
              if (!boundary) continue;
              const candidataBoundary = multipartBoundary(candidate.request.headers);
              if (!candidataBoundary) continue;
              if (postData.toString().replaceAll(boundary, "") !== buffer2.toString().replaceAll(candidataBoundary, "")) continue;
            }
          }
          entries.push(candidate);
        }
        if (!entries.length) return;
        let entry = entries[0];
        if (entries.length > 1) {
          const list = [];
          for (const candidate of entries) {
            const matchingHeaders = countMatchingHeaders(candidate.request.headers, headers2);
            list.push({
              candidate,
              matchingHeaders
            });
          }
          list.sort((a, b) => b.matchingHeaders - a.matchingHeaders);
          entry = list[0].candidate;
        }
        if (visited.has(entry)) throw new Error(`Found redirect cycle for ${url}`);
        visited.add(entry);
        const locationHeader = entry.response.headers.find((h2) => h2.name.toLowerCase() === "location");
        if (redirectStatus.includes(entry.response.status) && locationHeader) {
          const locationURL = new URL(locationHeader.value, url);
          url = locationURL.toString();
          if ((entry.response.status === 301 || entry.response.status === 302) && method === "POST" || entry.response.status === 303 && !["GET", "HEAD"].includes(method)) {
            method = "GET";
          }
          continue;
        }
        return entry;
      }
    }
    dispose() {
      var _this$_zipFile;
      (_this$_zipFile = this._zipFile) === null || _this$_zipFile === void 0 || _this$_zipFile.close();
    }
  }
  harBackend.HarBackend = HarBackend;
  function countMatchingHeaders(harHeaders, headers2) {
    const set = new Set(headers2.map((h2) => h2.name.toLowerCase() + ":" + h2.value));
    let matches = 0;
    for (const h2 of harHeaders) {
      if (set.has(h2.name.toLowerCase() + ":" + h2.value)) ++matches;
    }
    return matches;
  }
  function multipartBoundary(headers2) {
    const contentType = headers2.find((h2) => h2.name.toLowerCase() === "content-type");
    if (!(contentType !== null && contentType !== void 0 && contentType.value.includes("multipart/form-data"))) return void 0;
    const boundary = contentType.value.match(/boundary=(\S+)/);
    if (boundary) return boundary[1];
    return void 0;
  }
  return harBackend;
}
var traceUtils = {};
var hasRequiredTraceUtils;
function requireTraceUtils() {
  if (hasRequiredTraceUtils) return traceUtils;
  hasRequiredTraceUtils = 1;
  Object.defineProperty(traceUtils, "__esModule", {
    value: true
  });
  traceUtils.parseClientSideCallMetadata = parseClientSideCallMetadata;
  traceUtils.serializeClientSideCallMetadata = serializeClientSideCallMetadata;
  function parseClientSideCallMetadata(data) {
    const result = /* @__PURE__ */ new Map();
    const {
      files,
      stacks
    } = data;
    for (const s2 of stacks) {
      const [id, ff] = s2;
      result.set(`call@${id}`, ff.map((f2) => ({
        file: files[f2[0]],
        line: f2[1],
        column: f2[2],
        function: f2[3]
      })));
    }
    return result;
  }
  function serializeClientSideCallMetadata(metadatas) {
    const fileNames = /* @__PURE__ */ new Map();
    const stacks = [];
    for (const m2 of metadatas) {
      if (!m2.stack || !m2.stack.length) continue;
      const stack = [];
      for (const frame2 of m2.stack) {
        let ordinal = fileNames.get(frame2.file);
        if (typeof ordinal !== "number") {
          ordinal = fileNames.size;
          fileNames.set(frame2.file, ordinal);
        }
        const stackFrame = [ordinal, frame2.line || 0, frame2.column || 0, frame2.function || ""];
        stack.push(stackFrame);
      }
      stacks.push([m2.id, stack]);
    }
    return {
      files: [...fileNames.keys()],
      stacks
    };
  }
  return traceUtils;
}
var hasRequiredLocalUtils$1;
function requireLocalUtils$1() {
  if (hasRequiredLocalUtils$1) return localUtils$1;
  hasRequiredLocalUtils$1 = 1;
  Object.defineProperty(localUtils$1, "__esModule", {
    value: true
  });
  localUtils$1.addStackToTracingNoReply = addStackToTracingNoReply;
  localUtils$1.harClose = harClose;
  localUtils$1.harLookup = harLookup;
  localUtils$1.harOpen = harOpen;
  localUtils$1.harUnzip = harUnzip;
  localUtils$1.traceDiscarded = traceDiscarded;
  localUtils$1.tracingStarted = tracingStarted;
  localUtils$1.zip = zip;
  var _fs = _interopRequireDefault(require$$0$2);
  var _os = _interopRequireDefault(require$$1$3);
  var _path2 = _interopRequireDefault(require$$1$1);
  var _crypto = requireCrypto();
  var _harBackend = requireHarBackend();
  var _manualPromise = requireManualPromise();
  var _zipFile = requireZipFile();
  var _zipBundle = requireZipBundle();
  var _traceUtils = requireTraceUtils();
  var _assert = requireAssert$1();
  var _fileUtils = requireFileUtils$1();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  async function zip(stackSessions, params) {
    const promise = new _manualPromise.ManualPromise();
    const zipFile2 = new _zipBundle.yazl.ZipFile();
    zipFile2.on("error", (error) => promise.reject(error));
    const addFile = (file2, name) => {
      try {
        if (_fs.default.statSync(file2).isFile()) zipFile2.addFile(file2, name);
      } catch (e2) {
      }
    };
    for (const entry of params.entries) addFile(entry.value, entry.name);
    const stackSession = params.stacksId ? stackSessions.get(params.stacksId) : void 0;
    if (stackSession !== null && stackSession !== void 0 && stackSession.callStacks.length) {
      await stackSession.writer;
      if (process.env.PW_LIVE_TRACE_STACKS) {
        zipFile2.addFile(stackSession.file, "trace.stacks");
      } else {
        const buffer2 = Buffer.from(JSON.stringify((0, _traceUtils.serializeClientSideCallMetadata)(stackSession.callStacks)));
        zipFile2.addBuffer(buffer2, "trace.stacks");
      }
    }
    if (params.includeSources) {
      const sourceFiles = /* @__PURE__ */ new Set();
      for (const {
        stack
      } of (stackSession === null || stackSession === void 0 ? void 0 : stackSession.callStacks) || []) {
        if (!stack) continue;
        for (const {
          file: file2
        } of stack) sourceFiles.add(file2);
      }
      for (const sourceFile of sourceFiles) addFile(sourceFile, "resources/src@" + await (0, _crypto.calculateSha1)(sourceFile) + ".txt");
    }
    if (params.mode === "write") {
      await _fs.default.promises.mkdir(_path2.default.dirname(params.zipFile), {
        recursive: true
      });
      zipFile2.end(void 0, () => {
        zipFile2.outputStream.pipe(_fs.default.createWriteStream(params.zipFile)).on("close", () => promise.resolve()).on("error", (error) => promise.reject(error));
      });
      await promise;
      await deleteStackSession(stackSessions, params.stacksId);
      return;
    }
    const tempFile = params.zipFile + ".tmp";
    await _fs.default.promises.rename(params.zipFile, tempFile);
    _zipBundle.yauzl.open(tempFile, (err, inZipFile) => {
      if (err) {
        promise.reject(err);
        return;
      }
      (0, _assert.assert)(inZipFile);
      let pendingEntries = inZipFile.entryCount;
      inZipFile.on("entry", (entry) => {
        inZipFile.openReadStream(entry, (err2, readStream) => {
          if (err2) {
            promise.reject(err2);
            return;
          }
          zipFile2.addReadStream(readStream, entry.fileName);
          if (--pendingEntries === 0) {
            zipFile2.end(void 0, () => {
              zipFile2.outputStream.pipe(_fs.default.createWriteStream(params.zipFile)).on("close", () => {
                _fs.default.promises.unlink(tempFile).then(() => {
                  promise.resolve();
                }).catch((error) => promise.reject(error));
              });
            });
          }
        });
      });
    });
    await promise;
    await deleteStackSession(stackSessions, params.stacksId);
  }
  async function deleteStackSession(stackSessions, stacksId) {
    const session = stacksId ? stackSessions.get(stacksId) : void 0;
    if (!session) return;
    await session.writer;
    if (session.tmpDir) await (0, _fileUtils.removeFolders)([session.tmpDir]);
    stackSessions.delete(stacksId);
  }
  async function harOpen(harBackends, params) {
    let harBackend2;
    if (params.file.endsWith(".zip")) {
      const zipFile2 = new _zipFile.ZipFile(params.file);
      const entryNames = await zipFile2.entries();
      const harEntryName = entryNames.find((e2) => e2.endsWith(".har"));
      if (!harEntryName) return {
        error: "Specified archive does not have a .har file"
      };
      const har = await zipFile2.read(harEntryName);
      const harFile = JSON.parse(har.toString());
      harBackend2 = new _harBackend.HarBackend(harFile, null, zipFile2);
    } else {
      const harFile = JSON.parse(await _fs.default.promises.readFile(params.file, "utf-8"));
      harBackend2 = new _harBackend.HarBackend(harFile, _path2.default.dirname(params.file), null);
    }
    harBackends.set(harBackend2.id, harBackend2);
    return {
      harId: harBackend2.id
    };
  }
  async function harLookup(harBackends, params) {
    const harBackend2 = harBackends.get(params.harId);
    if (!harBackend2) return {
      action: "error",
      message: `Internal error: har was not opened`
    };
    return await harBackend2.lookup(params.url, params.method, params.headers, params.postData, params.isNavigationRequest);
  }
  async function harClose(harBackends, params) {
    const harBackend2 = harBackends.get(params.harId);
    if (harBackend2) {
      harBackends.delete(harBackend2.id);
      harBackend2.dispose();
    }
  }
  async function harUnzip(params) {
    const dir = _path2.default.dirname(params.zipFile);
    const zipFile2 = new _zipFile.ZipFile(params.zipFile);
    for (const entry of await zipFile2.entries()) {
      const buffer2 = await zipFile2.read(entry);
      if (entry === "har.har") await _fs.default.promises.writeFile(params.harFile, buffer2);
      else await _fs.default.promises.writeFile(_path2.default.join(dir, entry), buffer2);
    }
    zipFile2.close();
    await _fs.default.promises.unlink(params.zipFile);
  }
  async function tracingStarted(stackSessions, params) {
    let tmpDir = void 0;
    if (!params.tracesDir) tmpDir = await _fs.default.promises.mkdtemp(_path2.default.join(_os.default.tmpdir(), "playwright-tracing-"));
    const traceStacksFile = _path2.default.join(params.tracesDir || tmpDir, params.traceName + ".stacks");
    stackSessions.set(traceStacksFile, {
      callStacks: [],
      file: traceStacksFile,
      writer: Promise.resolve(),
      tmpDir
    });
    return {
      stacksId: traceStacksFile
    };
  }
  async function traceDiscarded(stackSessions, params) {
    await deleteStackSession(stackSessions, params.stacksId);
  }
  async function addStackToTracingNoReply(stackSessions, params) {
    for (const session of stackSessions.values()) {
      session.callStacks.push(params.callData);
      if (process.env.PW_LIVE_TRACE_STACKS) {
        session.writer = session.writer.then(() => {
          const buffer2 = Buffer.from(JSON.stringify((0, _traceUtils.serializeClientSideCallMetadata)(session.callStacks)));
          return _fs.default.promises.writeFile(session.file, buffer2);
        });
      }
    }
  }
  return localUtils$1;
}
var jsonPipeDispatcher = {};
var hasRequiredJsonPipeDispatcher;
function requireJsonPipeDispatcher() {
  if (hasRequiredJsonPipeDispatcher) return jsonPipeDispatcher;
  hasRequiredJsonPipeDispatcher = 1;
  Object.defineProperty(jsonPipeDispatcher, "__esModule", {
    value: true
  });
  jsonPipeDispatcher.JsonPipeDispatcher = void 0;
  var _dispatcher = requireDispatcher();
  var _crypto = requireCrypto();
  class JsonPipeDispatcher extends _dispatcher.Dispatcher {
    constructor(scope) {
      super(scope, {
        guid: "jsonPipe@" + (0, _crypto.createGuid)()
      }, "JsonPipe", {});
      this._type_JsonPipe = true;
    }
    async send(params) {
      this.emit("message", params.message);
    }
    async close() {
      this.emit("close");
      if (!this._disposed) {
        this._dispatchEvent("closed", {});
        this._dispose();
      }
    }
    dispatch(message) {
      if (!this._disposed) this._dispatchEvent("message", {
        message
      });
    }
    wasClosed(reason) {
      if (!this._disposed) {
        this._dispatchEvent("closed", {
          reason
        });
        this._dispose();
      }
    }
    dispose() {
      this._dispose();
    }
  }
  jsonPipeDispatcher.JsonPipeDispatcher = JsonPipeDispatcher;
  return jsonPipeDispatcher;
}
var socksInterceptor = {};
var hasRequiredSocksInterceptor;
function requireSocksInterceptor() {
  if (hasRequiredSocksInterceptor) return socksInterceptor;
  hasRequiredSocksInterceptor = 1;
  Object.defineProperty(socksInterceptor, "__esModule", {
    value: true
  });
  socksInterceptor.SocksInterceptor = void 0;
  var _events = _interopRequireDefault(require$$0$4);
  var socks = _interopRequireWildcard(requireSocksProxy());
  var _validator = requireValidator();
  var _debug = requireDebug$1();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  class SocksInterceptor {
    constructor(transport2, pattern, redirectPortForTest) {
      this._handler = void 0;
      this._channel = void 0;
      this._socksSupportObjectGuid = void 0;
      this._ids = /* @__PURE__ */ new Set();
      this._handler = new socks.SocksProxyHandler(pattern, redirectPortForTest);
      let lastId = -1;
      this._channel = new Proxy(new _events.default(), {
        get: (obj, prop) => {
          if (prop in obj || obj[prop] !== void 0 || typeof prop !== "string") return obj[prop];
          return (params) => {
            try {
              const id = --lastId;
              this._ids.add(id);
              const validator2 = (0, _validator.findValidator)("SocksSupport", prop, "Params");
              params = validator2(params, "", {
                tChannelImpl: tChannelForSocks,
                binary: "toBase64",
                isUnderTest: _debug.isUnderTest
              });
              transport2.send({
                id,
                guid: this._socksSupportObjectGuid,
                method: prop,
                params,
                metadata: {
                  stack: [],
                  apiName: "",
                  internal: true
                }
              });
            } catch (e2) {
            }
          };
        }
      });
      this._handler.on(socks.SocksProxyHandler.Events.SocksConnected, (payload) => this._channel.socksConnected(payload));
      this._handler.on(socks.SocksProxyHandler.Events.SocksData, (payload) => this._channel.socksData(payload));
      this._handler.on(socks.SocksProxyHandler.Events.SocksError, (payload) => this._channel.socksError(payload));
      this._handler.on(socks.SocksProxyHandler.Events.SocksFailed, (payload) => this._channel.socksFailed(payload));
      this._handler.on(socks.SocksProxyHandler.Events.SocksEnd, (payload) => this._channel.socksEnd(payload));
      this._channel.on("socksRequested", (payload) => this._handler.socketRequested(payload));
      this._channel.on("socksClosed", (payload) => this._handler.socketClosed(payload));
      this._channel.on("socksData", (payload) => this._handler.sendSocketData(payload));
    }
    cleanup() {
      this._handler.cleanup();
    }
    interceptMessage(message) {
      if (this._ids.has(message.id)) {
        this._ids.delete(message.id);
        return true;
      }
      if (message.method === "__create__" && message.params.type === "SocksSupport") {
        this._socksSupportObjectGuid = message.params.guid;
        return false;
      }
      if (this._socksSupportObjectGuid && message.guid === this._socksSupportObjectGuid) {
        const validator2 = (0, _validator.findValidator)("SocksSupport", message.method, "Event");
        const params = validator2(message.params, "", {
          tChannelImpl: tChannelForSocks,
          binary: "fromBase64",
          isUnderTest: _debug.isUnderTest
        });
        this._channel.emit(message.method, params);
        return true;
      }
      return false;
    }
  }
  socksInterceptor.SocksInterceptor = SocksInterceptor;
  function tChannelForSocks(names, arg, path, context) {
    throw new _validator.ValidationError(`${path}: channels are not expected in SocksSupport`);
  }
  return socksInterceptor;
}
var hasRequiredLocalUtilsDispatcher;
function requireLocalUtilsDispatcher() {
  if (hasRequiredLocalUtilsDispatcher) return localUtilsDispatcher;
  hasRequiredLocalUtilsDispatcher = 1;
  Object.defineProperty(localUtilsDispatcher, "__esModule", {
    value: true
  });
  localUtilsDispatcher.LocalUtilsDispatcher = void 0;
  var _dispatcher = requireDispatcher();
  var _instrumentation = requireInstrumentation();
  var localUtils2 = _interopRequireWildcard(requireLocalUtils$1());
  var _userAgent = requireUserAgent();
  var _deviceDescriptors = requireDeviceDescriptors();
  var _jsonPipeDispatcher = requireJsonPipeDispatcher();
  var _progress = requireProgress();
  var _socksInterceptor = requireSocksInterceptor();
  var _transport = requireTransport();
  var _network = requireNetwork$2();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  class LocalUtilsDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, playwright2) {
      const _localUtils = new _instrumentation.SdkObject(playwright2, "localUtils", "localUtils");
      const deviceDescriptors2 = Object.entries(_deviceDescriptors.deviceDescriptors).map(([name, descriptor]) => ({
        name,
        descriptor
      }));
      super(scope, _localUtils, "LocalUtils", {
        deviceDescriptors: deviceDescriptors2
      });
      this._type_LocalUtils = void 0;
      this._harBackends = /* @__PURE__ */ new Map();
      this._stackSessions = /* @__PURE__ */ new Map();
      this._type_LocalUtils = true;
    }
    async zip(params) {
      return await localUtils2.zip(this._stackSessions, params);
    }
    async harOpen(params, metadata) {
      return await localUtils2.harOpen(this._harBackends, params);
    }
    async harLookup(params, metadata) {
      return await localUtils2.harLookup(this._harBackends, params);
    }
    async harClose(params, metadata) {
      return await localUtils2.harClose(this._harBackends, params);
    }
    async harUnzip(params, metadata) {
      return await localUtils2.harUnzip(params);
    }
    async tracingStarted(params, metadata) {
      return await localUtils2.tracingStarted(this._stackSessions, params);
    }
    async traceDiscarded(params, metadata) {
      return await localUtils2.traceDiscarded(this._stackSessions, params);
    }
    async addStackToTracingNoReply(params, metadata) {
      return await localUtils2.addStackToTracingNoReply(this._stackSessions, params);
    }
    async connect(params, metadata) {
      const controller = new _progress.ProgressController(metadata, this._object);
      controller.setLogName("browser");
      return await controller.run(async (progress2) => {
        var _params$exposeNetwork;
        const wsHeaders = {
          "User-Agent": (0, _userAgent.getUserAgent)(),
          "x-playwright-proxy": (_params$exposeNetwork = params.exposeNetwork) !== null && _params$exposeNetwork !== void 0 ? _params$exposeNetwork : "",
          ...params.headers
        };
        const wsEndpoint = await urlToWSEndpoint(progress2, params.wsEndpoint);
        const transport2 = await _transport.WebSocketTransport.connect(progress2, wsEndpoint, wsHeaders, true, "x-playwright-debug-log");
        const socksInterceptor2 = new _socksInterceptor.SocksInterceptor(transport2, params.exposeNetwork, params.socksProxyRedirectPortForTest);
        const pipe = new _jsonPipeDispatcher.JsonPipeDispatcher(this);
        transport2.onmessage = (json2) => {
          if (socksInterceptor2.interceptMessage(json2)) return;
          const cb = () => {
            try {
              pipe.dispatch(json2);
            } catch (e2) {
              transport2.close();
            }
          };
          if (params.slowMo) setTimeout(cb, params.slowMo);
          else cb();
        };
        pipe.on("message", (message) => {
          transport2.send(message);
        });
        transport2.onclose = (reason) => {
          socksInterceptor2 === null || socksInterceptor2 === void 0 || socksInterceptor2.cleanup();
          pipe.wasClosed(reason);
        };
        pipe.on("close", () => transport2.close());
        return {
          pipe,
          headers: transport2.headers
        };
      }, params.timeout || 0);
    }
  }
  localUtilsDispatcher.LocalUtilsDispatcher = LocalUtilsDispatcher;
  async function urlToWSEndpoint(progress2, endpointURL) {
    var _progress$timeUntilDe;
    if (endpointURL.startsWith("ws")) return endpointURL;
    progress2 === null || progress2 === void 0 || progress2.log(`<ws preparing> retrieving websocket url from ${endpointURL}`);
    const fetchUrl = new URL(endpointURL);
    if (!fetchUrl.pathname.endsWith("/")) fetchUrl.pathname += "/";
    fetchUrl.pathname += "json";
    const json2 = await (0, _network.fetchData)({
      url: fetchUrl.toString(),
      method: "GET",
      timeout: (_progress$timeUntilDe = progress2 === null || progress2 === void 0 ? void 0 : progress2.timeUntilDeadline()) !== null && _progress$timeUntilDe !== void 0 ? _progress$timeUntilDe : 3e4,
      headers: {
        "User-Agent": (0, _userAgent.getUserAgent)()
      }
    }, async (params, response) => {
      return new Error(`Unexpected status ${response.statusCode} when connecting to ${fetchUrl.toString()}.
This does not look like a Playwright server, try connecting via ws://.`);
    });
    progress2 === null || progress2 === void 0 || progress2.throwIfAborted();
    const wsUrl = new URL(endpointURL);
    let wsEndpointPath = JSON.parse(json2).wsEndpointPath;
    if (wsEndpointPath.startsWith("/")) wsEndpointPath = wsEndpointPath.substring(1);
    if (!wsUrl.pathname.endsWith("/")) wsUrl.pathname += "/";
    wsUrl.pathname += wsEndpointPath;
    wsUrl.protocol = wsUrl.protocol === "https:" ? "wss:" : "ws:";
    return wsUrl.toString();
  }
  return localUtilsDispatcher;
}
var selectorsDispatcher = {};
var hasRequiredSelectorsDispatcher;
function requireSelectorsDispatcher() {
  if (hasRequiredSelectorsDispatcher) return selectorsDispatcher;
  hasRequiredSelectorsDispatcher = 1;
  Object.defineProperty(selectorsDispatcher, "__esModule", {
    value: true
  });
  selectorsDispatcher.SelectorsDispatcher = void 0;
  var _dispatcher = requireDispatcher();
  class SelectorsDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, selectors2) {
      super(scope, selectors2, "Selectors", {});
      this._type_Selectors = true;
    }
    async register(params) {
      await this._object.register(params.name, params.source, params.contentScript);
    }
    async setTestIdAttributeName(params) {
      this._object.setTestIdAttributeName(params.testIdAttributeName);
    }
  }
  selectorsDispatcher.SelectorsDispatcher = SelectorsDispatcher;
  return selectorsDispatcher;
}
var hasRequiredPlaywrightDispatcher;
function requirePlaywrightDispatcher() {
  if (hasRequiredPlaywrightDispatcher) return playwrightDispatcher;
  hasRequiredPlaywrightDispatcher = 1;
  Object.defineProperty(playwrightDispatcher, "__esModule", {
    value: true
  });
  playwrightDispatcher.PlaywrightDispatcher = void 0;
  var _socksProxy = requireSocksProxy();
  var _fetch = requireFetch$1();
  var _androidDispatcher = requireAndroidDispatcher();
  var _browserDispatcher = requireBrowserDispatcher();
  var _browserTypeDispatcher = requireBrowserTypeDispatcher();
  var _dispatcher = requireDispatcher();
  var _electronDispatcher = requireElectronDispatcher();
  var _localUtilsDispatcher = requireLocalUtilsDispatcher();
  var _networkDispatchers = requireNetworkDispatchers();
  var _selectorsDispatcher = requireSelectorsDispatcher();
  var _crypto = requireCrypto();
  var _eventsHelper = requireEventsHelper();
  class PlaywrightDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, playwright2, socksProxy2, preLaunchedBrowser, prelaunchedAndroidDevice) {
      const browserDispatcher2 = preLaunchedBrowser ? new _browserDispatcher.ConnectedBrowserDispatcher(scope, preLaunchedBrowser) : void 0;
      const android2 = new _androidDispatcher.AndroidDispatcher(scope, playwright2.android);
      const prelaunchedAndroidDeviceDispatcher = prelaunchedAndroidDevice ? new _androidDispatcher.AndroidDeviceDispatcher(android2, prelaunchedAndroidDevice) : void 0;
      super(scope, playwright2, "Playwright", {
        chromium: new _browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright2.chromium),
        firefox: new _browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright2.firefox),
        webkit: new _browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright2.webkit),
        bidiChromium: new _browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright2.bidiChromium),
        bidiFirefox: new _browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright2.bidiFirefox),
        android: android2,
        electron: new _electronDispatcher.ElectronDispatcher(scope, playwright2.electron),
        utils: playwright2.options.isServer ? void 0 : new _localUtilsDispatcher.LocalUtilsDispatcher(scope, playwright2),
        selectors: new _selectorsDispatcher.SelectorsDispatcher(scope, (browserDispatcher2 === null || browserDispatcher2 === void 0 ? void 0 : browserDispatcher2.selectors) || playwright2.selectors),
        preLaunchedBrowser: browserDispatcher2,
        preConnectedAndroidDevice: prelaunchedAndroidDeviceDispatcher,
        socksSupport: socksProxy2 ? new SocksSupportDispatcher(scope, socksProxy2) : void 0
      });
      this._type_Playwright = void 0;
      this._browserDispatcher = void 0;
      this._type_Playwright = true;
      this._browserDispatcher = browserDispatcher2;
    }
    async newRequest(params) {
      const request = new _fetch.GlobalAPIRequestContext(this._object, params);
      return {
        request: _networkDispatchers.APIRequestContextDispatcher.from(this.parentScope(), request)
      };
    }
    async cleanup() {
      var _this$_browserDispatc;
      await ((_this$_browserDispatc = this._browserDispatcher) === null || _this$_browserDispatc === void 0 ? void 0 : _this$_browserDispatc.cleanupContexts());
    }
  }
  playwrightDispatcher.PlaywrightDispatcher = PlaywrightDispatcher;
  class SocksSupportDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, socksProxy2) {
      super(scope, {
        guid: "socksSupport@" + (0, _crypto.createGuid)()
      }, "SocksSupport", {});
      this._type_SocksSupport = void 0;
      this._socksProxy = void 0;
      this._socksListeners = void 0;
      this._type_SocksSupport = true;
      this._socksProxy = socksProxy2;
      this._socksListeners = [_eventsHelper.eventsHelper.addEventListener(socksProxy2, _socksProxy.SocksProxy.Events.SocksRequested, (payload) => this._dispatchEvent("socksRequested", payload)), _eventsHelper.eventsHelper.addEventListener(socksProxy2, _socksProxy.SocksProxy.Events.SocksData, (payload) => this._dispatchEvent("socksData", payload)), _eventsHelper.eventsHelper.addEventListener(socksProxy2, _socksProxy.SocksProxy.Events.SocksClosed, (payload) => this._dispatchEvent("socksClosed", payload))];
    }
    async socksConnected(params) {
      var _this$_socksProxy;
      (_this$_socksProxy = this._socksProxy) === null || _this$_socksProxy === void 0 || _this$_socksProxy.socketConnected(params);
    }
    async socksFailed(params) {
      var _this$_socksProxy2;
      (_this$_socksProxy2 = this._socksProxy) === null || _this$_socksProxy2 === void 0 || _this$_socksProxy2.socketFailed(params);
    }
    async socksData(params) {
      var _this$_socksProxy3;
      (_this$_socksProxy3 = this._socksProxy) === null || _this$_socksProxy3 === void 0 || _this$_socksProxy3.sendSocketData(params);
    }
    async socksError(params) {
      var _this$_socksProxy4;
      (_this$_socksProxy4 = this._socksProxy) === null || _this$_socksProxy4 === void 0 || _this$_socksProxy4.sendSocketError(params);
    }
    async socksEnd(params) {
      var _this$_socksProxy5;
      (_this$_socksProxy5 = this._socksProxy) === null || _this$_socksProxy5 === void 0 || _this$_socksProxy5.sendSocketEnd(params);
    }
    _onDispose() {
      _eventsHelper.eventsHelper.removeEventListeners(this._socksListeners);
    }
  }
  return playwrightDispatcher;
}
var traceViewer = {};
var hasRequiredTraceViewer;
function requireTraceViewer() {
  if (hasRequiredTraceViewer) return traceViewer;
  hasRequiredTraceViewer = 1;
  Object.defineProperty(traceViewer, "__esModule", {
    value: true
  });
  traceViewer.installRootRedirect = installRootRedirect;
  traceViewer.openTraceInBrowser = openTraceInBrowser;
  traceViewer.openTraceViewerApp = openTraceViewerApp;
  traceViewer.runTraceInBrowser = runTraceInBrowser;
  traceViewer.runTraceViewerApp = runTraceViewerApp;
  traceViewer.startTraceViewerServer = startTraceViewerServer;
  var _fs = _interopRequireDefault(require$$0$2);
  var _path2 = _interopRequireDefault(require$$1$1);
  var _utils = requireUtils();
  var _httpServer = requireHttpServer();
  var _utilsBundle = requireUtilsBundle();
  var _instrumentation = requireInstrumentation();
  var _launchApp = requireLaunchApp();
  var _playwright = requirePlaywright$1();
  var _progress = requireProgress();
  function _interopRequireDefault(e2) {
    return e2 && e2.__esModule ? e2 : { default: e2 };
  }
  function validateTraceUrls(traceUrls) {
    for (const traceUrl of traceUrls) {
      let traceFile = traceUrl;
      if (traceUrl.endsWith(".json")) traceFile = traceUrl.substring(0, traceUrl.length - ".json".length);
      if (!traceUrl.startsWith("http://") && !traceUrl.startsWith("https://") && !_fs.default.existsSync(traceFile) && !_fs.default.existsSync(traceFile + ".trace")) throw new Error(`Trace file ${traceUrl} does not exist!`);
    }
  }
  async function startTraceViewerServer(options) {
    const server2 = new _httpServer.HttpServer();
    server2.routePrefix("/trace", (request, response) => {
      const url = new URL("http://localhost" + request.url);
      const relativePath = url.pathname.slice("/trace".length);
      if (process.env.PW_HMR) {
        response.appendHeader("Access-Control-Allow-Origin", "http://localhost:44223");
      }
      if (relativePath.endsWith("/stall.js")) return true;
      if (relativePath.startsWith("/file")) {
        try {
          const filePath = url.searchParams.get("path");
          if (_fs.default.existsSync(filePath)) return server2.serveFile(request, response, url.searchParams.get("path"));
          if (filePath.endsWith(".json")) {
            const traceName = filePath.substring(0, filePath.length - ".json".length);
            response.statusCode = 200;
            response.setHeader("Content-Type", "application/json");
            response.end(JSON.stringify(traceDescriptor(traceName)));
            return true;
          }
        } catch (e2) {
        }
        response.statusCode = 404;
        response.end();
        return true;
      }
      const absolutePath = _path2.default.join(new URL(".", import.meta.url).pathname, "..", "..", "..", "vite", "traceViewer", ...relativePath.split("/"));
      return server2.serveFile(request, response, absolutePath);
    });
    const transport2 = (options === null || options === void 0 ? void 0 : options.transport) || (options !== null && options !== void 0 && options.isServer ? new StdinServer() : void 0);
    if (transport2) server2.createWebSocket(transport2);
    const {
      host,
      port
    } = options || {};
    await server2.start({
      preferredPort: port,
      host
    });
    return server2;
  }
  async function installRootRedirect(server2, traceUrls, options) {
    const params = new URLSearchParams();
    if (_path2.default.sep !== _path2.default.posix.sep) params.set("pathSeparator", _path2.default.sep);
    for (const traceUrl of traceUrls) params.append("trace", traceUrl);
    if (server2.wsGuid()) params.append("ws", server2.wsGuid());
    if (options !== null && options !== void 0 && options.isServer) params.append("isServer", "");
    if ((0, _utils.isUnderTest)()) params.append("isUnderTest", "true");
    for (const arg of options.args || []) params.append("arg", arg);
    if (options.grep) params.append("grep", options.grep);
    if (options.grepInvert) params.append("grepInvert", options.grepInvert);
    for (const project of options.project || []) params.append("project", project);
    for (const reporter of options.reporter || []) params.append("reporter", reporter);
    let baseUrl = ".";
    if (process.env.PW_HMR) {
      baseUrl = "http://localhost:44223";
      params.set("server", server2.urlPrefix("precise"));
    }
    const urlPath = `${baseUrl}/trace/${options.webApp || "index.html"}?${params.toString()}`;
    server2.routePath("/", (_2, response) => {
      response.statusCode = 302;
      response.setHeader("Location", urlPath);
      if (process.env.EXPERIMENTAL_OPENAI_API_KEY) response.appendHeader("Set-Cookie", `openai_api_key=${process.env.EXPERIMENTAL_OPENAI_API_KEY}`);
      if (process.env.OPENAI_BASE_URL) response.appendHeader("Set-Cookie", `openai_base_url=${process.env.OPENAI_BASE_URL}`);
      if (process.env.EXPERIMENTAL_ANTHROPIC_API_KEY) response.appendHeader("Set-Cookie", `anthropic_api_key=${process.env.EXPERIMENTAL_ANTHROPIC_API_KEY}`);
      if (process.env.ANTHROPIC_BASE_URL) response.appendHeader("Set-Cookie", `anthropic_base_url=${process.env.ANTHROPIC_BASE_URL}`);
      response.end();
      return true;
    });
  }
  async function runTraceViewerApp(traceUrls, browserName, options, exitOnClose) {
    validateTraceUrls(traceUrls);
    const server2 = await startTraceViewerServer(options);
    await installRootRedirect(server2, traceUrls, options);
    const page2 = await openTraceViewerApp(server2.urlPrefix("precise"), browserName, options);
    if (exitOnClose) page2.on("close", () => (0, _utils.gracefullyProcessExitDoNotHang)(0));
    return page2;
  }
  async function runTraceInBrowser(traceUrls, options) {
    validateTraceUrls(traceUrls);
    const server2 = await startTraceViewerServer(options);
    await installRootRedirect(server2, traceUrls, options);
    await openTraceInBrowser(server2.urlPrefix("human-readable"));
  }
  async function openTraceViewerApp(url, browserName, options) {
    const traceViewerPlaywright = (0, _playwright.createPlaywright)({
      sdkLanguage: "javascript",
      isInternalPlaywright: true
    });
    const traceViewerBrowser = (0, _utils.isUnderTest)() ? "chromium" : browserName;
    const {
      context,
      page: page2
    } = await (0, _launchApp.launchApp)(traceViewerPlaywright[traceViewerBrowser], {
      // TODO: store language in the trace.
      sdkLanguage: traceViewerPlaywright.options.sdkLanguage,
      windowSize: {
        width: 1280,
        height: 800
      },
      persistentContextOptions: {
        ...options === null || options === void 0 ? void 0 : options.persistentContextOptions,
        useWebSocket: (0, _utils.isUnderTest)(),
        headless: !!(options !== null && options !== void 0 && options.headless),
        colorScheme: (0, _utils.isUnderTest)() ? "light" : void 0
      }
    });
    const controller = new _progress.ProgressController((0, _instrumentation.serverSideCallMetadata)(), context._browser);
    await controller.run(async (progress2) => {
      await context._browser._defaultContext._loadDefaultContextAsIs(progress2);
    });
    if (process.env.PWTEST_PRINT_WS_ENDPOINT) process.stderr.write("DevTools listening on: " + context._browser.options.wsEndpoint + "\n");
    if (!(0, _utils.isUnderTest)()) await (0, _launchApp.syncLocalStorageWithSettings)(page2, "traceviewer");
    if ((0, _utils.isUnderTest)()) page2.on("close", () => context.close({
      reason: "Trace viewer closed"
    }).catch(() => {
    }));
    await page2.mainFrame().goto((0, _instrumentation.serverSideCallMetadata)(), url);
    return page2;
  }
  async function openTraceInBrowser(url) {
    console.log("\nListening on " + url);
    if (!(0, _utils.isUnderTest)()) await (0, _utilsBundle.open)(url.replace("0.0.0.0", "localhost")).catch(() => {
    });
  }
  class StdinServer {
    constructor() {
      this._pollTimer = void 0;
      this._traceUrl = void 0;
      this.sendEvent = void 0;
      this.close = void 0;
      process.stdin.on("data", (data) => {
        const url = data.toString().trim();
        if (url === this._traceUrl) return;
        if (url.endsWith(".json")) this._pollLoadTrace(url);
        else this._loadTrace(url);
      });
      process.stdin.on("close", () => (0, _utils.gracefullyProcessExitDoNotHang)(0));
    }
    onconnect() {
    }
    async dispatch(method, params) {
      if (method === "initialize") {
        if (this._traceUrl) this._loadTrace(this._traceUrl);
      }
    }
    onclose() {
    }
    _loadTrace(traceUrl) {
      var _this$sendEvent;
      this._traceUrl = traceUrl;
      clearTimeout(this._pollTimer);
      (_this$sendEvent = this.sendEvent) === null || _this$sendEvent === void 0 || _this$sendEvent.call(this, "loadTraceRequested", {
        traceUrl
      });
    }
    _pollLoadTrace(url) {
      this._loadTrace(url);
      this._pollTimer = setTimeout(() => {
        this._pollLoadTrace(url);
      }, 500);
    }
  }
  function traceDescriptor(traceName) {
    const result = {
      entries: []
    };
    const traceDir = _path2.default.dirname(traceName);
    const traceFile = _path2.default.basename(traceName);
    for (const name of _fs.default.readdirSync(traceDir)) {
      if (name.startsWith(traceFile)) result.entries.push({
        name,
        path: _path2.default.join(traceDir, name)
      });
    }
    const resourcesDir = _path2.default.join(traceDir, "resources");
    if (_fs.default.existsSync(resourcesDir)) {
      for (const name of _fs.default.readdirSync(resourcesDir)) result.entries.push({
        name: "resources/" + name,
        path: _path2.default.join(resourcesDir, name)
      });
    }
    return result;
  }
  return traceViewer;
}
var hasRequiredServer;
function requireServer() {
  if (hasRequiredServer) return server;
  hasRequiredServer = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "DispatcherConnection", {
      enumerable: true,
      get: function() {
        return _dispatcher.DispatcherConnection;
      }
    });
    Object.defineProperty(exports, "PlaywrightDispatcher", {
      enumerable: true,
      get: function() {
        return _playwrightDispatcher.PlaywrightDispatcher;
      }
    });
    Object.defineProperty(exports, "Registry", {
      enumerable: true,
      get: function() {
        return _registry.Registry;
      }
    });
    Object.defineProperty(exports, "RootDispatcher", {
      enumerable: true,
      get: function() {
        return _dispatcher.RootDispatcher;
      }
    });
    Object.defineProperty(exports, "createPlaywright", {
      enumerable: true,
      get: function() {
        return _playwright.createPlaywright;
      }
    });
    Object.defineProperty(exports, "installBrowsersForNpmInstall", {
      enumerable: true,
      get: function() {
        return _registry.installBrowsersForNpmInstall;
      }
    });
    Object.defineProperty(exports, "installRootRedirect", {
      enumerable: true,
      get: function() {
        return _traceViewer.installRootRedirect;
      }
    });
    Object.defineProperty(exports, "openTraceInBrowser", {
      enumerable: true,
      get: function() {
        return _traceViewer.openTraceInBrowser;
      }
    });
    Object.defineProperty(exports, "openTraceViewerApp", {
      enumerable: true,
      get: function() {
        return _traceViewer.openTraceViewerApp;
      }
    });
    Object.defineProperty(exports, "registry", {
      enumerable: true,
      get: function() {
        return _registry.registry;
      }
    });
    Object.defineProperty(exports, "registryDirectory", {
      enumerable: true,
      get: function() {
        return _registry.registryDirectory;
      }
    });
    Object.defineProperty(exports, "runTraceViewerApp", {
      enumerable: true,
      get: function() {
        return _traceViewer.runTraceViewerApp;
      }
    });
    Object.defineProperty(exports, "serverSideCallMetadata", {
      enumerable: true,
      get: function() {
        return _instrumentation.serverSideCallMetadata;
      }
    });
    Object.defineProperty(exports, "startTraceViewerServer", {
      enumerable: true,
      get: function() {
        return _traceViewer.startTraceViewerServer;
      }
    });
    Object.defineProperty(exports, "writeDockerVersion", {
      enumerable: true,
      get: function() {
        return _registry.writeDockerVersion;
      }
    });
    var _registry = requireRegistry();
    var _dispatcher = requireDispatcher();
    var _playwrightDispatcher = requirePlaywrightDispatcher();
    var _playwright = requirePlaywright$1();
    var _traceViewer = requireTraceViewer();
    var _instrumentation = requireInstrumentation();
  })(server);
  return server;
}
var debugControllerDispatcher = {};
var hasRequiredDebugControllerDispatcher;
function requireDebugControllerDispatcher() {
  if (hasRequiredDebugControllerDispatcher) return debugControllerDispatcher;
  hasRequiredDebugControllerDispatcher = 1;
  Object.defineProperty(debugControllerDispatcher, "__esModule", {
    value: true
  });
  debugControllerDispatcher.DebugControllerDispatcher = void 0;
  var _utils = requireUtils();
  var _debugController = requireDebugController();
  var _dispatcher = requireDispatcher();
  class DebugControllerDispatcher extends _dispatcher.Dispatcher {
    constructor(connection2, debugController2) {
      super(connection2, debugController2, "DebugController", {});
      this._type_DebugController = void 0;
      this._listeners = void 0;
      this._type_DebugController = true;
      this._listeners = [_utils.eventsHelper.addEventListener(this._object, _debugController.DebugController.Events.StateChanged, (params) => {
        this._dispatchEvent("stateChanged", params);
      }), _utils.eventsHelper.addEventListener(this._object, _debugController.DebugController.Events.InspectRequested, ({
        selector,
        locator: locator2,
        ariaSnapshot: ariaSnapshot2
      }) => {
        this._dispatchEvent("inspectRequested", {
          selector,
          locator: locator2,
          ariaSnapshot: ariaSnapshot2
        });
      }), _utils.eventsHelper.addEventListener(this._object, _debugController.DebugController.Events.SourceChanged, ({
        text,
        header,
        footer,
        actions
      }) => {
        this._dispatchEvent("sourceChanged", {
          text,
          header,
          footer,
          actions
        });
      }), _utils.eventsHelper.addEventListener(this._object, _debugController.DebugController.Events.Paused, ({
        paused
      }) => {
        this._dispatchEvent("paused", {
          paused
        });
      }), _utils.eventsHelper.addEventListener(this._object, _debugController.DebugController.Events.SetModeRequested, ({
        mode
      }) => {
        this._dispatchEvent("setModeRequested", {
          mode
        });
      })];
    }
    async initialize(params) {
      this._object.initialize(params.codegenId, params.sdkLanguage);
    }
    async setReportStateChanged(params) {
      this._object.setReportStateChanged(params.enabled);
    }
    async resetForReuse() {
      await this._object.resetForReuse();
    }
    async navigate(params) {
      await this._object.navigate(params.url);
    }
    async setRecorderMode(params) {
      await this._object.setRecorderMode(params);
    }
    async highlight(params) {
      await this._object.highlight(params);
    }
    async hideHighlight() {
      await this._object.hideHighlight();
    }
    async resume() {
      await this._object.resume();
    }
    async kill() {
      await this._object.kill();
    }
    async closeAllBrowsers() {
      await this._object.closeAllBrowsers();
    }
    _onDispose() {
      _utils.eventsHelper.removeEventListeners(this._listeners);
      this._object.dispose();
    }
  }
  debugControllerDispatcher.DebugControllerDispatcher = DebugControllerDispatcher;
  return debugControllerDispatcher;
}
var hasRequiredPlaywrightConnection;
function requirePlaywrightConnection() {
  if (hasRequiredPlaywrightConnection) return playwrightConnection;
  hasRequiredPlaywrightConnection = 1;
  Object.defineProperty(playwrightConnection, "__esModule", {
    value: true
  });
  playwrightConnection.PlaywrightConnection = void 0;
  var _socksProxy = requireSocksProxy();
  var _server = requireServer();
  var _android = requireAndroid$1();
  var _browser = requireBrowser$2();
  var _debugControllerDispatcher = requireDebugControllerDispatcher();
  var _instrumentation = requireInstrumentation();
  var _assert = requireAssert$1();
  var _debug = requireDebug$1();
  var _profiler = requireProfiler();
  var _utils = requireUtils();
  var _debugLogger = requireDebugLogger();
  class PlaywrightConnection {
    constructor(lock, clientType, ws, options, preLaunched, id, onClose) {
      this._ws = void 0;
      this._onClose = void 0;
      this._dispatcherConnection = void 0;
      this._cleanups = [];
      this._id = void 0;
      this._disconnected = false;
      this._preLaunched = void 0;
      this._options = void 0;
      this._root = void 0;
      this._profileName = void 0;
      this._ws = ws;
      this._preLaunched = preLaunched;
      this._options = options;
      options.launchOptions = filterLaunchOptions(options.launchOptions, options.allowFSPaths);
      if (clientType === "reuse-browser" || clientType === "pre-launched-browser-or-android") (0, _assert.assert)(preLaunched.playwright);
      if (clientType === "pre-launched-browser-or-android") (0, _assert.assert)(preLaunched.browser || preLaunched.androidDevice);
      this._onClose = onClose;
      this._id = id;
      this._profileName = `${(/* @__PURE__ */ new Date()).toISOString()}-${clientType}`;
      this._dispatcherConnection = new _server.DispatcherConnection();
      this._dispatcherConnection.onmessage = async (message) => {
        await lock;
        if (ws.readyState !== ws.CLOSING) {
          const messageString = JSON.stringify(message);
          if (_debugLogger.debugLogger.isEnabled("server:channel")) _debugLogger.debugLogger.log("server:channel", `[${this._id}] ${(0, _utils.monotonicTime)() * 1e3} SEND ► ${messageString}`);
          if (_debugLogger.debugLogger.isEnabled("server:metadata")) this.logServerMetadata(message, messageString, "SEND");
          ws.send(messageString);
        }
      };
      ws.on("message", async (message) => {
        await lock;
        const messageString = Buffer.from(message).toString();
        const jsonMessage = JSON.parse(messageString);
        if (_debugLogger.debugLogger.isEnabled("server:channel")) _debugLogger.debugLogger.log("server:channel", `[${this._id}] ${(0, _utils.monotonicTime)() * 1e3} ◀ RECV ${messageString}`);
        if (_debugLogger.debugLogger.isEnabled("server:metadata")) this.logServerMetadata(jsonMessage, messageString, "RECV");
        this._dispatcherConnection.dispatch(jsonMessage);
      });
      ws.on("close", () => this._onDisconnect());
      ws.on("error", (error) => this._onDisconnect(error));
      if (clientType === "controller") {
        this._root = this._initDebugControllerMode();
        return;
      }
      this._root = new _server.RootDispatcher(this._dispatcherConnection, async (scope, options2) => {
        await (0, _profiler.startProfiling)();
        if (clientType === "reuse-browser") return await this._initReuseBrowsersMode(scope);
        if (clientType === "pre-launched-browser-or-android") return this._preLaunched.browser ? await this._initPreLaunchedBrowserMode(scope) : await this._initPreLaunchedAndroidMode(scope);
        if (clientType === "launch-browser") return await this._initLaunchBrowserMode(scope, options2);
        throw new Error("Unsupported client type: " + clientType);
      });
    }
    async _initLaunchBrowserMode(scope, options) {
      _debugLogger.debugLogger.log("server", `[${this._id}] engaged launch mode for "${this._options.browserName}"`);
      const playwright2 = (0, _server.createPlaywright)({
        sdkLanguage: options.sdkLanguage,
        isServer: true
      });
      const ownedSocksProxy = await this._createOwnedSocksProxy(playwright2);
      let browserName = this._options.browserName;
      if ("bidi" === browserName) {
        var _this$_options$launch;
        if ((_this$_options$launch = this._options.launchOptions) !== null && _this$_options$launch !== void 0 && (_this$_options$launch = _this$_options$launch.channel) !== null && _this$_options$launch !== void 0 && _this$_options$launch.toLocaleLowerCase().includes("firefox")) browserName = "bidiFirefox";
        else browserName = "bidiChromium";
      }
      const browser2 = await playwright2[browserName].launch((0, _instrumentation.serverSideCallMetadata)(), this._options.launchOptions);
      this._cleanups.push(async () => {
        for (const browser3 of playwright2.allBrowsers()) await browser3.close({
          reason: "Connection terminated"
        });
      });
      browser2.on(_browser.Browser.Events.Disconnected, () => {
        this.close({
          code: 1001,
          reason: "Browser closed"
        });
      });
      return new _server.PlaywrightDispatcher(scope, playwright2, ownedSocksProxy, browser2);
    }
    async _initPreLaunchedBrowserMode(scope) {
      var _this$_preLaunched$so;
      _debugLogger.debugLogger.log("server", `[${this._id}] engaged pre-launched (browser) mode`);
      const playwright2 = this._preLaunched.playwright;
      (_this$_preLaunched$so = this._preLaunched.socksProxy) === null || _this$_preLaunched$so === void 0 || _this$_preLaunched$so.setPattern(this._options.socksProxyPattern);
      const browser2 = this._preLaunched.browser;
      browser2.on(_browser.Browser.Events.Disconnected, () => {
        this.close({
          code: 1001,
          reason: "Browser closed"
        });
      });
      const playwrightDispatcher2 = new _server.PlaywrightDispatcher(scope, playwright2, this._preLaunched.socksProxy, browser2);
      for (const b of playwright2.allBrowsers()) {
        if (b !== browser2) await b.close({
          reason: "Connection terminated"
        });
      }
      this._cleanups.push(() => playwrightDispatcher2.cleanup());
      return playwrightDispatcher2;
    }
    async _initPreLaunchedAndroidMode(scope) {
      _debugLogger.debugLogger.log("server", `[${this._id}] engaged pre-launched (Android) mode`);
      const playwright2 = this._preLaunched.playwright;
      const androidDevice = this._preLaunched.androidDevice;
      androidDevice.on(_android.AndroidDevice.Events.Close, () => {
        this.close({
          code: 1001,
          reason: "Android device disconnected"
        });
      });
      const playwrightDispatcher2 = new _server.PlaywrightDispatcher(scope, playwright2, void 0, void 0, androidDevice);
      this._cleanups.push(() => playwrightDispatcher2.cleanup());
      return playwrightDispatcher2;
    }
    _initDebugControllerMode() {
      _debugLogger.debugLogger.log("server", `[${this._id}] engaged reuse controller mode`);
      const playwright2 = this._preLaunched.playwright;
      return new _debugControllerDispatcher.DebugControllerDispatcher(this._dispatcherConnection, playwright2.debugController);
    }
    async _initReuseBrowsersMode(scope) {
      _debugLogger.debugLogger.log("server", `[${this._id}] engaged reuse browsers mode for ${this._options.browserName}`);
      const playwright2 = this._preLaunched.playwright;
      const requestedOptions = launchOptionsHash(this._options.launchOptions);
      let browser2 = playwright2.allBrowsers().find((b) => {
        if (b.options.name !== this._options.browserName) return false;
        const existingOptions = launchOptionsHash(b.options.originalLaunchOptions);
        return existingOptions === requestedOptions;
      });
      for (const b of playwright2.allBrowsers()) {
        if (b === browser2) continue;
        if (b.options.name === this._options.browserName && b.options.channel === this._options.launchOptions.channel) await b.close({
          reason: "Connection terminated"
        });
      }
      if (!browser2) {
        browser2 = await playwright2[this._options.browserName || "chromium"].launch((0, _instrumentation.serverSideCallMetadata)(), {
          ...this._options.launchOptions,
          headless: !!process.env.PW_DEBUG_CONTROLLER_HEADLESS
        });
        browser2.on(_browser.Browser.Events.Disconnected, () => {
          this.close({
            code: 1001,
            reason: "Browser closed"
          });
        });
      }
      this._cleanups.push(async () => {
        for (const browser3 of playwright2.allBrowsers()) {
          for (const context of browser3.contexts()) {
            if (!context.pages().length) await context.close({
              reason: "Connection terminated"
            });
            else await context.stopPendingOperations("Connection closed");
          }
          if (!browser3.contexts()) await browser3.close({
            reason: "Connection terminated"
          });
        }
      });
      const playwrightDispatcher2 = new _server.PlaywrightDispatcher(scope, playwright2, void 0, browser2);
      return playwrightDispatcher2;
    }
    async _createOwnedSocksProxy(playwright2) {
      if (!this._options.socksProxyPattern) return;
      const socksProxy2 = new _socksProxy.SocksProxy();
      socksProxy2.setPattern(this._options.socksProxyPattern);
      playwright2.options.socksProxyPort = await socksProxy2.listen(0);
      _debugLogger.debugLogger.log("server", `[${this._id}] started socks proxy on port ${playwright2.options.socksProxyPort}`);
      this._cleanups.push(() => socksProxy2.close());
      return socksProxy2;
    }
    async _onDisconnect(error) {
      this._disconnected = true;
      _debugLogger.debugLogger.log("server", `[${this._id}] disconnected. error: ${error}`);
      this._root._dispose();
      _debugLogger.debugLogger.log("server", `[${this._id}] starting cleanup`);
      for (const cleanup of this._cleanups) await cleanup().catch(() => {
      });
      await (0, _profiler.stopProfiling)(this._profileName);
      this._onClose();
      _debugLogger.debugLogger.log("server", `[${this._id}] finished cleanup`);
    }
    logServerMetadata(message, messageString, direction) {
      const serverLogMetadata = {
        wallTime: Date.now(),
        id: message.id,
        guid: message.guid,
        method: message.method,
        payloadSizeInBytes: Buffer.byteLength(messageString, "utf-8")
      };
      _debugLogger.debugLogger.log("server:metadata", (direction === "SEND" ? "SEND ► " : "◀ RECV ") + JSON.stringify(serverLogMetadata));
    }
    async close(reason) {
      if (this._disconnected) return;
      _debugLogger.debugLogger.log("server", `[${this._id}] force closing connection: ${(reason === null || reason === void 0 ? void 0 : reason.reason) || ""} (${(reason === null || reason === void 0 ? void 0 : reason.code) || 0})`);
      try {
        this._ws.close(reason === null || reason === void 0 ? void 0 : reason.code, reason === null || reason === void 0 ? void 0 : reason.reason);
      } catch (e2) {
      }
    }
  }
  playwrightConnection.PlaywrightConnection = PlaywrightConnection;
  function launchOptionsHash(options) {
    const copy2 = {
      ...options
    };
    for (const k2 of Object.keys(copy2)) {
      const key = k2;
      if (copy2[key] === defaultLaunchOptions[key]) delete copy2[key];
    }
    for (const key of optionsThatAllowBrowserReuse) delete copy2[key];
    return JSON.stringify(copy2);
  }
  function filterLaunchOptions(options, allowFSPaths) {
    return {
      channel: options.channel,
      args: options.args,
      ignoreAllDefaultArgs: options.ignoreAllDefaultArgs,
      ignoreDefaultArgs: options.ignoreDefaultArgs,
      timeout: options.timeout,
      headless: options.headless,
      proxy: options.proxy,
      chromiumSandbox: options.chromiumSandbox,
      firefoxUserPrefs: options.firefoxUserPrefs,
      slowMo: options.slowMo,
      executablePath: (0, _debug.isUnderTest)() || allowFSPaths ? options.executablePath : void 0,
      downloadsPath: allowFSPaths ? options.downloadsPath : void 0
    };
  }
  const defaultLaunchOptions = {
    ignoreAllDefaultArgs: false,
    handleSIGINT: false,
    handleSIGTERM: false,
    handleSIGHUP: false,
    headless: true,
    devtools: false
  };
  const optionsThatAllowBrowserReuse = ["headless", "tracesDir"];
  return playwrightConnection;
}
var hasRequiredPlaywrightServer;
function requirePlaywrightServer() {
  if (hasRequiredPlaywrightServer) return playwrightServer;
  hasRequiredPlaywrightServer = 1;
  Object.defineProperty(playwrightServer, "__esModule", {
    value: true
  });
  playwrightServer.PlaywrightServer = void 0;
  var _playwrightConnection = requirePlaywrightConnection();
  var _playwright = requirePlaywright$1();
  var _debugLogger = requireDebugLogger();
  var _semaphore = requireSemaphore();
  var _wsServer = requireWsServer();
  var _ascii = requireAscii();
  var _userAgent = requireUserAgent();
  class PlaywrightServer {
    constructor(options) {
      this._preLaunchedPlaywright = void 0;
      this._options = void 0;
      this._wsServer = void 0;
      this._options = options;
      if (options.preLaunchedBrowser) this._preLaunchedPlaywright = options.preLaunchedBrowser.attribution.playwright;
      if (options.preLaunchedAndroidDevice) this._preLaunchedPlaywright = options.preLaunchedAndroidDevice._android.attribution.playwright;
      const browserSemaphore = new _semaphore.Semaphore(this._options.maxConnections);
      const controllerSemaphore = new _semaphore.Semaphore(1);
      const reuseBrowserSemaphore = new _semaphore.Semaphore(1);
      this._wsServer = new _wsServer.WSServer({
        onUpgrade: (request, socket) => {
          const uaError = userAgentVersionMatchesErrorMessage(request.headers["user-agent"] || "");
          if (uaError) return {
            error: `HTTP/${request.httpVersion} 428 Precondition Required\r
\r
${uaError}`
          };
        },
        onHeaders: (headers2) => {
          if (process.env.PWTEST_SERVER_WS_HEADERS) headers2.push(process.env.PWTEST_SERVER_WS_HEADERS);
        },
        onConnection: (request, url, ws, id) => {
          const browserHeader = request.headers["x-playwright-browser"];
          const browserName = url.searchParams.get("browser") || (Array.isArray(browserHeader) ? browserHeader[0] : browserHeader) || null;
          const proxyHeader = request.headers["x-playwright-proxy"];
          const proxyValue = url.searchParams.get("proxy") || (Array.isArray(proxyHeader) ? proxyHeader[0] : proxyHeader);
          const launchOptionsHeader = request.headers["x-playwright-launch-options"] || "";
          const launchOptionsHeaderValue = Array.isArray(launchOptionsHeader) ? launchOptionsHeader[0] : launchOptionsHeader;
          const launchOptionsParam = url.searchParams.get("launch-options");
          let launchOptions = {};
          try {
            launchOptions = JSON.parse(launchOptionsParam || launchOptionsHeaderValue);
          } catch (e2) {
          }
          const isExtension = this._options.mode === "extension";
          if (isExtension) {
            if (!this._preLaunchedPlaywright) this._preLaunchedPlaywright = (0, _playwright.createPlaywright)({
              sdkLanguage: "javascript",
              isServer: true
            });
          }
          let clientType = "launch-browser";
          let semaphore2 = browserSemaphore;
          if (isExtension && url.searchParams.has("debug-controller")) {
            clientType = "controller";
            semaphore2 = controllerSemaphore;
          } else if (isExtension) {
            clientType = "reuse-browser";
            semaphore2 = reuseBrowserSemaphore;
          } else if (this._options.mode === "launchServer") {
            clientType = "pre-launched-browser-or-android";
            semaphore2 = browserSemaphore;
          }
          return new _playwrightConnection.PlaywrightConnection(semaphore2.acquire(), clientType, ws, {
            socksProxyPattern: proxyValue,
            browserName,
            launchOptions,
            allowFSPaths: this._options.mode === "extension"
          }, {
            playwright: this._preLaunchedPlaywright,
            browser: this._options.preLaunchedBrowser,
            androidDevice: this._options.preLaunchedAndroidDevice,
            socksProxy: this._options.preLaunchedSocksProxy
          }, id, () => semaphore2.release());
        },
        onClose: async () => {
          _debugLogger.debugLogger.log("server", "closing browsers");
          if (this._preLaunchedPlaywright) await Promise.all(this._preLaunchedPlaywright.allBrowsers().map((browser2) => browser2.close({
            reason: "Playwright Server stopped"
          })));
          _debugLogger.debugLogger.log("server", "closed browsers");
        }
      });
    }
    async listen(port = 0, hostname) {
      return this._wsServer.listen(port, hostname, this._options.path);
    }
    async close() {
      await this._wsServer.close();
    }
  }
  playwrightServer.PlaywrightServer = PlaywrightServer;
  function userAgentVersionMatchesErrorMessage(userAgent2) {
    const match = userAgent2.match(/^Playwright\/(\d+\.\d+\.\d+)/);
    if (!match) {
      return;
    }
    const received = match[1].split(".").slice(0, 2).join(".");
    const expected = (0, _userAgent.getPlaywrightVersion)(true);
    if (received !== expected) {
      return (0, _ascii.wrapInASCIIBox)([`Playwright version mismatch:`, `  - server version: v${expected}`, `  - client version: v${received}`, ``, `If you are using VSCode extension, restart VSCode.`, ``, `If you are connecting to a remote service,`, `keep your local Playwright version in sync`, `with the remote service version.`, ``, `<3 Playwright Team`].join("\n"), 1);
    }
  }
  return playwrightServer;
}
var hasRequiredAndroidServerImpl;
function requireAndroidServerImpl() {
  if (hasRequiredAndroidServerImpl) return androidServerImpl;
  hasRequiredAndroidServerImpl = 1;
  Object.defineProperty(androidServerImpl, "__esModule", {
    value: true
  });
  androidServerImpl.AndroidServerLauncherImpl = void 0;
  var _playwrightServer = requirePlaywrightServer();
  var _playwright = requirePlaywright$1();
  var _crypto = requireCrypto();
  var _utilsBundle = requireUtilsBundle();
  class AndroidServerLauncherImpl {
    async launchServer(options = {}) {
      const playwright2 = (0, _playwright.createPlaywright)({
        sdkLanguage: "javascript",
        isServer: true
      });
      let devices = await playwright2.android.devices({
        host: options.adbHost,
        port: options.adbPort,
        omitDriverInstall: options.omitDriverInstall
      });
      if (devices.length === 0) throw new Error("No devices found");
      if (options.deviceSerialNumber) {
        devices = devices.filter((d2) => d2.serial === options.deviceSerialNumber);
        if (devices.length === 0) throw new Error(`No device with serial number '${options.deviceSerialNumber}' was found`);
      }
      if (devices.length > 1) throw new Error(`More than one device found. Please specify deviceSerialNumber`);
      const device = devices[0];
      const path = options.wsPath ? options.wsPath.startsWith("/") ? options.wsPath : `/${options.wsPath}` : `/${(0, _crypto.createGuid)()}`;
      const server2 = new _playwrightServer.PlaywrightServer({
        mode: "launchServer",
        path,
        maxConnections: 1,
        preLaunchedAndroidDevice: device
      });
      const wsEndpoint = await server2.listen(options.port, options.host);
      const browserServer = new _utilsBundle.ws.EventEmitter();
      browserServer.wsEndpoint = () => wsEndpoint;
      browserServer.close = () => device.close();
      browserServer.kill = () => device.close();
      device.on("close", () => {
        server2.close();
        browserServer.emit("close");
      });
      return browserServer;
    }
  }
  androidServerImpl.AndroidServerLauncherImpl = AndroidServerLauncherImpl;
  return androidServerImpl;
}
var browserServerImpl = {};
var hasRequiredBrowserServerImpl;
function requireBrowserServerImpl() {
  if (hasRequiredBrowserServerImpl) return browserServerImpl;
  hasRequiredBrowserServerImpl = 1;
  Object.defineProperty(browserServerImpl, "__esModule", {
    value: true
  });
  browserServerImpl.BrowserServerLauncherImpl = void 0;
  requireSocksProxy();
  var _playwrightServer = requirePlaywrightServer();
  var _helper = requireHelper();
  var _instrumentation = requireInstrumentation();
  var _playwright = requirePlaywright$1();
  var _crypto = requireCrypto();
  var _stackTrace = requireStackTrace();
  var _utilsBundle = requireUtilsBundle();
  class BrowserServerLauncherImpl {
    constructor(browserName) {
      this._browserName = void 0;
      this._browserName = browserName;
    }
    async launchServer(options = {}) {
      const playwright2 = (0, _playwright.createPlaywright)({
        sdkLanguage: "javascript",
        isServer: true
      });
      const socksProxy2 = void 0;
      playwright2.options.socksProxyPort = await void 0;
      const metadata = (0, _instrumentation.serverSideCallMetadata)();
      const browser2 = await playwright2[this._browserName].launch(metadata, {
        ...options,
        ignoreDefaultArgs: Array.isArray(options.ignoreDefaultArgs) ? options.ignoreDefaultArgs : void 0,
        ignoreAllDefaultArgs: !!options.ignoreDefaultArgs && !Array.isArray(options.ignoreDefaultArgs),
        env: options.env ? envObjectToArray(options.env) : void 0
      }, toProtocolLogger(options.logger)).catch((e2) => {
        const log2 = _helper.helper.formatBrowserLogs(metadata.log);
        (0, _stackTrace.rewriteErrorMessage)(e2, `${e2.message} Failed to launch browser.${log2}`);
        throw e2;
      });
      const path = options.wsPath ? options.wsPath.startsWith("/") ? options.wsPath : `/${options.wsPath}` : `/${(0, _crypto.createGuid)()}`;
      const server2 = new _playwrightServer.PlaywrightServer({
        mode: "launchServer",
        path,
        maxConnections: Infinity,
        preLaunchedBrowser: browser2,
        preLaunchedSocksProxy: socksProxy2
      });
      const wsEndpoint = await server2.listen(options.port, options.host);
      const browserServer = new _utilsBundle.ws.EventEmitter();
      browserServer.process = () => browser2.options.browserProcess.process;
      browserServer.wsEndpoint = () => wsEndpoint;
      browserServer.close = () => browser2.options.browserProcess.close();
      browserServer[Symbol.asyncDispose] = browserServer.close;
      browserServer.kill = () => browser2.options.browserProcess.kill();
      browserServer._disconnectForTest = () => server2.close();
      browserServer._userDataDirForTest = browser2._userDataDirForTest;
      browser2.options.browserProcess.onclose = (exitCode, signal) => {
        server2.close();
        browserServer.emit("close", exitCode, signal);
      };
      return browserServer;
    }
  }
  browserServerImpl.BrowserServerLauncherImpl = BrowserServerLauncherImpl;
  function toProtocolLogger(logger2) {
    return logger2 ? (direction, message) => {
      if (logger2.isEnabled("protocol", "verbose")) logger2.log("protocol", "verbose", (direction === "send" ? "SEND ► " : "◀ RECV ") + JSON.stringify(message), [], {});
    } : void 0;
  }
  function envObjectToArray(env2) {
    const result = [];
    for (const name in env2) {
      if (!Object.is(env2[name], void 0)) result.push({
        name,
        value: String(env2[name])
      });
    }
    return result;
  }
  return browserServerImpl;
}
var connection = {};
var eventEmitter = {};
var hasRequiredEventEmitter;
function requireEventEmitter() {
  if (hasRequiredEventEmitter) return eventEmitter;
  hasRequiredEventEmitter = 1;
  Object.defineProperty(eventEmitter, "__esModule", {
    value: true
  });
  eventEmitter.EventEmitter = void 0;
  class EventEmitter2 {
    constructor(platform2) {
      this._events = void 0;
      this._eventsCount = 0;
      this._maxListeners = void 0;
      this._pendingHandlers = /* @__PURE__ */ new Map();
      this._rejectionHandler = void 0;
      this._platform = void 0;
      this._platform = platform2;
      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      }
      this._maxListeners = this._maxListeners || void 0;
      this.on = this.addListener;
      this.off = this.removeListener;
    }
    setMaxListeners(n) {
      if (typeof n !== "number" || n < 0 || Number.isNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
      this._maxListeners = n;
      return this;
    }
    getMaxListeners() {
      return this._maxListeners === void 0 ? this._platform.defaultMaxListeners() : this._maxListeners;
    }
    emit(type, ...args) {
      const events2 = this._events;
      if (events2 === void 0) return false;
      const handler = events2 === null || events2 === void 0 ? void 0 : events2[type];
      if (handler === void 0) return false;
      if (typeof handler === "function") {
        this._callHandler(type, handler, args);
      } else {
        const len = handler.length;
        const listeners = handler.slice();
        for (let i = 0; i < len; ++i) this._callHandler(type, listeners[i], args);
      }
      return true;
    }
    _callHandler(type, handler, args) {
      const promise = Reflect.apply(handler, this, args);
      if (!(promise instanceof Promise)) return;
      let set = this._pendingHandlers.get(type);
      if (!set) {
        set = /* @__PURE__ */ new Set();
        this._pendingHandlers.set(type, set);
      }
      set.add(promise);
      promise.catch((e2) => {
        if (this._rejectionHandler) this._rejectionHandler(e2);
        else throw e2;
      }).finally(() => set.delete(promise));
    }
    addListener(type, listener) {
      return this._addListener(type, listener, false);
    }
    on(type, listener) {
      return this._addListener(type, listener, false);
    }
    _addListener(type, listener, prepend) {
      checkListener(listener);
      let events2 = this._events;
      let existing;
      if (events2 === void 0) {
        events2 = this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      } else {
        if (events2.newListener !== void 0) {
          this.emit("newListener", type, unwrapListener(listener));
          events2 = this._events;
        }
        existing = events2[type];
      }
      if (existing === void 0) {
        existing = events2[type] = listener;
        ++this._eventsCount;
      } else {
        if (typeof existing === "function") {
          existing = events2[type] = prepend ? [listener, existing] : [existing, listener];
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
        const m2 = this.getMaxListeners();
        if (m2 > 0 && existing.length > m2 && !existing.warned) {
          existing.warned = true;
          const w2 = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
          w2.name = "MaxListenersExceededWarning";
          w2.emitter = this;
          w2.type = type;
          w2.count = existing.length;
          if (!this._platform.isUnderTest()) {
            console.warn(w2);
          }
        }
      }
      return this;
    }
    prependListener(type, listener) {
      return this._addListener(type, listener, true);
    }
    once(type, listener) {
      checkListener(listener);
      this.on(type, new OnceWrapper(this, type, listener).wrapperFunction);
      return this;
    }
    prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, new OnceWrapper(this, type, listener).wrapperFunction);
      return this;
    }
    removeListener(type, listener) {
      checkListener(listener);
      const events2 = this._events;
      if (events2 === void 0) return this;
      const list = events2[type];
      if (list === void 0) return this;
      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) {
          this._events = /* @__PURE__ */ Object.create(null);
        } else {
          var _listener;
          delete events2[type];
          if (events2.removeListener) this.emit("removeListener", type, (_listener = list.listener) !== null && _listener !== void 0 ? _listener : listener);
        }
      } else if (typeof list !== "function") {
        let position = -1;
        let originalListener;
        for (let i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || wrappedListener(list[i]) === listener) {
            originalListener = wrappedListener(list[i]);
            position = i;
            break;
          }
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else list.splice(position, 1);
        if (list.length === 1) events2[type] = list[0];
        if (events2.removeListener !== void 0) this.emit("removeListener", type, originalListener || listener);
      }
      return this;
    }
    off(type, listener) {
      return this.removeListener(type, listener);
    }
    removeAllListeners(type, options) {
      this._removeAllListeners(type);
      if (!options) return this;
      if (options.behavior === "wait") {
        const errors2 = [];
        this._rejectionHandler = (error) => errors2.push(error);
        return this._waitFor(type).then(() => {
          if (errors2.length) throw errors2[0];
        });
      }
      if (options.behavior === "ignoreErrors") this._rejectionHandler = () => {
      };
      return Promise.resolve();
    }
    _removeAllListeners(type) {
      const events2 = this._events;
      if (!events2) return;
      if (!events2.removeListener) {
        if (type === void 0) {
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
        } else if (events2[type] !== void 0) {
          if (--this._eventsCount === 0) this._events = /* @__PURE__ */ Object.create(null);
          else delete events2[type];
        }
        return;
      }
      if (type === void 0) {
        const keys = Object.keys(events2);
        let key;
        for (let i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === "removeListener") continue;
          this._removeAllListeners(key);
        }
        this._removeAllListeners("removeListener");
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
        return;
      }
      const listeners = events2[type];
      if (typeof listeners === "function") {
        this.removeListener(type, listeners);
      } else if (listeners !== void 0) {
        for (let i = listeners.length - 1; i >= 0; i--) this.removeListener(type, listeners[i]);
      }
    }
    listeners(type) {
      return this._listeners(this, type, true);
    }
    rawListeners(type) {
      return this._listeners(this, type, false);
    }
    listenerCount(type) {
      const events2 = this._events;
      if (events2 !== void 0) {
        const listener = events2[type];
        if (typeof listener === "function") return 1;
        if (listener !== void 0) return listener.length;
      }
      return 0;
    }
    eventNames() {
      return this._eventsCount > 0 && this._events ? Reflect.ownKeys(this._events) : [];
    }
    async _waitFor(type) {
      let promises = [];
      if (type) {
        promises = [...this._pendingHandlers.get(type) || []];
      } else {
        promises = [];
        for (const [, pending] of this._pendingHandlers) promises.push(...pending);
      }
      await Promise.all(promises);
    }
    _listeners(target, type, unwrap) {
      const events2 = target._events;
      if (events2 === void 0) return [];
      const listener = events2[type];
      if (listener === void 0) return [];
      if (typeof listener === "function") return unwrap ? [unwrapListener(listener)] : [listener];
      return unwrap ? unwrapListeners(listener) : listener.slice();
    }
  }
  eventEmitter.EventEmitter = EventEmitter2;
  function checkListener(listener) {
    if (typeof listener !== "function") throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
  class OnceWrapper {
    constructor(eventEmitter2, eventType, listener) {
      this._fired = false;
      this.wrapperFunction = void 0;
      this._listener = void 0;
      this._eventEmitter = void 0;
      this._eventType = void 0;
      this._eventEmitter = eventEmitter2;
      this._eventType = eventType;
      this._listener = listener;
      this.wrapperFunction = this._handle.bind(this);
      this.wrapperFunction.listener = listener;
    }
    _handle(...args) {
      if (this._fired) return;
      this._fired = true;
      this._eventEmitter.removeListener(this._eventType, this.wrapperFunction);
      return this._listener.apply(this._eventEmitter, args);
    }
  }
  function unwrapListener(l) {
    var _wrappedListener;
    return (_wrappedListener = wrappedListener(l)) !== null && _wrappedListener !== void 0 ? _wrappedListener : l;
  }
  function unwrapListeners(arr) {
    return arr.map((l) => {
      var _wrappedListener2;
      return (_wrappedListener2 = wrappedListener(l)) !== null && _wrappedListener2 !== void 0 ? _wrappedListener2 : l;
    });
  }
  function wrappedListener(l) {
    return l.listener;
  }
  return eventEmitter;
}
var android = {};
var browserContext = {};
var artifact = {};
var channelOwner = {};
var clientStackTrace = {};
var hasRequiredClientStackTrace;
function requireClientStackTrace() {
  if (hasRequiredClientStackTrace) return clientStackTrace;
  hasRequiredClientStackTrace = 1;
  Object.defineProperty(clientStackTrace, "__esModule", {
    value: true
  });
  clientStackTrace.captureLibraryStackTrace = captureLibraryStackTrace;
  var _stackTrace = requireStackTrace();
  function captureLibraryStackTrace(platform2) {
    const stack = (0, _stackTrace.captureRawStack)();
    let parsedFrames = stack.map((line) => {
      const frame2 = (0, _stackTrace.parseStackFrame)(line, platform2.pathSeparator, platform2.showInternalStackFrames());
      if (!frame2 || !frame2.file) return null;
      const isPlaywrightLibrary = !!platform2.coreDir && frame2.file.startsWith(platform2.coreDir);
      const parsed = {
        frame: frame2,
        frameText: line,
        isPlaywrightLibrary
      };
      return parsed;
    }).filter(Boolean);
    let apiName = "";
    for (let i = 0; i < parsedFrames.length - 1; i++) {
      const parsedFrame = parsedFrames[i];
      if (parsedFrame.isPlaywrightLibrary && !parsedFrames[i + 1].isPlaywrightLibrary) {
        apiName = apiName || normalizeAPIName(parsedFrame.frame.function);
        break;
      }
    }
    function normalizeAPIName(name) {
      if (!name) return "";
      const match = name.match(/(API|JS|CDP|[A-Z])(.*)/);
      if (!match) return name;
      return match[1].toLowerCase() + match[2];
    }
    const filterPrefixes = platform2.boxedStackPrefixes();
    parsedFrames = parsedFrames.filter((f2) => {
      if (filterPrefixes.some((prefix) => f2.frame.file.startsWith(prefix))) return false;
      return true;
    });
    return {
      frames: parsedFrames.map((p) => p.frame),
      apiName
    };
  }
  return clientStackTrace;
}
var hasRequiredChannelOwner;
function requireChannelOwner() {
  if (hasRequiredChannelOwner) return channelOwner;
  hasRequiredChannelOwner = 1;
  Object.defineProperty(channelOwner, "__esModule", {
    value: true
  });
  channelOwner.ChannelOwner = void 0;
  var _eventEmitter = requireEventEmitter();
  var _validator = requireValidator();
  var _clientStackTrace = requireClientStackTrace();
  var _stackTrace = requireStackTrace();
  class ChannelOwner extends _eventEmitter.EventEmitter {
    constructor(parent, type, guid, initializer) {
      const connection2 = parent instanceof ChannelOwner ? parent._connection : parent;
      super(connection2._platform);
      this._connection = void 0;
      this._parent = void 0;
      this._objects = /* @__PURE__ */ new Map();
      this._type = void 0;
      this._guid = void 0;
      this._channel = void 0;
      this._initializer = void 0;
      this._logger = void 0;
      this._instrumentation = void 0;
      this._eventToSubscriptionMapping = /* @__PURE__ */ new Map();
      this._isInternalType = false;
      this._wasCollected = false;
      this.setMaxListeners(0);
      this._connection = connection2;
      this._type = type;
      this._guid = guid;
      this._parent = parent instanceof ChannelOwner ? parent : void 0;
      this._instrumentation = this._connection._instrumentation;
      this._connection._objects.set(guid, this);
      if (this._parent) {
        this._parent._objects.set(guid, this);
        this._logger = this._parent._logger;
      }
      this._channel = this._createChannel(new _eventEmitter.EventEmitter(connection2._platform));
      this._initializer = initializer;
    }
    markAsInternalType() {
      this._isInternalType = true;
    }
    _setEventToSubscriptionMapping(mapping) {
      this._eventToSubscriptionMapping = mapping;
    }
    _updateSubscription(event, enabled) {
      const protocolEvent = this._eventToSubscriptionMapping.get(String(event));
      if (protocolEvent) {
        this._wrapApiCall(async () => {
          await this._channel.updateSubscription({
            event: protocolEvent,
            enabled
          });
        }, true).catch(() => {
        });
      }
    }
    on(event, listener) {
      if (!this.listenerCount(event)) this._updateSubscription(event, true);
      super.on(event, listener);
      return this;
    }
    addListener(event, listener) {
      if (!this.listenerCount(event)) this._updateSubscription(event, true);
      super.addListener(event, listener);
      return this;
    }
    prependListener(event, listener) {
      if (!this.listenerCount(event)) this._updateSubscription(event, true);
      super.prependListener(event, listener);
      return this;
    }
    off(event, listener) {
      super.off(event, listener);
      if (!this.listenerCount(event)) this._updateSubscription(event, false);
      return this;
    }
    removeListener(event, listener) {
      super.removeListener(event, listener);
      if (!this.listenerCount(event)) this._updateSubscription(event, false);
      return this;
    }
    _adopt(child) {
      child._parent._objects.delete(child._guid);
      this._objects.set(child._guid, child);
      child._parent = this;
    }
    _dispose(reason) {
      if (this._parent) this._parent._objects.delete(this._guid);
      this._connection._objects.delete(this._guid);
      this._wasCollected = reason === "gc";
      for (const object of [...this._objects.values()]) object._dispose(reason);
      this._objects.clear();
    }
    _debugScopeState() {
      return {
        _guid: this._guid,
        objects: Array.from(this._objects.values()).map((o2) => o2._debugScopeState())
      };
    }
    _validatorToWireContext() {
      return {
        tChannelImpl: tChannelImplToWire,
        binary: this._connection.rawBuffers() ? "buffer" : "toBase64",
        isUnderTest: () => this._platform.isUnderTest()
      };
    }
    _createChannel(base) {
      const channel = new Proxy(base, {
        get: (obj, prop) => {
          if (typeof prop === "string") {
            const validator2 = (0, _validator.maybeFindValidator)(this._type, prop, "Params");
            if (validator2) {
              return async (params) => {
                return await this._wrapApiCall(async (apiZone) => {
                  const validatedParams = validator2(params, "", this._validatorToWireContext());
                  if (!apiZone.isInternal && !apiZone.reported) {
                    apiZone.params = params;
                    apiZone.reported = true;
                    this._instrumentation.onApiCallBegin(apiZone);
                    logApiCall(this._platform, this._logger, `=> ${apiZone.apiName} started`);
                    return await this._connection.sendMessageToServer(this, prop, validatedParams, apiZone.apiName, apiZone.frames, apiZone.stepId);
                  }
                  return await this._connection.sendMessageToServer(this, prop, validatedParams, void 0, [], void 0);
                });
              };
            }
          }
          return obj[prop];
        }
      });
      channel._object = this;
      return channel;
    }
    async _wrapApiCall(func, isInternal) {
      const logger2 = this._logger;
      const existingApiZone = this._platform.zones.current().data();
      if (existingApiZone) return await func(existingApiZone);
      if (isInternal === void 0) isInternal = this._isInternalType;
      const stackTrace2 = (0, _clientStackTrace.captureLibraryStackTrace)(this._platform);
      const apiZone = {
        apiName: stackTrace2.apiName,
        frames: stackTrace2.frames,
        isInternal,
        reported: false,
        userData: void 0,
        stepId: void 0
      };
      try {
        const result = await this._platform.zones.current().push(apiZone).run(async () => await func(apiZone));
        if (!isInternal) {
          logApiCall(this._platform, logger2, `<= ${apiZone.apiName} succeeded`);
          this._instrumentation.onApiCallEnd(apiZone);
        }
        return result;
      } catch (e2) {
        const innerError = (this._platform.showInternalStackFrames() || this._platform.isUnderTest()) && e2.stack ? "\n<inner error>\n" + e2.stack : "";
        if (apiZone.apiName && !apiZone.apiName.includes("<anonymous>")) e2.message = apiZone.apiName + ": " + e2.message;
        const stackFrames = "\n" + (0, _stackTrace.stringifyStackFrames)(stackTrace2.frames).join("\n") + innerError;
        if (stackFrames.trim()) e2.stack = e2.message + stackFrames;
        else e2.stack = "";
        if (!isInternal) {
          apiZone.error = e2;
          logApiCall(this._platform, logger2, `<= ${apiZone.apiName} failed`);
          this._instrumentation.onApiCallEnd(apiZone);
        }
        throw e2;
      }
    }
    _toImpl() {
      var _this$_connection$toI, _this$_connection;
      return (_this$_connection$toI = (_this$_connection = this._connection).toImpl) === null || _this$_connection$toI === void 0 ? void 0 : _this$_connection$toI.call(_this$_connection, this);
    }
    toJSON() {
      return {
        _type: this._type,
        _guid: this._guid
      };
    }
  }
  channelOwner.ChannelOwner = ChannelOwner;
  function logApiCall(platform2, logger2, message) {
    if (logger2 && logger2.isEnabled("api", "info")) logger2.log("api", "info", message, [], {
      color: "cyan"
    });
    platform2.log("api", message);
  }
  function tChannelImplToWire(names, arg, path, context) {
    if (arg._object instanceof ChannelOwner && (names === "*" || names.includes(arg._object._type))) return {
      guid: arg._object._guid
    };
    throw new _validator.ValidationError(`${path}: expected channel ${names.toString()}`);
  }
  return channelOwner;
}
var stream = {};
var hasRequiredStream;
function requireStream() {
  if (hasRequiredStream) return stream;
  hasRequiredStream = 1;
  Object.defineProperty(stream, "__esModule", {
    value: true
  });
  stream.Stream = void 0;
  var _channelOwner = requireChannelOwner();
  class Stream extends _channelOwner.ChannelOwner {
    static from(Stream2) {
      return Stream2._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
    }
    stream() {
      return this._platform.streamReadable(this._channel);
    }
  }
  stream.Stream = Stream;
  return stream;
}
var fileUtils = {};
var hasRequiredFileUtils;
function requireFileUtils() {
  if (hasRequiredFileUtils) return fileUtils;
  hasRequiredFileUtils = 1;
  Object.defineProperty(fileUtils, "__esModule", {
    value: true
  });
  fileUtils.fileUploadSizeLimit = void 0;
  fileUtils.mkdirIfNeeded = mkdirIfNeeded;
  fileUtils.fileUploadSizeLimit = 50 * 1024 * 1024;
  async function mkdirIfNeeded(platform2, filePath) {
    await platform2.fs().promises.mkdir(platform2.path().dirname(filePath), {
      recursive: true
    }).catch(() => {
    });
  }
  return fileUtils;
}
var hasRequiredArtifact;
function requireArtifact() {
  if (hasRequiredArtifact) return artifact;
  hasRequiredArtifact = 1;
  Object.defineProperty(artifact, "__esModule", {
    value: true
  });
  artifact.Artifact = void 0;
  var _channelOwner = requireChannelOwner();
  var _stream = requireStream();
  var _fileUtils = requireFileUtils();
  class Artifact extends _channelOwner.ChannelOwner {
    static from(channel) {
      return channel._object;
    }
    async pathAfterFinished() {
      if (this._connection.isRemote()) throw new Error(`Path is not available when connecting remotely. Use saveAs() to save a local copy.`);
      return (await this._channel.pathAfterFinished()).value;
    }
    async saveAs(path) {
      if (!this._connection.isRemote()) {
        await this._channel.saveAs({
          path
        });
        return;
      }
      const result = await this._channel.saveAsStream();
      const stream2 = _stream.Stream.from(result.stream);
      await (0, _fileUtils.mkdirIfNeeded)(this._platform, path);
      await new Promise((resolve2, reject) => {
        stream2.stream().pipe(this._platform.fs().createWriteStream(path)).on("finish", resolve2).on("error", reject);
      });
    }
    async failure() {
      return (await this._channel.failure()).error || null;
    }
    async createReadStream() {
      const result = await this._channel.stream();
      const stream2 = _stream.Stream.from(result.stream);
      return stream2.stream();
    }
    async readIntoBuffer() {
      const stream2 = await this.createReadStream();
      return await new Promise((resolve2, reject) => {
        const chunks = [];
        stream2.on("data", (chunk) => {
          chunks.push(chunk);
        });
        stream2.on("end", () => {
          resolve2(Buffer.concat(chunks));
        });
        stream2.on("error", reject);
      });
    }
    async cancel() {
      return await this._channel.cancel();
    }
    async delete() {
      return await this._channel.delete();
    }
  }
  artifact.Artifact = Artifact;
  return artifact;
}
var browser$2 = {};
var cdpSession = {};
var hasRequiredCdpSession;
function requireCdpSession() {
  if (hasRequiredCdpSession) return cdpSession;
  hasRequiredCdpSession = 1;
  Object.defineProperty(cdpSession, "__esModule", {
    value: true
  });
  cdpSession.CDPSession = void 0;
  var _channelOwner = requireChannelOwner();
  class CDPSession extends _channelOwner.ChannelOwner {
    static from(cdpSession2) {
      return cdpSession2._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._channel.on("event", ({
        method,
        params
      }) => {
        this.emit(method, params);
      });
      this.on = super.on;
      this.addListener = super.addListener;
      this.off = super.removeListener;
      this.removeListener = super.removeListener;
      this.once = super.once;
    }
    async send(method, params) {
      const result = await this._channel.send({
        method,
        params
      });
      return result.result;
    }
    async detach() {
      return await this._channel.detach();
    }
  }
  cdpSession.CDPSession = CDPSession;
  return cdpSession;
}
var errors = {};
var hasRequiredErrors;
function requireErrors() {
  if (hasRequiredErrors) return errors;
  hasRequiredErrors = 1;
  Object.defineProperty(errors, "__esModule", {
    value: true
  });
  errors.TimeoutError = errors.TargetClosedError = void 0;
  errors.isTargetClosedError = isTargetClosedError;
  errors.parseError = parseError;
  errors.serializeError = serializeError;
  var _serializers = requireSerializers();
  var _rtti = requireRtti();
  class TimeoutError extends Error {
    constructor(message) {
      super(message);
      this.name = "TimeoutError";
    }
  }
  errors.TimeoutError = TimeoutError;
  class TargetClosedError extends Error {
    constructor(cause) {
      super(cause || "Target page, context or browser has been closed");
    }
  }
  errors.TargetClosedError = TargetClosedError;
  function isTargetClosedError(error) {
    return error instanceof TargetClosedError;
  }
  function serializeError(e2) {
    if ((0, _rtti.isError)(e2)) return {
      error: {
        message: e2.message,
        stack: e2.stack,
        name: e2.name
      }
    };
    return {
      value: (0, _serializers.serializeValue)(e2, (value) => ({
        fallThrough: value
      }))
    };
  }
  function parseError(error) {
    if (!error.error) {
      if (error.value === void 0) throw new Error("Serialized error must have either an error or a value");
      return (0, _serializers.parseSerializedValue)(error.value, void 0);
    }
    if (error.error.name === "TimeoutError") {
      const e3 = new TimeoutError(error.error.message);
      e3.stack = error.error.stack || "";
      return e3;
    }
    if (error.error.name === "TargetClosedError") {
      const e3 = new TargetClosedError(error.error.message);
      e3.stack = error.error.stack || "";
      return e3;
    }
    const e2 = new Error(error.error.message);
    e2.stack = error.error.stack || "";
    e2.name = error.error.name;
    return e2;
  }
  return errors;
}
var events = {};
var hasRequiredEvents;
function requireEvents() {
  if (hasRequiredEvents) return events;
  hasRequiredEvents = 1;
  Object.defineProperty(events, "__esModule", {
    value: true
  });
  events.Events = void 0;
  events.Events = {
    AndroidDevice: {
      WebView: "webview",
      Close: "close"
    },
    AndroidSocket: {
      Data: "data",
      Close: "close"
    },
    AndroidWebView: {
      Close: "close"
    },
    Browser: {
      Disconnected: "disconnected"
    },
    BrowserContext: {
      Console: "console",
      Close: "close",
      Dialog: "dialog",
      Page: "page",
      // Can't use just 'error' due to node.js special treatment of error events.
      // @see https://nodejs.org/api/events.html#events_error_events
      WebError: "weberror",
      BackgroundPage: "backgroundpage",
      ServiceWorker: "serviceworker",
      Request: "request",
      Response: "response",
      RequestFailed: "requestfailed",
      RequestFinished: "requestfinished"
    },
    BrowserServer: {
      Close: "close"
    },
    Page: {
      Close: "close",
      Crash: "crash",
      Console: "console",
      Dialog: "dialog",
      Download: "download",
      FileChooser: "filechooser",
      DOMContentLoaded: "domcontentloaded",
      // Can't use just 'error' due to node.js special treatment of error events.
      // @see https://nodejs.org/api/events.html#events_error_events
      PageError: "pageerror",
      Request: "request",
      Response: "response",
      RequestFailed: "requestfailed",
      RequestFinished: "requestfinished",
      FrameAttached: "frameattached",
      FrameDetached: "framedetached",
      FrameNavigated: "framenavigated",
      Load: "load",
      Popup: "popup",
      WebSocket: "websocket",
      Worker: "worker"
    },
    WebSocket: {
      Close: "close",
      Error: "socketerror",
      FrameReceived: "framereceived",
      FrameSent: "framesent"
    },
    Worker: {
      Close: "close"
    },
    ElectronApplication: {
      Close: "close",
      Console: "console",
      Window: "window"
    }
  };
  return events;
}
var hasRequiredBrowser$1;
function requireBrowser$1() {
  if (hasRequiredBrowser$1) return browser$2;
  hasRequiredBrowser$1 = 1;
  Object.defineProperty(browser$2, "__esModule", {
    value: true
  });
  browser$2.Browser = void 0;
  var _artifact = requireArtifact();
  var _browserContext = requireBrowserContext();
  var _cdpSession = requireCdpSession();
  var _channelOwner = requireChannelOwner();
  var _errors = requireErrors();
  var _events = requireEvents();
  var _fileUtils = requireFileUtils();
  class Browser extends _channelOwner.ChannelOwner {
    static from(browser2) {
      return browser2._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._contexts = /* @__PURE__ */ new Set();
      this._isConnected = true;
      this._closedPromise = void 0;
      this._shouldCloseConnectionOnClose = false;
      this._browserType = void 0;
      this._options = {};
      this._name = void 0;
      this._path = void 0;
      this._closeReason = void 0;
      this._name = initializer.name;
      this._channel.on("close", () => this._didClose());
      this._closedPromise = new Promise((f2) => this.once(_events.Events.Browser.Disconnected, f2));
    }
    browserType() {
      return this._browserType;
    }
    async newContext(options = {}) {
      return await this._innerNewContext(options, false);
    }
    async _newContextForReuse(options = {}) {
      return await this._wrapApiCall(async () => {
        for (const context of this._contexts) {
          await this._browserType._willCloseContext(context);
          for (const page2 of context.pages()) page2._onClose();
          context._onClose();
        }
        return await this._innerNewContext(options, true);
      }, true);
    }
    async _stopPendingOperations(reason) {
      return await this._wrapApiCall(async () => {
        await this._channel.stopPendingOperations({
          reason
        });
      }, true);
    }
    async _innerNewContext(options = {}, forReuse) {
      options = {
        ...this._browserType._playwright._defaultContextOptions,
        ...options
      };
      const contextOptions = await (0, _browserContext.prepareBrowserContextParams)(this._platform, options);
      const response = forReuse ? await this._channel.newContextForReuse(contextOptions) : await this._channel.newContext(contextOptions);
      const context = _browserContext.BrowserContext.from(response.context);
      await this._browserType._didCreateContext(context, contextOptions, this._options, options.logger || this._logger);
      return context;
    }
    contexts() {
      return [...this._contexts];
    }
    version() {
      return this._initializer.version;
    }
    async newPage(options = {}) {
      return await this._wrapApiCall(async () => {
        const context = await this.newContext(options);
        const page2 = await context.newPage();
        page2._ownedContext = context;
        context._ownerPage = page2;
        return page2;
      });
    }
    isConnected() {
      return this._isConnected;
    }
    async newBrowserCDPSession() {
      return _cdpSession.CDPSession.from((await this._channel.newBrowserCDPSession()).session);
    }
    async startTracing(page2, options = {}) {
      this._path = options.path;
      await this._channel.startTracing({
        ...options,
        page: page2 ? page2._channel : void 0
      });
    }
    async stopTracing() {
      const artifact2 = _artifact.Artifact.from((await this._channel.stopTracing()).artifact);
      const buffer2 = await artifact2.readIntoBuffer();
      await artifact2.delete();
      if (this._path) {
        await (0, _fileUtils.mkdirIfNeeded)(this._platform, this._path);
        await this._platform.fs().promises.writeFile(this._path, buffer2);
        this._path = void 0;
      }
      return buffer2;
    }
    async [Symbol.asyncDispose]() {
      await this.close();
    }
    async close(options = {}) {
      this._closeReason = options.reason;
      try {
        if (this._shouldCloseConnectionOnClose) this._connection.close();
        else await this._channel.close(options);
        await this._closedPromise;
      } catch (e2) {
        if ((0, _errors.isTargetClosedError)(e2)) return;
        throw e2;
      }
    }
    _didClose() {
      this._isConnected = false;
      this.emit(_events.Events.Browser.Disconnected, this);
    }
  }
  browser$2.Browser = Browser;
  return browser$2;
}
var clientHelper = {};
var hasRequiredClientHelper;
function requireClientHelper() {
  if (hasRequiredClientHelper) return clientHelper;
  hasRequiredClientHelper = 1;
  Object.defineProperty(clientHelper, "__esModule", {
    value: true
  });
  clientHelper.addSourceUrlToScript = addSourceUrlToScript;
  clientHelper.envObjectToArray = envObjectToArray;
  clientHelper.evaluationScript = evaluationScript;
  var _rtti = requireRtti();
  function envObjectToArray(env2) {
    const result = [];
    for (const name in env2) {
      if (!Object.is(env2[name], void 0)) result.push({
        name,
        value: String(env2[name])
      });
    }
    return result;
  }
  async function evaluationScript(platform2, fun, arg, addSourceUrl = true) {
    if (typeof fun === "function") {
      const source = fun.toString();
      const argString = Object.is(arg, void 0) ? "undefined" : JSON.stringify(arg);
      return `(${source})(${argString})`;
    }
    if (arg !== void 0) throw new Error("Cannot evaluate a string with arguments");
    if ((0, _rtti.isString)(fun)) return fun;
    if (fun.content !== void 0) return fun.content;
    if (fun.path !== void 0) {
      let source = await platform2.fs().promises.readFile(fun.path, "utf8");
      if (addSourceUrl) source = addSourceUrlToScript(source, fun.path);
      return source;
    }
    throw new Error("Either path or content property must be present");
  }
  function addSourceUrlToScript(source, path) {
    return `${source}
//# sourceURL=${path.replace(/\n/g, "")}`;
  }
  return clientHelper;
}
var clock = {};
var hasRequiredClock;
function requireClock() {
  if (hasRequiredClock) return clock;
  hasRequiredClock = 1;
  Object.defineProperty(clock, "__esModule", {
    value: true
  });
  clock.Clock = void 0;
  class Clock {
    constructor(browserContext2) {
      this._browserContext = void 0;
      this._browserContext = browserContext2;
    }
    async install(options = {}) {
      await this._browserContext._channel.clockInstall(options.time !== void 0 ? parseTime(options.time) : {});
    }
    async fastForward(ticks) {
      await this._browserContext._channel.clockFastForward(parseTicks(ticks));
    }
    async pauseAt(time2) {
      await this._browserContext._channel.clockPauseAt(parseTime(time2));
    }
    async resume() {
      await this._browserContext._channel.clockResume({});
    }
    async runFor(ticks) {
      await this._browserContext._channel.clockRunFor(parseTicks(ticks));
    }
    async setFixedTime(time2) {
      await this._browserContext._channel.clockSetFixedTime(parseTime(time2));
    }
    async setSystemTime(time2) {
      await this._browserContext._channel.clockSetSystemTime(parseTime(time2));
    }
  }
  clock.Clock = Clock;
  function parseTime(time2) {
    if (typeof time2 === "number") return {
      timeNumber: time2
    };
    if (typeof time2 === "string") return {
      timeString: time2
    };
    if (!isFinite(time2.getTime())) throw new Error(`Invalid date: ${time2}`);
    return {
      timeNumber: time2.getTime()
    };
  }
  function parseTicks(ticks) {
    return {
      ticksNumber: typeof ticks === "number" ? ticks : void 0,
      ticksString: typeof ticks === "string" ? ticks : void 0
    };
  }
  return clock;
}
var consoleMessage = {};
var jsHandle = {};
var hasRequiredJsHandle;
function requireJsHandle() {
  if (hasRequiredJsHandle) return jsHandle;
  hasRequiredJsHandle = 1;
  Object.defineProperty(jsHandle, "__esModule", {
    value: true
  });
  jsHandle.JSHandle = void 0;
  jsHandle.assertMaxArguments = assertMaxArguments;
  jsHandle.parseResult = parseResult;
  jsHandle.serializeArgument = serializeArgument;
  var _channelOwner = requireChannelOwner();
  var _errors = requireErrors();
  var _serializers = requireSerializers();
  class JSHandle extends _channelOwner.ChannelOwner {
    static from(handle) {
      return handle._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._preview = void 0;
      this._preview = this._initializer.preview;
      this._channel.on("previewUpdated", ({
        preview
      }) => this._preview = preview);
    }
    async evaluate(pageFunction, arg) {
      const result = await this._channel.evaluateExpression({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: serializeArgument(arg)
      });
      return parseResult(result.value);
    }
    async evaluateHandle(pageFunction, arg) {
      const result = await this._channel.evaluateExpressionHandle({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: serializeArgument(arg)
      });
      return JSHandle.from(result.handle);
    }
    async getProperty(propertyName) {
      const result = await this._channel.getProperty({
        name: propertyName
      });
      return JSHandle.from(result.handle);
    }
    async getProperties() {
      const map = /* @__PURE__ */ new Map();
      for (const {
        name,
        value
      } of (await this._channel.getPropertyList()).properties) map.set(name, JSHandle.from(value));
      return map;
    }
    async jsonValue() {
      return parseResult((await this._channel.jsonValue()).value);
    }
    asElement() {
      return null;
    }
    async [Symbol.asyncDispose]() {
      await this.dispose();
    }
    async dispose() {
      try {
        await this._channel.dispose();
      } catch (e2) {
        if ((0, _errors.isTargetClosedError)(e2)) return;
        throw e2;
      }
    }
    toString() {
      return this._preview;
    }
  }
  jsHandle.JSHandle = JSHandle;
  function serializeArgument(arg) {
    const handles = [];
    const pushHandle = (channel) => {
      handles.push(channel);
      return handles.length - 1;
    };
    const value = (0, _serializers.serializeValue)(arg, (value2) => {
      if (value2 instanceof JSHandle) return {
        h: pushHandle(value2._channel)
      };
      return {
        fallThrough: value2
      };
    });
    return {
      value,
      handles
    };
  }
  function parseResult(value) {
    return (0, _serializers.parseSerializedValue)(value, void 0);
  }
  function assertMaxArguments(count, max) {
    if (count > max) throw new Error("Too many arguments. If you need to pass more than 1 argument to the function wrap them in an object.");
  }
  return jsHandle;
}
var page = {};
var accessibility = {};
var hasRequiredAccessibility;
function requireAccessibility() {
  if (hasRequiredAccessibility) return accessibility;
  hasRequiredAccessibility = 1;
  Object.defineProperty(accessibility, "__esModule", {
    value: true
  });
  accessibility.Accessibility = void 0;
  function axNodeFromProtocol(axNode) {
    const result = {
      ...axNode,
      value: axNode.valueNumber !== void 0 ? axNode.valueNumber : axNode.valueString,
      checked: axNode.checked === "checked" ? true : axNode.checked === "unchecked" ? false : axNode.checked,
      pressed: axNode.pressed === "pressed" ? true : axNode.pressed === "released" ? false : axNode.pressed,
      children: axNode.children ? axNode.children.map(axNodeFromProtocol) : void 0
    };
    delete result.valueNumber;
    delete result.valueString;
    return result;
  }
  class Accessibility {
    constructor(channel) {
      this._channel = void 0;
      this._channel = channel;
    }
    async snapshot(options = {}) {
      const root = options.root ? options.root._elementChannel : void 0;
      const result = await this._channel.accessibilitySnapshot({
        interestingOnly: options.interestingOnly,
        root
      });
      return result.rootAXNode ? axNodeFromProtocol(result.rootAXNode) : null;
    }
  }
  accessibility.Accessibility = Accessibility;
  return accessibility;
}
var coverage = {};
var hasRequiredCoverage;
function requireCoverage() {
  if (hasRequiredCoverage) return coverage;
  hasRequiredCoverage = 1;
  Object.defineProperty(coverage, "__esModule", {
    value: true
  });
  coverage.Coverage = void 0;
  class Coverage {
    constructor(channel) {
      this._channel = void 0;
      this._channel = channel;
    }
    async startJSCoverage(options = {}) {
      await this._channel.startJSCoverage(options);
    }
    async stopJSCoverage() {
      return (await this._channel.stopJSCoverage()).entries;
    }
    async startCSSCoverage(options = {}) {
      await this._channel.startCSSCoverage(options);
    }
    async stopCSSCoverage() {
      return (await this._channel.stopCSSCoverage()).entries;
    }
  }
  coverage.Coverage = Coverage;
  return coverage;
}
var download = {};
var hasRequiredDownload;
function requireDownload() {
  if (hasRequiredDownload) return download;
  hasRequiredDownload = 1;
  Object.defineProperty(download, "__esModule", {
    value: true
  });
  download.Download = void 0;
  class Download {
    constructor(page2, url, suggestedFilename, artifact2) {
      this._page = void 0;
      this._url = void 0;
      this._suggestedFilename = void 0;
      this._artifact = void 0;
      this._page = page2;
      this._url = url;
      this._suggestedFilename = suggestedFilename;
      this._artifact = artifact2;
    }
    page() {
      return this._page;
    }
    url() {
      return this._url;
    }
    suggestedFilename() {
      return this._suggestedFilename;
    }
    async path() {
      return await this._artifact.pathAfterFinished();
    }
    async saveAs(path) {
      return await this._artifact.saveAs(path);
    }
    async failure() {
      return await this._artifact.failure();
    }
    async createReadStream() {
      return await this._artifact.createReadStream();
    }
    async cancel() {
      return await this._artifact.cancel();
    }
    async delete() {
      return await this._artifact.delete();
    }
  }
  download.Download = Download;
  return download;
}
var elementHandle = {};
var frame = {};
var locator = {};
var locatorUtils = {};
var hasRequiredLocatorUtils;
function requireLocatorUtils() {
  if (hasRequiredLocatorUtils) return locatorUtils;
  hasRequiredLocatorUtils = 1;
  Object.defineProperty(locatorUtils, "__esModule", {
    value: true
  });
  locatorUtils.getByAltTextSelector = getByAltTextSelector;
  locatorUtils.getByLabelSelector = getByLabelSelector;
  locatorUtils.getByPlaceholderSelector = getByPlaceholderSelector;
  locatorUtils.getByRoleSelector = getByRoleSelector;
  locatorUtils.getByTestIdSelector = getByTestIdSelector;
  locatorUtils.getByTextSelector = getByTextSelector;
  locatorUtils.getByTitleSelector = getByTitleSelector;
  var _stringUtils = requireStringUtils();
  function getByAttributeTextSelector(attrName, text, options) {
    return `internal:attr=[${attrName}=${(0, _stringUtils.escapeForAttributeSelector)(text, (options === null || options === void 0 ? void 0 : options.exact) || false)}]`;
  }
  function getByTestIdSelector(testIdAttributeName, testId) {
    return `internal:testid=[${testIdAttributeName}=${(0, _stringUtils.escapeForAttributeSelector)(testId, true)}]`;
  }
  function getByLabelSelector(text, options) {
    return "internal:label=" + (0, _stringUtils.escapeForTextSelector)(text, !!(options !== null && options !== void 0 && options.exact));
  }
  function getByAltTextSelector(text, options) {
    return getByAttributeTextSelector("alt", text, options);
  }
  function getByTitleSelector(text, options) {
    return getByAttributeTextSelector("title", text, options);
  }
  function getByPlaceholderSelector(text, options) {
    return getByAttributeTextSelector("placeholder", text, options);
  }
  function getByTextSelector(text, options) {
    return "internal:text=" + (0, _stringUtils.escapeForTextSelector)(text, !!(options !== null && options !== void 0 && options.exact));
  }
  function getByRoleSelector(role, options = {}) {
    const props = [];
    if (options.checked !== void 0) props.push(["checked", String(options.checked)]);
    if (options.disabled !== void 0) props.push(["disabled", String(options.disabled)]);
    if (options.selected !== void 0) props.push(["selected", String(options.selected)]);
    if (options.expanded !== void 0) props.push(["expanded", String(options.expanded)]);
    if (options.includeHidden !== void 0) props.push(["include-hidden", String(options.includeHidden)]);
    if (options.level !== void 0) props.push(["level", String(options.level)]);
    if (options.name !== void 0) props.push(["name", (0, _stringUtils.escapeForAttributeSelector)(options.name, !!options.exact)]);
    if (options.pressed !== void 0) props.push(["pressed", String(options.pressed)]);
    return `internal:role=${role}${props.map(([n, v2]) => `[${n}=${v2}]`).join("")}`;
  }
  return locatorUtils;
}
var hasRequiredLocator;
function requireLocator() {
  if (hasRequiredLocator) return locator;
  hasRequiredLocator = 1;
  Object.defineProperty(locator, "__esModule", {
    value: true
  });
  locator.Locator = locator.FrameLocator = void 0;
  locator.setTestIdAttribute = setTestIdAttribute;
  locator.testIdAttributeName = testIdAttributeName;
  var _elementHandle = requireElementHandle();
  var _jsHandle = requireJsHandle();
  var _locatorGenerators = requireLocatorGenerators();
  var _locatorUtils = requireLocatorUtils();
  var _stringUtils = requireStringUtils();
  var _rtti = requireRtti();
  var _time = requireTime$1();
  class Locator {
    constructor(frame2, selector, options) {
      this._frame = void 0;
      this._selector = void 0;
      this._frame = frame2;
      this._selector = selector;
      if (options !== null && options !== void 0 && options.hasText) this._selector += ` >> internal:has-text=${(0, _stringUtils.escapeForTextSelector)(options.hasText, false)}`;
      if (options !== null && options !== void 0 && options.hasNotText) this._selector += ` >> internal:has-not-text=${(0, _stringUtils.escapeForTextSelector)(options.hasNotText, false)}`;
      if (options !== null && options !== void 0 && options.has) {
        const locator2 = options.has;
        if (locator2._frame !== frame2) throw new Error(`Inner "has" locator must belong to the same frame.`);
        this._selector += ` >> internal:has=` + JSON.stringify(locator2._selector);
      }
      if (options !== null && options !== void 0 && options.hasNot) {
        const locator2 = options.hasNot;
        if (locator2._frame !== frame2) throw new Error(`Inner "hasNot" locator must belong to the same frame.`);
        this._selector += ` >> internal:has-not=` + JSON.stringify(locator2._selector);
      }
      if ((options === null || options === void 0 ? void 0 : options.visible) !== void 0) this._selector += ` >> visible=${options.visible ? "true" : "false"}`;
      if (this._frame._platform.inspectCustom) this[this._frame._platform.inspectCustom] = () => this._inspect();
    }
    async _withElement(task2, timeout) {
      timeout = this._frame.page()._timeoutSettings.timeout({
        timeout
      });
      const deadline = timeout ? (0, _time.monotonicTime)() + timeout : 0;
      return await this._frame._wrapApiCall(async () => {
        const result = await this._frame._channel.waitForSelector({
          selector: this._selector,
          strict: true,
          state: "attached",
          timeout
        });
        const handle = _elementHandle.ElementHandle.fromNullable(result.element);
        if (!handle) throw new Error(`Could not resolve ${this._selector} to DOM Element`);
        try {
          return await task2(handle, deadline ? deadline - (0, _time.monotonicTime)() : 0);
        } finally {
          await handle.dispose();
        }
      });
    }
    _equals(locator2) {
      return this._frame === locator2._frame && this._selector === locator2._selector;
    }
    page() {
      return this._frame.page();
    }
    async boundingBox(options) {
      return await this._withElement((h2) => h2.boundingBox(), options === null || options === void 0 ? void 0 : options.timeout);
    }
    async check(options = {}) {
      return await this._frame.check(this._selector, {
        strict: true,
        ...options
      });
    }
    async click(options = {}) {
      return await this._frame.click(this._selector, {
        strict: true,
        ...options
      });
    }
    async dblclick(options = {}) {
      return await this._frame.dblclick(this._selector, {
        strict: true,
        ...options
      });
    }
    async dispatchEvent(type, eventInit = {}, options) {
      return await this._frame.dispatchEvent(this._selector, type, eventInit, {
        strict: true,
        ...options
      });
    }
    async dragTo(target, options = {}) {
      return await this._frame.dragAndDrop(this._selector, target._selector, {
        strict: true,
        ...options
      });
    }
    async evaluate(pageFunction, arg, options) {
      return await this._withElement((h2) => h2.evaluate(pageFunction, arg), options === null || options === void 0 ? void 0 : options.timeout);
    }
    async evaluateAll(pageFunction, arg) {
      return await this._frame.$$eval(this._selector, pageFunction, arg);
    }
    async evaluateHandle(pageFunction, arg, options) {
      return await this._withElement((h2) => h2.evaluateHandle(pageFunction, arg), options === null || options === void 0 ? void 0 : options.timeout);
    }
    async fill(value, options = {}) {
      return await this._frame.fill(this._selector, value, {
        strict: true,
        ...options
      });
    }
    async clear(options = {}) {
      return await this.fill("", options);
    }
    async _highlight() {
      return await this._frame._highlight(this._selector);
    }
    async highlight() {
      return await this._frame._highlight(this._selector);
    }
    locator(selectorOrLocator, options) {
      if ((0, _rtti.isString)(selectorOrLocator)) return new Locator(this._frame, this._selector + " >> " + selectorOrLocator, options);
      if (selectorOrLocator._frame !== this._frame) throw new Error(`Locators must belong to the same frame.`);
      return new Locator(this._frame, this._selector + " >> internal:chain=" + JSON.stringify(selectorOrLocator._selector), options);
    }
    getByTestId(testId) {
      return this.locator((0, _locatorUtils.getByTestIdSelector)(testIdAttributeName(), testId));
    }
    getByAltText(text, options) {
      return this.locator((0, _locatorUtils.getByAltTextSelector)(text, options));
    }
    getByLabel(text, options) {
      return this.locator((0, _locatorUtils.getByLabelSelector)(text, options));
    }
    getByPlaceholder(text, options) {
      return this.locator((0, _locatorUtils.getByPlaceholderSelector)(text, options));
    }
    getByText(text, options) {
      return this.locator((0, _locatorUtils.getByTextSelector)(text, options));
    }
    getByTitle(text, options) {
      return this.locator((0, _locatorUtils.getByTitleSelector)(text, options));
    }
    getByRole(role, options = {}) {
      return this.locator((0, _locatorUtils.getByRoleSelector)(role, options));
    }
    frameLocator(selector) {
      return new FrameLocator(this._frame, this._selector + " >> " + selector);
    }
    filter(options) {
      return new Locator(this._frame, this._selector, options);
    }
    async elementHandle(options) {
      return await this._frame.waitForSelector(this._selector, {
        strict: true,
        state: "attached",
        ...options
      });
    }
    async elementHandles() {
      return await this._frame.$$(this._selector);
    }
    contentFrame() {
      return new FrameLocator(this._frame, this._selector);
    }
    first() {
      return new Locator(this._frame, this._selector + " >> nth=0");
    }
    last() {
      return new Locator(this._frame, this._selector + ` >> nth=-1`);
    }
    nth(index) {
      return new Locator(this._frame, this._selector + ` >> nth=${index}`);
    }
    and(locator2) {
      if (locator2._frame !== this._frame) throw new Error(`Locators must belong to the same frame.`);
      return new Locator(this._frame, this._selector + ` >> internal:and=` + JSON.stringify(locator2._selector));
    }
    or(locator2) {
      if (locator2._frame !== this._frame) throw new Error(`Locators must belong to the same frame.`);
      return new Locator(this._frame, this._selector + ` >> internal:or=` + JSON.stringify(locator2._selector));
    }
    async focus(options) {
      return await this._frame.focus(this._selector, {
        strict: true,
        ...options
      });
    }
    async blur(options) {
      await this._frame._channel.blur({
        selector: this._selector,
        strict: true,
        ...options
      });
    }
    async count() {
      return await this._frame._queryCount(this._selector);
    }
    async _generateLocatorString() {
      return await this._withElement((h2) => h2._generateLocatorString());
    }
    async getAttribute(name, options) {
      return await this._frame.getAttribute(this._selector, name, {
        strict: true,
        ...options
      });
    }
    async hover(options = {}) {
      return await this._frame.hover(this._selector, {
        strict: true,
        ...options
      });
    }
    async innerHTML(options) {
      return await this._frame.innerHTML(this._selector, {
        strict: true,
        ...options
      });
    }
    async innerText(options) {
      return await this._frame.innerText(this._selector, {
        strict: true,
        ...options
      });
    }
    async inputValue(options) {
      return await this._frame.inputValue(this._selector, {
        strict: true,
        ...options
      });
    }
    async isChecked(options) {
      return await this._frame.isChecked(this._selector, {
        strict: true,
        ...options
      });
    }
    async isDisabled(options) {
      return await this._frame.isDisabled(this._selector, {
        strict: true,
        ...options
      });
    }
    async isEditable(options) {
      return await this._frame.isEditable(this._selector, {
        strict: true,
        ...options
      });
    }
    async isEnabled(options) {
      return await this._frame.isEnabled(this._selector, {
        strict: true,
        ...options
      });
    }
    async isHidden(options) {
      return await this._frame.isHidden(this._selector, {
        strict: true,
        ...options
      });
    }
    async isVisible(options) {
      return await this._frame.isVisible(this._selector, {
        strict: true,
        ...options
      });
    }
    async press(key, options = {}) {
      return await this._frame.press(this._selector, key, {
        strict: true,
        ...options
      });
    }
    async screenshot(options = {}) {
      const mask = options.mask;
      return await this._withElement((h2, timeout) => h2.screenshot({
        ...options,
        mask,
        timeout
      }), options.timeout);
    }
    async ariaSnapshot(options) {
      const result = await this._frame._channel.ariaSnapshot({
        ...options,
        id: options === null || options === void 0 ? void 0 : options._id,
        mode: options === null || options === void 0 ? void 0 : options._mode,
        selector: this._selector
      });
      return result.snapshot;
    }
    async scrollIntoViewIfNeeded(options = {}) {
      return await this._withElement((h2, timeout) => h2.scrollIntoViewIfNeeded({
        ...options,
        timeout
      }), options.timeout);
    }
    async selectOption(values, options = {}) {
      return await this._frame.selectOption(this._selector, values, {
        strict: true,
        ...options
      });
    }
    async selectText(options = {}) {
      return await this._withElement((h2, timeout) => h2.selectText({
        ...options,
        timeout
      }), options.timeout);
    }
    async setChecked(checked, options) {
      if (checked) await this.check(options);
      else await this.uncheck(options);
    }
    async setInputFiles(files, options = {}) {
      return await this._frame.setInputFiles(this._selector, files, {
        strict: true,
        ...options
      });
    }
    async tap(options = {}) {
      return await this._frame.tap(this._selector, {
        strict: true,
        ...options
      });
    }
    async textContent(options) {
      return await this._frame.textContent(this._selector, {
        strict: true,
        ...options
      });
    }
    async type(text, options = {}) {
      return await this._frame.type(this._selector, text, {
        strict: true,
        ...options
      });
    }
    async pressSequentially(text, options = {}) {
      return await this.type(text, options);
    }
    async uncheck(options = {}) {
      return await this._frame.uncheck(this._selector, {
        strict: true,
        ...options
      });
    }
    async all() {
      return new Array(await this.count()).fill(0).map((e2, i) => this.nth(i));
    }
    async allInnerTexts() {
      return await this._frame.$$eval(this._selector, (ee) => ee.map((e2) => e2.innerText));
    }
    async allTextContents() {
      return await this._frame.$$eval(this._selector, (ee) => ee.map((e2) => e2.textContent || ""));
    }
    async waitFor(options) {
      await this._frame._channel.waitForSelector({
        selector: this._selector,
        strict: true,
        omitReturnValue: true,
        ...options
      });
    }
    async _expect(expression, options) {
      const params = {
        selector: this._selector,
        expression,
        ...options,
        isNot: !!options.isNot
      };
      params.expectedValue = (0, _jsHandle.serializeArgument)(options.expectedValue);
      const result = await this._frame._channel.expect(params);
      if (result.received !== void 0) result.received = (0, _jsHandle.parseResult)(result.received);
      return result;
    }
    _inspect() {
      return this.toString();
    }
    toString() {
      return (0, _locatorGenerators.asLocator)("javascript", this._selector);
    }
  }
  locator.Locator = Locator;
  class FrameLocator {
    constructor(frame2, selector) {
      this._frame = void 0;
      this._frameSelector = void 0;
      this._frame = frame2;
      this._frameSelector = selector;
    }
    locator(selectorOrLocator, options) {
      if ((0, _rtti.isString)(selectorOrLocator)) return new Locator(this._frame, this._frameSelector + " >> internal:control=enter-frame >> " + selectorOrLocator, options);
      if (selectorOrLocator._frame !== this._frame) throw new Error(`Locators must belong to the same frame.`);
      return new Locator(this._frame, this._frameSelector + " >> internal:control=enter-frame >> " + selectorOrLocator._selector, options);
    }
    getByTestId(testId) {
      return this.locator((0, _locatorUtils.getByTestIdSelector)(testIdAttributeName(), testId));
    }
    getByAltText(text, options) {
      return this.locator((0, _locatorUtils.getByAltTextSelector)(text, options));
    }
    getByLabel(text, options) {
      return this.locator((0, _locatorUtils.getByLabelSelector)(text, options));
    }
    getByPlaceholder(text, options) {
      return this.locator((0, _locatorUtils.getByPlaceholderSelector)(text, options));
    }
    getByText(text, options) {
      return this.locator((0, _locatorUtils.getByTextSelector)(text, options));
    }
    getByTitle(text, options) {
      return this.locator((0, _locatorUtils.getByTitleSelector)(text, options));
    }
    getByRole(role, options = {}) {
      return this.locator((0, _locatorUtils.getByRoleSelector)(role, options));
    }
    owner() {
      return new Locator(this._frame, this._frameSelector);
    }
    frameLocator(selector) {
      return new FrameLocator(this._frame, this._frameSelector + " >> internal:control=enter-frame >> " + selector);
    }
    first() {
      return new FrameLocator(this._frame, this._frameSelector + " >> nth=0");
    }
    last() {
      return new FrameLocator(this._frame, this._frameSelector + ` >> nth=-1`);
    }
    nth(index) {
      return new FrameLocator(this._frame, this._frameSelector + ` >> nth=${index}`);
    }
  }
  locator.FrameLocator = FrameLocator;
  let _testIdAttributeName = "data-testid";
  function testIdAttributeName() {
    return _testIdAttributeName;
  }
  function setTestIdAttribute(attributeName) {
    _testIdAttributeName = attributeName;
  }
  return locator;
}
var network = {};
var fetch$1 = {};
var tracing = {};
var hasRequiredTracing;
function requireTracing() {
  if (hasRequiredTracing) return tracing;
  hasRequiredTracing = 1;
  Object.defineProperty(tracing, "__esModule", {
    value: true
  });
  tracing.Tracing = void 0;
  var _artifact = requireArtifact();
  var _channelOwner = requireChannelOwner();
  class Tracing extends _channelOwner.ChannelOwner {
    static from(channel) {
      return channel._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._includeSources = false;
      this._tracesDir = void 0;
      this._stacksId = void 0;
      this._isTracing = false;
      this.markAsInternalType();
    }
    async start(options = {}) {
      this._includeSources = !!options.sources;
      await this._channel.tracingStart({
        name: options.name,
        snapshots: options.snapshots,
        screenshots: options.screenshots,
        live: options._live
      });
      const {
        traceName
      } = await this._channel.tracingStartChunk({
        name: options.name,
        title: options.title
      });
      await this._startCollectingStacks(traceName);
    }
    async startChunk(options = {}) {
      const {
        traceName
      } = await this._channel.tracingStartChunk(options);
      await this._startCollectingStacks(traceName);
    }
    async group(name, options = {}) {
      await this._wrapApiCall(async () => {
        await this._channel.tracingGroup({
          name,
          location: options.location
        });
      }, false);
    }
    async groupEnd() {
      await this._wrapApiCall(async () => {
        await this._channel.tracingGroupEnd();
      }, false);
    }
    async _startCollectingStacks(traceName) {
      var _this$_connection$loc;
      if (!this._isTracing) {
        this._isTracing = true;
        this._connection.setIsTracing(true);
      }
      const result = await ((_this$_connection$loc = this._connection.localUtils()) === null || _this$_connection$loc === void 0 ? void 0 : _this$_connection$loc.tracingStarted({
        tracesDir: this._tracesDir,
        traceName
      }));
      this._stacksId = result === null || result === void 0 ? void 0 : result.stacksId;
    }
    async stopChunk(options = {}) {
      await this._doStopChunk(options.path);
    }
    async stop(options = {}) {
      await this._doStopChunk(options.path);
      await this._channel.tracingStop();
    }
    async _doStopChunk(filePath) {
      this._resetStackCounter();
      if (!filePath) {
        await this._channel.tracingStopChunk({
          mode: "discard"
        });
        if (this._stacksId) await this._connection.localUtils().traceDiscarded({
          stacksId: this._stacksId
        });
        return;
      }
      const localUtils2 = this._connection.localUtils();
      if (!localUtils2) throw new Error("Cannot save trace in thin clients");
      const isLocal = !this._connection.isRemote();
      if (isLocal) {
        const result2 = await this._channel.tracingStopChunk({
          mode: "entries"
        });
        await localUtils2.zip({
          zipFile: filePath,
          entries: result2.entries,
          mode: "write",
          stacksId: this._stacksId,
          includeSources: this._includeSources
        });
        return;
      }
      const result = await this._channel.tracingStopChunk({
        mode: "archive"
      });
      if (!result.artifact) {
        if (this._stacksId) await localUtils2.traceDiscarded({
          stacksId: this._stacksId
        });
        return;
      }
      const artifact2 = _artifact.Artifact.from(result.artifact);
      await artifact2.saveAs(filePath);
      await artifact2.delete();
      await localUtils2.zip({
        zipFile: filePath,
        entries: [],
        mode: "append",
        stacksId: this._stacksId,
        includeSources: this._includeSources
      });
    }
    _resetStackCounter() {
      if (this._isTracing) {
        this._isTracing = false;
        this._connection.setIsTracing(false);
      }
    }
  }
  tracing.Tracing = Tracing;
  return tracing;
}
var hasRequiredFetch;
function requireFetch() {
  if (hasRequiredFetch) return fetch$1;
  hasRequiredFetch = 1;
  Object.defineProperty(fetch$1, "__esModule", {
    value: true
  });
  fetch$1.APIResponse = fetch$1.APIRequestContext = fetch$1.APIRequest = void 0;
  var _browserContext = requireBrowserContext();
  var _channelOwner = requireChannelOwner();
  var _errors = requireErrors();
  var _network = requireNetwork();
  var _tracing = requireTracing();
  var _assert = requireAssert$1();
  var _fileUtils = requireFileUtils();
  var _headers = requireHeaders();
  var _rtti = requireRtti();
  class APIRequest {
    constructor(playwright2) {
      this._playwright = void 0;
      this._contexts = /* @__PURE__ */ new Set();
      this._playwright = playwright2;
    }
    async newContext(options = {}) {
      var _this$_playwright$_de, _this$_playwright$_de2;
      options = {
        ...this._playwright._defaultContextOptions,
        timeout: this._playwright._defaultContextTimeout,
        ...options
      };
      const storageState = typeof options.storageState === "string" ? JSON.parse(await this._playwright._platform.fs().promises.readFile(options.storageState, "utf8")) : options.storageState;
      const context = APIRequestContext.from((await this._playwright._channel.newRequest({
        ...options,
        extraHTTPHeaders: options.extraHTTPHeaders ? (0, _headers.headersObjectToArray)(options.extraHTTPHeaders) : void 0,
        storageState,
        tracesDir: (_this$_playwright$_de = this._playwright._defaultLaunchOptions) === null || _this$_playwright$_de === void 0 ? void 0 : _this$_playwright$_de.tracesDir,
        // We do not expose tracesDir in the API, so do not allow options to accidentally override it.
        clientCertificates: await (0, _browserContext.toClientCertificatesProtocol)(this._playwright._platform, options.clientCertificates)
      })).request);
      this._contexts.add(context);
      context._request = this;
      context._tracing._tracesDir = (_this$_playwright$_de2 = this._playwright._defaultLaunchOptions) === null || _this$_playwright$_de2 === void 0 ? void 0 : _this$_playwright$_de2.tracesDir;
      await context._instrumentation.runAfterCreateRequestContext(context);
      return context;
    }
  }
  fetch$1.APIRequest = APIRequest;
  class APIRequestContext extends _channelOwner.ChannelOwner {
    static from(channel) {
      return channel._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._request = void 0;
      this._tracing = void 0;
      this._closeReason = void 0;
      this._tracing = _tracing.Tracing.from(initializer.tracing);
    }
    async [Symbol.asyncDispose]() {
      await this.dispose();
    }
    async dispose(options = {}) {
      var _this$_request;
      this._closeReason = options.reason;
      await this._instrumentation.runBeforeCloseRequestContext(this);
      try {
        await this._channel.dispose(options);
      } catch (e2) {
        if ((0, _errors.isTargetClosedError)(e2)) return;
        throw e2;
      }
      this._tracing._resetStackCounter();
      (_this$_request = this._request) === null || _this$_request === void 0 || _this$_request._contexts.delete(this);
    }
    async delete(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "DELETE"
      });
    }
    async head(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "HEAD"
      });
    }
    async get(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "GET"
      });
    }
    async patch(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "PATCH"
      });
    }
    async post(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "POST"
      });
    }
    async put(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "PUT"
      });
    }
    async fetch(urlOrRequest, options = {}) {
      const url = (0, _rtti.isString)(urlOrRequest) ? urlOrRequest : void 0;
      const request = (0, _rtti.isString)(urlOrRequest) ? void 0 : urlOrRequest;
      return await this._innerFetch({
        url,
        request,
        ...options
      });
    }
    async _innerFetch(options = {}) {
      return await this._wrapApiCall(async () => {
        var _options$request, _options$request2, _options$request3;
        if (this._closeReason) throw new _errors.TargetClosedError(this._closeReason);
        (0, _assert.assert)(options.request || typeof options.url === "string", "First argument must be either URL string or Request");
        (0, _assert.assert)((options.data === void 0 ? 0 : 1) + (options.form === void 0 ? 0 : 1) + (options.multipart === void 0 ? 0 : 1) <= 1, `Only one of 'data', 'form' or 'multipart' can be specified`);
        (0, _assert.assert)(options.maxRedirects === void 0 || options.maxRedirects >= 0, `'maxRedirects' must be greater than or equal to '0'`);
        (0, _assert.assert)(options.maxRetries === void 0 || options.maxRetries >= 0, `'maxRetries' must be greater than or equal to '0'`);
        const url = options.url !== void 0 ? options.url : options.request.url();
        const method = options.method || ((_options$request = options.request) === null || _options$request === void 0 ? void 0 : _options$request.method());
        let encodedParams = void 0;
        if (typeof options.params === "string") encodedParams = options.params;
        else if (options.params instanceof URLSearchParams) encodedParams = options.params.toString();
        const headersObj = options.headers || ((_options$request2 = options.request) === null || _options$request2 === void 0 ? void 0 : _options$request2.headers());
        const headers2 = headersObj ? (0, _headers.headersObjectToArray)(headersObj) : void 0;
        let jsonData;
        let formData2;
        let multipartData;
        let postDataBuffer;
        if (options.data !== void 0) {
          if ((0, _rtti.isString)(options.data)) {
            if (isJsonContentType(headers2)) jsonData = isJsonParsable(options.data) ? options.data : JSON.stringify(options.data);
            else postDataBuffer = Buffer.from(options.data, "utf8");
          } else if (Buffer.isBuffer(options.data)) {
            postDataBuffer = options.data;
          } else if (typeof options.data === "object" || typeof options.data === "number" || typeof options.data === "boolean") {
            jsonData = JSON.stringify(options.data);
          } else {
            throw new Error(`Unexpected 'data' type`);
          }
        } else if (options.form) {
          if (globalThis.FormData && options.form instanceof FormData) {
            formData2 = [];
            for (const [name, value] of options.form.entries()) {
              if (typeof value !== "string") throw new Error(`Expected string for options.form["${name}"], found File. Please use options.multipart instead.`);
              formData2.push({
                name,
                value
              });
            }
          } else {
            formData2 = objectToArray(options.form);
          }
        } else if (options.multipart) {
          multipartData = [];
          if (globalThis.FormData && options.multipart instanceof FormData) {
            const form = options.multipart;
            for (const [name, value] of form.entries()) {
              if ((0, _rtti.isString)(value)) {
                multipartData.push({
                  name,
                  value
                });
              } else {
                const file2 = {
                  name: value.name,
                  mimeType: value.type,
                  buffer: Buffer.from(await value.arrayBuffer())
                };
                multipartData.push({
                  name,
                  file: file2
                });
              }
            }
          } else {
            for (const [name, value] of Object.entries(options.multipart)) multipartData.push(await toFormField(this._platform, name, value));
          }
        }
        if (postDataBuffer === void 0 && jsonData === void 0 && formData2 === void 0 && multipartData === void 0) postDataBuffer = ((_options$request3 = options.request) === null || _options$request3 === void 0 ? void 0 : _options$request3.postDataBuffer()) || void 0;
        const fixtures = {
          __testHookLookup: options.__testHookLookup
        };
        const result = await this._channel.fetch({
          url,
          params: typeof options.params === "object" ? objectToArray(options.params) : void 0,
          encodedParams,
          method,
          headers: headers2,
          postData: postDataBuffer,
          jsonData,
          formData: formData2,
          multipartData,
          timeout: options.timeout,
          failOnStatusCode: options.failOnStatusCode,
          ignoreHTTPSErrors: options.ignoreHTTPSErrors,
          maxRedirects: options.maxRedirects,
          maxRetries: options.maxRetries,
          ...fixtures
        });
        return new APIResponse(this, result.response);
      });
    }
    async storageState(options = {}) {
      const state = await this._channel.storageState({
        indexedDB: options.indexedDB
      });
      if (options.path) {
        await (0, _fileUtils.mkdirIfNeeded)(this._platform, options.path);
        await this._platform.fs().promises.writeFile(options.path, JSON.stringify(state, void 0, 2), "utf8");
      }
      return state;
    }
  }
  fetch$1.APIRequestContext = APIRequestContext;
  async function toFormField(platform2, name, value) {
    const typeOfValue = typeof value;
    if (isFilePayload(value)) {
      const payload = value;
      if (!Buffer.isBuffer(payload.buffer)) throw new Error(`Unexpected buffer type of 'data.${name}'`);
      return {
        name,
        file: filePayloadToJson(payload)
      };
    } else if (typeOfValue === "string" || typeOfValue === "number" || typeOfValue === "boolean") {
      return {
        name,
        value: String(value)
      };
    } else {
      return {
        name,
        file: await readStreamToJson(platform2, value)
      };
    }
  }
  function isJsonParsable(value) {
    if (typeof value !== "string") return false;
    try {
      JSON.parse(value);
      return true;
    } catch (e2) {
      if (e2 instanceof SyntaxError) return false;
      else throw e2;
    }
  }
  class APIResponse {
    constructor(context, initializer) {
      this._initializer = void 0;
      this._headers = void 0;
      this._request = void 0;
      this._request = context;
      this._initializer = initializer;
      this._headers = new _network.RawHeaders(this._initializer.headers);
      if (context._platform.inspectCustom) this[context._platform.inspectCustom] = () => this._inspect();
    }
    ok() {
      return this._initializer.status >= 200 && this._initializer.status <= 299;
    }
    url() {
      return this._initializer.url;
    }
    status() {
      return this._initializer.status;
    }
    statusText() {
      return this._initializer.statusText;
    }
    headers() {
      return this._headers.headers();
    }
    headersArray() {
      return this._headers.headersArray();
    }
    async body() {
      return await this._request._wrapApiCall(async () => {
        try {
          const result = await this._request._channel.fetchResponseBody({
            fetchUid: this._fetchUid()
          });
          if (result.binary === void 0) throw new Error("Response has been disposed");
          return result.binary;
        } catch (e2) {
          if ((0, _errors.isTargetClosedError)(e2)) throw new Error("Response has been disposed");
          throw e2;
        }
      }, true);
    }
    async text() {
      const content = await this.body();
      return content.toString("utf8");
    }
    async json() {
      const content = await this.text();
      return JSON.parse(content);
    }
    async [Symbol.asyncDispose]() {
      await this.dispose();
    }
    async dispose() {
      await this._request._channel.disposeAPIResponse({
        fetchUid: this._fetchUid()
      });
    }
    _inspect() {
      const headers2 = this.headersArray().map(({
        name,
        value
      }) => `  ${name}: ${value}`);
      return `APIResponse: ${this.status()} ${this.statusText()}
${headers2.join("\n")}`;
    }
    _fetchUid() {
      return this._initializer.fetchUid;
    }
    async _fetchLog() {
      const {
        log: log2
      } = await this._request._channel.fetchLog({
        fetchUid: this._fetchUid()
      });
      return log2;
    }
  }
  fetch$1.APIResponse = APIResponse;
  function filePayloadToJson(payload) {
    return {
      name: payload.name,
      mimeType: payload.mimeType,
      buffer: payload.buffer
    };
  }
  async function readStreamToJson(platform2, stream2) {
    const buffer2 = await new Promise((resolve2, reject) => {
      const chunks = [];
      stream2.on("data", (chunk) => chunks.push(chunk));
      stream2.on("end", () => resolve2(Buffer.concat(chunks)));
      stream2.on("error", (err) => reject(err));
    });
    const streamPath = Buffer.isBuffer(stream2.path) ? stream2.path.toString("utf8") : stream2.path;
    return {
      name: platform2.path().basename(streamPath),
      buffer: buffer2
    };
  }
  function isJsonContentType(headers2) {
    if (!headers2) return false;
    for (const {
      name,
      value
    } of headers2) {
      if (name.toLocaleLowerCase() === "content-type") return value === "application/json";
    }
    return false;
  }
  function objectToArray(map) {
    if (!map) return void 0;
    const result = [];
    for (const [name, value] of Object.entries(map)) {
      if (value !== void 0) result.push({
        name,
        value: String(value)
      });
    }
    return result;
  }
  function isFilePayload(value) {
    return typeof value === "object" && value["name"] && value["mimeType"] && value["buffer"];
  }
  return fetch$1;
}
var waiter = {};
var hasRequiredWaiter;
function requireWaiter() {
  if (hasRequiredWaiter) return waiter;
  hasRequiredWaiter = 1;
  Object.defineProperty(waiter, "__esModule", {
    value: true
  });
  waiter.Waiter = void 0;
  var _errors = requireErrors();
  var _stackTrace = requireStackTrace();
  class Waiter {
    constructor(channelOwner2, event) {
      this._dispose = void 0;
      this._failures = [];
      this._immediateError = void 0;
      this._logs = [];
      this._channelOwner = void 0;
      this._waitId = void 0;
      this._error = void 0;
      this._savedZone = void 0;
      this._waitId = channelOwner2._platform.createGuid();
      this._channelOwner = channelOwner2;
      this._savedZone = channelOwner2._platform.zones.current().pop();
      this._channelOwner._channel.waitForEventInfo({
        info: {
          waitId: this._waitId,
          phase: "before",
          event
        }
      }).catch(() => {
      });
      this._dispose = [() => this._channelOwner._wrapApiCall(async () => {
        await this._channelOwner._channel.waitForEventInfo({
          info: {
            waitId: this._waitId,
            phase: "after",
            error: this._error
          }
        });
      }, true).catch(() => {
      })];
    }
    static createForEvent(channelOwner2, event) {
      return new Waiter(channelOwner2, event);
    }
    async waitForEvent(emitter, event, predicate) {
      const {
        promise,
        dispose
      } = waitForEvent(emitter, event, this._savedZone, predicate);
      return await this.waitForPromise(promise, dispose);
    }
    rejectOnEvent(emitter, event, error, predicate) {
      const {
        promise,
        dispose
      } = waitForEvent(emitter, event, this._savedZone, predicate);
      this._rejectOn(promise.then(() => {
        throw typeof error === "function" ? error() : error;
      }), dispose);
    }
    rejectOnTimeout(timeout, message) {
      if (!timeout) return;
      const {
        promise,
        dispose
      } = waitForTimeout(timeout);
      this._rejectOn(promise.then(() => {
        throw new _errors.TimeoutError(message);
      }), dispose);
    }
    rejectImmediately(error) {
      this._immediateError = error;
    }
    dispose() {
      for (const dispose of this._dispose) dispose();
    }
    async waitForPromise(promise, dispose) {
      try {
        if (this._immediateError) throw this._immediateError;
        const result = await Promise.race([promise, ...this._failures]);
        if (dispose) dispose();
        return result;
      } catch (e2) {
        if (dispose) dispose();
        this._error = e2.message;
        this.dispose();
        (0, _stackTrace.rewriteErrorMessage)(e2, e2.message + formatLogRecording(this._logs));
        throw e2;
      }
    }
    log(s2) {
      this._logs.push(s2);
      this._channelOwner._wrapApiCall(async () => {
        await this._channelOwner._channel.waitForEventInfo({
          info: {
            waitId: this._waitId,
            phase: "log",
            message: s2
          }
        });
      }, true).catch(() => {
      });
    }
    _rejectOn(promise, dispose) {
      this._failures.push(promise);
      if (dispose) this._dispose.push(dispose);
    }
  }
  waiter.Waiter = Waiter;
  function waitForEvent(emitter, event, savedZone, predicate) {
    let listener;
    const promise = new Promise((resolve2, reject) => {
      listener = async (eventArg) => {
        await savedZone.run(async () => {
          try {
            if (predicate && !await predicate(eventArg)) return;
            emitter.removeListener(event, listener);
            resolve2(eventArg);
          } catch (e2) {
            emitter.removeListener(event, listener);
            reject(e2);
          }
        });
      };
      emitter.addListener(event, listener);
    });
    const dispose = () => emitter.removeListener(event, listener);
    return {
      promise,
      dispose
    };
  }
  function waitForTimeout(timeout) {
    let timeoutId;
    const promise = new Promise((resolve2) => timeoutId = setTimeout(resolve2, timeout));
    const dispose = () => clearTimeout(timeoutId);
    return {
      promise,
      dispose
    };
  }
  function formatLogRecording(log2) {
    if (!log2.length) return "";
    const header = ` logs `;
    const headerLength = 60;
    const leftLength = (headerLength - header.length) / 2;
    const rightLength = headerLength - header.length - leftLength;
    return `
${"=".repeat(leftLength)}${header}${"=".repeat(rightLength)}
${log2.join("\n")}
${"=".repeat(headerLength)}`;
  }
  return waiter;
}
var worker = {};
var hasRequiredWorker;
function requireWorker() {
  if (hasRequiredWorker) return worker;
  hasRequiredWorker = 1;
  Object.defineProperty(worker, "__esModule", {
    value: true
  });
  worker.Worker = void 0;
  var _channelOwner = requireChannelOwner();
  var _errors = requireErrors();
  var _events = requireEvents();
  var _jsHandle = requireJsHandle();
  var _manualPromise = requireManualPromise();
  class Worker extends _channelOwner.ChannelOwner {
    static from(worker2) {
      return worker2._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._page = void 0;
      this._context = void 0;
      this._closedScope = new _manualPromise.LongStandingScope();
      this._channel.on("close", () => {
        if (this._page) this._page._workers.delete(this);
        if (this._context) this._context._serviceWorkers.delete(this);
        this.emit(_events.Events.Worker.Close, this);
      });
      this.once(_events.Events.Worker.Close, () => {
        var _this$_page;
        return this._closedScope.close(((_this$_page = this._page) === null || _this$_page === void 0 ? void 0 : _this$_page._closeErrorWithReason()) || new _errors.TargetClosedError());
      });
    }
    url() {
      return this._initializer.url;
    }
    async evaluate(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      const result = await this._channel.evaluateExpression({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async evaluateHandle(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      const result = await this._channel.evaluateExpressionHandle({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return _jsHandle.JSHandle.from(result.handle);
    }
  }
  worker.Worker = Worker;
  return worker;
}
var hasRequiredNetwork;
function requireNetwork() {
  if (hasRequiredNetwork) return network;
  hasRequiredNetwork = 1;
  Object.defineProperty(network, "__esModule", {
    value: true
  });
  network.WebSocketRouteHandler = network.WebSocketRoute = network.WebSocket = network.RouteHandler = network.Route = network.Response = network.Request = network.RawHeaders = void 0;
  network.validateHeaders = validateHeaders;
  var _channelOwner = requireChannelOwner();
  var _errors = requireErrors();
  var _events = requireEvents();
  var _fetch = requireFetch();
  var _frame = requireFrame();
  var _waiter = requireWaiter();
  var _worker = requireWorker();
  var _assert = requireAssert$1();
  var _headers = requireHeaders();
  var _urlMatch = requireUrlMatch();
  var _manualPromise = requireManualPromise();
  var _multimap = requireMultimap();
  var _rtti = requireRtti();
  var _stackTrace = requireStackTrace();
  var _mimeType = requireMimeType();
  class Request extends _channelOwner.ChannelOwner {
    static from(request) {
      return request._object;
    }
    static fromNullable(request) {
      return request ? Request.from(request) : null;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._redirectedFrom = null;
      this._redirectedTo = null;
      this._failureText = null;
      this._provisionalHeaders = void 0;
      this._actualHeadersPromise = void 0;
      this._timing = void 0;
      this._fallbackOverrides = {};
      this.markAsInternalType();
      this._redirectedFrom = Request.fromNullable(initializer.redirectedFrom);
      if (this._redirectedFrom) this._redirectedFrom._redirectedTo = this;
      this._provisionalHeaders = new RawHeaders(initializer.headers);
      this._timing = {
        startTime: 0,
        domainLookupStart: -1,
        domainLookupEnd: -1,
        connectStart: -1,
        secureConnectionStart: -1,
        connectEnd: -1,
        requestStart: -1,
        responseStart: -1,
        responseEnd: -1
      };
    }
    url() {
      return this._fallbackOverrides.url || this._initializer.url;
    }
    resourceType() {
      return this._initializer.resourceType;
    }
    method() {
      return this._fallbackOverrides.method || this._initializer.method;
    }
    postData() {
      var _ref;
      return ((_ref = this._fallbackOverrides.postDataBuffer || this._initializer.postData) === null || _ref === void 0 ? void 0 : _ref.toString("utf-8")) || null;
    }
    postDataBuffer() {
      return this._fallbackOverrides.postDataBuffer || this._initializer.postData || null;
    }
    postDataJSON() {
      const postData = this.postData();
      if (!postData) return null;
      const contentType = this.headers()["content-type"];
      if (contentType !== null && contentType !== void 0 && contentType.includes("application/x-www-form-urlencoded")) {
        const entries = {};
        const parsed = new URLSearchParams(postData);
        for (const [k2, v2] of parsed.entries()) entries[k2] = v2;
        return entries;
      }
      try {
        return JSON.parse(postData);
      } catch (e2) {
        throw new Error("POST data is not a valid JSON object: " + postData);
      }
    }
    /**
     * @deprecated
     */
    headers() {
      if (this._fallbackOverrides.headers) return RawHeaders._fromHeadersObjectLossy(this._fallbackOverrides.headers).headers();
      return this._provisionalHeaders.headers();
    }
    async _actualHeaders() {
      if (this._fallbackOverrides.headers) return RawHeaders._fromHeadersObjectLossy(this._fallbackOverrides.headers);
      if (!this._actualHeadersPromise) {
        this._actualHeadersPromise = this._wrapApiCall(async () => {
          return new RawHeaders((await this._channel.rawRequestHeaders()).headers);
        });
      }
      return await this._actualHeadersPromise;
    }
    async allHeaders() {
      return (await this._actualHeaders()).headers();
    }
    async headersArray() {
      return (await this._actualHeaders()).headersArray();
    }
    async headerValue(name) {
      return (await this._actualHeaders()).get(name);
    }
    async response() {
      return Response.fromNullable((await this._channel.response()).response);
    }
    async _internalResponse() {
      return await this._wrapApiCall(async () => {
        return Response.fromNullable((await this._channel.response()).response);
      }, true);
    }
    frame() {
      if (!this._initializer.frame) {
        (0, _assert.assert)(this.serviceWorker());
        throw new Error("Service Worker requests do not have an associated frame.");
      }
      const frame2 = _frame.Frame.from(this._initializer.frame);
      if (!frame2._page) {
        throw new Error(["Frame for this navigation request is not available, because the request", "was issued before the frame is created. You can check whether the request", "is a navigation request by calling isNavigationRequest() method."].join("\n"));
      }
      return frame2;
    }
    _safePage() {
      var _Frame$fromNullable;
      return ((_Frame$fromNullable = _frame.Frame.fromNullable(this._initializer.frame)) === null || _Frame$fromNullable === void 0 ? void 0 : _Frame$fromNullable._page) || null;
    }
    serviceWorker() {
      return this._initializer.serviceWorker ? _worker.Worker.from(this._initializer.serviceWorker) : null;
    }
    isNavigationRequest() {
      return this._initializer.isNavigationRequest;
    }
    redirectedFrom() {
      return this._redirectedFrom;
    }
    redirectedTo() {
      return this._redirectedTo;
    }
    failure() {
      if (this._failureText === null) return null;
      return {
        errorText: this._failureText
      };
    }
    timing() {
      return this._timing;
    }
    async sizes() {
      const response = await this.response();
      if (!response) throw new Error("Unable to fetch sizes for failed request");
      return (await response._channel.sizes()).sizes;
    }
    _setResponseEndTiming(responseEndTiming) {
      this._timing.responseEnd = responseEndTiming;
      if (this._timing.responseStart === -1) this._timing.responseStart = responseEndTiming;
    }
    _finalRequest() {
      return this._redirectedTo ? this._redirectedTo._finalRequest() : this;
    }
    _applyFallbackOverrides(overrides) {
      if (overrides.url) this._fallbackOverrides.url = overrides.url;
      if (overrides.method) this._fallbackOverrides.method = overrides.method;
      if (overrides.headers) this._fallbackOverrides.headers = overrides.headers;
      if ((0, _rtti.isString)(overrides.postData)) this._fallbackOverrides.postDataBuffer = Buffer.from(overrides.postData, "utf-8");
      else if (overrides.postData instanceof Buffer) this._fallbackOverrides.postDataBuffer = overrides.postData;
      else if (overrides.postData) this._fallbackOverrides.postDataBuffer = Buffer.from(JSON.stringify(overrides.postData), "utf-8");
    }
    _fallbackOverridesForContinue() {
      return this._fallbackOverrides;
    }
    _targetClosedScope() {
      var _this$serviceWorker, _this$_safePage;
      return ((_this$serviceWorker = this.serviceWorker()) === null || _this$serviceWorker === void 0 ? void 0 : _this$serviceWorker._closedScope) || ((_this$_safePage = this._safePage()) === null || _this$_safePage === void 0 ? void 0 : _this$_safePage._closedOrCrashedScope) || new _manualPromise.LongStandingScope();
    }
  }
  network.Request = Request;
  class Route extends _channelOwner.ChannelOwner {
    static from(route) {
      return route._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._handlingPromise = null;
      this._context = void 0;
      this._didThrow = false;
      this.markAsInternalType();
    }
    request() {
      return Request.from(this._initializer.request);
    }
    async _raceWithTargetClose(promise) {
      return await this.request()._targetClosedScope().safeRace(promise);
    }
    async _startHandling() {
      this._handlingPromise = new _manualPromise.ManualPromise();
      return await this._handlingPromise;
    }
    async fallback(options = {}) {
      this._checkNotHandled();
      this.request()._applyFallbackOverrides(options);
      this._reportHandled(false);
    }
    async abort(errorCode) {
      await this._handleRoute(async () => {
        await this._raceWithTargetClose(this._channel.abort({
          errorCode
        }));
      });
    }
    async _redirectNavigationRequest(url) {
      await this._handleRoute(async () => {
        await this._raceWithTargetClose(this._channel.redirectNavigationRequest({
          url
        }));
      });
    }
    async fetch(options = {}) {
      return await this._wrapApiCall(async () => {
        return await this._context.request._innerFetch({
          request: this.request(),
          data: options.postData,
          ...options
        });
      });
    }
    async fulfill(options = {}) {
      await this._handleRoute(async () => {
        await this._wrapApiCall(async () => {
          await this._innerFulfill(options);
        });
      });
    }
    async _handleRoute(callback) {
      this._checkNotHandled();
      try {
        await callback();
        this._reportHandled(true);
      } catch (e2) {
        this._didThrow = true;
        throw e2;
      }
    }
    async _innerFulfill(options = {}) {
      let fetchResponseUid;
      let {
        status: statusOption,
        headers: headersOption,
        body
      } = options;
      if (options.json !== void 0) {
        (0, _assert.assert)(options.body === void 0, "Can specify either body or json parameters");
        body = JSON.stringify(options.json);
      }
      if (options.response instanceof _fetch.APIResponse) {
        statusOption !== null && statusOption !== void 0 ? statusOption : statusOption = options.response.status();
        headersOption !== null && headersOption !== void 0 ? headersOption : headersOption = options.response.headers();
        if (body === void 0 && options.path === void 0) {
          if (options.response._request._connection === this._connection) fetchResponseUid = options.response._fetchUid();
          else body = await options.response.body();
        }
      }
      let isBase64 = false;
      let length = 0;
      if (options.path) {
        const buffer2 = await this._platform.fs().promises.readFile(options.path);
        body = buffer2.toString("base64");
        isBase64 = true;
        length = buffer2.length;
      } else if ((0, _rtti.isString)(body)) {
        isBase64 = false;
        length = Buffer.byteLength(body);
      } else if (body) {
        length = body.length;
        body = body.toString("base64");
        isBase64 = true;
      }
      const headers2 = {};
      for (const header of Object.keys(headersOption || {})) headers2[header.toLowerCase()] = String(headersOption[header]);
      if (options.contentType) headers2["content-type"] = String(options.contentType);
      else if (options.json) headers2["content-type"] = "application/json";
      else if (options.path) headers2["content-type"] = (0, _mimeType.getMimeTypeForPath)(options.path) || "application/octet-stream";
      if (length && !("content-length" in headers2)) headers2["content-length"] = String(length);
      await this._raceWithTargetClose(this._channel.fulfill({
        status: statusOption || 200,
        headers: (0, _headers.headersObjectToArray)(headers2),
        body,
        isBase64,
        fetchResponseUid
      }));
    }
    async continue(options = {}) {
      await this._handleRoute(async () => {
        this.request()._applyFallbackOverrides(options);
        await this._innerContinue(
          false
          /* isFallback */
        );
      });
    }
    _checkNotHandled() {
      if (!this._handlingPromise) throw new Error("Route is already handled!");
    }
    _reportHandled(done) {
      const chain = this._handlingPromise;
      this._handlingPromise = null;
      chain.resolve(done);
    }
    async _innerContinue(isFallback) {
      const options = this.request()._fallbackOverridesForContinue();
      return await this._raceWithTargetClose(this._channel.continue({
        url: options.url,
        method: options.method,
        headers: options.headers ? (0, _headers.headersObjectToArray)(options.headers) : void 0,
        postData: options.postDataBuffer,
        isFallback
      }));
    }
  }
  network.Route = Route;
  class WebSocketRoute extends _channelOwner.ChannelOwner {
    static from(route) {
      return route._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._onPageMessage = void 0;
      this._onPageClose = void 0;
      this._onServerMessage = void 0;
      this._onServerClose = void 0;
      this._server = void 0;
      this._connected = false;
      this.markAsInternalType();
      this._server = {
        onMessage: (handler) => {
          this._onServerMessage = handler;
        },
        onClose: (handler) => {
          this._onServerClose = handler;
        },
        connectToServer: () => {
          throw new Error(`connectToServer must be called on the page-side WebSocketRoute`);
        },
        url: () => {
          return this._initializer.url;
        },
        close: async (options = {}) => {
          await this._channel.closeServer({
            ...options,
            wasClean: true
          }).catch(() => {
          });
        },
        send: (message) => {
          if ((0, _rtti.isString)(message)) this._channel.sendToServer({
            message,
            isBase64: false
          }).catch(() => {
          });
          else this._channel.sendToServer({
            message: message.toString("base64"),
            isBase64: true
          }).catch(() => {
          });
        },
        async [Symbol.asyncDispose]() {
          await this.close();
        }
      };
      this._channel.on("messageFromPage", ({
        message,
        isBase64
      }) => {
        if (this._onPageMessage) this._onPageMessage(isBase64 ? Buffer.from(message, "base64") : message);
        else if (this._connected) this._channel.sendToServer({
          message,
          isBase64
        }).catch(() => {
        });
      });
      this._channel.on("messageFromServer", ({
        message,
        isBase64
      }) => {
        if (this._onServerMessage) this._onServerMessage(isBase64 ? Buffer.from(message, "base64") : message);
        else this._channel.sendToPage({
          message,
          isBase64
        }).catch(() => {
        });
      });
      this._channel.on("closePage", ({
        code,
        reason,
        wasClean
      }) => {
        if (this._onPageClose) this._onPageClose(code, reason);
        else this._channel.closeServer({
          code,
          reason,
          wasClean
        }).catch(() => {
        });
      });
      this._channel.on("closeServer", ({
        code,
        reason,
        wasClean
      }) => {
        if (this._onServerClose) this._onServerClose(code, reason);
        else this._channel.closePage({
          code,
          reason,
          wasClean
        }).catch(() => {
        });
      });
    }
    url() {
      return this._initializer.url;
    }
    async close(options = {}) {
      await this._channel.closePage({
        ...options,
        wasClean: true
      }).catch(() => {
      });
    }
    connectToServer() {
      if (this._connected) throw new Error("Already connected to the server");
      this._connected = true;
      this._channel.connect().catch(() => {
      });
      return this._server;
    }
    send(message) {
      if ((0, _rtti.isString)(message)) this._channel.sendToPage({
        message,
        isBase64: false
      }).catch(() => {
      });
      else this._channel.sendToPage({
        message: message.toString("base64"),
        isBase64: true
      }).catch(() => {
      });
    }
    onMessage(handler) {
      this._onPageMessage = handler;
    }
    onClose(handler) {
      this._onPageClose = handler;
    }
    async [Symbol.asyncDispose]() {
      await this.close();
    }
    async _afterHandle() {
      if (this._connected) return;
      await this._channel.ensureOpened();
    }
  }
  network.WebSocketRoute = WebSocketRoute;
  class WebSocketRouteHandler {
    constructor(baseURL, url, handler) {
      this._baseURL = void 0;
      this.url = void 0;
      this.handler = void 0;
      this._baseURL = baseURL;
      this.url = url;
      this.handler = handler;
    }
    static prepareInterceptionPatterns(handlers) {
      const patterns = [];
      let all = false;
      for (const handler of handlers) {
        if ((0, _rtti.isString)(handler.url)) patterns.push({
          glob: handler.url
        });
        else if ((0, _rtti.isRegExp)(handler.url)) patterns.push({
          regexSource: handler.url.source,
          regexFlags: handler.url.flags
        });
        else all = true;
      }
      if (all) return [{
        glob: "**/*"
      }];
      return patterns;
    }
    matches(wsURL) {
      return (0, _urlMatch.urlMatches)(this._baseURL, wsURL, this.url);
    }
    async handle(webSocketRoute) {
      const handler = this.handler;
      await handler(webSocketRoute);
      await webSocketRoute._afterHandle();
    }
  }
  network.WebSocketRouteHandler = WebSocketRouteHandler;
  class Response extends _channelOwner.ChannelOwner {
    static from(response) {
      return response._object;
    }
    static fromNullable(response) {
      return response ? Response.from(response) : null;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._provisionalHeaders = void 0;
      this._actualHeadersPromise = void 0;
      this._request = void 0;
      this._finishedPromise = new _manualPromise.ManualPromise();
      this.markAsInternalType();
      this._provisionalHeaders = new RawHeaders(initializer.headers);
      this._request = Request.from(this._initializer.request);
      Object.assign(this._request._timing, this._initializer.timing);
    }
    url() {
      return this._initializer.url;
    }
    ok() {
      return this._initializer.status === 0 || this._initializer.status >= 200 && this._initializer.status <= 299;
    }
    status() {
      return this._initializer.status;
    }
    statusText() {
      return this._initializer.statusText;
    }
    fromServiceWorker() {
      return this._initializer.fromServiceWorker;
    }
    /**
     * @deprecated
     */
    headers() {
      return this._provisionalHeaders.headers();
    }
    async _actualHeaders() {
      if (!this._actualHeadersPromise) {
        this._actualHeadersPromise = (async () => {
          return new RawHeaders((await this._channel.rawResponseHeaders()).headers);
        })();
      }
      return await this._actualHeadersPromise;
    }
    async allHeaders() {
      return (await this._actualHeaders()).headers();
    }
    async headersArray() {
      return (await this._actualHeaders()).headersArray().slice();
    }
    async headerValue(name) {
      return (await this._actualHeaders()).get(name);
    }
    async headerValues(name) {
      return (await this._actualHeaders()).getAll(name);
    }
    async finished() {
      return await this.request()._targetClosedScope().race(this._finishedPromise);
    }
    async body() {
      return (await this._channel.body()).binary;
    }
    async text() {
      const content = await this.body();
      return content.toString("utf8");
    }
    async json() {
      const content = await this.text();
      return JSON.parse(content);
    }
    request() {
      return this._request;
    }
    frame() {
      return this._request.frame();
    }
    async serverAddr() {
      return (await this._channel.serverAddr()).value || null;
    }
    async securityDetails() {
      return (await this._channel.securityDetails()).value || null;
    }
  }
  network.Response = Response;
  class WebSocket extends _channelOwner.ChannelOwner {
    static from(webSocket2) {
      return webSocket2._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._page = void 0;
      this._isClosed = void 0;
      this._isClosed = false;
      this._page = parent;
      this._channel.on("frameSent", (event) => {
        if (event.opcode === 1) this.emit(_events.Events.WebSocket.FrameSent, {
          payload: event.data
        });
        else if (event.opcode === 2) this.emit(_events.Events.WebSocket.FrameSent, {
          payload: Buffer.from(event.data, "base64")
        });
      });
      this._channel.on("frameReceived", (event) => {
        if (event.opcode === 1) this.emit(_events.Events.WebSocket.FrameReceived, {
          payload: event.data
        });
        else if (event.opcode === 2) this.emit(_events.Events.WebSocket.FrameReceived, {
          payload: Buffer.from(event.data, "base64")
        });
      });
      this._channel.on("socketError", ({
        error
      }) => this.emit(_events.Events.WebSocket.Error, error));
      this._channel.on("close", () => {
        this._isClosed = true;
        this.emit(_events.Events.WebSocket.Close, this);
      });
    }
    url() {
      return this._initializer.url;
    }
    isClosed() {
      return this._isClosed;
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
      return await this._wrapApiCall(async () => {
        const timeout = this._page._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
        const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
        const waiter2 = _waiter.Waiter.createForEvent(this, event);
        waiter2.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
        if (event !== _events.Events.WebSocket.Error) waiter2.rejectOnEvent(this, _events.Events.WebSocket.Error, new Error("Socket error"));
        if (event !== _events.Events.WebSocket.Close) waiter2.rejectOnEvent(this, _events.Events.WebSocket.Close, new Error("Socket closed"));
        waiter2.rejectOnEvent(this._page, _events.Events.Page.Close, () => this._page._closeErrorWithReason());
        const result = await waiter2.waitForEvent(this, event, predicate);
        waiter2.dispose();
        return result;
      });
    }
  }
  network.WebSocket = WebSocket;
  function validateHeaders(headers2) {
    for (const key of Object.keys(headers2)) {
      const value = headers2[key];
      if (!Object.is(value, void 0) && !(0, _rtti.isString)(value)) throw new Error(`Expected value of header "${key}" to be String, but "${typeof value}" is found.`);
    }
  }
  class RouteHandler {
    constructor(platform2, baseURL, url, handler, times = Number.MAX_SAFE_INTEGER) {
      this.handledCount = 0;
      this._baseURL = void 0;
      this._times = void 0;
      this.url = void 0;
      this.handler = void 0;
      this._ignoreException = false;
      this._activeInvocations = /* @__PURE__ */ new Set();
      this._savedZone = void 0;
      this._baseURL = baseURL;
      this._times = times;
      this.url = url;
      this.handler = handler;
      this._savedZone = platform2.zones.current().pop();
    }
    static prepareInterceptionPatterns(handlers) {
      const patterns = [];
      let all = false;
      for (const handler of handlers) {
        if ((0, _rtti.isString)(handler.url)) patterns.push({
          glob: handler.url
        });
        else if ((0, _rtti.isRegExp)(handler.url)) patterns.push({
          regexSource: handler.url.source,
          regexFlags: handler.url.flags
        });
        else all = true;
      }
      if (all) return [{
        glob: "**/*"
      }];
      return patterns;
    }
    matches(requestURL) {
      return (0, _urlMatch.urlMatches)(this._baseURL, requestURL, this.url);
    }
    async handle(route) {
      return await this._savedZone.run(async () => this._handleImpl(route));
    }
    async _handleImpl(route) {
      const handlerInvocation = {
        complete: new _manualPromise.ManualPromise(),
        route
      };
      this._activeInvocations.add(handlerInvocation);
      try {
        return await this._handleInternal(route);
      } catch (e2) {
        if (this._ignoreException) return false;
        if ((0, _errors.isTargetClosedError)(e2)) {
          (0, _stackTrace.rewriteErrorMessage)(e2, `"${e2.message}" while running route callback.
Consider awaiting \`await page.unrouteAll({ behavior: 'ignoreErrors' })\`
before the end of the test to ignore remaining routes in flight.`);
        }
        throw e2;
      } finally {
        handlerInvocation.complete.resolve();
        this._activeInvocations.delete(handlerInvocation);
      }
    }
    async stop(behavior) {
      if (behavior === "ignoreErrors") {
        this._ignoreException = true;
      } else {
        const promises = [];
        for (const activation of this._activeInvocations) {
          if (!activation.route._didThrow) promises.push(activation.complete);
        }
        await Promise.all(promises);
      }
    }
    async _handleInternal(route) {
      ++this.handledCount;
      const handledPromise = route._startHandling();
      const handler = this.handler;
      const [handled] = await Promise.all([handledPromise, handler(route, route.request())]);
      return handled;
    }
    willExpire() {
      return this.handledCount + 1 >= this._times;
    }
  }
  network.RouteHandler = RouteHandler;
  class RawHeaders {
    static _fromHeadersObjectLossy(headers2) {
      const headersArray = Object.entries(headers2).map(([name, value]) => ({
        name,
        value
      })).filter((header) => header.value !== void 0);
      return new RawHeaders(headersArray);
    }
    constructor(headers2) {
      this._headersArray = void 0;
      this._headersMap = new _multimap.MultiMap();
      this._headersArray = headers2;
      for (const header of headers2) this._headersMap.set(header.name.toLowerCase(), header.value);
    }
    get(name) {
      const values = this.getAll(name);
      if (!values || !values.length) return null;
      return values.join(name.toLowerCase() === "set-cookie" ? "\n" : ", ");
    }
    getAll(name) {
      return [...this._headersMap.get(name.toLowerCase())];
    }
    headers() {
      const result = {};
      for (const name of this._headersMap.keys()) result[name] = this.get(name);
      return result;
    }
    headersArray() {
      return this._headersArray;
    }
  }
  network.RawHeaders = RawHeaders;
  return network;
}
var types = {};
var hasRequiredTypes;
function requireTypes() {
  if (hasRequiredTypes) return types;
  hasRequiredTypes = 1;
  Object.defineProperty(types, "__esModule", {
    value: true
  });
  types.kLifecycleEvents = void 0;
  types.kLifecycleEvents = /* @__PURE__ */ new Set(["load", "domcontentloaded", "networkidle", "commit"]);
  return types;
}
var hasRequiredFrame;
function requireFrame() {
  if (hasRequiredFrame) return frame;
  hasRequiredFrame = 1;
  Object.defineProperty(frame, "__esModule", {
    value: true
  });
  frame.Frame = void 0;
  frame.verifyLoadState = verifyLoadState;
  var _eventEmitter = requireEventEmitter();
  var _channelOwner = requireChannelOwner();
  var _clientHelper = requireClientHelper();
  var _elementHandle = requireElementHandle();
  var _events = requireEvents();
  var _jsHandle = requireJsHandle();
  var _locator = requireLocator();
  var network2 = _interopRequireWildcard(requireNetwork());
  var _types = requireTypes();
  var _waiter = requireWaiter();
  var _assert = requireAssert$1();
  var _locatorUtils = requireLocatorUtils();
  var _urlMatch = requireUrlMatch();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  class Frame extends _channelOwner.ChannelOwner {
    static from(frame2) {
      return frame2._object;
    }
    static fromNullable(frame2) {
      return frame2 ? Frame.from(frame2) : null;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._eventEmitter = void 0;
      this._loadStates = void 0;
      this._parentFrame = null;
      this._url = "";
      this._name = "";
      this._detached = false;
      this._childFrames = /* @__PURE__ */ new Set();
      this._page = void 0;
      this._eventEmitter = new _eventEmitter.EventEmitter(parent._platform);
      this._eventEmitter.setMaxListeners(0);
      this._parentFrame = Frame.fromNullable(initializer.parentFrame);
      if (this._parentFrame) this._parentFrame._childFrames.add(this);
      this._name = initializer.name;
      this._url = initializer.url;
      this._loadStates = new Set(initializer.loadStates);
      this._channel.on("loadstate", (event) => {
        if (event.add) {
          this._loadStates.add(event.add);
          this._eventEmitter.emit("loadstate", event.add);
        }
        if (event.remove) this._loadStates.delete(event.remove);
        if (!this._parentFrame && event.add === "load" && this._page) this._page.emit(_events.Events.Page.Load, this._page);
        if (!this._parentFrame && event.add === "domcontentloaded" && this._page) this._page.emit(_events.Events.Page.DOMContentLoaded, this._page);
      });
      this._channel.on("navigated", (event) => {
        this._url = event.url;
        this._name = event.name;
        this._eventEmitter.emit("navigated", event);
        if (!event.error && this._page) this._page.emit(_events.Events.Page.FrameNavigated, this);
      });
    }
    page() {
      return this._page;
    }
    async goto(url, options = {}) {
      const waitUntil = verifyLoadState("waitUntil", options.waitUntil === void 0 ? "load" : options.waitUntil);
      return network2.Response.fromNullable((await this._channel.goto({
        url,
        ...options,
        waitUntil
      })).response);
    }
    _setupNavigationWaiter(options) {
      const waiter2 = new _waiter.Waiter(this._page, "");
      if (this._page.isClosed()) waiter2.rejectImmediately(this._page._closeErrorWithReason());
      waiter2.rejectOnEvent(this._page, _events.Events.Page.Close, () => this._page._closeErrorWithReason());
      waiter2.rejectOnEvent(this._page, _events.Events.Page.Crash, new Error("Navigation failed because page crashed!"));
      waiter2.rejectOnEvent(this._page, _events.Events.Page.FrameDetached, new Error("Navigating frame was detached!"), (frame2) => frame2 === this);
      const timeout = this._page._timeoutSettings.navigationTimeout(options);
      waiter2.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded.`);
      return waiter2;
    }
    async waitForNavigation(options = {}) {
      return await this._page._wrapApiCall(async () => {
        const waitUntil = verifyLoadState("waitUntil", options.waitUntil === void 0 ? "load" : options.waitUntil);
        const waiter2 = this._setupNavigationWaiter(options);
        const toUrl = typeof options.url === "string" ? ` to "${options.url}"` : "";
        waiter2.log(`waiting for navigation${toUrl} until "${waitUntil}"`);
        const navigatedEvent = await waiter2.waitForEvent(this._eventEmitter, "navigated", (event) => {
          var _this$_page;
          if (event.error) return true;
          waiter2.log(`  navigated to "${event.url}"`);
          return (0, _urlMatch.urlMatches)((_this$_page = this._page) === null || _this$_page === void 0 ? void 0 : _this$_page.context()._options.baseURL, event.url, options.url);
        });
        if (navigatedEvent.error) {
          const e2 = new Error(navigatedEvent.error);
          e2.stack = "";
          await waiter2.waitForPromise(Promise.reject(e2));
        }
        if (!this._loadStates.has(waitUntil)) {
          await waiter2.waitForEvent(this._eventEmitter, "loadstate", (s2) => {
            waiter2.log(`  "${s2}" event fired`);
            return s2 === waitUntil;
          });
        }
        const request = navigatedEvent.newDocument ? network2.Request.fromNullable(navigatedEvent.newDocument.request) : null;
        const response = request ? await waiter2.waitForPromise(request._finalRequest()._internalResponse()) : null;
        waiter2.dispose();
        return response;
      });
    }
    async waitForLoadState(state = "load", options = {}) {
      state = verifyLoadState("state", state);
      return await this._page._wrapApiCall(async () => {
        const waiter2 = this._setupNavigationWaiter(options);
        if (this._loadStates.has(state)) {
          waiter2.log(`  not waiting, "${state}" event already fired`);
        } else {
          await waiter2.waitForEvent(this._eventEmitter, "loadstate", (s2) => {
            waiter2.log(`  "${s2}" event fired`);
            return s2 === state;
          });
        }
        waiter2.dispose();
      });
    }
    async waitForURL(url, options = {}) {
      var _this$_page2;
      if ((0, _urlMatch.urlMatches)((_this$_page2 = this._page) === null || _this$_page2 === void 0 ? void 0 : _this$_page2.context()._options.baseURL, this.url(), url)) return await this.waitForLoadState(options.waitUntil, options);
      await this.waitForNavigation({
        url,
        ...options
      });
    }
    async frameElement() {
      return _elementHandle.ElementHandle.from((await this._channel.frameElement()).element);
    }
    async evaluateHandle(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      const result = await this._channel.evaluateExpressionHandle({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return _jsHandle.JSHandle.from(result.handle);
    }
    async evaluate(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      const result = await this._channel.evaluateExpression({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async _evaluateExposeUtilityScript(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      const result = await this._channel.evaluateExpression({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async $(selector, options) {
      const result = await this._channel.querySelector({
        selector,
        ...options
      });
      return _elementHandle.ElementHandle.fromNullable(result.element);
    }
    async waitForSelector(selector, options = {}) {
      if (options.visibility) throw new Error("options.visibility is not supported, did you mean options.state?");
      if (options.waitFor && options.waitFor !== "visible") throw new Error("options.waitFor is not supported, did you mean options.state?");
      const result = await this._channel.waitForSelector({
        selector,
        ...options
      });
      return _elementHandle.ElementHandle.fromNullable(result.element);
    }
    async dispatchEvent(selector, type, eventInit, options = {}) {
      await this._channel.dispatchEvent({
        selector,
        type,
        eventInit: (0, _jsHandle.serializeArgument)(eventInit),
        ...options
      });
    }
    async $eval(selector, pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 3);
      const result = await this._channel.evalOnSelector({
        selector,
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async $$eval(selector, pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 3);
      const result = await this._channel.evalOnSelectorAll({
        selector,
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async $$(selector) {
      const result = await this._channel.querySelectorAll({
        selector
      });
      return result.elements.map((e2) => _elementHandle.ElementHandle.from(e2));
    }
    async _queryCount(selector) {
      return (await this._channel.queryCount({
        selector
      })).value;
    }
    async content() {
      return (await this._channel.content()).value;
    }
    async setContent(html, options = {}) {
      const waitUntil = verifyLoadState("waitUntil", options.waitUntil === void 0 ? "load" : options.waitUntil);
      await this._channel.setContent({
        html,
        ...options,
        waitUntil
      });
    }
    name() {
      return this._name || "";
    }
    url() {
      return this._url;
    }
    parentFrame() {
      return this._parentFrame;
    }
    childFrames() {
      return Array.from(this._childFrames);
    }
    isDetached() {
      return this._detached;
    }
    async addScriptTag(options = {}) {
      const copy2 = {
        ...options
      };
      if (copy2.path) {
        copy2.content = (await this._platform.fs().promises.readFile(copy2.path)).toString();
        copy2.content = (0, _clientHelper.addSourceUrlToScript)(copy2.content, copy2.path);
      }
      return _elementHandle.ElementHandle.from((await this._channel.addScriptTag({
        ...copy2
      })).element);
    }
    async addStyleTag(options = {}) {
      const copy2 = {
        ...options
      };
      if (copy2.path) {
        copy2.content = (await this._platform.fs().promises.readFile(copy2.path)).toString();
        copy2.content += "/*# sourceURL=" + copy2.path.replace(/\n/g, "") + "*/";
      }
      return _elementHandle.ElementHandle.from((await this._channel.addStyleTag({
        ...copy2
      })).element);
    }
    async click(selector, options = {}) {
      return await this._channel.click({
        selector,
        ...options
      });
    }
    async dblclick(selector, options = {}) {
      return await this._channel.dblclick({
        selector,
        ...options
      });
    }
    async dragAndDrop(source, target, options = {}) {
      return await this._channel.dragAndDrop({
        source,
        target,
        ...options
      });
    }
    async tap(selector, options = {}) {
      return await this._channel.tap({
        selector,
        ...options
      });
    }
    async fill(selector, value, options = {}) {
      return await this._channel.fill({
        selector,
        value,
        ...options
      });
    }
    async _highlight(selector) {
      return await this._channel.highlight({
        selector
      });
    }
    locator(selector, options) {
      return new _locator.Locator(this, selector, options);
    }
    getByTestId(testId) {
      return this.locator((0, _locatorUtils.getByTestIdSelector)((0, _locator.testIdAttributeName)(), testId));
    }
    getByAltText(text, options) {
      return this.locator((0, _locatorUtils.getByAltTextSelector)(text, options));
    }
    getByLabel(text, options) {
      return this.locator((0, _locatorUtils.getByLabelSelector)(text, options));
    }
    getByPlaceholder(text, options) {
      return this.locator((0, _locatorUtils.getByPlaceholderSelector)(text, options));
    }
    getByText(text, options) {
      return this.locator((0, _locatorUtils.getByTextSelector)(text, options));
    }
    getByTitle(text, options) {
      return this.locator((0, _locatorUtils.getByTitleSelector)(text, options));
    }
    getByRole(role, options = {}) {
      return this.locator((0, _locatorUtils.getByRoleSelector)(role, options));
    }
    frameLocator(selector) {
      return new _locator.FrameLocator(this, selector);
    }
    async focus(selector, options = {}) {
      await this._channel.focus({
        selector,
        ...options
      });
    }
    async textContent(selector, options = {}) {
      const value = (await this._channel.textContent({
        selector,
        ...options
      })).value;
      return value === void 0 ? null : value;
    }
    async innerText(selector, options = {}) {
      return (await this._channel.innerText({
        selector,
        ...options
      })).value;
    }
    async innerHTML(selector, options = {}) {
      return (await this._channel.innerHTML({
        selector,
        ...options
      })).value;
    }
    async getAttribute(selector, name, options = {}) {
      const value = (await this._channel.getAttribute({
        selector,
        name,
        ...options
      })).value;
      return value === void 0 ? null : value;
    }
    async inputValue(selector, options = {}) {
      return (await this._channel.inputValue({
        selector,
        ...options
      })).value;
    }
    async isChecked(selector, options = {}) {
      return (await this._channel.isChecked({
        selector,
        ...options
      })).value;
    }
    async isDisabled(selector, options = {}) {
      return (await this._channel.isDisabled({
        selector,
        ...options
      })).value;
    }
    async isEditable(selector, options = {}) {
      return (await this._channel.isEditable({
        selector,
        ...options
      })).value;
    }
    async isEnabled(selector, options = {}) {
      return (await this._channel.isEnabled({
        selector,
        ...options
      })).value;
    }
    async isHidden(selector, options = {}) {
      return (await this._channel.isHidden({
        selector,
        ...options
      })).value;
    }
    async isVisible(selector, options = {}) {
      return (await this._channel.isVisible({
        selector,
        ...options
      })).value;
    }
    async hover(selector, options = {}) {
      await this._channel.hover({
        selector,
        ...options
      });
    }
    async selectOption(selector, values, options = {}) {
      return (await this._channel.selectOption({
        selector,
        ...(0, _elementHandle.convertSelectOptionValues)(values),
        ...options
      })).values;
    }
    async setInputFiles(selector, files, options = {}) {
      const converted = await (0, _elementHandle.convertInputFiles)(this._platform, files, this.page().context());
      await this._channel.setInputFiles({
        selector,
        ...converted,
        ...options
      });
    }
    async type(selector, text, options = {}) {
      await this._channel.type({
        selector,
        text,
        ...options
      });
    }
    async press(selector, key, options = {}) {
      await this._channel.press({
        selector,
        key,
        ...options
      });
    }
    async check(selector, options = {}) {
      await this._channel.check({
        selector,
        ...options
      });
    }
    async uncheck(selector, options = {}) {
      await this._channel.uncheck({
        selector,
        ...options
      });
    }
    async setChecked(selector, checked, options) {
      if (checked) await this.check(selector, options);
      else await this.uncheck(selector, options);
    }
    async waitForTimeout(timeout) {
      await this._channel.waitForTimeout({
        timeout
      });
    }
    async waitForFunction(pageFunction, arg, options = {}) {
      if (typeof options.polling === "string") (0, _assert.assert)(options.polling === "raf", "Unknown polling option: " + options.polling);
      const result = await this._channel.waitForFunction({
        ...options,
        pollingInterval: options.polling === "raf" ? void 0 : options.polling,
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return _jsHandle.JSHandle.from(result.handle);
    }
    async title() {
      return (await this._channel.title()).value;
    }
  }
  frame.Frame = Frame;
  function verifyLoadState(name, waitUntil) {
    if (waitUntil === "networkidle0") waitUntil = "networkidle";
    if (!_types.kLifecycleEvents.has(waitUntil)) throw new Error(`${name}: expected one of (load|domcontentloaded|networkidle|commit)`);
    return waitUntil;
  }
  return frame;
}
var writableStream = {};
var hasRequiredWritableStream;
function requireWritableStream() {
  if (hasRequiredWritableStream) return writableStream;
  hasRequiredWritableStream = 1;
  Object.defineProperty(writableStream, "__esModule", {
    value: true
  });
  writableStream.WritableStream = void 0;
  var _channelOwner = requireChannelOwner();
  class WritableStream extends _channelOwner.ChannelOwner {
    static from(Stream) {
      return Stream._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
    }
    stream() {
      return this._platform.streamWritable(this._channel);
    }
  }
  writableStream.WritableStream = WritableStream;
  return writableStream;
}
var hasRequiredElementHandle;
function requireElementHandle() {
  if (hasRequiredElementHandle) return elementHandle;
  hasRequiredElementHandle = 1;
  Object.defineProperty(elementHandle, "__esModule", {
    value: true
  });
  elementHandle.ElementHandle = void 0;
  elementHandle.convertInputFiles = convertInputFiles;
  elementHandle.convertSelectOptionValues = convertSelectOptionValues;
  elementHandle.determineScreenshotType = determineScreenshotType;
  var _frame = requireFrame();
  var _jsHandle = requireJsHandle();
  var _assert = requireAssert$1();
  var _fileUtils = requireFileUtils();
  var _rtti = requireRtti();
  var _writableStream = requireWritableStream();
  var _mimeType = requireMimeType();
  class ElementHandle extends _jsHandle.JSHandle {
    static from(handle) {
      return handle._object;
    }
    static fromNullable(handle) {
      return handle ? ElementHandle.from(handle) : null;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._elementChannel = void 0;
      this._elementChannel = this._channel;
    }
    asElement() {
      return this;
    }
    async ownerFrame() {
      return _frame.Frame.fromNullable((await this._elementChannel.ownerFrame()).frame);
    }
    async contentFrame() {
      return _frame.Frame.fromNullable((await this._elementChannel.contentFrame()).frame);
    }
    async _generateLocatorString() {
      const value = (await this._elementChannel.generateLocatorString()).value;
      return value === void 0 ? null : value;
    }
    async getAttribute(name) {
      const value = (await this._elementChannel.getAttribute({
        name
      })).value;
      return value === void 0 ? null : value;
    }
    async inputValue() {
      return (await this._elementChannel.inputValue()).value;
    }
    async textContent() {
      const value = (await this._elementChannel.textContent()).value;
      return value === void 0 ? null : value;
    }
    async innerText() {
      return (await this._elementChannel.innerText()).value;
    }
    async innerHTML() {
      return (await this._elementChannel.innerHTML()).value;
    }
    async isChecked() {
      return (await this._elementChannel.isChecked()).value;
    }
    async isDisabled() {
      return (await this._elementChannel.isDisabled()).value;
    }
    async isEditable() {
      return (await this._elementChannel.isEditable()).value;
    }
    async isEnabled() {
      return (await this._elementChannel.isEnabled()).value;
    }
    async isHidden() {
      return (await this._elementChannel.isHidden()).value;
    }
    async isVisible() {
      return (await this._elementChannel.isVisible()).value;
    }
    async dispatchEvent(type, eventInit = {}) {
      await this._elementChannel.dispatchEvent({
        type,
        eventInit: (0, _jsHandle.serializeArgument)(eventInit)
      });
    }
    async scrollIntoViewIfNeeded(options = {}) {
      await this._elementChannel.scrollIntoViewIfNeeded(options);
    }
    async hover(options = {}) {
      await this._elementChannel.hover(options);
    }
    async click(options = {}) {
      return await this._elementChannel.click(options);
    }
    async dblclick(options = {}) {
      return await this._elementChannel.dblclick(options);
    }
    async tap(options = {}) {
      return await this._elementChannel.tap(options);
    }
    async selectOption(values, options = {}) {
      const result = await this._elementChannel.selectOption({
        ...convertSelectOptionValues(values),
        ...options
      });
      return result.values;
    }
    async fill(value, options = {}) {
      return await this._elementChannel.fill({
        value,
        ...options
      });
    }
    async selectText(options = {}) {
      await this._elementChannel.selectText(options);
    }
    async setInputFiles(files, options = {}) {
      const frame2 = await this.ownerFrame();
      if (!frame2) throw new Error("Cannot set input files to detached element");
      const converted = await convertInputFiles(this._platform, files, frame2.page().context());
      await this._elementChannel.setInputFiles({
        ...converted,
        ...options
      });
    }
    async focus() {
      await this._elementChannel.focus();
    }
    async type(text, options = {}) {
      await this._elementChannel.type({
        text,
        ...options
      });
    }
    async press(key, options = {}) {
      await this._elementChannel.press({
        key,
        ...options
      });
    }
    async check(options = {}) {
      return await this._elementChannel.check(options);
    }
    async uncheck(options = {}) {
      return await this._elementChannel.uncheck(options);
    }
    async setChecked(checked, options) {
      if (checked) await this.check(options);
      else await this.uncheck(options);
    }
    async boundingBox() {
      const value = (await this._elementChannel.boundingBox()).value;
      return value === void 0 ? null : value;
    }
    async screenshot(options = {}) {
      const mask = options.mask;
      const copy2 = {
        ...options,
        mask: void 0
      };
      if (!copy2.type) copy2.type = determineScreenshotType(options);
      if (mask) {
        copy2.mask = mask.map((locator2) => ({
          frame: locator2._frame._channel,
          selector: locator2._selector
        }));
      }
      const result = await this._elementChannel.screenshot(copy2);
      if (options.path) {
        await (0, _fileUtils.mkdirIfNeeded)(this._platform, options.path);
        await this._platform.fs().promises.writeFile(options.path, result.binary);
      }
      return result.binary;
    }
    async $(selector) {
      return ElementHandle.fromNullable((await this._elementChannel.querySelector({
        selector
      })).element);
    }
    async $$(selector) {
      const result = await this._elementChannel.querySelectorAll({
        selector
      });
      return result.elements.map((h2) => ElementHandle.from(h2));
    }
    async $eval(selector, pageFunction, arg) {
      const result = await this._elementChannel.evalOnSelector({
        selector,
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async $$eval(selector, pageFunction, arg) {
      const result = await this._elementChannel.evalOnSelectorAll({
        selector,
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async waitForElementState(state, options = {}) {
      return await this._elementChannel.waitForElementState({
        state,
        ...options
      });
    }
    async waitForSelector(selector, options = {}) {
      const result = await this._elementChannel.waitForSelector({
        selector,
        ...options
      });
      return ElementHandle.fromNullable(result.element);
    }
  }
  elementHandle.ElementHandle = ElementHandle;
  function convertSelectOptionValues(values) {
    if (values === null) return {};
    if (!Array.isArray(values)) values = [values];
    if (!values.length) return {};
    for (let i = 0; i < values.length; i++) (0, _assert.assert)(values[i] !== null, `options[${i}]: expected object, got null`);
    if (values[0] instanceof ElementHandle) return {
      elements: values.map((v2) => v2._elementChannel)
    };
    if ((0, _rtti.isString)(values[0])) return {
      options: values.map((valueOrLabel) => ({
        valueOrLabel
      }))
    };
    return {
      options: values
    };
  }
  function filePayloadExceedsSizeLimit(payloads) {
    return payloads.reduce((size, item) => size + (item.buffer ? item.buffer.byteLength : 0), 0) >= _fileUtils.fileUploadSizeLimit;
  }
  async function resolvePathsAndDirectoryForInputFiles(platform2, items) {
    var _localPaths;
    let localPaths;
    let localDirectory;
    for (const item of items) {
      const stat2 = await platform2.fs().promises.stat(item);
      if (stat2.isDirectory()) {
        if (localDirectory) throw new Error("Multiple directories are not supported");
        localDirectory = platform2.path().resolve(item);
      } else {
        localPaths !== null && localPaths !== void 0 ? localPaths : localPaths = [];
        localPaths.push(platform2.path().resolve(item));
      }
    }
    if ((_localPaths = localPaths) !== null && _localPaths !== void 0 && _localPaths.length && localDirectory) throw new Error("File paths must be all files or a single directory");
    return [localPaths, localDirectory];
  }
  async function convertInputFiles(platform2, files, context) {
    const items = Array.isArray(files) ? files.slice() : [files];
    if (items.some((item) => typeof item === "string")) {
      if (!items.every((item) => typeof item === "string")) throw new Error("File paths cannot be mixed with buffers");
      const [localPaths, localDirectory] = await resolvePathsAndDirectoryForInputFiles(platform2, items);
      if (context._connection.isRemote()) {
        const files2 = localDirectory ? (await platform2.fs().promises.readdir(localDirectory, {
          withFileTypes: true,
          recursive: true
        })).filter((f2) => f2.isFile()).map((f2) => platform2.path().join(f2.path, f2.name)) : localPaths;
        const {
          writableStreams,
          rootDir
        } = await context._wrapApiCall(async () => context._channel.createTempFiles({
          rootDirName: localDirectory ? platform2.path().basename(localDirectory) : void 0,
          items: await Promise.all(files2.map(async (file2) => {
            const lastModifiedMs = (await platform2.fs().promises.stat(file2)).mtimeMs;
            return {
              name: localDirectory ? platform2.path().relative(localDirectory, file2) : platform2.path().basename(file2),
              lastModifiedMs
            };
          }))
        }), true);
        for (let i = 0; i < files2.length; i++) {
          const writable = _writableStream.WritableStream.from(writableStreams[i]);
          await platform2.streamFile(files2[i], writable.stream());
        }
        return {
          directoryStream: rootDir,
          streams: localDirectory ? void 0 : writableStreams
        };
      }
      return {
        localPaths,
        localDirectory
      };
    }
    const payloads = items;
    if (filePayloadExceedsSizeLimit(payloads)) throw new Error("Cannot set buffer larger than 50Mb, please write it to a file and pass its path instead.");
    return {
      payloads
    };
  }
  function determineScreenshotType(options) {
    if (options.path) {
      const mimeType2 = (0, _mimeType.getMimeTypeForPath)(options.path);
      if (mimeType2 === "image/png") return "png";
      else if (mimeType2 === "image/jpeg") return "jpeg";
      throw new Error(`path: unsupported mime type "${mimeType2}"`);
    }
    return options.type;
  }
  return elementHandle;
}
var fileChooser = {};
var hasRequiredFileChooser;
function requireFileChooser() {
  if (hasRequiredFileChooser) return fileChooser;
  hasRequiredFileChooser = 1;
  Object.defineProperty(fileChooser, "__esModule", {
    value: true
  });
  fileChooser.FileChooser = void 0;
  class FileChooser {
    constructor(page2, elementHandle2, isMultiple) {
      this._page = void 0;
      this._elementHandle = void 0;
      this._isMultiple = void 0;
      this._page = page2;
      this._elementHandle = elementHandle2;
      this._isMultiple = isMultiple;
    }
    element() {
      return this._elementHandle;
    }
    isMultiple() {
      return this._isMultiple;
    }
    page() {
      return this._page;
    }
    async setFiles(files, options) {
      return await this._elementHandle.setInputFiles(files, options);
    }
  }
  fileChooser.FileChooser = FileChooser;
  return fileChooser;
}
var harRouter = {};
var hasRequiredHarRouter;
function requireHarRouter() {
  if (hasRequiredHarRouter) return harRouter;
  hasRequiredHarRouter = 1;
  Object.defineProperty(harRouter, "__esModule", {
    value: true
  });
  harRouter.HarRouter = void 0;
  class HarRouter {
    static async create(localUtils2, file2, notFoundAction, options) {
      const {
        harId,
        error
      } = await localUtils2.harOpen({
        file: file2
      });
      if (error) throw new Error(error);
      return new HarRouter(localUtils2, harId, notFoundAction, options);
    }
    constructor(localUtils2, harId, notFoundAction, options) {
      this._localUtils = void 0;
      this._harId = void 0;
      this._notFoundAction = void 0;
      this._options = void 0;
      this._localUtils = localUtils2;
      this._harId = harId;
      this._options = options;
      this._notFoundAction = notFoundAction;
    }
    async _handle(route) {
      const request = route.request();
      const response = await this._localUtils.harLookup({
        harId: this._harId,
        url: request.url(),
        method: request.method(),
        headers: await request.headersArray(),
        postData: request.postDataBuffer() || void 0,
        isNavigationRequest: request.isNavigationRequest()
      });
      if (response.action === "redirect") {
        route._platform.log("api", `HAR: ${route.request().url()} redirected to ${response.redirectURL}`);
        await route._redirectNavigationRequest(response.redirectURL);
        return;
      }
      if (response.action === "fulfill") {
        if (response.status === -1) return;
        await route.fulfill({
          status: response.status,
          headers: Object.fromEntries(response.headers.map((h2) => [h2.name, h2.value])),
          body: response.body
        });
        return;
      }
      if (response.action === "error") route._platform.log("api", "HAR: " + response.message);
      if (this._notFoundAction === "abort") {
        await route.abort();
        return;
      }
      await route.fallback();
    }
    async addContextRoute(context) {
      await context.route(this._options.urlMatch || "**/*", (route) => this._handle(route));
    }
    async addPageRoute(page2) {
      await page2.route(this._options.urlMatch || "**/*", (route) => this._handle(route));
    }
    async [Symbol.asyncDispose]() {
      await this.dispose();
    }
    dispose() {
      this._localUtils.harClose({
        harId: this._harId
      }).catch(() => {
      });
    }
  }
  harRouter.HarRouter = HarRouter;
  return harRouter;
}
var input = {};
var hasRequiredInput;
function requireInput() {
  if (hasRequiredInput) return input;
  hasRequiredInput = 1;
  Object.defineProperty(input, "__esModule", {
    value: true
  });
  input.Touchscreen = input.Mouse = input.Keyboard = void 0;
  class Keyboard {
    constructor(page2) {
      this._page = void 0;
      this._page = page2;
    }
    async down(key) {
      await this._page._channel.keyboardDown({
        key
      });
    }
    async up(key) {
      await this._page._channel.keyboardUp({
        key
      });
    }
    async insertText(text) {
      await this._page._channel.keyboardInsertText({
        text
      });
    }
    async type(text, options = {}) {
      await this._page._channel.keyboardType({
        text,
        ...options
      });
    }
    async press(key, options = {}) {
      await this._page._channel.keyboardPress({
        key,
        ...options
      });
    }
  }
  input.Keyboard = Keyboard;
  class Mouse {
    constructor(page2) {
      this._page = void 0;
      this._page = page2;
    }
    async move(x2, y2, options = {}) {
      await this._page._channel.mouseMove({
        x: x2,
        y: y2,
        ...options
      });
    }
    async down(options = {}) {
      await this._page._channel.mouseDown({
        ...options
      });
    }
    async up(options = {}) {
      await this._page._channel.mouseUp(options);
    }
    async click(x2, y2, options = {}) {
      await this._page._channel.mouseClick({
        x: x2,
        y: y2,
        ...options
      });
    }
    async dblclick(x2, y2, options = {}) {
      await this.click(x2, y2, {
        ...options,
        clickCount: 2
      });
    }
    async wheel(deltaX, deltaY) {
      await this._page._channel.mouseWheel({
        deltaX,
        deltaY
      });
    }
  }
  input.Mouse = Mouse;
  class Touchscreen {
    constructor(page2) {
      this._page = void 0;
      this._page = page2;
    }
    async tap(x2, y2) {
      await this._page._channel.touchscreenTap({
        x: x2,
        y: y2
      });
    }
  }
  input.Touchscreen = Touchscreen;
  return input;
}
var video = {};
var hasRequiredVideo;
function requireVideo() {
  if (hasRequiredVideo) return video;
  hasRequiredVideo = 1;
  Object.defineProperty(video, "__esModule", {
    value: true
  });
  video.Video = void 0;
  var _manualPromise = requireManualPromise();
  class Video {
    constructor(page2, connection2) {
      this._artifact = null;
      this._artifactReadyPromise = new _manualPromise.ManualPromise();
      this._isRemote = false;
      this._isRemote = connection2.isRemote();
      this._artifact = page2._closedOrCrashedScope.safeRace(this._artifactReadyPromise);
    }
    _artifactReady(artifact2) {
      this._artifactReadyPromise.resolve(artifact2);
    }
    async path() {
      if (this._isRemote) throw new Error(`Path is not available when connecting remotely. Use saveAs() to save a local copy.`);
      const artifact2 = await this._artifact;
      if (!artifact2) throw new Error("Page did not produce any video frames");
      return artifact2._initializer.absolutePath;
    }
    async saveAs(path) {
      const artifact2 = await this._artifact;
      if (!artifact2) throw new Error("Page did not produce any video frames");
      return await artifact2.saveAs(path);
    }
    async delete() {
      const artifact2 = await this._artifact;
      if (artifact2) await artifact2.delete();
    }
  }
  video.Video = Video;
  return video;
}
var timeoutSettings = {};
var hasRequiredTimeoutSettings;
function requireTimeoutSettings() {
  if (hasRequiredTimeoutSettings) return timeoutSettings;
  hasRequiredTimeoutSettings = 1;
  Object.defineProperty(timeoutSettings, "__esModule", {
    value: true
  });
  timeoutSettings.TimeoutSettings = timeoutSettings.DEFAULT_TIMEOUT = timeoutSettings.DEFAULT_LAUNCH_TIMEOUT = void 0;
  const DEFAULT_TIMEOUT = timeoutSettings.DEFAULT_TIMEOUT = 3e4;
  timeoutSettings.DEFAULT_LAUNCH_TIMEOUT = 3 * 60 * 1e3;
  class TimeoutSettings {
    constructor(platform2, parent) {
      this._parent = void 0;
      this._defaultTimeout = void 0;
      this._defaultNavigationTimeout = void 0;
      this._platform = void 0;
      this._parent = parent;
      this._platform = platform2;
    }
    setDefaultTimeout(timeout) {
      this._defaultTimeout = timeout;
    }
    setDefaultNavigationTimeout(timeout) {
      this._defaultNavigationTimeout = timeout;
    }
    defaultNavigationTimeout() {
      return this._defaultNavigationTimeout;
    }
    defaultTimeout() {
      return this._defaultTimeout;
    }
    navigationTimeout(options) {
      if (typeof options.timeout === "number") return options.timeout;
      if (this._defaultNavigationTimeout !== void 0) return this._defaultNavigationTimeout;
      if (this._platform.isDebugMode()) return 0;
      if (this._defaultTimeout !== void 0) return this._defaultTimeout;
      if (this._parent) return this._parent.navigationTimeout(options);
      return DEFAULT_TIMEOUT;
    }
    timeout(options) {
      if (typeof options.timeout === "number") return options.timeout;
      if (this._platform.isDebugMode()) return 0;
      if (this._defaultTimeout !== void 0) return this._defaultTimeout;
      if (this._parent) return this._parent.timeout(options);
      return DEFAULT_TIMEOUT;
    }
  }
  timeoutSettings.TimeoutSettings = TimeoutSettings;
  return timeoutSettings;
}
var hasRequiredPage;
function requirePage() {
  if (hasRequiredPage) return page;
  hasRequiredPage = 1;
  Object.defineProperty(page, "__esModule", {
    value: true
  });
  page.Page = page.BindingCall = void 0;
  var _accessibility = requireAccessibility();
  var _artifact = requireArtifact();
  var _channelOwner = requireChannelOwner();
  var _clientHelper = requireClientHelper();
  var _coverage = requireCoverage();
  var _download = requireDownload();
  var _elementHandle = requireElementHandle();
  var _errors = requireErrors();
  var _events = requireEvents();
  var _fileChooser = requireFileChooser();
  var _frame = requireFrame();
  var _harRouter = requireHarRouter();
  var _input = requireInput();
  var _jsHandle = requireJsHandle();
  var _network = requireNetwork();
  var _video = requireVideo();
  var _waiter = requireWaiter();
  var _worker = requireWorker();
  var _timeoutSettings = requireTimeoutSettings();
  var _assert = requireAssert$1();
  var _fileUtils = requireFileUtils();
  var _headers = requireHeaders();
  var _stringUtils = requireStringUtils();
  var _urlMatch = requireUrlMatch();
  var _manualPromise = requireManualPromise();
  var _rtti = requireRtti();
  class Page extends _channelOwner.ChannelOwner {
    static from(page2) {
      return page2._object;
    }
    static fromNullable(page2) {
      return page2 ? Page.from(page2) : null;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._browserContext = void 0;
      this._ownedContext = void 0;
      this._mainFrame = void 0;
      this._frames = /* @__PURE__ */ new Set();
      this._workers = /* @__PURE__ */ new Set();
      this._closed = false;
      this._closedOrCrashedScope = new _manualPromise.LongStandingScope();
      this._viewportSize = void 0;
      this._routes = [];
      this._webSocketRoutes = [];
      this.accessibility = void 0;
      this.coverage = void 0;
      this.keyboard = void 0;
      this.mouse = void 0;
      this.request = void 0;
      this.touchscreen = void 0;
      this.clock = void 0;
      this._bindings = /* @__PURE__ */ new Map();
      this._timeoutSettings = void 0;
      this._video = null;
      this._opener = void 0;
      this._closeReason = void 0;
      this._closeWasCalled = false;
      this._harRouters = [];
      this._locatorHandlers = /* @__PURE__ */ new Map();
      this._browserContext = parent;
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings(this._platform, this._browserContext._timeoutSettings);
      this.accessibility = new _accessibility.Accessibility(this._channel);
      this.keyboard = new _input.Keyboard(this);
      this.mouse = new _input.Mouse(this);
      this.request = this._browserContext.request;
      this.touchscreen = new _input.Touchscreen(this);
      this.clock = this._browserContext.clock;
      this._mainFrame = _frame.Frame.from(initializer.mainFrame);
      this._mainFrame._page = this;
      this._frames.add(this._mainFrame);
      this._viewportSize = initializer.viewportSize || null;
      this._closed = initializer.isClosed;
      this._opener = Page.fromNullable(initializer.opener);
      this._channel.on("bindingCall", ({
        binding
      }) => this._onBinding(BindingCall.from(binding)));
      this._channel.on("close", () => this._onClose());
      this._channel.on("crash", () => this._onCrash());
      this._channel.on("download", ({
        url,
        suggestedFilename,
        artifact: artifact2
      }) => {
        const artifactObject = _artifact.Artifact.from(artifact2);
        this.emit(_events.Events.Page.Download, new _download.Download(this, url, suggestedFilename, artifactObject));
      });
      this._channel.on("fileChooser", ({
        element,
        isMultiple
      }) => this.emit(_events.Events.Page.FileChooser, new _fileChooser.FileChooser(this, _elementHandle.ElementHandle.from(element), isMultiple)));
      this._channel.on("frameAttached", ({
        frame: frame2
      }) => this._onFrameAttached(_frame.Frame.from(frame2)));
      this._channel.on("frameDetached", ({
        frame: frame2
      }) => this._onFrameDetached(_frame.Frame.from(frame2)));
      this._channel.on("locatorHandlerTriggered", ({
        uid
      }) => this._onLocatorHandlerTriggered(uid));
      this._channel.on("route", ({
        route
      }) => this._onRoute(_network.Route.from(route)));
      this._channel.on("webSocketRoute", ({
        webSocketRoute
      }) => this._onWebSocketRoute(_network.WebSocketRoute.from(webSocketRoute)));
      this._channel.on("video", ({
        artifact: artifact2
      }) => {
        const artifactObject = _artifact.Artifact.from(artifact2);
        this._forceVideo()._artifactReady(artifactObject);
      });
      this._channel.on("webSocket", ({
        webSocket: webSocket2
      }) => this.emit(_events.Events.Page.WebSocket, _network.WebSocket.from(webSocket2)));
      this._channel.on("worker", ({
        worker: worker2
      }) => this._onWorker(_worker.Worker.from(worker2)));
      this.coverage = new _coverage.Coverage(this._channel);
      this.once(_events.Events.Page.Close, () => this._closedOrCrashedScope.close(this._closeErrorWithReason()));
      this.once(_events.Events.Page.Crash, () => this._closedOrCrashedScope.close(new _errors.TargetClosedError()));
      this._setEventToSubscriptionMapping(/* @__PURE__ */ new Map([[_events.Events.Page.Console, "console"], [_events.Events.Page.Dialog, "dialog"], [_events.Events.Page.Request, "request"], [_events.Events.Page.Response, "response"], [_events.Events.Page.RequestFinished, "requestFinished"], [_events.Events.Page.RequestFailed, "requestFailed"], [_events.Events.Page.FileChooser, "fileChooser"]]));
    }
    _onFrameAttached(frame2) {
      frame2._page = this;
      this._frames.add(frame2);
      if (frame2._parentFrame) frame2._parentFrame._childFrames.add(frame2);
      this.emit(_events.Events.Page.FrameAttached, frame2);
    }
    _onFrameDetached(frame2) {
      this._frames.delete(frame2);
      frame2._detached = true;
      if (frame2._parentFrame) frame2._parentFrame._childFrames.delete(frame2);
      this.emit(_events.Events.Page.FrameDetached, frame2);
    }
    async _onRoute(route) {
      route._context = this.context();
      const routeHandlers = this._routes.slice();
      for (const routeHandler of routeHandlers) {
        if (this._closeWasCalled || this._browserContext._closeWasCalled) return;
        if (!routeHandler.matches(route.request().url())) continue;
        const index = this._routes.indexOf(routeHandler);
        if (index === -1) continue;
        if (routeHandler.willExpire()) this._routes.splice(index, 1);
        const handled = await routeHandler.handle(route);
        if (!this._routes.length) this._wrapApiCall(() => this._updateInterceptionPatterns(), true).catch(() => {
        });
        if (handled) return;
      }
      await this._browserContext._onRoute(route);
    }
    async _onWebSocketRoute(webSocketRoute) {
      const routeHandler = this._webSocketRoutes.find((route) => route.matches(webSocketRoute.url()));
      if (routeHandler) await routeHandler.handle(webSocketRoute);
      else await this._browserContext._onWebSocketRoute(webSocketRoute);
    }
    async _onBinding(bindingCall) {
      const func = this._bindings.get(bindingCall._initializer.name);
      if (func) {
        await bindingCall.call(func);
        return;
      }
      await this._browserContext._onBinding(bindingCall);
    }
    _onWorker(worker2) {
      this._workers.add(worker2);
      worker2._page = this;
      this.emit(_events.Events.Page.Worker, worker2);
    }
    _onClose() {
      this._closed = true;
      this._browserContext._pages.delete(this);
      this._browserContext._backgroundPages.delete(this);
      this._disposeHarRouters();
      this.emit(_events.Events.Page.Close, this);
    }
    _onCrash() {
      this.emit(_events.Events.Page.Crash, this);
    }
    context() {
      return this._browserContext;
    }
    async opener() {
      if (!this._opener || this._opener.isClosed()) return null;
      return this._opener;
    }
    mainFrame() {
      return this._mainFrame;
    }
    frame(frameSelector) {
      const name = (0, _rtti.isString)(frameSelector) ? frameSelector : frameSelector.name;
      const url = (0, _rtti.isObject)(frameSelector) ? frameSelector.url : void 0;
      (0, _assert.assert)(name || url, "Either name or url matcher should be specified");
      return this.frames().find((f2) => {
        if (name) return f2.name() === name;
        return (0, _urlMatch.urlMatches)(this._browserContext._options.baseURL, f2.url(), url);
      }) || null;
    }
    frames() {
      return [...this._frames];
    }
    setDefaultNavigationTimeout(timeout) {
      this._timeoutSettings.setDefaultNavigationTimeout(timeout);
      this._wrapApiCall(async () => {
        await this._channel.setDefaultNavigationTimeoutNoReply({
          timeout
        });
      }, true).catch(() => {
      });
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
      this._wrapApiCall(async () => {
        await this._channel.setDefaultTimeoutNoReply({
          timeout
        });
      }, true).catch(() => {
      });
    }
    _forceVideo() {
      if (!this._video) this._video = new _video.Video(this, this._connection);
      return this._video;
    }
    video() {
      if (!this._browserContext._options.recordVideo) return null;
      return this._forceVideo();
    }
    async $(selector, options) {
      return await this._mainFrame.$(selector, options);
    }
    async waitForSelector(selector, options) {
      return await this._mainFrame.waitForSelector(selector, options);
    }
    async dispatchEvent(selector, type, eventInit, options) {
      return await this._mainFrame.dispatchEvent(selector, type, eventInit, options);
    }
    async evaluateHandle(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      return await this._mainFrame.evaluateHandle(pageFunction, arg);
    }
    async $eval(selector, pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 3);
      return await this._mainFrame.$eval(selector, pageFunction, arg);
    }
    async $$eval(selector, pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 3);
      return await this._mainFrame.$$eval(selector, pageFunction, arg);
    }
    async $$(selector) {
      return await this._mainFrame.$$(selector);
    }
    async addScriptTag(options = {}) {
      return await this._mainFrame.addScriptTag(options);
    }
    async addStyleTag(options = {}) {
      return await this._mainFrame.addStyleTag(options);
    }
    async exposeFunction(name, callback) {
      await this._channel.exposeBinding({
        name
      });
      const binding = (source, ...args) => callback(...args);
      this._bindings.set(name, binding);
    }
    async exposeBinding(name, callback, options = {}) {
      await this._channel.exposeBinding({
        name,
        needsHandle: options.handle
      });
      this._bindings.set(name, callback);
    }
    async setExtraHTTPHeaders(headers2) {
      (0, _network.validateHeaders)(headers2);
      await this._channel.setExtraHTTPHeaders({
        headers: (0, _headers.headersObjectToArray)(headers2)
      });
    }
    url() {
      return this._mainFrame.url();
    }
    async content() {
      return await this._mainFrame.content();
    }
    async setContent(html, options) {
      return await this._mainFrame.setContent(html, options);
    }
    async goto(url, options) {
      return await this._mainFrame.goto(url, options);
    }
    async reload(options = {}) {
      const waitUntil = (0, _frame.verifyLoadState)("waitUntil", options.waitUntil === void 0 ? "load" : options.waitUntil);
      return _network.Response.fromNullable((await this._channel.reload({
        ...options,
        waitUntil
      })).response);
    }
    async addLocatorHandler(locator2, handler, options = {}) {
      if (locator2._frame !== this._mainFrame) throw new Error(`Locator must belong to the main frame of this page`);
      if (options.times === 0) return;
      const {
        uid
      } = await this._channel.registerLocatorHandler({
        selector: locator2._selector,
        noWaitAfter: options.noWaitAfter
      });
      this._locatorHandlers.set(uid, {
        locator: locator2,
        handler,
        times: options.times
      });
    }
    async _onLocatorHandlerTriggered(uid) {
      let remove2 = false;
      try {
        const handler = this._locatorHandlers.get(uid);
        if (handler && handler.times !== 0) {
          if (handler.times !== void 0) handler.times--;
          await handler.handler(handler.locator);
        }
        remove2 = (handler === null || handler === void 0 ? void 0 : handler.times) === 0;
      } finally {
        if (remove2) this._locatorHandlers.delete(uid);
        this._wrapApiCall(() => this._channel.resolveLocatorHandlerNoReply({
          uid,
          remove: remove2
        }), true).catch(() => {
        });
      }
    }
    async removeLocatorHandler(locator2) {
      for (const [uid, data] of this._locatorHandlers) {
        if (data.locator._equals(locator2)) {
          this._locatorHandlers.delete(uid);
          await this._channel.unregisterLocatorHandler({
            uid
          }).catch(() => {
          });
        }
      }
    }
    async waitForLoadState(state, options) {
      return await this._mainFrame.waitForLoadState(state, options);
    }
    async waitForNavigation(options) {
      return await this._mainFrame.waitForNavigation(options);
    }
    async waitForURL(url, options) {
      return await this._mainFrame.waitForURL(url, options);
    }
    async waitForRequest(urlOrPredicate, options = {}) {
      const predicate = async (request) => {
        if ((0, _rtti.isString)(urlOrPredicate) || (0, _rtti.isRegExp)(urlOrPredicate)) return (0, _urlMatch.urlMatches)(this._browserContext._options.baseURL, request.url(), urlOrPredicate);
        return await urlOrPredicate(request);
      };
      const trimmedUrl = trimUrl(urlOrPredicate);
      const logLine = trimmedUrl ? `waiting for request ${trimmedUrl}` : void 0;
      return await this._waitForEvent(_events.Events.Page.Request, {
        predicate,
        timeout: options.timeout
      }, logLine);
    }
    async waitForResponse(urlOrPredicate, options = {}) {
      const predicate = async (response) => {
        if ((0, _rtti.isString)(urlOrPredicate) || (0, _rtti.isRegExp)(urlOrPredicate)) return (0, _urlMatch.urlMatches)(this._browserContext._options.baseURL, response.url(), urlOrPredicate);
        return await urlOrPredicate(response);
      };
      const trimmedUrl = trimUrl(urlOrPredicate);
      const logLine = trimmedUrl ? `waiting for response ${trimmedUrl}` : void 0;
      return await this._waitForEvent(_events.Events.Page.Response, {
        predicate,
        timeout: options.timeout
      }, logLine);
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
      return await this._waitForEvent(event, optionsOrPredicate, `waiting for event "${event}"`);
    }
    _closeErrorWithReason() {
      return new _errors.TargetClosedError(this._closeReason || this._browserContext._effectiveCloseReason());
    }
    async _waitForEvent(event, optionsOrPredicate, logLine) {
      return await this._wrapApiCall(async () => {
        const timeout = this._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
        const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
        const waiter2 = _waiter.Waiter.createForEvent(this, event);
        if (logLine) waiter2.log(logLine);
        waiter2.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
        if (event !== _events.Events.Page.Crash) waiter2.rejectOnEvent(this, _events.Events.Page.Crash, new Error("Page crashed"));
        if (event !== _events.Events.Page.Close) waiter2.rejectOnEvent(this, _events.Events.Page.Close, () => this._closeErrorWithReason());
        const result = await waiter2.waitForEvent(this, event, predicate);
        waiter2.dispose();
        return result;
      });
    }
    async goBack(options = {}) {
      const waitUntil = (0, _frame.verifyLoadState)("waitUntil", options.waitUntil === void 0 ? "load" : options.waitUntil);
      return _network.Response.fromNullable((await this._channel.goBack({
        ...options,
        waitUntil
      })).response);
    }
    async goForward(options = {}) {
      const waitUntil = (0, _frame.verifyLoadState)("waitUntil", options.waitUntil === void 0 ? "load" : options.waitUntil);
      return _network.Response.fromNullable((await this._channel.goForward({
        ...options,
        waitUntil
      })).response);
    }
    async requestGC() {
      await this._channel.requestGC();
    }
    async emulateMedia(options = {}) {
      await this._channel.emulateMedia({
        media: options.media === null ? "no-override" : options.media,
        colorScheme: options.colorScheme === null ? "no-override" : options.colorScheme,
        reducedMotion: options.reducedMotion === null ? "no-override" : options.reducedMotion,
        forcedColors: options.forcedColors === null ? "no-override" : options.forcedColors,
        contrast: options.contrast === null ? "no-override" : options.contrast
      });
    }
    async setViewportSize(viewportSize) {
      this._viewportSize = viewportSize;
      await this._channel.setViewportSize({
        viewportSize
      });
    }
    viewportSize() {
      return this._viewportSize;
    }
    async evaluate(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      return await this._mainFrame.evaluate(pageFunction, arg);
    }
    async addInitScript(script, arg) {
      const source = await (0, _clientHelper.evaluationScript)(this._platform, script, arg);
      await this._channel.addInitScript({
        source
      });
    }
    async route(url, handler, options = {}) {
      this._routes.unshift(new _network.RouteHandler(this._platform, this._browserContext._options.baseURL, url, handler, options.times));
      await this._updateInterceptionPatterns();
    }
    async routeFromHAR(har, options = {}) {
      const localUtils2 = this._connection.localUtils();
      if (!localUtils2) throw new Error("Route from har is not supported in thin clients");
      if (options.update) {
        await this._browserContext._recordIntoHAR(har, this, options);
        return;
      }
      const harRouter2 = await _harRouter.HarRouter.create(localUtils2, har, options.notFound || "abort", {
        urlMatch: options.url
      });
      this._harRouters.push(harRouter2);
      await harRouter2.addPageRoute(this);
    }
    async routeWebSocket(url, handler) {
      this._webSocketRoutes.unshift(new _network.WebSocketRouteHandler(this._browserContext._options.baseURL, url, handler));
      await this._updateWebSocketInterceptionPatterns();
    }
    _disposeHarRouters() {
      this._harRouters.forEach((router) => router.dispose());
      this._harRouters = [];
    }
    async unrouteAll(options) {
      await this._unrouteInternal(this._routes, [], options === null || options === void 0 ? void 0 : options.behavior);
      this._disposeHarRouters();
    }
    async unroute(url, handler) {
      const removed = [];
      const remaining = [];
      for (const route of this._routes) {
        if ((0, _urlMatch.urlMatchesEqual)(route.url, url) && (!handler || route.handler === handler)) removed.push(route);
        else remaining.push(route);
      }
      await this._unrouteInternal(removed, remaining, "default");
    }
    async _unrouteInternal(removed, remaining, behavior) {
      this._routes = remaining;
      await this._updateInterceptionPatterns();
      if (!behavior || behavior === "default") return;
      const promises = removed.map((routeHandler) => routeHandler.stop(behavior));
      await Promise.all(promises);
    }
    async _updateInterceptionPatterns() {
      const patterns = _network.RouteHandler.prepareInterceptionPatterns(this._routes);
      await this._channel.setNetworkInterceptionPatterns({
        patterns
      });
    }
    async _updateWebSocketInterceptionPatterns() {
      const patterns = _network.WebSocketRouteHandler.prepareInterceptionPatterns(this._webSocketRoutes);
      await this._channel.setWebSocketInterceptionPatterns({
        patterns
      });
    }
    async screenshot(options = {}) {
      const mask = options.mask;
      const copy2 = {
        ...options,
        mask: void 0
      };
      if (!copy2.type) copy2.type = (0, _elementHandle.determineScreenshotType)(options);
      if (mask) {
        copy2.mask = mask.map((locator2) => ({
          frame: locator2._frame._channel,
          selector: locator2._selector
        }));
      }
      const result = await this._channel.screenshot(copy2);
      if (options.path) {
        await (0, _fileUtils.mkdirIfNeeded)(this._platform, options.path);
        await this._platform.fs().promises.writeFile(options.path, result.binary);
      }
      return result.binary;
    }
    async _expectScreenshot(options) {
      const mask = options !== null && options !== void 0 && options.mask ? options === null || options === void 0 ? void 0 : options.mask.map((locator3) => ({
        frame: locator3._frame._channel,
        selector: locator3._selector
      })) : void 0;
      const locator2 = options.locator ? {
        frame: options.locator._frame._channel,
        selector: options.locator._selector
      } : void 0;
      return await this._channel.expectScreenshot({
        ...options,
        isNot: !!options.isNot,
        locator: locator2,
        mask
      });
    }
    async title() {
      return await this._mainFrame.title();
    }
    async bringToFront() {
      await this._channel.bringToFront();
    }
    async [Symbol.asyncDispose]() {
      await this.close();
    }
    async close(options = {}) {
      this._closeReason = options.reason;
      this._closeWasCalled = true;
      try {
        if (this._ownedContext) await this._ownedContext.close();
        else await this._channel.close(options);
      } catch (e2) {
        if ((0, _errors.isTargetClosedError)(e2) && !options.runBeforeUnload) return;
        throw e2;
      }
    }
    isClosed() {
      return this._closed;
    }
    async click(selector, options) {
      return await this._mainFrame.click(selector, options);
    }
    async dragAndDrop(source, target, options) {
      return await this._mainFrame.dragAndDrop(source, target, options);
    }
    async dblclick(selector, options) {
      return await this._mainFrame.dblclick(selector, options);
    }
    async tap(selector, options) {
      return await this._mainFrame.tap(selector, options);
    }
    async fill(selector, value, options) {
      return await this._mainFrame.fill(selector, value, options);
    }
    locator(selector, options) {
      return this.mainFrame().locator(selector, options);
    }
    getByTestId(testId) {
      return this.mainFrame().getByTestId(testId);
    }
    getByAltText(text, options) {
      return this.mainFrame().getByAltText(text, options);
    }
    getByLabel(text, options) {
      return this.mainFrame().getByLabel(text, options);
    }
    getByPlaceholder(text, options) {
      return this.mainFrame().getByPlaceholder(text, options);
    }
    getByText(text, options) {
      return this.mainFrame().getByText(text, options);
    }
    getByTitle(text, options) {
      return this.mainFrame().getByTitle(text, options);
    }
    getByRole(role, options = {}) {
      return this.mainFrame().getByRole(role, options);
    }
    frameLocator(selector) {
      return this.mainFrame().frameLocator(selector);
    }
    async focus(selector, options) {
      return await this._mainFrame.focus(selector, options);
    }
    async textContent(selector, options) {
      return await this._mainFrame.textContent(selector, options);
    }
    async innerText(selector, options) {
      return await this._mainFrame.innerText(selector, options);
    }
    async innerHTML(selector, options) {
      return await this._mainFrame.innerHTML(selector, options);
    }
    async getAttribute(selector, name, options) {
      return await this._mainFrame.getAttribute(selector, name, options);
    }
    async inputValue(selector, options) {
      return await this._mainFrame.inputValue(selector, options);
    }
    async isChecked(selector, options) {
      return await this._mainFrame.isChecked(selector, options);
    }
    async isDisabled(selector, options) {
      return await this._mainFrame.isDisabled(selector, options);
    }
    async isEditable(selector, options) {
      return await this._mainFrame.isEditable(selector, options);
    }
    async isEnabled(selector, options) {
      return await this._mainFrame.isEnabled(selector, options);
    }
    async isHidden(selector, options) {
      return await this._mainFrame.isHidden(selector, options);
    }
    async isVisible(selector, options) {
      return await this._mainFrame.isVisible(selector, options);
    }
    async hover(selector, options) {
      return await this._mainFrame.hover(selector, options);
    }
    async selectOption(selector, values, options) {
      return await this._mainFrame.selectOption(selector, values, options);
    }
    async setInputFiles(selector, files, options) {
      return await this._mainFrame.setInputFiles(selector, files, options);
    }
    async type(selector, text, options) {
      return await this._mainFrame.type(selector, text, options);
    }
    async press(selector, key, options) {
      return await this._mainFrame.press(selector, key, options);
    }
    async check(selector, options) {
      return await this._mainFrame.check(selector, options);
    }
    async uncheck(selector, options) {
      return await this._mainFrame.uncheck(selector, options);
    }
    async setChecked(selector, checked, options) {
      return await this._mainFrame.setChecked(selector, checked, options);
    }
    async waitForTimeout(timeout) {
      return await this._mainFrame.waitForTimeout(timeout);
    }
    async waitForFunction(pageFunction, arg, options) {
      return await this._mainFrame.waitForFunction(pageFunction, arg, options);
    }
    workers() {
      return [...this._workers];
    }
    async pause(_options) {
      var _this$_instrumentatio;
      if (this._platform.isJSDebuggerAttached()) return;
      const defaultNavigationTimeout = this._browserContext._timeoutSettings.defaultNavigationTimeout();
      const defaultTimeout = this._browserContext._timeoutSettings.defaultTimeout();
      this._browserContext.setDefaultNavigationTimeout(0);
      this._browserContext.setDefaultTimeout(0);
      (_this$_instrumentatio = this._instrumentation) === null || _this$_instrumentatio === void 0 || _this$_instrumentatio.onWillPause({
        keepTestTimeout: !!(_options !== null && _options !== void 0 && _options.__testHookKeepTestTimeout)
      });
      await this._closedOrCrashedScope.safeRace(this.context()._channel.pause());
      this._browserContext.setDefaultNavigationTimeout(defaultNavigationTimeout);
      this._browserContext.setDefaultTimeout(defaultTimeout);
    }
    async pdf(options = {}) {
      const transportOptions = {
        ...options
      };
      if (transportOptions.margin) transportOptions.margin = {
        ...transportOptions.margin
      };
      if (typeof options.width === "number") transportOptions.width = options.width + "px";
      if (typeof options.height === "number") transportOptions.height = options.height + "px";
      for (const margin of ["top", "right", "bottom", "left"]) {
        const index = margin;
        if (options.margin && typeof options.margin[index] === "number") transportOptions.margin[index] = transportOptions.margin[index] + "px";
      }
      const result = await this._channel.pdf(transportOptions);
      if (options.path) {
        const platform2 = this._platform;
        await platform2.fs().promises.mkdir(platform2.path().dirname(options.path), {
          recursive: true
        });
        await platform2.fs().promises.writeFile(options.path, result.pdf);
      }
      return result.pdf;
    }
  }
  page.Page = Page;
  class BindingCall extends _channelOwner.ChannelOwner {
    static from(channel) {
      return channel._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
    }
    async call(func) {
      try {
        const frame2 = _frame.Frame.from(this._initializer.frame);
        const source = {
          context: frame2._page.context(),
          page: frame2._page,
          frame: frame2
        };
        let result;
        if (this._initializer.handle) result = await func(source, _jsHandle.JSHandle.from(this._initializer.handle));
        else result = await func(source, ...this._initializer.args.map(_jsHandle.parseResult));
        this._channel.resolve({
          result: (0, _jsHandle.serializeArgument)(result)
        }).catch(() => {
        });
      } catch (e2) {
        this._channel.reject({
          error: (0, _errors.serializeError)(e2)
        }).catch(() => {
        });
      }
    }
  }
  page.BindingCall = BindingCall;
  function trimUrl(param) {
    if ((0, _rtti.isRegExp)(param)) return `/${(0, _stringUtils.trimStringWithEllipsis)(param.source, 50)}/${param.flags}`;
    if ((0, _rtti.isString)(param)) return `"${(0, _stringUtils.trimStringWithEllipsis)(param, 50)}"`;
  }
  return page;
}
var hasRequiredConsoleMessage;
function requireConsoleMessage() {
  if (hasRequiredConsoleMessage) return consoleMessage;
  hasRequiredConsoleMessage = 1;
  Object.defineProperty(consoleMessage, "__esModule", {
    value: true
  });
  consoleMessage.ConsoleMessage = void 0;
  var _jsHandle = requireJsHandle();
  var _page = requirePage();
  class ConsoleMessage {
    constructor(platform2, event) {
      this._page = void 0;
      this._event = void 0;
      this._page = "page" in event && event.page ? _page.Page.from(event.page) : null;
      this._event = event;
      if (platform2.inspectCustom) this[platform2.inspectCustom] = () => this._inspect();
    }
    page() {
      return this._page;
    }
    type() {
      return this._event.type;
    }
    text() {
      return this._event.text;
    }
    args() {
      return this._event.args.map(_jsHandle.JSHandle.from);
    }
    location() {
      return this._event.location;
    }
    _inspect() {
      return this.text();
    }
  }
  consoleMessage.ConsoleMessage = ConsoleMessage;
  return consoleMessage;
}
var dialog = {};
var hasRequiredDialog;
function requireDialog() {
  if (hasRequiredDialog) return dialog;
  hasRequiredDialog = 1;
  Object.defineProperty(dialog, "__esModule", {
    value: true
  });
  dialog.Dialog = void 0;
  var _channelOwner = requireChannelOwner();
  var _page = requirePage();
  class Dialog extends _channelOwner.ChannelOwner {
    static from(dialog2) {
      return dialog2._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._page = void 0;
      this._page = _page.Page.fromNullable(initializer.page);
    }
    page() {
      return this._page;
    }
    type() {
      return this._initializer.type;
    }
    message() {
      return this._initializer.message;
    }
    defaultValue() {
      return this._initializer.defaultValue;
    }
    async accept(promptText) {
      await this._channel.accept({
        promptText
      });
    }
    async dismiss() {
      await this._channel.dismiss();
    }
  }
  dialog.Dialog = Dialog;
  return dialog;
}
var webError = {};
var hasRequiredWebError;
function requireWebError() {
  if (hasRequiredWebError) return webError;
  hasRequiredWebError = 1;
  Object.defineProperty(webError, "__esModule", {
    value: true
  });
  webError.WebError = void 0;
  class WebError {
    constructor(page2, error) {
      this._page = void 0;
      this._error = void 0;
      this._page = page2;
      this._error = error;
    }
    page() {
      return this._page;
    }
    error() {
      return this._error;
    }
  }
  webError.WebError = WebError;
  return webError;
}
var hasRequiredBrowserContext;
function requireBrowserContext() {
  if (hasRequiredBrowserContext) return browserContext;
  hasRequiredBrowserContext = 1;
  Object.defineProperty(browserContext, "__esModule", {
    value: true
  });
  browserContext.BrowserContext = void 0;
  browserContext.prepareBrowserContextParams = prepareBrowserContextParams;
  browserContext.toClientCertificatesProtocol = toClientCertificatesProtocol;
  var _artifact = requireArtifact();
  var _browser = requireBrowser$1();
  var _cdpSession = requireCdpSession();
  var _channelOwner = requireChannelOwner();
  var _clientHelper = requireClientHelper();
  var _clock = requireClock();
  var _consoleMessage = requireConsoleMessage();
  var _dialog = requireDialog();
  var _errors = requireErrors();
  var _events = requireEvents();
  var _fetch = requireFetch();
  var _frame = requireFrame();
  var _harRouter = requireHarRouter();
  var network2 = _interopRequireWildcard(requireNetwork());
  var _page = requirePage();
  var _tracing = requireTracing();
  var _waiter = requireWaiter();
  var _webError = requireWebError();
  var _worker = requireWorker();
  var _timeoutSettings = requireTimeoutSettings();
  var _fileUtils = requireFileUtils();
  var _headers = requireHeaders();
  var _urlMatch = requireUrlMatch();
  var _rtti = requireRtti();
  var _stackTrace = requireStackTrace();
  function _getRequireWildcardCache(e2) {
    if ("function" != typeof WeakMap) return null;
    var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function(e3) {
      return e3 ? t : r2;
    })(e2);
  }
  function _interopRequireWildcard(e2, r2) {
    if (e2 && e2.__esModule) return e2;
    if (null === e2 || "object" != typeof e2 && "function" != typeof e2) return { default: e2 };
    var t = _getRequireWildcardCache(r2);
    if (t && t.has(e2)) return t.get(e2);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u2 in e2) if ("default" !== u2 && {}.hasOwnProperty.call(e2, u2)) {
      var i = a ? Object.getOwnPropertyDescriptor(e2, u2) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u2, i) : n[u2] = e2[u2];
    }
    return n.default = e2, t && t.set(e2, n), n;
  }
  class BrowserContext extends _channelOwner.ChannelOwner {
    static from(context) {
      return context._object;
    }
    static fromNullable(context) {
      return context ? BrowserContext.from(context) : null;
    }
    constructor(parent, type, guid, initializer) {
      var _this$_browser, _this$_browser2;
      super(parent, type, guid, initializer);
      this._pages = /* @__PURE__ */ new Set();
      this._routes = [];
      this._webSocketRoutes = [];
      this._browser = null;
      this._browserType = void 0;
      this._bindings = /* @__PURE__ */ new Map();
      this._timeoutSettings = void 0;
      this._ownerPage = void 0;
      this._closedPromise = void 0;
      this._options = {};
      this.request = void 0;
      this.tracing = void 0;
      this.clock = void 0;
      this._backgroundPages = /* @__PURE__ */ new Set();
      this._serviceWorkers = /* @__PURE__ */ new Set();
      this._isChromium = void 0;
      this._harRecorders = /* @__PURE__ */ new Map();
      this._closeWasCalled = false;
      this._closeReason = void 0;
      this._harRouters = [];
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings(this._platform);
      if (parent instanceof _browser.Browser) this._browser = parent;
      (_this$_browser = this._browser) === null || _this$_browser === void 0 || _this$_browser._contexts.add(this);
      this._isChromium = ((_this$_browser2 = this._browser) === null || _this$_browser2 === void 0 ? void 0 : _this$_browser2._name) === "chromium";
      this.tracing = _tracing.Tracing.from(initializer.tracing);
      this.request = _fetch.APIRequestContext.from(initializer.requestContext);
      this.clock = new _clock.Clock(this);
      this._channel.on("bindingCall", ({
        binding
      }) => this._onBinding(_page.BindingCall.from(binding)));
      this._channel.on("close", () => this._onClose());
      this._channel.on("page", ({
        page: page2
      }) => this._onPage(_page.Page.from(page2)));
      this._channel.on("route", ({
        route
      }) => this._onRoute(network2.Route.from(route)));
      this._channel.on("webSocketRoute", ({
        webSocketRoute
      }) => this._onWebSocketRoute(network2.WebSocketRoute.from(webSocketRoute)));
      this._channel.on("backgroundPage", ({
        page: page2
      }) => {
        const backgroundPage = _page.Page.from(page2);
        this._backgroundPages.add(backgroundPage);
        this.emit(_events.Events.BrowserContext.BackgroundPage, backgroundPage);
      });
      this._channel.on("serviceWorker", ({
        worker: worker2
      }) => {
        const serviceWorker = _worker.Worker.from(worker2);
        serviceWorker._context = this;
        this._serviceWorkers.add(serviceWorker);
        this.emit(_events.Events.BrowserContext.ServiceWorker, serviceWorker);
      });
      this._channel.on("console", (event) => {
        const consoleMessage2 = new _consoleMessage.ConsoleMessage(this._platform, event);
        this.emit(_events.Events.BrowserContext.Console, consoleMessage2);
        const page2 = consoleMessage2.page();
        if (page2) page2.emit(_events.Events.Page.Console, consoleMessage2);
      });
      this._channel.on("pageError", ({
        error,
        page: page2
      }) => {
        const pageObject = _page.Page.from(page2);
        const parsedError = (0, _errors.parseError)(error);
        this.emit(_events.Events.BrowserContext.WebError, new _webError.WebError(pageObject, parsedError));
        if (pageObject) pageObject.emit(_events.Events.Page.PageError, parsedError);
      });
      this._channel.on("dialog", ({
        dialog: dialog2
      }) => {
        const dialogObject = _dialog.Dialog.from(dialog2);
        let hasListeners = this.emit(_events.Events.BrowserContext.Dialog, dialogObject);
        const page2 = dialogObject.page();
        if (page2) hasListeners = page2.emit(_events.Events.Page.Dialog, dialogObject) || hasListeners;
        if (!hasListeners) {
          if (dialogObject.type() === "beforeunload") dialog2.accept({}).catch(() => {
          });
          else dialog2.dismiss().catch(() => {
          });
        }
      });
      this._channel.on("request", ({
        request,
        page: page2
      }) => this._onRequest(network2.Request.from(request), _page.Page.fromNullable(page2)));
      this._channel.on("requestFailed", ({
        request,
        failureText,
        responseEndTiming,
        page: page2
      }) => this._onRequestFailed(network2.Request.from(request), responseEndTiming, failureText, _page.Page.fromNullable(page2)));
      this._channel.on("requestFinished", (params) => this._onRequestFinished(params));
      this._channel.on("response", ({
        response,
        page: page2
      }) => this._onResponse(network2.Response.from(response), _page.Page.fromNullable(page2)));
      this._closedPromise = new Promise((f2) => this.once(_events.Events.BrowserContext.Close, f2));
      this._setEventToSubscriptionMapping(/* @__PURE__ */ new Map([[_events.Events.BrowserContext.Console, "console"], [_events.Events.BrowserContext.Dialog, "dialog"], [_events.Events.BrowserContext.Request, "request"], [_events.Events.BrowserContext.Response, "response"], [_events.Events.BrowserContext.RequestFinished, "requestFinished"], [_events.Events.BrowserContext.RequestFailed, "requestFailed"]]));
    }
    _setOptions(contextOptions, browserOptions) {
      this._options = contextOptions;
      if (this._options.recordHar) this._harRecorders.set("", {
        path: this._options.recordHar.path,
        content: this._options.recordHar.content
      });
      this.tracing._tracesDir = browserOptions.tracesDir;
    }
    _onPage(page2) {
      this._pages.add(page2);
      this.emit(_events.Events.BrowserContext.Page, page2);
      if (page2._opener && !page2._opener.isClosed()) page2._opener.emit(_events.Events.Page.Popup, page2);
    }
    _onRequest(request, page2) {
      this.emit(_events.Events.BrowserContext.Request, request);
      if (page2) page2.emit(_events.Events.Page.Request, request);
    }
    _onResponse(response, page2) {
      this.emit(_events.Events.BrowserContext.Response, response);
      if (page2) page2.emit(_events.Events.Page.Response, response);
    }
    _onRequestFailed(request, responseEndTiming, failureText, page2) {
      request._failureText = failureText || null;
      request._setResponseEndTiming(responseEndTiming);
      this.emit(_events.Events.BrowserContext.RequestFailed, request);
      if (page2) page2.emit(_events.Events.Page.RequestFailed, request);
    }
    _onRequestFinished(params) {
      const {
        responseEndTiming
      } = params;
      const request = network2.Request.from(params.request);
      const response = network2.Response.fromNullable(params.response);
      const page2 = _page.Page.fromNullable(params.page);
      request._setResponseEndTiming(responseEndTiming);
      this.emit(_events.Events.BrowserContext.RequestFinished, request);
      if (page2) page2.emit(_events.Events.Page.RequestFinished, request);
      if (response) response._finishedPromise.resolve(null);
    }
    async _onRoute(route) {
      route._context = this;
      const page2 = route.request()._safePage();
      const routeHandlers = this._routes.slice();
      for (const routeHandler of routeHandlers) {
        if (page2 !== null && page2 !== void 0 && page2._closeWasCalled || this._closeWasCalled) return;
        if (!routeHandler.matches(route.request().url())) continue;
        const index = this._routes.indexOf(routeHandler);
        if (index === -1) continue;
        if (routeHandler.willExpire()) this._routes.splice(index, 1);
        const handled = await routeHandler.handle(route);
        if (!this._routes.length) this._wrapApiCall(() => this._updateInterceptionPatterns(), true).catch(() => {
        });
        if (handled) return;
      }
      await route._innerContinue(
        true
        /* isFallback */
      ).catch(() => {
      });
    }
    async _onWebSocketRoute(webSocketRoute) {
      const routeHandler = this._webSocketRoutes.find((route) => route.matches(webSocketRoute.url()));
      if (routeHandler) await routeHandler.handle(webSocketRoute);
      else webSocketRoute.connectToServer();
    }
    async _onBinding(bindingCall) {
      const func = this._bindings.get(bindingCall._initializer.name);
      if (!func) return;
      await bindingCall.call(func);
    }
    setDefaultNavigationTimeout(timeout) {
      this._timeoutSettings.setDefaultNavigationTimeout(timeout);
      this._wrapApiCall(async () => {
        await this._channel.setDefaultNavigationTimeoutNoReply({
          timeout
        });
      }, true).catch(() => {
      });
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
      this._wrapApiCall(async () => {
        await this._channel.setDefaultTimeoutNoReply({
          timeout
        });
      }, true).catch(() => {
      });
    }
    browser() {
      return this._browser;
    }
    pages() {
      return [...this._pages];
    }
    async newPage() {
      if (this._ownerPage) throw new Error("Please use browser.newContext()");
      return _page.Page.from((await this._channel.newPage()).page);
    }
    async cookies(urls) {
      if (!urls) urls = [];
      if (urls && typeof urls === "string") urls = [urls];
      return (await this._channel.cookies({
        urls
      })).cookies;
    }
    async addCookies(cookies) {
      await this._channel.addCookies({
        cookies
      });
    }
    async clearCookies(options = {}) {
      await this._channel.clearCookies({
        name: (0, _rtti.isString)(options.name) ? options.name : void 0,
        nameRegexSource: (0, _rtti.isRegExp)(options.name) ? options.name.source : void 0,
        nameRegexFlags: (0, _rtti.isRegExp)(options.name) ? options.name.flags : void 0,
        domain: (0, _rtti.isString)(options.domain) ? options.domain : void 0,
        domainRegexSource: (0, _rtti.isRegExp)(options.domain) ? options.domain.source : void 0,
        domainRegexFlags: (0, _rtti.isRegExp)(options.domain) ? options.domain.flags : void 0,
        path: (0, _rtti.isString)(options.path) ? options.path : void 0,
        pathRegexSource: (0, _rtti.isRegExp)(options.path) ? options.path.source : void 0,
        pathRegexFlags: (0, _rtti.isRegExp)(options.path) ? options.path.flags : void 0
      });
    }
    async grantPermissions(permissions, options) {
      await this._channel.grantPermissions({
        permissions,
        ...options
      });
    }
    async clearPermissions() {
      await this._channel.clearPermissions();
    }
    async setGeolocation(geolocation) {
      await this._channel.setGeolocation({
        geolocation: geolocation || void 0
      });
    }
    async setExtraHTTPHeaders(headers2) {
      network2.validateHeaders(headers2);
      await this._channel.setExtraHTTPHeaders({
        headers: (0, _headers.headersObjectToArray)(headers2)
      });
    }
    async setOffline(offline) {
      await this._channel.setOffline({
        offline
      });
    }
    async setHTTPCredentials(httpCredentials) {
      await this._channel.setHTTPCredentials({
        httpCredentials: httpCredentials || void 0
      });
    }
    async addInitScript(script, arg) {
      const source = await (0, _clientHelper.evaluationScript)(this._platform, script, arg);
      await this._channel.addInitScript({
        source
      });
    }
    async exposeBinding(name, callback, options = {}) {
      await this._channel.exposeBinding({
        name,
        needsHandle: options.handle
      });
      this._bindings.set(name, callback);
    }
    async exposeFunction(name, callback) {
      await this._channel.exposeBinding({
        name
      });
      const binding = (source, ...args) => callback(...args);
      this._bindings.set(name, binding);
    }
    async route(url, handler, options = {}) {
      this._routes.unshift(new network2.RouteHandler(this._platform, this._options.baseURL, url, handler, options.times));
      await this._updateInterceptionPatterns();
    }
    async routeWebSocket(url, handler) {
      this._webSocketRoutes.unshift(new network2.WebSocketRouteHandler(this._options.baseURL, url, handler));
      await this._updateWebSocketInterceptionPatterns();
    }
    async _recordIntoHAR(har, page2, options = {}) {
      var _options$updateConten, _options$updateMode, _options$updateConten2;
      const {
        harId
      } = await this._channel.harStart({
        page: page2 === null || page2 === void 0 ? void 0 : page2._channel,
        options: prepareRecordHarOptions({
          path: har,
          content: (_options$updateConten = options.updateContent) !== null && _options$updateConten !== void 0 ? _options$updateConten : "attach",
          mode: (_options$updateMode = options.updateMode) !== null && _options$updateMode !== void 0 ? _options$updateMode : "minimal",
          urlFilter: options.url
        })
      });
      this._harRecorders.set(harId, {
        path: har,
        content: (_options$updateConten2 = options.updateContent) !== null && _options$updateConten2 !== void 0 ? _options$updateConten2 : "attach"
      });
    }
    async routeFromHAR(har, options = {}) {
      const localUtils2 = this._connection.localUtils();
      if (!localUtils2) throw new Error("Route from har is not supported in thin clients");
      if (options.update) {
        await this._recordIntoHAR(har, null, options);
        return;
      }
      const harRouter2 = await _harRouter.HarRouter.create(localUtils2, har, options.notFound || "abort", {
        urlMatch: options.url
      });
      this._harRouters.push(harRouter2);
      await harRouter2.addContextRoute(this);
    }
    _disposeHarRouters() {
      this._harRouters.forEach((router) => router.dispose());
      this._harRouters = [];
    }
    async unrouteAll(options) {
      await this._unrouteInternal(this._routes, [], options === null || options === void 0 ? void 0 : options.behavior);
      this._disposeHarRouters();
    }
    async unroute(url, handler) {
      const removed = [];
      const remaining = [];
      for (const route of this._routes) {
        if ((0, _urlMatch.urlMatchesEqual)(route.url, url) && (!handler || route.handler === handler)) removed.push(route);
        else remaining.push(route);
      }
      await this._unrouteInternal(removed, remaining, "default");
    }
    async _unrouteInternal(removed, remaining, behavior) {
      this._routes = remaining;
      await this._updateInterceptionPatterns();
      if (!behavior || behavior === "default") return;
      const promises = removed.map((routeHandler) => routeHandler.stop(behavior));
      await Promise.all(promises);
    }
    async _updateInterceptionPatterns() {
      const patterns = network2.RouteHandler.prepareInterceptionPatterns(this._routes);
      await this._channel.setNetworkInterceptionPatterns({
        patterns
      });
    }
    async _updateWebSocketInterceptionPatterns() {
      const patterns = network2.WebSocketRouteHandler.prepareInterceptionPatterns(this._webSocketRoutes);
      await this._channel.setWebSocketInterceptionPatterns({
        patterns
      });
    }
    _effectiveCloseReason() {
      var _this$_browser3;
      return this._closeReason || ((_this$_browser3 = this._browser) === null || _this$_browser3 === void 0 ? void 0 : _this$_browser3._closeReason);
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
      return await this._wrapApiCall(async () => {
        const timeout = this._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
        const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
        const waiter2 = _waiter.Waiter.createForEvent(this, event);
        waiter2.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
        if (event !== _events.Events.BrowserContext.Close) waiter2.rejectOnEvent(this, _events.Events.BrowserContext.Close, () => new _errors.TargetClosedError(this._effectiveCloseReason()));
        const result = await waiter2.waitForEvent(this, event, predicate);
        waiter2.dispose();
        return result;
      });
    }
    async storageState(options = {}) {
      const state = await this._channel.storageState({
        indexedDB: options.indexedDB
      });
      if (options.path) {
        await (0, _fileUtils.mkdirIfNeeded)(this._platform, options.path);
        await this._platform.fs().promises.writeFile(options.path, JSON.stringify(state, void 0, 2), "utf8");
      }
      return state;
    }
    backgroundPages() {
      return [...this._backgroundPages];
    }
    serviceWorkers() {
      return [...this._serviceWorkers];
    }
    async newCDPSession(page2) {
      if (!(page2 instanceof _page.Page) && !(page2 instanceof _frame.Frame)) throw new Error("page: expected Page or Frame");
      const result = await this._channel.newCDPSession(page2 instanceof _page.Page ? {
        page: page2._channel
      } : {
        frame: page2._channel
      });
      return _cdpSession.CDPSession.from(result.session);
    }
    _onClose() {
      var _this$_browserType;
      if (this._browser) this._browser._contexts.delete(this);
      (_this$_browserType = this._browserType) === null || _this$_browserType === void 0 || (_this$_browserType = _this$_browserType._contexts) === null || _this$_browserType === void 0 || _this$_browserType.delete(this);
      this._disposeHarRouters();
      this.tracing._resetStackCounter();
      this.emit(_events.Events.BrowserContext.Close, this);
    }
    async [Symbol.asyncDispose]() {
      await this.close();
    }
    async close(options = {}) {
      if (this._closeWasCalled) return;
      this._closeReason = options.reason;
      this._closeWasCalled = true;
      await this._wrapApiCall(async () => {
        await this.request.dispose(options);
      }, true);
      await this._wrapApiCall(async () => {
        var _this$_browserType2;
        await ((_this$_browserType2 = this._browserType) === null || _this$_browserType2 === void 0 ? void 0 : _this$_browserType2._willCloseContext(this));
        for (const [harId, harParams] of this._harRecorders) {
          const har = await this._channel.harExport({
            harId
          });
          const artifact2 = _artifact.Artifact.from(har.artifact);
          const isCompressed = harParams.content === "attach" || harParams.path.endsWith(".zip");
          const needCompressed = harParams.path.endsWith(".zip");
          if (isCompressed && !needCompressed) {
            const localUtils2 = this._connection.localUtils();
            if (!localUtils2) throw new Error("Uncompressed har is not supported in thin clients");
            await artifact2.saveAs(harParams.path + ".tmp");
            await localUtils2.harUnzip({
              zipFile: harParams.path + ".tmp",
              harFile: harParams.path
            });
          } else {
            await artifact2.saveAs(harParams.path);
          }
          await artifact2.delete();
        }
      }, true);
      await this._channel.close(options);
      await this._closedPromise;
    }
    async _enableRecorder(params) {
      await this._channel.enableRecorder(params);
    }
  }
  browserContext.BrowserContext = BrowserContext;
  async function prepareStorageState(platform2, options) {
    if (typeof options.storageState !== "string") return options.storageState;
    try {
      return JSON.parse(await platform2.fs().promises.readFile(options.storageState, "utf8"));
    } catch (e2) {
      (0, _stackTrace.rewriteErrorMessage)(e2, `Error reading storage state from ${options.storageState}:
` + e2.message);
      throw e2;
    }
  }
  function prepareRecordHarOptions(options) {
    if (!options) return;
    return {
      path: options.path,
      content: options.content || (options.omitContent ? "omit" : void 0),
      urlGlob: (0, _rtti.isString)(options.urlFilter) ? options.urlFilter : void 0,
      urlRegexSource: (0, _rtti.isRegExp)(options.urlFilter) ? options.urlFilter.source : void 0,
      urlRegexFlags: (0, _rtti.isRegExp)(options.urlFilter) ? options.urlFilter.flags : void 0,
      mode: options.mode
    };
  }
  async function prepareBrowserContextParams(platform2, options) {
    if (options.videoSize && !options.videosPath) throw new Error(`"videoSize" option requires "videosPath" to be specified`);
    if (options.extraHTTPHeaders) network2.validateHeaders(options.extraHTTPHeaders);
    const contextParams = {
      ...options,
      viewport: options.viewport === null ? void 0 : options.viewport,
      noDefaultViewport: options.viewport === null,
      extraHTTPHeaders: options.extraHTTPHeaders ? (0, _headers.headersObjectToArray)(options.extraHTTPHeaders) : void 0,
      storageState: await prepareStorageState(platform2, options),
      serviceWorkers: options.serviceWorkers,
      recordHar: prepareRecordHarOptions(options.recordHar),
      colorScheme: options.colorScheme === null ? "no-override" : options.colorScheme,
      reducedMotion: options.reducedMotion === null ? "no-override" : options.reducedMotion,
      forcedColors: options.forcedColors === null ? "no-override" : options.forcedColors,
      contrast: options.contrast === null ? "no-override" : options.contrast,
      acceptDownloads: toAcceptDownloadsProtocol(options.acceptDownloads),
      clientCertificates: await toClientCertificatesProtocol(platform2, options.clientCertificates)
    };
    if (!contextParams.recordVideo && options.videosPath) {
      contextParams.recordVideo = {
        dir: options.videosPath,
        size: options.videoSize
      };
    }
    if (contextParams.recordVideo && contextParams.recordVideo.dir) contextParams.recordVideo.dir = platform2.path().resolve(contextParams.recordVideo.dir);
    return contextParams;
  }
  function toAcceptDownloadsProtocol(acceptDownloads) {
    if (acceptDownloads === void 0) return void 0;
    if (acceptDownloads) return "accept";
    return "deny";
  }
  async function toClientCertificatesProtocol(platform2, certs) {
    if (!certs) return void 0;
    const bufferizeContent = async (value, path) => {
      if (value) return value;
      if (path) return await platform2.fs().promises.readFile(path);
    };
    return await Promise.all(certs.map(async (cert) => ({
      origin: cert.origin,
      cert: await bufferizeContent(cert.cert, cert.certPath),
      key: await bufferizeContent(cert.key, cert.keyPath),
      pfx: await bufferizeContent(cert.pfx, cert.pfxPath),
      passphrase: cert.passphrase
    })));
  }
  return browserContext;
}
var webSocket = {};
var hasRequiredWebSocket;
function requireWebSocket() {
  if (hasRequiredWebSocket) return webSocket;
  hasRequiredWebSocket = 1;
  Object.defineProperty(webSocket, "__esModule", {
    value: true
  });
  webSocket.connectOverWebSocket = connectOverWebSocket;
  var _connection = requireConnection();
  async function connectOverWebSocket(parentConnection, params) {
    const localUtils2 = parentConnection.localUtils();
    const transport2 = localUtils2 ? new JsonPipeTransport(localUtils2) : new WebSocketTransport();
    const connectHeaders = await transport2.connect(params);
    const connection2 = new _connection.Connection(parentConnection._platform, localUtils2, parentConnection._instrumentation, connectHeaders);
    connection2.markAsRemote();
    connection2.on("close", () => transport2.close());
    let closeError;
    const onTransportClosed = (reason) => {
      connection2.close(reason || closeError);
    };
    transport2.onClose((reason) => onTransportClosed(reason));
    connection2.onmessage = (message) => transport2.send(message).catch(() => onTransportClosed());
    transport2.onMessage((message) => {
      try {
        connection2.dispatch(message);
      } catch (e2) {
        closeError = String(e2);
        transport2.close().catch(() => {
        });
      }
    });
    return connection2;
  }
  class JsonPipeTransport {
    constructor(owner) {
      this._pipe = void 0;
      this._owner = void 0;
      this._owner = owner;
    }
    async connect(params) {
      const {
        pipe,
        headers: connectHeaders
      } = await this._owner._wrapApiCall(
        async () => {
          return await this._owner._channel.connect(params);
        },
        /* isInternal */
        true
      );
      this._pipe = pipe;
      return connectHeaders;
    }
    async send(message) {
      await this._owner._wrapApiCall(
        async () => {
          await this._pipe.send({
            message
          });
        },
        /* isInternal */
        true
      );
    }
    onMessage(callback) {
      this._pipe.on("message", ({
        message
      }) => callback(message));
    }
    onClose(callback) {
      this._pipe.on("closed", ({
        reason
      }) => callback(reason));
    }
    async close() {
      await this._owner._wrapApiCall(
        async () => {
          await this._pipe.close().catch(() => {
          });
        },
        /* isInternal */
        true
      );
    }
  }
  class WebSocketTransport {
    constructor() {
      this._ws = void 0;
    }
    async connect(params) {
      this._ws = new window.WebSocket(params.wsEndpoint);
      return [];
    }
    async send(message) {
      this._ws.send(JSON.stringify(message));
    }
    onMessage(callback) {
      this._ws.addEventListener("message", (event) => callback(JSON.parse(event.data)));
    }
    onClose(callback) {
      this._ws.addEventListener("close", () => callback());
    }
    async close() {
      this._ws.close();
    }
  }
  return webSocket;
}
var hasRequiredAndroid;
function requireAndroid() {
  if (hasRequiredAndroid) return android;
  hasRequiredAndroid = 1;
  Object.defineProperty(android, "__esModule", {
    value: true
  });
  android.AndroidWebView = android.AndroidSocket = android.AndroidInput = android.AndroidDevice = android.Android = void 0;
  var _eventEmitter = requireEventEmitter();
  var _browserContext = requireBrowserContext();
  var _channelOwner = requireChannelOwner();
  var _errors = requireErrors();
  var _events = requireEvents();
  var _waiter = requireWaiter();
  var _timeoutSettings = requireTimeoutSettings();
  var _rtti = requireRtti();
  var _time = requireTime$1();
  var _timeoutRunner = requireTimeoutRunner();
  var _webSocket = requireWebSocket();
  class Android extends _channelOwner.ChannelOwner {
    static from(android2) {
      return android2._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._timeoutSettings = void 0;
      this._serverLauncher = void 0;
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings(this._platform);
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
      this._wrapApiCall(async () => {
        await this._channel.setDefaultTimeoutNoReply({
          timeout
        });
      }, true).catch(() => {
      });
    }
    async devices(options = {}) {
      const {
        devices
      } = await this._channel.devices(options);
      return devices.map((d2) => AndroidDevice.from(d2));
    }
    async launchServer(options = {}) {
      if (!this._serverLauncher) throw new Error("Launching server is not supported");
      return await this._serverLauncher.launchServer(options);
    }
    async connect(wsEndpoint, options = {}) {
      return await this._wrapApiCall(async () => {
        const deadline = options.timeout ? (0, _time.monotonicTime)() + options.timeout : 0;
        const headers2 = {
          "x-playwright-browser": "android",
          ...options.headers
        };
        const connectParams = {
          wsEndpoint,
          headers: headers2,
          slowMo: options.slowMo,
          timeout: options.timeout
        };
        const connection2 = await (0, _webSocket.connectOverWebSocket)(this._connection, connectParams);
        let device;
        connection2.on("close", () => {
          var _device;
          (_device = device) === null || _device === void 0 || _device._didClose();
        });
        const result = await (0, _timeoutRunner.raceAgainstDeadline)(async () => {
          const playwright2 = await connection2.initializePlaywright();
          if (!playwright2._initializer.preConnectedAndroidDevice) {
            connection2.close();
            throw new Error("Malformed endpoint. Did you use Android.launchServer method?");
          }
          device = AndroidDevice.from(playwright2._initializer.preConnectedAndroidDevice);
          device._shouldCloseConnectionOnClose = true;
          device.on(_events.Events.AndroidDevice.Close, () => connection2.close());
          return device;
        }, deadline);
        if (!result.timedOut) {
          return result.result;
        } else {
          connection2.close();
          throw new Error(`Timeout ${options.timeout}ms exceeded`);
        }
      });
    }
  }
  android.Android = Android;
  class AndroidDevice extends _channelOwner.ChannelOwner {
    static from(androidDevice) {
      return androidDevice._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._timeoutSettings = void 0;
      this._webViews = /* @__PURE__ */ new Map();
      this._shouldCloseConnectionOnClose = false;
      this.input = void 0;
      this.input = new AndroidInput(this);
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings(this._platform, parent._timeoutSettings);
      this._channel.on("webViewAdded", ({
        webView
      }) => this._onWebViewAdded(webView));
      this._channel.on("webViewRemoved", ({
        socketName
      }) => this._onWebViewRemoved(socketName));
      this._channel.on("close", () => this._didClose());
    }
    _onWebViewAdded(webView) {
      const view = new AndroidWebView(this, webView);
      this._webViews.set(webView.socketName, view);
      this.emit(_events.Events.AndroidDevice.WebView, view);
    }
    _onWebViewRemoved(socketName) {
      const view = this._webViews.get(socketName);
      this._webViews.delete(socketName);
      if (view) view.emit(_events.Events.AndroidWebView.Close);
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
      this._wrapApiCall(async () => {
        await this._channel.setDefaultTimeoutNoReply({
          timeout
        });
      }, true).catch(() => {
      });
    }
    serial() {
      return this._initializer.serial;
    }
    model() {
      return this._initializer.model;
    }
    webViews() {
      return [...this._webViews.values()];
    }
    async webView(selector, options) {
      const predicate = (v2) => {
        if (selector.pkg) return v2.pkg() === selector.pkg;
        if (selector.socketName) return v2._socketName() === selector.socketName;
        return false;
      };
      const webView = [...this._webViews.values()].find(predicate);
      if (webView) return webView;
      return await this.waitForEvent("webview", {
        ...options,
        predicate
      });
    }
    async wait(selector, options) {
      await this._channel.wait({
        selector: toSelectorChannel(selector),
        ...options
      });
    }
    async fill(selector, text, options) {
      await this._channel.fill({
        selector: toSelectorChannel(selector),
        text,
        ...options
      });
    }
    async press(selector, key, options) {
      await this.tap(selector, options);
      await this.input.press(key);
    }
    async tap(selector, options) {
      await this._channel.tap({
        selector: toSelectorChannel(selector),
        ...options
      });
    }
    async drag(selector, dest, options) {
      await this._channel.drag({
        selector: toSelectorChannel(selector),
        dest,
        ...options
      });
    }
    async fling(selector, direction, options) {
      await this._channel.fling({
        selector: toSelectorChannel(selector),
        direction,
        ...options
      });
    }
    async longTap(selector, options) {
      await this._channel.longTap({
        selector: toSelectorChannel(selector),
        ...options
      });
    }
    async pinchClose(selector, percent, options) {
      await this._channel.pinchClose({
        selector: toSelectorChannel(selector),
        percent,
        ...options
      });
    }
    async pinchOpen(selector, percent, options) {
      await this._channel.pinchOpen({
        selector: toSelectorChannel(selector),
        percent,
        ...options
      });
    }
    async scroll(selector, direction, percent, options) {
      await this._channel.scroll({
        selector: toSelectorChannel(selector),
        direction,
        percent,
        ...options
      });
    }
    async swipe(selector, direction, percent, options) {
      await this._channel.swipe({
        selector: toSelectorChannel(selector),
        direction,
        percent,
        ...options
      });
    }
    async info(selector) {
      return (await this._channel.info({
        selector: toSelectorChannel(selector)
      })).info;
    }
    async screenshot(options = {}) {
      const {
        binary
      } = await this._channel.screenshot();
      if (options.path) await this._platform.fs().promises.writeFile(options.path, binary);
      return binary;
    }
    async [Symbol.asyncDispose]() {
      await this.close();
    }
    async close() {
      try {
        if (this._shouldCloseConnectionOnClose) this._connection.close();
        else await this._channel.close();
      } catch (e2) {
        if ((0, _errors.isTargetClosedError)(e2)) return;
        throw e2;
      }
    }
    _didClose() {
      this.emit(_events.Events.AndroidDevice.Close, this);
    }
    async shell(command) {
      const {
        result
      } = await this._channel.shell({
        command
      });
      return result;
    }
    async open(command) {
      return AndroidSocket.from((await this._channel.open({
        command
      })).socket);
    }
    async installApk(file2, options) {
      await this._channel.installApk({
        file: await loadFile(this._platform, file2),
        args: options && options.args
      });
    }
    async push(file2, path, options) {
      await this._channel.push({
        file: await loadFile(this._platform, file2),
        path,
        mode: options ? options.mode : void 0
      });
    }
    async launchBrowser(options = {}) {
      const contextOptions = await (0, _browserContext.prepareBrowserContextParams)(this._platform, options);
      const result = await this._channel.launchBrowser(contextOptions);
      const context = _browserContext.BrowserContext.from(result.context);
      context._setOptions(contextOptions, {});
      return context;
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
      return await this._wrapApiCall(async () => {
        const timeout = this._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
        const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
        const waiter2 = _waiter.Waiter.createForEvent(this, event);
        waiter2.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
        if (event !== _events.Events.AndroidDevice.Close) waiter2.rejectOnEvent(this, _events.Events.AndroidDevice.Close, () => new _errors.TargetClosedError());
        const result = await waiter2.waitForEvent(this, event, predicate);
        waiter2.dispose();
        return result;
      });
    }
  }
  android.AndroidDevice = AndroidDevice;
  class AndroidSocket extends _channelOwner.ChannelOwner {
    static from(androidDevice) {
      return androidDevice._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._channel.on("data", ({
        data
      }) => this.emit(_events.Events.AndroidSocket.Data, data));
      this._channel.on("close", () => this.emit(_events.Events.AndroidSocket.Close));
    }
    async write(data) {
      await this._channel.write({
        data
      });
    }
    async close() {
      await this._channel.close();
    }
    async [Symbol.asyncDispose]() {
      await this.close();
    }
  }
  android.AndroidSocket = AndroidSocket;
  async function loadFile(platform2, file2) {
    if ((0, _rtti.isString)(file2)) return await platform2.fs().promises.readFile(file2);
    return file2;
  }
  class AndroidInput {
    constructor(device) {
      this._device = void 0;
      this._device = device;
    }
    async type(text) {
      await this._device._channel.inputType({
        text
      });
    }
    async press(key) {
      await this._device._channel.inputPress({
        key
      });
    }
    async tap(point) {
      await this._device._channel.inputTap({
        point
      });
    }
    async swipe(from, segments, steps) {
      await this._device._channel.inputSwipe({
        segments,
        steps
      });
    }
    async drag(from, to, steps) {
      await this._device._channel.inputDrag({
        from,
        to,
        steps
      });
    }
  }
  android.AndroidInput = AndroidInput;
  function toSelectorChannel(selector) {
    const {
      checkable,
      checked,
      clazz,
      clickable,
      depth,
      desc,
      enabled,
      focusable,
      focused,
      hasChild,
      hasDescendant,
      longClickable,
      pkg,
      res,
      scrollable,
      selected,
      text
    } = selector;
    const toRegex = (value) => {
      if (value === void 0) return void 0;
      if ((0, _rtti.isRegExp)(value)) return value.source;
      return "^" + value.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d") + "$";
    };
    return {
      checkable,
      checked,
      clazz: toRegex(clazz),
      pkg: toRegex(pkg),
      desc: toRegex(desc),
      res: toRegex(res),
      text: toRegex(text),
      clickable,
      depth,
      enabled,
      focusable,
      focused,
      hasChild: hasChild ? {
        selector: toSelectorChannel(hasChild.selector)
      } : void 0,
      hasDescendant: hasDescendant ? {
        selector: toSelectorChannel(hasDescendant.selector),
        maxDepth: hasDescendant.maxDepth
      } : void 0,
      longClickable,
      scrollable,
      selected
    };
  }
  class AndroidWebView extends _eventEmitter.EventEmitter {
    constructor(device, data) {
      super(device._platform);
      this._device = void 0;
      this._data = void 0;
      this._pagePromise = void 0;
      this._device = device;
      this._data = data;
    }
    pid() {
      return this._data.pid;
    }
    pkg() {
      return this._data.pkg;
    }
    _socketName() {
      return this._data.socketName;
    }
    async page() {
      if (!this._pagePromise) this._pagePromise = this._fetchPage();
      return await this._pagePromise;
    }
    async _fetchPage() {
      const {
        context
      } = await this._device._channel.connectToWebView({
        socketName: this._data.socketName
      });
      return _browserContext.BrowserContext.from(context).pages()[0];
    }
  }
  android.AndroidWebView = AndroidWebView;
  return android;
}
var browserType = {};
var hasRequiredBrowserType;
function requireBrowserType() {
  if (hasRequiredBrowserType) return browserType;
  hasRequiredBrowserType = 1;
  Object.defineProperty(browserType, "__esModule", {
    value: true
  });
  browserType.BrowserType = void 0;
  var _browser3 = requireBrowser$1();
  var _browserContext = requireBrowserContext();
  var _channelOwner = requireChannelOwner();
  var _clientHelper = requireClientHelper();
  var _events = requireEvents();
  var _assert = requireAssert$1();
  var _headers = requireHeaders();
  var _time = requireTime$1();
  var _timeoutRunner = requireTimeoutRunner();
  var _webSocket = requireWebSocket();
  class BrowserType extends _channelOwner.ChannelOwner {
    constructor(...args) {
      super(...args);
      this._serverLauncher = void 0;
      this._contexts = /* @__PURE__ */ new Set();
      this._playwright = void 0;
    }
    static from(browserType2) {
      return browserType2._object;
    }
    executablePath() {
      if (!this._initializer.executablePath) throw new Error("Browser is not supported on current platform");
      return this._initializer.executablePath;
    }
    name() {
      return this._initializer.name;
    }
    async launch(options = {}) {
      var _this$_playwright$_de;
      (0, _assert.assert)(!options.userDataDir, "userDataDir option is not supported in `browserType.launch`. Use `browserType.launchPersistentContext` instead");
      (0, _assert.assert)(!options.port, "Cannot specify a port without launching as a server.");
      const logger2 = options.logger || ((_this$_playwright$_de = this._playwright._defaultLaunchOptions) === null || _this$_playwright$_de === void 0 ? void 0 : _this$_playwright$_de.logger);
      options = {
        ...this._playwright._defaultLaunchOptions,
        ...options
      };
      const launchOptions = {
        ...options,
        ignoreDefaultArgs: Array.isArray(options.ignoreDefaultArgs) ? options.ignoreDefaultArgs : void 0,
        ignoreAllDefaultArgs: !!options.ignoreDefaultArgs && !Array.isArray(options.ignoreDefaultArgs),
        env: options.env ? (0, _clientHelper.envObjectToArray)(options.env) : void 0
      };
      return await this._wrapApiCall(async () => {
        const browser2 = _browser3.Browser.from((await this._channel.launch(launchOptions)).browser);
        this._didLaunchBrowser(browser2, options, logger2);
        return browser2;
      });
    }
    async launchServer(options = {}) {
      if (!this._serverLauncher) throw new Error("Launching server is not supported");
      options = {
        ...this._playwright._defaultLaunchOptions,
        ...options
      };
      return await this._serverLauncher.launchServer(options);
    }
    async launchPersistentContext(userDataDir, options = {}) {
      var _this$_playwright$_de2;
      const logger2 = options.logger || ((_this$_playwright$_de2 = this._playwright._defaultLaunchOptions) === null || _this$_playwright$_de2 === void 0 ? void 0 : _this$_playwright$_de2.logger);
      (0, _assert.assert)(!options.port, "Cannot specify a port without launching as a server.");
      options = {
        ...this._playwright._defaultLaunchOptions,
        ...this._playwright._defaultContextOptions,
        ...options
      };
      const contextParams = await (0, _browserContext.prepareBrowserContextParams)(this._platform, options);
      const persistentParams = {
        ...contextParams,
        ignoreDefaultArgs: Array.isArray(options.ignoreDefaultArgs) ? options.ignoreDefaultArgs : void 0,
        ignoreAllDefaultArgs: !!options.ignoreDefaultArgs && !Array.isArray(options.ignoreDefaultArgs),
        env: options.env ? (0, _clientHelper.envObjectToArray)(options.env) : void 0,
        channel: options.channel,
        userDataDir: this._platform.path().isAbsolute(userDataDir) || !userDataDir ? userDataDir : this._platform.path().resolve(userDataDir)
      };
      return await this._wrapApiCall(async () => {
        const result = await this._channel.launchPersistentContext(persistentParams);
        const context = _browserContext.BrowserContext.from(result.context);
        await this._didCreateContext(context, contextParams, options, logger2);
        return context;
      });
    }
    async connect(optionsOrWsEndpoint, options) {
      if (typeof optionsOrWsEndpoint === "string") return await this._connect({
        ...options,
        wsEndpoint: optionsOrWsEndpoint
      });
      (0, _assert.assert)(optionsOrWsEndpoint.wsEndpoint, "options.wsEndpoint is required");
      return await this._connect(optionsOrWsEndpoint);
    }
    async _connect(params) {
      const logger2 = params.logger;
      return await this._wrapApiCall(async () => {
        var _params$exposeNetwork;
        const deadline = params.timeout ? (0, _time.monotonicTime)() + params.timeout : 0;
        const headers2 = {
          "x-playwright-browser": this.name(),
          ...params.headers
        };
        const connectParams = {
          wsEndpoint: params.wsEndpoint,
          headers: headers2,
          exposeNetwork: (_params$exposeNetwork = params.exposeNetwork) !== null && _params$exposeNetwork !== void 0 ? _params$exposeNetwork : params._exposeNetwork,
          slowMo: params.slowMo,
          timeout: params.timeout
        };
        if (params.__testHookRedirectPortForwarding) connectParams.socksProxyRedirectPortForTest = params.__testHookRedirectPortForwarding;
        const connection2 = await (0, _webSocket.connectOverWebSocket)(this._connection, connectParams);
        let browser2;
        connection2.on("close", () => {
          for (const context of ((_browser = browser2) === null || _browser === void 0 ? void 0 : _browser.contexts()) || []) {
            var _browser;
            for (const page2 of context.pages()) page2._onClose();
            context._onClose();
          }
          setTimeout(() => {
            var _browser2;
            return (_browser2 = browser2) === null || _browser2 === void 0 ? void 0 : _browser2._didClose();
          }, 0);
        });
        const result = await (0, _timeoutRunner.raceAgainstDeadline)(async () => {
          if (params.__testHookBeforeCreateBrowser) await params.__testHookBeforeCreateBrowser();
          const playwright2 = await connection2.initializePlaywright();
          if (!playwright2._initializer.preLaunchedBrowser) {
            connection2.close();
            throw new Error("Malformed endpoint. Did you use BrowserType.launchServer method?");
          }
          playwright2._setSelectors(this._playwright.selectors);
          browser2 = _browser3.Browser.from(playwright2._initializer.preLaunchedBrowser);
          this._didLaunchBrowser(browser2, {}, logger2);
          browser2._shouldCloseConnectionOnClose = true;
          browser2.on(_events.Events.Browser.Disconnected, () => connection2.close());
          return browser2;
        }, deadline);
        if (!result.timedOut) {
          return result.result;
        } else {
          connection2.close();
          throw new Error(`Timeout ${params.timeout}ms exceeded`);
        }
      });
    }
    async connectOverCDP(endpointURLOrOptions, options) {
      if (typeof endpointURLOrOptions === "string") return await this._connectOverCDP(endpointURLOrOptions, options);
      const endpointURL = "endpointURL" in endpointURLOrOptions ? endpointURLOrOptions.endpointURL : endpointURLOrOptions.wsEndpoint;
      (0, _assert.assert)(endpointURL, "Cannot connect over CDP without wsEndpoint.");
      return await this.connectOverCDP(endpointURL, endpointURLOrOptions);
    }
    async _connectOverCDP(endpointURL, params = {}) {
      if (this.name() !== "chromium") throw new Error("Connecting over CDP is only supported in Chromium.");
      const headers2 = params.headers ? (0, _headers.headersObjectToArray)(params.headers) : void 0;
      const result = await this._channel.connectOverCDP({
        endpointURL,
        headers: headers2,
        slowMo: params.slowMo,
        timeout: params.timeout
      });
      const browser2 = _browser3.Browser.from(result.browser);
      this._didLaunchBrowser(browser2, {}, params.logger);
      if (result.defaultContext) await this._didCreateContext(_browserContext.BrowserContext.from(result.defaultContext), {}, {}, params.logger);
      return browser2;
    }
    _didLaunchBrowser(browser2, browserOptions, logger2) {
      browser2._browserType = this;
      browser2._options = browserOptions;
      browser2._logger = logger2;
    }
    async _didCreateContext(context, contextOptions, browserOptions, logger2) {
      context._logger = logger2;
      context._browserType = this;
      this._contexts.add(context);
      context._setOptions(contextOptions, browserOptions);
      if (this._playwright._defaultContextTimeout !== void 0) context.setDefaultTimeout(this._playwright._defaultContextTimeout);
      if (this._playwright._defaultContextNavigationTimeout !== void 0) context.setDefaultNavigationTimeout(this._playwright._defaultContextNavigationTimeout);
      await this._instrumentation.runAfterCreateBrowserContext(context);
    }
    async _willCloseContext(context) {
      this._contexts.delete(context);
      await this._instrumentation.runBeforeCloseBrowserContext(context);
    }
  }
  browserType.BrowserType = BrowserType;
  return browserType;
}
var clientInstrumentation = {};
var hasRequiredClientInstrumentation;
function requireClientInstrumentation() {
  if (hasRequiredClientInstrumentation) return clientInstrumentation;
  hasRequiredClientInstrumentation = 1;
  Object.defineProperty(clientInstrumentation, "__esModule", {
    value: true
  });
  clientInstrumentation.createInstrumentation = createInstrumentation;
  function createInstrumentation() {
    const listeners = [];
    return new Proxy({}, {
      get: (obj, prop) => {
        if (typeof prop !== "string") return obj[prop];
        if (prop === "addListener") return (listener) => listeners.push(listener);
        if (prop === "removeListener") return (listener) => listeners.splice(listeners.indexOf(listener), 1);
        if (prop === "removeAllListeners") return () => listeners.splice(0, listeners.length);
        if (prop.startsWith("run")) {
          return async (...params) => {
            for (const listener of listeners) {
              var _prop, _ref;
              await ((_prop = (_ref = listener)[prop]) === null || _prop === void 0 ? void 0 : _prop.call(_ref, ...params));
            }
          };
        }
        if (prop.startsWith("on")) {
          return (...params) => {
            for (const listener of listeners) {
              var _prop2, _ref2;
              (_prop2 = (_ref2 = listener)[prop]) === null || _prop2 === void 0 || _prop2.call(_ref2, ...params);
            }
          };
        }
        return obj[prop];
      }
    });
  }
  return clientInstrumentation;
}
var electron = {};
var hasRequiredElectron;
function requireElectron() {
  if (hasRequiredElectron) return electron;
  hasRequiredElectron = 1;
  Object.defineProperty(electron, "__esModule", {
    value: true
  });
  electron.ElectronApplication = electron.Electron = void 0;
  var _browserContext = requireBrowserContext();
  var _channelOwner = requireChannelOwner();
  var _clientHelper = requireClientHelper();
  var _consoleMessage = requireConsoleMessage();
  var _errors = requireErrors();
  var _events = requireEvents();
  var _jsHandle = requireJsHandle();
  var _waiter = requireWaiter();
  var _timeoutSettings = requireTimeoutSettings();
  class Electron extends _channelOwner.ChannelOwner {
    static from(electron2) {
      return electron2._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
    }
    async launch(options = {}) {
      const params = {
        ...await (0, _browserContext.prepareBrowserContextParams)(this._platform, options),
        env: (0, _clientHelper.envObjectToArray)(options.env ? options.env : this._platform.env),
        tracesDir: options.tracesDir
      };
      const app = ElectronApplication.from((await this._channel.launch(params)).electronApplication);
      app._context._setOptions(params, options);
      return app;
    }
  }
  electron.Electron = Electron;
  class ElectronApplication extends _channelOwner.ChannelOwner {
    static from(electronApplication) {
      return electronApplication._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._context = void 0;
      this._windows = /* @__PURE__ */ new Set();
      this._timeoutSettings = void 0;
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings(this._platform);
      this._context = _browserContext.BrowserContext.from(initializer.context);
      for (const page2 of this._context._pages) this._onPage(page2);
      this._context.on(_events.Events.BrowserContext.Page, (page2) => this._onPage(page2));
      this._channel.on("close", () => {
        this.emit(_events.Events.ElectronApplication.Close);
      });
      this._channel.on("console", (event) => this.emit(_events.Events.ElectronApplication.Console, new _consoleMessage.ConsoleMessage(this._platform, event)));
      this._setEventToSubscriptionMapping(/* @__PURE__ */ new Map([[_events.Events.ElectronApplication.Console, "console"]]));
    }
    process() {
      return this._toImpl().process();
    }
    _onPage(page2) {
      this._windows.add(page2);
      this.emit(_events.Events.ElectronApplication.Window, page2);
      page2.once(_events.Events.Page.Close, () => this._windows.delete(page2));
    }
    windows() {
      return [...this._windows];
    }
    async firstWindow(options) {
      if (this._windows.size) return this._windows.values().next().value;
      return await this.waitForEvent("window", options);
    }
    context() {
      return this._context;
    }
    async [Symbol.asyncDispose]() {
      await this.close();
    }
    async close() {
      try {
        await this._context.close();
      } catch (e2) {
        if ((0, _errors.isTargetClosedError)(e2)) return;
        throw e2;
      }
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
      return await this._wrapApiCall(async () => {
        const timeout = this._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
        const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
        const waiter2 = _waiter.Waiter.createForEvent(this, event);
        waiter2.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
        if (event !== _events.Events.ElectronApplication.Close) waiter2.rejectOnEvent(this, _events.Events.ElectronApplication.Close, () => new _errors.TargetClosedError());
        const result = await waiter2.waitForEvent(this, event, predicate);
        waiter2.dispose();
        return result;
      });
    }
    async browserWindow(page2) {
      const result = await this._channel.browserWindow({
        page: page2._channel
      });
      return _jsHandle.JSHandle.from(result.handle);
    }
    async evaluate(pageFunction, arg) {
      const result = await this._channel.evaluateExpression({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async evaluateHandle(pageFunction, arg) {
      const result = await this._channel.evaluateExpressionHandle({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return _jsHandle.JSHandle.from(result.handle);
    }
  }
  electron.ElectronApplication = ElectronApplication;
  return electron;
}
var jsonPipe = {};
var hasRequiredJsonPipe;
function requireJsonPipe() {
  if (hasRequiredJsonPipe) return jsonPipe;
  hasRequiredJsonPipe = 1;
  Object.defineProperty(jsonPipe, "__esModule", {
    value: true
  });
  jsonPipe.JsonPipe = void 0;
  var _channelOwner = requireChannelOwner();
  class JsonPipe extends _channelOwner.ChannelOwner {
    static from(jsonPipe2) {
      return jsonPipe2._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
    }
    channel() {
      return this._channel;
    }
  }
  jsonPipe.JsonPipe = JsonPipe;
  return jsonPipe;
}
var localUtils = {};
var hasRequiredLocalUtils;
function requireLocalUtils() {
  if (hasRequiredLocalUtils) return localUtils;
  hasRequiredLocalUtils = 1;
  Object.defineProperty(localUtils, "__esModule", {
    value: true
  });
  localUtils.LocalUtils = void 0;
  var _channelOwner = requireChannelOwner();
  class LocalUtils extends _channelOwner.ChannelOwner {
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this.devices = void 0;
      this.markAsInternalType();
      this.devices = {};
      for (const {
        name,
        descriptor
      } of initializer.deviceDescriptors) this.devices[name] = descriptor;
    }
    async zip(params) {
      return await this._channel.zip(params);
    }
    async harOpen(params) {
      return await this._channel.harOpen(params);
    }
    async harLookup(params) {
      return await this._channel.harLookup(params);
    }
    async harClose(params) {
      return await this._channel.harClose(params);
    }
    async harUnzip(params) {
      return await this._channel.harUnzip(params);
    }
    async tracingStarted(params) {
      return await this._channel.tracingStarted(params);
    }
    async traceDiscarded(params) {
      return await this._channel.traceDiscarded(params);
    }
    async addStackToTracingNoReply(params) {
      return await this._channel.addStackToTracingNoReply(params);
    }
  }
  localUtils.LocalUtils = LocalUtils;
  return localUtils;
}
var playwright$1 = {};
var selectors = {};
var platform = {};
var hasRequiredPlatform;
function requirePlatform() {
  if (hasRequiredPlatform) return platform;
  hasRequiredPlatform = 1;
  Object.defineProperty(platform, "__esModule", {
    value: true
  });
  platform.emptyPlatform = void 0;
  var _colors = requireColors();
  const noopZone = {
    push: () => noopZone,
    pop: () => noopZone,
    run: (func) => func(),
    data: () => void 0
  };
  platform.emptyPlatform = {
    name: "empty",
    boxedStackPrefixes: () => [],
    calculateSha1: async () => {
      throw new Error("Not implemented");
    },
    colors: _colors.webColors,
    createGuid: () => {
      throw new Error("Not implemented");
    },
    defaultMaxListeners: () => 10,
    env: {},
    fs: () => {
      throw new Error("Not implemented");
    },
    inspectCustom: void 0,
    isDebugMode: () => false,
    isJSDebuggerAttached: () => false,
    isLogEnabled(name) {
      return false;
    },
    isUnderTest: () => false,
    log(name, message) {
    },
    path: () => {
      throw new Error("Function not implemented.");
    },
    pathSeparator: "/",
    showInternalStackFrames: () => false,
    streamFile(path, writable) {
      throw new Error("Streams are not available");
    },
    streamReadable: (channel) => {
      throw new Error("Streams are not available");
    },
    streamWritable: (channel) => {
      throw new Error("Streams are not available");
    },
    zones: {
      empty: noopZone,
      current: () => noopZone
    }
  };
  return platform;
}
var hasRequiredSelectors;
function requireSelectors() {
  if (hasRequiredSelectors) return selectors;
  hasRequiredSelectors = 1;
  Object.defineProperty(selectors, "__esModule", {
    value: true
  });
  selectors.SelectorsOwner = selectors.Selectors = void 0;
  selectors.setPlatformForSelectors = setPlatformForSelectors;
  var _channelOwner = requireChannelOwner();
  var _clientHelper = requireClientHelper();
  var _locator = requireLocator();
  var _platform = requirePlatform();
  let platform2 = _platform.emptyPlatform;
  function setPlatformForSelectors(p) {
    platform2 = p;
  }
  class Selectors {
    constructor() {
      this._channels = /* @__PURE__ */ new Set();
      this._registrations = [];
    }
    async register(name, script, options = {}) {
      const source = await (0, _clientHelper.evaluationScript)(platform2, script, void 0, false);
      const params = {
        ...options,
        name,
        source
      };
      for (const channel of this._channels) await channel._channel.register(params);
      this._registrations.push(params);
    }
    setTestIdAttribute(attributeName) {
      (0, _locator.setTestIdAttribute)(attributeName);
      for (const channel of this._channels) channel._channel.setTestIdAttributeName({
        testIdAttributeName: attributeName
      }).catch(() => {
      });
    }
    _addChannel(channel) {
      this._channels.add(channel);
      for (const params of this._registrations) {
        channel._channel.register(params).catch(() => {
        });
        channel._channel.setTestIdAttributeName({
          testIdAttributeName: (0, _locator.testIdAttributeName)()
        }).catch(() => {
        });
      }
    }
    _removeChannel(channel) {
      this._channels.delete(channel);
    }
  }
  selectors.Selectors = Selectors;
  class SelectorsOwner extends _channelOwner.ChannelOwner {
    static from(browser2) {
      return browser2._object;
    }
  }
  selectors.SelectorsOwner = SelectorsOwner;
  return selectors;
}
var hasRequiredPlaywright;
function requirePlaywright() {
  if (hasRequiredPlaywright) return playwright$1;
  hasRequiredPlaywright = 1;
  Object.defineProperty(playwright$1, "__esModule", {
    value: true
  });
  playwright$1.Playwright = void 0;
  var _android = requireAndroid();
  var _browser = requireBrowser$1();
  var _browserType = requireBrowserType();
  var _channelOwner = requireChannelOwner();
  var _electron = requireElectron();
  var _errors = requireErrors();
  var _fetch = requireFetch();
  var _selectors = requireSelectors();
  class Playwright extends _channelOwner.ChannelOwner {
    constructor(parent, type, guid, initializer) {
      var _this$_connection$loc, _this$_connection$loc2;
      super(parent, type, guid, initializer);
      this._android = void 0;
      this._electron = void 0;
      this._bidiChromium = void 0;
      this._bidiFirefox = void 0;
      this.chromium = void 0;
      this.firefox = void 0;
      this.webkit = void 0;
      this.devices = void 0;
      this.selectors = void 0;
      this.request = void 0;
      this.errors = void 0;
      this._defaultLaunchOptions = void 0;
      this._defaultContextOptions = void 0;
      this._defaultContextTimeout = void 0;
      this._defaultContextNavigationTimeout = void 0;
      this.request = new _fetch.APIRequest(this);
      this.chromium = _browserType.BrowserType.from(initializer.chromium);
      this.chromium._playwright = this;
      this.firefox = _browserType.BrowserType.from(initializer.firefox);
      this.firefox._playwright = this;
      this.webkit = _browserType.BrowserType.from(initializer.webkit);
      this.webkit._playwright = this;
      this._android = _android.Android.from(initializer.android);
      this._electron = _electron.Electron.from(initializer.electron);
      this._bidiChromium = _browserType.BrowserType.from(initializer.bidiChromium);
      this._bidiChromium._playwright = this;
      this._bidiFirefox = _browserType.BrowserType.from(initializer.bidiFirefox);
      this._bidiFirefox._playwright = this;
      this.devices = (_this$_connection$loc = (_this$_connection$loc2 = this._connection.localUtils()) === null || _this$_connection$loc2 === void 0 ? void 0 : _this$_connection$loc2.devices) !== null && _this$_connection$loc !== void 0 ? _this$_connection$loc : {};
      this.selectors = new _selectors.Selectors();
      this.errors = {
        TimeoutError: _errors.TimeoutError
      };
      const selectorsOwner = _selectors.SelectorsOwner.from(initializer.selectors);
      this.selectors._addChannel(selectorsOwner);
      this._connection.on("close", () => {
        this.selectors._removeChannel(selectorsOwner);
      });
      commonjsGlobal._playwrightInstance = this;
    }
    _setSelectors(selectors2) {
      const selectorsOwner = _selectors.SelectorsOwner.from(this._initializer.selectors);
      this.selectors._removeChannel(selectorsOwner);
      this.selectors = selectors2;
      this.selectors._addChannel(selectorsOwner);
    }
    static from(channel) {
      return channel._object;
    }
    _browserTypes() {
      return [this.chromium, this.firefox, this.webkit, this._bidiChromium, this._bidiFirefox];
    }
    _preLaunchedBrowser() {
      const browser2 = _browser.Browser.from(this._initializer.preLaunchedBrowser);
      browser2._browserType = this[browser2._name];
      return browser2;
    }
    _allContexts() {
      return this._browserTypes().flatMap((type) => [...type._contexts]);
    }
    _allPages() {
      return this._allContexts().flatMap((context) => context.pages());
    }
  }
  playwright$1.Playwright = Playwright;
  return playwright$1;
}
var hasRequiredConnection;
function requireConnection() {
  if (hasRequiredConnection) return connection;
  hasRequiredConnection = 1;
  Object.defineProperty(connection, "__esModule", {
    value: true
  });
  connection.Connection = void 0;
  var _eventEmitter = requireEventEmitter();
  var _android = requireAndroid();
  var _artifact = requireArtifact();
  var _browser = requireBrowser$1();
  var _browserContext = requireBrowserContext();
  var _browserType = requireBrowserType();
  var _cdpSession = requireCdpSession();
  var _channelOwner = requireChannelOwner();
  var _clientInstrumentation = requireClientInstrumentation();
  var _dialog = requireDialog();
  var _electron = requireElectron();
  var _elementHandle = requireElementHandle();
  var _errors = requireErrors();
  var _fetch = requireFetch();
  var _frame = requireFrame();
  var _jsHandle = requireJsHandle();
  var _jsonPipe = requireJsonPipe();
  var _localUtils = requireLocalUtils();
  var _network = requireNetwork();
  var _page = requirePage();
  var _playwright = requirePlaywright();
  var _selectors = requireSelectors();
  var _stream = requireStream();
  var _tracing = requireTracing();
  var _worker = requireWorker();
  var _writableStream = requireWritableStream();
  var _validator = requireValidator();
  var _stackTrace = requireStackTrace();
  class Root extends _channelOwner.ChannelOwner {
    constructor(connection2) {
      super(connection2, "Root", "", {});
    }
    async initialize() {
      return _playwright.Playwright.from((await this._channel.initialize({
        sdkLanguage: "javascript"
      })).playwright);
    }
  }
  class DummyChannelOwner extends _channelOwner.ChannelOwner {
  }
  class Connection extends _eventEmitter.EventEmitter {
    constructor(platform2, localUtils2, instrumentation2, headers2 = []) {
      super(platform2);
      this._objects = /* @__PURE__ */ new Map();
      this.onmessage = (message) => {
      };
      this._lastId = 0;
      this._callbacks = /* @__PURE__ */ new Map();
      this._rootObject = void 0;
      this._closedError = void 0;
      this._isRemote = false;
      this._localUtils = void 0;
      this._rawBuffers = false;
      this.toImpl = void 0;
      this._tracingCount = 0;
      this._instrumentation = void 0;
      this.headers = void 0;
      this._instrumentation = instrumentation2 || (0, _clientInstrumentation.createInstrumentation)();
      this._localUtils = localUtils2;
      this._rootObject = new Root(this);
      this.headers = headers2;
    }
    markAsRemote() {
      this._isRemote = true;
    }
    isRemote() {
      return this._isRemote;
    }
    useRawBuffers() {
      this._rawBuffers = true;
    }
    rawBuffers() {
      return this._rawBuffers;
    }
    localUtils() {
      return this._localUtils;
    }
    async initializePlaywright() {
      return await this._rootObject.initialize();
    }
    getObjectWithKnownName(guid) {
      return this._objects.get(guid);
    }
    setIsTracing(isTracing) {
      if (isTracing) this._tracingCount++;
      else this._tracingCount--;
    }
    async sendMessageToServer(object, method, params, apiName, frames2, stepId) {
      var _this$_localUtils;
      if (this._closedError) throw this._closedError;
      if (object._wasCollected) throw new Error("The object has been collected to prevent unbounded heap growth.");
      const guid = object._guid;
      const type = object._type;
      const id = ++this._lastId;
      const message = {
        id,
        guid,
        method,
        params
      };
      if (this._platform.isLogEnabled("channel")) {
        this._platform.log("channel", "SEND> " + JSON.stringify(message));
      }
      const location2 = frames2[0] ? {
        file: frames2[0].file,
        line: frames2[0].line,
        column: frames2[0].column
      } : void 0;
      const metadata = {
        apiName,
        location: location2,
        internal: !apiName,
        stepId
      };
      if (this._tracingCount && frames2 && type !== "LocalUtils") (_this$_localUtils = this._localUtils) === null || _this$_localUtils === void 0 || _this$_localUtils.addStackToTracingNoReply({
        callData: {
          stack: frames2,
          id
        }
      }).catch(() => {
      });
      this._platform.zones.empty.run(() => this.onmessage({
        ...message,
        metadata
      }));
      return await new Promise((resolve2, reject) => this._callbacks.set(id, {
        resolve: resolve2,
        reject,
        apiName,
        type,
        method
      }));
    }
    _validatorFromWireContext() {
      return {
        tChannelImpl: this._tChannelImplFromWire.bind(this),
        binary: this._rawBuffers ? "buffer" : "fromBase64",
        isUnderTest: () => this._platform.isUnderTest()
      };
    }
    dispatch(message) {
      if (this._closedError) return;
      const {
        id,
        guid,
        method,
        params,
        result,
        error,
        log: log2
      } = message;
      if (id) {
        if (this._platform.isLogEnabled("channel")) this._platform.log("channel", "<RECV " + JSON.stringify(message));
        const callback = this._callbacks.get(id);
        if (!callback) throw new Error(`Cannot find command to respond: ${id}`);
        this._callbacks.delete(id);
        if (error && !result) {
          const parsedError = (0, _errors.parseError)(error);
          (0, _stackTrace.rewriteErrorMessage)(parsedError, parsedError.message + formatCallLog(this._platform, log2));
          callback.reject(parsedError);
        } else {
          const validator3 = (0, _validator.findValidator)(callback.type, callback.method, "Result");
          callback.resolve(validator3(result, "", this._validatorFromWireContext()));
        }
        return;
      }
      if (this._platform.isLogEnabled("channel")) this._platform.log("channel", "<EVENT " + JSON.stringify(message));
      if (method === "__create__") {
        this._createRemoteObject(guid, params.type, params.guid, params.initializer);
        return;
      }
      const object = this._objects.get(guid);
      if (!object) throw new Error(`Cannot find object to "${method}": ${guid}`);
      if (method === "__adopt__") {
        const child = this._objects.get(params.guid);
        if (!child) throw new Error(`Unknown new child: ${params.guid}`);
        object._adopt(child);
        return;
      }
      if (method === "__dispose__") {
        object._dispose(params.reason);
        return;
      }
      const validator2 = (0, _validator.findValidator)(object._type, method, "Event");
      object._channel.emit(method, validator2(params, "", this._validatorFromWireContext()));
    }
    close(cause) {
      if (this._closedError) return;
      this._closedError = new _errors.TargetClosedError(cause);
      for (const callback of this._callbacks.values()) callback.reject(this._closedError);
      this._callbacks.clear();
      this.emit("close");
    }
    _tChannelImplFromWire(names, arg, path, context) {
      if (arg && typeof arg === "object" && typeof arg.guid === "string") {
        const object = this._objects.get(arg.guid);
        if (!object) throw new Error(`Object with guid ${arg.guid} was not bound in the connection`);
        if (names !== "*" && !names.includes(object._type)) throw new _validator.ValidationError(`${path}: expected channel ${names.toString()}`);
        return object._channel;
      }
      throw new _validator.ValidationError(`${path}: expected channel ${names.toString()}`);
    }
    _createRemoteObject(parentGuid, type, guid, initializer) {
      const parent = this._objects.get(parentGuid);
      if (!parent) throw new Error(`Cannot find parent object ${parentGuid} to create ${guid}`);
      let result;
      const validator2 = (0, _validator.findValidator)(type, "", "Initializer");
      initializer = validator2(initializer, "", this._validatorFromWireContext());
      switch (type) {
        case "Android":
          result = new _android.Android(parent, type, guid, initializer);
          break;
        case "AndroidSocket":
          result = new _android.AndroidSocket(parent, type, guid, initializer);
          break;
        case "AndroidDevice":
          result = new _android.AndroidDevice(parent, type, guid, initializer);
          break;
        case "APIRequestContext":
          result = new _fetch.APIRequestContext(parent, type, guid, initializer);
          break;
        case "Artifact":
          result = new _artifact.Artifact(parent, type, guid, initializer);
          break;
        case "BindingCall":
          result = new _page.BindingCall(parent, type, guid, initializer);
          break;
        case "Browser":
          result = new _browser.Browser(parent, type, guid, initializer);
          break;
        case "BrowserContext":
          result = new _browserContext.BrowserContext(parent, type, guid, initializer);
          break;
        case "BrowserType":
          result = new _browserType.BrowserType(parent, type, guid, initializer);
          break;
        case "CDPSession":
          result = new _cdpSession.CDPSession(parent, type, guid, initializer);
          break;
        case "Dialog":
          result = new _dialog.Dialog(parent, type, guid, initializer);
          break;
        case "Electron":
          result = new _electron.Electron(parent, type, guid, initializer);
          break;
        case "ElectronApplication":
          result = new _electron.ElectronApplication(parent, type, guid, initializer);
          break;
        case "ElementHandle":
          result = new _elementHandle.ElementHandle(parent, type, guid, initializer);
          break;
        case "Frame":
          result = new _frame.Frame(parent, type, guid, initializer);
          break;
        case "JSHandle":
          result = new _jsHandle.JSHandle(parent, type, guid, initializer);
          break;
        case "JsonPipe":
          result = new _jsonPipe.JsonPipe(parent, type, guid, initializer);
          break;
        case "LocalUtils":
          result = new _localUtils.LocalUtils(parent, type, guid, initializer);
          if (!this._localUtils) this._localUtils = result;
          break;
        case "Page":
          result = new _page.Page(parent, type, guid, initializer);
          break;
        case "Playwright":
          result = new _playwright.Playwright(parent, type, guid, initializer);
          break;
        case "Request":
          result = new _network.Request(parent, type, guid, initializer);
          break;
        case "Response":
          result = new _network.Response(parent, type, guid, initializer);
          break;
        case "Route":
          result = new _network.Route(parent, type, guid, initializer);
          break;
        case "Stream":
          result = new _stream.Stream(parent, type, guid, initializer);
          break;
        case "Selectors":
          result = new _selectors.SelectorsOwner(parent, type, guid, initializer);
          break;
        case "SocksSupport":
          result = new DummyChannelOwner(parent, type, guid, initializer);
          break;
        case "Tracing":
          result = new _tracing.Tracing(parent, type, guid, initializer);
          break;
        case "WebSocket":
          result = new _network.WebSocket(parent, type, guid, initializer);
          break;
        case "WebSocketRoute":
          result = new _network.WebSocketRoute(parent, type, guid, initializer);
          break;
        case "Worker":
          result = new _worker.Worker(parent, type, guid, initializer);
          break;
        case "WritableStream":
          result = new _writableStream.WritableStream(parent, type, guid, initializer);
          break;
        default:
          throw new Error("Missing type " + type);
      }
      return result;
    }
  }
  connection.Connection = Connection;
  function formatCallLog(platform2, log2) {
    if (!log2 || !log2.some((l) => !!l)) return "";
    return `
Call log:
${platform2.colors.dim(log2.join("\n"))}
`;
  }
  return connection;
}
var hasRequiredInProcessFactory;
function requireInProcessFactory() {
  if (hasRequiredInProcessFactory) return inProcessFactory;
  hasRequiredInProcessFactory = 1;
  Object.defineProperty(inProcessFactory, "__esModule", {
    value: true
  });
  inProcessFactory.createInProcessPlaywright = createInProcessPlaywright;
  var _androidServerImpl = requireAndroidServerImpl();
  var _browserServerImpl = requireBrowserServerImpl();
  var _server = requireServer();
  var _nodePlatform = requireNodePlatform();
  var _connection = requireConnection();
  var _selectors = requireSelectors();
  function createInProcessPlaywright() {
    const playwright2 = (0, _server.createPlaywright)({
      sdkLanguage: process.env.PW_LANG_NAME || "javascript"
    });
    (0, _selectors.setPlatformForSelectors)(_nodePlatform.nodePlatform);
    const clientConnection = new _connection.Connection(_nodePlatform.nodePlatform);
    clientConnection.useRawBuffers();
    const dispatcherConnection = new _server.DispatcherConnection(
      true
      /* local */
    );
    dispatcherConnection.onmessage = (message) => clientConnection.dispatch(message);
    clientConnection.onmessage = (message) => dispatcherConnection.dispatch(message);
    const rootScope = new _server.RootDispatcher(dispatcherConnection);
    new _server.PlaywrightDispatcher(rootScope, playwright2);
    const playwrightAPI = clientConnection.getObjectWithKnownName("Playwright");
    playwrightAPI.chromium._serverLauncher = new _browserServerImpl.BrowserServerLauncherImpl("chromium");
    playwrightAPI.firefox._serverLauncher = new _browserServerImpl.BrowserServerLauncherImpl("firefox");
    playwrightAPI.webkit._serverLauncher = new _browserServerImpl.BrowserServerLauncherImpl("webkit");
    playwrightAPI._android._serverLauncher = new _androidServerImpl.AndroidServerLauncherImpl();
    playwrightAPI._bidiChromium._serverLauncher = new _browserServerImpl.BrowserServerLauncherImpl("bidiChromium");
    playwrightAPI._bidiFirefox._serverLauncher = new _browserServerImpl.BrowserServerLauncherImpl("bidiFirefox");
    dispatcherConnection.onmessage = (message) => setImmediate(() => clientConnection.dispatch(message));
    clientConnection.onmessage = (message) => setImmediate(() => dispatcherConnection.dispatch(message));
    clientConnection.toImpl = (x2) => x2 ? dispatcherConnection._dispatchers.get(x2._guid)._object : dispatcherConnection._dispatchers.get("");
    playwrightAPI._toImpl = clientConnection.toImpl;
    return playwrightAPI;
  }
  return inProcessFactory;
}
var inprocess;
var hasRequiredInprocess;
function requireInprocess() {
  if (hasRequiredInprocess) return inprocess;
  hasRequiredInprocess = 1;
  var _inProcessFactory = requireInProcessFactory();
  inprocess = (0, _inProcessFactory.createInProcessPlaywright)();
  return inprocess;
}
var playwrightCore;
var hasRequiredPlaywrightCore;
function requirePlaywrightCore() {
  if (hasRequiredPlaywrightCore) return playwrightCore;
  hasRequiredPlaywrightCore = 1;
  const minimumMajorNodeVersion = 14;
  const currentNodeVersion = process.versions.node;
  const semver = currentNodeVersion.split(".");
  const [major] = [+semver[0]];
  if (major < minimumMajorNodeVersion) {
    console.error(
      "You are running Node.js " + currentNodeVersion + `.
Playwright requires Node.js ${minimumMajorNodeVersion} or higher. 
Please update your version of Node.js.`
    );
    process.exit(1);
  }
  playwrightCore = requireInprocess();
  return playwrightCore;
}
var playwrightCoreExports = requirePlaywrightCore();
const playwright = /* @__PURE__ */ getDefaultExportFromCjs(playwrightCoreExports);
const chromium = playwright.chromium;
playwright.firefox;
playwright.webkit;
playwright.selectors;
playwright.devices;
playwright.errors;
playwright.request;
playwright._electron;
playwright._android;
var browser$1 = { exports: {} };
var ms;
var hasRequiredMs;
function requireMs() {
  if (hasRequiredMs) return ms;
  hasRequiredMs = 1;
  var s2 = 1e3;
  var m2 = s2 * 60;
  var h2 = m2 * 60;
  var d2 = h2 * 24;
  var w2 = d2 * 7;
  var y2 = d2 * 365.25;
  ms = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
      return parse2(val);
    } else if (type === "number" && isFinite(val)) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error(
      "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
    );
  };
  function parse2(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
      str
    );
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch (type) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n * y2;
      case "weeks":
      case "week":
      case "w":
        return n * w2;
      case "days":
      case "day":
      case "d":
        return n * d2;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n * h2;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n * m2;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n * s2;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n;
      default:
        return void 0;
    }
  }
  function fmtShort(ms2) {
    var msAbs = Math.abs(ms2);
    if (msAbs >= d2) {
      return Math.round(ms2 / d2) + "d";
    }
    if (msAbs >= h2) {
      return Math.round(ms2 / h2) + "h";
    }
    if (msAbs >= m2) {
      return Math.round(ms2 / m2) + "m";
    }
    if (msAbs >= s2) {
      return Math.round(ms2 / s2) + "s";
    }
    return ms2 + "ms";
  }
  function fmtLong(ms2) {
    var msAbs = Math.abs(ms2);
    if (msAbs >= d2) {
      return plural(ms2, msAbs, d2, "day");
    }
    if (msAbs >= h2) {
      return plural(ms2, msAbs, h2, "hour");
    }
    if (msAbs >= m2) {
      return plural(ms2, msAbs, m2, "minute");
    }
    if (msAbs >= s2) {
      return plural(ms2, msAbs, s2, "second");
    }
    return ms2 + " ms";
  }
  function plural(ms2, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms2 / n) + " " + name + (isPlural ? "s" : "");
  }
  return ms;
}
var common;
var hasRequiredCommon;
function requireCommon() {
  if (hasRequiredCommon) return common;
  hasRequiredCommon = 1;
  function setup(env2) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = requireMs();
    createDebug.destroy = destroy;
    Object.keys(env2).forEach((key) => {
      createDebug[key] = env2[key];
    });
    createDebug.names = [];
    createDebug.skips = [];
    createDebug.formatters = {};
    function selectColor(namespace) {
      let hash = 0;
      for (let i = 0; i < namespace.length; i++) {
        hash = (hash << 5) - hash + namespace.charCodeAt(i);
        hash |= 0;
      }
      return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;
    function createDebug(namespace) {
      let prevTime;
      let enableOverride = null;
      let namespacesCache;
      let enabledCache;
      function debug2(...args) {
        if (!debug2.enabled) {
          return;
        }
        const self2 = debug2;
        const curr = Number(/* @__PURE__ */ new Date());
        const ms2 = curr - (prevTime || curr);
        self2.diff = ms2;
        self2.prev = prevTime;
        self2.curr = curr;
        prevTime = curr;
        args[0] = createDebug.coerce(args[0]);
        if (typeof args[0] !== "string") {
          args.unshift("%O");
        }
        let index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format2) => {
          if (match === "%%") {
            return "%";
          }
          index++;
          const formatter = createDebug.formatters[format2];
          if (typeof formatter === "function") {
            const val = args[index];
            match = formatter.call(self2, val);
            args.splice(index, 1);
            index--;
          }
          return match;
        });
        createDebug.formatArgs.call(self2, args);
        const logFn = self2.log || createDebug.log;
        logFn.apply(self2, args);
      }
      debug2.namespace = namespace;
      debug2.useColors = createDebug.useColors();
      debug2.color = createDebug.selectColor(namespace);
      debug2.extend = extend;
      debug2.destroy = createDebug.destroy;
      Object.defineProperty(debug2, "enabled", {
        enumerable: true,
        configurable: false,
        get: () => {
          if (enableOverride !== null) {
            return enableOverride;
          }
          if (namespacesCache !== createDebug.namespaces) {
            namespacesCache = createDebug.namespaces;
            enabledCache = createDebug.enabled(namespace);
          }
          return enabledCache;
        },
        set: (v2) => {
          enableOverride = v2;
        }
      });
      if (typeof createDebug.init === "function") {
        createDebug.init(debug2);
      }
      return debug2;
    }
    function extend(namespace, delimiter2) {
      const newDebug = createDebug(this.namespace + (typeof delimiter2 === "undefined" ? ":" : delimiter2) + namespace);
      newDebug.log = this.log;
      return newDebug;
    }
    function enable(namespaces) {
      createDebug.save(namespaces);
      createDebug.namespaces = namespaces;
      createDebug.names = [];
      createDebug.skips = [];
      const split = (typeof namespaces === "string" ? namespaces : "").trim().replace(" ", ",").split(",").filter(Boolean);
      for (const ns of split) {
        if (ns[0] === "-") {
          createDebug.skips.push(ns.slice(1));
        } else {
          createDebug.names.push(ns);
        }
      }
    }
    function matchesTemplate(search, template) {
      let searchIndex = 0;
      let templateIndex = 0;
      let starIndex = -1;
      let matchIndex = 0;
      while (searchIndex < search.length) {
        if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === "*")) {
          if (template[templateIndex] === "*") {
            starIndex = templateIndex;
            matchIndex = searchIndex;
            templateIndex++;
          } else {
            searchIndex++;
            templateIndex++;
          }
        } else if (starIndex !== -1) {
          templateIndex = starIndex + 1;
          matchIndex++;
          searchIndex = matchIndex;
        } else {
          return false;
        }
      }
      while (templateIndex < template.length && template[templateIndex] === "*") {
        templateIndex++;
      }
      return templateIndex === template.length;
    }
    function disable() {
      const namespaces = [
        ...createDebug.names,
        ...createDebug.skips.map((namespace) => "-" + namespace)
      ].join(",");
      createDebug.enable("");
      return namespaces;
    }
    function enabled(name) {
      for (const skip of createDebug.skips) {
        if (matchesTemplate(name, skip)) {
          return false;
        }
      }
      for (const ns of createDebug.names) {
        if (matchesTemplate(name, ns)) {
          return true;
        }
      }
      return false;
    }
    function coerce(val) {
      if (val instanceof Error) {
        return val.stack || val.message;
      }
      return val;
    }
    function destroy() {
      console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    createDebug.enable(createDebug.load());
    return createDebug;
  }
  common = setup;
  return common;
}
var hasRequiredBrowser;
function requireBrowser() {
  if (hasRequiredBrowser) return browser$1.exports;
  hasRequiredBrowser = 1;
  (function(module, exports) {
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = /* @__PURE__ */ (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      let m2;
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && (m2 = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m2[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c2 = "color: " + this.color;
      args.splice(1, 0, c2, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c2);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem("debug", namespaces);
        } else {
          exports.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r2;
      try {
        r2 = exports.storage.getItem("debug");
      } catch (error) {
      }
      if (!r2 && typeof process !== "undefined" && "env" in process) {
        r2 = process.env.DEBUG;
      }
      return r2;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module.exports = requireCommon()(exports);
    const { formatters } = module.exports;
    formatters.j = function(v2) {
      try {
        return JSON.stringify(v2);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  })(browser$1, browser$1.exports);
  return browser$1.exports;
}
var rfdc_1;
var hasRequiredRfdc;
function requireRfdc() {
  if (hasRequiredRfdc) return rfdc_1;
  hasRequiredRfdc = 1;
  rfdc_1 = rfdc;
  function copyBuffer(cur) {
    if (cur instanceof Buffer) {
      return Buffer.from(cur);
    }
    return new cur.constructor(cur.buffer.slice(), cur.byteOffset, cur.length);
  }
  function rfdc(opts) {
    opts = opts || {};
    if (opts.circles) return rfdcCircles(opts);
    const constructorHandlers = /* @__PURE__ */ new Map();
    constructorHandlers.set(Date, (o2) => new Date(o2));
    constructorHandlers.set(Map, (o2, fn) => new Map(cloneArray(Array.from(o2), fn)));
    constructorHandlers.set(Set, (o2, fn) => new Set(cloneArray(Array.from(o2), fn)));
    if (opts.constructorHandlers) {
      for (const handler2 of opts.constructorHandlers) {
        constructorHandlers.set(handler2[0], handler2[1]);
      }
    }
    let handler = null;
    return opts.proto ? cloneProto : clone;
    function cloneArray(a, fn) {
      const keys = Object.keys(a);
      const a2 = new Array(keys.length);
      for (let i = 0; i < keys.length; i++) {
        const k2 = keys[i];
        const cur = a[k2];
        if (typeof cur !== "object" || cur === null) {
          a2[k2] = cur;
        } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {
          a2[k2] = handler(cur, fn);
        } else if (ArrayBuffer.isView(cur)) {
          a2[k2] = copyBuffer(cur);
        } else {
          a2[k2] = fn(cur);
        }
      }
      return a2;
    }
    function clone(o2) {
      if (typeof o2 !== "object" || o2 === null) return o2;
      if (Array.isArray(o2)) return cloneArray(o2, clone);
      if (o2.constructor !== Object && (handler = constructorHandlers.get(o2.constructor))) {
        return handler(o2, clone);
      }
      const o22 = {};
      for (const k2 in o2) {
        if (Object.hasOwnProperty.call(o2, k2) === false) continue;
        const cur = o2[k2];
        if (typeof cur !== "object" || cur === null) {
          o22[k2] = cur;
        } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {
          o22[k2] = handler(cur, clone);
        } else if (ArrayBuffer.isView(cur)) {
          o22[k2] = copyBuffer(cur);
        } else {
          o22[k2] = clone(cur);
        }
      }
      return o22;
    }
    function cloneProto(o2) {
      if (typeof o2 !== "object" || o2 === null) return o2;
      if (Array.isArray(o2)) return cloneArray(o2, cloneProto);
      if (o2.constructor !== Object && (handler = constructorHandlers.get(o2.constructor))) {
        return handler(o2, cloneProto);
      }
      const o22 = {};
      for (const k2 in o2) {
        const cur = o2[k2];
        if (typeof cur !== "object" || cur === null) {
          o22[k2] = cur;
        } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {
          o22[k2] = handler(cur, cloneProto);
        } else if (ArrayBuffer.isView(cur)) {
          o22[k2] = copyBuffer(cur);
        } else {
          o22[k2] = cloneProto(cur);
        }
      }
      return o22;
    }
  }
  function rfdcCircles(opts) {
    const refs = [];
    const refsNew = [];
    const constructorHandlers = /* @__PURE__ */ new Map();
    constructorHandlers.set(Date, (o2) => new Date(o2));
    constructorHandlers.set(Map, (o2, fn) => new Map(cloneArray(Array.from(o2), fn)));
    constructorHandlers.set(Set, (o2, fn) => new Set(cloneArray(Array.from(o2), fn)));
    if (opts.constructorHandlers) {
      for (const handler2 of opts.constructorHandlers) {
        constructorHandlers.set(handler2[0], handler2[1]);
      }
    }
    let handler = null;
    return opts.proto ? cloneProto : clone;
    function cloneArray(a, fn) {
      const keys = Object.keys(a);
      const a2 = new Array(keys.length);
      for (let i = 0; i < keys.length; i++) {
        const k2 = keys[i];
        const cur = a[k2];
        if (typeof cur !== "object" || cur === null) {
          a2[k2] = cur;
        } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {
          a2[k2] = handler(cur, fn);
        } else if (ArrayBuffer.isView(cur)) {
          a2[k2] = copyBuffer(cur);
        } else {
          const index = refs.indexOf(cur);
          if (index !== -1) {
            a2[k2] = refsNew[index];
          } else {
            a2[k2] = fn(cur);
          }
        }
      }
      return a2;
    }
    function clone(o2) {
      if (typeof o2 !== "object" || o2 === null) return o2;
      if (Array.isArray(o2)) return cloneArray(o2, clone);
      if (o2.constructor !== Object && (handler = constructorHandlers.get(o2.constructor))) {
        return handler(o2, clone);
      }
      const o22 = {};
      refs.push(o2);
      refsNew.push(o22);
      for (const k2 in o2) {
        if (Object.hasOwnProperty.call(o2, k2) === false) continue;
        const cur = o2[k2];
        if (typeof cur !== "object" || cur === null) {
          o22[k2] = cur;
        } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {
          o22[k2] = handler(cur, clone);
        } else if (ArrayBuffer.isView(cur)) {
          o22[k2] = copyBuffer(cur);
        } else {
          const i = refs.indexOf(cur);
          if (i !== -1) {
            o22[k2] = refsNew[i];
          } else {
            o22[k2] = clone(cur);
          }
        }
      }
      refs.pop();
      refsNew.pop();
      return o22;
    }
    function cloneProto(o2) {
      if (typeof o2 !== "object" || o2 === null) return o2;
      if (Array.isArray(o2)) return cloneArray(o2, cloneProto);
      if (o2.constructor !== Object && (handler = constructorHandlers.get(o2.constructor))) {
        return handler(o2, cloneProto);
      }
      const o22 = {};
      refs.push(o2);
      refsNew.push(o22);
      for (const k2 in o2) {
        const cur = o2[k2];
        if (typeof cur !== "object" || cur === null) {
          o22[k2] = cur;
        } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {
          o22[k2] = handler(cur, cloneProto);
        } else if (ArrayBuffer.isView(cur)) {
          o22[k2] = copyBuffer(cur);
        } else {
          const i = refs.indexOf(cur);
          if (i !== -1) {
            o22[k2] = refsNew[i];
          } else {
            o22[k2] = cloneProto(cur);
          }
        }
      }
      refs.pop();
      refsNew.pop();
      return o22;
    }
  }
  return rfdc_1;
}
var configuration;
var hasRequiredConfiguration;
function requireConfiguration() {
  if (hasRequiredConfiguration) return configuration;
  hasRequiredConfiguration = 1;
  const util = require$$1$2;
  const debug2 = requireBrowser()("log4js:configuration");
  const preProcessingListeners = [];
  const listeners = [];
  const not = (thing) => !thing;
  const anObject = (thing) => thing && typeof thing === "object" && !Array.isArray(thing);
  const validIdentifier = (thing) => /^[A-Za-z][A-Za-z0-9_]*$/g.test(thing);
  const anInteger = (thing) => thing && typeof thing === "number" && Number.isInteger(thing);
  const addListener = (fn) => {
    listeners.push(fn);
    debug2(`Added listener, now ${listeners.length} listeners`);
  };
  const addPreProcessingListener = (fn) => {
    preProcessingListeners.push(fn);
    debug2(
      `Added pre-processing listener, now ${preProcessingListeners.length} listeners`
    );
  };
  const throwExceptionIf = (config, checks, message) => {
    const tests = Array.isArray(checks) ? checks : [checks];
    tests.forEach((test) => {
      if (test) {
        throw new Error(
          `Problem with log4js configuration: (${util.inspect(config, {
            depth: 5
          })}) - ${message}`
        );
      }
    });
  };
  const configure = (candidate) => {
    debug2("New configuration to be validated: ", candidate);
    throwExceptionIf(candidate, not(anObject(candidate)), "must be an object.");
    debug2(`Calling pre-processing listeners (${preProcessingListeners.length})`);
    preProcessingListeners.forEach((listener) => listener(candidate));
    debug2("Configuration pre-processing finished.");
    debug2(`Calling configuration listeners (${listeners.length})`);
    listeners.forEach((listener) => listener(candidate));
    debug2("Configuration finished.");
  };
  configuration = {
    configure,
    addListener,
    addPreProcessingListener,
    throwExceptionIf,
    anObject,
    anInteger,
    validIdentifier,
    not
  };
  return configuration;
}
var lib$2 = { exports: {} };
var hasRequiredLib$2;
function requireLib$2() {
  if (hasRequiredLib$2) return lib$2.exports;
  hasRequiredLib$2 = 1;
  (function(module) {
    function padWithZeros(vNumber, width) {
      var numAsString = vNumber.toString();
      while (numAsString.length < width) {
        numAsString = "0" + numAsString;
      }
      return numAsString;
    }
    function addZero(vNumber) {
      return padWithZeros(vNumber, 2);
    }
    function offset(timezoneOffset) {
      var os = Math.abs(timezoneOffset);
      var h2 = String(Math.floor(os / 60));
      var m2 = String(os % 60);
      h2 = ("0" + h2).slice(-2);
      m2 = ("0" + m2).slice(-2);
      return timezoneOffset === 0 ? "Z" : (timezoneOffset < 0 ? "+" : "-") + h2 + ":" + m2;
    }
    function asString(format2, date) {
      if (typeof format2 !== "string") {
        date = format2;
        format2 = module.exports.ISO8601_FORMAT;
      }
      if (!date) {
        date = module.exports.now();
      }
      var vDay = addZero(date.getDate());
      var vMonth = addZero(date.getMonth() + 1);
      var vYearLong = addZero(date.getFullYear());
      var vYearShort = addZero(vYearLong.substring(2, 4));
      var vYear = format2.indexOf("yyyy") > -1 ? vYearLong : vYearShort;
      var vHour = addZero(date.getHours());
      var vMinute = addZero(date.getMinutes());
      var vSecond = addZero(date.getSeconds());
      var vMillisecond = padWithZeros(date.getMilliseconds(), 3);
      var vTimeZone = offset(date.getTimezoneOffset());
      var formatted = format2.replace(/dd/g, vDay).replace(/MM/g, vMonth).replace(/y{1,4}/g, vYear).replace(/hh/g, vHour).replace(/mm/g, vMinute).replace(/ss/g, vSecond).replace(/SSS/g, vMillisecond).replace(/O/g, vTimeZone);
      return formatted;
    }
    function setDatePart(date, part, value, local) {
      date["set" + (local ? "" : "UTC") + part](value);
    }
    function extractDateParts(pattern, str, missingValuesDate) {
      var local = pattern.indexOf("O") < 0;
      var monthOverflow = false;
      var matchers = [
        {
          pattern: /y{1,4}/,
          regexp: "\\d{1,4}",
          fn: function(date2, value) {
            setDatePart(date2, "FullYear", value, local);
          }
        },
        {
          pattern: /MM/,
          regexp: "\\d{1,2}",
          fn: function(date2, value) {
            setDatePart(date2, "Month", value - 1, local);
            if (date2.getMonth() !== value - 1) {
              monthOverflow = true;
            }
          }
        },
        {
          pattern: /dd/,
          regexp: "\\d{1,2}",
          fn: function(date2, value) {
            if (monthOverflow) {
              setDatePart(date2, "Month", date2.getMonth() - 1, local);
            }
            setDatePart(date2, "Date", value, local);
          }
        },
        {
          pattern: /hh/,
          regexp: "\\d{1,2}",
          fn: function(date2, value) {
            setDatePart(date2, "Hours", value, local);
          }
        },
        {
          pattern: /mm/,
          regexp: "\\d\\d",
          fn: function(date2, value) {
            setDatePart(date2, "Minutes", value, local);
          }
        },
        {
          pattern: /ss/,
          regexp: "\\d\\d",
          fn: function(date2, value) {
            setDatePart(date2, "Seconds", value, local);
          }
        },
        {
          pattern: /SSS/,
          regexp: "\\d\\d\\d",
          fn: function(date2, value) {
            setDatePart(date2, "Milliseconds", value, local);
          }
        },
        {
          pattern: /O/,
          regexp: "[+-]\\d{1,2}:?\\d{2}?|Z",
          fn: function(date2, value) {
            if (value === "Z") {
              value = 0;
            } else {
              value = value.replace(":", "");
            }
            var offset2 = Math.abs(value);
            var timezoneOffset = (value > 0 ? -1 : 1) * (offset2 % 100 + Math.floor(offset2 / 100) * 60);
            date2.setUTCMinutes(date2.getUTCMinutes() + timezoneOffset);
          }
        }
      ];
      var parsedPattern = matchers.reduce(
        function(p, m2) {
          if (m2.pattern.test(p.regexp)) {
            m2.index = p.regexp.match(m2.pattern).index;
            p.regexp = p.regexp.replace(m2.pattern, "(" + m2.regexp + ")");
          } else {
            m2.index = -1;
          }
          return p;
        },
        { regexp: pattern, index: [] }
      );
      var dateFns = matchers.filter(function(m2) {
        return m2.index > -1;
      });
      dateFns.sort(function(a, b) {
        return a.index - b.index;
      });
      var matcher = new RegExp(parsedPattern.regexp);
      var matches = matcher.exec(str);
      if (matches) {
        var date = missingValuesDate || module.exports.now();
        dateFns.forEach(function(f2, i) {
          f2.fn(date, matches[i + 1]);
        });
        return date;
      }
      throw new Error(
        "String '" + str + "' could not be parsed as '" + pattern + "'"
      );
    }
    function parse2(pattern, str, missingValuesDate) {
      if (!pattern) {
        throw new Error("pattern must be supplied");
      }
      return extractDateParts(pattern, str, missingValuesDate);
    }
    function now2() {
      return /* @__PURE__ */ new Date();
    }
    module.exports = asString;
    module.exports.asString = asString;
    module.exports.parse = parse2;
    module.exports.now = now2;
    module.exports.ISO8601_FORMAT = "yyyy-MM-ddThh:mm:ss.SSS";
    module.exports.ISO8601_WITH_TZ_OFFSET_FORMAT = "yyyy-MM-ddThh:mm:ss.SSSO";
    module.exports.DATETIME_FORMAT = "dd MM yyyy hh:mm:ss.SSS";
    module.exports.ABSOLUTETIME_FORMAT = "hh:mm:ss.SSS";
  })(lib$2);
  return lib$2.exports;
}
var layouts;
var hasRequiredLayouts;
function requireLayouts() {
  if (hasRequiredLayouts) return layouts;
  hasRequiredLayouts = 1;
  const dateFormat = requireLib$2();
  const os = require$$1$3;
  const util = require$$1$2;
  const path = require$$1$1;
  const url = require$$6;
  const debug2 = requireBrowser()("log4js:layouts");
  const styles = {
    // styles
    bold: [1, 22],
    italic: [3, 23],
    underline: [4, 24],
    inverse: [7, 27],
    // grayscale
    white: [37, 39],
    grey: [90, 39],
    black: [90, 39],
    // colors
    blue: [34, 39],
    cyan: [36, 39],
    green: [32, 39],
    magenta: [35, 39],
    red: [91, 39],
    yellow: [33, 39]
  };
  function colorizeStart(style) {
    return style ? `\x1B[${styles[style][0]}m` : "";
  }
  function colorizeEnd(style) {
    return style ? `\x1B[${styles[style][1]}m` : "";
  }
  function colorize(str, style) {
    return colorizeStart(style) + str + colorizeEnd(style);
  }
  function timestampLevelAndCategory(loggingEvent, colour) {
    return colorize(
      util.format(
        "[%s] [%s] %s - ",
        dateFormat.asString(loggingEvent.startTime),
        loggingEvent.level.toString(),
        loggingEvent.categoryName
      ),
      colour
    );
  }
  function basicLayout(loggingEvent) {
    return timestampLevelAndCategory(loggingEvent) + util.format(...loggingEvent.data);
  }
  function colouredLayout(loggingEvent) {
    return timestampLevelAndCategory(loggingEvent, loggingEvent.level.colour) + util.format(...loggingEvent.data);
  }
  function messagePassThroughLayout(loggingEvent) {
    return util.format(...loggingEvent.data);
  }
  function dummyLayout(loggingEvent) {
    return loggingEvent.data[0];
  }
  function patternLayout(pattern, tokens) {
    const TTCC_CONVERSION_PATTERN = "%r %p %c - %m%n";
    const regex = /%(-?[0-9]+)?(\.?-?[0-9]+)?([[\]cdhmnprzxXyflosCMAF%])(\{([^}]+)\})?|([^%]+)/;
    pattern = pattern || TTCC_CONVERSION_PATTERN;
    function categoryName(loggingEvent, specifier) {
      let loggerName = loggingEvent.categoryName;
      if (specifier) {
        const precision = parseInt(specifier, 10);
        const loggerNameBits = loggerName.split(".");
        if (precision < loggerNameBits.length) {
          loggerName = loggerNameBits.slice(loggerNameBits.length - precision).join(".");
        }
      }
      return loggerName;
    }
    function formatAsDate(loggingEvent, specifier) {
      let format2 = dateFormat.ISO8601_FORMAT;
      if (specifier) {
        format2 = specifier;
        switch (format2) {
          case "ISO8601":
          case "ISO8601_FORMAT":
            format2 = dateFormat.ISO8601_FORMAT;
            break;
          case "ISO8601_WITH_TZ_OFFSET":
          case "ISO8601_WITH_TZ_OFFSET_FORMAT":
            format2 = dateFormat.ISO8601_WITH_TZ_OFFSET_FORMAT;
            break;
          case "ABSOLUTE":
            process.emitWarning(
              "Pattern %d{ABSOLUTE} is deprecated in favor of %d{ABSOLUTETIME}. Please use %d{ABSOLUTETIME} instead.",
              "DeprecationWarning",
              "log4js-node-DEP0003"
            );
            debug2(
              "[log4js-node-DEP0003]",
              "DEPRECATION: Pattern %d{ABSOLUTE} is deprecated and replaced by %d{ABSOLUTETIME}."
            );
          // falls through
          case "ABSOLUTETIME":
          case "ABSOLUTETIME_FORMAT":
            format2 = dateFormat.ABSOLUTETIME_FORMAT;
            break;
          case "DATE":
            process.emitWarning(
              "Pattern %d{DATE} is deprecated due to the confusion it causes when used. Please use %d{DATETIME} instead.",
              "DeprecationWarning",
              "log4js-node-DEP0004"
            );
            debug2(
              "[log4js-node-DEP0004]",
              "DEPRECATION: Pattern %d{DATE} is deprecated and replaced by %d{DATETIME}."
            );
          // falls through
          case "DATETIME":
          case "DATETIME_FORMAT":
            format2 = dateFormat.DATETIME_FORMAT;
            break;
        }
      }
      return dateFormat.asString(format2, loggingEvent.startTime);
    }
    function hostname() {
      return os.hostname().toString();
    }
    function formatMessage(loggingEvent, specifier) {
      let dataSlice = loggingEvent.data;
      if (specifier) {
        const [lowerBound, upperBound] = specifier.split(",");
        dataSlice = dataSlice.slice(lowerBound, upperBound);
      }
      return util.format(...dataSlice);
    }
    function endOfLine() {
      return os.EOL;
    }
    function logLevel(loggingEvent) {
      return loggingEvent.level.toString();
    }
    function startTime(loggingEvent) {
      return dateFormat.asString("hh:mm:ss", loggingEvent.startTime);
    }
    function startColour(loggingEvent) {
      return colorizeStart(loggingEvent.level.colour);
    }
    function endColour(loggingEvent) {
      return colorizeEnd(loggingEvent.level.colour);
    }
    function percent() {
      return "%";
    }
    function pid(loggingEvent) {
      return loggingEvent && loggingEvent.pid ? loggingEvent.pid.toString() : process.pid.toString();
    }
    function clusterInfo() {
      return pid();
    }
    function userDefined(loggingEvent, specifier) {
      if (typeof tokens[specifier] !== "undefined") {
        return typeof tokens[specifier] === "function" ? tokens[specifier](loggingEvent) : tokens[specifier];
      }
      return null;
    }
    function contextDefined(loggingEvent, specifier) {
      const resolver = loggingEvent.context[specifier];
      if (typeof resolver !== "undefined") {
        return typeof resolver === "function" ? resolver(loggingEvent) : resolver;
      }
      return null;
    }
    function fileName(loggingEvent, specifier) {
      let filename = loggingEvent.fileName || "";
      const convertFileURLToPath = function(filepath) {
        const urlPrefix = "file://";
        if (filepath.startsWith(urlPrefix)) {
          if (typeof url.fileURLToPath === "function") {
            filepath = url.fileURLToPath(filepath);
          } else {
            filepath = path.normalize(
              filepath.replace(new RegExp(`^${urlPrefix}`), "")
            );
            if (process.platform === "win32") {
              if (filepath.startsWith("\\")) {
                filepath = filepath.slice(1);
              } else {
                filepath = path.sep + path.sep + filepath;
              }
            }
          }
        }
        return filepath;
      };
      filename = convertFileURLToPath(filename);
      if (specifier) {
        const fileDepth = parseInt(specifier, 10);
        const fileList = filename.split(path.sep);
        if (fileList.length > fileDepth) {
          filename = fileList.slice(-fileDepth).join(path.sep);
        }
      }
      return filename;
    }
    function lineNumber(loggingEvent) {
      return loggingEvent.lineNumber ? `${loggingEvent.lineNumber}` : "";
    }
    function columnNumber(loggingEvent) {
      return loggingEvent.columnNumber ? `${loggingEvent.columnNumber}` : "";
    }
    function callStack(loggingEvent) {
      return loggingEvent.callStack || "";
    }
    function className(loggingEvent) {
      return loggingEvent.className || "";
    }
    function functionName(loggingEvent) {
      return loggingEvent.functionName || "";
    }
    function functionAlias(loggingEvent) {
      return loggingEvent.functionAlias || "";
    }
    function callerName(loggingEvent) {
      return loggingEvent.callerName || "";
    }
    const replacers = {
      c: categoryName,
      d: formatAsDate,
      h: hostname,
      m: formatMessage,
      n: endOfLine,
      p: logLevel,
      r: startTime,
      "[": startColour,
      "]": endColour,
      y: clusterInfo,
      z: pid,
      "%": percent,
      x: userDefined,
      X: contextDefined,
      f: fileName,
      l: lineNumber,
      o: columnNumber,
      s: callStack,
      C: className,
      M: functionName,
      A: functionAlias,
      F: callerName
    };
    function replaceToken(conversionCharacter, loggingEvent, specifier) {
      return replacers[conversionCharacter](loggingEvent, specifier);
    }
    function truncate(truncation, toTruncate) {
      let len;
      if (truncation) {
        len = parseInt(truncation.slice(1), 10);
        return len > 0 ? toTruncate.slice(0, len) : toTruncate.slice(len);
      }
      return toTruncate;
    }
    function pad(padding, toPad) {
      let len;
      if (padding) {
        if (padding.charAt(0) === "-") {
          len = parseInt(padding.slice(1), 10);
          while (toPad.length < len) {
            toPad += " ";
          }
        } else {
          len = parseInt(padding, 10);
          while (toPad.length < len) {
            toPad = ` ${toPad}`;
          }
        }
      }
      return toPad;
    }
    function truncateAndPad(toTruncAndPad, truncation, padding) {
      let replacement = toTruncAndPad;
      replacement = truncate(truncation, replacement);
      replacement = pad(padding, replacement);
      return replacement;
    }
    return function(loggingEvent) {
      let formattedString = "";
      let result;
      let searchString = pattern;
      while ((result = regex.exec(searchString)) !== null) {
        const padding = result[1];
        const truncation = result[2];
        const conversionCharacter = result[3];
        const specifier = result[5];
        const text = result[6];
        if (text) {
          formattedString += text.toString();
        } else {
          const replacement = replaceToken(
            conversionCharacter,
            loggingEvent,
            specifier
          );
          formattedString += truncateAndPad(replacement, truncation, padding);
        }
        searchString = searchString.slice(result.index + result[0].length);
      }
      return formattedString;
    };
  }
  const layoutMakers = {
    messagePassThrough() {
      return messagePassThroughLayout;
    },
    basic() {
      return basicLayout;
    },
    colored() {
      return colouredLayout;
    },
    coloured() {
      return colouredLayout;
    },
    pattern(config) {
      return patternLayout(config && config.pattern, config && config.tokens);
    },
    dummy() {
      return dummyLayout;
    }
  };
  layouts = {
    basicLayout,
    messagePassThroughLayout,
    patternLayout,
    colouredLayout,
    coloredLayout: colouredLayout,
    dummyLayout,
    addLayout(name, serializerGenerator) {
      layoutMakers[name] = serializerGenerator;
    },
    layout(name, config) {
      return layoutMakers[name] && layoutMakers[name](config);
    }
  };
  return layouts;
}
var levels;
var hasRequiredLevels;
function requireLevels() {
  if (hasRequiredLevels) return levels;
  hasRequiredLevels = 1;
  const configuration2 = requireConfiguration();
  const validColours = [
    "white",
    "grey",
    "black",
    "blue",
    "cyan",
    "green",
    "magenta",
    "red",
    "yellow"
  ];
  class Level {
    constructor(level, levelStr, colour) {
      this.level = level;
      this.levelStr = levelStr;
      this.colour = colour;
    }
    toString() {
      return this.levelStr;
    }
    /**
     * converts given String to corresponding Level
     * @param {(Level|string)} sArg -- String value of Level OR Log4js.Level
     * @param {Level} [defaultLevel] -- default Level, if no String representation
     * @return {Level}
     */
    static getLevel(sArg, defaultLevel) {
      if (!sArg) {
        return defaultLevel;
      }
      if (sArg instanceof Level) {
        return sArg;
      }
      if (sArg instanceof Object && sArg.levelStr) {
        sArg = sArg.levelStr;
      }
      return Level[sArg.toString().toUpperCase()] || defaultLevel;
    }
    static addLevels(customLevels) {
      if (customLevels) {
        const levels2 = Object.keys(customLevels);
        levels2.forEach((l) => {
          const levelStr = l.toUpperCase();
          Level[levelStr] = new Level(
            customLevels[l].value,
            levelStr,
            customLevels[l].colour
          );
          const existingLevelIndex = Level.levels.findIndex(
            (lvl) => lvl.levelStr === levelStr
          );
          if (existingLevelIndex > -1) {
            Level.levels[existingLevelIndex] = Level[levelStr];
          } else {
            Level.levels.push(Level[levelStr]);
          }
        });
        Level.levels.sort((a, b) => a.level - b.level);
      }
    }
    isLessThanOrEqualTo(otherLevel) {
      if (typeof otherLevel === "string") {
        otherLevel = Level.getLevel(otherLevel);
      }
      return this.level <= otherLevel.level;
    }
    isGreaterThanOrEqualTo(otherLevel) {
      if (typeof otherLevel === "string") {
        otherLevel = Level.getLevel(otherLevel);
      }
      return this.level >= otherLevel.level;
    }
    isEqualTo(otherLevel) {
      if (typeof otherLevel === "string") {
        otherLevel = Level.getLevel(otherLevel);
      }
      return this.level === otherLevel.level;
    }
  }
  Level.levels = [];
  Level.addLevels({
    ALL: { value: Number.MIN_VALUE, colour: "grey" },
    TRACE: { value: 5e3, colour: "blue" },
    DEBUG: { value: 1e4, colour: "cyan" },
    INFO: { value: 2e4, colour: "green" },
    WARN: { value: 3e4, colour: "yellow" },
    ERROR: { value: 4e4, colour: "red" },
    FATAL: { value: 5e4, colour: "magenta" },
    MARK: { value: 9007199254740992, colour: "grey" },
    // 2^53
    OFF: { value: Number.MAX_VALUE, colour: "grey" }
  });
  configuration2.addListener((config) => {
    const levelConfig = config.levels;
    if (levelConfig) {
      configuration2.throwExceptionIf(
        config,
        configuration2.not(configuration2.anObject(levelConfig)),
        "levels must be an object"
      );
      const newLevels = Object.keys(levelConfig);
      newLevels.forEach((l) => {
        configuration2.throwExceptionIf(
          config,
          configuration2.not(configuration2.validIdentifier(l)),
          `level name "${l}" is not a valid identifier (must start with a letter, only contain A-Z,a-z,0-9,_)`
        );
        configuration2.throwExceptionIf(
          config,
          configuration2.not(configuration2.anObject(levelConfig[l])),
          `level "${l}" must be an object`
        );
        configuration2.throwExceptionIf(
          config,
          configuration2.not(levelConfig[l].value),
          `level "${l}" must have a 'value' property`
        );
        configuration2.throwExceptionIf(
          config,
          configuration2.not(configuration2.anInteger(levelConfig[l].value)),
          `level "${l}".value must have an integer value`
        );
        configuration2.throwExceptionIf(
          config,
          configuration2.not(levelConfig[l].colour),
          `level "${l}" must have a 'colour' property`
        );
        configuration2.throwExceptionIf(
          config,
          configuration2.not(validColours.indexOf(levelConfig[l].colour) > -1),
          `level "${l}".colour must be one of ${validColours.join(", ")}`
        );
      });
    }
  });
  configuration2.addListener((config) => {
    Level.addLevels(config.levels);
  });
  levels = Level;
  return levels;
}
var appenders = { exports: {} };
var cjs = {};
var hasRequiredCjs;
function requireCjs() {
  if (hasRequiredCjs) return cjs;
  hasRequiredCjs = 1;
  const { parse: $parse, stringify: $stringify } = JSON;
  const { keys } = Object;
  const Primitive = String;
  const primitive = "string";
  const ignore = {};
  const object = "object";
  const noop = (_2, value) => value;
  const primitives = (value) => value instanceof Primitive ? Primitive(value) : value;
  const Primitives = (_2, value) => typeof value === primitive ? new Primitive(value) : value;
  const revive = (input2, parsed, output2, $) => {
    const lazy = [];
    for (let ke = keys(output2), { length } = ke, y2 = 0; y2 < length; y2++) {
      const k2 = ke[y2];
      const value = output2[k2];
      if (value instanceof Primitive) {
        const tmp = input2[value];
        if (typeof tmp === object && !parsed.has(tmp)) {
          parsed.add(tmp);
          output2[k2] = ignore;
          lazy.push({ k: k2, a: [input2, parsed, tmp, $] });
        } else
          output2[k2] = $.call(output2, k2, tmp);
      } else if (output2[k2] !== ignore)
        output2[k2] = $.call(output2, k2, value);
    }
    for (let { length } = lazy, i = 0; i < length; i++) {
      const { k: k2, a } = lazy[i];
      output2[k2] = $.call(output2, k2, revive.apply(null, a));
    }
    return output2;
  };
  const set = (known, input2, value) => {
    const index = Primitive(input2.push(value) - 1);
    known.set(value, index);
    return index;
  };
  const parse2 = (text, reviver) => {
    const input2 = $parse(text, Primitives).map(primitives);
    const value = input2[0];
    const $ = reviver || noop;
    const tmp = typeof value === object && value ? revive(input2, /* @__PURE__ */ new Set(), value, $) : value;
    return $.call({ "": tmp }, "", tmp);
  };
  cjs.parse = parse2;
  const stringify = (value, replacer, space) => {
    const $ = replacer && typeof replacer === object ? (k2, v2) => k2 === "" || -1 < replacer.indexOf(k2) ? v2 : void 0 : replacer || noop;
    const known = /* @__PURE__ */ new Map();
    const input2 = [];
    const output2 = [];
    let i = +set(known, input2, $.call({ "": value }, "", value));
    let firstRun = !i;
    while (i < input2.length) {
      firstRun = true;
      output2[i] = $stringify(input2[i++], replace, space);
    }
    return "[" + output2.join(",") + "]";
    function replace(key, value2) {
      if (firstRun) {
        firstRun = !firstRun;
        return value2;
      }
      const after = $.call(this, key, value2);
      switch (typeof after) {
        case object:
          if (after === null) return after;
        case primitive:
          return known.get(after) || set(known, input2, after);
      }
      return after;
    }
  };
  cjs.stringify = stringify;
  const toJSON = (value) => $parse(stringify(value));
  cjs.toJSON = toJSON;
  const fromJSON = (value) => parse2($stringify(value));
  cjs.fromJSON = fromJSON;
  return cjs;
}
var LoggingEvent_1;
var hasRequiredLoggingEvent;
function requireLoggingEvent() {
  if (hasRequiredLoggingEvent) return LoggingEvent_1;
  hasRequiredLoggingEvent = 1;
  const flatted = requireCjs();
  const levels2 = requireLevels();
  class SerDe {
    constructor() {
      const deserialise = {
        __LOG4JS_undefined__: void 0,
        __LOG4JS_NaN__: Number("abc"),
        __LOG4JS_Infinity__: 1 / 0,
        "__LOG4JS_-Infinity__": -1 / 0
      };
      this.deMap = deserialise;
      this.serMap = {};
      Object.keys(this.deMap).forEach((key) => {
        const value = this.deMap[key];
        this.serMap[value] = key;
      });
    }
    canSerialise(key) {
      if (typeof key === "string") return false;
      return key in this.serMap;
    }
    serialise(key) {
      if (this.canSerialise(key)) return this.serMap[key];
      return key;
    }
    canDeserialise(key) {
      return key in this.deMap;
    }
    deserialise(key) {
      if (this.canDeserialise(key)) return this.deMap[key];
      return key;
    }
  }
  const serde = new SerDe();
  class LoggingEvent {
    /**
     * Models a logging event.
     * @constructor
     * @param {string} categoryName name of category
     * @param {Log4js.Level} level level of message
     * @param {Array} data objects to log
     * @param {Error} [error]
     * @author Seth Chisamore
     */
    constructor(categoryName, level, data, context, location2, error) {
      this.startTime = /* @__PURE__ */ new Date();
      this.categoryName = categoryName;
      this.data = data;
      this.level = level;
      this.context = Object.assign({}, context);
      this.pid = process.pid;
      this.error = error;
      if (typeof location2 !== "undefined") {
        if (!location2 || typeof location2 !== "object" || Array.isArray(location2))
          throw new TypeError(
            "Invalid location type passed to LoggingEvent constructor"
          );
        this.constructor._getLocationKeys().forEach((key) => {
          if (typeof location2[key] !== "undefined") this[key] = location2[key];
        });
      }
    }
    /** @private */
    static _getLocationKeys() {
      return [
        "fileName",
        "lineNumber",
        "columnNumber",
        "callStack",
        "className",
        "functionName",
        "functionAlias",
        "callerName"
      ];
    }
    serialise() {
      return flatted.stringify(this, (key, value) => {
        if (value instanceof Error) {
          value = Object.assign(
            { message: value.message, stack: value.stack },
            value
          );
        }
        return serde.serialise(value);
      });
    }
    static deserialise(serialised) {
      let event;
      try {
        const rehydratedEvent = flatted.parse(serialised, (key, value) => {
          if (value && value.message && value.stack) {
            const fakeError = new Error(value);
            Object.keys(value).forEach((k2) => {
              fakeError[k2] = value[k2];
            });
            value = fakeError;
          }
          return serde.deserialise(value);
        });
        this._getLocationKeys().forEach((key) => {
          if (typeof rehydratedEvent[key] !== "undefined") {
            if (!rehydratedEvent.location) rehydratedEvent.location = {};
            rehydratedEvent.location[key] = rehydratedEvent[key];
          }
        });
        event = new LoggingEvent(
          rehydratedEvent.categoryName,
          levels2.getLevel(rehydratedEvent.level.levelStr),
          rehydratedEvent.data,
          rehydratedEvent.context,
          rehydratedEvent.location,
          rehydratedEvent.error
        );
        event.startTime = new Date(rehydratedEvent.startTime);
        event.pid = rehydratedEvent.pid;
        if (rehydratedEvent.cluster) {
          event.cluster = rehydratedEvent.cluster;
        }
      } catch (e2) {
        event = new LoggingEvent("log4js", levels2.ERROR, [
          "Unable to parse log:",
          serialised,
          "because: ",
          e2
        ]);
      }
      return event;
    }
  }
  LoggingEvent_1 = LoggingEvent;
  return LoggingEvent_1;
}
var clustering;
var hasRequiredClustering;
function requireClustering() {
  if (hasRequiredClustering) return clustering;
  hasRequiredClustering = 1;
  const debug2 = requireBrowser()("log4js:clustering");
  const LoggingEvent = requireLoggingEvent();
  const configuration2 = requireConfiguration();
  let disabled = false;
  let cluster = null;
  try {
    cluster = require("cluster");
  } catch (e2) {
    debug2("cluster module not present");
    disabled = true;
  }
  const listeners = [];
  let pm2 = false;
  let pm2InstanceVar = "NODE_APP_INSTANCE";
  const isPM2Master = () => pm2 && process.env[pm2InstanceVar] === "0";
  const isMaster = () => disabled || cluster && cluster.isMaster || isPM2Master();
  const sendToListeners = (logEvent) => {
    listeners.forEach((l) => l(logEvent));
  };
  const receiver = (worker2, message) => {
    debug2("cluster message received from worker ", worker2, ": ", message);
    if (worker2.topic && worker2.data) {
      message = worker2;
      worker2 = void 0;
    }
    if (message && message.topic && message.topic === "log4js:message") {
      debug2("received message: ", message.data);
      const logEvent = LoggingEvent.deserialise(message.data);
      sendToListeners(logEvent);
    }
  };
  if (!disabled) {
    configuration2.addListener((config) => {
      listeners.length = 0;
      ({
        pm2,
        disableClustering: disabled,
        pm2InstanceVar = "NODE_APP_INSTANCE"
      } = config);
      debug2(`clustering disabled ? ${disabled}`);
      debug2(`cluster.isMaster ? ${cluster && cluster.isMaster}`);
      debug2(`pm2 enabled ? ${pm2}`);
      debug2(`pm2InstanceVar = ${pm2InstanceVar}`);
      debug2(`process.env[${pm2InstanceVar}] = ${process.env[pm2InstanceVar]}`);
      if (pm2) {
        process.removeListener("message", receiver);
      }
      if (cluster && cluster.removeListener) {
        cluster.removeListener("message", receiver);
      }
      if (disabled || config.disableClustering) {
        debug2("Not listening for cluster messages, because clustering disabled.");
      } else if (isPM2Master()) {
        debug2("listening for PM2 broadcast messages");
        process.on("message", receiver);
      } else if (cluster && cluster.isMaster) {
        debug2("listening for cluster messages");
        cluster.on("message", receiver);
      } else {
        debug2("not listening for messages, because we are not a master process");
      }
    });
  }
  clustering = {
    onlyOnMaster: (fn, notMaster) => isMaster() ? fn() : notMaster,
    isMaster,
    send: (msg) => {
      if (isMaster()) {
        sendToListeners(msg);
      } else {
        if (!pm2) {
          msg.cluster = {
            workerId: cluster.worker.id,
            worker: process.pid
          };
        }
        process.send({ topic: "log4js:message", data: msg.serialise() });
      }
    },
    onMessage: (listener) => {
      listeners.push(listener);
    }
  };
  return clustering;
}
var adapters = {};
var hasRequiredAdapters;
function requireAdapters() {
  if (hasRequiredAdapters) return adapters;
  hasRequiredAdapters = 1;
  function maxFileSizeUnitTransform(maxLogSize) {
    if (typeof maxLogSize === "number" && Number.isInteger(maxLogSize)) {
      return maxLogSize;
    }
    const units = {
      K: 1024,
      M: 1024 * 1024,
      G: 1024 * 1024 * 1024
    };
    const validUnit = Object.keys(units);
    const unit = maxLogSize.slice(-1).toLocaleUpperCase();
    const value = maxLogSize.slice(0, -1).trim();
    if (validUnit.indexOf(unit) < 0 || !Number.isInteger(Number(value))) {
      throw Error(`maxLogSize: "${maxLogSize}" is invalid`);
    } else {
      return value * units[unit];
    }
  }
  function adapter(configAdapter, config) {
    const newConfig = Object.assign({}, config);
    Object.keys(configAdapter).forEach((key) => {
      if (newConfig[key]) {
        newConfig[key] = configAdapter[key](config[key]);
      }
    });
    return newConfig;
  }
  function fileAppenderAdapter(config) {
    const configAdapter = {
      maxLogSize: maxFileSizeUnitTransform
    };
    return adapter(configAdapter, config);
  }
  const adapters$1 = {
    dateFile: fileAppenderAdapter,
    file: fileAppenderAdapter,
    fileSync: fileAppenderAdapter
  };
  adapters.modifyConfig = (config) => adapters$1[config.type] ? adapters$1[config.type](config) : config;
  return adapters;
}
var console$1 = {};
var hasRequiredConsole;
function requireConsole() {
  if (hasRequiredConsole) return console$1;
  hasRequiredConsole = 1;
  const consoleLog = console.log.bind(console);
  function consoleAppender(layout, timezoneOffset) {
    return (loggingEvent) => {
      consoleLog(layout(loggingEvent, timezoneOffset));
    };
  }
  function configure(config, layouts2) {
    let layout = layouts2.colouredLayout;
    if (config.layout) {
      layout = layouts2.layout(config.layout.type, config.layout);
    }
    return consoleAppender(layout, config.timezoneOffset);
  }
  console$1.configure = configure;
  return console$1;
}
var stdout = {};
var hasRequiredStdout;
function requireStdout() {
  if (hasRequiredStdout) return stdout;
  hasRequiredStdout = 1;
  function stdoutAppender(layout, timezoneOffset) {
    return (loggingEvent) => {
      process.stdout.write(`${layout(loggingEvent, timezoneOffset)}
`);
    };
  }
  function configure(config, layouts2) {
    let layout = layouts2.colouredLayout;
    if (config.layout) {
      layout = layouts2.layout(config.layout.type, config.layout);
    }
    return stdoutAppender(layout, config.timezoneOffset);
  }
  stdout.configure = configure;
  return stdout;
}
var stderr = {};
var hasRequiredStderr;
function requireStderr() {
  if (hasRequiredStderr) return stderr;
  hasRequiredStderr = 1;
  function stderrAppender(layout, timezoneOffset) {
    return (loggingEvent) => {
      process.stderr.write(`${layout(loggingEvent, timezoneOffset)}
`);
    };
  }
  function configure(config, layouts2) {
    let layout = layouts2.colouredLayout;
    if (config.layout) {
      layout = layouts2.layout(config.layout.type, config.layout);
    }
    return stderrAppender(layout, config.timezoneOffset);
  }
  stderr.configure = configure;
  return stderr;
}
var logLevelFilter = {};
var hasRequiredLogLevelFilter;
function requireLogLevelFilter() {
  if (hasRequiredLogLevelFilter) return logLevelFilter;
  hasRequiredLogLevelFilter = 1;
  function logLevelFilter$1(minLevelString, maxLevelString, appender, levels2) {
    const minLevel = levels2.getLevel(minLevelString);
    const maxLevel = levels2.getLevel(maxLevelString, levels2.FATAL);
    return (logEvent) => {
      const eventLevel = logEvent.level;
      if (minLevel.isLessThanOrEqualTo(eventLevel) && maxLevel.isGreaterThanOrEqualTo(eventLevel)) {
        appender(logEvent);
      }
    };
  }
  function configure(config, layouts2, findAppender, levels2) {
    const appender = findAppender(config.appender);
    return logLevelFilter$1(config.level, config.maxLevel, appender, levels2);
  }
  logLevelFilter.configure = configure;
  return logLevelFilter;
}
var categoryFilter = {};
var hasRequiredCategoryFilter;
function requireCategoryFilter() {
  if (hasRequiredCategoryFilter) return categoryFilter;
  hasRequiredCategoryFilter = 1;
  const debug2 = requireBrowser()("log4js:categoryFilter");
  function categoryFilter$1(excludes, appender) {
    if (typeof excludes === "string") excludes = [excludes];
    return (logEvent) => {
      debug2(`Checking ${logEvent.categoryName} against ${excludes}`);
      if (excludes.indexOf(logEvent.categoryName) === -1) {
        debug2("Not excluded, sending to appender");
        appender(logEvent);
      }
    };
  }
  function configure(config, layouts2, findAppender) {
    const appender = findAppender(config.appender);
    return categoryFilter$1(config.exclude, appender);
  }
  categoryFilter.configure = configure;
  return categoryFilter;
}
var noLogFilter = {};
var hasRequiredNoLogFilter;
function requireNoLogFilter() {
  if (hasRequiredNoLogFilter) return noLogFilter;
  hasRequiredNoLogFilter = 1;
  const debug2 = requireBrowser()("log4js:noLogFilter");
  function removeNullOrEmptyRegexp(regexp) {
    const filtered = regexp.filter((el) => el != null && el !== "");
    return filtered;
  }
  function noLogFilter$1(filters, appender) {
    return (logEvent) => {
      debug2(`Checking data: ${logEvent.data} against filters: ${filters}`);
      if (typeof filters === "string") {
        filters = [filters];
      }
      filters = removeNullOrEmptyRegexp(filters);
      const regex = new RegExp(filters.join("|"), "i");
      if (filters.length === 0 || logEvent.data.findIndex((value) => regex.test(value)) < 0) {
        debug2("Not excluded, sending to appender");
        appender(logEvent);
      }
    };
  }
  function configure(config, layouts2, findAppender) {
    const appender = findAppender(config.appender);
    return noLogFilter$1(config.exclude, appender);
  }
  noLogFilter.configure = configure;
  return noLogFilter;
}
var file$1 = {};
var lib$1 = { exports: {} };
var fs = {};
var universalify = {};
var hasRequiredUniversalify;
function requireUniversalify() {
  if (hasRequiredUniversalify) return universalify;
  hasRequiredUniversalify = 1;
  universalify.fromCallback = function(fn) {
    return Object.defineProperty(function() {
      if (typeof arguments[arguments.length - 1] === "function") fn.apply(this, arguments);
      else {
        return new Promise((resolve2, reject) => {
          arguments[arguments.length] = (err, res) => {
            if (err) return reject(err);
            resolve2(res);
          };
          arguments.length++;
          fn.apply(this, arguments);
        });
      }
    }, "name", { value: fn.name });
  };
  universalify.fromPromise = function(fn) {
    return Object.defineProperty(function() {
      const cb = arguments[arguments.length - 1];
      if (typeof cb !== "function") return fn.apply(this, arguments);
      else fn.apply(this, arguments).then((r2) => cb(null, r2), cb);
    }, "name", { value: fn.name });
  };
  return universalify;
}
var polyfills;
var hasRequiredPolyfills;
function requirePolyfills() {
  if (hasRequiredPolyfills) return polyfills;
  hasRequiredPolyfills = 1;
  var constants = require$$20;
  var origCwd = process.cwd;
  var cwd2 = null;
  var platform2 = process.env.GRACEFUL_FS_PLATFORM || process.platform;
  process.cwd = function() {
    if (!cwd2)
      cwd2 = origCwd.call(process);
    return cwd2;
  };
  try {
    process.cwd();
  } catch (er) {
  }
  if (typeof process.chdir === "function") {
    var chdir = process.chdir;
    process.chdir = function(d2) {
      cwd2 = null;
      chdir.call(process, d2);
    };
    if (Object.setPrototypeOf) Object.setPrototypeOf(process.chdir, chdir);
  }
  polyfills = patch;
  function patch(fs2) {
    if (constants.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
      patchLchmod(fs2);
    }
    if (!fs2.lutimes) {
      patchLutimes(fs2);
    }
    fs2.chown = chownFix(fs2.chown);
    fs2.fchown = chownFix(fs2.fchown);
    fs2.lchown = chownFix(fs2.lchown);
    fs2.chmod = chmodFix(fs2.chmod);
    fs2.fchmod = chmodFix(fs2.fchmod);
    fs2.lchmod = chmodFix(fs2.lchmod);
    fs2.chownSync = chownFixSync(fs2.chownSync);
    fs2.fchownSync = chownFixSync(fs2.fchownSync);
    fs2.lchownSync = chownFixSync(fs2.lchownSync);
    fs2.chmodSync = chmodFixSync(fs2.chmodSync);
    fs2.fchmodSync = chmodFixSync(fs2.fchmodSync);
    fs2.lchmodSync = chmodFixSync(fs2.lchmodSync);
    fs2.stat = statFix(fs2.stat);
    fs2.fstat = statFix(fs2.fstat);
    fs2.lstat = statFix(fs2.lstat);
    fs2.statSync = statFixSync(fs2.statSync);
    fs2.fstatSync = statFixSync(fs2.fstatSync);
    fs2.lstatSync = statFixSync(fs2.lstatSync);
    if (fs2.chmod && !fs2.lchmod) {
      fs2.lchmod = function(path, mode, cb) {
        if (cb) process.nextTick(cb);
      };
      fs2.lchmodSync = function() {
      };
    }
    if (fs2.chown && !fs2.lchown) {
      fs2.lchown = function(path, uid, gid, cb) {
        if (cb) process.nextTick(cb);
      };
      fs2.lchownSync = function() {
      };
    }
    if (platform2 === "win32") {
      fs2.rename = typeof fs2.rename !== "function" ? fs2.rename : function(fs$rename) {
        function rename(from, to, cb) {
          var start = Date.now();
          var backoff = 0;
          fs$rename(from, to, function CB(er) {
            if (er && (er.code === "EACCES" || er.code === "EPERM" || er.code === "EBUSY") && Date.now() - start < 6e4) {
              setTimeout(function() {
                fs2.stat(to, function(stater, st) {
                  if (stater && stater.code === "ENOENT")
                    fs$rename(from, to, CB);
                  else
                    cb(er);
                });
              }, backoff);
              if (backoff < 100)
                backoff += 10;
              return;
            }
            if (cb) cb(er);
          });
        }
        if (Object.setPrototypeOf) Object.setPrototypeOf(rename, fs$rename);
        return rename;
      }(fs2.rename);
    }
    fs2.read = typeof fs2.read !== "function" ? fs2.read : function(fs$read) {
      function read(fd, buffer2, offset, length, position, callback_) {
        var callback;
        if (callback_ && typeof callback_ === "function") {
          var eagCounter = 0;
          callback = function(er, _2, __) {
            if (er && er.code === "EAGAIN" && eagCounter < 10) {
              eagCounter++;
              return fs$read.call(fs2, fd, buffer2, offset, length, position, callback);
            }
            callback_.apply(this, arguments);
          };
        }
        return fs$read.call(fs2, fd, buffer2, offset, length, position, callback);
      }
      if (Object.setPrototypeOf) Object.setPrototypeOf(read, fs$read);
      return read;
    }(fs2.read);
    fs2.readSync = typeof fs2.readSync !== "function" ? fs2.readSync : /* @__PURE__ */ function(fs$readSync) {
      return function(fd, buffer2, offset, length, position) {
        var eagCounter = 0;
        while (true) {
          try {
            return fs$readSync.call(fs2, fd, buffer2, offset, length, position);
          } catch (er) {
            if (er.code === "EAGAIN" && eagCounter < 10) {
              eagCounter++;
              continue;
            }
            throw er;
          }
        }
      };
    }(fs2.readSync);
    function patchLchmod(fs3) {
      fs3.lchmod = function(path, mode, callback) {
        fs3.open(
          path,
          constants.O_WRONLY | constants.O_SYMLINK,
          mode,
          function(err, fd) {
            if (err) {
              if (callback) callback(err);
              return;
            }
            fs3.fchmod(fd, mode, function(err2) {
              fs3.close(fd, function(err22) {
                if (callback) callback(err2 || err22);
              });
            });
          }
        );
      };
      fs3.lchmodSync = function(path, mode) {
        var fd = fs3.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode);
        var threw = true;
        var ret;
        try {
          ret = fs3.fchmodSync(fd, mode);
          threw = false;
        } finally {
          if (threw) {
            try {
              fs3.closeSync(fd);
            } catch (er) {
            }
          } else {
            fs3.closeSync(fd);
          }
        }
        return ret;
      };
    }
    function patchLutimes(fs3) {
      if (constants.hasOwnProperty("O_SYMLINK") && fs3.futimes) {
        fs3.lutimes = function(path, at, mt, cb) {
          fs3.open(path, constants.O_SYMLINK, function(er, fd) {
            if (er) {
              if (cb) cb(er);
              return;
            }
            fs3.futimes(fd, at, mt, function(er2) {
              fs3.close(fd, function(er22) {
                if (cb) cb(er2 || er22);
              });
            });
          });
        };
        fs3.lutimesSync = function(path, at, mt) {
          var fd = fs3.openSync(path, constants.O_SYMLINK);
          var ret;
          var threw = true;
          try {
            ret = fs3.futimesSync(fd, at, mt);
            threw = false;
          } finally {
            if (threw) {
              try {
                fs3.closeSync(fd);
              } catch (er) {
              }
            } else {
              fs3.closeSync(fd);
            }
          }
          return ret;
        };
      } else if (fs3.futimes) {
        fs3.lutimes = function(_a, _b, _c, cb) {
          if (cb) process.nextTick(cb);
        };
        fs3.lutimesSync = function() {
        };
      }
    }
    function chmodFix(orig) {
      if (!orig) return orig;
      return function(target, mode, cb) {
        return orig.call(fs2, target, mode, function(er) {
          if (chownErOk(er)) er = null;
          if (cb) cb.apply(this, arguments);
        });
      };
    }
    function chmodFixSync(orig) {
      if (!orig) return orig;
      return function(target, mode) {
        try {
          return orig.call(fs2, target, mode);
        } catch (er) {
          if (!chownErOk(er)) throw er;
        }
      };
    }
    function chownFix(orig) {
      if (!orig) return orig;
      return function(target, uid, gid, cb) {
        return orig.call(fs2, target, uid, gid, function(er) {
          if (chownErOk(er)) er = null;
          if (cb) cb.apply(this, arguments);
        });
      };
    }
    function chownFixSync(orig) {
      if (!orig) return orig;
      return function(target, uid, gid) {
        try {
          return orig.call(fs2, target, uid, gid);
        } catch (er) {
          if (!chownErOk(er)) throw er;
        }
      };
    }
    function statFix(orig) {
      if (!orig) return orig;
      return function(target, options, cb) {
        if (typeof options === "function") {
          cb = options;
          options = null;
        }
        function callback(er, stats2) {
          if (stats2) {
            if (stats2.uid < 0) stats2.uid += 4294967296;
            if (stats2.gid < 0) stats2.gid += 4294967296;
          }
          if (cb) cb.apply(this, arguments);
        }
        return options ? orig.call(fs2, target, options, callback) : orig.call(fs2, target, callback);
      };
    }
    function statFixSync(orig) {
      if (!orig) return orig;
      return function(target, options) {
        var stats2 = options ? orig.call(fs2, target, options) : orig.call(fs2, target);
        if (stats2) {
          if (stats2.uid < 0) stats2.uid += 4294967296;
          if (stats2.gid < 0) stats2.gid += 4294967296;
        }
        return stats2;
      };
    }
    function chownErOk(er) {
      if (!er)
        return true;
      if (er.code === "ENOSYS")
        return true;
      var nonroot = !process.getuid || process.getuid() !== 0;
      if (nonroot) {
        if (er.code === "EINVAL" || er.code === "EPERM")
          return true;
      }
      return false;
    }
  }
  return polyfills;
}
var legacyStreams;
var hasRequiredLegacyStreams;
function requireLegacyStreams() {
  if (hasRequiredLegacyStreams) return legacyStreams;
  hasRequiredLegacyStreams = 1;
  var Stream = require$$12.Stream;
  legacyStreams = legacy;
  function legacy(fs2) {
    return {
      ReadStream,
      WriteStream: WriteStream2
    };
    function ReadStream(path, options) {
      if (!(this instanceof ReadStream)) return new ReadStream(path, options);
      Stream.call(this);
      var self2 = this;
      this.path = path;
      this.fd = null;
      this.readable = true;
      this.paused = false;
      this.flags = "r";
      this.mode = 438;
      this.bufferSize = 64 * 1024;
      options = options || {};
      var keys = Object.keys(options);
      for (var index = 0, length = keys.length; index < length; index++) {
        var key = keys[index];
        this[key] = options[key];
      }
      if (this.encoding) this.setEncoding(this.encoding);
      if (this.start !== void 0) {
        if ("number" !== typeof this.start) {
          throw TypeError("start must be a Number");
        }
        if (this.end === void 0) {
          this.end = Infinity;
        } else if ("number" !== typeof this.end) {
          throw TypeError("end must be a Number");
        }
        if (this.start > this.end) {
          throw new Error("start must be <= end");
        }
        this.pos = this.start;
      }
      if (this.fd !== null) {
        process.nextTick(function() {
          self2._read();
        });
        return;
      }
      fs2.open(this.path, this.flags, this.mode, function(err, fd) {
        if (err) {
          self2.emit("error", err);
          self2.readable = false;
          return;
        }
        self2.fd = fd;
        self2.emit("open", fd);
        self2._read();
      });
    }
    function WriteStream2(path, options) {
      if (!(this instanceof WriteStream2)) return new WriteStream2(path, options);
      Stream.call(this);
      this.path = path;
      this.fd = null;
      this.writable = true;
      this.flags = "w";
      this.encoding = "binary";
      this.mode = 438;
      this.bytesWritten = 0;
      options = options || {};
      var keys = Object.keys(options);
      for (var index = 0, length = keys.length; index < length; index++) {
        var key = keys[index];
        this[key] = options[key];
      }
      if (this.start !== void 0) {
        if ("number" !== typeof this.start) {
          throw TypeError("start must be a Number");
        }
        if (this.start < 0) {
          throw new Error("start must be >= zero");
        }
        this.pos = this.start;
      }
      this.busy = false;
      this._queue = [];
      if (this.fd === null) {
        this._open = fs2.open;
        this._queue.push([this._open, this.path, this.flags, this.mode, void 0]);
        this.flush();
      }
    }
  }
  return legacyStreams;
}
var clone_1;
var hasRequiredClone;
function requireClone() {
  if (hasRequiredClone) return clone_1;
  hasRequiredClone = 1;
  clone_1 = clone;
  var getPrototypeOf = Object.getPrototypeOf || function(obj) {
    return obj.__proto__;
  };
  function clone(obj) {
    if (obj === null || typeof obj !== "object")
      return obj;
    if (obj instanceof Object)
      var copy2 = { __proto__: getPrototypeOf(obj) };
    else
      var copy2 = /* @__PURE__ */ Object.create(null);
    Object.getOwnPropertyNames(obj).forEach(function(key) {
      Object.defineProperty(copy2, key, Object.getOwnPropertyDescriptor(obj, key));
    });
    return copy2;
  }
  return clone_1;
}
var gracefulFs;
var hasRequiredGracefulFs;
function requireGracefulFs() {
  if (hasRequiredGracefulFs) return gracefulFs;
  hasRequiredGracefulFs = 1;
  var fs2 = require$$0$2;
  var polyfills2 = requirePolyfills();
  var legacy = requireLegacyStreams();
  var clone = requireClone();
  var util = require$$1$2;
  var gracefulQueue;
  var previousSymbol;
  if (typeof Symbol === "function" && typeof Symbol.for === "function") {
    gracefulQueue = Symbol.for("graceful-fs.queue");
    previousSymbol = Symbol.for("graceful-fs.previous");
  } else {
    gracefulQueue = "___graceful-fs.queue";
    previousSymbol = "___graceful-fs.previous";
  }
  function noop() {
  }
  function publishQueue(context, queue2) {
    Object.defineProperty(context, gracefulQueue, {
      get: function() {
        return queue2;
      }
    });
  }
  var debug2 = noop;
  if (util.debuglog)
    debug2 = util.debuglog("gfs4");
  else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ""))
    debug2 = function() {
      var m2 = util.format.apply(util, arguments);
      m2 = "GFS4: " + m2.split(/\n/).join("\nGFS4: ");
      console.error(m2);
    };
  if (!fs2[gracefulQueue]) {
    var queue = commonjsGlobal[gracefulQueue] || [];
    publishQueue(fs2, queue);
    fs2.close = function(fs$close) {
      function close(fd, cb) {
        return fs$close.call(fs2, fd, function(err) {
          if (!err) {
            resetQueue();
          }
          if (typeof cb === "function")
            cb.apply(this, arguments);
        });
      }
      Object.defineProperty(close, previousSymbol, {
        value: fs$close
      });
      return close;
    }(fs2.close);
    fs2.closeSync = function(fs$closeSync) {
      function closeSync(fd) {
        fs$closeSync.apply(fs2, arguments);
        resetQueue();
      }
      Object.defineProperty(closeSync, previousSymbol, {
        value: fs$closeSync
      });
      return closeSync;
    }(fs2.closeSync);
    if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || "")) {
      process.on("exit", function() {
        debug2(fs2[gracefulQueue]);
        require$$10$1.equal(fs2[gracefulQueue].length, 0);
      });
    }
  }
  if (!commonjsGlobal[gracefulQueue]) {
    publishQueue(commonjsGlobal, fs2[gracefulQueue]);
  }
  gracefulFs = patch(clone(fs2));
  if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs2.__patched) {
    gracefulFs = patch(fs2);
    fs2.__patched = true;
  }
  function patch(fs3) {
    polyfills2(fs3);
    fs3.gracefulify = patch;
    fs3.createReadStream = createReadStream;
    fs3.createWriteStream = createWriteStream;
    var fs$readFile = fs3.readFile;
    fs3.readFile = readFile;
    function readFile(path, options, cb) {
      if (typeof options === "function")
        cb = options, options = null;
      return go$readFile(path, options, cb);
      function go$readFile(path2, options2, cb2, startTime) {
        return fs$readFile(path2, options2, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$readFile, [path2, options2, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    var fs$writeFile = fs3.writeFile;
    fs3.writeFile = writeFile;
    function writeFile(path, data, options, cb) {
      if (typeof options === "function")
        cb = options, options = null;
      return go$writeFile(path, data, options, cb);
      function go$writeFile(path2, data2, options2, cb2, startTime) {
        return fs$writeFile(path2, data2, options2, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$writeFile, [path2, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    var fs$appendFile = fs3.appendFile;
    if (fs$appendFile)
      fs3.appendFile = appendFile;
    function appendFile(path, data, options, cb) {
      if (typeof options === "function")
        cb = options, options = null;
      return go$appendFile(path, data, options, cb);
      function go$appendFile(path2, data2, options2, cb2, startTime) {
        return fs$appendFile(path2, data2, options2, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$appendFile, [path2, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    var fs$copyFile = fs3.copyFile;
    if (fs$copyFile)
      fs3.copyFile = copyFile;
    function copyFile(src2, dest, flags, cb) {
      if (typeof flags === "function") {
        cb = flags;
        flags = 0;
      }
      return go$copyFile(src2, dest, flags, cb);
      function go$copyFile(src3, dest2, flags2, cb2, startTime) {
        return fs$copyFile(src3, dest2, flags2, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$copyFile, [src3, dest2, flags2, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    var fs$readdir = fs3.readdir;
    fs3.readdir = readdir;
    var noReaddirOptionVersions = /^v[0-5]\./;
    function readdir(path, options, cb) {
      if (typeof options === "function")
        cb = options, options = null;
      var go$readdir = noReaddirOptionVersions.test(process.version) ? function go$readdir2(path2, options2, cb2, startTime) {
        return fs$readdir(path2, fs$readdirCallback(
          path2,
          options2,
          cb2,
          startTime
        ));
      } : function go$readdir2(path2, options2, cb2, startTime) {
        return fs$readdir(path2, options2, fs$readdirCallback(
          path2,
          options2,
          cb2,
          startTime
        ));
      };
      return go$readdir(path, options, cb);
      function fs$readdirCallback(path2, options2, cb2, startTime) {
        return function(err, files) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([
              go$readdir,
              [path2, options2, cb2],
              err,
              startTime || Date.now(),
              Date.now()
            ]);
          else {
            if (files && files.sort)
              files.sort();
            if (typeof cb2 === "function")
              cb2.call(this, err, files);
          }
        };
      }
    }
    if (process.version.substr(0, 4) === "v0.8") {
      var legStreams = legacy(fs3);
      ReadStream = legStreams.ReadStream;
      WriteStream2 = legStreams.WriteStream;
    }
    var fs$ReadStream = fs3.ReadStream;
    if (fs$ReadStream) {
      ReadStream.prototype = Object.create(fs$ReadStream.prototype);
      ReadStream.prototype.open = ReadStream$open;
    }
    var fs$WriteStream = fs3.WriteStream;
    if (fs$WriteStream) {
      WriteStream2.prototype = Object.create(fs$WriteStream.prototype);
      WriteStream2.prototype.open = WriteStream$open;
    }
    Object.defineProperty(fs3, "ReadStream", {
      get: function() {
        return ReadStream;
      },
      set: function(val) {
        ReadStream = val;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(fs3, "WriteStream", {
      get: function() {
        return WriteStream2;
      },
      set: function(val) {
        WriteStream2 = val;
      },
      enumerable: true,
      configurable: true
    });
    var FileReadStream = ReadStream;
    Object.defineProperty(fs3, "FileReadStream", {
      get: function() {
        return FileReadStream;
      },
      set: function(val) {
        FileReadStream = val;
      },
      enumerable: true,
      configurable: true
    });
    var FileWriteStream = WriteStream2;
    Object.defineProperty(fs3, "FileWriteStream", {
      get: function() {
        return FileWriteStream;
      },
      set: function(val) {
        FileWriteStream = val;
      },
      enumerable: true,
      configurable: true
    });
    function ReadStream(path, options) {
      if (this instanceof ReadStream)
        return fs$ReadStream.apply(this, arguments), this;
      else
        return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
    }
    function ReadStream$open() {
      var that = this;
      open(that.path, that.flags, that.mode, function(err, fd) {
        if (err) {
          if (that.autoClose)
            that.destroy();
          that.emit("error", err);
        } else {
          that.fd = fd;
          that.emit("open", fd);
          that.read();
        }
      });
    }
    function WriteStream2(path, options) {
      if (this instanceof WriteStream2)
        return fs$WriteStream.apply(this, arguments), this;
      else
        return WriteStream2.apply(Object.create(WriteStream2.prototype), arguments);
    }
    function WriteStream$open() {
      var that = this;
      open(that.path, that.flags, that.mode, function(err, fd) {
        if (err) {
          that.destroy();
          that.emit("error", err);
        } else {
          that.fd = fd;
          that.emit("open", fd);
        }
      });
    }
    function createReadStream(path, options) {
      return new fs3.ReadStream(path, options);
    }
    function createWriteStream(path, options) {
      return new fs3.WriteStream(path, options);
    }
    var fs$open = fs3.open;
    fs3.open = open;
    function open(path, flags, mode, cb) {
      if (typeof mode === "function")
        cb = mode, mode = null;
      return go$open(path, flags, mode, cb);
      function go$open(path2, flags2, mode2, cb2, startTime) {
        return fs$open(path2, flags2, mode2, function(err, fd) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$open, [path2, flags2, mode2, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    return fs3;
  }
  function enqueue(elem) {
    debug2("ENQUEUE", elem[0].name, elem[1]);
    fs2[gracefulQueue].push(elem);
    retry();
  }
  var retryTimer;
  function resetQueue() {
    var now2 = Date.now();
    for (var i = 0; i < fs2[gracefulQueue].length; ++i) {
      if (fs2[gracefulQueue][i].length > 2) {
        fs2[gracefulQueue][i][3] = now2;
        fs2[gracefulQueue][i][4] = now2;
      }
    }
    retry();
  }
  function retry() {
    clearTimeout(retryTimer);
    retryTimer = void 0;
    if (fs2[gracefulQueue].length === 0)
      return;
    var elem = fs2[gracefulQueue].shift();
    var fn = elem[0];
    var args = elem[1];
    var err = elem[2];
    var startTime = elem[3];
    var lastTime = elem[4];
    if (startTime === void 0) {
      debug2("RETRY", fn.name, args);
      fn.apply(null, args);
    } else if (Date.now() - startTime >= 6e4) {
      debug2("TIMEOUT", fn.name, args);
      var cb = args.pop();
      if (typeof cb === "function")
        cb.call(null, err);
    } else {
      var sinceAttempt = Date.now() - lastTime;
      var sinceStart = Math.max(lastTime - startTime, 1);
      var desiredDelay = Math.min(sinceStart * 1.2, 100);
      if (sinceAttempt >= desiredDelay) {
        debug2("RETRY", fn.name, args);
        fn.apply(null, args.concat([startTime]));
      } else {
        fs2[gracefulQueue].push(elem);
      }
    }
    if (retryTimer === void 0) {
      retryTimer = setTimeout(retry, 0);
    }
  }
  return gracefulFs;
}
var hasRequiredFs;
function requireFs() {
  if (hasRequiredFs) return fs;
  hasRequiredFs = 1;
  (function(exports) {
    const u2 = requireUniversalify().fromCallback;
    const fs2 = requireGracefulFs();
    const api = [
      "access",
      "appendFile",
      "chmod",
      "chown",
      "close",
      "copyFile",
      "fchmod",
      "fchown",
      "fdatasync",
      "fstat",
      "fsync",
      "ftruncate",
      "futimes",
      "lchown",
      "lchmod",
      "link",
      "lstat",
      "mkdir",
      "mkdtemp",
      "open",
      "readFile",
      "readdir",
      "readlink",
      "realpath",
      "rename",
      "rmdir",
      "stat",
      "symlink",
      "truncate",
      "unlink",
      "utimes",
      "writeFile"
    ].filter((key) => {
      return typeof fs2[key] === "function";
    });
    Object.keys(fs2).forEach((key) => {
      if (key === "promises") {
        return;
      }
      exports[key] = fs2[key];
    });
    api.forEach((method) => {
      exports[method] = u2(fs2[method]);
    });
    exports.exists = function(filename, callback) {
      if (typeof callback === "function") {
        return fs2.exists(filename, callback);
      }
      return new Promise((resolve2) => {
        return fs2.exists(filename, resolve2);
      });
    };
    exports.read = function(fd, buffer2, offset, length, position, callback) {
      if (typeof callback === "function") {
        return fs2.read(fd, buffer2, offset, length, position, callback);
      }
      return new Promise((resolve2, reject) => {
        fs2.read(fd, buffer2, offset, length, position, (err, bytesRead, buffer3) => {
          if (err) return reject(err);
          resolve2({ bytesRead, buffer: buffer3 });
        });
      });
    };
    exports.write = function(fd, buffer2, ...args) {
      if (typeof args[args.length - 1] === "function") {
        return fs2.write(fd, buffer2, ...args);
      }
      return new Promise((resolve2, reject) => {
        fs2.write(fd, buffer2, ...args, (err, bytesWritten, buffer3) => {
          if (err) return reject(err);
          resolve2({ bytesWritten, buffer: buffer3 });
        });
      });
    };
    if (typeof fs2.realpath.native === "function") {
      exports.realpath.native = u2(fs2.realpath.native);
    }
  })(fs);
  return fs;
}
var win32;
var hasRequiredWin32;
function requireWin32() {
  if (hasRequiredWin32) return win32;
  hasRequiredWin32 = 1;
  const path = require$$1$1;
  function getRootPath(p) {
    p = path.normalize(path.resolve(p)).split(path.sep);
    if (p.length > 0) return p[0];
    return null;
  }
  const INVALID_PATH_CHARS = /[<>:"|?*]/;
  function invalidWin32Path(p) {
    const rp = getRootPath(p);
    p = p.replace(rp, "");
    return INVALID_PATH_CHARS.test(p);
  }
  win32 = {
    getRootPath,
    invalidWin32Path
  };
  return win32;
}
var mkdirs_1$1;
var hasRequiredMkdirs$1;
function requireMkdirs$1() {
  if (hasRequiredMkdirs$1) return mkdirs_1$1;
  hasRequiredMkdirs$1 = 1;
  const fs2 = requireGracefulFs();
  const path = require$$1$1;
  const invalidWin32Path = requireWin32().invalidWin32Path;
  const o777 = parseInt("0777", 8);
  function mkdirs(p, opts, callback, made) {
    if (typeof opts === "function") {
      callback = opts;
      opts = {};
    } else if (!opts || typeof opts !== "object") {
      opts = { mode: opts };
    }
    if (process.platform === "win32" && invalidWin32Path(p)) {
      const errInval = new Error(p + " contains invalid WIN32 path characters.");
      errInval.code = "EINVAL";
      return callback(errInval);
    }
    let mode = opts.mode;
    const xfs = opts.fs || fs2;
    if (mode === void 0) {
      mode = o777 & ~process.umask();
    }
    if (!made) made = null;
    callback = callback || function() {
    };
    p = path.resolve(p);
    xfs.mkdir(p, mode, (er) => {
      if (!er) {
        made = made || p;
        return callback(null, made);
      }
      switch (er.code) {
        case "ENOENT":
          if (path.dirname(p) === p) return callback(er);
          mkdirs(path.dirname(p), opts, (er2, made2) => {
            if (er2) callback(er2, made2);
            else mkdirs(p, opts, callback, made2);
          });
          break;
        // In the case of any other error, just see if there's a dir
        // there already.  If so, then hooray!  If not, then something
        // is borked.
        default:
          xfs.stat(p, (er2, stat2) => {
            if (er2 || !stat2.isDirectory()) callback(er, made);
            else callback(null, made);
          });
          break;
      }
    });
  }
  mkdirs_1$1 = mkdirs;
  return mkdirs_1$1;
}
var mkdirsSync_1;
var hasRequiredMkdirsSync;
function requireMkdirsSync() {
  if (hasRequiredMkdirsSync) return mkdirsSync_1;
  hasRequiredMkdirsSync = 1;
  const fs2 = requireGracefulFs();
  const path = require$$1$1;
  const invalidWin32Path = requireWin32().invalidWin32Path;
  const o777 = parseInt("0777", 8);
  function mkdirsSync(p, opts, made) {
    if (!opts || typeof opts !== "object") {
      opts = { mode: opts };
    }
    let mode = opts.mode;
    const xfs = opts.fs || fs2;
    if (process.platform === "win32" && invalidWin32Path(p)) {
      const errInval = new Error(p + " contains invalid WIN32 path characters.");
      errInval.code = "EINVAL";
      throw errInval;
    }
    if (mode === void 0) {
      mode = o777 & ~process.umask();
    }
    if (!made) made = null;
    p = path.resolve(p);
    try {
      xfs.mkdirSync(p, mode);
      made = made || p;
    } catch (err0) {
      if (err0.code === "ENOENT") {
        if (path.dirname(p) === p) throw err0;
        made = mkdirsSync(path.dirname(p), opts, made);
        mkdirsSync(p, opts, made);
      } else {
        let stat2;
        try {
          stat2 = xfs.statSync(p);
        } catch (err1) {
          throw err0;
        }
        if (!stat2.isDirectory()) throw err0;
      }
    }
    return made;
  }
  mkdirsSync_1 = mkdirsSync;
  return mkdirsSync_1;
}
var mkdirs_1;
var hasRequiredMkdirs;
function requireMkdirs() {
  if (hasRequiredMkdirs) return mkdirs_1;
  hasRequiredMkdirs = 1;
  const u2 = requireUniversalify().fromCallback;
  const mkdirs = u2(requireMkdirs$1());
  const mkdirsSync = requireMkdirsSync();
  mkdirs_1 = {
    mkdirs,
    mkdirsSync,
    // alias
    mkdirp: mkdirs,
    mkdirpSync: mkdirsSync,
    ensureDir: mkdirs,
    ensureDirSync: mkdirsSync
  };
  return mkdirs_1;
}
var utimes;
var hasRequiredUtimes;
function requireUtimes() {
  if (hasRequiredUtimes) return utimes;
  hasRequiredUtimes = 1;
  const fs2 = requireGracefulFs();
  const os = require$$1$3;
  const path = require$$1$1;
  function hasMillisResSync() {
    let tmpfile = path.join("millis-test-sync" + Date.now().toString() + Math.random().toString().slice(2));
    tmpfile = path.join(os.tmpdir(), tmpfile);
    const d2 = /* @__PURE__ */ new Date(1435410243862);
    fs2.writeFileSync(tmpfile, "https://github.com/jprichardson/node-fs-extra/pull/141");
    const fd = fs2.openSync(tmpfile, "r+");
    fs2.futimesSync(fd, d2, d2);
    fs2.closeSync(fd);
    return fs2.statSync(tmpfile).mtime > 1435410243e3;
  }
  function hasMillisRes(callback) {
    let tmpfile = path.join("millis-test" + Date.now().toString() + Math.random().toString().slice(2));
    tmpfile = path.join(os.tmpdir(), tmpfile);
    const d2 = /* @__PURE__ */ new Date(1435410243862);
    fs2.writeFile(tmpfile, "https://github.com/jprichardson/node-fs-extra/pull/141", (err) => {
      if (err) return callback(err);
      fs2.open(tmpfile, "r+", (err2, fd) => {
        if (err2) return callback(err2);
        fs2.futimes(fd, d2, d2, (err3) => {
          if (err3) return callback(err3);
          fs2.close(fd, (err4) => {
            if (err4) return callback(err4);
            fs2.stat(tmpfile, (err5, stats2) => {
              if (err5) return callback(err5);
              callback(null, stats2.mtime > 1435410243e3);
            });
          });
        });
      });
    });
  }
  function timeRemoveMillis(timestamp) {
    if (typeof timestamp === "number") {
      return Math.floor(timestamp / 1e3) * 1e3;
    } else if (timestamp instanceof Date) {
      return new Date(Math.floor(timestamp.getTime() / 1e3) * 1e3);
    } else {
      throw new Error("fs-extra: timeRemoveMillis() unknown parameter type");
    }
  }
  function utimesMillis(path2, atime, mtime, callback) {
    fs2.open(path2, "r+", (err, fd) => {
      if (err) return callback(err);
      fs2.futimes(fd, atime, mtime, (futimesErr) => {
        fs2.close(fd, (closeErr) => {
          if (callback) callback(futimesErr || closeErr);
        });
      });
    });
  }
  function utimesMillisSync(path2, atime, mtime) {
    const fd = fs2.openSync(path2, "r+");
    fs2.futimesSync(fd, atime, mtime);
    return fs2.closeSync(fd);
  }
  utimes = {
    hasMillisRes,
    hasMillisResSync,
    timeRemoveMillis,
    utimesMillis,
    utimesMillisSync
  };
  return utimes;
}
var stat;
var hasRequiredStat;
function requireStat() {
  if (hasRequiredStat) return stat;
  hasRequiredStat = 1;
  const fs2 = requireGracefulFs();
  const path = require$$1$1;
  const NODE_VERSION_MAJOR_WITH_BIGINT = 10;
  const NODE_VERSION_MINOR_WITH_BIGINT = 5;
  const NODE_VERSION_PATCH_WITH_BIGINT = 0;
  const nodeVersion = process.versions.node.split(".");
  const nodeVersionMajor = Number.parseInt(nodeVersion[0], 10);
  const nodeVersionMinor = Number.parseInt(nodeVersion[1], 10);
  const nodeVersionPatch = Number.parseInt(nodeVersion[2], 10);
  function nodeSupportsBigInt() {
    if (nodeVersionMajor > NODE_VERSION_MAJOR_WITH_BIGINT) {
      return true;
    } else if (nodeVersionMajor === NODE_VERSION_MAJOR_WITH_BIGINT) {
      if (nodeVersionMinor > NODE_VERSION_MINOR_WITH_BIGINT) {
        return true;
      } else if (nodeVersionMinor === NODE_VERSION_MINOR_WITH_BIGINT) {
        if (nodeVersionPatch >= NODE_VERSION_PATCH_WITH_BIGINT) {
          return true;
        }
      }
    }
    return false;
  }
  function getStats(src2, dest, cb) {
    if (nodeSupportsBigInt()) {
      fs2.stat(src2, { bigint: true }, (err, srcStat) => {
        if (err) return cb(err);
        fs2.stat(dest, { bigint: true }, (err2, destStat) => {
          if (err2) {
            if (err2.code === "ENOENT") return cb(null, { srcStat, destStat: null });
            return cb(err2);
          }
          return cb(null, { srcStat, destStat });
        });
      });
    } else {
      fs2.stat(src2, (err, srcStat) => {
        if (err) return cb(err);
        fs2.stat(dest, (err2, destStat) => {
          if (err2) {
            if (err2.code === "ENOENT") return cb(null, { srcStat, destStat: null });
            return cb(err2);
          }
          return cb(null, { srcStat, destStat });
        });
      });
    }
  }
  function getStatsSync(src2, dest) {
    let srcStat, destStat;
    if (nodeSupportsBigInt()) {
      srcStat = fs2.statSync(src2, { bigint: true });
    } else {
      srcStat = fs2.statSync(src2);
    }
    try {
      if (nodeSupportsBigInt()) {
        destStat = fs2.statSync(dest, { bigint: true });
      } else {
        destStat = fs2.statSync(dest);
      }
    } catch (err) {
      if (err.code === "ENOENT") return { srcStat, destStat: null };
      throw err;
    }
    return { srcStat, destStat };
  }
  function checkPaths(src2, dest, funcName, cb) {
    getStats(src2, dest, (err, stats2) => {
      if (err) return cb(err);
      const { srcStat, destStat } = stats2;
      if (destStat && destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {
        return cb(new Error("Source and destination must not be the same."));
      }
      if (srcStat.isDirectory() && isSrcSubdir(src2, dest)) {
        return cb(new Error(errMsg(src2, dest, funcName)));
      }
      return cb(null, { srcStat, destStat });
    });
  }
  function checkPathsSync(src2, dest, funcName) {
    const { srcStat, destStat } = getStatsSync(src2, dest);
    if (destStat && destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {
      throw new Error("Source and destination must not be the same.");
    }
    if (srcStat.isDirectory() && isSrcSubdir(src2, dest)) {
      throw new Error(errMsg(src2, dest, funcName));
    }
    return { srcStat, destStat };
  }
  function checkParentPaths(src2, srcStat, dest, funcName, cb) {
    const srcParent = path.resolve(path.dirname(src2));
    const destParent = path.resolve(path.dirname(dest));
    if (destParent === srcParent || destParent === path.parse(destParent).root) return cb();
    if (nodeSupportsBigInt()) {
      fs2.stat(destParent, { bigint: true }, (err, destStat) => {
        if (err) {
          if (err.code === "ENOENT") return cb();
          return cb(err);
        }
        if (destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {
          return cb(new Error(errMsg(src2, dest, funcName)));
        }
        return checkParentPaths(src2, srcStat, destParent, funcName, cb);
      });
    } else {
      fs2.stat(destParent, (err, destStat) => {
        if (err) {
          if (err.code === "ENOENT") return cb();
          return cb(err);
        }
        if (destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {
          return cb(new Error(errMsg(src2, dest, funcName)));
        }
        return checkParentPaths(src2, srcStat, destParent, funcName, cb);
      });
    }
  }
  function checkParentPathsSync(src2, srcStat, dest, funcName) {
    const srcParent = path.resolve(path.dirname(src2));
    const destParent = path.resolve(path.dirname(dest));
    if (destParent === srcParent || destParent === path.parse(destParent).root) return;
    let destStat;
    try {
      if (nodeSupportsBigInt()) {
        destStat = fs2.statSync(destParent, { bigint: true });
      } else {
        destStat = fs2.statSync(destParent);
      }
    } catch (err) {
      if (err.code === "ENOENT") return;
      throw err;
    }
    if (destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {
      throw new Error(errMsg(src2, dest, funcName));
    }
    return checkParentPathsSync(src2, srcStat, destParent, funcName);
  }
  function isSrcSubdir(src2, dest) {
    const srcArr = path.resolve(src2).split(path.sep).filter((i) => i);
    const destArr = path.resolve(dest).split(path.sep).filter((i) => i);
    return srcArr.reduce((acc, cur, i) => acc && destArr[i] === cur, true);
  }
  function errMsg(src2, dest, funcName) {
    return `Cannot ${funcName} '${src2}' to a subdirectory of itself, '${dest}'.`;
  }
  stat = {
    checkPaths,
    checkPathsSync,
    checkParentPaths,
    checkParentPathsSync,
    isSrcSubdir
  };
  return stat;
}
var buffer;
var hasRequiredBuffer;
function requireBuffer() {
  if (hasRequiredBuffer) return buffer;
  hasRequiredBuffer = 1;
  buffer = function(size) {
    if (typeof Buffer.allocUnsafe === "function") {
      try {
        return Buffer.allocUnsafe(size);
      } catch (e2) {
        return new Buffer(size);
      }
    }
    return new Buffer(size);
  };
  return buffer;
}
var copySync_1;
var hasRequiredCopySync$1;
function requireCopySync$1() {
  if (hasRequiredCopySync$1) return copySync_1;
  hasRequiredCopySync$1 = 1;
  const fs2 = requireGracefulFs();
  const path = require$$1$1;
  const mkdirpSync = requireMkdirs().mkdirsSync;
  const utimesSync = requireUtimes().utimesMillisSync;
  const stat2 = requireStat();
  function copySync2(src2, dest, opts) {
    if (typeof opts === "function") {
      opts = { filter: opts };
    }
    opts = opts || {};
    opts.clobber = "clobber" in opts ? !!opts.clobber : true;
    opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
    if (opts.preserveTimestamps && process.arch === "ia32") {
      console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;

    see https://github.com/jprichardson/node-fs-extra/issues/269`);
    }
    const { srcStat, destStat } = stat2.checkPathsSync(src2, dest, "copy");
    stat2.checkParentPathsSync(src2, srcStat, dest, "copy");
    return handleFilterAndCopy(destStat, src2, dest, opts);
  }
  function handleFilterAndCopy(destStat, src2, dest, opts) {
    if (opts.filter && !opts.filter(src2, dest)) return;
    const destParent = path.dirname(dest);
    if (!fs2.existsSync(destParent)) mkdirpSync(destParent);
    return startCopy(destStat, src2, dest, opts);
  }
  function startCopy(destStat, src2, dest, opts) {
    if (opts.filter && !opts.filter(src2, dest)) return;
    return getStats(destStat, src2, dest, opts);
  }
  function getStats(destStat, src2, dest, opts) {
    const statSync = opts.dereference ? fs2.statSync : fs2.lstatSync;
    const srcStat = statSync(src2);
    if (srcStat.isDirectory()) return onDir(srcStat, destStat, src2, dest, opts);
    else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice()) return onFile(srcStat, destStat, src2, dest, opts);
    else if (srcStat.isSymbolicLink()) return onLink(destStat, src2, dest, opts);
  }
  function onFile(srcStat, destStat, src2, dest, opts) {
    if (!destStat) return copyFile(srcStat, src2, dest, opts);
    return mayCopyFile(srcStat, src2, dest, opts);
  }
  function mayCopyFile(srcStat, src2, dest, opts) {
    if (opts.overwrite) {
      fs2.unlinkSync(dest);
      return copyFile(srcStat, src2, dest, opts);
    } else if (opts.errorOnExist) {
      throw new Error(`'${dest}' already exists`);
    }
  }
  function copyFile(srcStat, src2, dest, opts) {
    if (typeof fs2.copyFileSync === "function") {
      fs2.copyFileSync(src2, dest);
      fs2.chmodSync(dest, srcStat.mode);
      if (opts.preserveTimestamps) {
        return utimesSync(dest, srcStat.atime, srcStat.mtime);
      }
      return;
    }
    return copyFileFallback(srcStat, src2, dest, opts);
  }
  function copyFileFallback(srcStat, src2, dest, opts) {
    const BUF_LENGTH = 64 * 1024;
    const _buff = requireBuffer()(BUF_LENGTH);
    const fdr = fs2.openSync(src2, "r");
    const fdw = fs2.openSync(dest, "w", srcStat.mode);
    let pos = 0;
    while (pos < srcStat.size) {
      const bytesRead = fs2.readSync(fdr, _buff, 0, BUF_LENGTH, pos);
      fs2.writeSync(fdw, _buff, 0, bytesRead);
      pos += bytesRead;
    }
    if (opts.preserveTimestamps) fs2.futimesSync(fdw, srcStat.atime, srcStat.mtime);
    fs2.closeSync(fdr);
    fs2.closeSync(fdw);
  }
  function onDir(srcStat, destStat, src2, dest, opts) {
    if (!destStat) return mkDirAndCopy(srcStat, src2, dest, opts);
    if (destStat && !destStat.isDirectory()) {
      throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src2}'.`);
    }
    return copyDir(src2, dest, opts);
  }
  function mkDirAndCopy(srcStat, src2, dest, opts) {
    fs2.mkdirSync(dest);
    copyDir(src2, dest, opts);
    return fs2.chmodSync(dest, srcStat.mode);
  }
  function copyDir(src2, dest, opts) {
    fs2.readdirSync(src2).forEach((item) => copyDirItem(item, src2, dest, opts));
  }
  function copyDirItem(item, src2, dest, opts) {
    const srcItem = path.join(src2, item);
    const destItem = path.join(dest, item);
    const { destStat } = stat2.checkPathsSync(srcItem, destItem, "copy");
    return startCopy(destStat, srcItem, destItem, opts);
  }
  function onLink(destStat, src2, dest, opts) {
    let resolvedSrc = fs2.readlinkSync(src2);
    if (opts.dereference) {
      resolvedSrc = path.resolve(process.cwd(), resolvedSrc);
    }
    if (!destStat) {
      return fs2.symlinkSync(resolvedSrc, dest);
    } else {
      let resolvedDest;
      try {
        resolvedDest = fs2.readlinkSync(dest);
      } catch (err) {
        if (err.code === "EINVAL" || err.code === "UNKNOWN") return fs2.symlinkSync(resolvedSrc, dest);
        throw err;
      }
      if (opts.dereference) {
        resolvedDest = path.resolve(process.cwd(), resolvedDest);
      }
      if (stat2.isSrcSubdir(resolvedSrc, resolvedDest)) {
        throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`);
      }
      if (fs2.statSync(dest).isDirectory() && stat2.isSrcSubdir(resolvedDest, resolvedSrc)) {
        throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`);
      }
      return copyLink(resolvedSrc, dest);
    }
  }
  function copyLink(resolvedSrc, dest) {
    fs2.unlinkSync(dest);
    return fs2.symlinkSync(resolvedSrc, dest);
  }
  copySync_1 = copySync2;
  return copySync_1;
}
var copySync;
var hasRequiredCopySync;
function requireCopySync() {
  if (hasRequiredCopySync) return copySync;
  hasRequiredCopySync = 1;
  copySync = {
    copySync: requireCopySync$1()
  };
  return copySync;
}
var pathExists_1;
var hasRequiredPathExists;
function requirePathExists() {
  if (hasRequiredPathExists) return pathExists_1;
  hasRequiredPathExists = 1;
  const u2 = requireUniversalify().fromPromise;
  const fs2 = requireFs();
  function pathExists(path) {
    return fs2.access(path).then(() => true).catch(() => false);
  }
  pathExists_1 = {
    pathExists: u2(pathExists),
    pathExistsSync: fs2.existsSync
  };
  return pathExists_1;
}
var copy_1;
var hasRequiredCopy$1;
function requireCopy$1() {
  if (hasRequiredCopy$1) return copy_1;
  hasRequiredCopy$1 = 1;
  const fs2 = requireGracefulFs();
  const path = require$$1$1;
  const mkdirp = requireMkdirs().mkdirs;
  const pathExists = requirePathExists().pathExists;
  const utimes2 = requireUtimes().utimesMillis;
  const stat2 = requireStat();
  function copy2(src2, dest, opts, cb) {
    if (typeof opts === "function" && !cb) {
      cb = opts;
      opts = {};
    } else if (typeof opts === "function") {
      opts = { filter: opts };
    }
    cb = cb || function() {
    };
    opts = opts || {};
    opts.clobber = "clobber" in opts ? !!opts.clobber : true;
    opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
    if (opts.preserveTimestamps && process.arch === "ia32") {
      console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;

    see https://github.com/jprichardson/node-fs-extra/issues/269`);
    }
    stat2.checkPaths(src2, dest, "copy", (err, stats2) => {
      if (err) return cb(err);
      const { srcStat, destStat } = stats2;
      stat2.checkParentPaths(src2, srcStat, dest, "copy", (err2) => {
        if (err2) return cb(err2);
        if (opts.filter) return handleFilter(checkParentDir, destStat, src2, dest, opts, cb);
        return checkParentDir(destStat, src2, dest, opts, cb);
      });
    });
  }
  function checkParentDir(destStat, src2, dest, opts, cb) {
    const destParent = path.dirname(dest);
    pathExists(destParent, (err, dirExists) => {
      if (err) return cb(err);
      if (dirExists) return startCopy(destStat, src2, dest, opts, cb);
      mkdirp(destParent, (err2) => {
        if (err2) return cb(err2);
        return startCopy(destStat, src2, dest, opts, cb);
      });
    });
  }
  function handleFilter(onInclude, destStat, src2, dest, opts, cb) {
    Promise.resolve(opts.filter(src2, dest)).then((include) => {
      if (include) return onInclude(destStat, src2, dest, opts, cb);
      return cb();
    }, (error) => cb(error));
  }
  function startCopy(destStat, src2, dest, opts, cb) {
    if (opts.filter) return handleFilter(getStats, destStat, src2, dest, opts, cb);
    return getStats(destStat, src2, dest, opts, cb);
  }
  function getStats(destStat, src2, dest, opts, cb) {
    const stat3 = opts.dereference ? fs2.stat : fs2.lstat;
    stat3(src2, (err, srcStat) => {
      if (err) return cb(err);
      if (srcStat.isDirectory()) return onDir(srcStat, destStat, src2, dest, opts, cb);
      else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice()) return onFile(srcStat, destStat, src2, dest, opts, cb);
      else if (srcStat.isSymbolicLink()) return onLink(destStat, src2, dest, opts, cb);
    });
  }
  function onFile(srcStat, destStat, src2, dest, opts, cb) {
    if (!destStat) return copyFile(srcStat, src2, dest, opts, cb);
    return mayCopyFile(srcStat, src2, dest, opts, cb);
  }
  function mayCopyFile(srcStat, src2, dest, opts, cb) {
    if (opts.overwrite) {
      fs2.unlink(dest, (err) => {
        if (err) return cb(err);
        return copyFile(srcStat, src2, dest, opts, cb);
      });
    } else if (opts.errorOnExist) {
      return cb(new Error(`'${dest}' already exists`));
    } else return cb();
  }
  function copyFile(srcStat, src2, dest, opts, cb) {
    if (typeof fs2.copyFile === "function") {
      return fs2.copyFile(src2, dest, (err) => {
        if (err) return cb(err);
        return setDestModeAndTimestamps(srcStat, dest, opts, cb);
      });
    }
    return copyFileFallback(srcStat, src2, dest, opts, cb);
  }
  function copyFileFallback(srcStat, src2, dest, opts, cb) {
    const rs = fs2.createReadStream(src2);
    rs.on("error", (err) => cb(err)).once("open", () => {
      const ws = fs2.createWriteStream(dest, { mode: srcStat.mode });
      ws.on("error", (err) => cb(err)).on("open", () => rs.pipe(ws)).once("close", () => setDestModeAndTimestamps(srcStat, dest, opts, cb));
    });
  }
  function setDestModeAndTimestamps(srcStat, dest, opts, cb) {
    fs2.chmod(dest, srcStat.mode, (err) => {
      if (err) return cb(err);
      if (opts.preserveTimestamps) {
        return utimes2(dest, srcStat.atime, srcStat.mtime, cb);
      }
      return cb();
    });
  }
  function onDir(srcStat, destStat, src2, dest, opts, cb) {
    if (!destStat) return mkDirAndCopy(srcStat, src2, dest, opts, cb);
    if (destStat && !destStat.isDirectory()) {
      return cb(new Error(`Cannot overwrite non-directory '${dest}' with directory '${src2}'.`));
    }
    return copyDir(src2, dest, opts, cb);
  }
  function mkDirAndCopy(srcStat, src2, dest, opts, cb) {
    fs2.mkdir(dest, (err) => {
      if (err) return cb(err);
      copyDir(src2, dest, opts, (err2) => {
        if (err2) return cb(err2);
        return fs2.chmod(dest, srcStat.mode, cb);
      });
    });
  }
  function copyDir(src2, dest, opts, cb) {
    fs2.readdir(src2, (err, items) => {
      if (err) return cb(err);
      return copyDirItems(items, src2, dest, opts, cb);
    });
  }
  function copyDirItems(items, src2, dest, opts, cb) {
    const item = items.pop();
    if (!item) return cb();
    return copyDirItem(items, item, src2, dest, opts, cb);
  }
  function copyDirItem(items, item, src2, dest, opts, cb) {
    const srcItem = path.join(src2, item);
    const destItem = path.join(dest, item);
    stat2.checkPaths(srcItem, destItem, "copy", (err, stats2) => {
      if (err) return cb(err);
      const { destStat } = stats2;
      startCopy(destStat, srcItem, destItem, opts, (err2) => {
        if (err2) return cb(err2);
        return copyDirItems(items, src2, dest, opts, cb);
      });
    });
  }
  function onLink(destStat, src2, dest, opts, cb) {
    fs2.readlink(src2, (err, resolvedSrc) => {
      if (err) return cb(err);
      if (opts.dereference) {
        resolvedSrc = path.resolve(process.cwd(), resolvedSrc);
      }
      if (!destStat) {
        return fs2.symlink(resolvedSrc, dest, cb);
      } else {
        fs2.readlink(dest, (err2, resolvedDest) => {
          if (err2) {
            if (err2.code === "EINVAL" || err2.code === "UNKNOWN") return fs2.symlink(resolvedSrc, dest, cb);
            return cb(err2);
          }
          if (opts.dereference) {
            resolvedDest = path.resolve(process.cwd(), resolvedDest);
          }
          if (stat2.isSrcSubdir(resolvedSrc, resolvedDest)) {
            return cb(new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`));
          }
          if (destStat.isDirectory() && stat2.isSrcSubdir(resolvedDest, resolvedSrc)) {
            return cb(new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`));
          }
          return copyLink(resolvedSrc, dest, cb);
        });
      }
    });
  }
  function copyLink(resolvedSrc, dest, cb) {
    fs2.unlink(dest, (err) => {
      if (err) return cb(err);
      return fs2.symlink(resolvedSrc, dest, cb);
    });
  }
  copy_1 = copy2;
  return copy_1;
}
var copy;
var hasRequiredCopy;
function requireCopy() {
  if (hasRequiredCopy) return copy;
  hasRequiredCopy = 1;
  const u2 = requireUniversalify().fromCallback;
  copy = {
    copy: u2(requireCopy$1())
  };
  return copy;
}
var rimraf_1;
var hasRequiredRimraf;
function requireRimraf() {
  if (hasRequiredRimraf) return rimraf_1;
  hasRequiredRimraf = 1;
  const fs2 = requireGracefulFs();
  const path = require$$1$1;
  const assert2 = require$$10$1;
  const isWindows = process.platform === "win32";
  function defaults(options) {
    const methods = [
      "unlink",
      "chmod",
      "stat",
      "lstat",
      "rmdir",
      "readdir"
    ];
    methods.forEach((m2) => {
      options[m2] = options[m2] || fs2[m2];
      m2 = m2 + "Sync";
      options[m2] = options[m2] || fs2[m2];
    });
    options.maxBusyTries = options.maxBusyTries || 3;
  }
  function rimraf(p, options, cb) {
    let busyTries = 0;
    if (typeof options === "function") {
      cb = options;
      options = {};
    }
    assert2(p, "rimraf: missing path");
    assert2.strictEqual(typeof p, "string", "rimraf: path should be a string");
    assert2.strictEqual(typeof cb, "function", "rimraf: callback function required");
    assert2(options, "rimraf: invalid options argument provided");
    assert2.strictEqual(typeof options, "object", "rimraf: options should be object");
    defaults(options);
    rimraf_(p, options, function CB(er) {
      if (er) {
        if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") && busyTries < options.maxBusyTries) {
          busyTries++;
          const time2 = busyTries * 100;
          return setTimeout(() => rimraf_(p, options, CB), time2);
        }
        if (er.code === "ENOENT") er = null;
      }
      cb(er);
    });
  }
  function rimraf_(p, options, cb) {
    assert2(p);
    assert2(options);
    assert2(typeof cb === "function");
    options.lstat(p, (er, st) => {
      if (er && er.code === "ENOENT") {
        return cb(null);
      }
      if (er && er.code === "EPERM" && isWindows) {
        return fixWinEPERM(p, options, er, cb);
      }
      if (st && st.isDirectory()) {
        return rmdir(p, options, er, cb);
      }
      options.unlink(p, (er2) => {
        if (er2) {
          if (er2.code === "ENOENT") {
            return cb(null);
          }
          if (er2.code === "EPERM") {
            return isWindows ? fixWinEPERM(p, options, er2, cb) : rmdir(p, options, er2, cb);
          }
          if (er2.code === "EISDIR") {
            return rmdir(p, options, er2, cb);
          }
        }
        return cb(er2);
      });
    });
  }
  function fixWinEPERM(p, options, er, cb) {
    assert2(p);
    assert2(options);
    assert2(typeof cb === "function");
    if (er) {
      assert2(er instanceof Error);
    }
    options.chmod(p, 438, (er2) => {
      if (er2) {
        cb(er2.code === "ENOENT" ? null : er);
      } else {
        options.stat(p, (er3, stats2) => {
          if (er3) {
            cb(er3.code === "ENOENT" ? null : er);
          } else if (stats2.isDirectory()) {
            rmdir(p, options, er, cb);
          } else {
            options.unlink(p, cb);
          }
        });
      }
    });
  }
  function fixWinEPERMSync(p, options, er) {
    let stats2;
    assert2(p);
    assert2(options);
    if (er) {
      assert2(er instanceof Error);
    }
    try {
      options.chmodSync(p, 438);
    } catch (er2) {
      if (er2.code === "ENOENT") {
        return;
      } else {
        throw er;
      }
    }
    try {
      stats2 = options.statSync(p);
    } catch (er3) {
      if (er3.code === "ENOENT") {
        return;
      } else {
        throw er;
      }
    }
    if (stats2.isDirectory()) {
      rmdirSync(p, options, er);
    } else {
      options.unlinkSync(p);
    }
  }
  function rmdir(p, options, originalEr, cb) {
    assert2(p);
    assert2(options);
    if (originalEr) {
      assert2(originalEr instanceof Error);
    }
    assert2(typeof cb === "function");
    options.rmdir(p, (er) => {
      if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")) {
        rmkids(p, options, cb);
      } else if (er && er.code === "ENOTDIR") {
        cb(originalEr);
      } else {
        cb(er);
      }
    });
  }
  function rmkids(p, options, cb) {
    assert2(p);
    assert2(options);
    assert2(typeof cb === "function");
    options.readdir(p, (er, files) => {
      if (er) return cb(er);
      let n = files.length;
      let errState;
      if (n === 0) return options.rmdir(p, cb);
      files.forEach((f2) => {
        rimraf(path.join(p, f2), options, (er2) => {
          if (errState) {
            return;
          }
          if (er2) return cb(errState = er2);
          if (--n === 0) {
            options.rmdir(p, cb);
          }
        });
      });
    });
  }
  function rimrafSync(p, options) {
    let st;
    options = options || {};
    defaults(options);
    assert2(p, "rimraf: missing path");
    assert2.strictEqual(typeof p, "string", "rimraf: path should be a string");
    assert2(options, "rimraf: missing options");
    assert2.strictEqual(typeof options, "object", "rimraf: options should be object");
    try {
      st = options.lstatSync(p);
    } catch (er) {
      if (er.code === "ENOENT") {
        return;
      }
      if (er.code === "EPERM" && isWindows) {
        fixWinEPERMSync(p, options, er);
      }
    }
    try {
      if (st && st.isDirectory()) {
        rmdirSync(p, options, null);
      } else {
        options.unlinkSync(p);
      }
    } catch (er) {
      if (er.code === "ENOENT") {
        return;
      } else if (er.code === "EPERM") {
        return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er);
      } else if (er.code !== "EISDIR") {
        throw er;
      }
      rmdirSync(p, options, er);
    }
  }
  function rmdirSync(p, options, originalEr) {
    assert2(p);
    assert2(options);
    if (originalEr) {
      assert2(originalEr instanceof Error);
    }
    try {
      options.rmdirSync(p);
    } catch (er) {
      if (er.code === "ENOTDIR") {
        throw originalEr;
      } else if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM") {
        rmkidsSync(p, options);
      } else if (er.code !== "ENOENT") {
        throw er;
      }
    }
  }
  function rmkidsSync(p, options) {
    assert2(p);
    assert2(options);
    options.readdirSync(p).forEach((f2) => rimrafSync(path.join(p, f2), options));
    if (isWindows) {
      const startTime = Date.now();
      do {
        try {
          const ret = options.rmdirSync(p, options);
          return ret;
        } catch (er) {
        }
      } while (Date.now() - startTime < 500);
    } else {
      const ret = options.rmdirSync(p, options);
      return ret;
    }
  }
  rimraf_1 = rimraf;
  rimraf.sync = rimrafSync;
  return rimraf_1;
}
var remove;
var hasRequiredRemove;
function requireRemove() {
  if (hasRequiredRemove) return remove;
  hasRequiredRemove = 1;
  const u2 = requireUniversalify().fromCallback;
  const rimraf = requireRimraf();
  remove = {
    remove: u2(rimraf),
    removeSync: rimraf.sync
  };
  return remove;
}
var empty;
var hasRequiredEmpty;
function requireEmpty() {
  if (hasRequiredEmpty) return empty;
  hasRequiredEmpty = 1;
  const u2 = requireUniversalify().fromCallback;
  const fs2 = requireGracefulFs();
  const path = require$$1$1;
  const mkdir = requireMkdirs();
  const remove2 = requireRemove();
  const emptyDir = u2(function emptyDir2(dir, callback) {
    callback = callback || function() {
    };
    fs2.readdir(dir, (err, items) => {
      if (err) return mkdir.mkdirs(dir, callback);
      items = items.map((item) => path.join(dir, item));
      deleteItem();
      function deleteItem() {
        const item = items.pop();
        if (!item) return callback();
        remove2.remove(item, (err2) => {
          if (err2) return callback(err2);
          deleteItem();
        });
      }
    });
  });
  function emptyDirSync(dir) {
    let items;
    try {
      items = fs2.readdirSync(dir);
    } catch (err) {
      return mkdir.mkdirsSync(dir);
    }
    items.forEach((item) => {
      item = path.join(dir, item);
      remove2.removeSync(item);
    });
  }
  empty = {
    emptyDirSync,
    emptydirSync: emptyDirSync,
    emptyDir,
    emptydir: emptyDir
  };
  return empty;
}
var file;
var hasRequiredFile$1;
function requireFile$1() {
  if (hasRequiredFile$1) return file;
  hasRequiredFile$1 = 1;
  const u2 = requireUniversalify().fromCallback;
  const path = require$$1$1;
  const fs2 = requireGracefulFs();
  const mkdir = requireMkdirs();
  const pathExists = requirePathExists().pathExists;
  function createFile(file2, callback) {
    function makeFile() {
      fs2.writeFile(file2, "", (err) => {
        if (err) return callback(err);
        callback();
      });
    }
    fs2.stat(file2, (err, stats2) => {
      if (!err && stats2.isFile()) return callback();
      const dir = path.dirname(file2);
      pathExists(dir, (err2, dirExists) => {
        if (err2) return callback(err2);
        if (dirExists) return makeFile();
        mkdir.mkdirs(dir, (err3) => {
          if (err3) return callback(err3);
          makeFile();
        });
      });
    });
  }
  function createFileSync(file2) {
    let stats2;
    try {
      stats2 = fs2.statSync(file2);
    } catch (e2) {
    }
    if (stats2 && stats2.isFile()) return;
    const dir = path.dirname(file2);
    if (!fs2.existsSync(dir)) {
      mkdir.mkdirsSync(dir);
    }
    fs2.writeFileSync(file2, "");
  }
  file = {
    createFile: u2(createFile),
    createFileSync
  };
  return file;
}
var link;
var hasRequiredLink;
function requireLink() {
  if (hasRequiredLink) return link;
  hasRequiredLink = 1;
  const u2 = requireUniversalify().fromCallback;
  const path = require$$1$1;
  const fs2 = requireGracefulFs();
  const mkdir = requireMkdirs();
  const pathExists = requirePathExists().pathExists;
  function createLink(srcpath, dstpath, callback) {
    function makeLink(srcpath2, dstpath2) {
      fs2.link(srcpath2, dstpath2, (err) => {
        if (err) return callback(err);
        callback(null);
      });
    }
    pathExists(dstpath, (err, destinationExists) => {
      if (err) return callback(err);
      if (destinationExists) return callback(null);
      fs2.lstat(srcpath, (err2) => {
        if (err2) {
          err2.message = err2.message.replace("lstat", "ensureLink");
          return callback(err2);
        }
        const dir = path.dirname(dstpath);
        pathExists(dir, (err3, dirExists) => {
          if (err3) return callback(err3);
          if (dirExists) return makeLink(srcpath, dstpath);
          mkdir.mkdirs(dir, (err4) => {
            if (err4) return callback(err4);
            makeLink(srcpath, dstpath);
          });
        });
      });
    });
  }
  function createLinkSync(srcpath, dstpath) {
    const destinationExists = fs2.existsSync(dstpath);
    if (destinationExists) return void 0;
    try {
      fs2.lstatSync(srcpath);
    } catch (err) {
      err.message = err.message.replace("lstat", "ensureLink");
      throw err;
    }
    const dir = path.dirname(dstpath);
    const dirExists = fs2.existsSync(dir);
    if (dirExists) return fs2.linkSync(srcpath, dstpath);
    mkdir.mkdirsSync(dir);
    return fs2.linkSync(srcpath, dstpath);
  }
  link = {
    createLink: u2(createLink),
    createLinkSync
  };
  return link;
}
var symlinkPaths_1;
var hasRequiredSymlinkPaths;
function requireSymlinkPaths() {
  if (hasRequiredSymlinkPaths) return symlinkPaths_1;
  hasRequiredSymlinkPaths = 1;
  const path = require$$1$1;
  const fs2 = requireGracefulFs();
  const pathExists = requirePathExists().pathExists;
  function symlinkPaths(srcpath, dstpath, callback) {
    if (path.isAbsolute(srcpath)) {
      return fs2.lstat(srcpath, (err) => {
        if (err) {
          err.message = err.message.replace("lstat", "ensureSymlink");
          return callback(err);
        }
        return callback(null, {
          "toCwd": srcpath,
          "toDst": srcpath
        });
      });
    } else {
      const dstdir = path.dirname(dstpath);
      const relativeToDst = path.join(dstdir, srcpath);
      return pathExists(relativeToDst, (err, exists) => {
        if (err) return callback(err);
        if (exists) {
          return callback(null, {
            "toCwd": relativeToDst,
            "toDst": srcpath
          });
        } else {
          return fs2.lstat(srcpath, (err2) => {
            if (err2) {
              err2.message = err2.message.replace("lstat", "ensureSymlink");
              return callback(err2);
            }
            return callback(null, {
              "toCwd": srcpath,
              "toDst": path.relative(dstdir, srcpath)
            });
          });
        }
      });
    }
  }
  function symlinkPathsSync(srcpath, dstpath) {
    let exists;
    if (path.isAbsolute(srcpath)) {
      exists = fs2.existsSync(srcpath);
      if (!exists) throw new Error("absolute srcpath does not exist");
      return {
        "toCwd": srcpath,
        "toDst": srcpath
      };
    } else {
      const dstdir = path.dirname(dstpath);
      const relativeToDst = path.join(dstdir, srcpath);
      exists = fs2.existsSync(relativeToDst);
      if (exists) {
        return {
          "toCwd": relativeToDst,
          "toDst": srcpath
        };
      } else {
        exists = fs2.existsSync(srcpath);
        if (!exists) throw new Error("relative srcpath does not exist");
        return {
          "toCwd": srcpath,
          "toDst": path.relative(dstdir, srcpath)
        };
      }
    }
  }
  symlinkPaths_1 = {
    symlinkPaths,
    symlinkPathsSync
  };
  return symlinkPaths_1;
}
var symlinkType_1;
var hasRequiredSymlinkType;
function requireSymlinkType() {
  if (hasRequiredSymlinkType) return symlinkType_1;
  hasRequiredSymlinkType = 1;
  const fs2 = requireGracefulFs();
  function symlinkType(srcpath, type, callback) {
    callback = typeof type === "function" ? type : callback;
    type = typeof type === "function" ? false : type;
    if (type) return callback(null, type);
    fs2.lstat(srcpath, (err, stats2) => {
      if (err) return callback(null, "file");
      type = stats2 && stats2.isDirectory() ? "dir" : "file";
      callback(null, type);
    });
  }
  function symlinkTypeSync(srcpath, type) {
    let stats2;
    if (type) return type;
    try {
      stats2 = fs2.lstatSync(srcpath);
    } catch (e2) {
      return "file";
    }
    return stats2 && stats2.isDirectory() ? "dir" : "file";
  }
  symlinkType_1 = {
    symlinkType,
    symlinkTypeSync
  };
  return symlinkType_1;
}
var symlink;
var hasRequiredSymlink;
function requireSymlink() {
  if (hasRequiredSymlink) return symlink;
  hasRequiredSymlink = 1;
  const u2 = requireUniversalify().fromCallback;
  const path = require$$1$1;
  const fs2 = requireGracefulFs();
  const _mkdirs = requireMkdirs();
  const mkdirs = _mkdirs.mkdirs;
  const mkdirsSync = _mkdirs.mkdirsSync;
  const _symlinkPaths = requireSymlinkPaths();
  const symlinkPaths = _symlinkPaths.symlinkPaths;
  const symlinkPathsSync = _symlinkPaths.symlinkPathsSync;
  const _symlinkType = requireSymlinkType();
  const symlinkType = _symlinkType.symlinkType;
  const symlinkTypeSync = _symlinkType.symlinkTypeSync;
  const pathExists = requirePathExists().pathExists;
  function createSymlink(srcpath, dstpath, type, callback) {
    callback = typeof type === "function" ? type : callback;
    type = typeof type === "function" ? false : type;
    pathExists(dstpath, (err, destinationExists) => {
      if (err) return callback(err);
      if (destinationExists) return callback(null);
      symlinkPaths(srcpath, dstpath, (err2, relative2) => {
        if (err2) return callback(err2);
        srcpath = relative2.toDst;
        symlinkType(relative2.toCwd, type, (err3, type2) => {
          if (err3) return callback(err3);
          const dir = path.dirname(dstpath);
          pathExists(dir, (err4, dirExists) => {
            if (err4) return callback(err4);
            if (dirExists) return fs2.symlink(srcpath, dstpath, type2, callback);
            mkdirs(dir, (err5) => {
              if (err5) return callback(err5);
              fs2.symlink(srcpath, dstpath, type2, callback);
            });
          });
        });
      });
    });
  }
  function createSymlinkSync(srcpath, dstpath, type) {
    const destinationExists = fs2.existsSync(dstpath);
    if (destinationExists) return void 0;
    const relative2 = symlinkPathsSync(srcpath, dstpath);
    srcpath = relative2.toDst;
    type = symlinkTypeSync(relative2.toCwd, type);
    const dir = path.dirname(dstpath);
    const exists = fs2.existsSync(dir);
    if (exists) return fs2.symlinkSync(srcpath, dstpath, type);
    mkdirsSync(dir);
    return fs2.symlinkSync(srcpath, dstpath, type);
  }
  symlink = {
    createSymlink: u2(createSymlink),
    createSymlinkSync
  };
  return symlink;
}
var ensure;
var hasRequiredEnsure;
function requireEnsure() {
  if (hasRequiredEnsure) return ensure;
  hasRequiredEnsure = 1;
  const file2 = requireFile$1();
  const link2 = requireLink();
  const symlink2 = requireSymlink();
  ensure = {
    // file
    createFile: file2.createFile,
    createFileSync: file2.createFileSync,
    ensureFile: file2.createFile,
    ensureFileSync: file2.createFileSync,
    // link
    createLink: link2.createLink,
    createLinkSync: link2.createLinkSync,
    ensureLink: link2.createLink,
    ensureLinkSync: link2.createLinkSync,
    // symlink
    createSymlink: symlink2.createSymlink,
    createSymlinkSync: symlink2.createSymlinkSync,
    ensureSymlink: symlink2.createSymlink,
    ensureSymlinkSync: symlink2.createSymlinkSync
  };
  return ensure;
}
var jsonfile_1;
var hasRequiredJsonfile$1;
function requireJsonfile$1() {
  if (hasRequiredJsonfile$1) return jsonfile_1;
  hasRequiredJsonfile$1 = 1;
  var _fs;
  try {
    _fs = requireGracefulFs();
  } catch (_2) {
    _fs = require$$0$2;
  }
  function readFile(file2, options, callback) {
    if (callback == null) {
      callback = options;
      options = {};
    }
    if (typeof options === "string") {
      options = { encoding: options };
    }
    options = options || {};
    var fs2 = options.fs || _fs;
    var shouldThrow = true;
    if ("throws" in options) {
      shouldThrow = options.throws;
    }
    fs2.readFile(file2, options, function(err, data) {
      if (err) return callback(err);
      data = stripBom(data);
      var obj;
      try {
        obj = JSON.parse(data, options ? options.reviver : null);
      } catch (err2) {
        if (shouldThrow) {
          err2.message = file2 + ": " + err2.message;
          return callback(err2);
        } else {
          return callback(null, null);
        }
      }
      callback(null, obj);
    });
  }
  function readFileSync(file2, options) {
    options = options || {};
    if (typeof options === "string") {
      options = { encoding: options };
    }
    var fs2 = options.fs || _fs;
    var shouldThrow = true;
    if ("throws" in options) {
      shouldThrow = options.throws;
    }
    try {
      var content = fs2.readFileSync(file2, options);
      content = stripBom(content);
      return JSON.parse(content, options.reviver);
    } catch (err) {
      if (shouldThrow) {
        err.message = file2 + ": " + err.message;
        throw err;
      } else {
        return null;
      }
    }
  }
  function stringify(obj, options) {
    var spaces;
    var EOL = "\n";
    if (typeof options === "object" && options !== null) {
      if (options.spaces) {
        spaces = options.spaces;
      }
      if (options.EOL) {
        EOL = options.EOL;
      }
    }
    var str = JSON.stringify(obj, options ? options.replacer : null, spaces);
    return str.replace(/\n/g, EOL) + EOL;
  }
  function writeFile(file2, obj, options, callback) {
    if (callback == null) {
      callback = options;
      options = {};
    }
    options = options || {};
    var fs2 = options.fs || _fs;
    var str = "";
    try {
      str = stringify(obj, options);
    } catch (err) {
      if (callback) callback(err, null);
      return;
    }
    fs2.writeFile(file2, str, options, callback);
  }
  function writeFileSync(file2, obj, options) {
    options = options || {};
    var fs2 = options.fs || _fs;
    var str = stringify(obj, options);
    return fs2.writeFileSync(file2, str, options);
  }
  function stripBom(content) {
    if (Buffer.isBuffer(content)) content = content.toString("utf8");
    content = content.replace(/^\uFEFF/, "");
    return content;
  }
  var jsonfile2 = {
    readFile,
    readFileSync,
    writeFile,
    writeFileSync
  };
  jsonfile_1 = jsonfile2;
  return jsonfile_1;
}
var jsonfile;
var hasRequiredJsonfile;
function requireJsonfile() {
  if (hasRequiredJsonfile) return jsonfile;
  hasRequiredJsonfile = 1;
  const u2 = requireUniversalify().fromCallback;
  const jsonFile = requireJsonfile$1();
  jsonfile = {
    // jsonfile exports
    readJson: u2(jsonFile.readFile),
    readJsonSync: jsonFile.readFileSync,
    writeJson: u2(jsonFile.writeFile),
    writeJsonSync: jsonFile.writeFileSync
  };
  return jsonfile;
}
var outputJson_1;
var hasRequiredOutputJson;
function requireOutputJson() {
  if (hasRequiredOutputJson) return outputJson_1;
  hasRequiredOutputJson = 1;
  const path = require$$1$1;
  const mkdir = requireMkdirs();
  const pathExists = requirePathExists().pathExists;
  const jsonFile = requireJsonfile();
  function outputJson(file2, data, options, callback) {
    if (typeof options === "function") {
      callback = options;
      options = {};
    }
    const dir = path.dirname(file2);
    pathExists(dir, (err, itDoes) => {
      if (err) return callback(err);
      if (itDoes) return jsonFile.writeJson(file2, data, options, callback);
      mkdir.mkdirs(dir, (err2) => {
        if (err2) return callback(err2);
        jsonFile.writeJson(file2, data, options, callback);
      });
    });
  }
  outputJson_1 = outputJson;
  return outputJson_1;
}
var outputJsonSync_1;
var hasRequiredOutputJsonSync;
function requireOutputJsonSync() {
  if (hasRequiredOutputJsonSync) return outputJsonSync_1;
  hasRequiredOutputJsonSync = 1;
  const fs2 = requireGracefulFs();
  const path = require$$1$1;
  const mkdir = requireMkdirs();
  const jsonFile = requireJsonfile();
  function outputJsonSync(file2, data, options) {
    const dir = path.dirname(file2);
    if (!fs2.existsSync(dir)) {
      mkdir.mkdirsSync(dir);
    }
    jsonFile.writeJsonSync(file2, data, options);
  }
  outputJsonSync_1 = outputJsonSync;
  return outputJsonSync_1;
}
var json;
var hasRequiredJson;
function requireJson() {
  if (hasRequiredJson) return json;
  hasRequiredJson = 1;
  const u2 = requireUniversalify().fromCallback;
  const jsonFile = requireJsonfile();
  jsonFile.outputJson = u2(requireOutputJson());
  jsonFile.outputJsonSync = requireOutputJsonSync();
  jsonFile.outputJSON = jsonFile.outputJson;
  jsonFile.outputJSONSync = jsonFile.outputJsonSync;
  jsonFile.writeJSON = jsonFile.writeJson;
  jsonFile.writeJSONSync = jsonFile.writeJsonSync;
  jsonFile.readJSON = jsonFile.readJson;
  jsonFile.readJSONSync = jsonFile.readJsonSync;
  json = jsonFile;
  return json;
}
var moveSync_1;
var hasRequiredMoveSync$1;
function requireMoveSync$1() {
  if (hasRequiredMoveSync$1) return moveSync_1;
  hasRequiredMoveSync$1 = 1;
  const fs2 = requireGracefulFs();
  const path = require$$1$1;
  const copySync2 = requireCopySync().copySync;
  const removeSync = requireRemove().removeSync;
  const mkdirpSync = requireMkdirs().mkdirpSync;
  const stat2 = requireStat();
  function moveSync2(src2, dest, opts) {
    opts = opts || {};
    const overwrite = opts.overwrite || opts.clobber || false;
    const { srcStat } = stat2.checkPathsSync(src2, dest, "move");
    stat2.checkParentPathsSync(src2, srcStat, dest, "move");
    mkdirpSync(path.dirname(dest));
    return doRename(src2, dest, overwrite);
  }
  function doRename(src2, dest, overwrite) {
    if (overwrite) {
      removeSync(dest);
      return rename(src2, dest, overwrite);
    }
    if (fs2.existsSync(dest)) throw new Error("dest already exists.");
    return rename(src2, dest, overwrite);
  }
  function rename(src2, dest, overwrite) {
    try {
      fs2.renameSync(src2, dest);
    } catch (err) {
      if (err.code !== "EXDEV") throw err;
      return moveAcrossDevice(src2, dest, overwrite);
    }
  }
  function moveAcrossDevice(src2, dest, overwrite) {
    const opts = {
      overwrite,
      errorOnExist: true
    };
    copySync2(src2, dest, opts);
    return removeSync(src2);
  }
  moveSync_1 = moveSync2;
  return moveSync_1;
}
var moveSync;
var hasRequiredMoveSync;
function requireMoveSync() {
  if (hasRequiredMoveSync) return moveSync;
  hasRequiredMoveSync = 1;
  moveSync = {
    moveSync: requireMoveSync$1()
  };
  return moveSync;
}
var move_1;
var hasRequiredMove$1;
function requireMove$1() {
  if (hasRequiredMove$1) return move_1;
  hasRequiredMove$1 = 1;
  const fs2 = requireGracefulFs();
  const path = require$$1$1;
  const copy2 = requireCopy().copy;
  const remove2 = requireRemove().remove;
  const mkdirp = requireMkdirs().mkdirp;
  const pathExists = requirePathExists().pathExists;
  const stat2 = requireStat();
  function move2(src2, dest, opts, cb) {
    if (typeof opts === "function") {
      cb = opts;
      opts = {};
    }
    const overwrite = opts.overwrite || opts.clobber || false;
    stat2.checkPaths(src2, dest, "move", (err, stats2) => {
      if (err) return cb(err);
      const { srcStat } = stats2;
      stat2.checkParentPaths(src2, srcStat, dest, "move", (err2) => {
        if (err2) return cb(err2);
        mkdirp(path.dirname(dest), (err3) => {
          if (err3) return cb(err3);
          return doRename(src2, dest, overwrite, cb);
        });
      });
    });
  }
  function doRename(src2, dest, overwrite, cb) {
    if (overwrite) {
      return remove2(dest, (err) => {
        if (err) return cb(err);
        return rename(src2, dest, overwrite, cb);
      });
    }
    pathExists(dest, (err, destExists) => {
      if (err) return cb(err);
      if (destExists) return cb(new Error("dest already exists."));
      return rename(src2, dest, overwrite, cb);
    });
  }
  function rename(src2, dest, overwrite, cb) {
    fs2.rename(src2, dest, (err) => {
      if (!err) return cb();
      if (err.code !== "EXDEV") return cb(err);
      return moveAcrossDevice(src2, dest, overwrite, cb);
    });
  }
  function moveAcrossDevice(src2, dest, overwrite, cb) {
    const opts = {
      overwrite,
      errorOnExist: true
    };
    copy2(src2, dest, opts, (err) => {
      if (err) return cb(err);
      return remove2(src2, cb);
    });
  }
  move_1 = move2;
  return move_1;
}
var move;
var hasRequiredMove;
function requireMove() {
  if (hasRequiredMove) return move;
  hasRequiredMove = 1;
  const u2 = requireUniversalify().fromCallback;
  move = {
    move: u2(requireMove$1())
  };
  return move;
}
var output;
var hasRequiredOutput;
function requireOutput() {
  if (hasRequiredOutput) return output;
  hasRequiredOutput = 1;
  const u2 = requireUniversalify().fromCallback;
  const fs2 = requireGracefulFs();
  const path = require$$1$1;
  const mkdir = requireMkdirs();
  const pathExists = requirePathExists().pathExists;
  function outputFile(file2, data, encoding, callback) {
    if (typeof encoding === "function") {
      callback = encoding;
      encoding = "utf8";
    }
    const dir = path.dirname(file2);
    pathExists(dir, (err, itDoes) => {
      if (err) return callback(err);
      if (itDoes) return fs2.writeFile(file2, data, encoding, callback);
      mkdir.mkdirs(dir, (err2) => {
        if (err2) return callback(err2);
        fs2.writeFile(file2, data, encoding, callback);
      });
    });
  }
  function outputFileSync(file2, ...args) {
    const dir = path.dirname(file2);
    if (fs2.existsSync(dir)) {
      return fs2.writeFileSync(file2, ...args);
    }
    mkdir.mkdirsSync(dir);
    fs2.writeFileSync(file2, ...args);
  }
  output = {
    outputFile: u2(outputFile),
    outputFileSync
  };
  return output;
}
var hasRequiredLib$1;
function requireLib$1() {
  if (hasRequiredLib$1) return lib$1.exports;
  hasRequiredLib$1 = 1;
  (function(module) {
    module.exports = Object.assign(
      {},
      // Export promiseified graceful-fs:
      requireFs(),
      // Export extra methods:
      requireCopySync(),
      requireCopy(),
      requireEmpty(),
      requireEnsure(),
      requireJson(),
      requireMkdirs(),
      requireMoveSync(),
      requireMove(),
      requireOutput(),
      requirePathExists(),
      requireRemove()
    );
    const fs2 = require$$0$2;
    if (Object.getOwnPropertyDescriptor(fs2, "promises")) {
      Object.defineProperty(module.exports, "promises", {
        get() {
          return fs2.promises;
        }
      });
    }
  })(lib$1);
  return lib$1.exports;
}
var now;
var hasRequiredNow;
function requireNow() {
  if (hasRequiredNow) return now;
  hasRequiredNow = 1;
  now = () => /* @__PURE__ */ new Date();
  return now;
}
var fileNameFormatter;
var hasRequiredFileNameFormatter;
function requireFileNameFormatter() {
  if (hasRequiredFileNameFormatter) return fileNameFormatter;
  hasRequiredFileNameFormatter = 1;
  const debug2 = requireBrowser()("streamroller:fileNameFormatter");
  const path = require$$1$1;
  const ZIP_EXT = ".gz";
  const DEFAULT_FILENAME_SEP = ".";
  fileNameFormatter = ({
    file: file2,
    keepFileExt,
    needsIndex,
    alwaysIncludeDate,
    compress,
    fileNameSep
  }) => {
    let FILENAME_SEP = fileNameSep || DEFAULT_FILENAME_SEP;
    const dirAndName = path.join(file2.dir, file2.name);
    const ext = (f2) => f2 + file2.ext;
    const index = (f2, i, d2) => (needsIndex || !d2) && i ? f2 + FILENAME_SEP + i : f2;
    const date = (f2, i, d2) => {
      return (i > 0 || alwaysIncludeDate) && d2 ? f2 + FILENAME_SEP + d2 : f2;
    };
    const gzip = (f2, i) => i && compress ? f2 + ZIP_EXT : f2;
    const parts = keepFileExt ? [date, index, ext, gzip] : [ext, date, index, gzip];
    return ({ date: date2, index: index2 }) => {
      debug2(`_formatFileName: date=${date2}, index=${index2}`);
      return parts.reduce(
        (filename, part) => part(filename, index2, date2),
        dirAndName
      );
    };
  };
  return fileNameFormatter;
}
var fileNameParser;
var hasRequiredFileNameParser;
function requireFileNameParser() {
  if (hasRequiredFileNameParser) return fileNameParser;
  hasRequiredFileNameParser = 1;
  const debug2 = requireBrowser()("streamroller:fileNameParser");
  const ZIP_EXT = ".gz";
  const format2 = requireLib$2();
  const DEFAULT_FILENAME_SEP = ".";
  fileNameParser = ({ file: file2, keepFileExt, pattern, fileNameSep }) => {
    let FILENAME_SEP = fileNameSep || DEFAULT_FILENAME_SEP;
    const zip = (f2, p) => {
      if (f2.endsWith(ZIP_EXT)) {
        debug2("it is gzipped");
        p.isCompressed = true;
        return f2.slice(0, -1 * ZIP_EXT.length);
      }
      return f2;
    };
    const __NOT_MATCHING__ = "__NOT_MATCHING__";
    const extAtEnd = (f2) => {
      if (f2.startsWith(file2.name) && f2.endsWith(file2.ext)) {
        debug2("it starts and ends with the right things");
        return f2.slice(file2.name.length + 1, -1 * file2.ext.length);
      }
      return __NOT_MATCHING__;
    };
    const extInMiddle = (f2) => {
      if (f2.startsWith(file2.base)) {
        debug2("it starts with the right things");
        return f2.slice(file2.base.length + 1);
      }
      return __NOT_MATCHING__;
    };
    const dateAndIndex = (f2, p) => {
      const items = f2.split(FILENAME_SEP);
      let indexStr = items[items.length - 1];
      debug2("items: ", items, ", indexStr: ", indexStr);
      let dateStr = f2;
      if (indexStr !== void 0 && indexStr.match(/^\d+$/)) {
        dateStr = f2.slice(0, -1 * (indexStr.length + 1));
        debug2(`dateStr is ${dateStr}`);
        if (pattern && !dateStr) {
          dateStr = indexStr;
          indexStr = "0";
        }
      } else {
        indexStr = "0";
      }
      try {
        const date = format2.parse(pattern, dateStr, new Date(0, 0));
        if (format2.asString(pattern, date) !== dateStr) return f2;
        p.index = parseInt(indexStr, 10);
        p.date = dateStr;
        p.timestamp = date.getTime();
        return "";
      } catch (e2) {
        debug2(`Problem parsing ${dateStr} as ${pattern}, error was: `, e2);
        return f2;
      }
    };
    const index = (f2, p) => {
      if (f2.match(/^\d+$/)) {
        debug2("it has an index");
        p.index = parseInt(f2, 10);
        return "";
      }
      return f2;
    };
    let parts = [
      zip,
      keepFileExt ? extAtEnd : extInMiddle,
      pattern ? dateAndIndex : index
    ];
    return (filename) => {
      let result = { filename, index: 0, isCompressed: false };
      let whatsLeftOver = parts.reduce(
        (remains, part) => part(remains, result),
        filename
      );
      return whatsLeftOver ? null : result;
    };
  };
  return fileNameParser;
}
var moveAndMaybeCompressFile_1;
var hasRequiredMoveAndMaybeCompressFile;
function requireMoveAndMaybeCompressFile() {
  if (hasRequiredMoveAndMaybeCompressFile) return moveAndMaybeCompressFile_1;
  hasRequiredMoveAndMaybeCompressFile = 1;
  const debug2 = requireBrowser()("streamroller:moveAndMaybeCompressFile");
  const fs2 = requireLib$1();
  const zlib = require$$13;
  const _parseOption = function(rawOptions) {
    const defaultOptions = {
      mode: parseInt("0600", 8),
      compress: false
    };
    const options = Object.assign({}, defaultOptions, rawOptions);
    debug2(`_parseOption: moveAndMaybeCompressFile called with option=${JSON.stringify(options)}`);
    return options;
  };
  const moveAndMaybeCompressFile = async (sourceFilePath, targetFilePath, options) => {
    options = _parseOption(options);
    if (sourceFilePath === targetFilePath) {
      debug2(`moveAndMaybeCompressFile: source and target are the same, not doing anything`);
      return;
    }
    if (await fs2.pathExists(sourceFilePath)) {
      debug2(
        `moveAndMaybeCompressFile: moving file from ${sourceFilePath} to ${targetFilePath} ${options.compress ? "with" : "without"} compress`
      );
      if (options.compress) {
        await new Promise((resolve2, reject) => {
          let isCreated = false;
          const writeStream = fs2.createWriteStream(targetFilePath, { mode: options.mode, flags: "wx" }).on("open", () => {
            isCreated = true;
            const readStream = fs2.createReadStream(sourceFilePath).on("open", () => {
              readStream.pipe(zlib.createGzip()).pipe(writeStream);
            }).on("error", (e2) => {
              debug2(`moveAndMaybeCompressFile: error reading ${sourceFilePath}`, e2);
              writeStream.destroy(e2);
            });
          }).on("finish", () => {
            debug2(`moveAndMaybeCompressFile: finished compressing ${targetFilePath}, deleting ${sourceFilePath}`);
            fs2.unlink(sourceFilePath).then(resolve2).catch((e2) => {
              debug2(`moveAndMaybeCompressFile: error deleting ${sourceFilePath}, truncating instead`, e2);
              fs2.truncate(sourceFilePath).then(resolve2).catch((e3) => {
                debug2(`moveAndMaybeCompressFile: error truncating ${sourceFilePath}`, e3);
                reject(e3);
              });
            });
          }).on("error", (e2) => {
            if (!isCreated) {
              debug2(`moveAndMaybeCompressFile: error creating ${targetFilePath}`, e2);
              reject(e2);
            } else {
              debug2(`moveAndMaybeCompressFile: error writing ${targetFilePath}, deleting`, e2);
              fs2.unlink(targetFilePath).then(() => {
                reject(e2);
              }).catch((e3) => {
                debug2(`moveAndMaybeCompressFile: error deleting ${targetFilePath}`, e3);
                reject(e3);
              });
            }
          });
        }).catch(() => {
        });
      } else {
        debug2(`moveAndMaybeCompressFile: renaming ${sourceFilePath} to ${targetFilePath}`);
        try {
          await fs2.move(sourceFilePath, targetFilePath, { overwrite: true });
        } catch (e2) {
          debug2(`moveAndMaybeCompressFile: error renaming ${sourceFilePath} to ${targetFilePath}`, e2);
          if (e2.code !== "ENOENT") {
            debug2(`moveAndMaybeCompressFile: trying copy+truncate instead`);
            try {
              await fs2.copy(sourceFilePath, targetFilePath, { overwrite: true });
              await fs2.truncate(sourceFilePath);
            } catch (e3) {
              debug2(`moveAndMaybeCompressFile: error copy+truncate`, e3);
            }
          }
        }
      }
    }
  };
  moveAndMaybeCompressFile_1 = moveAndMaybeCompressFile;
  return moveAndMaybeCompressFile_1;
}
var RollingFileWriteStream_1;
var hasRequiredRollingFileWriteStream;
function requireRollingFileWriteStream() {
  if (hasRequiredRollingFileWriteStream) return RollingFileWriteStream_1;
  hasRequiredRollingFileWriteStream = 1;
  const debug2 = requireBrowser()("streamroller:RollingFileWriteStream");
  const fs2 = requireLib$1();
  const path = require$$1$1;
  const os = require$$1$3;
  const newNow = requireNow();
  const format2 = requireLib$2();
  const { Writable } = require$$12;
  const fileNameFormatter2 = requireFileNameFormatter();
  const fileNameParser2 = requireFileNameParser();
  const moveAndMaybeCompressFile = requireMoveAndMaybeCompressFile();
  const deleteFiles = (fileNames) => {
    debug2(`deleteFiles: files to delete: ${fileNames}`);
    return Promise.all(fileNames.map((f2) => fs2.unlink(f2).catch((e2) => {
      debug2(`deleteFiles: error when unlinking ${f2}, ignoring. Error was ${e2}`);
    })));
  };
  class RollingFileWriteStream extends Writable {
    /**
     * Create a RollingFileWriteStream
     * @constructor
     * @param {string} filePath - The file path to write.
     * @param {object} options - The extra options
     * @param {number} options.numToKeep - The max numbers of files to keep.
     * @param {number} options.maxSize - The maxSize one file can reach. Unit is Byte.
     *                                   This should be more than 1024. The default is 0.
     *                                   If not specified or 0, then no log rolling will happen.
     * @param {string} options.mode - The mode of the files. The default is '0600'. Refer to stream.writable for more.
     * @param {string} options.flags - The default is 'a'. Refer to stream.flags for more.
     * @param {boolean} options.compress - Whether to compress backup files.
     * @param {boolean} options.keepFileExt - Whether to keep the file extension.
     * @param {string} options.pattern - The date string pattern in the file name.
     * @param {boolean} options.alwaysIncludePattern - Whether to add date to the name of the first file.
     */
    constructor(filePath, options) {
      debug2(`constructor: creating RollingFileWriteStream. path=${filePath}`);
      if (typeof filePath !== "string" || filePath.length === 0) {
        throw new Error(`Invalid filename: ${filePath}`);
      } else if (filePath.endsWith(path.sep)) {
        throw new Error(`Filename is a directory: ${filePath}`);
      } else if (filePath.indexOf(`~${path.sep}`) === 0) {
        filePath = filePath.replace("~", os.homedir());
      }
      super(options);
      this.options = this._parseOption(options);
      this.fileObject = path.parse(filePath);
      if (this.fileObject.dir === "") {
        this.fileObject = path.parse(path.join(process.cwd(), filePath));
      }
      this.fileFormatter = fileNameFormatter2({
        file: this.fileObject,
        alwaysIncludeDate: this.options.alwaysIncludePattern,
        needsIndex: this.options.maxSize < Number.MAX_SAFE_INTEGER,
        compress: this.options.compress,
        keepFileExt: this.options.keepFileExt,
        fileNameSep: this.options.fileNameSep
      });
      this.fileNameParser = fileNameParser2({
        file: this.fileObject,
        keepFileExt: this.options.keepFileExt,
        pattern: this.options.pattern,
        fileNameSep: this.options.fileNameSep
      });
      this.state = {
        currentSize: 0
      };
      if (this.options.pattern) {
        this.state.currentDate = format2(this.options.pattern, newNow());
      }
      this.filename = this.fileFormatter({
        index: 0,
        date: this.state.currentDate
      });
      if (["a", "a+", "as", "as+"].includes(this.options.flags)) {
        this._setExistingSizeAndDate();
      }
      debug2(
        `constructor: create new file ${this.filename}, state=${JSON.stringify(
          this.state
        )}`
      );
      this._renewWriteStream();
    }
    _setExistingSizeAndDate() {
      try {
        const stats2 = fs2.statSync(this.filename);
        this.state.currentSize = stats2.size;
        if (this.options.pattern) {
          this.state.currentDate = format2(this.options.pattern, stats2.mtime);
        }
      } catch (e2) {
        return;
      }
    }
    _parseOption(rawOptions) {
      const defaultOptions = {
        maxSize: 0,
        numToKeep: Number.MAX_SAFE_INTEGER,
        encoding: "utf8",
        mode: parseInt("0600", 8),
        flags: "a",
        compress: false,
        keepFileExt: false,
        alwaysIncludePattern: false
      };
      const options = Object.assign({}, defaultOptions, rawOptions);
      if (!options.maxSize) {
        delete options.maxSize;
      } else if (options.maxSize <= 0) {
        throw new Error(`options.maxSize (${options.maxSize}) should be > 0`);
      }
      if (options.numBackups || options.numBackups === 0) {
        if (options.numBackups < 0) {
          throw new Error(`options.numBackups (${options.numBackups}) should be >= 0`);
        } else if (options.numBackups >= Number.MAX_SAFE_INTEGER) {
          throw new Error(`options.numBackups (${options.numBackups}) should be < Number.MAX_SAFE_INTEGER`);
        } else {
          options.numToKeep = options.numBackups + 1;
        }
      } else if (options.numToKeep <= 0) {
        throw new Error(`options.numToKeep (${options.numToKeep}) should be > 0`);
      }
      debug2(
        `_parseOption: creating stream with option=${JSON.stringify(options)}`
      );
      return options;
    }
    _final(callback) {
      this.currentFileStream.end("", this.options.encoding, callback);
    }
    _write(chunk, encoding, callback) {
      this._shouldRoll().then(() => {
        debug2(
          `_write: writing chunk. file=${this.currentFileStream.path} state=${JSON.stringify(this.state)} chunk=${chunk}`
        );
        this.currentFileStream.write(chunk, encoding, (e2) => {
          this.state.currentSize += chunk.length;
          callback(e2);
        });
      });
    }
    async _shouldRoll() {
      if (this._dateChanged() || this._tooBig()) {
        debug2(
          `_shouldRoll: rolling because dateChanged? ${this._dateChanged()} or tooBig? ${this._tooBig()}`
        );
        await this._roll();
      }
    }
    _dateChanged() {
      return this.state.currentDate && this.state.currentDate !== format2(this.options.pattern, newNow());
    }
    _tooBig() {
      return this.state.currentSize >= this.options.maxSize;
    }
    _roll() {
      debug2(`_roll: closing the current stream`);
      return new Promise((resolve2, reject) => {
        this.currentFileStream.end("", this.options.encoding, () => {
          this._moveOldFiles().then(resolve2).catch(reject);
        });
      });
    }
    async _moveOldFiles() {
      const files = await this._getExistingFiles();
      const todaysFiles = this.state.currentDate ? files.filter((f2) => f2.date === this.state.currentDate) : files;
      for (let i = todaysFiles.length; i >= 0; i--) {
        debug2(`_moveOldFiles: i = ${i}`);
        const sourceFilePath = this.fileFormatter({
          date: this.state.currentDate,
          index: i
        });
        const targetFilePath = this.fileFormatter({
          date: this.state.currentDate,
          index: i + 1
        });
        const moveAndCompressOptions = {
          compress: this.options.compress && i === 0,
          mode: this.options.mode
        };
        await moveAndMaybeCompressFile(
          sourceFilePath,
          targetFilePath,
          moveAndCompressOptions
        );
      }
      this.state.currentSize = 0;
      this.state.currentDate = this.state.currentDate ? format2(this.options.pattern, newNow()) : null;
      debug2(
        `_moveOldFiles: finished rolling files. state=${JSON.stringify(
          this.state
        )}`
      );
      this._renewWriteStream();
      await new Promise((resolve2, reject) => {
        this.currentFileStream.write("", "utf8", () => {
          this._clean().then(resolve2).catch(reject);
        });
      });
    }
    // Sorted from the oldest to the latest
    async _getExistingFiles() {
      const files = await fs2.readdir(this.fileObject.dir).catch(
        /* istanbul ignore next: will not happen on windows */
        () => []
      );
      debug2(`_getExistingFiles: files=${files}`);
      const existingFileDetails = files.map((n) => this.fileNameParser(n)).filter((n) => n);
      const getKey = (n) => (n.timestamp ? n.timestamp : newNow().getTime()) - n.index;
      existingFileDetails.sort((a, b) => getKey(a) - getKey(b));
      return existingFileDetails;
    }
    _renewWriteStream() {
      const filePath = this.fileFormatter({
        date: this.state.currentDate,
        index: 0
      });
      const mkdir = (dir) => {
        try {
          return fs2.mkdirSync(dir, { recursive: true });
        } catch (e2) {
          if (e2.code === "ENOENT") {
            mkdir(path.dirname(dir));
            return mkdir(dir);
          }
          if (e2.code !== "EEXIST" && e2.code !== "EROFS") {
            throw e2;
          } else {
            try {
              if (fs2.statSync(dir).isDirectory()) {
                return dir;
              }
              throw e2;
            } catch (err) {
              throw e2;
            }
          }
        }
      };
      mkdir(this.fileObject.dir);
      const ops = {
        flags: this.options.flags,
        encoding: this.options.encoding,
        mode: this.options.mode
      };
      const renameKey = function(obj, oldKey, newKey) {
        obj[newKey] = obj[oldKey];
        delete obj[oldKey];
        return obj;
      };
      fs2.appendFileSync(filePath, "", renameKey({ ...ops }, "flags", "flag"));
      this.currentFileStream = fs2.createWriteStream(filePath, ops);
      this.currentFileStream.on("error", (e2) => {
        this.emit("error", e2);
      });
    }
    async _clean() {
      const existingFileDetails = await this._getExistingFiles();
      debug2(
        `_clean: numToKeep = ${this.options.numToKeep}, existingFiles = ${existingFileDetails.length}`
      );
      debug2("_clean: existing files are: ", existingFileDetails);
      if (this._tooManyFiles(existingFileDetails.length)) {
        const fileNamesToRemove = existingFileDetails.slice(0, existingFileDetails.length - this.options.numToKeep).map((f2) => path.format({ dir: this.fileObject.dir, base: f2.filename }));
        await deleteFiles(fileNamesToRemove);
      }
    }
    _tooManyFiles(numFiles) {
      return this.options.numToKeep > 0 && numFiles > this.options.numToKeep;
    }
  }
  RollingFileWriteStream_1 = RollingFileWriteStream;
  return RollingFileWriteStream_1;
}
var RollingFileStream_1;
var hasRequiredRollingFileStream;
function requireRollingFileStream() {
  if (hasRequiredRollingFileStream) return RollingFileStream_1;
  hasRequiredRollingFileStream = 1;
  const RollingFileWriteStream = requireRollingFileWriteStream();
  class RollingFileStream extends RollingFileWriteStream {
    constructor(filename, size, backups, options) {
      if (!options) {
        options = {};
      }
      if (size) {
        options.maxSize = size;
      }
      if (!options.numBackups && options.numBackups !== 0) {
        if (!backups && backups !== 0) {
          backups = 1;
        }
        options.numBackups = backups;
      }
      super(filename, options);
      this.backups = options.numBackups;
      this.size = this.options.maxSize;
    }
    get theStream() {
      return this.currentFileStream;
    }
  }
  RollingFileStream_1 = RollingFileStream;
  return RollingFileStream_1;
}
var DateRollingFileStream_1;
var hasRequiredDateRollingFileStream;
function requireDateRollingFileStream() {
  if (hasRequiredDateRollingFileStream) return DateRollingFileStream_1;
  hasRequiredDateRollingFileStream = 1;
  const RollingFileWriteStream = requireRollingFileWriteStream();
  class DateRollingFileStream extends RollingFileWriteStream {
    constructor(filename, pattern, options) {
      if (pattern && typeof pattern === "object") {
        options = pattern;
        pattern = null;
      }
      if (!options) {
        options = {};
      }
      if (!pattern) {
        pattern = "yyyy-MM-dd";
      }
      options.pattern = pattern;
      if (!options.numBackups && options.numBackups !== 0) {
        if (!options.daysToKeep && options.daysToKeep !== 0) {
          options.daysToKeep = 1;
        } else {
          process.emitWarning(
            "options.daysToKeep is deprecated due to the confusion it causes when used together with file size rolling. Please use options.numBackups instead.",
            "DeprecationWarning",
            "streamroller-DEP0001"
          );
        }
        options.numBackups = options.daysToKeep;
      } else {
        options.daysToKeep = options.numBackups;
      }
      super(filename, options);
      this.mode = this.options.mode;
    }
    get theStream() {
      return this.currentFileStream;
    }
  }
  DateRollingFileStream_1 = DateRollingFileStream;
  return DateRollingFileStream_1;
}
var lib;
var hasRequiredLib;
function requireLib() {
  if (hasRequiredLib) return lib;
  hasRequiredLib = 1;
  lib = {
    RollingFileWriteStream: requireRollingFileWriteStream(),
    RollingFileStream: requireRollingFileStream(),
    DateRollingFileStream: requireDateRollingFileStream()
  };
  return lib;
}
var hasRequiredFile;
function requireFile() {
  if (hasRequiredFile) return file$1;
  hasRequiredFile = 1;
  const debug2 = requireBrowser()("log4js:file");
  const path = require$$1$1;
  const streams = requireLib();
  const os = require$$1$3;
  const eol = os.EOL;
  let mainSighupListenerStarted = false;
  const sighupListeners = /* @__PURE__ */ new Set();
  function mainSighupHandler() {
    sighupListeners.forEach((app) => {
      app.sighupHandler();
    });
  }
  function fileAppender(file2, layout, logSize, numBackups, options, timezoneOffset) {
    if (typeof file2 !== "string" || file2.length === 0) {
      throw new Error(`Invalid filename: ${file2}`);
    } else if (file2.endsWith(path.sep)) {
      throw new Error(`Filename is a directory: ${file2}`);
    } else if (file2.indexOf(`~${path.sep}`) === 0) {
      file2 = file2.replace("~", os.homedir());
    }
    file2 = path.normalize(file2);
    numBackups = !numBackups && numBackups !== 0 ? 5 : numBackups;
    debug2(
      "Creating file appender (",
      file2,
      ", ",
      logSize,
      ", ",
      numBackups,
      ", ",
      options,
      ", ",
      timezoneOffset,
      ")"
    );
    function openTheStream(filePath, fileSize, numFiles, opt) {
      const stream2 = new streams.RollingFileStream(
        filePath,
        fileSize,
        numFiles,
        opt
      );
      stream2.on("error", (err) => {
        console.error(
          "log4js.fileAppender - Writing to file %s, error happened ",
          filePath,
          err
        );
      });
      stream2.on("drain", () => {
        process.emit("log4js:pause", false);
      });
      return stream2;
    }
    let writer = openTheStream(file2, logSize, numBackups, options);
    const app = function(loggingEvent) {
      if (!writer.writable) {
        return;
      }
      if (options.removeColor === true) {
        const regex = /\x1b[[0-9;]*m/g;
        loggingEvent.data = loggingEvent.data.map((d2) => {
          if (typeof d2 === "string") return d2.replace(regex, "");
          return d2;
        });
      }
      if (!writer.write(layout(loggingEvent, timezoneOffset) + eol, "utf8")) {
        process.emit("log4js:pause", true);
      }
    };
    app.reopen = function() {
      writer.end(() => {
        writer = openTheStream(file2, logSize, numBackups, options);
      });
    };
    app.sighupHandler = function() {
      debug2("SIGHUP handler called.");
      app.reopen();
    };
    app.shutdown = function(complete) {
      sighupListeners.delete(app);
      if (sighupListeners.size === 0 && mainSighupListenerStarted) {
        process.removeListener("SIGHUP", mainSighupHandler);
        mainSighupListenerStarted = false;
      }
      writer.end("", "utf-8", complete);
    };
    sighupListeners.add(app);
    if (!mainSighupListenerStarted) {
      process.on("SIGHUP", mainSighupHandler);
      mainSighupListenerStarted = true;
    }
    return app;
  }
  function configure(config, layouts2) {
    let layout = layouts2.basicLayout;
    if (config.layout) {
      layout = layouts2.layout(config.layout.type, config.layout);
    }
    config.mode = config.mode || 384;
    return fileAppender(
      config.filename,
      layout,
      config.maxLogSize,
      config.backups,
      config,
      config.timezoneOffset
    );
  }
  file$1.configure = configure;
  return file$1;
}
var dateFile = {};
var hasRequiredDateFile;
function requireDateFile() {
  if (hasRequiredDateFile) return dateFile;
  hasRequiredDateFile = 1;
  const streams = requireLib();
  const os = require$$1$3;
  const eol = os.EOL;
  function openTheStream(filename, pattern, options) {
    const stream2 = new streams.DateRollingFileStream(filename, pattern, options);
    stream2.on("error", (err) => {
      console.error(
        "log4js.dateFileAppender - Writing to file %s, error happened ",
        filename,
        err
      );
    });
    stream2.on("drain", () => {
      process.emit("log4js:pause", false);
    });
    return stream2;
  }
  function appender(filename, pattern, layout, options, timezoneOffset) {
    options.maxSize = options.maxLogSize;
    const writer = openTheStream(filename, pattern, options);
    const app = function(logEvent) {
      if (!writer.writable) {
        return;
      }
      if (!writer.write(layout(logEvent, timezoneOffset) + eol, "utf8")) {
        process.emit("log4js:pause", true);
      }
    };
    app.shutdown = function(complete) {
      writer.end("", "utf-8", complete);
    };
    return app;
  }
  function configure(config, layouts2) {
    let layout = layouts2.basicLayout;
    if (config.layout) {
      layout = layouts2.layout(config.layout.type, config.layout);
    }
    if (!config.alwaysIncludePattern) {
      config.alwaysIncludePattern = false;
    }
    config.mode = config.mode || 384;
    return appender(
      config.filename,
      config.pattern,
      layout,
      config,
      config.timezoneOffset
    );
  }
  dateFile.configure = configure;
  return dateFile;
}
var fileSync = {};
var hasRequiredFileSync;
function requireFileSync() {
  if (hasRequiredFileSync) return fileSync;
  hasRequiredFileSync = 1;
  const debug2 = requireBrowser()("log4js:fileSync");
  const path = require$$1$1;
  const fs2 = require$$0$2;
  const os = require$$1$3;
  const eol = os.EOL;
  function touchFile(file2, options) {
    const mkdir = (dir) => {
      try {
        return fs2.mkdirSync(dir, { recursive: true });
      } catch (e2) {
        if (e2.code === "ENOENT") {
          mkdir(path.dirname(dir));
          return mkdir(dir);
        }
        if (e2.code !== "EEXIST" && e2.code !== "EROFS") {
          throw e2;
        } else {
          try {
            if (fs2.statSync(dir).isDirectory()) {
              return dir;
            }
            throw e2;
          } catch (err) {
            throw e2;
          }
        }
      }
    };
    mkdir(path.dirname(file2));
    fs2.appendFileSync(file2, "", { mode: options.mode, flag: options.flags });
  }
  class RollingFileSync {
    constructor(filename, maxLogSize, backups, options) {
      debug2("In RollingFileStream");
      if (maxLogSize < 0) {
        throw new Error(`maxLogSize (${maxLogSize}) should be > 0`);
      }
      this.filename = filename;
      this.size = maxLogSize;
      this.backups = backups;
      this.options = options;
      this.currentSize = 0;
      function currentFileSize(file2) {
        let fileSize = 0;
        try {
          fileSize = fs2.statSync(file2).size;
        } catch (e2) {
          touchFile(file2, options);
        }
        return fileSize;
      }
      this.currentSize = currentFileSize(this.filename);
    }
    shouldRoll() {
      debug2(
        "should roll with current size %d, and max size %d",
        this.currentSize,
        this.size
      );
      return this.currentSize >= this.size;
    }
    roll(filename) {
      const that = this;
      const nameMatcher = new RegExp(`^${path.basename(filename)}`);
      function justTheseFiles(item) {
        return nameMatcher.test(item);
      }
      function index(filename_) {
        return parseInt(filename_.slice(`${path.basename(filename)}.`.length), 10) || 0;
      }
      function byIndex(a, b) {
        return index(a) - index(b);
      }
      function increaseFileIndex(fileToRename) {
        const idx = index(fileToRename);
        debug2(`Index of ${fileToRename} is ${idx}`);
        if (that.backups === 0) {
          fs2.truncateSync(filename, 0);
        } else if (idx < that.backups) {
          try {
            fs2.unlinkSync(`${filename}.${idx + 1}`);
          } catch (e2) {
          }
          debug2(`Renaming ${fileToRename} -> ${filename}.${idx + 1}`);
          fs2.renameSync(
            path.join(path.dirname(filename), fileToRename),
            `${filename}.${idx + 1}`
          );
        }
      }
      function renameTheFiles() {
        debug2("Renaming the old files");
        const files = fs2.readdirSync(path.dirname(filename));
        files.filter(justTheseFiles).sort(byIndex).reverse().forEach(increaseFileIndex);
      }
      debug2("Rolling, rolling, rolling");
      renameTheFiles();
    }
    // eslint-disable-next-line no-unused-vars
    write(chunk, encoding) {
      const that = this;
      function writeTheChunk() {
        debug2("writing the chunk to the file");
        that.currentSize += chunk.length;
        fs2.appendFileSync(that.filename, chunk);
      }
      debug2("in write");
      if (this.shouldRoll()) {
        this.currentSize = 0;
        this.roll(this.filename);
      }
      writeTheChunk();
    }
  }
  function fileAppender(file2, layout, logSize, numBackups, options, timezoneOffset) {
    if (typeof file2 !== "string" || file2.length === 0) {
      throw new Error(`Invalid filename: ${file2}`);
    } else if (file2.endsWith(path.sep)) {
      throw new Error(`Filename is a directory: ${file2}`);
    } else if (file2.indexOf(`~${path.sep}`) === 0) {
      file2 = file2.replace("~", os.homedir());
    }
    file2 = path.normalize(file2);
    numBackups = !numBackups && numBackups !== 0 ? 5 : numBackups;
    debug2(
      "Creating fileSync appender (",
      file2,
      ", ",
      logSize,
      ", ",
      numBackups,
      ", ",
      options,
      ", ",
      timezoneOffset,
      ")"
    );
    function openTheStream(filePath, fileSize, numFiles) {
      let stream2;
      if (fileSize) {
        stream2 = new RollingFileSync(filePath, fileSize, numFiles, options);
      } else {
        stream2 = ((f2) => {
          touchFile(f2, options);
          return {
            write(data) {
              fs2.appendFileSync(f2, data);
            }
          };
        })(filePath);
      }
      return stream2;
    }
    const logFile = openTheStream(file2, logSize, numBackups);
    return (loggingEvent) => {
      logFile.write(layout(loggingEvent, timezoneOffset) + eol);
    };
  }
  function configure(config, layouts2) {
    let layout = layouts2.basicLayout;
    if (config.layout) {
      layout = layouts2.layout(config.layout.type, config.layout);
    }
    const options = {
      flags: config.flags || "a",
      encoding: config.encoding || "utf8",
      mode: config.mode || 384
    };
    return fileAppender(
      config.filename,
      layout,
      config.maxLogSize,
      config.backups,
      options,
      config.timezoneOffset
    );
  }
  fileSync.configure = configure;
  return fileSync;
}
var tcp = {};
var hasRequiredTcp;
function requireTcp() {
  if (hasRequiredTcp) return tcp;
  hasRequiredTcp = 1;
  const debug2 = requireBrowser()("log4js:tcp");
  const net = require$$8;
  function appender(config, layout) {
    let canWrite = false;
    const buffer2 = [];
    let socket;
    let shutdownAttempts = 3;
    let endMsg = "__LOG4JS__";
    function write(loggingEvent) {
      debug2("Writing log event to socket");
      canWrite = socket.write(`${layout(loggingEvent)}${endMsg}`, "utf8");
    }
    function emptyBuffer() {
      let evt;
      debug2("emptying buffer");
      while (evt = buffer2.shift()) {
        write(evt);
      }
    }
    function createSocket() {
      debug2(
        `appender creating socket to ${config.host || "localhost"}:${config.port || 5e3}`
      );
      endMsg = `${config.endMsg || "__LOG4JS__"}`;
      socket = net.createConnection(
        config.port || 5e3,
        config.host || "localhost"
      );
      socket.on("connect", () => {
        debug2("socket connected");
        emptyBuffer();
        canWrite = true;
      });
      socket.on("drain", () => {
        debug2("drain event received, emptying buffer");
        canWrite = true;
        emptyBuffer();
      });
      socket.on("timeout", socket.end.bind(socket));
      socket.on("error", (e2) => {
        debug2("connection error", e2);
        canWrite = false;
        emptyBuffer();
      });
      socket.on("close", createSocket);
    }
    createSocket();
    function log2(loggingEvent) {
      if (canWrite) {
        write(loggingEvent);
      } else {
        debug2("buffering log event because it cannot write at the moment");
        buffer2.push(loggingEvent);
      }
    }
    log2.shutdown = function(cb) {
      debug2("shutdown called");
      if (buffer2.length && shutdownAttempts) {
        debug2("buffer has items, waiting 100ms to empty");
        shutdownAttempts -= 1;
        setTimeout(() => {
          log2.shutdown(cb);
        }, 100);
      } else {
        socket.removeAllListeners("close");
        socket.end(cb);
      }
    };
    return log2;
  }
  function configure(config, layouts2) {
    debug2(`configure with config = ${config}`);
    let layout = function(loggingEvent) {
      return loggingEvent.serialise();
    };
    if (config.layout) {
      layout = layouts2.layout(config.layout.type, config.layout);
    }
    return appender(config, layout);
  }
  tcp.configure = configure;
  return tcp;
}
var hasRequiredAppenders;
function requireAppenders() {
  if (hasRequiredAppenders) return appenders.exports;
  hasRequiredAppenders = 1;
  const path = require$$1$1;
  const debug2 = requireBrowser()("log4js:appenders");
  const configuration2 = requireConfiguration();
  const clustering2 = requireClustering();
  const levels2 = requireLevels();
  const layouts2 = requireLayouts();
  const adapters2 = requireAdapters();
  const coreAppenders = /* @__PURE__ */ new Map();
  coreAppenders.set("console", requireConsole());
  coreAppenders.set("stdout", requireStdout());
  coreAppenders.set("stderr", requireStderr());
  coreAppenders.set("logLevelFilter", requireLogLevelFilter());
  coreAppenders.set("categoryFilter", requireCategoryFilter());
  coreAppenders.set("noLogFilter", requireNoLogFilter());
  coreAppenders.set("file", requireFile());
  coreAppenders.set("dateFile", requireDateFile());
  coreAppenders.set("fileSync", requireFileSync());
  coreAppenders.set("tcp", requireTcp());
  const appenders$1 = /* @__PURE__ */ new Map();
  const tryLoading = (modulePath, config) => {
    let resolvedPath;
    try {
      const modulePathCJS = `${modulePath}.cjs`;
      resolvedPath = require.resolve(modulePathCJS);
      debug2("Loading module from ", modulePathCJS);
    } catch (e2) {
      resolvedPath = modulePath;
      debug2("Loading module from ", modulePath);
    }
    try {
      return commonjsRequire(resolvedPath);
    } catch (e2) {
      configuration2.throwExceptionIf(
        config,
        e2.code !== "MODULE_NOT_FOUND",
        `appender "${modulePath}" could not be loaded (error was: ${e2})`
      );
      return void 0;
    }
  };
  const loadAppenderModule = (type, config) => coreAppenders.get(type) || tryLoading(`./${type}`, config) || tryLoading(type, config) || require.main && require.main.filename && tryLoading(path.join(path.dirname(require.main.filename), type), config) || tryLoading(path.join(process.cwd(), type), config);
  const appendersLoading = /* @__PURE__ */ new Set();
  const getAppender = (name, config) => {
    if (appenders$1.has(name)) return appenders$1.get(name);
    if (!config.appenders[name]) return false;
    if (appendersLoading.has(name))
      throw new Error(`Dependency loop detected for appender ${name}.`);
    appendersLoading.add(name);
    debug2(`Creating appender ${name}`);
    const appender = createAppender(name, config);
    appendersLoading.delete(name);
    appenders$1.set(name, appender);
    return appender;
  };
  const createAppender = (name, config) => {
    const appenderConfig = config.appenders[name];
    const appenderModule = appenderConfig.type.configure ? appenderConfig.type : loadAppenderModule(appenderConfig.type, config);
    configuration2.throwExceptionIf(
      config,
      configuration2.not(appenderModule),
      `appender "${name}" is not valid (type "${appenderConfig.type}" could not be found)`
    );
    if (appenderModule.appender) {
      process.emitWarning(
        `Appender ${appenderConfig.type} exports an appender function.`,
        "DeprecationWarning",
        "log4js-node-DEP0001"
      );
      debug2(
        "[log4js-node-DEP0001]",
        `DEPRECATION: Appender ${appenderConfig.type} exports an appender function.`
      );
    }
    if (appenderModule.shutdown) {
      process.emitWarning(
        `Appender ${appenderConfig.type} exports a shutdown function.`,
        "DeprecationWarning",
        "log4js-node-DEP0002"
      );
      debug2(
        "[log4js-node-DEP0002]",
        `DEPRECATION: Appender ${appenderConfig.type} exports a shutdown function.`
      );
    }
    debug2(`${name}: clustering.isMaster ? ${clustering2.isMaster()}`);
    debug2(
      // eslint-disable-next-line global-require
      `${name}: appenderModule is ${require$$1$2.inspect(appenderModule)}`
    );
    return clustering2.onlyOnMaster(
      () => {
        debug2(
          `calling appenderModule.configure for ${name} / ${appenderConfig.type}`
        );
        return appenderModule.configure(
          adapters2.modifyConfig(appenderConfig),
          layouts2,
          (appender) => getAppender(appender, config),
          levels2
        );
      },
      /* istanbul ignore next: fn never gets called by non-master yet needed to pass config validation */
      () => {
      }
    );
  };
  const setup = (config) => {
    appenders$1.clear();
    appendersLoading.clear();
    if (!config) {
      return;
    }
    const usedAppenders = [];
    Object.values(config.categories).forEach((category) => {
      usedAppenders.push(...category.appenders);
    });
    Object.keys(config.appenders).forEach((name) => {
      if (usedAppenders.includes(name) || config.appenders[name].type === "tcp-server" || config.appenders[name].type === "multiprocess") {
        getAppender(name, config);
      }
    });
  };
  const init = () => {
    setup();
  };
  init();
  configuration2.addListener((config) => {
    configuration2.throwExceptionIf(
      config,
      configuration2.not(configuration2.anObject(config.appenders)),
      'must have a property "appenders" of type object.'
    );
    const appenderNames = Object.keys(config.appenders);
    configuration2.throwExceptionIf(
      config,
      configuration2.not(appenderNames.length),
      "must define at least one appender."
    );
    appenderNames.forEach((name) => {
      configuration2.throwExceptionIf(
        config,
        configuration2.not(config.appenders[name].type),
        `appender "${name}" is not valid (must be an object with property "type")`
      );
    });
  });
  configuration2.addListener(setup);
  appenders.exports = appenders$1;
  appenders.exports.init = init;
  return appenders.exports;
}
var categories = { exports: {} };
var hasRequiredCategories;
function requireCategories() {
  if (hasRequiredCategories) return categories.exports;
  hasRequiredCategories = 1;
  (function(module) {
    const debug2 = requireBrowser()("log4js:categories");
    const configuration2 = requireConfiguration();
    const levels2 = requireLevels();
    const appenders2 = requireAppenders();
    const categories2 = /* @__PURE__ */ new Map();
    function inheritFromParent(config, category, categoryName) {
      if (category.inherit === false) return;
      const lastDotIndex = categoryName.lastIndexOf(".");
      if (lastDotIndex < 0) return;
      const parentCategoryName = categoryName.slice(0, lastDotIndex);
      let parentCategory = config.categories[parentCategoryName];
      if (!parentCategory) {
        parentCategory = { inherit: true, appenders: [] };
      }
      inheritFromParent(config, parentCategory, parentCategoryName);
      if (!config.categories[parentCategoryName] && parentCategory.appenders && parentCategory.appenders.length && parentCategory.level) {
        config.categories[parentCategoryName] = parentCategory;
      }
      category.appenders = category.appenders || [];
      category.level = category.level || parentCategory.level;
      parentCategory.appenders.forEach((ap) => {
        if (!category.appenders.includes(ap)) {
          category.appenders.push(ap);
        }
      });
      category.parent = parentCategory;
    }
    function addCategoryInheritance(config) {
      if (!config.categories) return;
      const categoryNames = Object.keys(config.categories);
      categoryNames.forEach((name) => {
        const category = config.categories[name];
        inheritFromParent(config, category, name);
      });
    }
    configuration2.addPreProcessingListener(
      (config) => addCategoryInheritance(config)
    );
    configuration2.addListener((config) => {
      configuration2.throwExceptionIf(
        config,
        configuration2.not(configuration2.anObject(config.categories)),
        'must have a property "categories" of type object.'
      );
      const categoryNames = Object.keys(config.categories);
      configuration2.throwExceptionIf(
        config,
        configuration2.not(categoryNames.length),
        "must define at least one category."
      );
      categoryNames.forEach((name) => {
        const category = config.categories[name];
        configuration2.throwExceptionIf(
          config,
          [
            configuration2.not(category.appenders),
            configuration2.not(category.level)
          ],
          `category "${name}" is not valid (must be an object with properties "appenders" and "level")`
        );
        configuration2.throwExceptionIf(
          config,
          configuration2.not(Array.isArray(category.appenders)),
          `category "${name}" is not valid (appenders must be an array of appender names)`
        );
        configuration2.throwExceptionIf(
          config,
          configuration2.not(category.appenders.length),
          `category "${name}" is not valid (appenders must contain at least one appender name)`
        );
        if (Object.prototype.hasOwnProperty.call(category, "enableCallStack")) {
          configuration2.throwExceptionIf(
            config,
            typeof category.enableCallStack !== "boolean",
            `category "${name}" is not valid (enableCallStack must be boolean type)`
          );
        }
        category.appenders.forEach((appender) => {
          configuration2.throwExceptionIf(
            config,
            configuration2.not(appenders2.get(appender)),
            `category "${name}" is not valid (appender "${appender}" is not defined)`
          );
        });
        configuration2.throwExceptionIf(
          config,
          configuration2.not(levels2.getLevel(category.level)),
          `category "${name}" is not valid (level "${category.level}" not recognised; valid levels are ${levels2.levels.join(", ")})`
        );
      });
      configuration2.throwExceptionIf(
        config,
        configuration2.not(config.categories.default),
        'must define a "default" category.'
      );
    });
    const setup = (config) => {
      categories2.clear();
      if (!config) {
        return;
      }
      const categoryNames = Object.keys(config.categories);
      categoryNames.forEach((name) => {
        const category = config.categories[name];
        const categoryAppenders = [];
        category.appenders.forEach((appender) => {
          categoryAppenders.push(appenders2.get(appender));
          debug2(`Creating category ${name}`);
          categories2.set(name, {
            appenders: categoryAppenders,
            level: levels2.getLevel(category.level),
            enableCallStack: category.enableCallStack || false
          });
        });
      });
    };
    const init = () => {
      setup();
    };
    init();
    configuration2.addListener(setup);
    const configForCategory = (category) => {
      debug2(`configForCategory: searching for config for ${category}`);
      if (categories2.has(category)) {
        debug2(`configForCategory: ${category} exists in config, returning it`);
        return categories2.get(category);
      }
      let sourceCategoryConfig;
      if (category.indexOf(".") > 0) {
        debug2(`configForCategory: ${category} has hierarchy, cloning from parents`);
        sourceCategoryConfig = {
          ...configForCategory(category.slice(0, category.lastIndexOf(".")))
        };
      } else {
        if (!categories2.has("default")) {
          setup({ categories: { default: { appenders: ["out"], level: "OFF" } } });
        }
        debug2("configForCategory: cloning default category");
        sourceCategoryConfig = { ...categories2.get("default") };
      }
      categories2.set(category, sourceCategoryConfig);
      return sourceCategoryConfig;
    };
    const appendersForCategory = (category) => configForCategory(category).appenders;
    const getLevelForCategory = (category) => configForCategory(category).level;
    const setLevelForCategory = (category, level) => {
      configForCategory(category).level = level;
    };
    const getEnableCallStackForCategory = (category) => configForCategory(category).enableCallStack === true;
    const setEnableCallStackForCategory = (category, useCallStack) => {
      configForCategory(category).enableCallStack = useCallStack;
    };
    module.exports = categories2;
    module.exports = Object.assign(module.exports, {
      appendersForCategory,
      getLevelForCategory,
      setLevelForCategory,
      getEnableCallStackForCategory,
      setEnableCallStackForCategory,
      init
    });
  })(categories);
  return categories.exports;
}
var logger$1;
var hasRequiredLogger;
function requireLogger() {
  if (hasRequiredLogger) return logger$1;
  hasRequiredLogger = 1;
  const debug2 = requireBrowser()("log4js:logger");
  const LoggingEvent = requireLoggingEvent();
  const levels2 = requireLevels();
  const clustering2 = requireClustering();
  const categories2 = requireCategories();
  const configuration2 = requireConfiguration();
  const stackReg = /^(?:\s*) at (?:(.+) \()?(?:([^(]+?):(\d+):(\d+))\)?$/;
  const baseCallStackSkip = 1;
  const defaultErrorCallStackSkip = 3;
  function defaultParseCallStack(data, skipIdx = defaultErrorCallStackSkip + baseCallStackSkip) {
    try {
      const stacklines = data.stack.split("\n").slice(skipIdx);
      if (!stacklines.length) {
        return null;
      }
      const lineMatch = stackReg.exec(stacklines[0]);
      if (lineMatch && lineMatch.length === 5) {
        let className = "";
        let functionName = "";
        let functionAlias = "";
        if (lineMatch[1] && lineMatch[1] !== "") {
          [functionName, functionAlias] = lineMatch[1].replace(/[[\]]/g, "").split(" as ");
          functionAlias = functionAlias || "";
          if (functionName.includes("."))
            [className, functionName] = functionName.split(".");
        }
        return {
          fileName: lineMatch[2],
          lineNumber: parseInt(lineMatch[3], 10),
          columnNumber: parseInt(lineMatch[4], 10),
          callStack: stacklines.join("\n"),
          className,
          functionName,
          functionAlias,
          callerName: lineMatch[1] || ""
        };
      } else {
        console.error("log4js.logger - defaultParseCallStack error");
      }
    } catch (err) {
      console.error("log4js.logger - defaultParseCallStack error", err);
    }
    return null;
  }
  class Logger {
    constructor(name) {
      if (!name) {
        throw new Error("No category provided.");
      }
      this.category = name;
      this.context = {};
      this.callStackSkipIndex = 0;
      this.parseCallStack = defaultParseCallStack;
      debug2(`Logger created (${this.category}, ${this.level})`);
    }
    get level() {
      return levels2.getLevel(
        categories2.getLevelForCategory(this.category),
        levels2.OFF
      );
    }
    set level(level) {
      categories2.setLevelForCategory(
        this.category,
        levels2.getLevel(level, this.level)
      );
    }
    get useCallStack() {
      return categories2.getEnableCallStackForCategory(this.category);
    }
    set useCallStack(bool) {
      categories2.setEnableCallStackForCategory(this.category, bool === true);
    }
    get callStackLinesToSkip() {
      return this.callStackSkipIndex;
    }
    set callStackLinesToSkip(number) {
      if (typeof number !== "number") {
        throw new TypeError("Must be a number");
      }
      if (number < 0) {
        throw new RangeError("Must be >= 0");
      }
      this.callStackSkipIndex = number;
    }
    log(level, ...args) {
      const logLevel = levels2.getLevel(level);
      if (!logLevel) {
        if (configuration2.validIdentifier(level) && args.length > 0) {
          this.log(
            levels2.WARN,
            "log4js:logger.log: valid log-level not found as first parameter given:",
            level
          );
          this.log(levels2.INFO, `[${level}]`, ...args);
        } else {
          this.log(levels2.INFO, level, ...args);
        }
      } else if (this.isLevelEnabled(logLevel)) {
        this._log(logLevel, args);
      }
    }
    isLevelEnabled(otherLevel) {
      return this.level.isLessThanOrEqualTo(otherLevel);
    }
    _log(level, data) {
      debug2(`sending log data (${level}) to appenders`);
      const error = data.find((item) => item instanceof Error);
      let callStack;
      if (this.useCallStack) {
        try {
          if (error) {
            callStack = this.parseCallStack(
              error,
              this.callStackSkipIndex + baseCallStackSkip
            );
          }
        } catch (_err) {
        }
        callStack = callStack || this.parseCallStack(
          new Error(),
          this.callStackSkipIndex + defaultErrorCallStackSkip + baseCallStackSkip
        );
      }
      const loggingEvent = new LoggingEvent(
        this.category,
        level,
        data,
        this.context,
        callStack,
        error
      );
      clustering2.send(loggingEvent);
    }
    addContext(key, value) {
      this.context[key] = value;
    }
    removeContext(key) {
      delete this.context[key];
    }
    clearContext() {
      this.context = {};
    }
    setParseCallStackFunction(parseFunction) {
      if (typeof parseFunction === "function") {
        this.parseCallStack = parseFunction;
      } else if (typeof parseFunction === "undefined") {
        this.parseCallStack = defaultParseCallStack;
      } else {
        throw new TypeError("Invalid type passed to setParseCallStackFunction");
      }
    }
  }
  function addLevelMethods(target) {
    const level = levels2.getLevel(target);
    const levelStrLower = level.toString().toLowerCase();
    const levelMethod = levelStrLower.replace(
      /_([a-z])/g,
      (g2) => g2[1].toUpperCase()
    );
    const isLevelMethod = levelMethod[0].toUpperCase() + levelMethod.slice(1);
    Logger.prototype[`is${isLevelMethod}Enabled`] = function() {
      return this.isLevelEnabled(level);
    };
    Logger.prototype[levelMethod] = function(...args) {
      this.log(level, ...args);
    };
  }
  levels2.levels.forEach(addLevelMethods);
  configuration2.addListener(() => {
    levels2.levels.forEach(addLevelMethods);
  });
  logger$1 = Logger;
  return logger$1;
}
var connectLogger;
var hasRequiredConnectLogger;
function requireConnectLogger() {
  if (hasRequiredConnectLogger) return connectLogger;
  hasRequiredConnectLogger = 1;
  const levels2 = requireLevels();
  const DEFAULT_FORMAT = ':remote-addr - - ":method :url HTTP/:http-version" :status :content-length ":referrer" ":user-agent"';
  function getUrl(req) {
    return req.originalUrl || req.url;
  }
  function assembleTokens(req, res, customTokens) {
    const arrayUniqueTokens = (array) => {
      const a = array.concat();
      for (let i = 0; i < a.length; ++i) {
        for (let j = i + 1; j < a.length; ++j) {
          if (a[i].token == a[j].token) {
            a.splice(j--, 1);
          }
        }
      }
      return a;
    };
    const defaultTokens = [];
    defaultTokens.push({ token: ":url", replacement: getUrl(req) });
    defaultTokens.push({ token: ":protocol", replacement: req.protocol });
    defaultTokens.push({ token: ":hostname", replacement: req.hostname });
    defaultTokens.push({ token: ":method", replacement: req.method });
    defaultTokens.push({
      token: ":status",
      replacement: res.__statusCode || res.statusCode
    });
    defaultTokens.push({
      token: ":response-time",
      replacement: res.responseTime
    });
    defaultTokens.push({ token: ":date", replacement: (/* @__PURE__ */ new Date()).toUTCString() });
    defaultTokens.push({
      token: ":referrer",
      replacement: req.headers.referer || req.headers.referrer || ""
    });
    defaultTokens.push({
      token: ":http-version",
      replacement: `${req.httpVersionMajor}.${req.httpVersionMinor}`
    });
    defaultTokens.push({
      token: ":remote-addr",
      replacement: req.headers["x-forwarded-for"] || req.ip || req._remoteAddress || req.socket && (req.socket.remoteAddress || req.socket.socket && req.socket.socket.remoteAddress)
    });
    defaultTokens.push({
      token: ":user-agent",
      replacement: req.headers["user-agent"]
    });
    defaultTokens.push({
      token: ":content-length",
      replacement: res.getHeader("content-length") || res.__headers && res.__headers["Content-Length"] || "-"
    });
    defaultTokens.push({
      token: /:req\[([^\]]+)]/g,
      replacement(_2, field) {
        return req.headers[field.toLowerCase()];
      }
    });
    defaultTokens.push({
      token: /:res\[([^\]]+)]/g,
      replacement(_2, field) {
        return res.getHeader(field.toLowerCase()) || res.__headers && res.__headers[field];
      }
    });
    return arrayUniqueTokens(customTokens.concat(defaultTokens));
  }
  function format2(str, tokens) {
    for (let i = 0; i < tokens.length; i++) {
      str = str.replace(tokens[i].token, tokens[i].replacement);
    }
    return str;
  }
  function createNoLogCondition(nolog) {
    let regexp = null;
    if (nolog instanceof RegExp) {
      regexp = nolog;
    }
    if (typeof nolog === "string") {
      regexp = new RegExp(nolog);
    }
    if (Array.isArray(nolog)) {
      const regexpsAsStrings = nolog.map(
        (reg) => reg.source ? reg.source : reg
      );
      regexp = new RegExp(regexpsAsStrings.join("|"));
    }
    return regexp;
  }
  function matchRules(statusCode, currentLevel, ruleSet) {
    let level = currentLevel;
    if (ruleSet) {
      const matchedRule = ruleSet.find((rule) => {
        let ruleMatched = false;
        if (rule.from && rule.to) {
          ruleMatched = statusCode >= rule.from && statusCode <= rule.to;
        } else {
          ruleMatched = rule.codes.indexOf(statusCode) !== -1;
        }
        return ruleMatched;
      });
      if (matchedRule) {
        level = levels2.getLevel(matchedRule.level, level);
      }
    }
    return level;
  }
  connectLogger = function getLogger(logger4js, options) {
    if (typeof options === "string" || typeof options === "function") {
      options = { format: options };
    } else {
      options = options || {};
    }
    const thisLogger = logger4js;
    let level = levels2.getLevel(options.level, levels2.INFO);
    const fmt = options.format || DEFAULT_FORMAT;
    return (req, res, next) => {
      if (typeof req._logging !== "undefined") return next();
      if (typeof options.nolog !== "function") {
        const nolog = createNoLogCondition(options.nolog);
        if (nolog && nolog.test(req.originalUrl)) return next();
      }
      if (thisLogger.isLevelEnabled(level) || options.level === "auto") {
        const start = /* @__PURE__ */ new Date();
        const { writeHead } = res;
        req._logging = true;
        res.writeHead = (code, headers2) => {
          res.writeHead = writeHead;
          res.writeHead(code, headers2);
          res.__statusCode = code;
          res.__headers = headers2 || {};
        };
        let finished = false;
        const handler = () => {
          if (finished) {
            return;
          }
          finished = true;
          if (typeof options.nolog === "function") {
            if (options.nolog(req, res) === true) {
              req._logging = false;
              return;
            }
          }
          res.responseTime = /* @__PURE__ */ new Date() - start;
          if (res.statusCode && options.level === "auto") {
            level = levels2.INFO;
            if (res.statusCode >= 300) level = levels2.WARN;
            if (res.statusCode >= 400) level = levels2.ERROR;
          }
          level = matchRules(res.statusCode, level, options.statusRules);
          const combinedTokens = assembleTokens(req, res, options.tokens || []);
          if (options.context) thisLogger.addContext("res", res);
          if (typeof fmt === "function") {
            const line = fmt(req, res, (str) => format2(str, combinedTokens));
            if (line) thisLogger.log(level, line);
          } else {
            thisLogger.log(level, format2(fmt, combinedTokens));
          }
          if (options.context) thisLogger.removeContext("res");
        };
        res.on("end", handler);
        res.on("finish", handler);
        res.on("error", handler);
        res.on("close", handler);
      }
      return next();
    };
  };
  return connectLogger;
}
var recording;
var hasRequiredRecording;
function requireRecording() {
  if (hasRequiredRecording) return recording;
  hasRequiredRecording = 1;
  const debug2 = requireBrowser()("log4js:recording");
  const recordedEvents = [];
  function configure() {
    return function(logEvent) {
      debug2(
        `received logEvent, number of events now ${recordedEvents.length + 1}`
      );
      debug2("log event was ", logEvent);
      recordedEvents.push(logEvent);
    };
  }
  function replay() {
    return recordedEvents.slice();
  }
  function reset() {
    recordedEvents.length = 0;
  }
  recording = {
    configure,
    replay,
    playback: replay,
    reset,
    erase: reset
  };
  return recording;
}
var log4js_1;
var hasRequiredLog4js;
function requireLog4js() {
  if (hasRequiredLog4js) return log4js_1;
  hasRequiredLog4js = 1;
  const debug2 = requireBrowser()("log4js:main");
  const fs2 = require$$0$2;
  const deepClone = requireRfdc()({ proto: true });
  const configuration2 = requireConfiguration();
  const layouts2 = requireLayouts();
  const levels2 = requireLevels();
  const appenders2 = requireAppenders();
  const categories2 = requireCategories();
  const Logger = requireLogger();
  const clustering2 = requireClustering();
  const connectLogger2 = requireConnectLogger();
  const recordingModule = requireRecording();
  let enabled = false;
  function sendLogEventToAppender(logEvent) {
    if (!enabled) return;
    debug2("Received log event ", logEvent);
    const categoryAppenders = categories2.appendersForCategory(
      logEvent.categoryName
    );
    categoryAppenders.forEach((appender) => {
      appender(logEvent);
    });
  }
  function loadConfigurationFile(filename) {
    debug2(`Loading configuration from ${filename}`);
    try {
      return JSON.parse(fs2.readFileSync(filename, "utf8"));
    } catch (e2) {
      throw new Error(
        `Problem reading config from file "${filename}". Error was ${e2.message}`,
        e2
      );
    }
  }
  function configure(configurationFileOrObject) {
    if (enabled) {
      shutdown();
    }
    let configObject = configurationFileOrObject;
    if (typeof configObject === "string") {
      configObject = loadConfigurationFile(configurationFileOrObject);
    }
    debug2(`Configuration is ${configObject}`);
    configuration2.configure(deepClone(configObject));
    clustering2.onMessage(sendLogEventToAppender);
    enabled = true;
    return log4js2;
  }
  function isConfigured() {
    return enabled;
  }
  function recording2() {
    return recordingModule;
  }
  function shutdown(callback = () => {
  }) {
    if (typeof callback !== "function") {
      throw new TypeError("Invalid callback passed to shutdown");
    }
    debug2("Shutdown called. Disabling all log writing.");
    enabled = false;
    const appendersToCheck = Array.from(appenders2.values());
    appenders2.init();
    categories2.init();
    const shutdownFunctions = appendersToCheck.reduce(
      (accum, next) => next.shutdown ? accum + 1 : accum,
      0
    );
    if (shutdownFunctions === 0) {
      debug2("No appenders with shutdown functions found.");
      callback();
    }
    let completed = 0;
    let error;
    debug2(`Found ${shutdownFunctions} appenders with shutdown functions.`);
    function complete(err) {
      error = error || err;
      completed += 1;
      debug2(`Appender shutdowns complete: ${completed} / ${shutdownFunctions}`);
      if (completed >= shutdownFunctions) {
        debug2("All shutdown functions completed.");
        callback(error);
      }
    }
    appendersToCheck.filter((a) => a.shutdown).forEach((a) => a.shutdown(complete));
  }
  function getLogger(category) {
    if (!enabled) {
      configure(
        process.env.LOG4JS_CONFIG || {
          appenders: { out: { type: "stdout" } },
          categories: { default: { appenders: ["out"], level: "OFF" } }
        }
      );
    }
    return new Logger(category || "default");
  }
  const log4js2 = {
    getLogger,
    configure,
    isConfigured,
    shutdown,
    connectLogger: connectLogger2,
    levels: levels2,
    addLayout: layouts2.addLayout,
    recording: recording2
  };
  log4js_1 = log4js2;
  return log4js_1;
}
var log4jsExports = requireLog4js();
const log4js = /* @__PURE__ */ getDefaultExportFromCjs(log4jsExports);
log4js.configure({
  appenders: {
    file: {
      type: "dateFile",
      filename: "logs/application.log",
      pattern: "yyyy-MM-dd",
      alwaysIncludePattern: true
    }
  },
  categories: {
    default: { appenders: ["file"], level: "info" }
  }
});
const logger = log4js.getLogger();
const chromeUserDir = () => posix.join(require$$1$3.tmpdir(), "../Google", "Chrome", "User Data");
function getProfileNames() {
  const list = [];
  try {
    const statePath = posix.join(chromeUserDir(), "Local State");
    if (require$$0$2.existsSync(statePath)) {
      const jsonContent = require$$0$2.readFileSync(statePath, "utf-8");
      const doc = JSON.parse(jsonContent);
      const accountDic = doc?.profile?.info_cache;
      if (accountDic) {
        Object.entries(accountDic).forEach(([profileKey, profileData]) => {
          list.push({
            realName: profileKey,
            displayName: profileData?.["shortcut_name"] ?? profileKey
          });
        });
      }
    }
  } catch (error) {
    logger.error("获取 chrome 用户目录失败", error);
  }
  return list;
}
class BrowserInstance {
  browser = null;
  context = null;
  tempDir = null;
  linkProfile(profileName) {
    const tempId = nanoid$1();
    this.tempDir = posix.join(require$$1$3.tmpdir(), "suning-delivery-automatic", `chrome-profile-${tempId}`);
    require$$0$2.mkdirSync(this.tempDir, { recursive: true });
    const sourceProfileParentDir = chromeUserDir();
    const sourceProfileDir = posix.join(sourceProfileParentDir, profileName);
    const targetProfileDir = posix.join(this.tempDir, profileName);
    const sourceLocalState = posix.join(sourceProfileParentDir, "Local State");
    const targetLocalState = posix.join(this.tempDir, "Local State");
    if (require$$0$2.existsSync(sourceLocalState)) {
      require$$0$2.copyFileSync(sourceLocalState, targetLocalState);
    }
    if (require$$0$2.existsSync(sourceProfileDir)) {
      if (process.platform === "win32") {
        require$$0$2.symlinkSync(sourceProfileDir, targetProfileDir, "junction");
      } else {
        require$$0$2.symlinkSync(sourceProfileDir, targetProfileDir);
      }
      return;
    }
    throw new Error("初始化失败");
  }
  async createContext(options) {
    const { profileName, headless, proxy } = options;
    if (profileName) {
      this.linkProfile(profileName);
      const context = await chromium.launchPersistentContext(this.tempDir, {
        channel: "chrome",
        headless,
        proxy: proxy ? { server: proxy } : void 0,
        args: [`--profile-directory=${profileName}`, "--window-size=1920,1040"],
        ignoreDefaultArgs: ["--enable-automation", "--disable-extensions"]
      });
      this.context = context;
      return context;
    } else {
      const browser2 = await chromium.launch({
        headless,
        proxy: proxy ? { server: proxy } : void 0
      });
      const context = await browser2.newContext();
      this.browser = browser2;
      this.context = context;
      return context;
    }
  }
  async close() {
    try {
      if (this.context) {
        try {
          await this.context.close();
        } catch (e2) {
          logger.error("关闭浏览器上下文失败", e2);
        }
      }
      if (this.browser) {
        try {
          await this.browser.close();
        } catch (e2) {
          logger.error("关闭浏览器失败", e2);
        }
      }
      await sleep(5e3);
      if (this.tempDir && require$$0$2.existsSync(this.tempDir)) {
        try {
          require$$0$2.rmSync(this.tempDir, { recursive: true, force: true });
        } catch (error) {
        }
      }
    } catch (e2) {
      logger.error("关闭浏览器失败", e2);
    }
  }
}
const closePage = async (page2) => {
  try {
    await page2.close();
  } catch (e2) {
    logger.error("关闭页面失败", e2);
  }
};
const limit$1 = pLimit(10);
const erpSite = "https://www.erp321.com/epaas";
const goToErp = async (ctx) => {
  const page2 = await ctx.newPage();
  await page2.goto(erpSite);
  return page2;
};
const getDeliveryId = async (viewsState, orderId, cookie) => {
  try {
    const baseParams = {
      __VIEWSTATE: "/wEPDwUKLTg5NDY5MjY3MGRkdgQjzOR1eVC5DO5/BTm0IdK8Yqw=",
      __VIEWSTATEGENERATOR: "C8154B07",
      insurePrice: "",
      _jt_page_count_enabled: "",
      _jt_page_increament_enabled: "true",
      _jt_page_increament_page_mode: "",
      _jt_page_increament_key_value: "",
      _jt_page_increament_business_values: "",
      _jt_page_increament_key_name: "o_id",
      _jt_page_size: "50",
      _jt_page_action: "1",
      // 接收方信息
      fe_node_desc: "",
      receiver_state: "",
      receiver_city: "",
      receiver_district: "",
      receiver_address: "",
      receiver_name: "",
      receiver_phone: "",
      receiver_mobile: "",
      check_name: "",
      check_address: "",
      // 备注相关
      fe_remark_type: "single",
      fe_flag: "",
      fe_is_append_remark: "",
      feedback: "",
      // 回调相关
      __CALLBACKID: "JTable1",
      __CALLBACKPARAM: JSON.stringify({
        Method: "LoadDataToJSON",
        Args: [
          "1",
          JSON.stringify([
            {
              k: "so_id",
              v: orderId,
              c: "@="
            }
          ]),
          "{}"
        ]
      })
    };
    const formBody = new URLSearchParams(baseParams).toString();
    const res = await fetch(`https://www.erp321.com/app/order/order/list.aspx?_c=jst-epaas&filterType=o_unsent&am___=LoadDataToJSON`, {
      method: "POST",
      headers: {
        accept: "*/*",
        "accept-language": "zh-CN,zh;q=0.9",
        "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
        origin: "https://www.erp321.com",
        priority: "u=1, i",
        referer: "https://www.erp321.com/app/order/order/list.aspx?_c=jst-epaas&filterType=o_unsent",
        "sec-ch-ua": '"Not(A:Brand";v="99", "Google Chrome";v="133", "Chromium";v="133"',
        "sec-ch-ua-mobile": "?0",
        "sec-ch-ua-platform": '"Windows"',
        "sec-fetch-dest": "empty",
        "sec-fetch-mode": "cors",
        "sec-fetch-site": "same-origin",
        "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36",
        "x-requested-with": "XMLHttpRequest",
        cookie
      },
      body: formBody,
      mode: "cors",
      credentials: "include"
    });
    const response = await res.text();
    if (!response) {
      return {
        orderId,
        message: "获取物流信息失败"
      };
    }
    const jsonStr = response.split("|")[1];
    const returnData = JSON.parse(jsonStr);
    const returnValue = JSON.parse(returnData.ReturnValue);
    const data = returnValue.datas?.[0];
    return {
      orderId,
      logistics_company: data?.logistics_company,
      l_id: data?.l_id
    };
  } catch (e2) {
    return {
      orderId,
      message: e2?.toString?.()
    };
  }
};
const getDeliveryIds = async (ctx, orders, progress2) => {
  const page2 = await goToErp(ctx);
  await sleep(3e3);
  const viewsState = await page2.evaluate(() => {
    return document?.querySelector?.("#iframe-聚水潭欢迎您")?.contentWindow?.document?.querySelector?.('input[id="__VIEWSTATE"]')?.getAttribute?.("value");
  });
  if (!viewsState) {
    throw new Error("获取viewsState失败");
  }
  const cookies = await ctx.cookies();
  const cookieStr = cookies.filter((c2) => c2.domain === ".erp321.com" || c2.domain === "www.erp321.com").map((cookie) => `${cookie.name}=${cookie.value}`).join(";");
  const input2 = orders.map((order) => limit$1(async () => {
    const r2 = await getDeliveryId(viewsState, order, cookieStr);
    await sleep(300);
    progress2?.();
    return r2;
  }));
  const result = await Promise.all(input2);
  await closePage(page2);
  return result;
};
const deliveries = [
  {
    "text": "AAE-中国",
    "code": "A01"
  },
  {
    "text": "澳邮中国快运",
    "code": "AY1"
  },
  {
    "text": "安鲜达",
    "code": "AY2"
  },
  {
    "text": "安能快运（大件）",
    "code": "AN2"
  },
  {
    "text": "abc全球快运",
    "code": "AB1"
  },
  {
    "text": "安得物流",
    "code": "ANN"
  },
  {
    "text": "澳世速递",
    "code": "AS1"
  },
  {
    "text": "安世通",
    "code": "AS2"
  },
  {
    "text": "澳德物流",
    "code": "AD1"
  },
  {
    "text": "安迅物流",
    "code": "AX1"
  },
  {
    "text": "澳大利亚邮政",
    "code": "AUP"
  },
  {
    "text": "BHT",
    "code": "B01"
  },
  {
    "text": "百福东方",
    "code": "B02"
  },
  {
    "text": "百通",
    "code": "B05"
  },
  {
    "text": "比利时邮政",
    "code": "HA3"
  },
  {
    "text": "百世快运（大件）",
    "code": "BS1"
  },
  {
    "text": "奔腾物流",
    "code": "BT2"
  },
  {
    "text": "斑马物联网",
    "code": "BM1"
  },
  {
    "text": "城市一百",
    "code": "C01"
  },
  {
    "text": "程光快递",
    "code": "CG1"
  },
  {
    "text": "承诺达",
    "code": "CND"
  },
  {
    "text": "COE东方快递",
    "code": "COE"
  },
  {
    "text": "传喜物流",
    "code": "CX1"
  },
  {
    "text": "畅灵国际物流",
    "code": "CL1"
  },
  {
    "text": "菜鸟速递",
    "code": "CNL"
  },
  {
    "text": "德邦",
    "code": "D04"
  },
  {
    "text": "DHL",
    "code": "D01"
  },
  {
    "text": "D速快递",
    "code": "D02"
  },
  {
    "text": "大田物流",
    "code": "D03"
  },
  {
    "text": "大达物流",
    "code": "DD2"
  },
  {
    "text": "递四方",
    "code": "D4F"
  },
  {
    "text": "丹麦邮政",
    "code": "DKP"
  },
  {
    "text": "抖快物流",
    "code": "DKL"
  },
  {
    "text": "达达",
    "code": "DAD"
  },
  {
    "text": "EMS",
    "code": "E01"
  },
  {
    "text": "EWE全球快递",
    "code": "EW1"
  },
  {
    "text": "EMS国际件",
    "code": "EGJ"
  },
  {
    "text": "EFS快递",
    "code": "EF1"
  },
  {
    "text": "飞康达物流",
    "code": "F01"
  },
  {
    "text": "FedEx(国外)",
    "code": "F02"
  },
  {
    "text": "富腾达",
    "code": "HA1"
  },
  {
    "text": "泛捷国际速递",
    "code": "HB1"
  },
  {
    "text": "飞洋快递",
    "code": "HB4"
  },
  {
    "text": "方舟国际速递",
    "code": "HW9"
  },
  {
    "text": "丰通快运",
    "code": "FT1"
  },
  {
    "text": "方圆物流",
    "code": "FY2"
  },
  {
    "text": "飞跃物流",
    "code": "FY3"
  },
  {
    "text": "飞远配送",
    "code": "FY4"
  },
  {
    "text": "法国邮政",
    "code": "FRP"
  },
  {
    "text": "丰程物流",
    "code": "FC1"
  },
  {
    "text": "丰网速运",
    "code": "FWS"
  },
  {
    "text": "广东邮政物流",
    "code": "G01"
  },
  {
    "text": "共速达",
    "code": "G04"
  },
  {
    "text": "高捷快运",
    "code": "GJK"
  },
  {
    "text": "海带宝",
    "code": "HA5"
  },
  {
    "text": "恒路物流",
    "code": "HL1"
  },
  {
    "text": "华美快递",
    "code": "HM1"
  },
  {
    "text": "黄马甲快递",
    "code": "HM2"
  },
  {
    "text": "海信物流",
    "code": "HX1"
  },
  {
    "text": "汇强快递",
    "code": "H03"
  },
  {
    "text": "合众快递",
    "code": "UCS"
  },
  {
    "text": "汇森快递",
    "code": "HS1"
  },
  {
    "text": "黑猫宅急便",
    "code": "TC1"
  },
  {
    "text": "环球速运",
    "code": "HQ1"
  },
  {
    "text": "华强物流",
    "code": "HQ2"
  },
  {
    "text": "韩国邮政",
    "code": "KRP"
  },
  {
    "text": "华宇物流",
    "code": "HY1"
  },
  {
    "text": "佳怡物流",
    "code": "J02"
  },
  {
    "text": "京广速递",
    "code": "J03"
  },
  {
    "text": "急先达",
    "code": "J04"
  },
  {
    "text": "佳吉快运",
    "code": "J01"
  },
  {
    "text": "金岸物流",
    "code": "JA1"
  },
  {
    "text": "极地快递",
    "code": "JD1"
  },
  {
    "text": "九曳供应链",
    "code": "JZ1"
  },
  {
    "text": "金象物流",
    "code": "JX1"
  },
  {
    "text": "加州猫速递",
    "code": "JZM"
  },
  {
    "text": "极兔速递",
    "code": "JT1"
  },
  {
    "text": "加运美",
    "code": "JYM"
  },
  {
    "text": "景光物流",
    "code": "JG1"
  },
  {
    "text": "晋越快递",
    "code": "JY1"
  },
  {
    "text": "加拿大邮政",
    "code": "CAP"
  },
  {
    "text": "捷克邮政",
    "code": "CZP"
  },
  {
    "text": "嘉贤物流",
    "code": "JXL"
  },
  {
    "text": "京东物流",
    "code": "JDW"
  },
  {
    "text": "快捷速递",
    "code": "K01"
  },
  {
    "text": "跨越速运",
    "code": "KY1"
  },
  {
    "text": "开心快线",
    "code": "KX1"
  },
  {
    "text": "快刀云",
    "code": "KDY"
  },
  {
    "text": "快服务",
    "code": "KFW"
  },
  {
    "text": "科捷物流",
    "code": "KJL"
  },
  {
    "text": "快捷物流",
    "code": "KJWL"
  },
  {
    "text": "龙邦物流",
    "code": "L01"
  },
  {
    "text": "联昊通速递",
    "code": "L02"
  },
  {
    "text": "联邦快递",
    "code": "L03"
  },
  {
    "text": "蓝天国际航空",
    "code": "HW6"
  },
  {
    "text": "联合快递",
    "code": "LH1"
  },
  {
    "text": "林氏物流",
    "code": "LSW"
  },
  {
    "text": "明亮物流",
    "code": "M01"
  },
  {
    "text": "美团配送",
    "code": "MT1"
  },
  {
    "text": "民航快递",
    "code": "CAE"
  },
  {
    "text": "美快国际",
    "code": "MK1"
  },
  {
    "text": "美联快递",
    "code": "ML1"
  },
  {
    "text": "美通快递",
    "code": "MT2"
  },
  {
    "text": "美国邮政",
    "code": "USP"
  },
  {
    "text": "能达速递",
    "code": "NDA"
  },
  {
    "text": "欧洲快运",
    "code": "OK1"
  },
  {
    "text": "欧亚专线",
    "code": "OY1"
  },
  {
    "text": "PCA EXPRESS",
    "code": "HA8"
  },
  {
    "text": "品骏快递",
    "code": "PJ1"
  },
  {
    "text": "平安快递",
    "code": "PA1"
  },
  {
    "text": "平安达腾飞",
    "code": "PAFD"
  },
  {
    "text": "全一快递",
    "code": "Q01"
  },
  {
    "text": "全晨快递",
    "code": "Q02"
  },
  {
    "text": "全日通快递",
    "code": "Q04"
  },
  {
    "text": "全峰快递",
    "code": "Q03"
  },
  {
    "text": "青岛安捷",
    "code": "AJ1"
  },
  {
    "text": "如风达快递",
    "code": "R01"
  },
  {
    "text": "日日顺",
    "code": "L04"
  },
  {
    "text": "瑞达快递",
    "code": "RD1"
  },
  {
    "text": "日日通国际",
    "code": "RR1"
  },
  {
    "text": "日本邮政",
    "code": "JPP"
  },
  {
    "text": "顺丰速运",
    "code": "S02"
  },
  {
    "text": "申通快递",
    "code": "S01"
  },
  {
    "text": "速尔快递",
    "code": "S03"
  },
  {
    "text": "三态速递",
    "code": "S04"
  },
  {
    "text": "苏宁物流",
    "code": "SN2"
  },
  {
    "text": "速派快递",
    "code": "HB2"
  },
  {
    "text": "速必达",
    "code": "SP1"
  },
  {
    "text": "商桥物流",
    "code": "SQ1"
  },
  {
    "text": "晟邦物流",
    "code": "SB1"
  },
  {
    "text": "SQK国际速递",
    "code": "HA7"
  },
  {
    "text": "顺捷丰达",
    "code": "SJ1"
  },
  {
    "text": "盛丰物流",
    "code": "SF1"
  },
  {
    "text": "顺心捷达",
    "code": "SXJ"
  },
  {
    "text": "速递中国",
    "code": "SDC"
  },
  {
    "text": "盛辉物流",
    "code": "SH1"
  },
  {
    "text": "SYNSHIP快递",
    "code": "SYN"
  },
  {
    "text": "速达快递",
    "code": "SD2"
  },
  {
    "text": "速通物流",
    "code": "ST2"
  },
  {
    "text": "速腾物流",
    "code": "ST1"
  },
  {
    "text": "申通国际",
    "code": "STI"
  },
  {
    "text": "TNT",
    "code": "T01"
  },
  {
    "text": "天地华宇",
    "code": "H02"
  },
  {
    "text": "同舟快递",
    "code": "HW5"
  },
  {
    "text": "泰捷达物流",
    "code": "TJD"
  },
  {
    "text": "天翼快递",
    "code": "TY1"
  },
  {
    "text": "天马转运",
    "code": "TMK"
  },
  {
    "text": "天际快递",
    "code": "TJ1"
  },
  {
    "text": "通用物流",
    "code": "TY2"
  },
  {
    "text": "天翔快递",
    "code": "TX1"
  },
  {
    "text": "腾达速递",
    "code": "TD1"
  },
  {
    "text": "泰进物流",
    "code": "TJ2"
  },
  {
    "text": "UPS",
    "code": "U02"
  },
  {
    "text": "USPS",
    "code": "US1"
  },
  {
    "text": "UEQ",
    "code": "UEQ"
  },
  {
    "text": "万象物流",
    "code": "WX1"
  },
  {
    "text": "沃埃家",
    "code": "WA1"
  },
  {
    "text": "威时沛运",
    "code": "W01"
  },
  {
    "text": "威盛快递",
    "code": "WSL"
  },
  {
    "text": "万家物流",
    "code": "WJ1"
  },
  {
    "text": "新邦物流",
    "code": "X03"
  },
  {
    "text": "信丰物流",
    "code": "X04"
  },
  {
    "text": "迅达速递",
    "code": "XD1"
  },
  {
    "text": "新杰物流",
    "code": "XJ1"
  },
  {
    "text": "小熊物流",
    "code": "XX1"
  },
  {
    "text": "香港邮政",
    "code": "HKP"
  },
  {
    "text": "新干线快递",
    "code": "XGX"
  },
  {
    "text": "新亚物流",
    "code": "XY1"
  },
  {
    "text": "新西兰邮政",
    "code": "NZP"
  },
  {
    "text": "小米物流",
    "code": "XML"
  },
  {
    "text": "圆通速递",
    "code": "Y01"
  },
  {
    "text": "优速快递",
    "code": "Y10"
  },
  {
    "text": "韵达快递",
    "code": "Y02"
  },
  {
    "text": "亚风快递",
    "code": "Y03"
  },
  {
    "text": "远成物流",
    "code": "Y06"
  },
  {
    "text": "运通速运",
    "code": "Y08"
  },
  {
    "text": "亚马逊物流",
    "code": "YM1"
  },
  {
    "text": "易达通快递",
    "code": "YD1"
  },
  {
    "text": "邮政国际",
    "code": "GJ1"
  },
  {
    "text": "原飞航物流",
    "code": "YF1"
  },
  {
    "text": "壹米滴答",
    "code": "YM2"
  },
  {
    "text": "宇鑫物流",
    "code": "YX1"
  },
  {
    "text": "永利八达通",
    "code": "B06"
  },
  {
    "text": "易达国际速递",
    "code": "YD2"
  },
  {
    "text": "鹰运国际速递",
    "code": "YY1"
  },
  {
    "text": "韵达物流（大件）",
    "code": "YD3"
  },
  {
    "text": "优邦速运",
    "code": "YB1"
  },
  {
    "text": "燕文物流",
    "code": "YW1"
  },
  {
    "text": "宇佳物流",
    "code": "YJ1"
  },
  {
    "text": "余氏东风",
    "code": "YS1"
  },
  {
    "text": "银河物流",
    "code": "MW1"
  },
  {
    "text": "圆通香港",
    "code": "YTG"
  },
  {
    "text": "洋包裹",
    "code": "YBG"
  },
  {
    "text": "韵达国际",
    "code": "YDG"
  },
  {
    "text": "邮政快递包裹",
    "code": "B03"
  },
  {
    "text": "邮政电商标快",
    "code": "YZBK"
  },
  {
    "text": "中通快递",
    "code": "Z01"
  },
  {
    "text": "中铁快运",
    "code": "Z02"
  },
  {
    "text": "中邮物流",
    "code": "Z03"
  },
  {
    "text": "宅急送",
    "code": "Z04"
  },
  {
    "text": "中华邮政",
    "code": "HW2"
  },
  {
    "text": "中环快递",
    "code": "HW7"
  },
  {
    "text": "中通快运（大件）",
    "code": "ZT1"
  },
  {
    "text": "芝麻开门",
    "code": "ZM1"
  },
  {
    "text": "长江国际速递",
    "code": "CJ1"
  },
  {
    "text": "中联速运",
    "code": "ZL2"
  },
  {
    "text": "中加国际快递",
    "code": "HW4"
  },
  {
    "text": "增速物流",
    "code": "ZS1"
  },
  {
    "text": "卓志速运",
    "code": "ZZ1"
  },
  {
    "text": "转运四方4PX",
    "code": "HA6"
  },
  {
    "text": "中远e环球",
    "code": "ZY1"
  },
  {
    "text": "中外运速递",
    "code": "ZWY"
  },
  {
    "text": "中骅物流",
    "code": "ZH1"
  },
  {
    "text": "长宇物流",
    "code": "CY1"
  },
  {
    "text": "芝华仕物流",
    "code": "ZSH"
  },
  {
    "text": "中通国际",
    "code": "ZG1"
  }
];
const preferMap = {
  "标准快递": {
    "text": "邮政电商标快",
    "code": "YZBK"
  }
};
const matchCompany = (company) => {
  const prefer = preferMap[company];
  if (prefer) {
    return prefer;
  }
  return deliveries.find((delivery) => delivery.text.includes(company));
};
const nanoid = customAlphabet("1234567890", 17);
const limit = pLimit(5);
const suningLoginSite = "https://mpassport.suning.com/ids/login";
const suningDeliveryListSite = "https://moms.suning.com/moms/delivery/toHaveSoldBabyMain.action?tabtype=3";
const getSuningDeliverySite = (no) => `https://moms.suning.com/moms/delivery/toDeliveryGoods.action?pagetype=1&b2corderNos=${no}`;
const suningDeliveryPrefixSite = "https://moms.suning.com/moms/delivery/toDeliveryGoods.action";
const goToSuning = async (ctx) => {
  const page2 = await ctx.newPage();
  await page2.goto(suningDeliveryListSite);
  return page2;
};
const getCurrentPageOrders = async (page2) => {
  const orderNos = await page2.locator("span.order-list-orderNum").all();
  const orders = (await Promise.all(orderNos.map((orderNo) => orderNo.textContent()))).filter(Boolean);
  return orders.map((order) => order.split("：")[1]).filter(Boolean);
};
const checkIsLogin = async (ctx) => {
  const page2 = await goToSuning(ctx);
  await sleep(3e3);
  if (page2.url().includes(suningLoginSite)) {
    const shouldLoginContinue = await ye({
      message: "检测到苏宁未登录，登录完成后继续"
    });
    if (!shouldLoginContinue) {
      process.exit(0);
    }
  }
  await closePage(page2);
};
const getAllDeliveryOrderNo = async (ctx) => {
  const page2 = await ctx.newPage();
  try {
    await page2.goto(suningDeliveryListSite);
    await sleep(3e3);
    const orders = [];
    while (true) {
      const pageOrders = await getCurrentPageOrders(page2);
      if (pageOrders.length === 0) {
        break;
      }
      orders.push(...pageOrders);
      const nextButton = page2.locator("a.next").first();
      const isExistNextButton = await nextButton.isVisible();
      if (!isExistNextButton) {
        break;
      }
      const nextLink = await nextButton.getAttribute("href");
      if (!nextLink) {
        break;
      }
      await nextButton.click();
      await sleep(3e3);
    }
    return [...new Set(orders)];
  } catch (error) {
    return `获取订单失败: ${error}`;
  } finally {
    await closePage(page2);
  }
};
const fillSNCode = async (index, page2, order) => {
  const table = page2.locator("table.sensitiveFlag");
  const body = table.locator("tbody");
  const row = body.locator("tr").nth(index + 1);
  const text = await row.textContent();
  if (!text?.includes?.("商品SN码信息录入")) {
    return "";
  }
  const numRow = body.locator("tr").nth(index);
  const numTd = numRow.locator("td").last();
  const isExistNumTd = await numTd.isVisible();
  if (!isExistNumTd) {
    return {
      orderId: order.orderId,
      isSuccess: false,
      message: "找不到商品数量"
    };
  }
  const numText = await numTd.textContent();
  const num = parseInt(numText?.split?.("x")?.[1] || "0");
  const snCode = Array.from({ length: num }, () => nanoid()).join(";");
  const textArea = row.locator("textarea").first();
  const isExistTextArea = await textArea.isVisible();
  if (!isExistTextArea) {
    return {
      orderId: order.orderId,
      isSuccess: false,
      message: "找不到 SN 码输入框"
    };
  }
  await textArea.fill(snCode);
  return snCode;
};
const deliveryOrder = async (ctx, order) => {
  try {
    const snCodes = [];
    const page2 = await ctx.newPage();
    await page2.goto(getSuningDeliverySite(order.orderId));
    await sleep(3e3);
    const table = page2.locator("table.sensitiveFlag");
    const body = table.locator("tbody");
    const rows = await body.locator("tr").count();
    for (let i = 0; i < rows; i += 2) {
      const code = await fillSNCode(i, page2, order);
      if (code) {
        if (typeof code !== "string") {
          return code;
        }
        snCodes.push(code);
      } else {
        break;
      }
    }
    const infoContainer = page2.locator("div.manySelfLogisticsfun");
    const inputs = await infoContainer.locator("input").all();
    const orderInput = inputs[0];
    const isExistInput = await orderInput.isVisible();
    if (!isExistInput) {
      return {
        orderId: order.orderId,
        isSuccess: false,
        message: "找不到物流单号输入框"
      };
    }
    await orderInput.fill(order.l_id?.toString?.() || "");
    await sleep(100);
    try {
      const isExistAreaHide = await page2.locator("div.areaHide").isVisible();
      if (isExistAreaHide) {
        await page2.locator("div.areaHide").click();
        await sleep(100);
      }
    } catch (e2) {
    }
    const deliveryCompanyInput = inputs[1];
    const isExistDeliveryCompanyInput = await deliveryCompanyInput.isVisible();
    if (!isExistDeliveryCompanyInput) {
      return {
        orderId: order.orderId,
        isSuccess: false,
        message: "找不到物流公司输入框"
      };
    }
    await deliveryCompanyInput.click();
    await sleep(300);
    try {
      const isExistAreaHide = await page2.locator("div.areaHide").isVisible();
      if (isExistAreaHide) {
        await page2.locator("div.areaHide").click();
        await sleep(100);
      }
    } catch (e2) {
    }
    await sleep(300);
    try {
      const isExistAreaHide = await page2.locator("div.areaHide").isVisible();
      if (isExistAreaHide) {
        await page2.locator("div.areaHide").click();
        await sleep(100);
      }
    } catch (e2) {
    }
    const targetCompany = matchCompany(order.logistics_company);
    if (!targetCompany) {
      return {
        orderId: order.orderId,
        isSuccess: false,
        message: `未找到匹配的物流公司 ${order.logistics_company}`
      };
    }
    await deliveryCompanyInput.evaluate((e2, company) => {
      e2.value = company.text;
      e2.setAttribute("code", company.code);
    }, targetCompany);
    const deliveryButtonContainer = page2.locator("div.fh-center").first();
    const deliveryButton = deliveryButtonContainer.locator("a").first();
    const isExistDeliveryButton = await deliveryButton.isVisible();
    if (!isExistDeliveryButton) {
      return {
        orderId: order.orderId,
        isSuccess: false,
        message: "找不到发货按钮"
      };
    }
    await deliveryButton.click();
    await sleep(3e3);
    if (page2.url().includes(suningDeliveryPrefixSite)) {
      return {
        orderId: order.orderId,
        isSuccess: false,
        message: "未处理场景"
      };
    }
    await closePage(page2);
    return {
      orderId: order.orderId,
      isSuccess: true,
      snCode: snCodes.join("\n"),
      logisticsCompany: targetCompany.text
    };
  } catch (e2) {
    return {
      orderId: order.orderId,
      isSuccess: false,
      message: e2?.toString?.()
    };
  }
};
const deliveryOrders = async (ctx, orders, progress2) => {
  return Promise.all(orders.map((order) => limit(async () => {
    const result = await deliveryOrder(ctx, order);
    progress2?.();
    return result;
  })));
};
const progressString = (current, total) => {
  return total > 0 ? `${current} / ${total}` : "";
};
const workflow = async (ctx, s2) => {
  await checkIsLogin(ctx);
  s2.start("收集需要执行的订单");
  const orders = await getAllDeliveryOrderNo(ctx);
  if (typeof orders === "string") {
    s2.stop();
    Se(orders);
    process.exit(0);
  } else {
    s2.stop(`收集到 ${orders.length} 个订单`);
  }
  if (orders.length === 0) {
    Se("没有需要执行的订单");
    process.exit(0);
  }
  let collectedOrder = 0;
  s2.start(`收集订单物流信息中 ${progressString(collectedOrder, orders.length)}`);
  const deliveryIds = await getDeliveryIds(ctx, orders, () => {
    s2.message(`收集订单物流信息中 ${progressString(++collectedOrder, orders.length)}`);
  });
  const validDeliveryIds = deliveryIds.filter((deliveryId) => deliveryId.logistics_company && deliveryId.l_id);
  s2.stop(`收集到 ${validDeliveryIds.length} 个订单物流信息`);
  if (validDeliveryIds.length === 0) {
    Se("没有需要执行的订单");
    process.exit(0);
  }
  let deliveredOrder = 0;
  s2.start(`发货中 ${progressString(deliveredOrder, validDeliveryIds.length)}`);
  const deliveryResults = await deliveryOrders(ctx, validDeliveryIds, () => {
    s2.message(`发货中 ${progressString(++deliveredOrder, validDeliveryIds.length)}`);
  });
  const successResults = deliveryResults.filter((result) => result.isSuccess);
  const failedResults = deliveryResults.filter((result) => !result.isSuccess);
  generateReport(validDeliveryIds, deliveryResults);
  s2.stop(`发货结束 ${successResults.length} 个订单发货成功,${failedResults.length} 个订单发货失败,报告已生成`);
};
const getProfile = async () => {
  const profiles = getProfileNames();
  if (profiles.length === 0) {
    Se("请先安装并创建 Chrome 用户");
    process.exit(0);
  }
  if (profiles.length === 1) {
    return profiles[0];
  }
  const projectType = await ve({
    message: "选择浏览器用户",
    options: profiles.map((profile) => ({
      value: profile.realName,
      label: profile.displayName
    }))
  });
  if (typeof projectType === "string") {
    return profiles.find((profile) => profile.realName === projectType);
  }
  return projectType;
};
let browser = null;
Ie(`开始执行`);
const s = Y();
try {
  const profile = await getProfile();
  if (!profile || typeof profile === "symbol") {
    Se("执行终止");
    process.exit(0);
  }
  const shouldCloseBrowserContinue = await ye({
    message: `是否已关闭用户 ${profile?.displayName} 的 chrome 实例`
  });
  if (!shouldCloseBrowserContinue) {
    process.exit(0);
  }
  browser = new BrowserInstance();
  const ctx = await browser.createContext({ profileName: profile.realName, headless: false });
  await goToErp(ctx);
  await goToSuning(ctx);
  const shouldLoginContinue = await ye({
    message: "检查是否已登录聚水潭和苏宁云台"
  });
  if (!shouldLoginContinue) {
    await browser.close();
    process.exit(0);
  }
  while (true) {
    await workflow(ctx, s);
    const shouldContinue = await ye({
      message: "是否再次执行"
    });
    if (!shouldContinue) {
      break;
    }
  }
  Se(`执行结束，停止程序`);
} catch (error) {
  try {
    s.stop("出现异常");
  } catch (error2) {
  }
  logger.error(error);
  Se(`执行失败, ${error instanceof Error ? `${error.message} ${error.stack}` : error}`);
} finally {
  await browser?.close?.();
}
